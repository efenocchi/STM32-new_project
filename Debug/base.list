
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013be4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001330  08013d74  08013d74  00023d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080150a4  080150a4  00030664  2**0
                  CONTENTS
  4 .ARM          00000008  080150a4  080150a4  000250a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080150ac  080150ac  00030664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080150ac  080150ac  000250ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080150b0  080150b0  000250b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  080150b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae0  20000664  08015718  00030664  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004144  08015718  00034144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b508  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000628b  00000000  00000000  0006bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029a0  00000000  00000000  00071e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026d8  00000000  00000000  000747c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d548  00000000  00000000  00076ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021f6b  00000000  00000000  000a43e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109e6d  00000000  00000000  000c6353  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d01c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd78  00000000  00000000  001d023c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000664 	.word	0x20000664
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d5c 	.word	0x08013d5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000668 	.word	0x20000668
 80001cc:	08013d5c 	.word	0x08013d5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b972 	b.w	8000944 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	4688      	mov	r8, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14b      	bne.n	800071e <__udivmoddi4+0xa6>
 8000686:	428a      	cmp	r2, r1
 8000688:	4615      	mov	r5, r2
 800068a:	d967      	bls.n	800075c <__udivmoddi4+0xe4>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0720 	rsb	r7, r2, #32
 8000696:	fa01 f302 	lsl.w	r3, r1, r2
 800069a:	fa20 f707 	lsr.w	r7, r0, r7
 800069e:	4095      	lsls	r5, r2
 80006a0:	ea47 0803 	orr.w	r8, r7, r3
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b0:	fa1f fc85 	uxth.w	ip, r5
 80006b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006bc:	fb07 f10c 	mul.w	r1, r7, ip
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18eb      	adds	r3, r5, r3
 80006c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ca:	f080 811b 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8118 	bls.w	8000904 <__udivmoddi4+0x28c>
 80006d4:	3f02      	subs	r7, #2
 80006d6:	442b      	add	r3, r5
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ec:	45a4      	cmp	ip, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	192c      	adds	r4, r5, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8107 	bcs.w	8000908 <__udivmoddi4+0x290>
 80006fa:	45a4      	cmp	ip, r4
 80006fc:	f240 8104 	bls.w	8000908 <__udivmoddi4+0x290>
 8000700:	3802      	subs	r0, #2
 8000702:	442c      	add	r4, r5
 8000704:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	2700      	movs	r7, #0
 800070e:	b11e      	cbz	r6, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c6 4300 	strd	r4, r3, [r6]
 8000718:	4639      	mov	r1, r7
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	428b      	cmp	r3, r1
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0xbe>
 8000722:	2e00      	cmp	r6, #0
 8000724:	f000 80eb 	beq.w	80008fe <__udivmoddi4+0x286>
 8000728:	2700      	movs	r7, #0
 800072a:	e9c6 0100 	strd	r0, r1, [r6]
 800072e:	4638      	mov	r0, r7
 8000730:	4639      	mov	r1, r7
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	fab3 f783 	clz	r7, r3
 800073a:	2f00      	cmp	r7, #0
 800073c:	d147      	bne.n	80007ce <__udivmoddi4+0x156>
 800073e:	428b      	cmp	r3, r1
 8000740:	d302      	bcc.n	8000748 <__udivmoddi4+0xd0>
 8000742:	4282      	cmp	r2, r0
 8000744:	f200 80fa 	bhi.w	800093c <__udivmoddi4+0x2c4>
 8000748:	1a84      	subs	r4, r0, r2
 800074a:	eb61 0303 	sbc.w	r3, r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	4698      	mov	r8, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d0e0      	beq.n	8000718 <__udivmoddi4+0xa0>
 8000756:	e9c6 4800 	strd	r4, r8, [r6]
 800075a:	e7dd      	b.n	8000718 <__udivmoddi4+0xa0>
 800075c:	b902      	cbnz	r2, 8000760 <__udivmoddi4+0xe8>
 800075e:	deff      	udf	#255	; 0xff
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	2a00      	cmp	r2, #0
 8000766:	f040 808f 	bne.w	8000888 <__udivmoddi4+0x210>
 800076a:	1b49      	subs	r1, r1, r5
 800076c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000770:	fa1f f885 	uxth.w	r8, r5
 8000774:	2701      	movs	r7, #1
 8000776:	fbb1 fcfe 	udiv	ip, r1, lr
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000784:	fb08 f10c 	mul.w	r1, r8, ip
 8000788:	4299      	cmp	r1, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x124>
 800078c:	18eb      	adds	r3, r5, r3
 800078e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x122>
 8000794:	4299      	cmp	r1, r3
 8000796:	f200 80cd 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 800079a:	4684      	mov	ip, r0
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ac:	fb08 f800 	mul.w	r8, r8, r0
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x14c>
 80007b4:	192c      	adds	r4, r5, r4
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x14a>
 80007bc:	45a0      	cmp	r8, r4
 80007be:	f200 80b6 	bhi.w	800092e <__udivmoddi4+0x2b6>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 0408 	sub.w	r4, r4, r8
 80007c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007cc:	e79f      	b.n	800070e <__udivmoddi4+0x96>
 80007ce:	f1c7 0c20 	rsb	ip, r7, #32
 80007d2:	40bb      	lsls	r3, r7
 80007d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007dc:	fa01 f407 	lsl.w	r4, r1, r7
 80007e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ec:	4325      	orrs	r5, r4
 80007ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80007f2:	0c2c      	lsrs	r4, r5, #16
 80007f4:	fb08 3319 	mls	r3, r8, r9, r3
 80007f8:	fa1f fa8e 	uxth.w	sl, lr
 80007fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000800:	fb09 f40a 	mul.w	r4, r9, sl
 8000804:	429c      	cmp	r4, r3
 8000806:	fa02 f207 	lsl.w	r2, r2, r7
 800080a:	fa00 f107 	lsl.w	r1, r0, r7
 800080e:	d90b      	bls.n	8000828 <__udivmoddi4+0x1b0>
 8000810:	eb1e 0303 	adds.w	r3, lr, r3
 8000814:	f109 30ff 	add.w	r0, r9, #4294967295
 8000818:	f080 8087 	bcs.w	800092a <__udivmoddi4+0x2b2>
 800081c:	429c      	cmp	r4, r3
 800081e:	f240 8084 	bls.w	800092a <__udivmoddi4+0x2b2>
 8000822:	f1a9 0902 	sub.w	r9, r9, #2
 8000826:	4473      	add	r3, lr
 8000828:	1b1b      	subs	r3, r3, r4
 800082a:	b2ad      	uxth	r5, r5
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000838:	fb00 fa0a 	mul.w	sl, r0, sl
 800083c:	45a2      	cmp	sl, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x1da>
 8000840:	eb1e 0404 	adds.w	r4, lr, r4
 8000844:	f100 33ff 	add.w	r3, r0, #4294967295
 8000848:	d26b      	bcs.n	8000922 <__udivmoddi4+0x2aa>
 800084a:	45a2      	cmp	sl, r4
 800084c:	d969      	bls.n	8000922 <__udivmoddi4+0x2aa>
 800084e:	3802      	subs	r0, #2
 8000850:	4474      	add	r4, lr
 8000852:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000856:	fba0 8902 	umull	r8, r9, r0, r2
 800085a:	eba4 040a 	sub.w	r4, r4, sl
 800085e:	454c      	cmp	r4, r9
 8000860:	46c2      	mov	sl, r8
 8000862:	464b      	mov	r3, r9
 8000864:	d354      	bcc.n	8000910 <__udivmoddi4+0x298>
 8000866:	d051      	beq.n	800090c <__udivmoddi4+0x294>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d069      	beq.n	8000940 <__udivmoddi4+0x2c8>
 800086c:	ebb1 050a 	subs.w	r5, r1, sl
 8000870:	eb64 0403 	sbc.w	r4, r4, r3
 8000874:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000878:	40fd      	lsrs	r5, r7
 800087a:	40fc      	lsrs	r4, r7
 800087c:	ea4c 0505 	orr.w	r5, ip, r5
 8000880:	e9c6 5400 	strd	r5, r4, [r6]
 8000884:	2700      	movs	r7, #0
 8000886:	e747      	b.n	8000718 <__udivmoddi4+0xa0>
 8000888:	f1c2 0320 	rsb	r3, r2, #32
 800088c:	fa20 f703 	lsr.w	r7, r0, r3
 8000890:	4095      	lsls	r5, r2
 8000892:	fa01 f002 	lsl.w	r0, r1, r2
 8000896:	fa21 f303 	lsr.w	r3, r1, r3
 800089a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800089e:	4338      	orrs	r0, r7
 80008a0:	0c01      	lsrs	r1, r0, #16
 80008a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008a6:	fa1f f885 	uxth.w	r8, r5
 80008aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb07 f308 	mul.w	r3, r7, r8
 80008b6:	428b      	cmp	r3, r1
 80008b8:	fa04 f402 	lsl.w	r4, r4, r2
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x256>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008c4:	d22f      	bcs.n	8000926 <__udivmoddi4+0x2ae>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d92d      	bls.n	8000926 <__udivmoddi4+0x2ae>
 80008ca:	3f02      	subs	r7, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1acb      	subs	r3, r1, r3
 80008d0:	b281      	uxth	r1, r0
 80008d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008de:	fb00 f308 	mul.w	r3, r0, r8
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x27e>
 80008e6:	1869      	adds	r1, r5, r1
 80008e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ec:	d217      	bcs.n	800091e <__udivmoddi4+0x2a6>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d915      	bls.n	800091e <__udivmoddi4+0x2a6>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4429      	add	r1, r5
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008fc:	e73b      	b.n	8000776 <__udivmoddi4+0xfe>
 80008fe:	4637      	mov	r7, r6
 8000900:	4630      	mov	r0, r6
 8000902:	e709      	b.n	8000718 <__udivmoddi4+0xa0>
 8000904:	4607      	mov	r7, r0
 8000906:	e6e7      	b.n	80006d8 <__udivmoddi4+0x60>
 8000908:	4618      	mov	r0, r3
 800090a:	e6fb      	b.n	8000704 <__udivmoddi4+0x8c>
 800090c:	4541      	cmp	r1, r8
 800090e:	d2ab      	bcs.n	8000868 <__udivmoddi4+0x1f0>
 8000910:	ebb8 0a02 	subs.w	sl, r8, r2
 8000914:	eb69 020e 	sbc.w	r2, r9, lr
 8000918:	3801      	subs	r0, #1
 800091a:	4613      	mov	r3, r2
 800091c:	e7a4      	b.n	8000868 <__udivmoddi4+0x1f0>
 800091e:	4660      	mov	r0, ip
 8000920:	e7e9      	b.n	80008f6 <__udivmoddi4+0x27e>
 8000922:	4618      	mov	r0, r3
 8000924:	e795      	b.n	8000852 <__udivmoddi4+0x1da>
 8000926:	4667      	mov	r7, ip
 8000928:	e7d1      	b.n	80008ce <__udivmoddi4+0x256>
 800092a:	4681      	mov	r9, r0
 800092c:	e77c      	b.n	8000828 <__udivmoddi4+0x1b0>
 800092e:	3802      	subs	r0, #2
 8000930:	442c      	add	r4, r5
 8000932:	e747      	b.n	80007c4 <__udivmoddi4+0x14c>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	442b      	add	r3, r5
 800093a:	e72f      	b.n	800079c <__udivmoddi4+0x124>
 800093c:	4638      	mov	r0, r7
 800093e:	e708      	b.n	8000752 <__udivmoddi4+0xda>
 8000940:	4637      	mov	r7, r6
 8000942:	e6e9      	b.n	8000718 <__udivmoddi4+0xa0>

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b2f      	cmp	r3, #47	; 0x2f
 8000956:	d906      	bls.n	8000966 <Hex2Num+0x1e>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b39      	cmp	r3, #57	; 0x39
 800095c:	d803      	bhi.n	8000966 <Hex2Num+0x1e>
        return a - '0';
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3b30      	subs	r3, #48	; 0x30
 8000962:	b2db      	uxtb	r3, r3
 8000964:	e014      	b.n	8000990 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b60      	cmp	r3, #96	; 0x60
 800096a:	d906      	bls.n	800097a <Hex2Num+0x32>
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b66      	cmp	r3, #102	; 0x66
 8000970:	d803      	bhi.n	800097a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3b57      	subs	r3, #87	; 0x57
 8000976:	b2db      	uxtb	r3, r3
 8000978:	e00a      	b.n	8000990 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b40      	cmp	r3, #64	; 0x40
 800097e:	d906      	bls.n	800098e <Hex2Num+0x46>
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b46      	cmp	r3, #70	; 0x46
 8000984:	d803      	bhi.n	800098e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3b37      	subs	r3, #55	; 0x37
 800098a:	b2db      	uxtb	r3, r3
 800098c:	e000      	b.n	8000990 <Hex2Num+0x48>
    }

    return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80009ae:	e012      	b.n	80009d6 <ParseHexNumber+0x3a>
        sum <<= 4;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffc4 	bl	8000948 <Hex2Num>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
        ptr++;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
        i++;
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	3301      	adds	r3, #1
 80009d4:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b2f      	cmp	r3, #47	; 0x2f
 80009dc:	d903      	bls.n	80009e6 <ParseHexNumber+0x4a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b39      	cmp	r3, #57	; 0x39
 80009e4:	d9e4      	bls.n	80009b0 <ParseHexNumber+0x14>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b60      	cmp	r3, #96	; 0x60
 80009ec:	d903      	bls.n	80009f6 <ParseHexNumber+0x5a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b66      	cmp	r3, #102	; 0x66
 80009f4:	d9dc      	bls.n	80009b0 <ParseHexNumber+0x14>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d903      	bls.n	8000a06 <ParseHexNumber+0x6a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b46      	cmp	r3, #70	; 0x46
 8000a04:	d9d4      	bls.n	80009b0 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <ParseHexNumber+0x76>
        *cnt = i;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	7afa      	ldrb	r2, [r7, #11]
 8000a10:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b2d      	cmp	r3, #45	; 0x2d
 8000a38:	d119      	bne.n	8000a6e <ParseNumber+0x52>
        minus = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3301      	adds	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
        i++;
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a4a:	e010      	b.n	8000a6e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b30      	subs	r3, #48	; 0x30
 8000a5e:	4413      	add	r3, r2
 8000a60:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
        i++;
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b2f      	cmp	r3, #47	; 0x2f
 8000a74:	d903      	bls.n	8000a7e <ParseNumber+0x62>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b39      	cmp	r3, #57	; 0x39
 8000a7c:	d9e6      	bls.n	8000a4c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <ParseNumber+0x6e>
        *cnt = i;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	7bba      	ldrb	r2, [r7, #14]
 8000a88:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <ParseNumber+0x7a>
        return 0 - sum;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	425b      	negs	r3, r3
 8000a94:	e000      	b.n	8000a98 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000a96:	68bb      	ldr	r3, [r7, #8]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000ab2:	e019      	b.n	8000ae8 <ParseMAC+0x44>
    hexcnt = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b3a      	cmp	r3, #58	; 0x3a
 8000abe:	d00e      	beq.n	8000ade <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000ac0:	f107 030e 	add.w	r3, r7, #14
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ff68 	bl	800099c <ParseHexNumber>
 8000acc:	4601      	mov	r1, r0
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	73fa      	strb	r2, [r7, #15]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1e1      	bne.n	8000ab4 <ParseMAC+0x10>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000b06:	e019      	b.n	8000b3c <ParseIP+0x44>
    hexcnt = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b2e      	cmp	r3, #46	; 0x2e
 8000b12:	d00e      	beq.n	8000b32 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff7e 	bl	8000a1c <ParseNumber>
 8000b20:	4601      	mov	r1, r0
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	73fa      	strb	r2, [r7, #15]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e1      	bne.n	8000b08 <ParseIP+0x10>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	4934      	ldr	r1, [pc, #208]	; (8000c30 <AT_ParseInfo+0xe4>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f011 ff4b 	bl	80129fc <strtok>
 8000b66:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000b68:	e05a      	b.n	8000c20 <AT_ParseInfo+0xd4>
    switch (num++) {
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	72fa      	strb	r2, [r7, #11]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d84f      	bhi.n	8000c14 <AT_ParseInfo+0xc8>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <AT_ParseInfo+0x30>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b99 	.word	0x08000b99
 8000b80:	08000ba7 	.word	0x08000ba7
 8000b84:	08000bb7 	.word	0x08000bb7
 8000b88:	08000bc7 	.word	0x08000bc7
 8000b8c:	08000bd7 	.word	0x08000bd7
 8000b90:	08000be7 	.word	0x08000be7
 8000b94:	08000bfb 	.word	0x08000bfb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f011 fefc 	bl	801299c <strncpy>
      break;
 8000ba4:	e037      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3320      	adds	r3, #32
 8000baa:	2218      	movs	r2, #24
 8000bac:	68f9      	ldr	r1, [r7, #12]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f011 fef4 	bl	801299c <strncpy>
      break;
 8000bb4:	e02f      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3338      	adds	r3, #56	; 0x38
 8000bba:	2210      	movs	r2, #16
 8000bbc:	68f9      	ldr	r1, [r7, #12]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f011 feec 	bl	801299c <strncpy>
      break;
 8000bc4:	e027      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3348      	adds	r3, #72	; 0x48
 8000bca:	2210      	movs	r2, #16
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f011 fee4 	bl	801299c <strncpy>
      break;
 8000bd4:	e01f      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3358      	adds	r3, #88	; 0x58
 8000bda:	2210      	movs	r2, #16
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f011 fedc 	bl	801299c <strncpy>
      break;
 8000be4:	e017      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000be6:	2100      	movs	r1, #0
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff ff17 	bl	8000a1c <ParseNumber>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000bf8:	e00d      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <AT_ParseInfo+0xe8>)
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f011 fefd 	bl	80129fc <strtok>
 8000c02:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3368      	adds	r3, #104	; 0x68
 8000c08:	2220      	movs	r2, #32
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f011 fec5 	bl	801299c <strncpy>
      break;
 8000c12:	e000      	b.n	8000c16 <AT_ParseInfo+0xca>

    default: break;
 8000c14:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000c16:	4906      	ldr	r1, [pc, #24]	; (8000c30 <AT_ParseInfo+0xe4>)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f011 feef 	bl	80129fc <strtok>
 8000c1e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1a1      	bne.n	8000b6a <AT_ParseInfo+0x1e>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08013da4 	.word	0x08013da4
 8000c34:	08013da8 	.word	0x08013da8

08000c38 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	4952      	ldr	r1, [pc, #328]	; (8000d94 <AT_ParseConnSettings+0x15c>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f011 fed5 	bl	80129fc <strtok>
 8000c52:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000c54:	e095      	b.n	8000d82 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	73fa      	strb	r2, [r7, #15]
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	d87f      	bhi.n	8000d60 <AT_ParseConnSettings+0x128>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <AT_ParseConnSettings+0x30>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000ca7 	.word	0x08000ca7
 8000c70:	08000cb7 	.word	0x08000cb7
 8000c74:	08000ccb 	.word	0x08000ccb
 8000c78:	08000cdf 	.word	0x08000cdf
 8000c7c:	08000cf3 	.word	0x08000cf3
 8000c80:	08000d01 	.word	0x08000d01
 8000c84:	08000d0f 	.word	0x08000d0f
 8000c88:	08000d1d 	.word	0x08000d1d
 8000c8c:	08000d2b 	.word	0x08000d2b
 8000c90:	08000d39 	.word	0x08000d39
 8000c94:	08000d4d 	.word	0x08000d4d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2221      	movs	r2, #33	; 0x21
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f011 fe7c 	bl	801299c <strncpy>
      break;
 8000ca4:	e05d      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3321      	adds	r3, #33	; 0x21
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f011 fe74 	bl	801299c <strncpy>
      break;
 8000cb4:	e055      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f7ff feaf 	bl	8000a1c <ParseNumber>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000cc8:	e04b      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fea5 	bl	8000a1c <ParseNumber>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000cdc:	e041      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f7ff fe9b 	bl	8000a1c <ParseNumber>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000cf0:	e037      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3348      	adds	r3, #72	; 0x48
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f7ff fefd 	bl	8000af8 <ParseIP>
      break;
 8000cfe:	e030      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	334c      	adds	r3, #76	; 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff fef6 	bl	8000af8 <ParseIP>
      break;
 8000d0c:	e029      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3350      	adds	r3, #80	; 0x50
 8000d12:	4619      	mov	r1, r3
 8000d14:	68b8      	ldr	r0, [r7, #8]
 8000d16:	f7ff feef 	bl	8000af8 <ParseIP>
      break;
 8000d1a:	e022      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3354      	adds	r3, #84	; 0x54
 8000d20:	4619      	mov	r1, r3
 8000d22:	68b8      	ldr	r0, [r7, #8]
 8000d24:	f7ff fee8 	bl	8000af8 <ParseIP>
      break;
 8000d28:	e01b      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3358      	adds	r3, #88	; 0x58
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f7ff fee1 	bl	8000af8 <ParseIP>
      break;
 8000d36:	e014      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f7ff fe6e 	bl	8000a1c <ParseNumber>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000d4a:	e00a      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	68b8      	ldr	r0, [r7, #8]
 8000d50:	f7ff fe64 	bl	8000a1c <ParseNumber>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000d5e:	e000      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8000d60:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <AT_ParseConnSettings+0x15c>)
 8000d64:	2000      	movs	r0, #0
 8000d66:	f011 fe49 	bl	80129fc <strtok>
 8000d6a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <AT_ParseConnSettings+0x14a>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7a:	d102      	bne.n	8000d82 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f af66 	bne.w	8000c56 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08013da4 	.word	0x08013da4

08000d98 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3302      	adds	r3, #2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b31      	cmp	r3, #49	; 0x31
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000dde:	68b8      	ldr	r0, [r7, #8]
 8000de0:	f7ff f9f6 	bl	80001d0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b299      	uxth	r1, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000dee:	461a      	mov	r2, r3
 8000df0:	68b8      	ldr	r0, [r7, #8]
 8000df2:	47a0      	blx	r4
 8000df4:	4603      	mov	r3, r0
 8000df6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd3e      	ble.n	8000e7c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	4798      	blx	r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dd27      	ble.n	8000e6e <AT_ExecuteCommand+0xaa>
 8000e1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e26:	dc22      	bgt.n	8000e6e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000e28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e30:	d105      	bne.n	8000e3e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000e3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000e4a:	490f      	ldr	r1, [pc, #60]	; (8000e88 <AT_ExecuteCommand+0xc4>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f011 fdba 	bl	80129c6 <strstr>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e010      	b.n	8000e7e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000e5c:	490b      	ldr	r1, [pc, #44]	; (8000e8c <AT_ExecuteCommand+0xc8>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f011 fdb1 	bl	80129c6 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e007      	b.n	8000e7e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e72:	f113 0f04 	cmn.w	r3, #4
 8000e76:	d101      	bne.n	8000e7c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e000      	b.n	8000e7e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000e7c:	2304      	movs	r3, #4
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	08013db8 	.word	0x08013db8
 8000e8c:	08013dc4 	.word	0x08013dc4

08000e90 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f7ff f990 	bl	80001d0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000eb4:	8a7b      	ldrh	r3, [r7, #18]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <AT_RequestSendData+0x32>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e053      	b.n	8000f6a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000ece:	8a79      	ldrh	r1, [r7, #18]
 8000ed0:	68b8      	ldr	r0, [r7, #8]
 8000ed2:	4798      	blx	r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000ed8:	8a3a      	ldrh	r2, [r7, #16]
 8000eda:	8a7b      	ldrh	r3, [r7, #18]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d143      	bne.n	8000f68 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000eec:	8879      	ldrh	r1, [r7, #2]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000ef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d131      	bne.n	8000f64 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6a38      	ldr	r0, [r7, #32]
 8000f10:	4798      	blx	r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dd19      	ble.n	8000f52 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8000f1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f22:	6a3a      	ldr	r2, [r7, #32]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000f2a:	4912      	ldr	r1, [pc, #72]	; (8000f74 <AT_RequestSendData+0xe4>)
 8000f2c:	6a38      	ldr	r0, [r7, #32]
 8000f2e:	f011 fd4a 	bl	80129c6 <strstr>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e016      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000f3c:	490e      	ldr	r1, [pc, #56]	; (8000f78 <AT_RequestSendData+0xe8>)
 8000f3e:	6a38      	ldr	r0, [r7, #32]
 8000f40:	f011 fd41 	bl	80129c6 <strstr>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e00d      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e00b      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f56:	f113 0f04 	cmn.w	r3, #4
 8000f5a:	d101      	bne.n	8000f60 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e004      	b.n	8000f6a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000f64:	2302      	movs	r3, #2
 8000f66:	e000      	b.n	8000f6a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000f68:	2304      	movs	r3, #4
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08013db8 	.word	0x08013db8
 8000f78:	08013dc4 	.word	0x08013dc4

08000f7c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f90:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000f98:	68b8      	ldr	r0, [r7, #8]
 8000f9a:	f7ff f919 	bl	80001d0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	47a0      	blx	r4
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd6f      	ble.n	8001094 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	4798      	blx	r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d104      	bne.n	8000fdc <AT_RequestReceiveData+0x60>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d001      	beq.n	8000fe0 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e05a      	b.n	8001096 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3b02      	subs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
    p+=2;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d94a      	bls.n	8001088 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8000ff2:	e002      	b.n	8000ffa <AT_RequestReceiveData+0x7e>
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AT_RequestReceiveData+0x92>
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3b01      	subs	r3, #1
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b15      	cmp	r3, #21
 800100c:	d0f2      	beq.n	8000ff4 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4413      	add	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3b08      	subs	r3, #8
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4413      	add	r3, r2
 8001020:	491f      	ldr	r1, [pc, #124]	; (80010a0 <AT_RequestReceiveData+0x124>)
 8001022:	4618      	mov	r0, r3
 8001024:	f011 fccf 	bl	80129c6 <strstr>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b08      	subs	r3, #8
 8001034:	b29a      	uxth	r2, r3
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	429a      	cmp	r2, r3
 8001042:	d202      	bcs.n	800104a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	6939      	ldr	r1, [r7, #16]
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f011 fbb7 	bl	80127c6 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e01c      	b.n	8001096 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3b04      	subs	r3, #4
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4413      	add	r3, r2
 8001064:	2204      	movs	r2, #4
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <AT_RequestReceiveData+0x128>)
 8001068:	4618      	mov	r0, r3
 800106a:	f011 fb9d 	bl	80127a8 <memcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d104      	bne.n	800107e <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800107a:	2305      	movs	r3, #5
 800107c:	e00b      	b.n	8001096 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001084:	2305      	movs	r3, #5
 8001086:	e006      	b.n	8001096 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f113 0f04 	cmn.w	r3, #4
 800108e:	d101      	bne.n	8001094 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001090:	2306      	movs	r3, #6
 8001092:	e000      	b.n	8001096 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001094:	2304      	movs	r3, #4
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	08013db8 	.word	0x08013db8
 80010a4:	08013dcc 	.word	0x08013dcc

080010a8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80010b0:	2302      	movs	r3, #2
 80010b2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80010ba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80010c4:	2000      	movs	r0, #0
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d113      	bne.n	80010f6 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010d4:	461a      	mov	r2, r3
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <ES_WIFI_Init+0x58>)
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fe73 	bl	8000dc4 <AT_ExecuteCommand>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d106      	bne.n	80010f6 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fd2b 	bl	8000b4c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08013dd4 	.word	0x08013dd4

08001104 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001130:	2302      	movs	r3, #2
 8001132:	e014      	b.n	800115e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	4931      	ldr	r1, [pc, #196]	; (8001248 <ES_WIFI_Connect+0xdc>)
 8001184:	4618      	mov	r0, r3
 8001186:	f011 fbe1 	bl	801294c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001196:	461a      	mov	r2, r3
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fe13 	bl	8000dc4 <AT_ExecuteCommand>
 800119e:	4603      	mov	r3, r0
 80011a0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d14a      	bne.n	800123e <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4926      	ldr	r1, [pc, #152]	; (800124c <ES_WIFI_Connect+0xe0>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f011 fbca 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011c4:	461a      	mov	r2, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fdfc 	bl	8000dc4 <AT_ExecuteCommand>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d133      	bne.n	800123e <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	491a      	ldr	r1, [pc, #104]	; (8001250 <ES_WIFI_Connect+0xe4>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f011 fbaf 	bl	801294c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011fa:	461a      	mov	r2, r3
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff fde1 	bl	8000dc4 <AT_ExecuteCommand>
 8001202:	4603      	mov	r3, r0
 8001204:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d118      	bne.n	800123e <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <ES_WIFI_Connect+0xe8>)
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001224:	461a      	mov	r2, r3
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fdcc 	bl	8000dc4 <AT_ExecuteCommand>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08013dec 	.word	0x08013dec
 800124c:	08013df4 	.word	0x08013df4
 8001250:	08013dfc 	.word	0x08013dfc
 8001254:	08013e04 	.word	0x08013e04

08001258 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <ES_WIFI_IsConnected+0x54>)
 8001268:	6810      	ldr	r0, [r2, #0]
 800126a:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001278:	461a      	mov	r2, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fda2 	bl	8000dc4 <AT_ExecuteCommand>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	33d2      	adds	r3, #210	; 0xd2
 8001294:	4619      	mov	r1, r3
 8001296:	4610      	mov	r0, r2
 8001298:	f7ff fd7e 	bl	8000d98 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	08013e08 	.word	0x08013e08

080012b0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <ES_WIFI_GetNetworkSettings+0x50>)
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012d0:	461a      	mov	r2, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd76 	bl	8000dc4 <AT_ExecuteCommand>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	338d      	adds	r3, #141	; 0x8d
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f7ff fca2 	bl	8000c38 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	08013e10 	.word	0x08013e10

08001304 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <ES_WIFI_GetMACAddress+0x58>)
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001326:	461a      	mov	r2, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fd4b 	bl	8000dc4 <AT_ExecuteCommand>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800133e:	3302      	adds	r3, #2
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <ES_WIFI_GetMACAddress+0x5c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f011 fb5a 	bl	80129fc <strtok>
 8001348:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fba9 	bl	8000aa4 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	08013e6c 	.word	0x08013e6c
 8001360:	08013e70 	.word	0x08013e70

08001364 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b087      	sub	sp, #28
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <ES_WIFI_StartClientConnection+0x1e>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d105      	bne.n	800138e <ES_WIFI_StartClientConnection+0x2a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <ES_WIFI_StartClientConnection+0x2a>
 800138a:	2302      	movs	r3, #2
 800138c:	e0c3      	b.n	8001516 <ES_WIFI_StartClientConnection+0x1b2>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	461a      	mov	r2, r3
 800139a:	4961      	ldr	r1, [pc, #388]	; (8001520 <ES_WIFI_StartClientConnection+0x1bc>)
 800139c:	f011 fad6 	bl	801294c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013ac:	461a      	mov	r2, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd08 	bl	8000dc4 <AT_ExecuteCommand>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4956      	ldr	r1, [pc, #344]	; (8001524 <ES_WIFI_StartClientConnection+0x1c0>)
 80013cc:	f011 fabe 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013dc:	461a      	mov	r2, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fcf0 	bl	8000dc4 <AT_ExecuteCommand>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d114      	bne.n	8001418 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	461a      	mov	r2, r3
 80013fa:	494b      	ldr	r1, [pc, #300]	; (8001528 <ES_WIFI_StartClientConnection+0x1c4>)
 80013fc:	f011 faa6 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800140c:	461a      	mov	r2, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fcd8 	bl	8000dc4 <AT_ExecuteCommand>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11c      	bne.n	8001458 <ES_WIFI_StartClientConnection+0xf4>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <ES_WIFI_StartClientConnection+0xca>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d114      	bne.n	8001458 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	461a      	mov	r2, r3
 800143a:	493c      	ldr	r1, [pc, #240]	; (800152c <ES_WIFI_StartClientConnection+0x1c8>)
 800143c:	f011 fa86 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800144c:	461a      	mov	r2, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fcb8 	bl	8000dc4 <AT_ExecuteCommand>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d128      	bne.n	80014b0 <ES_WIFI_StartClientConnection+0x14c>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <ES_WIFI_StartClientConnection+0x10a>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d120      	bne.n	80014b0 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	4619      	mov	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	79db      	ldrb	r3, [r3, #7]
 800147e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001484:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	460a      	mov	r2, r1
 8001492:	4927      	ldr	r1, [pc, #156]	; (8001530 <ES_WIFI_StartClientConnection+0x1cc>)
 8001494:	f011 fa5a 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014a4:	461a      	mov	r2, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fc8c 	bl	8000dc4 <AT_ExecuteCommand>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d117      	bne.n	80014e6 <ES_WIFI_StartClientConnection+0x182>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d113      	bne.n	80014e6 <ES_WIFI_StartClientConnection+0x182>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <ES_WIFI_StartClientConnection+0x1d0>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	6018      	str	r0, [r3, #0]
 80014ca:	8892      	ldrh	r2, [r2, #4]
 80014cc:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014da:	461a      	mov	r2, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fc71 	bl	8000dc4 <AT_ExecuteCommand>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d113      	bne.n	8001514 <ES_WIFI_StartClientConnection+0x1b0>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <ES_WIFI_StartClientConnection+0x1d4>)
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	6018      	str	r0, [r3, #0]
 80014f8:	8892      	ldrh	r2, [r2, #4]
 80014fa:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001508:	461a      	mov	r2, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fc5a 	bl	8000dc4 <AT_ExecuteCommand>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08013ed4 	.word	0x08013ed4
 8001524:	08013edc 	.word	0x08013edc
 8001528:	08013ee4 	.word	0x08013ee4
 800152c:	08013eec 	.word	0x08013eec
 8001530:	08013ef4 	.word	0x08013ef4
 8001534:	08013f04 	.word	0x08013f04
 8001538:	08013f0c 	.word	0x08013f0c

0800153c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	460b      	mov	r3, r1
 800154a:	72fb      	strb	r3, [r7, #11]
 800154c:	4613      	mov	r3, r2
 800154e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001550:	2302      	movs	r3, #2
 8001552:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e001      	b.n	8001564 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800156a:	d302      	bcc.n	8001572 <ES_WIFI_SendData+0x36>
 800156c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001570:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	893a      	ldrh	r2, [r7, #8]
 8001576:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800157e:	7afa      	ldrb	r2, [r7, #11]
 8001580:	4942      	ldr	r1, [pc, #264]	; (800168c <ES_WIFI_SendData+0x150>)
 8001582:	4618      	mov	r0, r3
 8001584:	f011 f9e2 	bl	801294c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001594:	461a      	mov	r2, r3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff fc14 	bl	8000dc4 <AT_ExecuteCommand>
 800159c:	4603      	mov	r3, r0
 800159e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d15e      	bne.n	8001664 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4938      	ldr	r1, [pc, #224]	; (8001690 <ES_WIFI_SendData+0x154>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f011 f9cb 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fbfd 	bl	8000dc4 <AT_ExecuteCommand>
 80015ca:	4603      	mov	r3, r0
 80015cc:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 80015ce:	7cfb      	ldrb	r3, [r7, #19]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13d      	bne.n	8001650 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015da:	893a      	ldrh	r2, [r7, #8]
 80015dc:	492d      	ldr	r1, [pc, #180]	; (8001694 <ES_WIFI_SendData+0x158>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f011 f9b4 	bl	801294c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f0:	893a      	ldrh	r2, [r7, #8]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fc49 	bl	8000e90 <AT_RequestSendData>
 80015fe:	4603      	mov	r3, r0
 8001600:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001602:	7cfb      	ldrb	r3, [r7, #19]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d119      	bne.n	800163c <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800160e:	4922      	ldr	r1, [pc, #136]	; (8001698 <ES_WIFI_SendData+0x15c>)
 8001610:	4618      	mov	r0, r3
 8001612:	f011 f9d8 	bl	80129c6 <strstr>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02c      	beq.n	8001676 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800161c:	f640 025b 	movw	r2, #2139	; 0x85b
 8001620:	491e      	ldr	r1, [pc, #120]	; (800169c <ES_WIFI_SendData+0x160>)
 8001622:	481f      	ldr	r0, [pc, #124]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001624:	f011 f8e2 	bl	80127ec <iprintf>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <ES_WIFI_SendData+0x168>)
 8001632:	f011 f8db 	bl	80127ec <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001636:	2302      	movs	r3, #2
 8001638:	74fb      	strb	r3, [r7, #19]
 800163a:	e01c      	b.n	8001676 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800163c:	f640 0261 	movw	r2, #2145	; 0x861
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <ES_WIFI_SendData+0x160>)
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001644:	f011 f8d2 	bl	80127ec <iprintf>
 8001648:	4817      	ldr	r0, [pc, #92]	; (80016a8 <ES_WIFI_SendData+0x16c>)
 800164a:	f011 f943 	bl	80128d4 <puts>
 800164e:	e012      	b.n	8001676 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001650:	f640 0266 	movw	r2, #2150	; 0x866
 8001654:	4911      	ldr	r1, [pc, #68]	; (800169c <ES_WIFI_SendData+0x160>)
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001658:	f011 f8c8 	bl	80127ec <iprintf>
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <ES_WIFI_SendData+0x170>)
 800165e:	f011 f939 	bl	80128d4 <puts>
 8001662:	e008      	b.n	8001676 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001664:	f640 026b 	movw	r2, #2155	; 0x86b
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <ES_WIFI_SendData+0x160>)
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <ES_WIFI_SendData+0x164>)
 800166c:	f011 f8be 	bl	80127ec <iprintf>
 8001670:	480f      	ldr	r0, [pc, #60]	; (80016b0 <ES_WIFI_SendData+0x174>)
 8001672:	f011 f92f 	bl	80128d4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001676:	7cfb      	ldrb	r3, [r7, #19]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d102      	bne.n	8001682 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001682:	7cfb      	ldrb	r3, [r7, #19]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08013ed4 	.word	0x08013ed4
 8001690:	08014088 	.word	0x08014088
 8001694:	08014090 	.word	0x08014090
 8001698:	0801409c 	.word	0x0801409c
 800169c:	08013f64 	.word	0x08013f64
 80016a0:	08013f7c 	.word	0x08013f7c
 80016a4:	080140a4 	.word	0x080140a4
 80016a8:	080140c0 	.word	0x080140c0
 80016ac:	080140dc 	.word	0x080140dc
 80016b0:	080140f0 	.word	0x080140f0

080016b4 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
 80016c4:	4613      	mov	r3, r2
 80016c6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80016c8:	2302      	movs	r3, #2
 80016ca:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e001      	b.n	80016dc <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80016dc:	893b      	ldrh	r3, [r7, #8]
 80016de:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016e2:	f200 808a 	bhi.w	80017fa <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ec:	7afa      	ldrb	r2, [r7, #11]
 80016ee:	4945      	ldr	r1, [pc, #276]	; (8001804 <ES_WIFI_ReceiveData+0x150>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f011 f92b 	bl	801294c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001702:	461a      	mov	r2, r3
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fb5d 	bl	8000dc4 <AT_ExecuteCommand>
 800170a:	4603      	mov	r3, r0
 800170c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d164      	bne.n	80017de <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800171a:	893a      	ldrh	r2, [r7, #8]
 800171c:	493a      	ldr	r1, [pc, #232]	; (8001808 <ES_WIFI_ReceiveData+0x154>)
 800171e:	4618      	mov	r0, r3
 8001720:	f011 f914 	bl	801294c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001730:	461a      	mov	r2, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fb46 	bl	8000dc4 <AT_ExecuteCommand>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d140      	bne.n	80017c4 <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4930      	ldr	r1, [pc, #192]	; (800180c <ES_WIFI_ReceiveData+0x158>)
 800174c:	4618      	mov	r0, r3
 800174e:	f011 f8fd 	bl	801294c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175e:	461a      	mov	r2, r3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fb2f 	bl	8000dc4 <AT_ExecuteCommand>
 8001766:	4603      	mov	r3, r0
 8001768:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11f      	bne.n	80017b0 <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <ES_WIFI_ReceiveData+0x15c>)
 8001778:	6810      	ldr	r0, [r2, #0]
 800177a:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001782:	893a      	ldrh	r2, [r7, #8]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fbf5 	bl	8000f7c <AT_RequestReceiveData>
 8001792:	4603      	mov	r3, r0
 8001794:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02e      	beq.n	80017fa <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800179c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80017a0:	491c      	ldr	r1, [pc, #112]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017a2:	481d      	ldr	r0, [pc, #116]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017a4:	f011 f822 	bl	80127ec <iprintf>
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <ES_WIFI_ReceiveData+0x168>)
 80017aa:	f011 f893 	bl	80128d4 <puts>
 80017ae:	e024      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 80017b0:	f640 1201 	movw	r2, #2305	; 0x901
 80017b4:	4917      	ldr	r1, [pc, #92]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017b8:	f011 f818 	bl	80127ec <iprintf>
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <ES_WIFI_ReceiveData+0x16c>)
 80017be:	f011 f889 	bl	80128d4 <puts>
 80017c2:	e01a      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 80017c4:	f640 1206 	movw	r2, #2310	; 0x906
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017ca:	4813      	ldr	r0, [pc, #76]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017cc:	f011 f80e 	bl	80127ec <iprintf>
 80017d0:	4814      	ldr	r0, [pc, #80]	; (8001824 <ES_WIFI_ReceiveData+0x170>)
 80017d2:	f011 f87f 	bl	80128d4 <puts>
        *Receivedlen = 0;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e00d      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 80017de:	f640 120c 	movw	r2, #2316	; 0x90c
 80017e2:	490c      	ldr	r1, [pc, #48]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017e6:	f011 f801 	bl	80127ec <iprintf>
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <ES_WIFI_ReceiveData+0x174>)
 80017ec:	f011 f872 	bl	80128d4 <puts>
      issue15++;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <ES_WIFI_ReceiveData+0x178>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a0d      	ldr	r2, [pc, #52]	; (800182c <ES_WIFI_ReceiveData+0x178>)
 80017f8:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	08013ed4 	.word	0x08013ed4
 8001808:	08014114 	.word	0x08014114
 800180c:	0801411c 	.word	0x0801411c
 8001810:	08014124 	.word	0x08014124
 8001814:	08013f64 	.word	0x08013f64
 8001818:	08013f7c 	.word	0x08013f7c
 800181c:	08014128 	.word	0x08014128
 8001820:	08014148 	.word	0x08014148
 8001824:	08014160 	.word	0x08014160
 8001828:	08014180 	.word	0x08014180
 800182c:	20000680 	.word	0x20000680

08001830 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	6593      	str	r3, [r2, #88]	; 0x58
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a49      	ldr	r2, [pc, #292]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a43      	ldr	r2, [pc, #268]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189e:	483e      	ldr	r0, [pc, #248]	; (8001998 <SPI_WIFI_MspInit+0x168>)
 80018a0:	f008 fcc0 	bl	800a224 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4836      	ldr	r0, [pc, #216]	; (8001998 <SPI_WIFI_MspInit+0x168>)
 80018be:	f008 f9fd 	bl	8009cbc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <SPI_WIFI_MspInit+0x16c>)
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4831      	ldr	r0, [pc, #196]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 80018da:	f008 f9ef 	bl	8009cbc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80018de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4829      	ldr	r0, [pc, #164]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 80018fc:	f008 f9de 	bl	8009cbc <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001900:	2201      	movs	r2, #1
 8001902:	2101      	movs	r1, #1
 8001904:	4826      	ldr	r0, [pc, #152]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 8001906:	f008 fc8d 	bl	800a224 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800190a:	2301      	movs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 8001922:	f008 f9cb 	bl	8009cbc <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001938:	2306      	movs	r3, #6
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001944:	f008 f9ba 	bl	8009cbc <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800195a:	2306      	movs	r3, #6
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	480f      	ldr	r0, [pc, #60]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001966:	f008 f9a9 	bl	8009cbc <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800196a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800197c:	2306      	movs	r3, #6
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001988:	f008 f998 	bl	8009cbc <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	48000400 	.word	0x48000400
 800199c:	10110000 	.word	0x10110000
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48000800 	.word	0x48000800

080019a8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d145      	bne.n	8001a48 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <SPI_WIFI_Init+0xb8>)
 80019c0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80019c2:	4826      	ldr	r0, [pc, #152]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019c4:	f7ff ff34 	bl	8001830 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ce:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019dc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019f4:	2210      	movs	r2, #16
 80019f6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a12:	f00b f95f 	bl	800ccd4 <HAL_SPI_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e018      	b.n	8001a54 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2007      	movs	r0, #7
 8001a28:	f007 ffc3 	bl	80099b2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001a2c:	2007      	movs	r0, #7
 8001a2e:	f007 ffdc 	bl	80099ea <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2033      	movs	r0, #51	; 0x33
 8001a38:	f007 ffbb 	bl	80099b2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001a3c:	2033      	movs	r0, #51	; 0x33
 8001a3e:	f007 ffd4 	bl	80099ea <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f000 f9fe 	bl	8001e44 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001a48:	f000 f80c 	bl	8001a64 <SPI_WIFI_ResetModule>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20003028 	.word	0x20003028
 8001a60:	40003c00 	.word	0x40003c00

08001a64 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001a6a:	f007 fe99 	bl	80097a0 <HAL_GetTick>
 8001a6e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	4830      	ldr	r0, [pc, #192]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001a7c:	f008 fbd2 	bl	800a224 <HAL_GPIO_WritePin>
 8001a80:	200a      	movs	r0, #10
 8001a82:	f007 fe99 	bl	80097b8 <HAL_Delay>
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8c:	482b      	ldr	r0, [pc, #172]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001a8e:	f008 fbc9 	bl	800a224 <HAL_GPIO_WritePin>
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f007 fe8f 	bl	80097b8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001aa0:	f008 fbc0 	bl	800a224 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001aa4:	200f      	movs	r0, #15
 8001aa6:	f000 f9cd 	bl	8001e44 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001aaa:	e020      	b.n	8001aee <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	463a      	mov	r2, r7
 8001ab0:	18d1      	adds	r1, r2, r3
 8001ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4821      	ldr	r0, [pc, #132]	; (8001b40 <SPI_WIFI_ResetModule+0xdc>)
 8001aba:	f00b f9d6 	bl	800ce6a <HAL_SPI_Receive>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001ac8:	f007 fe6a 	bl	80097a0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d202      	bcs.n	8001ade <SPI_WIFI_ResetModule+0x7a>
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001ae4:	f008 fb9e 	bl	800a224 <HAL_GPIO_WritePin>
      return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e021      	b.n	8001b32 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001aee:	2102      	movs	r1, #2
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001af2:	f008 fb7f 	bl	800a1f4 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d0d7      	beq.n	8001aac <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001afc:	2201      	movs	r2, #1
 8001afe:	2101      	movs	r1, #1
 8001b00:	480e      	ldr	r0, [pc, #56]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001b02:	f008 fb8f 	bl	800a224 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001b06:	783b      	ldrb	r3, [r7, #0]
 8001b08:	2b15      	cmp	r3, #21
 8001b0a:	d10e      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b15      	cmp	r3, #21
 8001b10:	d10b      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b0d      	cmp	r3, #13
 8001b16:	d108      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001b18:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d105      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001b1e:	793b      	ldrb	r3, [r7, #4]
 8001b20:	2b3e      	cmp	r3, #62	; 0x3e
 8001b22:	d102      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d002      	beq.n	8001b30 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e000      	b.n	8001b32 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	20003028 	.word	0x20003028

08001b44 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <SPI_WIFI_DeInit+0x10>)
 8001b4a:	f00b f966 	bl	800ce1a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20003028 	.word	0x20003028

08001b58 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001b60:	f007 fe1e 	bl	80097a0 <HAL_GetTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b68:	e00a      	b.n	8001b80 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b6a:	f007 fe19 	bl	80097a0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d902      	bls.n	8001b80 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e007      	b.n	8001b90 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b80:	2102      	movs	r1, #2
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <wait_cmddata_rdy_high+0x40>)
 8001b84:	f008 fb36 	bl	800a1f4 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d1ed      	bne.n	8001b6a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	48001000 	.word	0x48001000

08001b9c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ba4:	f007 fdfc 	bl	80097a0 <HAL_GetTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001bac:	e00a      	b.n	8001bc4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bae:	f007 fdf7 	bl	80097a0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d902      	bls.n	8001bc4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e004      	b.n	8001bce <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <wait_cmddata_rdy_rising_event+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d0f0      	beq.n	8001bae <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001bcc:	2300      	movs	r3, #0
#endif
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000068c 	.word	0x2000068c

08001bdc <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001be4:	f007 fddc 	bl	80097a0 <HAL_GetTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001bec:	e00a      	b.n	8001c04 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bee:	f007 fdd7 	bl	80097a0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d902      	bls.n	8001c04 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e004      	b.n	8001c0e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <wait_spi_rx_event+0x3c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d0f0      	beq.n	8001bee <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001c0c:	2300      	movs	r3, #0
#endif
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000684 	.word	0x20000684

08001c1c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001c24:	f007 fdbc 	bl	80097a0 <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001c2c:	e00a      	b.n	8001c44 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c2e:	f007 fdb7 	bl	80097a0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d902      	bls.n	8001c44 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e004      	b.n	8001c4e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <wait_spi_tx_event+0x3c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d0f0      	beq.n	8001c2e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001c4c:	2300      	movs	r3, #0
#endif
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000688 	.word	0x20000688

08001c5c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	460b      	mov	r3, r1
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2101      	movs	r1, #1
 8001c72:	4834      	ldr	r0, [pc, #208]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001c74:	f008 fad6 	bl	800a224 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f8e3 	bl	8001e44 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff8b 	bl	8001b9c <wait_cmddata_rdy_rising_event>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da02      	bge.n	8001c92 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001c8c:	f06f 0302 	mvn.w	r3, #2
 8001c90:	e054      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001c92:	2200      	movs	r2, #0
 8001c94:	2101      	movs	r1, #1
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001c98:	f008 fac4 	bl	800a224 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001c9c:	200f      	movs	r0, #15
 8001c9e:	f000 f8d1 	bl	8001e44 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001ca2:	e03d      	b.n	8001d20 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	db02      	blt.n	8001cb4 <SPI_WIFI_ReceiveData+0x58>
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13c      	bne.n	8001d2e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <SPI_WIFI_ReceiveData+0xec>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4822      	ldr	r0, [pc, #136]	; (8001d4c <SPI_WIFI_ReceiveData+0xf0>)
 8001cc4:	f00b fca2 	bl	800d60c <HAL_SPI_Receive_IT>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	481c      	ldr	r0, [pc, #112]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001cd4:	f008 faa6 	bl	800a224 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	e02e      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff7b 	bl	8001bdc <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001ce6:	7d3a      	ldrb	r2, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	7d7a      	ldrb	r2, [r7, #21]
 8001cf2:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d0a:	db09      	blt.n	8001d20 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2101      	movs	r1, #1
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d12:	f008 fa87 	bl	800a224 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001d16:	f7ff fea5 	bl	8001a64 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d1a:	f06f 0303 	mvn.w	r3, #3
 8001d1e:	e00d      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001d20:	2102      	movs	r1, #2
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d24:	f008 fa66 	bl	800a1f4 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d0ba      	beq.n	8001ca4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d34:	f008 fa76 	bl	800a224 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	48001000 	.word	0x48001000
 8001d48:	20000684 	.word	0x20000684
 8001d4c:	20003028 	.word	0x20003028

08001d50 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fef9 	bl	8001b58 <wait_cmddata_rdy_high>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da02      	bge.n	8001d72 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	e04f      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <SPI_WIFI_SendData+0xcc>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001d7e:	f008 fa51 	bl	800a224 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f85e 	bl	8001e44 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d919      	bls.n	8001dc2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <SPI_WIFI_SendData+0xd4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4822      	ldr	r0, [pc, #136]	; (8001e28 <SPI_WIFI_SendData+0xd8>)
 8001da0:	f00b fba6 	bl	800d4f0 <HAL_SPI_Transmit_IT>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001daa:	2201      	movs	r2, #1
 8001dac:	2101      	movs	r1, #1
 8001dae:	481c      	ldr	r0, [pc, #112]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001db0:	f008 fa38 	bl	800a224 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	e02b      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff2d 	bl	8001c1c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001dd8:	230a      	movs	r3, #10
 8001dda:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <SPI_WIFI_SendData+0xd4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	2201      	movs	r2, #1
 8001de8:	4619      	mov	r1, r3
 8001dea:	480f      	ldr	r0, [pc, #60]	; (8001e28 <SPI_WIFI_SendData+0xd8>)
 8001dec:	f00b fb80 	bl	800d4f0 <HAL_SPI_Transmit_IT>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001df6:	2201      	movs	r2, #1
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001dfc:	f008 fa12 	bl	800a224 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	e005      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff07 	bl	8001c1c <wait_spi_tx_event>
    
  }
  return len;
 8001e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000068c 	.word	0x2000068c
 8001e20:	48001000 	.word	0x48001000
 8001e24:	20000688 	.word	0x20000688
 8001e28:	20003028 	.word	0x20003028

08001e2c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f007 fcbf 	bl	80097b8 <HAL_Delay>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d122      	bne.n	8001ea2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <SPI_WIFI_DelayUs+0x98>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <SPI_WIFI_DelayUs+0x9c>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001e72:	f007 fc95 	bl	80097a0 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001e78:	e002      	b.n	8001e80 <SPI_WIFI_DelayUs+0x3c>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8001e86:	f007 fc8b 	bl	80097a0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e92:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <SPI_WIFI_DelayUs+0x5e>
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <SPI_WIFI_DelayUs+0x98>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <SPI_WIFI_DelayUs+0xa0>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9a      	lsrs	r2, r3, #18
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001ec2:	e002      	b.n	8001eca <SPI_WIFI_DelayUs+0x86>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f9      	bne.n	8001ec4 <SPI_WIFI_DelayUs+0x80>
  return;
 8001ed0:	bf00      	nop
}
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000690 	.word	0x20000690
 8001edc:	2000018c 	.word	0x2000018c
 8001ee0:	10624dd3 	.word	0x10624dd3
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_SPI_RxCpltCallback+0x24>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_SPI_RxCpltCallback+0x24>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000684 	.word	0x20000684

08001f10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_SPI_TxCpltCallback+0x24>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_SPI_TxCpltCallback+0x24>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000688 	.word	0x20000688

08001f38 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SPI_WIFI_ISR+0x1c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <SPI_WIFI_ISR+0x1c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
   }
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	2000068c 	.word	0x2000068c

08001f58 <inizialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void inizialize(struct sharedValues_t *sv){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	sv->temperature_val1=0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
	sv->temperature_val2=0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
	sv->humidity_val1=0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
	sv->humidity_val2=0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
	sv->pressure_val1=0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
	sv->pressure_val2=0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
	sv->proximity=0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]

	sv->primo = osSemaphoreNew(1, 1, NULL);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2101      	movs	r1, #1
 8001f96:	2001      	movs	r0, #1
 8001f98:	f00d fa68 	bl	800f46c <osSemaphoreNew>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	61da      	str	r2, [r3, #28]
	sv->secondo = osSemaphoreNew(1, 1, NULL);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f00d fa60 	bl	800f46c <osSemaphoreNew>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	621a      	str	r2, [r3, #32]


}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <main>:
  * @retval int
  */


int main(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	   HAL_Init();
 8001fc0:	f007 fb85 	bl	80096ce <HAL_Init>

	   /* Configure the system clock */
	   SystemClock_Config();
 8001fc4:	f000 f8a0 	bl	8002108 <SystemClock_Config>
	   /* Configure LED2 */
	   BSP_LED_Init(LED2);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f006 fe4d 	bl	8008c68 <BSP_LED_Init>

      /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f006 fe8f 	bl	8008cf4 <BSP_PB_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <main+0x100>)
 8001fd8:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <main+0x104>)
 8001fda:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <main+0x100>)
 8001fde:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe2:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <main+0x100>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <main+0x100>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <main+0x100>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <main+0x100>)
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <main+0x100>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <main+0x100>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <main+0x100>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <main+0x100>)
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8002014:	4929      	ldr	r1, [pc, #164]	; (80020bc <main+0x100>)
 8002016:	2000      	movs	r0, #0
 8002018:	f006 fec2 	bl	8008da0 <BSP_COM_Init>
#endif /* TERMINAL_USE */

		MX_GPIO_Init();
 800201c:	f000 fa94 	bl	8002548 <MX_GPIO_Init>
		MX_DFSDM1_Init();
 8002020:	f000 f928 	bl	8002274 <MX_DFSDM1_Init>
		MX_I2C2_Init();
 8002024:	f000 f95e 	bl	80022e4 <MX_I2C2_Init>
		MX_QUADSPI_Init();
 8002028:	f000 f99c 	bl	8002364 <MX_QUADSPI_Init>
		MX_SPI3_Init();
 800202c:	f000 f9c0 	bl	80023b0 <MX_SPI3_Init>
		MX_USART1_UART_Init();
 8002030:	f000 f9fc 	bl	800242c <MX_USART1_UART_Init>
		MX_USART3_UART_Init();
 8002034:	f000 fa2a 	bl	800248c <MX_USART3_UART_Init>
		MX_USB_OTG_FS_PCD_Init();
 8002038:	f000 fa58 	bl	80024ec <MX_USB_OTG_FS_PCD_Init>
		BSP_TSENSOR_Init();
 800203c:	f007 f8c8 	bl	80091d0 <BSP_TSENSOR_Init>
		BSP_PSENSOR_Init();
 8002040:	f007 f898 	bl	8009174 <BSP_PSENSOR_Init>
		BSP_HSENSOR_Init();
 8002044:	f007 f868 	bl	8009118 <BSP_HSENSOR_Init>
		VL53L0X_PROXIMITY_Init();
 8002048:	f000 fc2e 	bl	80028a8 <VL53L0X_PROXIMITY_Init>


	  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 800204c:	481d      	ldr	r0, [pc, #116]	; (80020c4 <main+0x108>)
 800204e:	f010 fc41 	bl	80128d4 <puts>
	  TERMOUT("TCP Client Instructions :\n");
 8002052:	481d      	ldr	r0, [pc, #116]	; (80020c8 <main+0x10c>)
 8002054:	f010 fc3e 	bl	80128d4 <puts>
	  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8002058:	481c      	ldr	r0, [pc, #112]	; (80020cc <main+0x110>)
 800205a:	f010 fc3b 	bl	80128d4 <puts>
	  TERMOUT("   you configured using the Configuration Access Point.\n");
 800205e:	481c      	ldr	r0, [pc, #112]	; (80020d0 <main+0x114>)
 8002060:	f010 fc38 	bl	80128d4 <puts>
	  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8002064:	481b      	ldr	r0, [pc, #108]	; (80020d4 <main+0x118>)
 8002066:	f010 fc35 	bl	80128d4 <puts>
	  TERMOUT("   with port(8002).\n");
 800206a:	481b      	ldr	r0, [pc, #108]	; (80020d8 <main+0x11c>)
 800206c:	f010 fc32 	bl	80128d4 <puts>
	  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8002070:	481a      	ldr	r0, [pc, #104]	; (80020dc <main+0x120>)
 8002072:	f010 fc2f 	bl	80128d4 <puts>


		    /* Init scheduler ----------------------------------------------------------------------------*/
	  osKernelInitialize();
 8002076:	f00d f8bb 	bl	800f1f0 <osKernelInitialize>


	  /* USER CODE BEGIN RTOS_THREADS */
	  //inizialize the structure
	  inizialize(&sharedValues);
 800207a:	4819      	ldr	r0, [pc, #100]	; (80020e0 <main+0x124>)
 800207c:	f7ff ff6c 	bl	8001f58 <inizialize>
	  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002080:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <main+0x128>)
 8002082:	2100      	movs	r1, #0
 8002084:	4818      	ldr	r0, [pc, #96]	; (80020e8 <main+0x12c>)
 8002086:	f00d f91d 	bl	800f2c4 <osThreadNew>
 800208a:	4602      	mov	r2, r0
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <main+0x130>)
 800208e:	601a      	str	r2, [r3, #0]
	  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <main+0x134>)
 8002092:	2100      	movs	r1, #0
 8002094:	4817      	ldr	r0, [pc, #92]	; (80020f4 <main+0x138>)
 8002096:	f00d f915 	bl	800f2c4 <osThreadNew>
 800209a:	4602      	mov	r2, r0
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <main+0x13c>)
 800209e:	601a      	str	r2, [r3, #0]
	  proximityThreadHandle = osThreadNew(Proximity_Test, NULL, &proximityThread_attributes);
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <main+0x140>)
 80020a2:	2100      	movs	r1, #0
 80020a4:	4816      	ldr	r0, [pc, #88]	; (8002100 <main+0x144>)
 80020a6:	f00d f90d 	bl	800f2c4 <osThreadNew>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <main+0x148>)
 80020ae:	601a      	str	r2, [r3, #0]


	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	  osKernelStart();
 80020b0:	f00d f8d2 	bl	800f258 <osKernelStart>
 80020b4:	2300      	movs	r3, #0


}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20004030 	.word	0x20004030
 80020c0:	40013800 	.word	0x40013800
 80020c4:	0801425c 	.word	0x0801425c
 80020c8:	0801429c 	.word	0x0801429c
 80020cc:	080142b8 	.word	0x080142b8
 80020d0:	080142f8 	.word	0x080142f8
 80020d4:	08014330 	.word	0x08014330
 80020d8:	08014370 	.word	0x08014370
 80020dc:	08014384 	.word	0x08014384
 80020e0:	2000359c 	.word	0x2000359c
 80020e4:	08014e4c 	.word	0x08014e4c
 80020e8:	08002d49 	.word	0x08002d49
 80020ec:	200030c4 	.word	0x200030c4
 80020f0:	08014e70 	.word	0x08014e70
 80020f4:	08002fbd 	.word	0x08002fbd
 80020f8:	200036a8 	.word	0x200036a8
 80020fc:	08014e94 	.word	0x08014e94
 8002100:	0800301d 	.word	0x0800301d
 8002104:	200036a4 	.word	0x200036a4

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0b8      	sub	sp, #224	; 0xe0
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002112:	2244      	movs	r2, #68	; 0x44
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f010 fb60 	bl	80127dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2288      	movs	r2, #136	; 0x88
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f010 fb52 	bl	80127dc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002138:	f009 f9e2 	bl	800b500 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <SystemClock_Config+0x140>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <SystemClock_Config+0x140>)
 8002144:	f023 0318 	bic.w	r3, r3, #24
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800214c:	2314      	movs	r3, #20
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002152:	2301      	movs	r3, #1
 8002154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002158:	2301      	movs	r3, #1
 800215a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002164:	2360      	movs	r3, #96	; 0x60
 8002166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002170:	2301      	movs	r3, #1
 8002172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800217c:	2328      	movs	r3, #40	; 0x28
 800217e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002182:	2307      	movs	r3, #7
 8002184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002198:	4618      	mov	r0, r3
 800219a:	f009 faf1 	bl	800b780 <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80021a4:	f000 ff58 	bl	8003058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a8:	230f      	movs	r3, #15
 80021aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021ca:	2104      	movs	r1, #4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f009 febd 	bl	800bf4c <HAL_RCC_ClockConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021d8:	f000 ff3e 	bl	8003058 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <SystemClock_Config+0x144>)
 80021de:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80021f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80021f8:	2301      	movs	r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002200:	2318      	movs	r3, #24
 8002202:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002204:	2307      	movs	r3, #7
 8002206:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002208:	2302      	movs	r3, #2
 800220a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002210:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002214:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002216:	463b      	mov	r3, r7
 8002218:	4618      	mov	r0, r3
 800221a:	f00a f89b 	bl	800c354 <HAL_RCCEx_PeriphCLKConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002224:	f000 ff18 	bl	8003058 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800222c:	f009 f986 	bl	800b53c <HAL_PWREx_ControlVoltageScaling>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8002236:	f000 ff0f 	bl	8003058 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800223a:	f00a fb71 	bl	800c920 <HAL_RCCEx_EnableMSIPLLMode>
}
 800223e:	bf00      	nop
 8002240:	37e0      	adds	r7, #224	; 0xe0
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	00012085 	.word	0x00012085

08002250 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225e:	2201      	movs	r2, #1
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <__io_putchar+0x20>)
 8002262:	f00c f8ae 	bl	800e3c2 <HAL_UART_Transmit>

  return ch;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20004030 	.word	0x20004030

08002274 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_DFSDM1_Init+0x68>)
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <MX_DFSDM1_Init+0x6c>)
 800227c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002280:	2201      	movs	r2, #1
 8002282:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_DFSDM1_Init+0x68>)
 800228c:	2202      	movs	r2, #2
 800228e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_DFSDM1_Init+0x68>)
 800229e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022ac:	2204      	movs	r2, #4
 80022ae:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022be:	2200      	movs	r2, #0
 80022c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022ca:	f007 fba9 	bl	8009a20 <HAL_DFSDM_ChannelInit>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80022d4:	f000 fec0 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000308c 	.word	0x2000308c
 80022e0:	40016020 	.word	0x40016020

080022e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_I2C2_Init+0x74>)
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <MX_I2C2_Init+0x78>)
 80022ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_I2C2_Init+0x74>)
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <MX_I2C2_Init+0x7c>)
 80022f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_I2C2_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_I2C2_Init+0x74>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <MX_I2C2_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_I2C2_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <MX_I2C2_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_I2C2_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_I2C2_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800231e:	480e      	ldr	r0, [pc, #56]	; (8002358 <MX_I2C2_Init+0x74>)
 8002320:	f007 ffb0 	bl	800a284 <HAL_I2C_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800232a:	f000 fe95 	bl	8003058 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800232e:	2100      	movs	r1, #0
 8002330:	4809      	ldr	r0, [pc, #36]	; (8002358 <MX_I2C2_Init+0x74>)
 8002332:	f008 ff05 	bl	800b140 <HAL_I2CEx_ConfigAnalogFilter>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800233c:	f000 fe8c 	bl	8003058 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002340:	2100      	movs	r1, #0
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_I2C2_Init+0x74>)
 8002344:	f008 ff47 	bl	800b1d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800234e:	f000 fe83 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20003550 	.word	0x20003550
 800235c:	40005800 	.word	0x40005800
 8002360:	10909cec 	.word	0x10909cec

08002364 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <MX_QUADSPI_Init+0x48>)
 800236c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002376:	2201      	movs	r2, #1
 8002378:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002382:	2201      	movs	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002394:	f009 f938 	bl	800b608 <HAL_QSPI_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800239e:	f000 fe5b 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200036ac 	.word	0x200036ac
 80023ac:	a0001000 	.word	0xa0001000

080023b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_SPI3_Init+0x74>)
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <MX_SPI3_Init+0x78>)
 80023b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_SPI3_Init+0x74>)
 80023bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_SPI3_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <MX_SPI3_Init+0x74>)
 80023ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MX_SPI3_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <MX_SPI3_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_SPI3_Init+0x74>)
 80023de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_SPI3_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_SPI3_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_SPI3_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_SPI3_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_SPI3_Init+0x74>)
 80023fe:	2207      	movs	r2, #7
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_SPI3_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_SPI3_Init+0x74>)
 800240a:	2208      	movs	r2, #8
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_SPI3_Init+0x74>)
 8002410:	f00a fc60 	bl	800ccd4 <HAL_SPI_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800241a:	f000 fe1d 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200035c0 	.word	0x200035c0
 8002428:	40003c00 	.word	0x40003c00

0800242c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <MX_USART1_UART_Init+0x5c>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_USART1_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_USART1_UART_Init+0x58>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_USART1_UART_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002470:	f00b ff59 	bl	800e326 <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800247a:	f000 fded 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20003624 	.word	0x20003624
 8002488:	40013800 	.word	0x40013800

0800248c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <MX_USART3_UART_Init+0x5c>)
 8002494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024d0:	f00b ff29 	bl	800e326 <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024da:	f000 fdbd 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200030c8 	.word	0x200030c8
 80024e8:	40004800 	.word	0x40004800

080024ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fa:	2206      	movs	r2, #6
 80024fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002500:	2202      	movs	r2, #2
 8002502:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002506:	2202      	movs	r2, #2
 8002508:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002530:	f008 fe9d 	bl	800b26e <HAL_PCD_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800253a:	f000 fd8d 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20003148 	.word	0x20003148

08002548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800255e:	4bba      	ldr	r3, [pc, #744]	; (8002848 <MX_GPIO_Init+0x300>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4ab9      	ldr	r2, [pc, #740]	; (8002848 <MX_GPIO_Init+0x300>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4bb7      	ldr	r3, [pc, #732]	; (8002848 <MX_GPIO_Init+0x300>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	4bb4      	ldr	r3, [pc, #720]	; (8002848 <MX_GPIO_Init+0x300>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4ab3      	ldr	r2, [pc, #716]	; (8002848 <MX_GPIO_Init+0x300>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4bb1      	ldr	r3, [pc, #708]	; (8002848 <MX_GPIO_Init+0x300>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4bae      	ldr	r3, [pc, #696]	; (8002848 <MX_GPIO_Init+0x300>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4aad      	ldr	r2, [pc, #692]	; (8002848 <MX_GPIO_Init+0x300>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4bab      	ldr	r3, [pc, #684]	; (8002848 <MX_GPIO_Init+0x300>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4ba8      	ldr	r3, [pc, #672]	; (8002848 <MX_GPIO_Init+0x300>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	4aa7      	ldr	r2, [pc, #668]	; (8002848 <MX_GPIO_Init+0x300>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b2:	4ba5      	ldr	r3, [pc, #660]	; (8002848 <MX_GPIO_Init+0x300>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025be:	4ba2      	ldr	r3, [pc, #648]	; (8002848 <MX_GPIO_Init+0x300>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4aa1      	ldr	r2, [pc, #644]	; (8002848 <MX_GPIO_Init+0x300>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b9f      	ldr	r3, [pc, #636]	; (8002848 <MX_GPIO_Init+0x300>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80025dc:	489b      	ldr	r0, [pc, #620]	; (800284c <MX_GPIO_Init+0x304>)
 80025de:	f007 fe21 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f248 1104 	movw	r1, #33028	; 0x8104
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ec:	f007 fe1a 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80025f0:	2200      	movs	r2, #0
 80025f2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80025f6:	4896      	ldr	r0, [pc, #600]	; (8002850 <MX_GPIO_Init+0x308>)
 80025f8:	f007 fe14 	bl	800a224 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	f241 0181 	movw	r1, #4225	; 0x1081
 8002602:	4894      	ldr	r0, [pc, #592]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002604:	f007 fe0e 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	4891      	ldr	r0, [pc, #580]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002610:	f007 fe08 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800261a:	488f      	ldr	r0, [pc, #572]	; (8002858 <MX_GPIO_Init+0x310>)
 800261c:	f007 fe02 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002620:	2201      	movs	r2, #1
 8002622:	2120      	movs	r1, #32
 8002624:	488a      	ldr	r0, [pc, #552]	; (8002850 <MX_GPIO_Init+0x308>)
 8002626:	f007 fdfd 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	2101      	movs	r1, #1
 800262e:	4887      	ldr	r0, [pc, #540]	; (800284c <MX_GPIO_Init+0x304>)
 8002630:	f007 fdf8 	bl	800a224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002634:	f240 1315 	movw	r3, #277	; 0x115
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	487f      	ldr	r0, [pc, #508]	; (800284c <MX_GPIO_Init+0x304>)
 800264e:	f007 fb35 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002652:	236a      	movs	r3, #106	; 0x6a
 8002654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002656:	4b81      	ldr	r3, [pc, #516]	; (800285c <MX_GPIO_Init+0x314>)
 8002658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4879      	ldr	r0, [pc, #484]	; (800284c <MX_GPIO_Init+0x304>)
 8002666:	f007 fb29 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002670:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <MX_GPIO_Init+0x318>)
 8002672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4876      	ldr	r0, [pc, #472]	; (8002858 <MX_GPIO_Init+0x310>)
 8002680:	f007 fb1c 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002684:	233f      	movs	r3, #63	; 0x3f
 8002686:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002688:	230b      	movs	r3, #11
 800268a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	4870      	ldr	r0, [pc, #448]	; (8002858 <MX_GPIO_Init+0x310>)
 8002698:	f007 fb10 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800269c:	2303      	movs	r3, #3
 800269e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026ac:	2308      	movs	r3, #8
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f007 faff 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80026be:	f248 1304 	movw	r3, #33028	; 0x8104
 80026c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f007 faef 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80026de:	2308      	movs	r3, #8
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fc:	f007 fade 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002700:	2310      	movs	r3, #16
 8002702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002704:	230b      	movs	r3, #11
 8002706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002716:	f007 fad1 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800271a:	23e0      	movs	r3, #224	; 0xe0
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800272a:	2305      	movs	r3, #5
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f007 fac0 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800273c:	2301      	movs	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <MX_GPIO_Init+0x314>)
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4840      	ldr	r0, [pc, #256]	; (8002850 <MX_GPIO_Init+0x308>)
 8002750:	f007 fab4 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002754:	2302      	movs	r3, #2
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002758:	230b      	movs	r3, #11
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	483a      	ldr	r0, [pc, #232]	; (8002850 <MX_GPIO_Init+0x308>)
 8002768:	f007 faa8 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800276c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002770:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4832      	ldr	r0, [pc, #200]	; (8002850 <MX_GPIO_Init+0x308>)
 8002786:	f007 fa99 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800278a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800278e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <MX_GPIO_Init+0x314>)
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	482d      	ldr	r0, [pc, #180]	; (8002854 <MX_GPIO_Init+0x30c>)
 80027a0:	f007 fa8c 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80027a4:	f243 0381 	movw	r3, #12417	; 0x3081
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4825      	ldr	r0, [pc, #148]	; (8002854 <MX_GPIO_Init+0x30c>)
 80027be:	f007 fa7d 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80027c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <MX_GPIO_Init+0x310>)
 80027dc:	f007 fa6e 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80027e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <MX_GPIO_Init+0x314>)
 80027e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4818      	ldr	r0, [pc, #96]	; (8002858 <MX_GPIO_Init+0x310>)
 80027f6:	f007 fa61 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80027fa:	2302      	movs	r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800280a:	2305      	movs	r3, #5
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	480f      	ldr	r0, [pc, #60]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002816:	f007 fa51 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800281a:	2378      	movs	r3, #120	; 0x78
 800281c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282a:	2307      	movs	r3, #7
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002836:	f007 fa41 	bl	8009cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800283a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002840:	2312      	movs	r3, #18
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002844:	2301      	movs	r3, #1
 8002846:	e00d      	b.n	8002864 <MX_GPIO_Init+0x31c>
 8002848:	40021000 	.word	0x40021000
 800284c:	48001000 	.word	0x48001000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000c00 	.word	0x48000c00
 8002858:	48000800 	.word	0x48000800
 800285c:	10110000 	.word	0x10110000
 8002860:	10210000 	.word	0x10210000
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800286a:	2304      	movs	r3, #4
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	480b      	ldr	r0, [pc, #44]	; (80028a4 <MX_GPIO_Init+0x35c>)
 8002876:	f007 fa21 	bl	8009cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2017      	movs	r0, #23
 8002880:	f007 f897 	bl	80099b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002884:	2017      	movs	r0, #23
 8002886:	f007 f8b0 	bl	80099ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2028      	movs	r0, #40	; 0x28
 8002890:	f007 f88f 	bl	80099b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002894:	2028      	movs	r0, #40	; 0x28
 8002896:	f007 f8a8 	bl	80099ea <HAL_NVIC_EnableIRQ>

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	48000400 	.word	0x48000400

080028a8 <VL53L0X_PROXIMITY_Init>:

/* USER CODE END 4 */


static void VL53L0X_PROXIMITY_Init(void)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b0f9      	sub	sp, #484	; 0x1e4
 80028ac:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 80028b4:	f006 fbd0 	bl	8009058 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 80028b8:	f000 f85e 	bl	8002978 <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80028bc:	463b      	mov	r3, r7
 80028be:	2263      	movs	r2, #99	; 0x63
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00f ff8a 	bl	80127dc <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80028c8:	463b      	mov	r3, r7
 80028ca:	4619      	mov	r1, r3
 80028cc:	481e      	ldr	r0, [pc, #120]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 80028ce:	f000 ff6d 	bl	80037ac <VL53L0X_GetDeviceInfo>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d12f      	bne.n	8002938 <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 80028d8:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80028dc:	461a      	mov	r2, r3
 80028de:	21c0      	movs	r1, #192	; 0xc0
 80028e0:	4819      	ldr	r0, [pc, #100]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 80028e2:	f005 feb5 	bl	8008650 <VL53L0X_RdWord>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d121      	bne.n	8002930 <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 80028ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80028f0:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d122      	bne.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 80028f8:	4813      	ldr	r0, [pc, #76]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 80028fa:	f000 ff7d 	bl	80037f8 <VL53L0X_DataInit>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002906:	2201      	movs	r2, #1
 8002908:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 800290c:	4c0e      	ldr	r4, [pc, #56]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 800290e:	4668      	mov	r0, sp
 8002910:	f104 0310 	add.w	r3, r4, #16
 8002914:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8002918:	4619      	mov	r1, r3
 800291a:	f00f ff54 	bl	80127c6 <memcpy>
 800291e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002922:	f005 ff9b 	bl	800885c <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 8002926:	e00a      	b.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8002928:	4808      	ldr	r0, [pc, #32]	; (800294c <VL53L0X_PROXIMITY_Init+0xa4>)
 800292a:	f00f ffd3 	bl	80128d4 <puts>
}
 800292e:	e006      	b.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <VL53L0X_PROXIMITY_Init+0xa8>)
 8002932:	f00f ffcf 	bl	80128d4 <puts>
}
 8002936:	e002      	b.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8002938:	4806      	ldr	r0, [pc, #24]	; (8002954 <VL53L0X_PROXIMITY_Init+0xac>)
 800293a:	f00f ffcb 	bl	80128d4 <puts>
}
 800293e:	bf00      	nop
 8002940:	376c      	adds	r7, #108	; 0x6c
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	20000004 	.word	0x20000004
 800294c:	080143cc 	.word	0x080143cc
 8002950:	080143fc 	.word	0x080143fc
 8002954:	0801442c 	.word	0x0801442c

08002958 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4804      	ldr	r0, [pc, #16]	; (8002974 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 8002964:	f002 f9ae 	bl	8004cc4 <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 8002968:	89bb      	ldrh	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004

08002978 <VL53L0X_PROXIMITY_MspInit>:

static void VL53L0X_PROXIMITY_MspInit(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002986:	2301      	movs	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298a:	2302      	movs	r3, #2
 800298c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 8002994:	f007 f992 	bl	8009cbc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800299e:	f007 fc41 	bl	800a224 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80029a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a6:	f006 ff07 	bl	80097b8 <HAL_Delay>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	48000800 	.word	0x48000800

080029b8 <controlla_valori_telefono>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */

void controlla_valori_telefono(struct sharedValues_t *sv){
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b0a2      	sub	sp, #136	; 0x88
 80029bc:	af04      	add	r7, sp, #16
 80029be:	6078      	str	r0, [r7, #4]

	uint8_t TxData[] = "STM32 : Hello!\n";
 80029c0:	4b5b      	ldr	r3, [pc, #364]	; (8002b30 <controlla_valori_telefono+0x178>)
 80029c2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80029c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			int32_t ret;
			uint16_t Datalen;
			uint8_t  MAC_Addr[6];
			uint8_t  IP_Addr[4];
			char msg[30] = "";
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	831a      	strh	r2, [r3, #24]

			int32_t Socket = -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	673b      	str	r3, [r7, #112]	; 0x70

			int16_t Trials = CONNECTION_TRIAL_MAX;
 80029ea:	230a      	movs	r3, #10
 80029ec:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			char text[30];

			/*Initialize  WIFI module */
			  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80029f0:	f006 f812 	bl	8008a18 <WIFI_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80b8 	bne.w	8002b6c <controlla_valori_telefono+0x1b4>
			  {
				TERMOUT("> WIFI Module Initialized.\n");
 80029fc:	484d      	ldr	r0, [pc, #308]	; (8002b34 <controlla_valori_telefono+0x17c>)
 80029fe:	f00f ff69 	bl	80128d4 <puts>
				if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8002a02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a06:	4618      	mov	r0, r3
 8002a08:	f006 f854 	bl	8008ab4 <WIFI_GetMAC_Address>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <controlla_valori_telefono+0x8c>
				{
				  TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8002a12:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a16:	4618      	mov	r0, r3
 8002a18:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002a22:	461d      	mov	r5, r3
 8002a24:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002a28:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8002a2c:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8002a30:	9102      	str	r1, [sp, #8]
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	462b      	mov	r3, r5
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	483e      	ldr	r0, [pc, #248]	; (8002b38 <controlla_valori_telefono+0x180>)
 8002a3e:	f00f fed5 	bl	80127ec <iprintf>
 8002a42:	e005      	b.n	8002a50 <controlla_valori_telefono+0x98>
						   MAC_Addr[4],
						   MAC_Addr[5]);
				}
				else
				{
				  TERMOUT("> ERROR : CANNOT get MAC address\n");
 8002a44:	483d      	ldr	r0, [pc, #244]	; (8002b3c <controlla_valori_telefono+0x184>)
 8002a46:	f00f ff45 	bl	80128d4 <puts>
				  BSP_LED_On(LED2);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f006 f93c 	bl	8008cc8 <BSP_LED_On>
				}

				if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8002a50:	2203      	movs	r2, #3
 8002a52:	493b      	ldr	r1, [pc, #236]	; (8002b40 <controlla_valori_telefono+0x188>)
 8002a54:	483b      	ldr	r0, [pc, #236]	; (8002b44 <controlla_valori_telefono+0x18c>)
 8002a56:	f006 f80b 	bl	8008a70 <WIFI_Connect>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d15f      	bne.n	8002b20 <controlla_valori_telefono+0x168>
				{
				  TERMOUT("> es-wifi module connected \n");
 8002a60:	4839      	ldr	r0, [pc, #228]	; (8002b48 <controlla_valori_telefono+0x190>)
 8002a62:	f00f ff37 	bl	80128d4 <puts>
				  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8002a66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 f838 	bl	8008ae0 <WIFI_GetIP_Address>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d14d      	bne.n	8002b12 <controlla_valori_telefono+0x15a>
				  {
					TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8002a76:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a80:	461a      	mov	r2, r3
 8002a82:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a86:	4618      	mov	r0, r3
 8002a88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	482e      	ldr	r0, [pc, #184]	; (8002b4c <controlla_valori_telefono+0x194>)
 8002a92:	f00f feab 	bl	80127ec <iprintf>
						   IP_Addr[0],
						   IP_Addr[1],
						   IP_Addr[2],
						   IP_Addr[3]);

					TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	9200      	str	r2, [sp, #0]
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4826      	ldr	r0, [pc, #152]	; (8002b54 <controlla_valori_telefono+0x19c>)
 8002abc:	f00f fe96 	bl	80127ec <iprintf>
						   RemoteIP[1],
						   RemoteIP[2],
						   RemoteIP[3],
										 RemotePORT);

					while (Trials--)
 8002ac0:	e013      	b.n	8002aea <controlla_valori_telefono+0x132>
					{
					  if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <controlla_valori_telefono+0x1a0>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f006 f820 	bl	8008b18 <WIFI_OpenClientConnection>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <controlla_valori_telefono+0x132>
					  {
						TERMOUT("> TCP Connection opened successfully.\n");
 8002ade:	481f      	ldr	r0, [pc, #124]	; (8002b5c <controlla_valori_telefono+0x1a4>)
 8002ae0:	f00f fef8 	bl	80128d4 <puts>
						Socket = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 8002ae8:	e008      	b.n	8002afc <controlla_valori_telefono+0x144>
					while (Trials--)
 8002aea:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	3a01      	subs	r2, #1
 8002af2:	b292      	uxth	r2, r2
 8002af4:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e2      	bne.n	8002ac2 <controlla_valori_telefono+0x10a>
					  }

					}
					if(Socket == -1)
 8002afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d139      	bne.n	8002b78 <controlla_valori_telefono+0x1c0>
					{
					  TERMOUT("> ERROR : Cannot open Connection\n");
 8002b04:	4816      	ldr	r0, [pc, #88]	; (8002b60 <controlla_valori_telefono+0x1a8>)
 8002b06:	f00f fee5 	bl	80128d4 <puts>
					  BSP_LED_On(LED2);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f006 f8dc 	bl	8008cc8 <BSP_LED_On>
 8002b10:	e032      	b.n	8002b78 <controlla_valori_telefono+0x1c0>
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8002b12:	4814      	ldr	r0, [pc, #80]	; (8002b64 <controlla_valori_telefono+0x1ac>)
 8002b14:	f00f fede 	bl	80128d4 <puts>
					BSP_LED_On(LED2);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f006 f8d5 	bl	8008cc8 <BSP_LED_On>
 8002b1e:	e02b      	b.n	8002b78 <controlla_valori_telefono+0x1c0>
				  }
				}
				else
				{
				  TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8002b20:	4811      	ldr	r0, [pc, #68]	; (8002b68 <controlla_valori_telefono+0x1b0>)
 8002b22:	f00f fed7 	bl	80128d4 <puts>
				  BSP_LED_On(LED2);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f006 f8ce 	bl	8008cc8 <BSP_LED_On>
 8002b2c:	e024      	b.n	8002b78 <controlla_valori_telefono+0x1c0>
 8002b2e:	bf00      	nop
 8002b30:	0801472c 	.word	0x0801472c
 8002b34:	08014458 	.word	0x08014458
 8002b38:	08014474 	.word	0x08014474
 8002b3c:	080144a8 	.word	0x080144a8
 8002b40:	080144cc 	.word	0x080144cc
 8002b44:	080144dc 	.word	0x080144dc
 8002b48:	080144f0 	.word	0x080144f0
 8002b4c:	0801450c 	.word	0x0801450c
 8002b50:	20000000 	.word	0x20000000
 8002b54:	0801453c 	.word	0x0801453c
 8002b58:	08014570 	.word	0x08014570
 8002b5c:	0801457c 	.word	0x0801457c
 8002b60:	080145a4 	.word	0x080145a4
 8002b64:	080145c8 	.word	0x080145c8
 8002b68:	080145f8 	.word	0x080145f8
				}
			  }
			  else
			  {
				TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8002b6c:	486d      	ldr	r0, [pc, #436]	; (8002d24 <controlla_valori_telefono+0x36c>)
 8002b6e:	f00f feb1 	bl	80128d4 <puts>
				BSP_LED_On(LED2);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f006 f8a8 	bl	8008cc8 <BSP_LED_On>
			  }

			  while(1)
			  {
				 // osSemaphoreAcquire(primo, portMAX_DELAY);
				if(Socket != -1)
 8002b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d0fb      	beq.n	8002b78 <controlla_valori_telefono+0x1c0>
				{
				  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8002b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002b88:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b94:	4964      	ldr	r1, [pc, #400]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002b96:	f006 f81b 	bl	8008bd0 <WIFI_ReceiveData>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	677b      	str	r3, [r7, #116]	; 0x74
				  if(ret == WIFI_STATUS_OK)
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 80b8 	bne.w	8002d16 <controlla_valori_telefono+0x35e>
				  {
					if(Datalen > 0)
 8002ba6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0e4      	beq.n	8002b78 <controlla_valori_telefono+0x1c0>
					{
					  RxData[Datalen]=0;
 8002bae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]
					  TERMOUT("Received: %s\n",RxData);
 8002bba:	495b      	ldr	r1, [pc, #364]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002bbc:	485b      	ldr	r0, [pc, #364]	; (8002d2c <controlla_valori_telefono+0x374>)
 8002bbe:	f00f fe15 	bl	80127ec <iprintf>
					  int ritorno = atoi(RxData);
 8002bc2:	4859      	ldr	r0, [pc, #356]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002bc4:	f00f fdc2 	bl	801274c <atoi>
 8002bc8:	66b8      	str	r0, [r7, #104]	; 0x68
					  if(ritorno==45){
 8002bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bcc:	2b2d      	cmp	r3, #45	; 0x2d
 8002bce:	d10e      	bne.n	8002bee <controlla_valori_telefono+0x236>
						  ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8002bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002bd8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002bdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	2210      	movs	r2, #16
 8002be6:	f005 ffd1 	bl	8008b8c <WIFI_SendData>
 8002bea:	4603      	mov	r3, r0
 8002bec:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //PROXIMITY
					  if(ritorno == 0){
 8002bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <controlla_valori_telefono+0x26a>
						  snprintf(text, 30, "Proximity value: %d \n", sv->proximity); // puts string into buffer
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f107 000c 	add.w	r0, r7, #12
 8002bfc:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <controlla_valori_telefono+0x378>)
 8002bfe:	211e      	movs	r1, #30
 8002c00:	f00f fe70 	bl	80128e4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002c0c:	f107 010c 	add.w	r1, r7, #12
 8002c10:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	221e      	movs	r2, #30
 8002c1a:	f005 ffb7 	bl	8008b8c <WIFI_SendData>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //TEMPERATURE
					  if(ritorno==1){
 8002c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d11a      	bne.n	8002c5e <controlla_valori_telefono+0x2a6>
						  snprintf(text,30," Temperature = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f107 000c 	add.w	r0, r7, #12
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <controlla_valori_telefono+0x37c>)
 8002c3a:	211e      	movs	r1, #30
 8002c3c:	f00f fe52 	bl	80128e4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c42:	b2d8      	uxtb	r0, r3
 8002c44:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002c48:	f107 010c 	add.w	r1, r7, #12
 8002c4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	221e      	movs	r2, #30
 8002c56:	f005 ff99 	bl	8008b8c <WIFI_SendData>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //HUMIDITY
					  if(ritorno==2){
 8002c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d126      	bne.n	8002cb2 <controlla_valori_telefono+0x2fa>
						  snprintf(text,30," Humidity = %d.%02d\n\r", sv->humidity_val1, sv->humidity_val2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc6d 	bl	8000548 <__aeabi_f2d>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	460d      	mov	r5, r1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc66 	bl	8000548 <__aeabi_f2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	f107 000c 	add.w	r0, r7, #12
 8002c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c88:	e9cd 4500 	strd	r4, r5, [sp]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <controlla_valori_telefono+0x380>)
 8002c8e:	211e      	movs	r1, #30
 8002c90:	f00f fe28 	bl	80128e4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c96:	b2d8      	uxtb	r0, r3
 8002c98:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002c9c:	f107 010c 	add.w	r1, r7, #12
 8002ca0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	221e      	movs	r2, #30
 8002caa:	f005 ff6f 	bl	8008b8c <WIFI_SendData>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //PRESSSURE
					  if(ritorno==3){
 8002cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d126      	bne.n	8002d06 <controlla_valori_telefono+0x34e>
						  snprintf(text,30," Pressure = %d.%02d\n\r", sv->pressure_val1, sv->pressure_val2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc3c 	bl	8000548 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	f107 000c 	add.w	r0, r7, #12
 8002cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cdc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <controlla_valori_telefono+0x384>)
 8002ce2:	211e      	movs	r1, #30
 8002ce4:	f00f fdfe 	bl	80128e4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002cf0:	f107 010c 	add.w	r1, r7, #12
 8002cf4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	221e      	movs	r2, #30
 8002cfe:	f005 ff45 	bl	8008b8c <WIFI_SendData>
 8002d02:	4603      	mov	r3, r0
 8002d04:	677b      	str	r3, [r7, #116]	; 0x74
					  }


						  if (ret != WIFI_STATUS_OK)
 8002d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f43f af35 	beq.w	8002b78 <controlla_valori_telefono+0x1c0>
					  {
						TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 8002d0e:	480c      	ldr	r0, [pc, #48]	; (8002d40 <controlla_valori_telefono+0x388>)
 8002d10:	f00f fde0 	bl	80128d4 <puts>
						break;
 8002d14:	e002      	b.n	8002d1c <controlla_valori_telefono+0x364>
					  }
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <controlla_valori_telefono+0x38c>)
 8002d18:	f00f fddc 	bl	80128d4 <puts>
			  }




}
 8002d1c:	bf00      	nop
 8002d1e:	3778      	adds	r7, #120	; 0x78
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdb0      	pop	{r4, r5, r7, pc}
 8002d24:	08014620 	.word	0x08014620
 8002d28:	20000694 	.word	0x20000694
 8002d2c:	08014650 	.word	0x08014650
 8002d30:	08014660 	.word	0x08014660
 8002d34:	08014678 	.word	0x08014678
 8002d38:	08014694 	.word	0x08014694
 8002d3c:	080146ac 	.word	0x080146ac
 8002d40:	080146c4 	.word	0x080146c4
 8002d44:	080146f8 	.word	0x080146f8

08002d48 <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *arguments)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

	controlla_valori_telefono(&sharedValues);
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <StartDefaultTask+0x18>)
 8002d52:	f7ff fe31 	bl	80029b8 <controlla_valori_telefono>



}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000359c 	.word	0x2000359c

08002d64 <stampa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */

void stampa(struct sharedValues_t *sv){
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b0a3      	sub	sp, #140	; 0x8c
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	6078      	str	r0, [r7, #4]
	 osSemaphoreAcquire(sv->secondo, portMAX_DELAY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00c fc17 	bl	800f5a8 <osSemaphoreAcquire>

		float temperature,humidity,pressure;
		float separa = 0;
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
		int val1,val2;
		char msg_t[30] = "";
 8002d80:	2300      	movs	r3, #0
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
 8002d94:	615a      	str	r2, [r3, #20]
 8002d96:	831a      	strh	r2, [r3, #24]
		char msg_h[30] = "";
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	831a      	strh	r2, [r3, #24]
		char msg_p[30] = "";
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	615a      	str	r2, [r3, #20]
 8002dc6:	831a      	strh	r2, [r3, #24]

		temperature = BSP_TSENSOR_ReadTemp();
 8002dc8:	f006 fa1e 	bl	8009208 <BSP_TSENSOR_ReadTemp>
 8002dcc:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
		humidity = BSP_HSENSOR_ReadHumidity();
 8002dd0:	f006 f9c2 	bl	8009158 <BSP_HSENSOR_ReadHumidity>
 8002dd4:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		pressure = BSP_PSENSOR_ReadPressure();
 8002dd8:	f006 f9ec 	bl	80091b4 <BSP_PSENSOR_ReadPressure>
 8002ddc:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70

		val1 = temperature;
 8002de0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de8:	ee17 3a90 	vmov	r3, s15
 8002dec:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = temperature - val1;
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8002e04:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e08:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002fa8 <stampa+0x244>
 8002e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e10:	ee17 0a90 	vmov	r0, s15
 8002e14:	f7fd fb98 	bl	8000548 <__aeabi_f2d>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	ec44 3b10 	vmov	d0, r3, r4
 8002e20:	f010 ff62 	bl	8013ce8 <trunc>
 8002e24:	ec54 3b10 	vmov	r3, r4, d0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f7fd fbe4 	bl	80005f8 <__aeabi_d2iz>
 8002e30:	4603      	mov	r3, r0
 8002e32:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->temperature_val1 = val1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e38:	601a      	str	r2, [r3, #0]
		sv->temperature_val2 = val2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e3e:	605a      	str	r2, [r3, #4]
		snprintf(msg_t,30," TEMPERATURE = %d.%02d\n\r", val1, val2);
 8002e40:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	4a58      	ldr	r2, [pc, #352]	; (8002fac <stampa+0x248>)
 8002e4c:	211e      	movs	r1, #30
 8002e4e:	f00f fd49 	bl	80128e4 <sniprintf>


		HAL_UART_Transmit(&huart1, (uint8_t*) msg_t, sizeof(msg_t), 1000);
 8002e52:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	221e      	movs	r2, #30
 8002e5c:	4854      	ldr	r0, [pc, #336]	; (8002fb0 <stampa+0x24c>)
 8002e5e:	f00b fab0 	bl	800e3c2 <HAL_UART_Transmit>

		val1 = humidity;
 8002e62:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6a:	ee17 3a90 	vmov	r3, s15
 8002e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = humidity - val1;
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e82:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8002e86:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e8a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002fa8 <stampa+0x244>
 8002e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e92:	ee17 0a90 	vmov	r0, s15
 8002e96:	f7fd fb57 	bl	8000548 <__aeabi_f2d>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	ec44 3b10 	vmov	d0, r3, r4
 8002ea2:	f010 ff21 	bl	8013ce8 <trunc>
 8002ea6:	ec54 3b10 	vmov	r3, r4, d0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4621      	mov	r1, r4
 8002eae:	f7fd fba3 	bl	80005f8 <__aeabi_d2iz>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->humidity_val1 = val1;
 8002eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	edc3 7a02 	vstr	s15, [r3, #8]
		sv->humidity_val2 = val2;
 8002ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	edc3 7a03 	vstr	s15, [r3, #12]
		snprintf(msg_h,30," humidity = %d.%02d\n\r", val1, val2);
 8002ed6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee0:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <stampa+0x250>)
 8002ee2:	211e      	movs	r1, #30
 8002ee4:	f00f fcfe 	bl	80128e4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg_h, sizeof(msg_h), 1000);
 8002ee8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef0:	221e      	movs	r2, #30
 8002ef2:	482f      	ldr	r0, [pc, #188]	; (8002fb0 <stampa+0x24c>)
 8002ef4:	f00b fa65 	bl	800e3c2 <HAL_UART_Transmit>


		val1 = pressure;
 8002ef8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f00:	ee17 3a90 	vmov	r3, s15
 8002f04:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = pressure - val1;
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f10:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f18:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8002f1c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f20:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002fa8 <stampa+0x244>
 8002f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f28:	ee17 0a90 	vmov	r0, s15
 8002f2c:	f7fd fb0c 	bl	8000548 <__aeabi_f2d>
 8002f30:	4603      	mov	r3, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	ec44 3b10 	vmov	d0, r3, r4
 8002f38:	f010 fed6 	bl	8013ce8 <trunc>
 8002f3c:	ec54 3b10 	vmov	r3, r4, d0
 8002f40:	4618      	mov	r0, r3
 8002f42:	4621      	mov	r1, r4
 8002f44:	f7fd fb58 	bl	80005f8 <__aeabi_d2iz>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->pressure_val1 = val1;
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	edc3 7a04 	vstr	s15, [r3, #16]
		sv->pressure_val2 = val2;
 8002f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edc3 7a05 	vstr	s15, [r3, #20]
		snprintf(msg_p,30," pressure = %d.%02d\n\r", val1, val2);
 8002f6c:	f107 0008 	add.w	r0, r7, #8
 8002f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <stampa+0x254>)
 8002f78:	211e      	movs	r1, #30
 8002f7a:	f00f fcb3 	bl	80128e4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg_p, sizeof(msg_p), 1000);
 8002f7e:	f107 0108 	add.w	r1, r7, #8
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	221e      	movs	r2, #30
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <stampa+0x24c>)
 8002f8a:	f00b fa1a 	bl	800e3c2 <HAL_UART_Transmit>



  osSemaphoreRelease(sv->secondo);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00c fb6e 	bl	800f674 <osSemaphoreRelease>
  osDelay(500);
 8002f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f9c:	f00c fa38 	bl	800f410 <osDelay>
}
 8002fa0:	bf00      	nop
 8002fa2:	3784      	adds	r7, #132	; 0x84
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd90      	pop	{r4, r7, pc}
 8002fa8:	42c80000 	.word	0x42c80000
 8002fac:	0801473c 	.word	0x0801473c
 8002fb0:	20003624 	.word	0x20003624
 8002fb4:	08014758 	.word	0x08014758
 8002fb8:	08014770 	.word	0x08014770

08002fbc <StartTask02>:
void StartTask02(void *arguments)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  stampa(&sharedValues);
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <StartTask02+0x10>)
 8002fc6:	f7ff fecd 	bl	8002d64 <stampa>
 8002fca:	e7fb      	b.n	8002fc4 <StartTask02+0x8>
 8002fcc:	2000359c 	.word	0x2000359c

08002fd0 <aggiorna_contatore>:
  }
  /* USER CODE END StartTask02 */
}

void aggiorna_contatore(struct sharedValues_t *sv){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
	uint16_t prox_value = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	817b      	strh	r3, [r7, #10]



	//prendo il mutex
	osSemaphoreAcquire(sv->primo, portMAX_DELAY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f00c fadd 	bl	800f5a8 <osSemaphoreAcquire>

	prox_value = VL53L0X_PROXIMITY_GetDistance();
 8002fee:	f7ff fcb3 	bl	8002958 <VL53L0X_PROXIMITY_GetDistance>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	817b      	strh	r3, [r7, #10]
	printf("DISTANCE is = %d mm \n", prox_value);
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4807      	ldr	r0, [pc, #28]	; (8003018 <aggiorna_contatore+0x48>)
 8002ffc:	f00f fbf6 	bl	80127ec <iprintf>

	sv->proximity = prox_value;
 8003000:	897a      	ldrh	r2, [r7, #10]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
	//printf("DISTANCE is = %d mm \n", prox_value);
	osSemaphoreRelease(sv->primo);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4618      	mov	r0, r3
 800300c:	f00c fb32 	bl	800f674 <osSemaphoreRelease>

}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08014788 	.word	0x08014788

0800301c <Proximity_Test>:

void Proximity_Test(void *arguments)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  printf("\n*************************************************************\n");
 8003024:	4808      	ldr	r0, [pc, #32]	; (8003048 <Proximity_Test+0x2c>)
 8003026:	f00f fc55 	bl	80128d4 <puts>
  printf("\n********************** Proximity Test ************************\n");
 800302a:	4808      	ldr	r0, [pc, #32]	; (800304c <Proximity_Test+0x30>)
 800302c:	f00f fc52 	bl	80128d4 <puts>
  printf("\n*************************************************************\n\n");
 8003030:	4807      	ldr	r0, [pc, #28]	; (8003050 <Proximity_Test+0x34>)
 8003032:	f00f fc4f 	bl	80128d4 <puts>


  while(1)
  {

	  	  aggiorna_contatore(&sharedValues);
 8003036:	4807      	ldr	r0, [pc, #28]	; (8003054 <Proximity_Test+0x38>)
 8003038:	f7ff ffca 	bl	8002fd0 <aggiorna_contatore>
	  	  HAL_Delay(1000);
 800303c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003040:	f006 fbba 	bl	80097b8 <HAL_Delay>
	  	  aggiorna_contatore(&sharedValues);
 8003044:	e7f7      	b.n	8003036 <Proximity_Test+0x1a>
 8003046:	bf00      	nop
 8003048:	080147a0 	.word	0x080147a0
 800304c:	080147e0 	.word	0x080147e0
 8003050:	08014820 	.word	0x08014820
 8003054:	2000359c 	.word	0x2000359c

08003058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d000      	beq.n	8003078 <HAL_GPIO_EXTI_Callback+0x12>
      SPI_WIFI_ISR();
      break;
    }
    default:
    {
      break;
 8003076:	e002      	b.n	800307e <HAL_GPIO_EXTI_Callback+0x18>
      SPI_WIFI_ISR();
 8003078:	f7fe ff5e 	bl	8001f38 <SPI_WIFI_ISR>
      break;
 800307c:	bf00      	nop
    }
  }
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <SPI3_IRQHandler+0x10>)
 800308e:	f00a fc1d 	bl	800d8cc <HAL_SPI_IRQHandler>
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20003028 	.word	0x20003028

0800309c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_MspInit+0x44>)
 80030a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a6:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_MspInit+0x44>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6613      	str	r3, [r2, #96]	; 0x60
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_MspInit+0x44>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_MspInit+0x44>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_MspInit+0x44>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_MspInit+0x44>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d128      	bne.n	8003156 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_DFSDM_ChannelMspInit+0x80>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_DFSDM_ChannelMspInit+0x80>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6613      	str	r3, [r2, #96]	; 0x60
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_DFSDM_ChannelMspInit+0x80>)
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_DFSDM_ChannelMspInit+0x80>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	4a10      	ldr	r2, [pc, #64]	; (8003164 <HAL_DFSDM_ChannelMspInit+0x80>)
 8003122:	f043 0310 	orr.w	r3, r3, #16
 8003126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_DFSDM_ChannelMspInit+0x80>)
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003134:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003146:	2306      	movs	r3, #6
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003152:	f006 fdb3 	bl	8009cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000888 	.word	0x20000888
 8003164:	40021000 	.word	0x40021000
 8003168:	48001000 	.word	0x48001000

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_I2C_MspInit+0x7c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d128      	bne.n	80031e0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_I2C_MspInit+0x80>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a16      	ldr	r2, [pc, #88]	; (80031ec <HAL_I2C_MspInit+0x80>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_I2C_MspInit+0x80>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80031a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ac:	2312      	movs	r3, #18
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031b8:	2304      	movs	r3, #4
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	480b      	ldr	r0, [pc, #44]	; (80031f0 <HAL_I2C_MspInit+0x84>)
 80031c4:	f006 fd7a 	bl	8009cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_I2C_MspInit+0x80>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_I2C_MspInit+0x80>)
 80031ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031d2:	6593      	str	r3, [r2, #88]	; 0x58
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_I2C_MspInit+0x80>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40005800 	.word	0x40005800
 80031ec:	40021000 	.word	0x40021000
 80031f0:	48000400 	.word	0x48000400

080031f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <HAL_I2C_MspDeInit+0x3c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10f      	bne.n	8003226 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_I2C_MspDeInit+0x40>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_I2C_MspDeInit+0x40>)
 800320c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003210:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003216:	4808      	ldr	r0, [pc, #32]	; (8003238 <HAL_I2C_MspDeInit+0x44>)
 8003218:	f006 fef8 	bl	800a00c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800321c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003220:	4805      	ldr	r0, [pc, #20]	; (8003238 <HAL_I2C_MspDeInit+0x44>)
 8003222:	f006 fef3 	bl	800a00c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40005800 	.word	0x40005800
 8003234:	40021000 	.word	0x40021000
 8003238:	48000400 	.word	0x48000400

0800323c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_QSPI_MspInit+0x7c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d128      	bne.n	80032b0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_QSPI_MspInit+0x80>)
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_QSPI_MspInit+0x80>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6513      	str	r3, [r2, #80]	; 0x50
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_QSPI_MspInit+0x80>)
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_QSPI_MspInit+0x80>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <HAL_QSPI_MspInit+0x80>)
 800327c:	f043 0310 	orr.w	r3, r3, #16
 8003280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_QSPI_MspInit+0x80>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800328e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003292:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032a0:	230a      	movs	r3, #10
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_QSPI_MspInit+0x84>)
 80032ac:	f006 fd06 	bl	8009cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80032b0:	bf00      	nop
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	a0001000 	.word	0xa0001000
 80032bc:	40021000 	.word	0x40021000
 80032c0:	48001000 	.word	0x48001000

080032c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <HAL_SPI_MspInit+0x7c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d128      	bne.n	8003338 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_SPI_MspInit+0x80>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	4a16      	ldr	r2, [pc, #88]	; (8003344 <HAL_SPI_MspInit+0x80>)
 80032ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f0:	6593      	str	r3, [r2, #88]	; 0x58
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_SPI_MspInit+0x80>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_SPI_MspInit+0x80>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <HAL_SPI_MspInit+0x80>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_SPI_MspInit+0x80>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003316:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003328:	2306      	movs	r3, #6
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <HAL_SPI_MspInit+0x84>)
 8003334:	f006 fcc2 	bl	8009cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003338:	bf00      	nop
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40003c00 	.word	0x40003c00
 8003344:	40021000 	.word	0x40021000
 8003348:	48000800 	.word	0x48000800

0800334c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_SPI_MspDeInit+0x30>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10a      	bne.n	8003374 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_SPI_MspDeInit+0x34>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_SPI_MspDeInit+0x34>)
 8003364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003368:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800336a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <HAL_SPI_MspDeInit+0x38>)
 8003370:	f006 fe4c 	bl	800a00c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40003c00 	.word	0x40003c00
 8003380:	40021000 	.word	0x40021000
 8003384:	48000800 	.word	0x48000800

08003388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	; 0x30
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <HAL_UART_MspInit+0xd8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d128      	bne.n	80033fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_UART_MspInit+0xdc>)
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	4a2d      	ldr	r2, [pc, #180]	; (8003464 <HAL_UART_MspInit+0xdc>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b4:	6613      	str	r3, [r2, #96]	; 0x60
 80033b6:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_UART_MspInit+0xdc>)
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_UART_MspInit+0xdc>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	4a27      	ldr	r2, [pc, #156]	; (8003464 <HAL_UART_MspInit+0xdc>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_UART_MspInit+0xdc>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80033da:	23c0      	movs	r3, #192	; 0xc0
 80033dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e6:	2303      	movs	r3, #3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033ea:	2307      	movs	r3, #7
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ee:	f107 031c 	add.w	r3, r7, #28
 80033f2:	4619      	mov	r1, r3
 80033f4:	481c      	ldr	r0, [pc, #112]	; (8003468 <HAL_UART_MspInit+0xe0>)
 80033f6:	f006 fc61 	bl	8009cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033fa:	e02d      	b.n	8003458 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_UART_MspInit+0xe4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d128      	bne.n	8003458 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_UART_MspInit+0xdc>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_UART_MspInit+0xdc>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6593      	str	r3, [r2, #88]	; 0x58
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_UART_MspInit+0xdc>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_UART_MspInit+0xdc>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <HAL_UART_MspInit+0xdc>)
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_UART_MspInit+0xdc>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003448:	2307      	movs	r3, #7
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	4619      	mov	r1, r3
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <HAL_UART_MspInit+0xe8>)
 8003454:	f006 fc32 	bl	8009cbc <HAL_GPIO_Init>
}
 8003458:	bf00      	nop
 800345a:	3730      	adds	r7, #48	; 0x30
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40013800 	.word	0x40013800
 8003464:	40021000 	.word	0x40021000
 8003468:	48000400 	.word	0x48000400
 800346c:	40004800 	.word	0x40004800
 8003470:	48000c00 	.word	0x48000c00

08003474 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003494:	d154      	bne.n	8003540 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80034ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c6:	f006 fbf9 	bl	8009cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80034ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034dc:	230a      	movs	r3, #10
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ea:	f006 fbe7 	bl	8009cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 80034f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d114      	bne.n	800353c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	6593      	str	r3, [r2, #88]	; 0x58
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800352a:	f008 f85d 	bl	800b5e8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <HAL_PCD_MspInit+0xd4>)
 8003534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800353a:	e001      	b.n	8003540 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800353c:	f008 f854 	bl	800b5e8 <HAL_PWREx_EnableVddUSB>
}
 8003540:	bf00      	nop
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000

0800354c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <MemManage_Handler+0x4>

08003566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <BusFault_Handler+0x4>

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler+0x4>

08003572 <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003584:	f006 f8f8 	bl	8009778 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003588:	f00d ffaa 	bl	80114e0 <xTaskGetSchedulerState>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d001      	beq.n	8003596 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003592:	f00e fe79 	bl	8012288 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}

0800359a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800359e:	2020      	movs	r0, #32
 80035a0:	f006 fe58 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80035a4:	2040      	movs	r0, #64	; 0x40
 80035a6:	f006 fe55 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80035aa:	2080      	movs	r0, #128	; 0x80
 80035ac:	f006 fe52 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80035b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035b4:	f006 fe4e 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI1_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80035c0:	2002      	movs	r0, #2
 80035c2:	f006 fe47 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}

080035ca <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80035ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035d2:	f006 fe3f 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80035d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035da:	f006 fe3b 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80035de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035e2:	f006 fe37 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80035e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035ea:	f006 fe33 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80035ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80035f2:	f006 fe2f 	bl	800a254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e00a      	b.n	8003622 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800360c:	f3af 8000 	nop.w
 8003610:	4601      	mov	r1, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	60ba      	str	r2, [r7, #8]
 8003618:	b2ca      	uxtb	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	429a      	cmp	r2, r3
 8003628:	dbf0      	blt.n	800360c <_read+0x12>
	}

return len;
 800362a:	687b      	ldr	r3, [r7, #4]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e009      	b.n	800365a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	60ba      	str	r2, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fdfe 	bl	8002250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	dbf1      	blt.n	8003646 <_write+0x12>
	}
	return len;
 8003662:	687b      	ldr	r3, [r7, #4]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_close>:

int _close(int file)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	return -1;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003694:	605a      	str	r2, [r3, #4]
	return 0;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_isatty>:

int _isatty(int file)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	return 1;
 80036ac:	2301      	movs	r3, #1
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
	return 0;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <_sbrk+0x5c>)
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <_sbrk+0x60>)
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <_sbrk+0x64>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <_sbrk+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003704:	f00f f826 	bl	8012754 <__errno>
 8003708:	4602      	mov	r2, r0
 800370a:	230c      	movs	r3, #12
 800370c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	e009      	b.n	8003728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <_sbrk+0x64>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <_sbrk+0x64>)
 8003724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20018000 	.word	0x20018000
 8003734:	00000400 	.word	0x00000400
 8003738:	2000088c 	.word	0x2000088c
 800373c:	20004148 	.word	0x20004148

08003740 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003744:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <SystemInit+0x64>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <SystemInit+0x64>)
 800374c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <SystemInit+0x68>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <SystemInit+0x68>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <SystemInit+0x68>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <SystemInit+0x68>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <SystemInit+0x68>)
 800376c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003770:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003774:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <SystemInit+0x68>)
 8003778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800377c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <SystemInit+0x68>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <SystemInit+0x68>)
 8003784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <SystemInit+0x68>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <SystemInit+0x64>)
 8003792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003796:	609a      	str	r2, [r3, #8]
#endif
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	40021000 	.word	0x40021000

080037ac <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f004 fdfb 	bl	80083b8 <VL53L0X_get_device_info>
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 fc6f 	bl	80050c6 <VL53L0X_get_offset_calibration_data_micro_meter>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80037ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b094      	sub	sp, #80	; 0x50
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003806:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800380e:	2200      	movs	r2, #0
 8003810:	2188      	movs	r1, #136	; 0x88
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f004 ff90 	bl	8008738 <VL53L0X_WrByte>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800382c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003836:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a71      	ldr	r2, [pc, #452]	; (8003a04 <VL53L0X_DataInit+0x20c>)
 800383e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a70      	ldr	r2, [pc, #448]	; (8003a08 <VL53L0X_DataInit+0x210>)
 8003846:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa5a 	bl	8003d10 <VL53L0X_GetDeviceParameters>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8003862:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003866:	2b00      	cmp	r3, #0
 8003868:	d112      	bne.n	8003890 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800386a:	2300      	movs	r3, #0
 800386c:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800386e:	2300      	movs	r3, #0
 8003870:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f103 0410 	add.w	r4, r3, #16
 8003878:	f107 0508 	add.w	r5, r7, #8
 800387c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003888:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800388c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2264      	movs	r2, #100	; 0x64
 8003894:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800389e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038a8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80038b2:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038be:	2300      	movs	r3, #0
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c2:	e014      	b.n	80038ee <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 80038c4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d114      	bne.n	80038f6 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80038cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2201      	movs	r2, #1
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fd83 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	3301      	adds	r3, #1
 80038ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	dde7      	ble.n	80038c4 <VL53L0X_DataInit+0xcc>
 80038f4:	e000      	b.n	80038f8 <VL53L0X_DataInit+0x100>
		else
			break;
 80038f6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80038f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003900:	2200      	movs	r2, #0
 8003902:	2102      	movs	r1, #2
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fd6b 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003910:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003918:	2200      	movs	r2, #0
 800391a:	2103      	movs	r1, #3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fd5f 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003928:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003930:	2200      	movs	r2, #0
 8003932:	2104      	movs	r1, #4
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fd53 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003940:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003948:	2200      	movs	r2, #0
 800394a:	2105      	movs	r1, #5
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fd47 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003958:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003960:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003964:	2100      	movs	r1, #0
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fdea 	bl	8004540 <VL53L0X_SetLimitCheckValue>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003972:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800397a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800397e:	2101      	movs	r1, #1
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fddd 	bl	8004540 <VL53L0X_SetLimitCheckValue>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800398c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003994:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003998:	2102      	movs	r1, #2
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fdd0 	bl	8004540 <VL53L0X_SetLimitCheckValue>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039a6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039ae:	2200      	movs	r2, #0
 80039b0:	2103      	movs	r1, #3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fdc4 	bl	8004540 <VL53L0X_SetLimitCheckValue>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039be:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80039ce:	22ff      	movs	r2, #255	; 0xff
 80039d0:	2101      	movs	r1, #1
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f004 feb0 	bl	8008738 <VL53L0X_WrByte>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80039e6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80039f6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3750      	adds	r7, #80	; 0x50
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bdb0      	pop	{r4, r5, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	00016b85 	.word	0x00016b85
 8003a08:	000970a4 	.word	0x000970a4

08003a0c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b09e      	sub	sp, #120	; 0x78
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f00e feda 	bl	80127dc <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003a48:	2101      	movs	r1, #1
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f002 fa8e 	bl	8005f6c <VL53L0X_get_info_from_device>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003a5c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d80d      	bhi.n	8003a8c <VL53L0X_StaticInit+0x80>
 8003a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d102      	bne.n	8003a7e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d806      	bhi.n	8003a8c <VL53L0X_StaticInit+0x80>
 8003a7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d90b      	bls.n	8003aa4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003a8c:	f107 0218 	add.w	r2, r7, #24
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f001 fd10 	bl	80054bc <VL53L0X_perform_ref_spad_management>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003aa2:	e009      	b.n	8003ab8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 ff11 	bl	80058d4 <VL53L0X_set_reference_spads>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003ab8:	4b94      	ldr	r3, [pc, #592]	; (8003d0c <VL53L0X_StaticInit+0x300>)
 8003aba:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003abc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ade:	e001      	b.n	8003ae4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003ae0:	4b8a      	ldr	r3, [pc, #552]	; (8003d0c <VL53L0X_StaticInit+0x300>)
 8003ae2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003ae4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003aec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f003 fde4 	bl	80076bc <VL53L0X_load_tuning_settings>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003afa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2304      	movs	r3, #4
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f001 f909 	bl	8004d24 <VL53L0X_SetGpioConfig>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b18:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d121      	bne.n	8003b64 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b20:	2201      	movs	r2, #1
 8003b22:	21ff      	movs	r1, #255	; 0xff
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f004 fe07 	bl	8008738 <VL53L0X_WrByte>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003b30:	f107 031a 	add.w	r3, r7, #26
 8003b34:	461a      	mov	r2, r3
 8003b36:	2184      	movs	r1, #132	; 0x84
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f004 fd89 	bl	8008650 <VL53L0X_RdWord>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	21ff      	movs	r1, #255	; 0xff
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f004 fdf1 	bl	8008738 <VL53L0X_WrByte>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003b6c:	8b7b      	ldrh	r3, [r7, #26]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	461a      	mov	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003b78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d108      	bne.n	8003b92 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8c2 	bl	8003d10 <VL53L0X_GetDeviceParameters>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003b92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d110      	bne.n	8003bbc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003b9a:	f107 0319 	add.w	r3, r7, #25
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f9a0 	bl	8003ee6 <VL53L0X_GetFractionEnable>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003bac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003bb4:	7e7a      	ldrb	r2, [r7, #25]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003bbc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10e      	bne.n	8003be2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f103 0410 	add.w	r4, r3, #16
 8003bca:	f107 051c 	add.w	r5, r7, #28
 8003bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003bde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003be2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d111      	bne.n	8003c0e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003bea:	f107 0319 	add.w	r3, r7, #25
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f004 fca5 	bl	8008542 <VL53L0X_RdByte>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003bfe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003c06:	7e7a      	ldrb	r2, [r7, #25]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003c0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9d8 	bl	8003fd0 <VL53L0X_SetSequenceStepEnable>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003c26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2102      	movs	r1, #2
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9cc 	bl	8003fd0 <VL53L0X_SetSequenceStepEnable>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003c3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c56:	f107 0313 	add.w	r3, r7, #19
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f99e 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003c72:	7cfa      	ldrb	r2, [r7, #19]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c82:	f107 0313 	add.w	r3, r7, #19
 8003c86:	461a      	mov	r2, r3
 8003c88:	2101      	movs	r1, #1
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f988 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003c9e:	7cfa      	ldrb	r2, [r7, #19]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ca6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003cae:	f107 030c 	add.w	r3, r7, #12
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fad6 	bl	8004268 <VL53L0X_GetSequenceStepTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fac0 	bl	8004268 <VL53L0X_GetSequenceStepTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cfe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3770      	adds	r7, #112	; 0x70
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bdb0      	pop	{r4, r5, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000190 	.word	0x20000190

08003d10 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8cc 	bl	8003ec0 <VL53L0X_GetDeviceMode>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fad4 	bl	80042e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fb0a 	bl	800437a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fd2a 	bl	80037d2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d134      	bne.n	8003df4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	e02a      	b.n	8003de6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d12a      	bne.n	8003dee <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	b299      	uxth	r1, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	461a      	mov	r2, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fc2a 	bl	8004604 <VL53L0X_GetLimitCheckValue>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d117      	bne.n	8003df2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	b299      	uxth	r1, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3318      	adds	r3, #24
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb91 	bl	80044f8 <VL53L0X_GetLimitCheckEnable>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	ddd1      	ble.n	8003d90 <VL53L0X_GetDeviceParameters+0x80>
 8003dec:	e002      	b.n	8003df4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003df2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	333c      	adds	r3, #60	; 0x3c
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fc8c 	bl	8004720 <VL53L0X_GetWrapAroundCheckEnable>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f895 	bl	8003f4a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003e20:	4603      	mov	r3, r0
 8003e22:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	2b15      	cmp	r3, #21
 8003e44:	d832      	bhi.n	8003eac <VL53L0X_SetDeviceMode+0x7c>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <VL53L0X_SetDeviceMode+0x1c>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003ea5 	.word	0x08003ea5
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003ea5 	.word	0x08003ea5
 8003e5c:	08003ead 	.word	0x08003ead
 8003e60:	08003ead 	.word	0x08003ead
 8003e64:	08003ead 	.word	0x08003ead
 8003e68:	08003ead 	.word	0x08003ead
 8003e6c:	08003ead 	.word	0x08003ead
 8003e70:	08003ead 	.word	0x08003ead
 8003e74:	08003ead 	.word	0x08003ead
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003ead 	.word	0x08003ead
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003ead 	.word	0x08003ead
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003ead 	.word	0x08003ead
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003ea5 	.word	0x08003ea5
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	741a      	strb	r2, [r3, #16]
		break;
 8003eaa:	e001      	b.n	8003eb0 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003eac:	23f8      	movs	r3, #248	; 0xf8
 8003eae:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7c1a      	ldrb	r2, [r3, #16]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	2109      	movs	r1, #9
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f004 fb22 	bl	8008542 <VL53L0X_RdByte>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f003 fa30 	bl	800739a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f003 fafd 	bl	800755a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	70fb      	strb	r3, [r7, #3]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003f84:	78ba      	ldrb	r2, [r7, #2]
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f002 ff45 	bl	8006e1a <VL53L0X_set_vcsel_pulse_period>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f003 f9b7 	bl	800732c <VL53L0X_get_vcsel_pulse_period>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003fec:	f107 030f 	add.w	r3, r7, #15
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f004 faa4 	bl	8008542 <VL53L0X_RdByte>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d15a      	bne.n	80040c0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800400a:	78bb      	ldrb	r3, [r7, #2]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d12b      	bne.n	8004068 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d825      	bhi.n	8004062 <VL53L0X_SetSequenceStepEnable+0x92>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	08004031 	.word	0x08004031
 8004020:	0800403b 	.word	0x0800403b
 8004024:	08004045 	.word	0x08004045
 8004028:	0800404f 	.word	0x0800404f
 800402c:	08004059 	.word	0x08004059
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004030:	7dbb      	ldrb	r3, [r7, #22]
 8004032:	f043 0310 	orr.w	r3, r3, #16
 8004036:	75bb      	strb	r3, [r7, #22]
				break;
 8004038:	e043      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800403a:	7dbb      	ldrb	r3, [r7, #22]
 800403c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004040:	75bb      	strb	r3, [r7, #22]
				break;
 8004042:	e03e      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004044:	7dbb      	ldrb	r3, [r7, #22]
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	75bb      	strb	r3, [r7, #22]
				break;
 800404c:	e039      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800404e:	7dbb      	ldrb	r3, [r7, #22]
 8004050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004054:	75bb      	strb	r3, [r7, #22]
				break;
 8004056:	e034      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004058:	7dbb      	ldrb	r3, [r7, #22]
 800405a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800405e:	75bb      	strb	r3, [r7, #22]
				break;
 8004060:	e02f      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004062:	23fc      	movs	r3, #252	; 0xfc
 8004064:	75fb      	strb	r3, [r7, #23]
 8004066:	e02c      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d825      	bhi.n	80040ba <VL53L0X_SetSequenceStepEnable+0xea>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004089 	.word	0x08004089
 8004078:	08004093 	.word	0x08004093
 800407c:	0800409d 	.word	0x0800409d
 8004080:	080040a7 	.word	0x080040a7
 8004084:	080040b1 	.word	0x080040b1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004088:	7dbb      	ldrb	r3, [r7, #22]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	75bb      	strb	r3, [r7, #22]
				break;
 8004090:	e017      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004092:	7dbb      	ldrb	r3, [r7, #22]
 8004094:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004098:	75bb      	strb	r3, [r7, #22]
				break;
 800409a:	e012      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800409c:	7dbb      	ldrb	r3, [r7, #22]
 800409e:	f023 0304 	bic.w	r3, r3, #4
 80040a2:	75bb      	strb	r3, [r7, #22]
				break;
 80040a4:	e00d      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80040a6:	7dbb      	ldrb	r3, [r7, #22]
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	75bb      	strb	r3, [r7, #22]
				break;
 80040ae:	e008      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80040b0:	7dbb      	ldrb	r3, [r7, #22]
 80040b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b6:	75bb      	strb	r3, [r7, #22]
				break;
 80040b8:	e003      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80040ba:	23fc      	movs	r3, #252	; 0xfc
 80040bc:	75fb      	strb	r3, [r7, #23]
 80040be:	e000      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80040c0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	7dba      	ldrb	r2, [r7, #22]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d01e      	beq.n	8004108 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80040ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80040d2:	7dbb      	ldrb	r3, [r7, #22]
 80040d4:	461a      	mov	r2, r3
 80040d6:	2101      	movs	r1, #1
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f004 fb2d 	bl	8008738 <VL53L0X_WrByte>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80040e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7dba      	ldrb	r2, [r7, #22]
 80040ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80040f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004100:	6939      	ldr	r1, [r7, #16]
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff0e 	bl	8003f24 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	72fb      	strb	r3, [r7, #11]
 8004122:	4613      	mov	r3, r2
 8004124:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004130:	7afb      	ldrb	r3, [r7, #11]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d836      	bhi.n	80041a4 <sequence_step_enabled+0x90>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <sequence_step_enabled+0x28>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004151 	.word	0x08004151
 8004140:	08004163 	.word	0x08004163
 8004144:	08004175 	.word	0x08004175
 8004148:	08004187 	.word	0x08004187
 800414c:	08004199 	.word	0x08004199
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004150:	7abb      	ldrb	r3, [r7, #10]
 8004152:	111b      	asrs	r3, r3, #4
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	701a      	strb	r2, [r3, #0]
		break;
 8004160:	e022      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004162:	7abb      	ldrb	r3, [r7, #10]
 8004164:	10db      	asrs	r3, r3, #3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	701a      	strb	r2, [r3, #0]
		break;
 8004172:	e019      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004174:	7abb      	ldrb	r3, [r7, #10]
 8004176:	109b      	asrs	r3, r3, #2
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	701a      	strb	r2, [r3, #0]
		break;
 8004184:	e010      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004186:	7abb      	ldrb	r3, [r7, #10]
 8004188:	119b      	asrs	r3, r3, #6
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	701a      	strb	r2, [r3, #0]
		break;
 8004196:	e007      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004198:	7abb      	ldrb	r3, [r7, #10]
 800419a:	09db      	lsrs	r3, r3, #7
 800419c:	b2da      	uxtb	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	701a      	strb	r2, [r3, #0]
		break;
 80041a2:	e001      	b.n	80041a8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041a4:	23fc      	movs	r3, #252	; 0xfc
 80041a6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80041ca:	f107 030e 	add.w	r3, r7, #14
 80041ce:	461a      	mov	r2, r3
 80041d0:	2101      	movs	r1, #1
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f004 f9b5 	bl	8008542 <VL53L0X_RdByte>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80041e4:	7bba      	ldrb	r2, [r7, #14]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2100      	movs	r1, #0
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ff92 	bl	8004114 <sequence_step_enabled>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80041fc:	7bba      	ldrb	r2, [r7, #14]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	3302      	adds	r3, #2
 8004202:	2101      	movs	r1, #1
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff85 	bl	8004114 <sequence_step_enabled>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800420e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004216:	7bba      	ldrb	r2, [r7, #14]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	2102      	movs	r1, #2
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff78 	bl	8004114 <sequence_step_enabled>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004230:	7bba      	ldrb	r2, [r7, #14]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3303      	adds	r3, #3
 8004236:	2103      	movs	r1, #3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff6b 	bl	8004114 <sequence_step_enabled>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800424a:	7bba      	ldrb	r2, [r7, #14]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	3304      	adds	r3, #4
 8004250:	2104      	movs	r1, #4
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff5e 	bl	8004114 <sequence_step_enabled>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	460b      	mov	r3, r1
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004276:	2300      	movs	r3, #0
 8004278:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8004282:	f107 0210 	add.w	r2, r7, #16
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	4619      	mov	r1, r3
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f002 fbf0 	bl	8006a70 <get_sequence_step_timeout>
 8004290:	4603      	mov	r3, r0
 8004292:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8004294:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11c      	bne.n	80042d6 <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4613      	mov	r3, r2
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80042c8:	4a06      	ldr	r2, [pc, #24]	; (80042e4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	10624dd3 	.word	0x10624dd3

080042e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80042f6:	f107 030c 	add.w	r3, r7, #12
 80042fa:	461a      	mov	r2, r3
 80042fc:	21f8      	movs	r1, #248	; 0xf8
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f004 f9a6 	bl	8008650 <VL53L0X_RdWord>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004310:	f107 0308 	add.w	r3, r7, #8
 8004314:	461a      	mov	r2, r3
 8004316:	2104      	movs	r1, #4
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f004 f9d1 	bl	80086c0 <VL53L0X_RdDWord>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10c      	bne.n	8004344 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800432a:	89bb      	ldrh	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	89ba      	ldrh	r2, [r7, #12]
 8004334:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7f1b      	ldrb	r3, [r3, #28]
 8004362:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	7bba      	ldrb	r2, [r7, #14]
 8004368:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004388:	f107 030e 	add.w	r3, r7, #14
 800438c:	461a      	mov	r2, r3
 800438e:	2120      	movs	r1, #32
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f004 f95d 	bl	8008650 <VL53L0X_RdWord>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800439a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80043a2:	89fb      	ldrh	r3, [r7, #14]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	771a      	strb	r2, [r3, #28]
 80043ba:	e00b      	b.n	80043d4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d902      	bls.n	800440c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004406:	23fc      	movs	r3, #252	; 0xfc
 8004408:	75fb      	strb	r3, [r7, #23]
 800440a:	e05b      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	73bb      	strb	r3, [r7, #14]
 800441e:	e00a      	b.n	8004436 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	330c      	adds	r3, #12
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	2b05      	cmp	r3, #5
 800443a:	d841      	bhi.n	80044c0 <VL53L0X_SetLimitCheckEnable+0xe0>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <VL53L0X_SetLimitCheckEnable+0x64>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	0800445d 	.word	0x0800445d
 8004448:	08004467 	.word	0x08004467
 800444c:	0800447d 	.word	0x0800447d
 8004450:	08004487 	.word	0x08004487
 8004454:	08004491 	.word	0x08004491
 8004458:	080044a9 	.word	0x080044a9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004464:	e02e      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800446a:	b29b      	uxth	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	2144      	movs	r1, #68	; 0x44
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f004 f985 	bl	8008780 <VL53L0X_WrWord>
 8004476:	4603      	mov	r3, r0
 8004478:	75fb      	strb	r3, [r7, #23]

			break;
 800447a:	e023      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004484:	e01e      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800448e:	e019      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004496:	7b7b      	ldrb	r3, [r7, #13]
 8004498:	22fe      	movs	r2, #254	; 0xfe
 800449a:	2160      	movs	r1, #96	; 0x60
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f004 f999 	bl	80087d4 <VL53L0X_UpdateByte>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80044a6:	e00d      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80044a8:	7bbb      	ldrb	r3, [r7, #14]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80044ae:	7b7b      	ldrb	r3, [r7, #13]
 80044b0:	22ef      	movs	r2, #239	; 0xef
 80044b2:	2160      	movs	r1, #96	; 0x60
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f004 f98d 	bl	80087d4 <VL53L0X_UpdateByte>
 80044ba:	4603      	mov	r3, r0
 80044bc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80044be:	e001      	b.n	80044c4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80044c0:	23fc      	movs	r3, #252	; 0xfc
 80044c2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80044c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10f      	bne.n	80044ec <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80044cc:	787b      	ldrb	r3, [r7, #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80044de:	e005      	b.n	80044ec <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	460b      	mov	r3, r1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d905      	bls.n	800451c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004510:	23fc      	movs	r3, #252	; 0xfc
 8004512:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e008      	b.n	800452e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800451c:	897b      	ldrh	r3, [r7, #10]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004526:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7dba      	ldrb	r2, [r7, #22]
 800452c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800452e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	460b      	mov	r3, r1
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800455e:	7dbb      	ldrb	r3, [r7, #22]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004564:	897b      	ldrh	r3, [r7, #10]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	330c      	adds	r3, #12
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	e040      	b.n	80045f6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d830      	bhi.n	80045dc <VL53L0X_SetLimitCheckValue+0x9c>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <VL53L0X_SetLimitCheckValue+0x40>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004599 	.word	0x08004599
 8004584:	080045a1 	.word	0x080045a1
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045bf 	.word	0x080045bf
 8004590:	080045c7 	.word	0x080045c7
 8004594:	080045c7 	.word	0x080045c7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800459e:	e01f      	b.n	80045e0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	2144      	movs	r1, #68	; 0x44
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f004 f8e8 	bl	8008780 <VL53L0X_WrWord>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80045b4:	e014      	b.n	80045e0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80045bc:	e010      	b.n	80045e0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80045c4:	e00c      	b.n	80045e0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	2164      	movs	r1, #100	; 0x64
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f004 f8d5 	bl	8008780 <VL53L0X_WrWord>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80045da:	e001      	b.n	80045e0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045dc:	23fc      	movs	r3, #252	; 0xfc
 80045de:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80045e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045e8:	897b      	ldrh	r3, [r7, #10]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	330c      	adds	r3, #12
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop

08004604 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	460b      	mov	r3, r1
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004612:	2300      	movs	r3, #0
 8004614:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d847      	bhi.n	80046b0 <VL53L0X_GetLimitCheckValue+0xac>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <VL53L0X_GetLimitCheckValue+0x24>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	08004641 	.word	0x08004641
 800462c:	0800464d 	.word	0x0800464d
 8004630:	08004673 	.word	0x08004673
 8004634:	0800467f 	.word	0x0800467f
 8004638:	0800468b 	.word	0x0800468b
 800463c:	0800468b 	.word	0x0800468b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	77bb      	strb	r3, [r7, #30]
		break;
 800464a:	e033      	b.n	80046b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800464c:	f107 0316 	add.w	r3, r7, #22
 8004650:	461a      	mov	r2, r3
 8004652:	2144      	movs	r1, #68	; 0x44
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f003 fffb 	bl	8008650 <VL53L0X_RdWord>
 800465a:	4603      	mov	r3, r0
 800465c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800465e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004666:	8afb      	ldrh	r3, [r7, #22]
 8004668:	025b      	lsls	r3, r3, #9
 800466a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800466c:	2301      	movs	r3, #1
 800466e:	77bb      	strb	r3, [r7, #30]
		break;
 8004670:	e020      	b.n	80046b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	77bb      	strb	r3, [r7, #30]
		break;
 800467c:	e01a      	b.n	80046b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	77bb      	strb	r3, [r7, #30]
		break;
 8004688:	e014      	b.n	80046b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800468a:	f107 0316 	add.w	r3, r7, #22
 800468e:	461a      	mov	r2, r3
 8004690:	2164      	movs	r1, #100	; 0x64
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f003 ffdc 	bl	8008650 <VL53L0X_RdWord>
 8004698:	4603      	mov	r3, r0
 800469a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800469c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80046a4:	8afb      	ldrh	r3, [r7, #22]
 80046a6:	025b      	lsls	r3, r3, #9
 80046a8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	77bb      	strb	r3, [r7, #30]
		break;
 80046ae:	e001      	b.n	80046b4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80046b0:	23fc      	movs	r3, #252	; 0xfc
 80046b2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d12a      	bne.n	8004712 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80046bc:	7fbb      	ldrb	r3, [r7, #30]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d124      	bne.n	800470c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d110      	bne.n	80046ea <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80046c8:	897b      	ldrh	r3, [r7, #10]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	330c      	adds	r3, #12
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80046e8:	e013      	b.n	8004712 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80046f0:	897b      	ldrh	r3, [r7, #10]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	330c      	adds	r3, #12
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80046fe:	897b      	ldrh	r3, [r7, #10]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800470a:	e002      	b.n	8004712 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004712:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop

08004720 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800472e:	f107 030e 	add.w	r3, r7, #14
 8004732:	461a      	mov	r2, r3
 8004734:	2101      	movs	r1, #1
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 ff03 	bl	8008542 <VL53L0X_RdByte>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10e      	bne.n	8004766 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004748:	7bba      	ldrb	r2, [r7, #14]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004750:	7bbb      	ldrb	r3, [r7, #14]
 8004752:	b25b      	sxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	da03      	bge.n	8004760 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e002      	b.n	8004766 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004790:	f107 030e 	add.w	r3, r7, #14
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff fb92 	bl	8003ec0 <VL53L0X_GetDeviceMode>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80047a8:	7bbb      	ldrb	r3, [r7, #14]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f898 	bl	80048e4 <VL53L0X_StartMeasurement>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80047b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f001 fb09 	bl	8005dd8 <VL53L0X_measurement_poll_for_completion>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80047ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80047d2:	7bbb      	ldrb	r3, [r7, #14]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2203      	movs	r2, #3
 80047dc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80047e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80047fc:	2301      	movs	r3, #1
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f001 faab 	bl	8005d5e <VL53L0X_perform_ref_calibration>
 8004808:	4603      	mov	r3, r0
 800480a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800480c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004824:	2300      	movs	r3, #0
 8004826:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800482e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004830:	7dbb      	ldrb	r3, [r7, #22]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d005      	beq.n	8004842 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004836:	7dbb      	ldrb	r3, [r7, #22]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d002      	beq.n	8004842 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800483c:	7dbb      	ldrb	r3, [r7, #22]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d147      	bne.n	80048d2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	f107 0210 	add.w	r2, r7, #16
 800484a:	2101      	movs	r1, #1
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb8d 	bl	8004f6c <VL53L0X_GetInterruptThresholds>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800485c:	d803      	bhi.n	8004866 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800485e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004860:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004864:	d935      	bls.n	80048d2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d131      	bne.n	80048d2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004874:	491a      	ldr	r1, [pc, #104]	; (80048e0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f002 ff20 	bl	80076bc <VL53L0X_load_tuning_settings>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]
 8004880:	e027      	b.n	80048d2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004882:	2204      	movs	r2, #4
 8004884:	21ff      	movs	r1, #255	; 0xff
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f003 ff56 	bl	8008738 <VL53L0X_WrByte>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	4313      	orrs	r3, r2
 8004894:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004896:	2200      	movs	r2, #0
 8004898:	2170      	movs	r1, #112	; 0x70
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f003 ff4c 	bl	8008738 <VL53L0X_WrByte>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80048aa:	2200      	movs	r2, #0
 80048ac:	21ff      	movs	r1, #255	; 0xff
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f003 ff42 	bl	8008738 <VL53L0X_WrByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80048be:	2200      	movs	r2, #0
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f003 ff38 	bl	8008738 <VL53L0X_WrByte>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80048d2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000284 	.word	0x20000284

080048e4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80048f4:	f107 030e 	add.w	r3, r7, #14
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fae0 	bl	8003ec0 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d035      	beq.n	8004972 <VL53L0X_StartMeasurement+0x8e>
 8004906:	2b03      	cmp	r3, #3
 8004908:	d04d      	beq.n	80049a6 <VL53L0X_StartMeasurement+0xc2>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d165      	bne.n	80049da <VL53L0X_StartMeasurement+0xf6>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800490e:	2201      	movs	r2, #1
 8004910:	2100      	movs	r1, #0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f003 ff10 	bl	8008738 <VL53L0X_WrByte>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d15b      	bne.n	80049e0 <VL53L0X_StartMeasurement+0xfc>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <VL53L0X_StartMeasurement+0x60>
					Status = VL53L0X_RdByte(Dev,
 8004932:	f107 030d 	add.w	r3, r7, #13
 8004936:	461a      	mov	r2, r3
 8004938:	2100      	movs	r1, #0
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f003 fe01 	bl	8008542 <VL53L0X_RdByte>
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	3301      	adds	r3, #1
 8004948:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800494a:	7b7a      	ldrb	r2, [r7, #13]
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	4013      	ands	r3, r2
 8004950:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	429a      	cmp	r2, r3
 8004956:	d106      	bne.n	8004966 <VL53L0X_StartMeasurement+0x82>
				&& (Status == VL53L0X_ERROR_NONE)
 8004958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <VL53L0X_StartMeasurement+0x82>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2bc7      	cmp	r3, #199	; 0xc7
 8004964:	d9e2      	bls.n	800492c <VL53L0X_StartMeasurement+0x48>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2bc7      	cmp	r3, #199	; 0xc7
 800496a:	d939      	bls.n	80049e0 <VL53L0X_StartMeasurement+0xfc>
				Status = VL53L0X_ERROR_TIME_OUT;
 800496c:	23f9      	movs	r3, #249	; 0xf9
 800496e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004970:	e036      	b.n	80049e0 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800497a:	2101      	movs	r1, #1
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff4b 	bl	8004818 <VL53L0X_CheckAndLoadInterruptSettings>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004986:	2202      	movs	r2, #2
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f003 fed4 	bl	8008738 <VL53L0X_WrByte>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d123      	bne.n	80049e4 <VL53L0X_StartMeasurement+0x100>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2204      	movs	r2, #4
 80049a0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80049a4:	e01e      	b.n	80049e4 <VL53L0X_StartMeasurement+0x100>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80049a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d105      	bne.n	80049ba <VL53L0X_StartMeasurement+0xd6>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80049ae:	2101      	movs	r1, #1
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff31 	bl	8004818 <VL53L0X_CheckAndLoadInterruptSettings>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80049ba:	2204      	movs	r2, #4
 80049bc:	2100      	movs	r1, #0
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f003 feba 	bl	8008738 <VL53L0X_WrByte>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80049c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <VL53L0X_StartMeasurement+0x104>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80049d8:	e006      	b.n	80049e8 <VL53L0X_StartMeasurement+0x104>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80049da:	23f8      	movs	r3, #248	; 0xf8
 80049dc:	75fb      	strb	r3, [r7, #23]
 80049de:	e004      	b.n	80049ea <VL53L0X_StartMeasurement+0x106>
		break;
 80049e0:	bf00      	nop
 80049e2:	e002      	b.n	80049ea <VL53L0X_StartMeasurement+0x106>
		break;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <VL53L0X_StartMeasurement+0x106>
		break;
 80049e8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80049ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004a0a:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004a0c:	7bbb      	ldrb	r3, [r7, #14]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d112      	bne.n	8004a38 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004a12:	f107 0308 	add.w	r3, r7, #8
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fb1d 	bl	8005058 <VL53L0X_GetInterruptMaskStatus>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d103      	bne.n	8004a30 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e01c      	b.n	8004a6a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e018      	b.n	8004a6a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004a38:	f107 030d 	add.w	r3, r7, #13
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2114      	movs	r1, #20
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f003 fd7e 	bl	8008542 <VL53L0X_RdByte>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004a52:	7b7b      	ldrb	r3, [r7, #13]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e002      	b.n	8004a6a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b096      	sub	sp, #88	; 0x58
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004a88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	2114      	movs	r1, #20
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f003 fdb1 	bl	80085f8 <VL53L0X_ReadMulti>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004a9c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 80d2 	bne.w	8004c4a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004ab2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004ace:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	025b      	lsls	r3, r3, #9
 8004ae4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aea:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004aec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004b02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b06:	025b      	lsls	r3, r3, #9
 8004b08:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004b0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b2a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8004b3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b4c:	d047      	beq.n	8004bde <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004b4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b50:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004b5c:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <VL53L0X_GetRangingMeasurementData+0x248>)
 8004b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b62:	1192      	asrs	r2, r2, #6
 8004b64:	17db      	asrs	r3, r3, #31
 8004b66:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004b68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7f1b      	ldrb	r3, [r3, #28]
 8004b76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d02d      	beq.n	8004bde <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004b82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b84:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	121b      	asrs	r3, r3, #8
 8004b8e:	461a      	mov	r2, r3
				if ((SignalRate
 8004b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d10d      	bne.n	8004bb2 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004b96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004b9e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004ba2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ba6:	e016      	b.n	8004bd6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004ba8:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004bac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bb0:	e011      	b.n	8004bd6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004bb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb8:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004bbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bbe:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004bc6:	121b      	asrs	r3, r3, #8
 8004bc8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bcc:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004bd2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004bd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bda:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004bde:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004be6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bea:	089b      	lsrs	r3, r3, #2
 8004bec:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004bf2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	75da      	strb	r2, [r3, #23]
 8004c00:	e006      	b.n	8004c10 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004c08:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004c10:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004c14:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004c18:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f003 f9b6 	bl	8007f98 <VL53L0X_get_pal_range_status>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004c3a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004c42:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c4a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12f      	bne.n	8004cb2 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f107 040c 	add.w	r4, r7, #12
 8004c58:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c64:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004c6c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004c7a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004c80:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004c86:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004c8c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004c92:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004c98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004ca2:	f107 050c 	add.w	r5, r7, #12
 8004ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004cb2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3750      	adds	r7, #80	; 0x50
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	10624dd3 	.word	0x10624dd3

08004cc4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff f8ab 	bl	8003e30 <VL53L0X_SetDeviceMode>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fd4c 	bl	8004784 <VL53L0X_PerformSingleMeasurement>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff febc 	bl	8004a78 <VL53L0X_GetRangingMeasurementData>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f962 	bl	8004fd8 <VL53L0X_ClearInterruptMask>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	461a      	mov	r2, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	70fb      	strb	r3, [r7, #3]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70bb      	strb	r3, [r7, #2]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004d48:	23f6      	movs	r3, #246	; 0xf6
 8004d4a:	73fb      	strb	r3, [r7, #15]
 8004d4c:	e107      	b.n	8004f5e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004d4e:	78bb      	ldrb	r3, [r7, #2]
 8004d50:	2b14      	cmp	r3, #20
 8004d52:	d110      	bne.n	8004d76 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004d54:	7e3b      	ldrb	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	73bb      	strb	r3, [r7, #14]
 8004d5e:	e001      	b.n	8004d64 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004d64:	7bbb      	ldrb	r3, [r7, #14]
 8004d66:	461a      	mov	r2, r3
 8004d68:	2184      	movs	r1, #132	; 0x84
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f003 fce4 	bl	8008738 <VL53L0X_WrByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e0f3      	b.n	8004f5e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004d76:	78bb      	ldrb	r3, [r7, #2]
 8004d78:	2b15      	cmp	r3, #21
 8004d7a:	f040 8097 	bne.w	8004eac <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004d7e:	2201      	movs	r2, #1
 8004d80:	21ff      	movs	r1, #255	; 0xff
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f003 fcd8 	bl	8008738 <VL53L0X_WrByte>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f003 fcce 	bl	8008738 <VL53L0X_WrByte>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004da6:	2200      	movs	r2, #0
 8004da8:	21ff      	movs	r1, #255	; 0xff
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f003 fcc4 	bl	8008738 <VL53L0X_WrByte>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004dba:	2201      	movs	r2, #1
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f003 fcba 	bl	8008738 <VL53L0X_WrByte>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004dce:	2202      	movs	r2, #2
 8004dd0:	2185      	movs	r1, #133	; 0x85
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f003 fcb0 	bl	8008738 <VL53L0X_WrByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004de2:	2204      	movs	r2, #4
 8004de4:	21ff      	movs	r1, #255	; 0xff
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f003 fca6 	bl	8008738 <VL53L0X_WrByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004df6:	2200      	movs	r2, #0
 8004df8:	21cd      	movs	r1, #205	; 0xcd
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f003 fc9c 	bl	8008738 <VL53L0X_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461a      	mov	r2, r3
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004e0a:	2211      	movs	r2, #17
 8004e0c:	21cc      	movs	r1, #204	; 0xcc
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f003 fc92 	bl	8008738 <VL53L0X_WrByte>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004e1e:	2207      	movs	r2, #7
 8004e20:	21ff      	movs	r1, #255	; 0xff
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f003 fc88 	bl	8008738 <VL53L0X_WrByte>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004e32:	2200      	movs	r2, #0
 8004e34:	21be      	movs	r1, #190	; 0xbe
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f003 fc7e 	bl	8008738 <VL53L0X_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004e46:	2206      	movs	r2, #6
 8004e48:	21ff      	movs	r1, #255	; 0xff
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f003 fc74 	bl	8008738 <VL53L0X_WrByte>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004e5a:	2209      	movs	r2, #9
 8004e5c:	21cc      	movs	r1, #204	; 0xcc
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f003 fc6a 	bl	8008738 <VL53L0X_WrByte>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	21ff      	movs	r1, #255	; 0xff
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f003 fc60 	bl	8008738 <VL53L0X_WrByte>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004e82:	2201      	movs	r2, #1
 8004e84:	21ff      	movs	r1, #255	; 0xff
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f003 fc56 	bl	8008738 <VL53L0X_WrByte>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e96:	2200      	movs	r2, #0
 8004e98:	2100      	movs	r1, #0
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f003 fc4c 	bl	8008738 <VL53L0X_WrByte>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	73fb      	strb	r3, [r7, #15]
 8004eaa:	e058      	b.n	8004f5e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d121      	bne.n	8004ef8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004eb4:	787b      	ldrb	r3, [r7, #1]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d81b      	bhi.n	8004ef2 <VL53L0X_SetGpioConfig+0x1ce>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <VL53L0X_SetGpioConfig+0x19c>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	08004ee1 	.word	0x08004ee1
 8004ecc:	08004ee7 	.word	0x08004ee7
 8004ed0:	08004eed 	.word	0x08004eed
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73bb      	strb	r3, [r7, #14]
				break;
 8004ed8:	e00f      	b.n	8004efa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004eda:	2301      	movs	r3, #1
 8004edc:	73bb      	strb	r3, [r7, #14]
				break;
 8004ede:	e00c      	b.n	8004efa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	73bb      	strb	r3, [r7, #14]
				break;
 8004ee4:	e009      	b.n	8004efa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	73bb      	strb	r3, [r7, #14]
				break;
 8004eea:	e006      	b.n	8004efa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004eec:	2304      	movs	r3, #4
 8004eee:	73bb      	strb	r3, [r7, #14]
				break;
 8004ef0:	e003      	b.n	8004efa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8004ef2:	23f5      	movs	r3, #245	; 0xf5
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e000      	b.n	8004efa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004ef8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8004f02:	7bbb      	ldrb	r3, [r7, #14]
 8004f04:	461a      	mov	r2, r3
 8004f06:	210a      	movs	r1, #10
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f003 fc15 	bl	8008738 <VL53L0X_WrByte>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004f1a:	7e3b      	ldrb	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73bb      	strb	r3, [r7, #14]
 8004f24:	e001      	b.n	8004f2a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004f26:	2310      	movs	r3, #16
 8004f28:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	22ef      	movs	r2, #239	; 0xef
 8004f2e:	2184      	movs	r1, #132	; 0x84
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f003 fc4f 	bl	80087d4 <VL53L0X_UpdateByte>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	787a      	ldrb	r2, [r7, #1]
 8004f46:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004f52:	2100      	movs	r1, #0
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f83f 	bl	8004fd8 <VL53L0X_ClearInterruptMask>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop

08004f6c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	461a      	mov	r2, r3
 8004f86:	210e      	movs	r1, #14
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f003 fb61 	bl	8008650 <VL53L0X_RdWord>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004f92:	8abb      	ldrh	r3, [r7, #20]
 8004f94:	045b      	lsls	r3, r3, #17
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <VL53L0X_GetInterruptThresholds+0x68>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	461a      	mov	r2, r3
 8004fae:	210c      	movs	r1, #12
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f003 fb4d 	bl	8008650 <VL53L0X_RdWord>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004fba:	8abb      	ldrh	r3, [r7, #20]
 8004fbc:	045b      	lsls	r3, r3, #17
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <VL53L0X_GetInterruptThresholds+0x68>)
 8004fc2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	1ffe0000 	.word	0x1ffe0000

08004fd8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004fea:	2201      	movs	r2, #1
 8004fec:	210b      	movs	r1, #11
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f003 fba2 	bl	8008738 <VL53L0X_WrByte>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	210b      	movs	r1, #11
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f003 fb9b 	bl	8008738 <VL53L0X_WrByte>
 8005002:	4603      	mov	r3, r0
 8005004:	461a      	mov	r2, r3
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	4313      	orrs	r3, r2
 800500a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800500c:	f107 030d 	add.w	r3, r7, #13
 8005010:	461a      	mov	r2, r3
 8005012:	2113      	movs	r1, #19
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f003 fa94 	bl	8008542 <VL53L0X_RdByte>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	4313      	orrs	r3, r2
 8005022:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	3301      	adds	r3, #1
 8005028:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800502a:	7b7b      	ldrb	r3, [r7, #13]
 800502c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005034:	7bbb      	ldrb	r3, [r7, #14]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d803      	bhi.n	8005042 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800503a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0d3      	beq.n	8004fea <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005042:	7bbb      	ldrb	r3, [r7, #14]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005048:	23f4      	movs	r3, #244	; 0xf4
 800504a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800504c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005066:	f107 030e 	add.w	r3, r7, #14
 800506a:	461a      	mov	r2, r3
 800506c:	2113      	movs	r1, #19
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f003 fa67 	bl	8008542 <VL53L0X_RdByte>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005078:	7bbb      	ldrb	r3, [r7, #14]
 800507a:	f003 0207 	and.w	r2, r3, #7
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005082:	7bbb      	ldrb	r3, [r7, #14]
 8005084:	f003 0318 	and.w	r3, r3, #24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800508c:	23fa      	movs	r3, #250	; 0xfa
 800508e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005090:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fa03 	bl	80054bc <VL53L0X_perform_ref_spad_management>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80050ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80050d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80050d8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80050da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050de:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80050e0:	f107 0308 	add.w	r3, r7, #8
 80050e4:	461a      	mov	r2, r3
 80050e6:	2128      	movs	r1, #40	; 0x28
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f003 fab1 	bl	8008650 <VL53L0X_RdWord>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d11e      	bne.n	8005138 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80050fa:	893b      	ldrh	r3, [r7, #8]
 80050fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005100:	b29b      	uxth	r3, r3
 8005102:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005104:	893b      	ldrh	r3, [r7, #8]
 8005106:	461a      	mov	r2, r3
 8005108:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800510c:	429a      	cmp	r2, r3
 800510e:	dd0b      	ble.n	8005128 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005110:	893a      	ldrh	r2, [r7, #8]
 8005112:	897b      	ldrh	r3, [r7, #10]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	b29b      	uxth	r3, r3
 8005118:	b21b      	sxth	r3, r3
 800511a:	461a      	mov	r2, r3
					* 250;
 800511c:	23fa      	movs	r3, #250	; 0xfa
 800511e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e007      	b.n	8005138 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005128:	893b      	ldrh	r3, [r7, #8]
 800512a:	b21b      	sxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	23fa      	movs	r3, #250	; 0xfa
 8005130:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005144:	b480      	push	{r7}
 8005146:	b08b      	sub	sp, #44	; 0x2c
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005152:	2308      	movs	r3, #8
 8005154:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	fbb3 f2f2 	udiv	r2, r3, r2
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	fb01 f202 	mul.w	r2, r1, r2
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	e030      	b.n	80051e6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	4413      	add	r3, r2
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	429a      	cmp	r2, r3
 8005198:	d11e      	bne.n	80051d8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800519a:	7ffa      	ldrb	r2, [r7, #31]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	fa42 f303 	asr.w	r3, r2, r3
 80051a2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80051a8:	e016      	b.n	80051d8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <get_next_good_spad+0x88>
				success = 1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	fb02 f203 	mul.w	r2, r2, r3
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	4413      	add	r3, r2
 80051c4:	461a      	mov	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	601a      	str	r2, [r3, #0]
				break;
 80051ca:	e009      	b.n	80051e0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80051cc:	7ffb      	ldrb	r3, [r7, #31]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	3301      	adds	r3, #1
 80051d6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d3e4      	bcc.n	80051aa <get_next_good_spad+0x66>
				coarseIndex++) {
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	3301      	adds	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80051e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d202      	bcs.n	80051f4 <get_next_good_spad+0xb0>
 80051ee:	7fbb      	ldrb	r3, [r7, #30]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0c7      	beq.n	8005184 <get_next_good_spad+0x40>
		}
	}
}
 80051f4:	bf00      	nop
 80051f6:	372c      	adds	r7, #44	; 0x2c
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <is_aperture+0x30>)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <is_aperture+0x22>
		isAperture = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	2000043c 	.word	0x2000043c

08005234 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	; 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005240:	2300      	movs	r3, #0
 8005242:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005244:	2308      	movs	r3, #8
 8005246:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	fbb3 f2f2 	udiv	r2, r3, r2
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	fb01 f202 	mul.w	r2, r1, r2
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800526c:	23ce      	movs	r3, #206	; 0xce
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e010      	b.n	8005294 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	b25a      	sxtb	r2, r3
 800527c:	2101      	movs	r1, #1
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	b25b      	sxtb	r3, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	b259      	sxtb	r1, r3
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	b2ca      	uxtb	r2, r1
 8005292:	701a      	strb	r2, [r3, #0]

	return status;
 8005294:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3724      	adds	r7, #36	; 0x24
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80052ae:	2306      	movs	r3, #6
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	21b0      	movs	r1, #176	; 0xb0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f003 f96f 	bl	8008598 <VL53L0X_WriteMulti>
 80052ba:	4603      	mov	r3, r0
 80052bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80052d4:	2306      	movs	r3, #6
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	21b0      	movs	r1, #176	; 0xb0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f003 f98c 	bl	80085f8 <VL53L0X_ReadMulti>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80052e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005300:	2300      	movs	r3, #0
 8005302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800530a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800530e:	2300      	movs	r3, #0
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	e02b      	b.n	800536c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005314:	f107 031c 	add.w	r3, r7, #28
 8005318:	6a3a      	ldr	r2, [r7, #32]
 800531a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff11 	bl	8005144 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d103      	bne.n	8005332 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800532a:	23ce      	movs	r3, #206	; 0xce
 800532c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005330:	e020      	b.n	8005374 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	461a      	mov	r2, r3
 8005336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005338:	4413      	add	r3, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ff60 	bl	8005200 <is_aperture>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800534a:	23ce      	movs	r3, #206	; 0xce
 800534c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005350:	e010      	b.n	8005374 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800535a:	6838      	ldr	r0, [r7, #0]
 800535c:	f7ff ff6a 	bl	8005234 <enable_spad_bit>
		currentSpad++;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	3301      	adds	r3, #1
 8005364:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	3301      	adds	r3, #1
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
 800536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005370:	429a      	cmp	r2, r3
 8005372:	d3cf      	bcc.n	8005314 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005376:	6a3a      	ldr	r2, [r7, #32]
 8005378:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800537a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ff8d 	bl	80052a4 <set_ref_spad_map>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005390:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005394:	2b00      	cmp	r3, #0
 8005396:	d121      	bne.n	80053dc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	4619      	mov	r1, r3
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ff93 	bl	80052ca <get_ref_spad_map>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80053ae:	e011      	b.n	80053d4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	4413      	add	r3, r2
 80053b6:	781a      	ldrb	r2, [r3, #0]
 80053b8:	f107 0114 	add.w	r1, r7, #20
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	440b      	add	r3, r1
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d003      	beq.n	80053ce <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80053c6:	23ce      	movs	r3, #206	; 0xce
 80053c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80053cc:	e006      	b.n	80053dc <enable_ref_spads+0xec>
			}
			i++;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	3301      	adds	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3e9      	bcc.n	80053b0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80053dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3730      	adds	r7, #48	; 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005404:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005410:	22c0      	movs	r2, #192	; 0xc0
 8005412:	2101      	movs	r1, #1
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f003 f98f 	bl	8008738 <VL53L0X_WrByte>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005424:	2b00      	cmp	r3, #0
 8005426:	d108      	bne.n	800543a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fc48 	bl	8004cc4 <VL53L0X_PerformSingleRangingMeasurement>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800543a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800543e:	2b00      	cmp	r3, #0
 8005440:	d107      	bne.n	8005452 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005442:	2201      	movs	r2, #1
 8005444:	21ff      	movs	r1, #255	; 0xff
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f003 f976 	bl	8008738 <VL53L0X_WrByte>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	21b6      	movs	r1, #182	; 0xb6
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f003 f8f6 	bl	8008650 <VL53L0X_RdWord>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800546a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005472:	2200      	movs	r2, #0
 8005474:	21ff      	movs	r1, #255	; 0xff
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f003 f95e 	bl	8008738 <VL53L0X_WrByte>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005486:	2b00      	cmp	r3, #0
 8005488:	d112      	bne.n	80054b0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800548a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800548e:	461a      	mov	r2, r3
 8005490:	2101      	movs	r1, #1
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f003 f950 	bl	8008738 <VL53L0X_WrByte>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800549e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80054ac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80054b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3728      	adds	r7, #40	; 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b09d      	sub	sp, #116	; 0x74
 80054c0:	af06      	add	r7, sp, #24
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80054ce:	23b4      	movs	r3, #180	; 0xb4
 80054d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80054d4:	2303      	movs	r3, #3
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80054d8:	232c      	movs	r3, #44	; 0x2c
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80054e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80054ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80054f6:	2306      	movs	r3, #6
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8005520:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005522:	2300      	movs	r3, #0
 8005524:	64bb      	str	r3, [r7, #72]	; 0x48
 8005526:	e009      	b.n	800553c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552c:	4413      	add	r3, r2
 800552e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005538:	3301      	adds	r3, #1
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
 800553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	429a      	cmp	r2, r3
 8005542:	d3f1      	bcc.n	8005528 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005544:	2201      	movs	r2, #1
 8005546:	21ff      	movs	r1, #255	; 0xff
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f003 f8f5 	bl	8008738 <VL53L0X_WrByte>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005554:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800555c:	2200      	movs	r2, #0
 800555e:	214f      	movs	r1, #79	; 0x4f
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f003 f8e9 	bl	8008738 <VL53L0X_WrByte>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800556c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005570:	2b00      	cmp	r3, #0
 8005572:	d107      	bne.n	8005584 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005574:	222c      	movs	r2, #44	; 0x2c
 8005576:	214e      	movs	r1, #78	; 0x4e
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f003 f8dd 	bl	8008738 <VL53L0X_WrByte>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005588:	2b00      	cmp	r3, #0
 800558a:	d107      	bne.n	800559c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800558c:	2200      	movs	r2, #0
 800558e:	21ff      	movs	r1, #255	; 0xff
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f003 f8d1 	bl	8008738 <VL53L0X_WrByte>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800559c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80055a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80055a8:	461a      	mov	r2, r3
 80055aa:	21b6      	movs	r1, #182	; 0xb6
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f003 f8c3 	bl	8008738 <VL53L0X_WrByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80055b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d107      	bne.n	80055d0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80055c0:	2200      	movs	r2, #0
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f003 f8b7 	bl	8008738 <VL53L0X_WrByte>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80055d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80055d8:	f107 0210 	add.w	r2, r7, #16
 80055dc:	f107 0111 	add.w	r1, r7, #17
 80055e0:	2300      	movs	r3, #0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fbbb 	bl	8005d5e <VL53L0X_perform_ref_calibration>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80055ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d121      	bne.n	800563a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80055fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8005612:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005616:	f107 0218 	add.w	r2, r7, #24
 800561a:	9204      	str	r2, [sp, #16]
 800561c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561e:	9203      	str	r2, [sp, #12]
 8005620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005622:	9202      	str	r2, [sp, #8]
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4623      	mov	r3, r4
 800562c:	4602      	mov	r2, r0
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff fe5e 	bl	80052f0 <enable_ref_spads>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800563a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800563e:	2b00      	cmp	r3, #0
 8005640:	d174      	bne.n	800572c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005646:	f107 0312 	add.w	r3, r7, #18
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff fecb 	bl	80053e8 <perform_ref_signal_measurement>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005658:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800565c:	2b00      	cmp	r3, #0
 800565e:	d161      	bne.n	8005724 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005660:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005662:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005664:	429a      	cmp	r2, r3
 8005666:	d25d      	bcs.n	8005724 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005668:	2300      	movs	r3, #0
 800566a:	64bb      	str	r3, [r7, #72]	; 0x48
 800566c:	e009      	b.n	8005682 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	4413      	add	r3, r2
 8005674:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800567c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567e:	3301      	adds	r3, #1
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
 8005682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	429a      	cmp	r2, r3
 8005688:	d3f1      	bcc.n	800566e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800568a:	e002      	b.n	8005692 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800568c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568e:	3301      	adds	r3, #1
 8005690:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005692:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005698:	4413      	add	r3, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fdb0 	bl	8005200 <is_aperture>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80056a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3ee      	bcc.n	800568c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80056c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80056c6:	f107 0218 	add.w	r2, r7, #24
 80056ca:	9204      	str	r2, [sp, #16]
 80056cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ce:	9203      	str	r2, [sp, #12]
 80056d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056d2:	9202      	str	r2, [sp, #8]
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4623      	mov	r3, r4
 80056dc:	4602      	mov	r2, r0
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fe06 	bl	80052f0 <enable_ref_spads>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80056ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11b      	bne.n	800572a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80056f6:	f107 0312 	add.w	r3, r7, #18
 80056fa:	4619      	mov	r1, r3
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7ff fe73 	bl	80053e8 <perform_ref_signal_measurement>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005708:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10c      	bne.n	800572a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005710:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005712:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005714:	429a      	cmp	r2, r3
 8005716:	d208      	bcs.n	800572a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005722:	e002      	b.n	800572a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005728:	e000      	b.n	800572c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800572a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800572c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005730:	2b00      	cmp	r3, #0
 8005732:	f040 80af 	bne.w	8005894 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005736:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005738:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800573a:	429a      	cmp	r2, r3
 800573c:	f240 80aa 	bls.w	8005894 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005750:	f107 031c 	add.w	r3, r7, #28
 8005754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005756:	4618      	mov	r0, r3
 8005758:	f00d f835 	bl	80127c6 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800575c:	8a7b      	ldrh	r3, [r7, #18]
 800575e:	461a      	mov	r2, r3
 8005760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	bfb8      	it	lt
 8005768:	425b      	neglt	r3, r3
 800576a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005772:	e086      	b.n	8005882 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800577a:	f107 0314 	add.w	r3, r7, #20
 800577e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005782:	f7ff fcdf 	bl	8005144 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d103      	bne.n	8005796 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800578e:	23ce      	movs	r3, #206	; 0xce
 8005790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005794:	e07e      	b.n	8005894 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	3301      	adds	r3, #1
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800579c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fd2b 	bl	8005200 <is_aperture>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80057b4:	23ce      	movs	r3, #206	; 0xce
 80057b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80057ba:	e06b      	b.n	8005894 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80057c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fd32 	bl	8005234 <enable_spad_bit>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80057d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10c      	bne.n	80057f8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	3301      	adds	r3, #1
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80057ea:	4619      	mov	r1, r3
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff fd59 	bl	80052a4 <set_ref_spad_map>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80057f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d146      	bne.n	800588e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005800:	f107 0312 	add.w	r3, r7, #18
 8005804:	4619      	mov	r1, r3
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fdee 	bl	80053e8 <perform_ref_signal_measurement>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005812:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005816:	2b00      	cmp	r3, #0
 8005818:	d13b      	bne.n	8005892 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800581a:	8a7b      	ldrh	r3, [r7, #18]
 800581c:	461a      	mov	r2, r3
 800581e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	bfb8      	it	lt
 8005826:	425b      	neglt	r3, r3
 8005828:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800582a:	8a7b      	ldrh	r3, [r7, #18]
 800582c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800582e:	429a      	cmp	r2, r3
 8005830:	d21c      	bcs.n	800586c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005836:	429a      	cmp	r2, r3
 8005838:	d914      	bls.n	8005864 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800583a:	f107 031c 	add.w	r3, r7, #28
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fd2f 	bl	80052a4 <set_ref_spad_map>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005852:	f107 011c 	add.w	r1, r7, #28
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	4618      	mov	r0, r3
 800585a:	f00c ffb4 	bl	80127c6 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	3b01      	subs	r3, #1
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e00a      	b.n	8005882 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005876:	f107 031c 	add.w	r3, r7, #28
 800587a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587c:	4618      	mov	r0, r3
 800587e:	f00c ffa2 	bl	80127c6 <memcpy>
		while (!complete) {
 8005882:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005886:	2b00      	cmp	r3, #0
 8005888:	f43f af74 	beq.w	8005774 <VL53L0X_perform_ref_spad_management+0x2b8>
 800588c:	e002      	b.n	8005894 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005892:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005894:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005898:	2b00      	cmp	r3, #0
 800589a:	d115      	bne.n	80058c8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80058a8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80058c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	375c      	adds	r7, #92	; 0x5c
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd90      	pop	{r4, r7, pc}

080058d4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b093      	sub	sp, #76	; 0x4c
 80058d8:	af06      	add	r7, sp, #24
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80058ec:	23b4      	movs	r3, #180	; 0xb4
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80058f2:	2306      	movs	r3, #6
 80058f4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80058f6:	232c      	movs	r3, #44	; 0x2c
 80058f8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058fa:	2201      	movs	r2, #1
 80058fc:	21ff      	movs	r1, #255	; 0xff
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f002 ff1a 	bl	8008738 <VL53L0X_WrByte>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800590a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005912:	2200      	movs	r2, #0
 8005914:	214f      	movs	r1, #79	; 0x4f
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f002 ff0e 	bl	8008738 <VL53L0X_WrByte>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005922:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005926:	2b00      	cmp	r3, #0
 8005928:	d107      	bne.n	800593a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800592a:	222c      	movs	r2, #44	; 0x2c
 800592c:	214e      	movs	r1, #78	; 0x4e
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f002 ff02 	bl	8008738 <VL53L0X_WrByte>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800593a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005942:	2200      	movs	r2, #0
 8005944:	21ff      	movs	r1, #255	; 0xff
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f002 fef6 	bl	8008738 <VL53L0X_WrByte>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800595a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800595e:	461a      	mov	r2, r3
 8005960:	21b6      	movs	r1, #182	; 0xb6
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f002 fee8 	bl	8008738 <VL53L0X_WrByte>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800596e:	2300      	movs	r3, #0
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	e009      	b.n	8005988 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	4413      	add	r3, r2
 800597a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	3301      	adds	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	429a      	cmp	r2, r3
 800598e:	d3f1      	bcc.n	8005974 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d011      	beq.n	80059ba <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005996:	e002      	b.n	800599e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	3301      	adds	r3, #1
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800599e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	4413      	add	r3, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fc2a 	bl	8005200 <is_aperture>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <VL53L0X_set_reference_spads+0xe6>
 80059b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3ee      	bcc.n	8005998 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80059c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ca:	79f9      	ldrb	r1, [r7, #7]
 80059cc:	f107 0214 	add.w	r2, r7, #20
 80059d0:	9204      	str	r2, [sp, #16]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	9203      	str	r2, [sp, #12]
 80059d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d8:	9202      	str	r2, [sp, #8]
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4623      	mov	r3, r4
 80059e2:	4602      	mov	r2, r0
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff fc83 	bl	80052f0 <enable_ref_spads>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80059f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10c      	bne.n	8005a12 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	79fa      	ldrb	r2, [r7, #7]
 8005a0e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005a12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3734      	adds	r7, #52	; 0x34
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd90      	pop	{r4, r7, pc}

08005a1e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2100      	movs	r1, #0
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f002 fe78 	bl	8008738 <VL53L0X_WrByte>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9bf 	bl	8005dd8 <VL53L0X_measurement_poll_for_completion>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005a66:	2100      	movs	r1, #0
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fab5 	bl	8004fd8 <VL53L0X_ClearInterruptMask>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 fe5a 	bl	8008738 <VL53L0X_WrByte>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	70fb      	strb	r3, [r7, #3]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70bb      	strb	r3, [r7, #2]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	21ff      	movs	r1, #255	; 0xff
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 fe3c 	bl	8008738 <VL53L0X_WrByte>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f002 fe32 	bl	8008738 <VL53L0X_WrByte>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	21ff      	movs	r1, #255	; 0xff
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f002 fe28 	bl	8008738 <VL53L0X_WrByte>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005af8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	21cb      	movs	r1, #203	; 0xcb
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f002 fd1c 	bl	8008542 <VL53L0X_RdByte>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005b14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d02a      	beq.n	8005b72 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005b1c:	f107 030e 	add.w	r3, r7, #14
 8005b20:	461a      	mov	r2, r3
 8005b22:	21ee      	movs	r1, #238	; 0xee
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f002 fd0c 	bl	8008542 <VL53L0X_RdByte>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e01d      	b.n	8005b72 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005b3e:	78bb      	ldrb	r3, [r7, #2]
 8005b40:	461a      	mov	r2, r3
 8005b42:	21cb      	movs	r1, #203	; 0xcb
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f002 fdf7 	bl	8008738 <VL53L0X_WrByte>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005b54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005b5c:	787b      	ldrb	r3, [r7, #1]
 8005b5e:	2280      	movs	r2, #128	; 0x80
 8005b60:	21ee      	movs	r1, #238	; 0xee
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f002 fe36 	bl	80087d4 <VL53L0X_UpdateByte>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b72:	2201      	movs	r2, #1
 8005b74:	21ff      	movs	r1, #255	; 0xff
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f002 fdde 	bl	8008738 <VL53L0X_WrByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005b86:	2201      	movs	r2, #1
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f002 fdd4 	bl	8008738 <VL53L0X_WrByte>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	21ff      	movs	r1, #255	; 0xff
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f002 fdca 	bl	8008738 <VL53L0X_WrByte>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005bae:	7bbb      	ldrb	r3, [r7, #14]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	701a      	strb	r2, [r3, #0]

	return Status;
 8005bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08a      	sub	sp, #40	; 0x28
 8005bca:	af04      	add	r7, sp, #16
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	71fb      	strb	r3, [r7, #7]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005bf0:	79bb      	ldrb	r3, [r7, #6]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005bfc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005bfe:	2201      	movs	r2, #1
 8005c00:	2101      	movs	r1, #1
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f002 fd98 	bl	8008738 <VL53L0X_WrByte>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff01 	bl	8005a1e <VL53L0X_perform_single_ref_calibration>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d115      	bne.n	8005c54 <VL53L0X_perform_vhv_calibration+0x8e>
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d112      	bne.n	8005c54 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005c2e:	7d39      	ldrb	r1, [r7, #20]
 8005c30:	7d7a      	ldrb	r2, [r7, #21]
 8005c32:	2300      	movs	r3, #0
 8005c34:	9303      	str	r3, [sp, #12]
 8005c36:	2301      	movs	r3, #1
 8005c38:	9302      	str	r3, [sp, #8]
 8005c3a:	f107 0313 	add.w	r3, r7, #19
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	460b      	mov	r3, r1
 8005c46:	2101      	movs	r1, #1
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff ff23 	bl	8005a94 <VL53L0X_ref_calibration_io>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	e002      	b.n	8005c5a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d112      	bne.n	8005c88 <VL53L0X_perform_vhv_calibration+0xc2>
 8005c62:	79bb      	ldrb	r3, [r7, #6]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00f      	beq.n	8005c88 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005c68:	7dbb      	ldrb	r3, [r7, #22]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f002 fd62 	bl	8008738 <VL53L0X_WrByte>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	7dba      	ldrb	r2, [r7, #22]
 8005c84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af04      	add	r7, sp, #16
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	71fb      	strb	r3, [r7, #7]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005cba:	79bb      	ldrb	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005cc6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005cc8:	2202      	movs	r2, #2
 8005cca:	2101      	movs	r1, #1
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f002 fd33 	bl	8008738 <VL53L0X_WrByte>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff fe9c 	bl	8005a1e <VL53L0X_perform_single_ref_calibration>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d115      	bne.n	8005d1e <VL53L0X_perform_phase_calibration+0x8a>
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d112      	bne.n	8005d1e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005cf8:	7d39      	ldrb	r1, [r7, #20]
 8005cfa:	7d7a      	ldrb	r2, [r7, #21]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	9303      	str	r3, [sp, #12]
 8005d00:	2300      	movs	r3, #0
 8005d02:	9302      	str	r3, [sp, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	f107 0313 	add.w	r3, r7, #19
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	2101      	movs	r1, #1
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff febe 	bl	8005a94 <VL53L0X_ref_calibration_io>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]
 8005d1c:	e002      	b.n	8005d24 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005d24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d112      	bne.n	8005d52 <VL53L0X_perform_phase_calibration+0xbe>
 8005d2c:	79bb      	ldrb	r3, [r7, #6]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00f      	beq.n	8005d52 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d32:	7dbb      	ldrb	r3, [r7, #22]
 8005d34:	461a      	mov	r2, r3
 8005d36:	2101      	movs	r1, #1
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f002 fcfd 	bl	8008738 <VL53L0X_WrByte>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	7dba      	ldrb	r2, [r7, #22]
 8005d4e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005d7a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff ff1f 	bl	8005bc6 <VL53L0X_perform_vhv_calibration>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d107      	bne.n	8005da4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005d94:	78fa      	ldrb	r2, [r7, #3]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff ff7a 	bl	8005c94 <VL53L0X_perform_phase_calibration>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10f      	bne.n	8005dcc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005dac:	7dbb      	ldrb	r3, [r7, #22]
 8005dae:	461a      	mov	r2, r3
 8005db0:	2101      	movs	r1, #1
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f002 fcc0 	bl	8008738 <VL53L0X_WrByte>
 8005db8:	4603      	mov	r3, r0
 8005dba:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	7dba      	ldrb	r2, [r7, #22]
 8005dc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005dec:	f107 030f 	add.w	r3, r7, #15
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fe fdff 	bl	80049f6 <VL53L0X_GetMeasurementDataReady>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d00e      	beq.n	8005e28 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2bc7      	cmp	r3, #199	; 0xc7
 8005e14:	d902      	bls.n	8005e1c <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005e16:	23f9      	movs	r3, #249	; 0xf9
 8005e18:	75fb      	strb	r3, [r7, #23]
			break;
 8005e1a:	e006      	b.n	8005e2a <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 fd0d 	bl	800883c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005e22:	e7e3      	b.n	8005dec <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8005e28:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	3301      	adds	r3, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e92:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005e94:	e002      	b.n	8005e9c <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	089b      	lsrs	r3, r3, #2
 8005e9a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d8f8      	bhi.n	8005e96 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005ea4:	e017      	b.n	8005ed6 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d30b      	bcc.n	8005eca <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e002      	b.n	8005ed0 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e4      	bne.n	8005ea6 <VL53L0X_isqrt+0x24>
	}

	return res;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b086      	sub	sp, #24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2183      	movs	r1, #131	; 0x83
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f002 fc1c 	bl	8008738 <VL53L0X_WrByte>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d11c      	bne.n	8005f4c <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005f16:	f107 030f 	add.w	r3, r7, #15
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2183      	movs	r1, #131	; 0x83
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 fb0f 	bl	8008542 <VL53L0X_RdByte>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <VL53L0X_device_read_strobe+0x58>
 8005f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d105      	bne.n	8005f42 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2bc7      	cmp	r3, #199	; 0xc7
 8005f40:	d9e9      	bls.n	8005f16 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2bc7      	cmp	r3, #199	; 0xc7
 8005f46:	d901      	bls.n	8005f4c <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005f48:	23f9      	movs	r3, #249	; 0xf9
 8005f4a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2183      	movs	r1, #131	; 0x83
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 fbf1 	bl	8008738 <VL53L0X_WrByte>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005f60:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b098      	sub	sp, #96	; 0x60
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005f9c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005fa0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005fb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fbc:	2b07      	cmp	r3, #7
 8005fbe:	f000 8408 	beq.w	80067d2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	2180      	movs	r1, #128	; 0x80
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f002 fbb6 	bl	8008738 <VL53L0X_WrByte>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005fda:	2201      	movs	r2, #1
 8005fdc:	21ff      	movs	r1, #255	; 0xff
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fbaa 	bl	8008738 <VL53L0X_WrByte>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f002 fb9e 	bl	8008738 <VL53L0X_WrByte>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	461a      	mov	r2, r3
 8006000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006004:	4313      	orrs	r3, r2
 8006006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800600a:	2206      	movs	r2, #6
 800600c:	21ff      	movs	r1, #255	; 0xff
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f002 fb92 	bl	8008738 <VL53L0X_WrByte>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800601c:	4313      	orrs	r3, r2
 800601e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006022:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006026:	461a      	mov	r2, r3
 8006028:	2183      	movs	r1, #131	; 0x83
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 fa89 	bl	8008542 <VL53L0X_RdByte>
 8006030:	4603      	mov	r3, r0
 8006032:	461a      	mov	r2, r3
 8006034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006038:	4313      	orrs	r3, r2
 800603a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800603e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006042:	f043 0304 	orr.w	r3, r3, #4
 8006046:	b2db      	uxtb	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	2183      	movs	r1, #131	; 0x83
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 fb73 	bl	8008738 <VL53L0X_WrByte>
 8006052:	4603      	mov	r3, r0
 8006054:	461a      	mov	r2, r3
 8006056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800605a:	4313      	orrs	r3, r2
 800605c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006060:	2207      	movs	r2, #7
 8006062:	21ff      	movs	r1, #255	; 0xff
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f002 fb67 	bl	8008738 <VL53L0X_WrByte>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006072:	4313      	orrs	r3, r2
 8006074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006078:	2201      	movs	r2, #1
 800607a:	2181      	movs	r1, #129	; 0x81
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f002 fb5b 	bl	8008738 <VL53L0X_WrByte>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800608a:	4313      	orrs	r3, r2
 800608c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f002 fbd3 	bl	800883c <VL53L0X_PollingDelay>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800609e:	4313      	orrs	r3, r2
 80060a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80060a4:	2201      	movs	r2, #1
 80060a6:	2180      	movs	r1, #128	; 0x80
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f002 fb45 	bl	8008738 <VL53L0X_WrByte>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8098 	beq.w	80061f8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80060c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060cc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 8091 	bne.w	80061f8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80060d6:	226b      	movs	r2, #107	; 0x6b
 80060d8:	2194      	movs	r1, #148	; 0x94
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f002 fb2c 	bl	8008738 <VL53L0X_WrByte>
 80060e0:	4603      	mov	r3, r0
 80060e2:	461a      	mov	r2, r3
 80060e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fefb 	bl	8005eea <VL53L0X_device_read_strobe>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006106:	461a      	mov	r2, r3
 8006108:	2190      	movs	r1, #144	; 0x90
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f002 fad8 	bl	80086c0 <VL53L0X_RdDWord>
 8006110:	4603      	mov	r3, r0
 8006112:	461a      	mov	r2, r3
 8006114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006118:	4313      	orrs	r3, r2
 800611a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006128:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	0bdb      	lsrs	r3, r3, #15
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	2194      	movs	r1, #148	; 0x94
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f002 fafa 	bl	8008738 <VL53L0X_WrByte>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800614c:	4313      	orrs	r3, r2
 800614e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fec9 	bl	8005eea <VL53L0X_device_read_strobe>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006160:	4313      	orrs	r3, r2
 8006162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800616a:	461a      	mov	r2, r3
 800616c:	2190      	movs	r1, #144	; 0x90
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f002 faa6 	bl	80086c0 <VL53L0X_RdDWord>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800617c:	4313      	orrs	r3, r2
 800617e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	0e1b      	lsrs	r3, r3, #24
 8006186:	b2db      	uxtb	r3, r3
 8006188:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	b2db      	uxtb	r3, r3
 8006190:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	0a1b      	lsrs	r3, r3, #8
 8006196:	b2db      	uxtb	r3, r3
 8006198:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	b2db      	uxtb	r3, r3
 800619e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80061a0:	2225      	movs	r2, #37	; 0x25
 80061a2:	2194      	movs	r1, #148	; 0x94
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f002 fac7 	bl	8008738 <VL53L0X_WrByte>
 80061aa:	4603      	mov	r3, r0
 80061ac:	461a      	mov	r2, r3
 80061ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe96 	bl	8005eea <VL53L0X_device_read_strobe>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80061cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061d0:	461a      	mov	r2, r3
 80061d2:	2190      	movs	r1, #144	; 0x90
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f002 fa73 	bl	80086c0 <VL53L0X_RdDWord>
 80061da:	4603      	mov	r3, r0
 80061dc:	461a      	mov	r2, r3
 80061de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	0e1b      	lsrs	r3, r3, #24
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8189 	beq.w	8006516 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006204:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006208:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 8182 	bne.w	8006516 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006212:	2202      	movs	r2, #2
 8006214:	2194      	movs	r1, #148	; 0x94
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f002 fa8e 	bl	8008738 <VL53L0X_WrByte>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006224:	4313      	orrs	r3, r2
 8006226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fe5d 	bl	8005eea <VL53L0X_device_read_strobe>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006238:	4313      	orrs	r3, r2
 800623a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800623e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006242:	461a      	mov	r2, r3
 8006244:	2190      	movs	r1, #144	; 0x90
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f002 f97b 	bl	8008542 <VL53L0X_RdByte>
 800624c:	4603      	mov	r3, r0
 800624e:	461a      	mov	r2, r3
 8006250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006254:	4313      	orrs	r3, r2
 8006256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800625a:	227b      	movs	r2, #123	; 0x7b
 800625c:	2194      	movs	r1, #148	; 0x94
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f002 fa6a 	bl	8008738 <VL53L0X_WrByte>
 8006264:	4603      	mov	r3, r0
 8006266:	461a      	mov	r2, r3
 8006268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800626c:	4313      	orrs	r3, r2
 800626e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fe39 	bl	8005eea <VL53L0X_device_read_strobe>
 8006278:	4603      	mov	r3, r0
 800627a:	461a      	mov	r2, r3
 800627c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006280:	4313      	orrs	r3, r2
 8006282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006286:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800628a:	461a      	mov	r2, r3
 800628c:	2190      	movs	r1, #144	; 0x90
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f002 f957 	bl	8008542 <VL53L0X_RdByte>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800629c:	4313      	orrs	r3, r2
 800629e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80062a2:	2277      	movs	r2, #119	; 0x77
 80062a4:	2194      	movs	r1, #148	; 0x94
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f002 fa46 	bl	8008738 <VL53L0X_WrByte>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fe15 	bl	8005eea <VL53L0X_device_read_strobe>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80062ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062d2:	461a      	mov	r2, r3
 80062d4:	2190      	movs	r1, #144	; 0x90
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f002 f9f2 	bl	80086c0 <VL53L0X_RdDWord>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	0e5b      	lsrs	r3, r3, #25
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	0c9b      	lsrs	r3, r3, #18
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006302:	b2db      	uxtb	r3, r3
 8006304:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	0adb      	lsrs	r3, r3, #11
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006310:	b2db      	uxtb	r3, r3
 8006312:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631e:	b2db      	uxtb	r3, r3
 8006320:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	b2db      	uxtb	r3, r3
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006334:	2278      	movs	r2, #120	; 0x78
 8006336:	2194      	movs	r1, #148	; 0x94
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f002 f9fd 	bl	8008738 <VL53L0X_WrByte>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006346:	4313      	orrs	r3, r2
 8006348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fdcc 	bl	8005eea <VL53L0X_device_read_strobe>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800635a:	4313      	orrs	r3, r2
 800635c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006364:	461a      	mov	r2, r3
 8006366:	2190      	movs	r1, #144	; 0x90
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f002 f9a9 	bl	80086c0 <VL53L0X_RdDWord>
 800636e:	4603      	mov	r3, r0
 8006370:	461a      	mov	r2, r3
 8006372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006376:	4313      	orrs	r3, r2
 8006378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	0f5b      	lsrs	r3, r3, #29
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800638c:	4413      	add	r3, r2
 800638e:	b2db      	uxtb	r3, r3
 8006390:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	0d9b      	lsrs	r3, r3, #22
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639c:	b2db      	uxtb	r3, r3
 800639e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	0bdb      	lsrs	r3, r3, #15
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	0a1b      	lsrs	r3, r3, #8
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80063dc:	2279      	movs	r2, #121	; 0x79
 80063de:	2194      	movs	r1, #148	; 0x94
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f002 f9a9 	bl	8008738 <VL53L0X_WrByte>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fd78 	bl	8005eea <VL53L0X_device_read_strobe>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006402:	4313      	orrs	r3, r2
 8006404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800640c:	461a      	mov	r2, r3
 800640e:	2190      	movs	r1, #144	; 0x90
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 f955 	bl	80086c0 <VL53L0X_RdDWord>
 8006416:	4603      	mov	r3, r0
 8006418:	461a      	mov	r2, r3
 800641a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800641e:	4313      	orrs	r3, r2
 8006420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	0e9b      	lsrs	r3, r3, #26
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006434:	4413      	add	r3, r2
 8006436:	b2db      	uxtb	r3, r3
 8006438:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	0cdb      	lsrs	r3, r3, #19
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006444:	b2db      	uxtb	r3, r3
 8006446:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	0b1b      	lsrs	r3, r3, #12
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006452:	b2db      	uxtb	r3, r3
 8006454:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006460:	b2db      	uxtb	r3, r3
 8006462:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	b2db      	uxtb	r3, r3
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006476:	227a      	movs	r2, #122	; 0x7a
 8006478:	2194      	movs	r1, #148	; 0x94
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f002 f95c 	bl	8008738 <VL53L0X_WrByte>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006488:	4313      	orrs	r3, r2
 800648a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fd2b 	bl	8005eea <VL53L0X_device_read_strobe>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800649c:	4313      	orrs	r3, r2
 800649e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064a6:	461a      	mov	r2, r3
 80064a8:	2190      	movs	r1, #144	; 0x90
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f002 f908 	bl	80086c0 <VL53L0X_RdDWord>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	0f9b      	lsrs	r3, r3, #30
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80064ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80064ce:	4413      	add	r3, r2
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	0ddb      	lsrs	r3, r3, #23
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	0c1b      	lsrs	r3, r3, #16
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	0a5b      	lsrs	r3, r3, #9
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80f1 	beq.w	8006704 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006522:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006526:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 80ea 	bne.w	8006704 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006530:	227b      	movs	r2, #123	; 0x7b
 8006532:	2194      	movs	r1, #148	; 0x94
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f002 f8ff 	bl	8008738 <VL53L0X_WrByte>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006542:	4313      	orrs	r3, r2
 8006544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fcce 	bl	8005eea <VL53L0X_device_read_strobe>
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006556:	4313      	orrs	r3, r2
 8006558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800655c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006560:	461a      	mov	r2, r3
 8006562:	2190      	movs	r1, #144	; 0x90
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 f8ab 	bl	80086c0 <VL53L0X_RdDWord>
 800656a:	4603      	mov	r3, r0
 800656c:	461a      	mov	r2, r3
 800656e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006572:	4313      	orrs	r3, r2
 8006574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006578:	227c      	movs	r2, #124	; 0x7c
 800657a:	2194      	movs	r1, #148	; 0x94
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 f8db 	bl	8008738 <VL53L0X_WrByte>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800658a:	4313      	orrs	r3, r2
 800658c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fcaa 	bl	8005eea <VL53L0X_device_read_strobe>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800659e:	4313      	orrs	r3, r2
 80065a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80065a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a8:	461a      	mov	r2, r3
 80065aa:	2190      	movs	r1, #144	; 0x90
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 f887 	bl	80086c0 <VL53L0X_RdDWord>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80065c0:	2273      	movs	r2, #115	; 0x73
 80065c2:	2194      	movs	r1, #148	; 0x94
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 f8b7 	bl	8008738 <VL53L0X_WrByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fc86 	bl	8005eea <VL53L0X_device_read_strobe>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065f0:	461a      	mov	r2, r3
 80065f2:	2190      	movs	r1, #144	; 0x90
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 f863 	bl	80086c0 <VL53L0X_RdDWord>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006602:	4313      	orrs	r3, r2
 8006604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800660c:	b29b      	uxth	r3, r3
 800660e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006610:	2274      	movs	r2, #116	; 0x74
 8006612:	2194      	movs	r1, #148	; 0x94
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f002 f88f 	bl	8008738 <VL53L0X_WrByte>
 800661a:	4603      	mov	r3, r0
 800661c:	461a      	mov	r2, r3
 800661e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006622:	4313      	orrs	r3, r2
 8006624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fc5e 	bl	8005eea <VL53L0X_device_read_strobe>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006636:	4313      	orrs	r3, r2
 8006638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800663c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006640:	461a      	mov	r2, r3
 8006642:	2190      	movs	r1, #144	; 0x90
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 f83b 	bl	80086c0 <VL53L0X_RdDWord>
 800664a:	4603      	mov	r3, r0
 800664c:	461a      	mov	r2, r3
 800664e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006652:	4313      	orrs	r3, r2
 8006654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800665c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800665e:	4313      	orrs	r3, r2
 8006660:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006662:	2275      	movs	r2, #117	; 0x75
 8006664:	2194      	movs	r1, #148	; 0x94
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 f866 	bl	8008738 <VL53L0X_WrByte>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006674:	4313      	orrs	r3, r2
 8006676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fc35 	bl	8005eea <VL53L0X_device_read_strobe>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006688:	4313      	orrs	r3, r2
 800668a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800668e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006692:	461a      	mov	r2, r3
 8006694:	2190      	movs	r1, #144	; 0x90
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f002 f812 	bl	80086c0 <VL53L0X_RdDWord>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
 80066a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066b2:	2276      	movs	r2, #118	; 0x76
 80066b4:	2194      	movs	r1, #148	; 0x94
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f002 f83e 	bl	8008738 <VL53L0X_WrByte>
 80066bc:	4603      	mov	r3, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fc0d 	bl	8005eea <VL53L0X_device_read_strobe>
 80066d0:	4603      	mov	r3, r0
 80066d2:	461a      	mov	r2, r3
 80066d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066d8:	4313      	orrs	r3, r2
 80066da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e2:	461a      	mov	r2, r3
 80066e4:	2190      	movs	r1, #144	; 0x90
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 ffea 	bl	80086c0 <VL53L0X_RdDWord>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80066fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006700:	4313      	orrs	r3, r2
 8006702:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006704:	2200      	movs	r2, #0
 8006706:	2181      	movs	r1, #129	; 0x81
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f002 f815 	bl	8008738 <VL53L0X_WrByte>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006716:	4313      	orrs	r3, r2
 8006718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800671c:	2206      	movs	r2, #6
 800671e:	21ff      	movs	r1, #255	; 0xff
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f002 f809 	bl	8008738 <VL53L0X_WrByte>
 8006726:	4603      	mov	r3, r0
 8006728:	461a      	mov	r2, r3
 800672a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800672e:	4313      	orrs	r3, r2
 8006730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006734:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006738:	461a      	mov	r2, r3
 800673a:	2183      	movs	r1, #131	; 0x83
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 ff00 	bl	8008542 <VL53L0X_RdByte>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800674a:	4313      	orrs	r3, r2
 800674c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	2183      	movs	r1, #131	; 0x83
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 ffea 	bl	8008738 <VL53L0X_WrByte>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800676c:	4313      	orrs	r3, r2
 800676e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006772:	2201      	movs	r2, #1
 8006774:	21ff      	movs	r1, #255	; 0xff
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 ffde 	bl	8008738 <VL53L0X_WrByte>
 800677c:	4603      	mov	r3, r0
 800677e:	461a      	mov	r2, r3
 8006780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006784:	4313      	orrs	r3, r2
 8006786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800678a:	2201      	movs	r2, #1
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 ffd2 	bl	8008738 <VL53L0X_WrByte>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800679c:	4313      	orrs	r3, r2
 800679e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067a2:	2200      	movs	r2, #0
 80067a4:	21ff      	movs	r1, #255	; 0xff
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 ffc6 	bl	8008738 <VL53L0X_WrByte>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 ffba 	bl	8008738 <VL53L0X_WrByte>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80067d2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 808f 	bne.w	80068fa <VL53L0X_get_info_from_device+0x98e>
 80067dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067e0:	2b07      	cmp	r3, #7
 80067e2:	f000 808a 	beq.w	80068fa <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d024      	beq.n	800683a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80067f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067f4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11e      	bne.n	800683a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006802:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800680c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006810:	2300      	movs	r3, #0
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006814:	e00e      	b.n	8006834 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	4413      	add	r3, r2
 800681e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	4413      	add	r3, r2
 8006826:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800682a:	460a      	mov	r2, r1
 800682c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800682e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006830:	3301      	adds	r3, #1
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006836:	2b05      	cmp	r3, #5
 8006838:	dded      	ble.n	8006816 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d018      	beq.n	8006876 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006844:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006848:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800684c:	2b00      	cmp	r3, #0
 800684e:	d112      	bne.n	8006876 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006850:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800685a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	33f3      	adds	r3, #243	; 0xf3
 8006868:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800686a:	f107 0310 	add.w	r3, r7, #16
 800686e:	4619      	mov	r1, r3
 8006870:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006872:	f00c f88b 	bl	801298c <strcpy>

		}

		if (((option & 4) == 4) &&
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d030      	beq.n	80068e2 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006884:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006888:	2b00      	cmp	r3, #0
 800688a:	d12a      	bne.n	80068e2 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800688c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800689c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689e:	025b      	lsls	r3, r3, #9
 80068a0:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068a6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80068b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d011      	beq.n	80068da <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80068b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80068be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80068ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80068ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80068d2:	425b      	negs	r3, r3
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80068da:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80068e2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80068f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068fa:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3760      	adds	r7, #96	; 0x60
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006906:	b490      	push	{r4, r7}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006912:	f240 6377 	movw	r3, #1655	; 0x677
 8006916:	f04f 0400 	mov.w	r4, #0
 800691a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800691e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006922:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006934:	68bb      	ldr	r3, [r7, #8]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bc90      	pop	{r4, r7}
 800693e:	4770      	bx	lr

08006940 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d017      	beq.n	800698a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3b01      	subs	r3, #1
 800695e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006960:	e005      	b.n	800696e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	3301      	adds	r3, #1
 800696c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f4      	bne.n	8006962 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	b29b      	uxth	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006986:	4413      	add	r3, r2
 8006988:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800698a:	8afb      	ldrh	r3, [r7, #22]

}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	0a12      	lsrs	r2, r2, #8
 80069ae:	b292      	uxth	r2, r2
 80069b0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80069b6:	68fb      	ldr	r3, [r7, #12]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff ff93 	bl	8006906 <VL53L0X_calc_macro_period_ps>
 80069e0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <VL53L0X_calc_timeout_mclks+0x50>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069f8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
	timeout_period_mclks =
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	10624dd3 	.word	0x10624dd3

08006a18 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
 8006a24:	4613      	mov	r3, r2
 8006a26:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006a2c:	787b      	ldrb	r3, [r7, #1]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ff68 	bl	8006906 <VL53L0X_calc_macro_period_ps>
 8006a36:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006a3e:	4a0b      	ldr	r2, [pc, #44]	; (8006a6c <VL53L0X_calc_timeout_us+0x54>)
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	099b      	lsrs	r3, r3, #6
 8006a46:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	4413      	add	r3, r2
	actual_timeout_period_us =
 8006a56:	4a05      	ldr	r2, [pc, #20]	; (8006a6c <VL53L0X_calc_timeout_us+0x54>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	099b      	lsrs	r3, r3, #6
 8006a5e:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006a60:	697b      	ldr	r3, [r7, #20]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	10624dd3 	.word	0x10624dd3

08006a70 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08c      	sub	sp, #48	; 0x30
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <get_sequence_step_timeout+0x38>
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d002      	beq.n	8006aa8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d128      	bne.n	8006afa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006aa8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006aac:	461a      	mov	r2, r3
 8006aae:	2100      	movs	r1, #0
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7fd fa75 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006abc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006ac4:	f107 0320 	add.w	r3, r7, #32
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2146      	movs	r1, #70	; 0x46
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f001 fd38 	bl	8008542 <VL53L0X_RdByte>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff ff5a 	bl	8006998 <VL53L0X_decode_timeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006ae8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff ff91 	bl	8006a18 <VL53L0X_calc_timeout_us>
 8006af6:	62b8      	str	r0, [r7, #40]	; 0x28
 8006af8:	e092      	b.n	8006c20 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d135      	bne.n	8006b6c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b00:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b04:	461a      	mov	r2, r3
 8006b06:	2100      	movs	r1, #0
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7fd fa49 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f040 8081 	bne.w	8006c20 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b1e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b22:	461a      	mov	r2, r3
 8006b24:	2100      	movs	r1, #0
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fd fa3a 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006b32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006b3a:	f107 031e 	add.w	r3, r7, #30
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2151      	movs	r1, #81	; 0x51
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 fd84 	bl	8008650 <VL53L0X_RdWord>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b4e:	8bfb      	ldrh	r3, [r7, #30]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff ff21 	bl	8006998 <VL53L0X_decode_timeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006b5a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b60:	4619      	mov	r1, r3
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff ff58 	bl	8006a18 <VL53L0X_calc_timeout_us>
 8006b68:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b6a:	e059      	b.n	8006c20 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d156      	bne.n	8006c20 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7fd fb1d 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01d      	beq.n	8006bc4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b88:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2100      	movs	r1, #0
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7fd fa05 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006ba4:	f107 031e 	add.w	r3, r7, #30
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2151      	movs	r1, #81	; 0x51
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f001 fd4f 	bl	8008650 <VL53L0X_RdWord>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006bb8:	8bfb      	ldrh	r3, [r7, #30]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff feec 	bl	8006998 <VL53L0X_decode_timeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006bc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006bcc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7fd f9e3 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006be0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006be8:	f107 031c 	add.w	r3, r7, #28
 8006bec:	461a      	mov	r2, r3
 8006bee:	2171      	movs	r1, #113	; 0x71
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f001 fd2d 	bl	8008650 <VL53L0X_RdWord>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006bfc:	8bbb      	ldrh	r3, [r7, #28]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff feca 	bl	8006998 <VL53L0X_decode_timeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006c08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006c10:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c16:	4619      	mov	r1, r3
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fefd 	bl	8006a18 <VL53L0X_calc_timeout_us>
 8006c1e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c24:	601a      	str	r2, [r3, #0]

	return Status;
 8006c26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3730      	adds	r7, #48	; 0x30
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08a      	sub	sp, #40	; 0x28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <set_sequence_step_timeout+0x26>
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d002      	beq.n	8006c58 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d138      	bne.n	8006cca <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c58:	f107 031d 	add.w	r3, r7, #29
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2100      	movs	r1, #0
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7fd f99d 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11a      	bne.n	8006caa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006c74:	7f7b      	ldrb	r3, [r7, #29]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff fea2 	bl	80069c4 <VL53L0X_calc_timeout_mclks>
 8006c80:	4603      	mov	r3, r0
 8006c82:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006c84:	8bfb      	ldrh	r3, [r7, #30]
 8006c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8a:	d903      	bls.n	8006c94 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006c8c:	23ff      	movs	r3, #255	; 0xff
 8006c8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c92:	e004      	b.n	8006c9e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006c94:	8bfb      	ldrh	r3, [r7, #30]
 8006c96:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006caa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f040 80ad 	bne.w	8006e0e <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8006cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2146      	movs	r1, #70	; 0x46
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f001 fd3b 	bl	8008738 <VL53L0X_WrByte>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006cc8:	e0a1      	b.n	8006e0e <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d135      	bne.n	8006d3c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11b      	bne.n	8006d10 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006cd8:	f107 031d 	add.w	r3, r7, #29
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7fd f95d 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006cec:	7f7b      	ldrb	r3, [r7, #29]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff fe66 	bl	80069c4 <VL53L0X_calc_timeout_mclks>
 8006cf8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fe1e 	bl	8006940 <VL53L0X_encode_timeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d08:	8b7a      	ldrh	r2, [r7, #26]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006d10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006d18:	8b7b      	ldrh	r3, [r7, #26]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2151      	movs	r1, #81	; 0x51
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f001 fd2e 	bl	8008780 <VL53L0X_WrWord>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006d2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d16d      	bne.n	8006e0e <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006d3a:	e068      	b.n	8006e0e <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d162      	bne.n	8006e08 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006d42:	f107 0314 	add.w	r3, r7, #20
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7fd fa35 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01d      	beq.n	8006d94 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d58:	f107 031d 	add.w	r3, r7, #29
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2100      	movs	r1, #0
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7fd f91d 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10f      	bne.n	8006d94 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006d74:	f107 031a 	add.w	r3, r7, #26
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2151      	movs	r1, #81	; 0x51
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f001 fc67 	bl	8008650 <VL53L0X_RdWord>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006d88:	8b7b      	ldrh	r3, [r7, #26]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff fe04 	bl	8006998 <VL53L0X_decode_timeout>
 8006d90:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006d92:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d9c:	f107 031d 	add.w	r3, r7, #29
 8006da0:	461a      	mov	r2, r3
 8006da2:	2101      	movs	r1, #1
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7fd f8fb 	bl	8003fa0 <VL53L0X_GetVcselPulsePeriod>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d12a      	bne.n	8006e0e <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006db8:	7f7b      	ldrb	r3, [r7, #29]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7ff fe00 	bl	80069c4 <VL53L0X_calc_timeout_mclks>
 8006dc4:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8006dc6:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006dc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dcc:	4413      	add	r3, r2
 8006dce:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				FinalRangeEncodedTimeOut =
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fdb4 	bl	8006940 <VL53L0X_encode_timeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8006ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d108      	bne.n	8006df6 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006de4:	8c3b      	ldrh	r3, [r7, #32]
 8006de6:	461a      	mov	r2, r3
 8006de8:	2171      	movs	r1, #113	; 0x71
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f001 fcc8 	bl	8008780 <VL53L0X_WrWord>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d107      	bne.n	8006e0e <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006e06:	e002      	b.n	8006e0e <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e08:	23fc      	movs	r3, #252	; 0xfc
 8006e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006e0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3728      	adds	r7, #40	; 0x28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	; 0x28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
 8006e26:	4613      	mov	r3, r2
 8006e28:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006e30:	230c      	movs	r3, #12
 8006e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006e36:	2312      	movs	r3, #18
 8006e38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006e42:	230e      	movs	r3, #14
 8006e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006e4c:	78bb      	ldrb	r3, [r7, #2]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e58:	23fc      	movs	r3, #252	; 0xfc
 8006e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e5e:	e020      	b.n	8006ea2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10d      	bne.n	8006e82 <VL53L0X_set_vcsel_pulse_period+0x68>
 8006e66:	78ba      	ldrb	r2, [r7, #2]
 8006e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d304      	bcc.n	8006e7a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006e70:	78ba      	ldrb	r2, [r7, #2]
 8006e72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e7a:	23fc      	movs	r3, #252	; 0xfc
 8006e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e80:	e00f      	b.n	8006ea2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10c      	bne.n	8006ea2 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006e88:	78ba      	ldrb	r2, [r7, #2]
 8006e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d304      	bcc.n	8006e9c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006e92:	78ba      	ldrb	r2, [r7, #2]
 8006e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d902      	bls.n	8006ea2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e9c:	23fc      	movs	r3, #252	; 0xfc
 8006e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006ea2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eae:	e239      	b.n	8007324 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d150      	bne.n	8006f58 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006eb6:	78bb      	ldrb	r3, [r7, #2]
 8006eb8:	2b0c      	cmp	r3, #12
 8006eba:	d110      	bne.n	8006ede <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006ebc:	2218      	movs	r2, #24
 8006ebe:	2157      	movs	r1, #87	; 0x57
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fc39 	bl	8008738 <VL53L0X_WrByte>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006ecc:	2208      	movs	r2, #8
 8006ece:	2156      	movs	r1, #86	; 0x56
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fc31 	bl	8008738 <VL53L0X_WrByte>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006edc:	e17f      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006ede:	78bb      	ldrb	r3, [r7, #2]
 8006ee0:	2b0e      	cmp	r3, #14
 8006ee2:	d110      	bne.n	8006f06 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006ee4:	2230      	movs	r2, #48	; 0x30
 8006ee6:	2157      	movs	r1, #87	; 0x57
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 fc25 	bl	8008738 <VL53L0X_WrByte>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	2156      	movs	r1, #86	; 0x56
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fc1d 	bl	8008738 <VL53L0X_WrByte>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f04:	e16b      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006f06:	78bb      	ldrb	r3, [r7, #2]
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d110      	bne.n	8006f2e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006f0c:	2240      	movs	r2, #64	; 0x40
 8006f0e:	2157      	movs	r1, #87	; 0x57
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fc11 	bl	8008738 <VL53L0X_WrByte>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	2156      	movs	r1, #86	; 0x56
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fc09 	bl	8008738 <VL53L0X_WrByte>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f2c:	e157      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006f2e:	78bb      	ldrb	r3, [r7, #2]
 8006f30:	2b12      	cmp	r3, #18
 8006f32:	f040 8154 	bne.w	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006f36:	2250      	movs	r2, #80	; 0x50
 8006f38:	2157      	movs	r1, #87	; 0x57
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fbfc 	bl	8008738 <VL53L0X_WrByte>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006f46:	2208      	movs	r2, #8
 8006f48:	2156      	movs	r1, #86	; 0x56
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fbf4 	bl	8008738 <VL53L0X_WrByte>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f56:	e142      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	f040 813f 	bne.w	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006f60:	78bb      	ldrb	r3, [r7, #2]
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d14c      	bne.n	8007000 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006f66:	2210      	movs	r2, #16
 8006f68:	2148      	movs	r1, #72	; 0x48
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fbe4 	bl	8008738 <VL53L0X_WrByte>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006f76:	2208      	movs	r2, #8
 8006f78:	2147      	movs	r1, #71	; 0x47
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fbdc 	bl	8008738 <VL53L0X_WrByte>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006f86:	2202      	movs	r2, #2
 8006f88:	2132      	movs	r1, #50	; 0x32
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fbd4 	bl	8008738 <VL53L0X_WrByte>
 8006f90:	4603      	mov	r3, r0
 8006f92:	461a      	mov	r2, r3
 8006f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	2130      	movs	r1, #48	; 0x30
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fbc8 	bl	8008738 <VL53L0X_WrByte>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	21ff      	movs	r1, #255	; 0xff
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fbbc 	bl	8008738 <VL53L0X_WrByte>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006fce:	2230      	movs	r2, #48	; 0x30
 8006fd0:	2130      	movs	r1, #48	; 0x30
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fbb0 	bl	8008738 <VL53L0X_WrByte>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	21ff      	movs	r1, #255	; 0xff
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fba4 	bl	8008738 <VL53L0X_WrByte>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ffe:	e0ee      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007000:	78bb      	ldrb	r3, [r7, #2]
 8007002:	2b0a      	cmp	r3, #10
 8007004:	d14c      	bne.n	80070a0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8007006:	2228      	movs	r2, #40	; 0x28
 8007008:	2148      	movs	r1, #72	; 0x48
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fb94 	bl	8008738 <VL53L0X_WrByte>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8007016:	2208      	movs	r2, #8
 8007018:	2147      	movs	r1, #71	; 0x47
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fb8c 	bl	8008738 <VL53L0X_WrByte>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007026:	2203      	movs	r2, #3
 8007028:	2132      	movs	r1, #50	; 0x32
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fb84 	bl	8008738 <VL53L0X_WrByte>
 8007030:	4603      	mov	r3, r0
 8007032:	461a      	mov	r2, r3
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007038:	4313      	orrs	r3, r2
 800703a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800703e:	2209      	movs	r2, #9
 8007040:	2130      	movs	r1, #48	; 0x30
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fb78 	bl	8008738 <VL53L0X_WrByte>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007050:	4313      	orrs	r3, r2
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007056:	2201      	movs	r2, #1
 8007058:	21ff      	movs	r1, #255	; 0xff
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fb6c 	bl	8008738 <VL53L0X_WrByte>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007068:	4313      	orrs	r3, r2
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800706e:	2220      	movs	r2, #32
 8007070:	2130      	movs	r1, #48	; 0x30
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fb60 	bl	8008738 <VL53L0X_WrByte>
 8007078:	4603      	mov	r3, r0
 800707a:	461a      	mov	r2, r3
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	4313      	orrs	r3, r2
 8007082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007086:	2200      	movs	r2, #0
 8007088:	21ff      	movs	r1, #255	; 0xff
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fb54 	bl	8008738 <VL53L0X_WrByte>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
 8007094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007098:	4313      	orrs	r3, r2
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800709e:	e09e      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80070a0:	78bb      	ldrb	r3, [r7, #2]
 80070a2:	2b0c      	cmp	r3, #12
 80070a4:	d14c      	bne.n	8007140 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80070a6:	2238      	movs	r2, #56	; 0x38
 80070a8:	2148      	movs	r1, #72	; 0x48
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fb44 	bl	8008738 <VL53L0X_WrByte>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80070b6:	2208      	movs	r2, #8
 80070b8:	2147      	movs	r1, #71	; 0x47
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 fb3c 	bl	8008738 <VL53L0X_WrByte>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80070c6:	2203      	movs	r2, #3
 80070c8:	2132      	movs	r1, #50	; 0x32
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 fb34 	bl	8008738 <VL53L0X_WrByte>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d8:	4313      	orrs	r3, r2
 80070da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80070de:	2208      	movs	r2, #8
 80070e0:	2130      	movs	r1, #48	; 0x30
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fb28 	bl	8008738 <VL53L0X_WrByte>
 80070e8:	4603      	mov	r3, r0
 80070ea:	461a      	mov	r2, r3
 80070ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80070f6:	2201      	movs	r2, #1
 80070f8:	21ff      	movs	r1, #255	; 0xff
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fb1c 	bl	8008738 <VL53L0X_WrByte>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007108:	4313      	orrs	r3, r2
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800710e:	2220      	movs	r2, #32
 8007110:	2130      	movs	r1, #48	; 0x30
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fb10 	bl	8008738 <VL53L0X_WrByte>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007120:	4313      	orrs	r3, r2
 8007122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007126:	2200      	movs	r2, #0
 8007128:	21ff      	movs	r1, #255	; 0xff
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fb04 	bl	8008738 <VL53L0X_WrByte>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007138:	4313      	orrs	r3, r2
 800713a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800713e:	e04e      	b.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007140:	78bb      	ldrb	r3, [r7, #2]
 8007142:	2b0e      	cmp	r3, #14
 8007144:	d14b      	bne.n	80071de <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007146:	2248      	movs	r2, #72	; 0x48
 8007148:	2148      	movs	r1, #72	; 0x48
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 faf4 	bl	8008738 <VL53L0X_WrByte>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007156:	2208      	movs	r2, #8
 8007158:	2147      	movs	r1, #71	; 0x47
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 faec 	bl	8008738 <VL53L0X_WrByte>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007166:	2203      	movs	r2, #3
 8007168:	2132      	movs	r1, #50	; 0x32
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 fae4 	bl	8008738 <VL53L0X_WrByte>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007178:	4313      	orrs	r3, r2
 800717a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800717e:	2207      	movs	r2, #7
 8007180:	2130      	movs	r1, #48	; 0x30
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fad8 	bl	8008738 <VL53L0X_WrByte>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007190:	4313      	orrs	r3, r2
 8007192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007196:	2201      	movs	r2, #1
 8007198:	21ff      	movs	r1, #255	; 0xff
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 facc 	bl	8008738 <VL53L0X_WrByte>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80071ae:	2220      	movs	r2, #32
 80071b0:	2130      	movs	r1, #48	; 0x30
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fac0 	bl	8008738 <VL53L0X_WrByte>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
 80071bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80071c6:	2200      	movs	r2, #0
 80071c8:	21ff      	movs	r1, #255	; 0xff
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fab4 	bl	8008738 <VL53L0X_WrByte>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d8:	4313      	orrs	r3, r2
 80071da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80071de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d17f      	bne.n	80072e6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80071e6:	78bb      	ldrb	r3, [r7, #2]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fe37 	bl	8005e5c <VL53L0X_encode_vcsel_period>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d045      	beq.n	800728a <VL53L0X_set_vcsel_pulse_period+0x470>
 80071fe:	e06e      	b.n	80072de <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	461a      	mov	r2, r3
 8007206:	2103      	movs	r1, #3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff fc31 	bl	8006a70 <get_sequence_step_timeout>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007214:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	461a      	mov	r2, r3
 8007222:	2102      	movs	r1, #2
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fc23 	bl	8006a70 <get_sequence_step_timeout>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007238:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800723c:	461a      	mov	r2, r3
 800723e:	2150      	movs	r1, #80	; 0x50
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fa79 	bl	8008738 <VL53L0X_WrByte>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800724c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	461a      	mov	r2, r3
 8007258:	2103      	movs	r1, #3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fce9 	bl	8006c32 <set_sequence_step_timeout>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007266:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800726a:	2b00      	cmp	r3, #0
 800726c:	d108      	bne.n	8007280 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	461a      	mov	r2, r3
 8007272:	2102      	movs	r1, #2
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fcdc 	bl	8006c32 <set_sequence_step_timeout>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	78ba      	ldrb	r2, [r7, #2]
 8007284:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007288:	e02e      	b.n	80072e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800728a:	f107 0318 	add.w	r3, r7, #24
 800728e:	461a      	mov	r2, r3
 8007290:	2104      	movs	r1, #4
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fbec 	bl	8006a70 <get_sequence_step_timeout>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800729e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80072a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80072aa:	461a      	mov	r2, r3
 80072ac:	2170      	movs	r1, #112	; 0x70
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fa42 	bl	8008738 <VL53L0X_WrByte>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80072ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d108      	bne.n	80072d4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	461a      	mov	r2, r3
 80072c6:	2104      	movs	r1, #4
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fcb2 	bl	8006c32 <set_sequence_step_timeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	78ba      	ldrb	r2, [r7, #2]
 80072d8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80072dc:	e004      	b.n	80072e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072de:	23fc      	movs	r3, #252	; 0xfc
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072e4:	e000      	b.n	80072e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80072e6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80072e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80072f6:	69f9      	ldr	r1, [r7, #28]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fc fe13 	bl	8003f24 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80072fe:	4603      	mov	r3, r0
 8007300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800730c:	f107 010f 	add.w	r1, r7, #15
 8007310:	2301      	movs	r3, #1
 8007312:	2200      	movs	r2, #0
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fe fcbd 	bl	8005c94 <VL53L0X_perform_phase_calibration>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007324:	4618      	mov	r0, r3
 8007326:	3728      	adds	r7, #40	; 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	460b      	mov	r3, r1
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800733a:	2300      	movs	r3, #0
 800733c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007344:	2b01      	cmp	r3, #1
 8007346:	d00a      	beq.n	800735e <VL53L0X_get_vcsel_pulse_period+0x32>
 8007348:	e013      	b.n	8007372 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800734a:	f107 0316 	add.w	r3, r7, #22
 800734e:	461a      	mov	r2, r3
 8007350:	2150      	movs	r1, #80	; 0x50
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 f8f5 	bl	8008542 <VL53L0X_RdByte>
 8007358:	4603      	mov	r3, r0
 800735a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800735c:	e00b      	b.n	8007376 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800735e:	f107 0316 	add.w	r3, r7, #22
 8007362:	461a      	mov	r2, r3
 8007364:	2170      	movs	r1, #112	; 0x70
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f8eb 	bl	8008542 <VL53L0X_RdByte>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007370:	e001      	b.n	8007376 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007372:	23fc      	movs	r3, #252	; 0xfc
 8007374:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d107      	bne.n	800738e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800737e:	7dbb      	ldrb	r3, [r7, #22]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fd58 	bl	8005e36 <VL53L0X_decode_vcsel_period>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	701a      	strb	r2, [r3, #0]

	return Status;
 800738e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b092      	sub	sp, #72	; 0x48
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80073aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80073ae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 80073b0:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80073b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80073bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80073c2:	f240 234e 	movw	r3, #590	; 0x24e
 80073c6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80073c8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80073ce:	f44f 7325 	mov.w	r3, #660	; 0x294
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80073d4:	f240 2326 	movw	r3, #550	; 0x226
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80073de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80073e2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d205      	bcs.n	80073fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073f0:	23fc      	movs	r3, #252	; 0xfc
 80073f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80073f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80073fa:	e0aa      	b.n	8007552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80073fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fc fed2 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800741a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800741e:	2b00      	cmp	r3, #0
 8007420:	d15b      	bne.n	80074da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007422:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007428:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800742a:	2b00      	cmp	r3, #0
 800742c:	d102      	bne.n	8007434 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800742e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007430:	2b00      	cmp	r3, #0
 8007432:	d052      	beq.n	80074da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007434:	f107 0310 	add.w	r3, r7, #16
 8007438:	461a      	mov	r2, r3
 800743a:	2102      	movs	r1, #2
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fb17 	bl	8006a70 <get_sequence_step_timeout>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007448:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007450:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007454:	e07d      	b.n	8007552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007456:	7d3b      	ldrb	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00f      	beq.n	800747c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800745c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800745e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007460:	4413      	add	r3, r2
 8007462:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007468:	429a      	cmp	r2, r3
 800746a:	d204      	bcs.n	8007476 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800746c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	643b      	str	r3, [r7, #64]	; 0x40
 8007474:	e002      	b.n	800747c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007476:	23fc      	movs	r3, #252	; 0xfc
 8007478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800747c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007484:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007488:	e063      	b.n	8007552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800748a:	7dbb      	ldrb	r3, [r7, #22]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	4413      	add	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749e:	429a      	cmp	r2, r3
 80074a0:	d204      	bcs.n	80074ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80074a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	643b      	str	r3, [r7, #64]	; 0x40
 80074aa:	e016      	b.n	80074da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074ac:	23fc      	movs	r3, #252	; 0xfc
 80074ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80074b2:	e012      	b.n	80074da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80074b4:	7d7b      	ldrb	r3, [r7, #21]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00f      	beq.n	80074da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074be:	4413      	add	r3, r2
 80074c0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d204      	bcs.n	80074d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80074ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	643b      	str	r3, [r7, #64]	; 0x40
 80074d2:	e002      	b.n	80074da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074d4:	23fc      	movs	r3, #252	; 0xfc
 80074d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80074da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80074e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80074e6:	e034      	b.n	8007552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d019      	beq.n	8007522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80074ee:	f107 030c 	add.w	r3, r7, #12
 80074f2:	461a      	mov	r2, r3
 80074f4:	2103      	movs	r1, #3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff faba 	bl	8006a70 <get_sequence_step_timeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007506:	4413      	add	r3, r2
 8007508:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750e:	429a      	cmp	r2, r3
 8007510:	d204      	bcs.n	800751c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
 800751a:	e002      	b.n	8007522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800751c:	23fc      	movs	r3, #252	; 0xfc
 800751e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007522:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007526:	2b00      	cmp	r3, #0
 8007528:	d111      	bne.n	800754e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800752a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8007538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800753a:	2104      	movs	r1, #4
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fb78 	bl	8006c32 <set_sequence_step_timeout>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800754e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007552:	4618      	mov	r0, r3
 8007554:	3748      	adds	r7, #72	; 0x48
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b090      	sub	sp, #64	; 0x40
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007564:	2300      	movs	r3, #0
 8007566:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800756a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800756e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007570:	f240 7376 	movw	r3, #1910	; 0x776
 8007574:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007576:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800757c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007580:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007582:	f240 234e 	movw	r3, #590	; 0x24e
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007588:	f240 23b2 	movw	r3, #690	; 0x2b2
 800758c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800758e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007594:	f240 2326 	movw	r3, #550	; 0x226
 8007598:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800759e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a2:	441a      	add	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075a8:	f107 0318 	add.w	r3, r7, #24
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fc fe02 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80075ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80075c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075c6:	e075      	b.n	80076b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80075c8:	7e3b      	ldrb	r3, [r7, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d105      	bne.n	80075da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80075ce:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80075d4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d030      	beq.n	800763c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80075da:	f107 0310 	add.w	r3, r7, #16
 80075de:	461a      	mov	r2, r3
 80075e0:	2102      	movs	r1, #2
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff fa44 	bl	8006a70 <get_sequence_step_timeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80075ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d122      	bne.n	800763c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80075f6:	7e3b      	ldrb	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007600:	6939      	ldr	r1, [r7, #16]
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007606:	441a      	add	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800760c:	7ebb      	ldrb	r3, [r7, #26]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007616:	6939      	ldr	r1, [r7, #16]
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	440b      	add	r3, r1
 800761c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800761e:	441a      	add	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e00a      	b.n	800763c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007626:	7e7b      	ldrb	r3, [r7, #25]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007630:	6939      	ldr	r1, [r7, #16]
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007636:	441a      	add	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800763c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007640:	2b00      	cmp	r3, #0
 8007642:	d114      	bne.n	800766e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007644:	7efb      	ldrb	r3, [r7, #27]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800764a:	f107 030c 	add.w	r3, r7, #12
 800764e:	461a      	mov	r2, r3
 8007650:	2103      	movs	r1, #3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fa0c 	bl	8006a70 <get_sequence_step_timeout>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007668:	441a      	add	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800766e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007672:	2b00      	cmp	r3, #0
 8007674:	d114      	bne.n	80076a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007676:	7f3b      	ldrb	r3, [r7, #28]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d011      	beq.n	80076a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	461a      	mov	r2, r3
 8007682:	2104      	movs	r1, #4
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff f9f3 	bl	8006a70 <get_sequence_step_timeout>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007694:	6979      	ldr	r1, [r7, #20]
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800769a:	441a      	add	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3740      	adds	r7, #64	; 0x40
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80076ce:	e0c6      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	74fb      	strb	r3, [r7, #19]
		Index++;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	3301      	adds	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80076e0:	7cfb      	ldrb	r3, [r7, #19]
 80076e2:	2bff      	cmp	r3, #255	; 0xff
 80076e4:	f040 808d 	bne.w	8007802 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4413      	add	r3, r2
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	747b      	strb	r3, [r7, #17]
			Index++;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3301      	adds	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80076f8:	7c7b      	ldrb	r3, [r7, #17]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d87e      	bhi.n	80077fc <VL53L0X_load_tuning_settings+0x140>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <VL53L0X_load_tuning_settings+0x48>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007715 	.word	0x08007715
 8007708:	0800774f 	.word	0x0800774f
 800770c:	08007789 	.word	0x08007789
 8007710:	080077c3 	.word	0x080077c3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4413      	add	r3, r2
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	743b      	strb	r3, [r7, #16]
				Index++;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	3301      	adds	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	4413      	add	r3, r2
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	3301      	adds	r3, #1
 8007732:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007734:	7c3b      	ldrb	r3, [r7, #16]
 8007736:	b29b      	uxth	r3, r3
 8007738:	021b      	lsls	r3, r3, #8
 800773a:	b29a      	uxth	r2, r3
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	b29b      	uxth	r3, r3
 8007740:	4413      	add	r3, r2
 8007742:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	89ba      	ldrh	r2, [r7, #12]
 8007748:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800774c:	e087      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	4413      	add	r3, r2
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	743b      	strb	r3, [r7, #16]
				Index++;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	3301      	adds	r3, #1
 800775c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	4413      	add	r3, r2
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3301      	adds	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800776e:	7c3b      	ldrb	r3, [r7, #16]
 8007770:	b29b      	uxth	r3, r3
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	b29a      	uxth	r2, r3
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	b29b      	uxth	r3, r3
 800777a:	4413      	add	r3, r2
 800777c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	89ba      	ldrh	r2, [r7, #12]
 8007782:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007786:	e06a      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4413      	add	r3, r2
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	743b      	strb	r3, [r7, #16]
				Index++;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	3301      	adds	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	4413      	add	r3, r2
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	3301      	adds	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077a8:	7c3b      	ldrb	r3, [r7, #16]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	89ba      	ldrh	r2, [r7, #12]
 80077bc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80077c0:	e04d      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	4413      	add	r3, r2
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	743b      	strb	r3, [r7, #16]
				Index++;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	3301      	adds	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	4413      	add	r3, r2
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	73fb      	strb	r3, [r7, #15]
				Index++;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	3301      	adds	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077e2:	7c3b      	ldrb	r3, [r7, #16]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	89ba      	ldrh	r2, [r7, #12]
 80077f6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 80077fa:	e030      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077fc:	23fc      	movs	r3, #252	; 0xfc
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e02d      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007802:	7cfb      	ldrb	r3, [r7, #19]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d828      	bhi.n	800785a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4413      	add	r3, r2
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	3301      	adds	r3, #1
 8007816:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007818:	2300      	movs	r3, #0
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	e00f      	b.n	800783e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	4413      	add	r3, r2
 8007824:	7819      	ldrb	r1, [r3, #0]
 8007826:	f107 0208 	add.w	r2, r7, #8
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	4413      	add	r3, r2
 800782e:	460a      	mov	r2, r1
 8007830:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	3301      	adds	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	3301      	adds	r3, #1
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	7cfb      	ldrb	r3, [r7, #19]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	dbeb      	blt.n	800781e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007846:	7cfb      	ldrb	r3, [r7, #19]
 8007848:	f107 0208 	add.w	r2, r7, #8
 800784c:	7cb9      	ldrb	r1, [r7, #18]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fea2 	bl	8008598 <VL53L0X_WriteMulti>
 8007854:	4603      	mov	r3, r0
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e001      	b.n	800785e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800785a:	23fc      	movs	r3, #252	; 0xfc
 800785c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4413      	add	r3, r2
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <VL53L0X_load_tuning_settings+0x1b8>
 800786a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f43f af2e 	beq.w	80076d0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007874:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800788c:	2300      	movs	r3, #0
 800788e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007896:	f107 0313 	add.w	r3, r7, #19
 800789a:	4619      	mov	r1, r3
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7fc fd57 	bl	8004350 <VL53L0X_GetXTalkCompensationEnable>
 80078a2:	4603      	mov	r3, r0
 80078a4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80078a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d111      	bne.n	80078d2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80078ae:	7cfb      	ldrb	r3, [r7, #19]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	8a9b      	ldrh	r3, [r3, #20]
 80078be:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3380      	adds	r3, #128	; 0x80
 80078cc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80078d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	461a      	mov	r2, r3
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7ff ffbe 	bl	8007880 <VL53L0X_get_total_xtalk_rate>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	441a      	add	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	601a      	str	r2, [r3, #0]

	return Status;
 800791c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b09a      	sub	sp, #104	; 0x68
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007936:	2312      	movs	r3, #18
 8007938:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800793a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800793e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007940:	2342      	movs	r3, #66	; 0x42
 8007942:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007944:	2306      	movs	r3, #6
 8007946:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007948:	2307      	movs	r3, #7
 800794a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800794c:	2300      	movs	r3, #0
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007960:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	3380      	adds	r3, #128	; 0x80
 8007970:	0a1b      	lsrs	r3, r3, #8
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01b      	beq.n	80079c0 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007994:	4413      	add	r3, r2
 8007996:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007998:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80079a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079a4:	4613      	mov	r3, r2
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	4413      	add	r3, r2
 80079aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80079ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079b0:	fb02 f303 	mul.w	r3, r2, r3
 80079b4:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80079b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80079bc:	0c1b      	lsrs	r3, r3, #16
 80079be:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80079de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80079e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ea:	085a      	lsrs	r2, r3, #1
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	441a      	add	r2, r3
 80079f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fc:	fb02 f303 	mul.w	r3, r2, r3
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a08:	d302      	bcc.n	8007a10 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8007a0a:	4b55      	ldr	r3, [pc, #340]	; (8007b60 <VL53L0X_calc_dmax+0x238>)
 8007a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a0e:	e016      	b.n	8007a3e <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a12:	085a      	lsrs	r2, r3, #1
 8007a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a16:	441a      	add	r2, r3
 8007a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a24:	fb02 f303 	mul.w	r3, r2, r3
 8007a28:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a38:	fb02 f303 	mul.w	r3, r2, r3
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a40:	039b      	lsls	r3, r3, #14
 8007a42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a46:	4a47      	ldr	r2, [pc, #284]	; (8007b64 <VL53L0X_calc_dmax+0x23c>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	3308      	adds	r3, #8
 8007a68:	091b      	lsrs	r3, r3, #4
 8007a6a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	4613      	mov	r3, r2
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4413      	add	r3, r2
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a86:	0b9b      	lsrs	r3, r3, #14
 8007a88:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a8e:	4413      	add	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4413      	add	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	039b      	lsls	r3, r3, #14
 8007aaa:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abe:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ac4:	fb02 f303 	mul.w	r3, r2, r3
 8007ac8:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ad0:	4a24      	ldr	r2, [pc, #144]	; (8007b64 <VL53L0X_calc_dmax+0x23c>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ae6:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <VL53L0X_calc_dmax+0x23c>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	099b      	lsrs	r3, r3, #6
 8007aee:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af2:	3380      	adds	r3, #128	; 0x80
 8007af4:	0a1b      	lsrs	r3, r3, #8
 8007af6:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d008      	beq.n	8007b10 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	085a      	lsrs	r2, r3, #1
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	441a      	add	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b0e:	e001      	b.n	8007b14 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007b14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007b16:	f7fe f9b4 	bl	8005e82 <VL53L0X_isqrt>
 8007b1a:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	085a      	lsrs	r2, r3, #1
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	441a      	add	r2, r3
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b32:	e001      	b.n	8007b38 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007b38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007b3a:	f7fe f9a2 	bl	8005e82 <VL53L0X_isqrt>
 8007b3e:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d902      	bls.n	8007b54 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8007b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b52:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007b54:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3768      	adds	r7, #104	; 0x68
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	fff00000 	.word	0xfff00000
 8007b64:	10624dd3 	.word	0x10624dd3

08007b68 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b0b2      	sub	sp, #200	; 0xc8
 8007b6c:	af04      	add	r7, sp, #16
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007b76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007b7e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007b86:	2342      	movs	r3, #66	; 0x42
 8007b88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007b8c:	f241 235c 	movw	r3, #4700	; 0x125c
 8007b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007b94:	4b6b      	ldr	r3, [pc, #428]	; (8007d44 <VL53L0X_calc_sigma_estimate+0x1dc>)
 8007b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007b9a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007ba2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bae:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007bb0:	4b65      	ldr	r3, [pc, #404]	; (8007d48 <VL53L0X_calc_sigma_estimate+0x1e0>)
 8007bb2:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb8:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007bba:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007bbe:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8007bc0:	f240 6377 	movw	r3, #1655	; 0x677
 8007bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007bde:	0c1b      	lsrs	r3, r3, #16
 8007be0:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007be8:	f107 0310 	add.w	r3, r7, #16
 8007bec:	461a      	mov	r2, r3
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff fe74 	bl	80078de <VL53L0X_get_total_signal_rate>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	461a      	mov	r2, r3
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff fe3b 	bl	8007880 <VL53L0X_get_total_xtalk_rate>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c22:	0c1b      	lsrs	r3, r3, #16
 8007c24:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007c34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d902      	bls.n	8007c44 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 8007c44:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d164      	bne.n	8007d16 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007c52:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007c5a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007c5e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007c62:	461a      	mov	r2, r3
 8007c64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7fe feac 	bl	80069c4 <VL53L0X_calc_timeout_mclks>
 8007c6c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c74:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007c7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007c80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c84:	461a      	mov	r2, r3
 8007c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7fe fe9b 	bl	80069c4 <VL53L0X_calc_timeout_mclks>
 8007c8e:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007c90:	2303      	movs	r3, #3
 8007c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8007c96:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d102      	bne.n	8007ca4 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007caa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	02db      	lsls	r3, r3, #11
 8007cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cbc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cc0:	4a22      	ldr	r2, [pc, #136]	; (8007d4c <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8007ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cd2:	fb02 f303 	mul.w	r3, r2, r3
 8007cd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ce2:	4a1a      	ldr	r2, [pc, #104]	; (8007d4c <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	099b      	lsrs	r3, r3, #6
 8007cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3380      	adds	r3, #128	; 0x80
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007d04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d08:	3380      	adds	r3, #128	; 0x80
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007d16:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8007d1e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007d22:	e12e      	b.n	8007f82 <VL53L0X_calc_sigma_estimate+0x41a>
	}

	if (peakSignalRate_kcps == 0) {
 8007d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d112      	bne.n	8007d50 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d30:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d38:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e11c      	b.n	8007f7e <VL53L0X_calc_sigma_estimate+0x416>
 8007d44:	028f87ae 	.word	0x028f87ae
 8007d48:	0006999a 	.word	0x0006999a
 8007d4c:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8007d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d62:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d66:	041a      	lsls	r2, r3, #16
 8007d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d902      	bls.n	8007d82 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe f86f 	bl	8005e82 <VL53L0X_isqrt>
 8007da4:	4603      	mov	r3, r0
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	891b      	ldrh	r3, [r3, #8]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dba:	041a      	lsls	r2, r3, #16
 8007dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dc0:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8007dc2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007dc6:	4a71      	ldr	r2, [pc, #452]	; (8007f8c <VL53L0X_calc_sigma_estimate+0x424>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	099b      	lsrs	r3, r3, #6
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd2:	041a      	lsls	r2, r3, #16
 8007dd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dd8:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8007dda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007dde:	4a6b      	ldr	r2, [pc, #428]	; (8007f8c <VL53L0X_calc_sigma_estimate+0x424>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	425b      	neglt	r3, r3
 8007dfc:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	fb02 f303 	mul.w	r3, r2, r3
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e22:	4413      	add	r3, r2
 8007e24:	0c1b      	lsrs	r3, r3, #16
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	0b9b      	lsrs	r3, r3, #14
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e56:	0c1b      	lsrs	r3, r3, #16
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 8007e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e70:	0c1b      	lsrs	r3, r3, #16
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	4413      	add	r3, r2
 8007e84:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007e86:	6a38      	ldr	r0, [r7, #32]
 8007e88:	f7fd fffb 	bl	8005e82 <VL53L0X_isqrt>
 8007e8c:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	3332      	adds	r3, #50	; 0x32
 8007e98:	4a3d      	ldr	r2, [pc, #244]	; (8007f90 <VL53L0X_calc_sigma_estimate+0x428>)
 8007e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9e:	095a      	lsrs	r2, r3, #5
 8007ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eae:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ebe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8007ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ecc:	4a31      	ldr	r2, [pc, #196]	; (8007f94 <VL53L0X_calc_sigma_estimate+0x42c>)
 8007ece:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed2:	0b5b      	lsrs	r3, r3, #13
 8007ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d903      	bls.n	8007eec <VL53L0X_calc_sigma_estimate+0x384>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ef4:	fb02 f303 	mul.w	r3, r2, r3
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8007efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007efe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	4413      	add	r3, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd ffb7 	bl	8005e82 <VL53L0X_isqrt>
 8007f14:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f1c:	fb02 f303 	mul.w	r3, r2, r3
 8007f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <VL53L0X_calc_sigma_estimate+0x3d6>
 8007f2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <VL53L0X_calc_sigma_estimate+0x3d6>
 8007f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d903      	bls.n	8007f46 <VL53L0X_calc_sigma_estimate+0x3de>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f4c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8007f58:	6939      	ldr	r1, [r7, #16]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	9303      	str	r3, [sp, #12]
 8007f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f62:	9302      	str	r3, [sp, #8]
 8007f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff fcd8 	bl	8007928 <VL53L0X_calc_dmax>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f7e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	37b8      	adds	r7, #184	; 0xb8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	10624dd3 	.word	0x10624dd3
 8007f90:	51eb851f 	.word	0x51eb851f
 8007f94:	d1b71759 	.word	0xd1b71759

08007f98 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b090      	sub	sp, #64	; 0x40
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	72fb      	strb	r3, [r7, #11]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	10db      	asrs	r3, r3, #3
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007ff8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d017      	beq.n	8008030 <VL53L0X_get_pal_range_status+0x98>
 8008000:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008004:	2b05      	cmp	r3, #5
 8008006:	d013      	beq.n	8008030 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008008:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800800c:	2b07      	cmp	r3, #7
 800800e:	d00f      	beq.n	8008030 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008010:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008014:	2b0c      	cmp	r3, #12
 8008016:	d00b      	beq.n	8008030 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008018:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800801c:	2b0d      	cmp	r3, #13
 800801e:	d007      	beq.n	8008030 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008020:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008024:	2b0e      	cmp	r3, #14
 8008026:	d003      	beq.n	8008030 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008028:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800802c:	2b0f      	cmp	r3, #15
 800802e:	d103      	bne.n	8008038 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008036:	e002      	b.n	800803e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800803e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008042:	2b00      	cmp	r3, #0
 8008044:	d107      	bne.n	8008056 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008046:	2201      	movs	r2, #1
 8008048:	21ff      	movs	r1, #255	; 0xff
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fb74 	bl	8008738 <VL53L0X_WrByte>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8008056:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800805e:	f107 0316 	add.w	r3, r7, #22
 8008062:	461a      	mov	r2, r3
 8008064:	21b6      	movs	r1, #182	; 0xb6
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 faf2 	bl	8008650 <VL53L0X_RdWord>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008072:	8afb      	ldrh	r3, [r7, #22]
 8008074:	025b      	lsls	r3, r3, #9
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8008078:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800807c:	2b00      	cmp	r3, #0
 800807e:	d107      	bne.n	8008090 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008080:	2200      	movs	r2, #0
 8008082:	21ff      	movs	r1, #255	; 0xff
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fb57 	bl	8008738 <VL53L0X_WrByte>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008094:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008098:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80080a0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80080a4:	461a      	mov	r2, r3
 80080a6:	2100      	movs	r1, #0
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7fc fa25 	bl	80044f8 <VL53L0X_GetLimitCheckEnable>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80080b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02e      	beq.n	800811a <VL53L0X_get_pal_range_status+0x182>
 80080bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d12a      	bne.n	800811a <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80080cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff fd4a 	bl	8007b68 <VL53L0X_calc_sigma_estimate>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80080da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e8:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80080ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d113      	bne.n	800811a <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80080f2:	f107 0320 	add.w	r3, r7, #32
 80080f6:	461a      	mov	r2, r3
 80080f8:	2100      	movs	r1, #0
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7fc fa82 	bl	8004604 <VL53L0X_GetLimitCheckValue>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d006      	beq.n	800811a <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800810c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810e:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008110:	429a      	cmp	r2, r3
 8008112:	d902      	bls.n	800811a <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008114:	2301      	movs	r3, #1
 8008116:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800811a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008122:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008126:	461a      	mov	r2, r3
 8008128:	2102      	movs	r1, #2
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7fc f9e4 	bl	80044f8 <VL53L0X_GetLimitCheckEnable>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008136:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800813a:	2b00      	cmp	r3, #0
 800813c:	d017      	beq.n	800816e <VL53L0X_get_pal_range_status+0x1d6>
 800813e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008142:	2b00      	cmp	r3, #0
 8008144:	d113      	bne.n	800816e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008146:	f107 031c 	add.w	r3, r7, #28
 800814a:	461a      	mov	r2, r3
 800814c:	2102      	movs	r1, #2
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7fc fa58 	bl	8004604 <VL53L0X_GetLimitCheckValue>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008160:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008164:	429a      	cmp	r2, r3
 8008166:	d902      	bls.n	800816e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800816e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800817a:	461a      	mov	r2, r3
 800817c:	2103      	movs	r1, #3
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7fc f9ba 	bl	80044f8 <VL53L0X_GetLimitCheckEnable>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800818a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d023      	beq.n	80081da <VL53L0X_get_pal_range_status+0x242>
 8008192:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11f      	bne.n	80081da <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800819a:	893b      	ldrh	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
 80081a4:	e005      	b.n	80081b2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	021a      	lsls	r2, r3, #8
 80081aa:	893b      	ldrh	r3, [r7, #8]
 80081ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80081b2:	f107 0318 	add.w	r3, r7, #24
 80081b6:	461a      	mov	r2, r3
 80081b8:	2103      	movs	r1, #3
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7fc fa22 	bl	8004604 <VL53L0X_GetLimitCheckValue>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80081cc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80081ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d202      	bcs.n	80081da <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d14a      	bne.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80081e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d103      	bne.n	80081f2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80081ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	e042      	b.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80081f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d007      	beq.n	800820a <VL53L0X_get_pal_range_status+0x272>
 80081fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d003      	beq.n	800820a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008202:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008206:	2b03      	cmp	r3, #3
 8008208:	d103      	bne.n	8008212 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	2205      	movs	r2, #5
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	e032      	b.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008212:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008216:	2b06      	cmp	r3, #6
 8008218:	d003      	beq.n	8008222 <VL53L0X_get_pal_range_status+0x28a>
 800821a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800821e:	2b09      	cmp	r3, #9
 8008220:	d103      	bne.n	800822a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008224:	2204      	movs	r2, #4
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e026      	b.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800822a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800822e:	2b08      	cmp	r3, #8
 8008230:	d007      	beq.n	8008242 <VL53L0X_get_pal_range_status+0x2aa>
 8008232:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008236:	2b0a      	cmp	r3, #10
 8008238:	d003      	beq.n	8008242 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800823a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800823e:	2b01      	cmp	r3, #1
 8008240:	d103      	bne.n	800824a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008244:	2203      	movs	r2, #3
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e016      	b.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800824a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800824e:	2b04      	cmp	r3, #4
 8008250:	d003      	beq.n	800825a <VL53L0X_get_pal_range_status+0x2c2>
 8008252:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008256:	2b01      	cmp	r3, #1
 8008258:	d103      	bne.n	8008262 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800825a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825c:	2202      	movs	r2, #2
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	e00a      	b.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008262:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008266:	2b01      	cmp	r3, #1
 8008268:	d103      	bne.n	8008272 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800826a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e002      	b.n	8008278 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008282:	2200      	movs	r2, #0
 8008284:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008286:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800828a:	461a      	mov	r2, r3
 800828c:	2101      	movs	r1, #1
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7fc f932 	bl	80044f8 <VL53L0X_GetLimitCheckEnable>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800829a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d14f      	bne.n	8008342 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80082a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <VL53L0X_get_pal_range_status+0x31a>
 80082aa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d103      	bne.n	80082ba <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b8:	e002      	b.n	80082c0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80082c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80082ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d003      	beq.n	80082da <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80082d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082e0:	e002      	b.n	80082e8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80082ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80082f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <VL53L0X_get_pal_range_status+0x36a>
 80082fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d103      	bne.n	800830a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008308:	e002      	b.n	8008310 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800831a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <VL53L0X_get_pal_range_status+0x392>
 8008322:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008330:	e002      	b.n	8008338 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800833e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008342:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8008346:	4618      	mov	r0, r3
 8008348:	3740      	adds	r7, #64	; 0x40
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800835e:	2102      	movs	r1, #2
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7fd fe03 	bl	8005f6c <VL53L0X_get_info_from_device>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800836a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d11c      	bne.n	80083ac <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8008378:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800837a:	7dbb      	ldrb	r3, [r7, #22]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d107      	bne.n	8008390 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3340      	adds	r3, #64	; 0x40
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	e00d      	b.n	80083ac <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	33f3      	adds	r3, #243	; 0xf3
 800839e:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3340      	adds	r3, #64	; 0x40
 80083a4:	6939      	ldr	r1, [r7, #16]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f00a faf0 	bl	801298c <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80083b8:	b5b0      	push	{r4, r5, r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 80083c6:	f107 030d 	add.w	r3, r7, #13
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff ffbd 	bl	800834e <VL53L0X_check_part_used>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 80083d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d13b      	bne.n	8008458 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 80083e0:	7b7b      	ldrb	r3, [r7, #13]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d108      	bne.n	80083f8 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	4a30      	ldr	r2, [pc, #192]	; (80084ac <VL53L0X_get_device_info+0xf4>)
 80083ea:	461c      	mov	r4, r3
 80083ec:	4613      	mov	r3, r2
 80083ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083f0:	6020      	str	r0, [r4, #0]
 80083f2:	6061      	str	r1, [r4, #4]
 80083f4:	60a2      	str	r2, [r4, #8]
 80083f6:	e027      	b.n	8008448 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 80083f8:	7b7b      	ldrb	r3, [r7, #13]
 80083fa:	2b22      	cmp	r3, #34	; 0x22
 80083fc:	d80b      	bhi.n	8008416 <VL53L0X_get_device_info+0x5e>
 80083fe:	7b7b      	ldrb	r3, [r7, #13]
 8008400:	2b20      	cmp	r3, #32
 8008402:	d008      	beq.n	8008416 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	4a2a      	ldr	r2, [pc, #168]	; (80084b0 <VL53L0X_get_device_info+0xf8>)
 8008408:	461c      	mov	r4, r3
 800840a:	4613      	mov	r3, r2
 800840c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	6061      	str	r1, [r4, #4]
 8008412:	60a2      	str	r2, [r4, #8]
 8008414:	e018      	b.n	8008448 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 8008416:	7b7b      	ldrb	r3, [r7, #13]
 8008418:	2b26      	cmp	r3, #38	; 0x26
 800841a:	d808      	bhi.n	800842e <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	4a25      	ldr	r2, [pc, #148]	; (80084b4 <VL53L0X_get_device_info+0xfc>)
 8008420:	461c      	mov	r4, r3
 8008422:	4613      	mov	r3, r2
 8008424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	6061      	str	r1, [r4, #4]
 800842a:	60a2      	str	r2, [r4, #8]
 800842c:	e00c      	b.n	8008448 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	4a21      	ldr	r2, [pc, #132]	; (80084b8 <VL53L0X_get_device_info+0x100>)
 8008432:	461d      	mov	r5, r3
 8008434:	4614      	mov	r4, r2
 8008436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008438:	6028      	str	r0, [r5, #0]
 800843a:	6069      	str	r1, [r5, #4]
 800843c:	60aa      	str	r2, [r5, #8]
 800843e:	60eb      	str	r3, [r5, #12]
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	6128      	str	r0, [r5, #16]
 8008444:	7923      	ldrb	r3, [r4, #4]
 8008446:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	3320      	adds	r3, #32
 800844c:	491b      	ldr	r1, [pc, #108]	; (80084bc <VL53L0X_get_device_info+0x104>)
 800844e:	461a      	mov	r2, r3
 8008450:	460b      	mov	r3, r1
 8008452:	cb03      	ldmia	r3!, {r0, r1}
 8008454:	6010      	str	r0, [r2, #0]
 8008456:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d108      	bne.n	8008472 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	3360      	adds	r3, #96	; 0x60
 8008464:	461a      	mov	r2, r3
 8008466:	21c0      	movs	r1, #192	; 0xc0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f86a 	bl	8008542 <VL53L0X_RdByte>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d112      	bne.n	80084a0 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800847a:	f107 030e 	add.w	r3, r7, #14
 800847e:	461a      	mov	r2, r3
 8008480:	21c2      	movs	r1, #194	; 0xc2
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f85d 	bl	8008542 <VL53L0X_RdByte>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	091b      	lsrs	r3, r3, #4
 8008498:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 80084a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bdb0      	pop	{r4, r5, r7, pc}
 80084ac:	08014860 	.word	0x08014860
 80084b0:	0801486c 	.word	0x0801486c
 80084b4:	08014878 	.word	0x08014878
 80084b8:	08014884 	.word	0x08014884
 80084bc:	0801489c 	.word	0x0801489c

080084c0 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	330a      	adds	r3, #10
 80084d0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80084de:	b299      	uxth	r1, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	f001 ff88 	bl	800a400 <HAL_I2C_Master_Transmit>
 80084f0:	4603      	mov	r3, r0
 80084f2:	613b      	str	r3, [r7, #16]
    
    return status;
 80084f4:	693b      	ldr	r3, [r7, #16]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80084fe:	b580      	push	{r7, lr}
 8008500:	b088      	sub	sp, #32
 8008502:	af02      	add	r7, sp, #8
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	330a      	adds	r3, #10
 800850e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	b2db      	uxtb	r3, r3
 8008522:	b299      	uxth	r1, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	b29a      	uxth	r2, r3
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4613      	mov	r3, r2
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	f002 f85a 	bl	800a5e8 <HAL_I2C_Master_Receive>
 8008534:	4603      	mov	r3, r0
 8008536:	613b      	str	r3, [r7, #16]
    
    return status;
 8008538:	693b      	ldr	r3, [r7, #16]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	460b      	mov	r3, r1
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008550:	2300      	movs	r3, #0
 8008552:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008554:	f107 030b 	add.w	r3, r7, #11
 8008558:	2201      	movs	r2, #1
 800855a:	4619      	mov	r1, r3
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff ffaf 	bl	80084c0 <_I2CWrite>
 8008562:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800856a:	23ec      	movs	r3, #236	; 0xec
 800856c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800856e:	e00c      	b.n	800858a <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8008570:	2201      	movs	r2, #1
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff ffc2 	bl	80084fe <_I2CRead>
 800857a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008582:	23ec      	movs	r3, #236	; 0xec
 8008584:	75fb      	strb	r3, [r7, #23]
 8008586:	e000      	b.n	800858a <VL53L0X_RdByte+0x48>
    }
done:
 8008588:	bf00      	nop
    return Status;
 800858a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	607a      	str	r2, [r7, #4]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	460b      	mov	r3, r1
 80085a6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085a8:	2300      	movs	r3, #0
 80085aa:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b3f      	cmp	r3, #63	; 0x3f
 80085b0:	d902      	bls.n	80085b8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80085b2:	f06f 0303 	mvn.w	r3, #3
 80085b6:	e016      	b.n	80085e6 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 80085b8:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <VL53L0X_WriteMulti+0x58>)
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	480c      	ldr	r0, [pc, #48]	; (80085f4 <VL53L0X_WriteMulti+0x5c>)
 80085c4:	f00a f8ff 	bl	80127c6 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	461a      	mov	r2, r3
 80085ce:	4908      	ldr	r1, [pc, #32]	; (80085f0 <VL53L0X_WriteMulti+0x58>)
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff ff75 	bl	80084c0 <_I2CWrite>
 80085d6:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80085de:	23ec      	movs	r3, #236	; 0xec
 80085e0:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 80085e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	200036f0 	.word	0x200036f0
 80085f4:	200036f1 	.word	0x200036f1

080085f8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	460b      	mov	r3, r1
 8008606:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008608:	2300      	movs	r3, #0
 800860a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800860c:	f107 030b 	add.w	r3, r7, #11
 8008610:	2201      	movs	r2, #1
 8008612:	4619      	mov	r1, r3
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff ff53 	bl	80084c0 <_I2CWrite>
 800861a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008622:	23ec      	movs	r3, #236	; 0xec
 8008624:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008626:	e00c      	b.n	8008642 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff ff66 	bl	80084fe <_I2CRead>
 8008632:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800863a:	23ec      	movs	r3, #236	; 0xec
 800863c:	75fb      	strb	r3, [r7, #23]
 800863e:	e000      	b.n	8008642 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008640:	bf00      	nop
    return Status;
 8008642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	460b      	mov	r3, r1
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008662:	f107 030b 	add.w	r3, r7, #11
 8008666:	2201      	movs	r2, #1
 8008668:	4619      	mov	r1, r3
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff ff28 	bl	80084c0 <_I2CWrite>
 8008670:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008678:	23ec      	movs	r3, #236	; 0xec
 800867a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800867c:	e017      	b.n	80086ae <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800867e:	2202      	movs	r2, #2
 8008680:	490e      	ldr	r1, [pc, #56]	; (80086bc <VL53L0X_RdWord+0x6c>)
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff ff3b 	bl	80084fe <_I2CRead>
 8008688:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008690:	23ec      	movs	r3, #236	; 0xec
 8008692:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008694:	e00b      	b.n	80086ae <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <VL53L0X_RdWord+0x6c>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	b29a      	uxth	r2, r3
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <VL53L0X_RdWord+0x6c>)
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	4413      	add	r3, r2
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 80086ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200036f0 	.word	0x200036f0

080086c0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	460b      	mov	r3, r1
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80086d2:	f107 030b 	add.w	r3, r7, #11
 80086d6:	2201      	movs	r2, #1
 80086d8:	4619      	mov	r1, r3
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff fef0 	bl	80084c0 <_I2CWrite>
 80086e0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086e8:	23ec      	movs	r3, #236	; 0xec
 80086ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 80086ec:	e01b      	b.n	8008726 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80086ee:	2204      	movs	r2, #4
 80086f0:	4910      	ldr	r1, [pc, #64]	; (8008734 <VL53L0X_RdDWord+0x74>)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff03 	bl	80084fe <_I2CRead>
 80086f8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008700:	23ec      	movs	r3, #236	; 0xec
 8008702:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008704:	e00f      	b.n	8008726 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <VL53L0X_RdDWord+0x74>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	061a      	lsls	r2, r3, #24
 800870c:	4b09      	ldr	r3, [pc, #36]	; (8008734 <VL53L0X_RdDWord+0x74>)
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	041b      	lsls	r3, r3, #16
 8008712:	441a      	add	r2, r3
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <VL53L0X_RdDWord+0x74>)
 8008716:	789b      	ldrb	r3, [r3, #2]
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	4413      	add	r3, r2
 800871c:	4a05      	ldr	r2, [pc, #20]	; (8008734 <VL53L0X_RdDWord+0x74>)
 800871e:	78d2      	ldrb	r2, [r2, #3]
 8008720:	441a      	add	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	601a      	str	r2, [r3, #0]

done:
    return Status;
 8008726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	200036f0 	.word	0x200036f0

08008738 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
 8008744:	4613      	mov	r3, r2
 8008746:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800874c:	4a0b      	ldr	r2, [pc, #44]	; (800877c <VL53L0X_WrByte+0x44>)
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008752:	4a0a      	ldr	r2, [pc, #40]	; (800877c <VL53L0X_WrByte+0x44>)
 8008754:	78bb      	ldrb	r3, [r7, #2]
 8008756:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008758:	2202      	movs	r2, #2
 800875a:	4908      	ldr	r1, [pc, #32]	; (800877c <VL53L0X_WrByte+0x44>)
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff feaf 	bl	80084c0 <_I2CWrite>
 8008762:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800876a:	23ec      	movs	r3, #236	; 0xec
 800876c:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800876e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200036f0 	.word	0x200036f0

08008780 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
 800878c:	4613      	mov	r3, r2
 800878e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008794:	4a0e      	ldr	r2, [pc, #56]	; (80087d0 <VL53L0X_WrWord+0x50>)
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800879a:	883b      	ldrh	r3, [r7, #0]
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	b29b      	uxth	r3, r3
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <VL53L0X_WrWord+0x50>)
 80087a4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80087a6:	883b      	ldrh	r3, [r7, #0]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <VL53L0X_WrWord+0x50>)
 80087ac:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80087ae:	2203      	movs	r2, #3
 80087b0:	4907      	ldr	r1, [pc, #28]	; (80087d0 <VL53L0X_WrWord+0x50>)
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fe84 	bl	80084c0 <_I2CWrite>
 80087b8:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087c0:	23ec      	movs	r3, #236	; 0xec
 80087c2:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 80087c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	200036f0 	.word	0x200036f0

080087d4 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	461a      	mov	r2, r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	70fb      	strb	r3, [r7, #3]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70bb      	strb	r3, [r7, #2]
 80087ea:	4613      	mov	r3, r2
 80087ec:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80087f2:	f107 020e 	add.w	r2, r7, #14
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fea1 	bl	8008542 <VL53L0X_RdByte>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 8008804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d110      	bne.n	800882e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800880c:	7bba      	ldrb	r2, [r7, #14]
 800880e:	78bb      	ldrb	r3, [r7, #2]
 8008810:	4013      	ands	r3, r2
 8008812:	b2da      	uxtb	r2, r3
 8008814:	787b      	ldrb	r3, [r7, #1]
 8008816:	4313      	orrs	r3, r2
 8008818:	b2db      	uxtb	r3, r3
 800881a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800881c:	7bba      	ldrb	r2, [r7, #14]
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff ff88 	bl	8008738 <VL53L0X_WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]
 800882c:	e000      	b.n	8008830 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800882e:	bf00      	nop
done:
    return Status;
 8008830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008848:	2002      	movs	r0, #2
 800884a:	f000 ffb5 	bl	80097b8 <HAL_Delay>
    return status;
 800884e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 800885c:	b084      	sub	sp, #16
 800885e:	b580      	push	{r7, lr}
 8008860:	b088      	sub	sp, #32
 8008862:	af00      	add	r7, sp, #0
 8008864:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8008868:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800886c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008870:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8008872:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8008876:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 8008878:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800887c:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 800887e:	230e      	movs	r3, #14
 8008880:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 8008882:	230a      	movs	r3, #10
 8008884:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 8008886:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80ac 	beq.w	80089e8 <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 8008890:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008894:	f7fb f8ba 	bl	8003a0c <VL53L0X_StaticInit>
 8008898:	4603      	mov	r3, r0
 800889a:	60fb      	str	r3, [r7, #12]
    if( status ){
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 80088a2:	4855      	ldr	r0, [pc, #340]	; (80089f8 <SetupSingleShot+0x19c>)
 80088a4:	f00a f816 	bl	80128d4 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 80088a8:	f107 020a 	add.w	r2, r7, #10
 80088ac:	f107 030b 	add.w	r3, r7, #11
 80088b0:	4619      	mov	r1, r3
 80088b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088b6:	f7fb ff99 	bl	80047ec <VL53L0X_PerformRefCalibration>
 80088ba:	4603      	mov	r3, r0
 80088bc:	60fb      	str	r3, [r7, #12]
    if( status ){
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 80088c4:	484d      	ldr	r0, [pc, #308]	; (80089fc <SetupSingleShot+0x1a0>)
 80088c6:	f00a f805 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 80088ca:	1cfa      	adds	r2, r7, #3
 80088cc:	1d3b      	adds	r3, r7, #4
 80088ce:	4619      	mov	r1, r3
 80088d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088d4:	f7fc fbe2 	bl	800509c <VL53L0X_PerformRefSpadManagement>
 80088d8:	4603      	mov	r3, r0
 80088da:	60fb      	str	r3, [r7, #12]
    if( status ){
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 80088e2:	4847      	ldr	r0, [pc, #284]	; (8008a00 <SetupSingleShot+0x1a4>)
 80088e4:	f009 fff6 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 80088e8:	2100      	movs	r1, #0
 80088ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088ee:	f7fb fa9f 	bl	8003e30 <VL53L0X_SetDeviceMode>
 80088f2:	4603      	mov	r3, r0
 80088f4:	60fb      	str	r3, [r7, #12]
    if( status ){
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 80088fc:	4841      	ldr	r0, [pc, #260]	; (8008a04 <SetupSingleShot+0x1a8>)
 80088fe:	f009 ffe9 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8008902:	2201      	movs	r2, #1
 8008904:	2100      	movs	r1, #0
 8008906:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800890a:	f7fb fd69 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 800890e:	4603      	mov	r3, r0
 8008910:	60fb      	str	r3, [r7, #12]
    if( status ){
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8008918:	483b      	ldr	r0, [pc, #236]	; (8008a08 <SetupSingleShot+0x1ac>)
 800891a:	f009 ffdb 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 800891e:	2201      	movs	r2, #1
 8008920:	2101      	movs	r1, #1
 8008922:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008926:	f7fb fd5b 	bl	80043e0 <VL53L0X_SetLimitCheckEnable>
 800892a:	4603      	mov	r3, r0
 800892c:	60fb      	str	r3, [r7, #12]
    if( status ){
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8008934:	4834      	ldr	r0, [pc, #208]	; (8008a08 <SetupSingleShot+0x1ac>)
 8008936:	f009 ffcd 	bl	80128d4 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800893a:	f641 1399 	movw	r3, #6553	; 0x1999
 800893e:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 8008940:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8008944:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 8008946:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800894a:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 800894c:	2312      	movs	r3, #18
 800894e:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 8008950:	230e      	movs	r3, #14
 8008952:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	2101      	movs	r1, #1
 8008958:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800895c:	f7fb fdf0 	bl	8004540 <VL53L0X_SetLimitCheckValue>
 8008960:	4603      	mov	r3, r0
 8008962:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800896a:	4828      	ldr	r0, [pc, #160]	; (8008a0c <SetupSingleShot+0x1b0>)
 800896c:	f009 ffb2 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	2100      	movs	r1, #0
 8008974:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008978:	f7fb fde2 	bl	8004540 <VL53L0X_SetLimitCheckValue>
 800897c:	4603      	mov	r3, r0
 800897e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8008986:	4821      	ldr	r0, [pc, #132]	; (8008a0c <SetupSingleShot+0x1b0>)
 8008988:	f009 ffa4 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 800898c:	6979      	ldr	r1, [r7, #20]
 800898e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008992:	f7fb fac7 	bl	8003f24 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008996:	4603      	mov	r3, r0
 8008998:	60fb      	str	r3, [r7, #12]
    if( status ){
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80089a0:	481b      	ldr	r0, [pc, #108]	; (8008a10 <SetupSingleShot+0x1b4>)
 80089a2:	f009 ff97 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80089a6:	7cfb      	ldrb	r3, [r7, #19]
 80089a8:	461a      	mov	r2, r3
 80089aa:	2100      	movs	r1, #0
 80089ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80089b0:	f7fb fade 	bl	8003f70 <VL53L0X_SetVcselPulsePeriod>
 80089b4:	4603      	mov	r3, r0
 80089b6:	60fb      	str	r3, [r7, #12]
    if( status ){
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80089be:	4815      	ldr	r0, [pc, #84]	; (8008a14 <SetupSingleShot+0x1b8>)
 80089c0:	f009 ff88 	bl	80128d4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80089c4:	7cbb      	ldrb	r3, [r7, #18]
 80089c6:	461a      	mov	r2, r3
 80089c8:	2101      	movs	r1, #1
 80089ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80089ce:	f7fb facf 	bl	8003f70 <VL53L0X_SetVcselPulsePeriod>
 80089d2:	4603      	mov	r3, r0
 80089d4:	60fb      	str	r3, [r7, #12]
    if( status ){
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80089dc:	480d      	ldr	r0, [pc, #52]	; (8008a14 <SetupSingleShot+0x1b8>)
 80089de:	f009 ff79 	bl	80128d4 <puts>
    }
    
    Dev.LeakyFirst=1;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 80089e8:	bf00      	nop
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f2:	b004      	add	sp, #16
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	08014d04 	.word	0x08014d04
 80089fc:	08014d20 	.word	0x08014d20
 8008a00:	08014d48 	.word	0x08014d48
 8008a04:	08014d70 	.word	0x08014d70
 8008a08:	08014d90 	.word	0x08014d90
 8008a0c:	08014db4 	.word	0x08014db4
 8008a10:	08014dd8 	.word	0x08014dd8
 8008a14:	08014e10 	.word	0x08014e10

08008a18 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <WIFI_Init+0x40>)
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <WIFI_Init+0x44>)
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <WIFI_Init+0x48>)
 8008a2c:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <WIFI_Init+0x4c>)
 8008a2e:	490e      	ldr	r1, [pc, #56]	; (8008a68 <WIFI_Init+0x50>)
 8008a30:	480e      	ldr	r0, [pc, #56]	; (8008a6c <WIFI_Init+0x54>)
 8008a32:	f7f8 fb67 	bl	8001104 <ES_WIFI_RegisterBusIO>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d107      	bne.n	8008a4c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008a3c:	480b      	ldr	r0, [pc, #44]	; (8008a6c <WIFI_Init+0x54>)
 8008a3e:	f7f8 fb33 	bl	80010a8 <ES_WIFI_Init>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	08001c5d 	.word	0x08001c5d
 8008a5c:	08001d51 	.word	0x08001d51
 8008a60:	08001e2d 	.word	0x08001e2d
 8008a64:	08001b45 	.word	0x08001b45
 8008a68:	080019a9 	.word	0x080019a9
 8008a6c:	20003730 	.word	0x20003730

08008a70 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	4809      	ldr	r0, [pc, #36]	; (8008ab0 <WIFI_Connect+0x40>)
 8008a8a:	f7f8 fb6f 	bl	800116c <ES_WIFI_Connect>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d107      	bne.n	8008aa4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008a94:	4806      	ldr	r0, [pc, #24]	; (8008ab0 <WIFI_Connect+0x40>)
 8008a96:	f7f8 fc0b 	bl	80012b0 <ES_WIFI_GetNetworkSettings>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20003730 	.word	0x20003730

08008ab4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4806      	ldr	r0, [pc, #24]	; (8008adc <WIFI_GetMAC_Address+0x28>)
 8008ac4:	f7f8 fc1e 	bl	8001304 <ES_WIFI_GetMACAddress>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20003730 	.word	0x20003730

08008ae0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8008aec:	4809      	ldr	r0, [pc, #36]	; (8008b14 <WIFI_GetIP_Address+0x34>)
 8008aee:	f7f8 fbb3 	bl	8001258 <ES_WIFI_IsConnected>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d107      	bne.n	8008b08 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <WIFI_GetIP_Address+0x34>)
 8008afa:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20003730 	.word	0x20003730

08008b18 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	460b      	mov	r3, r1
 8008b26:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8008b34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008b36:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8008b38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008b3a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008b3c:	7afb      	ldrb	r3, [r7, #11]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bf14      	ite	ne
 8008b42:	2301      	movne	r3, #1
 8008b44:	2300      	moveq	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	789b      	ldrb	r3, [r3, #2]
 8008b5a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	78db      	ldrb	r3, [r3, #3]
 8008b60:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008b62:	f107 0310 	add.w	r3, r7, #16
 8008b66:	4619      	mov	r1, r3
 8008b68:	4807      	ldr	r0, [pc, #28]	; (8008b88 <WIFI_OpenClientConnection+0x70>)
 8008b6a:	f7f8 fbfb 	bl	8001364 <ES_WIFI_StartClientConnection>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3728      	adds	r7, #40	; 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20003730 	.word	0x20003730

08008b8c <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008ba2:	89ba      	ldrh	r2, [r7, #12]
 8008ba4:	7bf9      	ldrb	r1, [r7, #15]
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	9301      	str	r3, [sp, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	4806      	ldr	r0, [pc, #24]	; (8008bcc <WIFI_SendData+0x40>)
 8008bb4:	f7f8 fcc2 	bl	800153c <ES_WIFI_SendData>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20003730 	.word	0x20003730

08008bd0 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607b      	str	r3, [r7, #4]
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
 8008bde:	4613      	mov	r3, r2
 8008be0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008be6:	89ba      	ldrh	r2, [r7, #12]
 8008be8:	7bf9      	ldrb	r1, [r7, #15]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	4806      	ldr	r0, [pc, #24]	; (8008c10 <WIFI_ReceiveData+0x40>)
 8008bf8:	f7f8 fd5c 	bl	80016b4 <ES_WIFI_ReceiveData>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20003730 	.word	0x20003730

08008c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008c18:	f7fa fd92 	bl	8003740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008c1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008c1e:	e003      	b.n	8008c28 <LoopCopyDataInit>

08008c20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008c22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008c24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008c26:	3104      	adds	r1, #4

08008c28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008c28:	480a      	ldr	r0, [pc, #40]	; (8008c54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008c2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008c2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008c30:	d3f6      	bcc.n	8008c20 <CopyDataInit>
	ldr	r2, =_sbss
 8008c32:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8008c34:	e002      	b.n	8008c3c <LoopFillZerobss>

08008c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008c36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008c38:	f842 3b04 	str.w	r3, [r2], #4

08008c3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008c3c:	4b08      	ldr	r3, [pc, #32]	; (8008c60 <LoopForever+0x16>)
	cmp	r2, r3
 8008c3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008c40:	d3f9      	bcc.n	8008c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008c42:	f009 fd8d 	bl	8012760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008c46:	f7f9 f9b9 	bl	8001fbc <main>

08008c4a <LoopForever>:

LoopForever:
    b LoopForever
 8008c4a:	e7fe      	b.n	8008c4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008c4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008c50:	080150b4 	.word	0x080150b4
	ldr	r0, =_sdata
 8008c54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008c58:	20000664 	.word	0x20000664
	ldr	r2, =_sbss
 8008c5c:	20000664 	.word	0x20000664
	ldr	r3, = _ebss
 8008c60:	20004144 	.word	0x20004144

08008c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008c64:	e7fe      	b.n	8008c64 <ADC1_2_IRQHandler>
	...

08008c68 <BSP_LED_Init>:
  * @param  Led  LED to be initialized.
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  LEDx_GPIO_CLK_ENABLE(Led);
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <BSP_LED_Init+0x28>
 8008c78:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <BSP_LED_Init+0x58>)
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7c:	4a10      	ldr	r2, [pc, #64]	; (8008cc0 <BSP_LED_Init+0x58>)
 8008c7e:	f043 0302 	orr.w	r3, r3, #2
 8008c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c84:	4b0e      	ldr	r3, [pc, #56]	; (8008cc0 <BSP_LED_Init+0x58>)
 8008c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8008c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c94:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8008c96:	2301      	movs	r3, #1
 8008c98:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <BSP_LED_Init+0x5c>)
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	f107 020c 	add.w	r2, r7, #12
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 f803 	bl	8009cbc <HAL_GPIO_Init>
}
 8008cb6:	bf00      	nop
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	2000044c 	.word	0x2000044c

08008cc8 <BSP_LED_On>:
  * @param  Led  LED to be set on
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8008cd2:	79fb      	ldrb	r3, [r7, #7]
 8008cd4:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <BSP_LED_On+0x28>)
 8008cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008cde:	b291      	uxth	r1, r2
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 fa9e 	bl	800a224 <HAL_GPIO_WritePin>
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	2000044c 	.word	0x2000044c

08008cf4 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line
  *                                              with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	71fb      	strb	r3, [r7, #7]
 8008d00:	4613      	mov	r3, r2
 8008d02:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8008d04:	4b23      	ldr	r3, [pc, #140]	; (8008d94 <BSP_PB_Init+0xa0>)
 8008d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d08:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <BSP_PB_Init+0xa0>)
 8008d0a:	f043 0304 	orr.w	r3, r3, #4
 8008d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d10:	4b20      	ldr	r3, [pc, #128]	; (8008d94 <BSP_PB_Init+0xa0>)
 8008d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	60bb      	str	r3, [r7, #8]
 8008d1a:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8008d1c:	79bb      	ldrb	r3, [r7, #6]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d112      	bne.n	8008d48 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d26:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d30:	2302      	movs	r3, #2
 8008d32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	4a18      	ldr	r2, [pc, #96]	; (8008d98 <BSP_PB_Init+0xa4>)
 8008d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3c:	f107 020c 	add.w	r2, r7, #12
 8008d40:	4611      	mov	r1, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 ffba 	bl	8009cbc <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 8008d48:	79bb      	ldrb	r3, [r7, #6]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d11e      	bne.n	8008d8c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d52:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8008d54:	2301      	movs	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <BSP_PB_Init+0xa8>)
 8008d5e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	4a0d      	ldr	r2, [pc, #52]	; (8008d98 <BSP_PB_Init+0xa4>)
 8008d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d68:	f107 020c 	add.w	r2, r7, #12
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 ffa4 	bl	8009cbc <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8008d74:	2328      	movs	r3, #40	; 0x28
 8008d76:	b25b      	sxtb	r3, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	210f      	movs	r1, #15
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fe18 	bl	80099b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008d82:	2328      	movs	r3, #40	; 0x28
 8008d84:	b25b      	sxtb	r3, r3
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fe2f 	bl	80099ea <HAL_NVIC_EnableIRQ>
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	3720      	adds	r7, #32
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	40021000 	.word	0x40021000
 8008d98:	20000450 	.word	0x20000450
 8008d9c:	10110000 	.word	0x10110000

08008da0 <BSP_COM_Init>:
  *                @arg  COM1
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	; 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <BSP_COM_Init+0x2a>
 8008db2:	4b2d      	ldr	r3, [pc, #180]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	4a2c      	ldr	r2, [pc, #176]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008db8:	f043 0302 	orr.w	r3, r3, #2
 8008dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dbe:	4b2a      	ldr	r3, [pc, #168]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <BSP_COM_Init+0x48>
 8008dd0:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd4:	4a24      	ldr	r2, [pc, #144]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008dd6:	f043 0302 	orr.w	r3, r3, #2
 8008dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ddc:	4b22      	ldr	r3, [pc, #136]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10b      	bne.n	8008e06 <BSP_COM_Init+0x66>
 8008dee:	4b1e      	ldr	r3, [pc, #120]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df2:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008df8:	6613      	str	r3, [r2, #96]	; 0x60
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	; (8008e68 <BSP_COM_Init+0xc8>)
 8008dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e02:	60bb      	str	r3, [r7, #8]
 8008e04:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8008e06:	2340      	movs	r3, #64	; 0x40
 8008e08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8008e16:	2307      	movs	r3, #7
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <BSP_COM_Init+0xcc>)
 8008e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e22:	f107 0214 	add.w	r2, r7, #20
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 ff47 	bl	8009cbc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8008e2e:	2380      	movs	r3, #128	; 0x80
 8008e30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008e32:	2302      	movs	r3, #2
 8008e34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8008e36:	2307      	movs	r3, #7
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	4a0c      	ldr	r2, [pc, #48]	; (8008e70 <BSP_COM_Init+0xd0>)
 8008e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e42:	f107 0214 	add.w	r2, r7, #20
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 ff37 	bl	8009cbc <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <BSP_COM_Init+0xd4>)
 8008e52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8008e5a:	6838      	ldr	r0, [r7, #0]
 8008e5c:	f005 fa63 	bl	800e326 <HAL_UART_Init>
}
 8008e60:	bf00      	nop
 8008e62:	3728      	adds	r7, #40	; 0x28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	20000458 	.word	0x20000458
 8008e70:	2000045c 	.word	0x2000045c
 8008e74:	20000454 	.word	0x20000454

08008e78 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8008e80:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e84:	4a26      	ldr	r2, [pc, #152]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008e86:	f043 0302 	orr.w	r3, r3, #2
 8008e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008e98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008e9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8008e9e:	2312      	movs	r3, #18
 8008ea0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008eaa:	2304      	movs	r3, #4
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008eae:	f107 0314 	add.w	r3, r7, #20
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	481b      	ldr	r0, [pc, #108]	; (8008f24 <I2Cx_MspInit+0xac>)
 8008eb6:	f000 ff01 	bl	8009cbc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008eba:	f107 0314 	add.w	r3, r7, #20
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4818      	ldr	r0, [pc, #96]	; (8008f24 <I2Cx_MspInit+0xac>)
 8008ec2:	f000 fefb 	bl	8009cbc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008ec6:	4b16      	ldr	r3, [pc, #88]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eca:	4a15      	ldr	r2, [pc, #84]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed2:	4b13      	ldr	r3, [pc, #76]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8008ede:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	4a0f      	ldr	r2, [pc, #60]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ee8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8008eea:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	4a0c      	ldr	r2, [pc, #48]	; (8008f20 <I2Cx_MspInit+0xa8>)
 8008ef0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008ef4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	210f      	movs	r1, #15
 8008efa:	2021      	movs	r0, #33	; 0x21
 8008efc:	f000 fd59 	bl	80099b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008f00:	2021      	movs	r0, #33	; 0x21
 8008f02:	f000 fd72 	bl	80099ea <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008f06:	2200      	movs	r2, #0
 8008f08:	210f      	movs	r1, #15
 8008f0a:	2022      	movs	r0, #34	; 0x22
 8008f0c:	f000 fd51 	bl	80099b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8008f10:	2022      	movs	r0, #34	; 0x22
 8008f12:	f000 fd6a 	bl	80099ea <HAL_NVIC_EnableIRQ>
}
 8008f16:	bf00      	nop
 8008f18:	3728      	adds	r7, #40	; 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40021000 	.word	0x40021000
 8008f24:	48000400 	.word	0x48000400

08008f28 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a12      	ldr	r2, [pc, #72]	; (8008f7c <I2Cx_Init+0x54>)
 8008f34:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a11      	ldr	r2, [pc, #68]	; (8008f80 <I2Cx_Init+0x58>)
 8008f3a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff ff89 	bl	8008e78 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 f98c 	bl	800a284 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f002 f8e6 	bl	800b140 <HAL_I2CEx_ConfigAnalogFilter>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40005800 	.word	0x40005800
 8008f80:	00702681 	.word	0x00702681

08008f84 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08a      	sub	sp, #40	; 0x28
 8008f88:	af04      	add	r7, sp, #16
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	461a      	mov	r2, r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	72fb      	strb	r3, [r7, #11]
 8008f96:	460b      	mov	r3, r1
 8008f98:	813b      	strh	r3, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	b299      	uxth	r1, r3
 8008fa6:	88f8      	ldrh	r0, [r7, #6]
 8008fa8:	893a      	ldrh	r2, [r7, #8]
 8008faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4603      	mov	r3, r0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f001 fd1e 	bl	800a9fc <HAL_I2C_Mem_Read>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d004      	beq.n	8008fd4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f832 	bl	8009038 <I2Cx_Error>
  }
  return status;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b08a      	sub	sp, #40	; 0x28
 8008fe2:	af04      	add	r7, sp, #16
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	4611      	mov	r1, r2
 8008fea:	461a      	mov	r2, r3
 8008fec:	4603      	mov	r3, r0
 8008fee:	72fb      	strb	r3, [r7, #11]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	813b      	strh	r3, [r7, #8]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	b299      	uxth	r1, r3
 8009000:	88f8      	ldrh	r0, [r7, #6]
 8009002:	893a      	ldrh	r2, [r7, #8]
 8009004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009008:	9302      	str	r3, [sp, #8]
 800900a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4603      	mov	r3, r0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f001 fbdd 	bl	800a7d4 <HAL_I2C_Mem_Write>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	4619      	mov	r1, r3
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f805 	bl	8009038 <I2Cx_Error>
  }
  return status;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 f9ac 	bl	800a3a2 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ff6c 	bl	8008f28 <I2Cx_Init>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800905c:	4802      	ldr	r0, [pc, #8]	; (8009068 <SENSOR_IO_Init+0x10>)
 800905e:	f7ff ff63 	bl	8008f28 <I2Cx_Init>
}
 8009062:	bf00      	nop
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	200040b0 	.word	0x200040b0

0800906c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af02      	add	r7, sp, #8
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
 8009076:	460b      	mov	r3, r1
 8009078:	71bb      	strb	r3, [r7, #6]
 800907a:	4613      	mov	r3, r2
 800907c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800907e:	79bb      	ldrb	r3, [r7, #6]
 8009080:	b29a      	uxth	r2, r3
 8009082:	79f9      	ldrb	r1, [r7, #7]
 8009084:	2301      	movs	r3, #1
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	1d7b      	adds	r3, r7, #5
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2301      	movs	r3, #1
 800908e:	4803      	ldr	r0, [pc, #12]	; (800909c <SENSOR_IO_Write+0x30>)
 8009090:	f7ff ffa5 	bl	8008fde <I2Cx_WriteMultiple>
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	200040b0 	.word	0x200040b0

080090a0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	4603      	mov	r3, r0
 80090a8:	460a      	mov	r2, r1
 80090aa:	71fb      	strb	r3, [r7, #7]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80090b4:	79bb      	ldrb	r3, [r7, #6]
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	79f9      	ldrb	r1, [r7, #7]
 80090ba:	2301      	movs	r3, #1
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	f107 030f 	add.w	r3, r7, #15
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	2301      	movs	r3, #1
 80090c6:	4804      	ldr	r0, [pc, #16]	; (80090d8 <SENSOR_IO_Read+0x38>)
 80090c8:	f7ff ff5c 	bl	8008f84 <I2Cx_ReadMultiple>

  return read_value;
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	200040b0 	.word	0x200040b0

080090dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	603a      	str	r2, [r7, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	71fb      	strb	r3, [r7, #7]
 80090ea:	460b      	mov	r3, r1
 80090ec:	71bb      	strb	r3, [r7, #6]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80090f2:	79bb      	ldrb	r3, [r7, #6]
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	79f9      	ldrb	r1, [r7, #7]
 80090f8:	88bb      	ldrh	r3, [r7, #4]
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	4804      	ldr	r0, [pc, #16]	; (8009114 <SENSOR_IO_ReadMultiple+0x38>)
 8009104:	f7ff ff3e 	bl	8008f84 <I2Cx_ReadMultiple>
 8009108:	4603      	mov	r3, r0
 800910a:	b29b      	uxth	r3, r3
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200040b0 	.word	0x200040b0

08009118 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800911e:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <BSP_HSENSOR_Init+0x38>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	20be      	movs	r0, #190	; 0xbe
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	2bbc      	cmp	r3, #188	; 0xbc
 800912a:	d002      	beq.n	8009132 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	e009      	b.n	8009146 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <BSP_HSENSOR_Init+0x3c>)
 8009134:	4a06      	ldr	r2, [pc, #24]	; (8009150 <BSP_HSENSOR_Init+0x38>)
 8009136:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <BSP_HSENSOR_Init+0x3c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	20be      	movs	r0, #190	; 0xbe
 8009140:	4798      	blx	r3
    ret = HSENSOR_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8009146:	687b      	ldr	r3, [r7, #4]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000460 	.word	0x20000460
 8009154:	20000890 	.word	0x20000890

08009158 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <BSP_HSENSOR_ReadHumidity+0x18>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	20be      	movs	r0, #190	; 0xbe
 8009164:	4798      	blx	r3
 8009166:	eef0 7a40 	vmov.f32	s15, s0
}
 800916a:	eeb0 0a67 	vmov.f32	s0, s15
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000890 	.word	0x20000890

08009174 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800917a:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <BSP_PSENSOR_Init+0x38>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	20ba      	movs	r0, #186	; 0xba
 8009180:	4798      	blx	r3
 8009182:	4603      	mov	r3, r0
 8009184:	2bb1      	cmp	r3, #177	; 0xb1
 8009186:	d002      	beq.n	800918e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	e009      	b.n	80091a2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800918e:	4b08      	ldr	r3, [pc, #32]	; (80091b0 <BSP_PSENSOR_Init+0x3c>)
 8009190:	4a06      	ldr	r2, [pc, #24]	; (80091ac <BSP_PSENSOR_Init+0x38>)
 8009192:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8009194:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <BSP_PSENSOR_Init+0x3c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	20ba      	movs	r0, #186	; 0xba
 800919c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80091a2:	687b      	ldr	r3, [r7, #4]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	2000047c 	.word	0x2000047c
 80091b0:	20000894 	.word	0x20000894

080091b4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <BSP_PSENSOR_ReadPressure+0x18>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	20ba      	movs	r0, #186	; 0xba
 80091c0:	4798      	blx	r3
 80091c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80091c6:	eeb0 0a67 	vmov.f32	s0, s15
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000894 	.word	0x20000894

080091d0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <BSP_TSENSOR_Init+0x30>)
 80091dc:	4a09      	ldr	r2, [pc, #36]	; (8009204 <BSP_TSENSOR_Init+0x34>)
 80091de:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80091e0:	f7ff ff3a 	bl	8009058 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <BSP_TSENSOR_Init+0x30>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2100      	movs	r1, #0
 80091ec:	20be      	movs	r0, #190	; 0xbe
 80091ee:	4798      	blx	r3

  ret = TSENSOR_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80091f4:	79fb      	ldrb	r3, [r7, #7]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000898 	.word	0x20000898
 8009204:	2000046c 	.word	0x2000046c

08009208 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <BSP_TSENSOR_ReadTemp+0x18>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	20be      	movs	r0, #190	; 0xbe
 8009214:	4798      	blx	r3
 8009216:	eef0 7a40 	vmov.f32	s15, s0
}
 800921a:	eeb0 0a67 	vmov.f32	s0, s15
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000898 	.word	0x20000898

08009224 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2120      	movs	r1, #32
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff ff33 	bl	80090a0 <SENSOR_IO_Read>
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	f023 0304 	bic.w	r3, r3, #4
 8009244:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	f043 0304 	orr.w	r3, r3, #4
 800924c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	f023 0303 	bic.w	r3, r3, #3
 8009254:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009264:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	7bfa      	ldrb	r2, [r7, #15]
 800926c:	2120      	movs	r1, #32
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fefc 	bl	800906c <SENSOR_IO_Write>
}
 8009274:	bf00      	nop
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800928a:	f7ff fee5 	bl	8009058 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800928e:	88fb      	ldrh	r3, [r7, #6]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	210f      	movs	r1, #15
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff ff03 	bl	80090a0 <SENSOR_IO_Read>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	b2d8      	uxtb	r0, r3
 80092b6:	f107 020c 	add.w	r2, r7, #12
 80092ba:	2302      	movs	r3, #2
 80092bc:	21b0      	movs	r1, #176	; 0xb0
 80092be:	f7ff ff0d 	bl	80090dc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80092c2:	7b3b      	ldrb	r3, [r7, #12]
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80092ca:	7b7b      	ldrb	r3, [r7, #13]
 80092cc:	085b      	lsrs	r3, r3, #1
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	b2d8      	uxtb	r0, r3
 80092d6:	f107 020c 	add.w	r2, r7, #12
 80092da:	2302      	movs	r3, #2
 80092dc:	21b6      	movs	r1, #182	; 0xb6
 80092de:	f7ff fefd 	bl	80090dc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80092e2:	7b7b      	ldrb	r3, [r7, #13]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	b21a      	sxth	r2, r3
 80092e8:	7b3b      	ldrb	r3, [r7, #12]
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	b2d8      	uxtb	r0, r3
 80092f4:	f107 020c 	add.w	r2, r7, #12
 80092f8:	2302      	movs	r3, #2
 80092fa:	21ba      	movs	r1, #186	; 0xba
 80092fc:	f7ff feee 	bl	80090dc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009300:	7b7b      	ldrb	r3, [r7, #13]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	b21a      	sxth	r2, r3
 8009306:	7b3b      	ldrb	r3, [r7, #12]
 8009308:	b21b      	sxth	r3, r3
 800930a:	4313      	orrs	r3, r2
 800930c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800930e:	88fb      	ldrh	r3, [r7, #6]
 8009310:	b2d8      	uxtb	r0, r3
 8009312:	f107 020c 	add.w	r2, r7, #12
 8009316:	2302      	movs	r3, #2
 8009318:	21a8      	movs	r1, #168	; 0xa8
 800931a:	f7ff fedf 	bl	80090dc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800931e:	7b7b      	ldrb	r3, [r7, #13]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	b21a      	sxth	r2, r3
 8009324:	7b3b      	ldrb	r3, [r7, #12]
 8009326:	b21b      	sxth	r3, r3
 8009328:	4313      	orrs	r3, r2
 800932a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800932c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009330:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800933e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009342:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009350:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009354:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009358:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800937a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800937e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009382:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800938a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800938e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009392:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80093d8 <HTS221_H_ReadHumidity+0x130>
 8009396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939e:	dd01      	ble.n	80093a4 <HTS221_H_ReadHumidity+0xfc>
 80093a0:	4b0e      	ldr	r3, [pc, #56]	; (80093dc <HTS221_H_ReadHumidity+0x134>)
 80093a2:	e00a      	b.n	80093ba <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80093a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80093a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	d502      	bpl.n	80093b8 <HTS221_H_ReadHumidity+0x110>
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	e000      	b.n	80093ba <HTS221_H_ReadHumidity+0x112>
 80093b8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80093ba:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80093bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80093c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80093c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80093cc:	eeb0 0a67 	vmov.f32	s0, s15
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	447a0000 	.word	0x447a0000
 80093dc:	447a0000 	.word	0x447a0000

080093e0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2120      	movs	r1, #32
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fe54 	bl	80090a0 <SENSOR_IO_Read>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	f023 0304 	bic.w	r3, r3, #4
 8009402:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	f043 0304 	orr.w	r3, r3, #4
 800940a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	f023 0303 	bic.w	r3, r3, #3
 8009412:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	f043 0301 	orr.w	r3, r3, #1
 800941a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009422:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009424:	88fb      	ldrh	r3, [r7, #6]
 8009426:	b2db      	uxtb	r3, r3
 8009428:	7bfa      	ldrb	r2, [r7, #15]
 800942a:	2120      	movs	r1, #32
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fe1d 	bl	800906c <SENSOR_IO_Write>
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b088      	sub	sp, #32
 800943e:	af00      	add	r7, sp, #0
 8009440:	4603      	mov	r3, r0
 8009442:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	b2d8      	uxtb	r0, r3
 8009448:	f107 0208 	add.w	r2, r7, #8
 800944c:	2302      	movs	r3, #2
 800944e:	21b2      	movs	r1, #178	; 0xb2
 8009450:	f7ff fe44 	bl	80090dc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2135      	movs	r1, #53	; 0x35
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fe20 	bl	80090a0 <SENSOR_IO_Read>
 8009460:	4603      	mov	r3, r0
 8009462:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8009464:	7ffb      	ldrb	r3, [r7, #31]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	b21b      	sxth	r3, r3
 800946a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946e:	b21a      	sxth	r2, r3
 8009470:	7a3b      	ldrb	r3, [r7, #8]
 8009472:	b21b      	sxth	r3, r3
 8009474:	4313      	orrs	r3, r2
 8009476:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8009478:	7ffb      	ldrb	r3, [r7, #31]
 800947a:	019b      	lsls	r3, r3, #6
 800947c:	b21b      	sxth	r3, r3
 800947e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009482:	b21a      	sxth	r2, r3
 8009484:	7a7b      	ldrb	r3, [r7, #9]
 8009486:	b21b      	sxth	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800948c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009490:	10db      	asrs	r3, r3, #3
 8009492:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8009494:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009498:	10db      	asrs	r3, r3, #3
 800949a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	b2d8      	uxtb	r0, r3
 80094a0:	f107 0208 	add.w	r2, r7, #8
 80094a4:	2304      	movs	r3, #4
 80094a6:	21bc      	movs	r1, #188	; 0xbc
 80094a8:	f7ff fe18 	bl	80090dc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80094ac:	7a7b      	ldrb	r3, [r7, #9]
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	b21a      	sxth	r2, r3
 80094b2:	7a3b      	ldrb	r3, [r7, #8]
 80094b4:	b21b      	sxth	r3, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	b21a      	sxth	r2, r3
 80094c0:	7abb      	ldrb	r3, [r7, #10]
 80094c2:	b21b      	sxth	r3, r3
 80094c4:	4313      	orrs	r3, r2
 80094c6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	b2d8      	uxtb	r0, r3
 80094cc:	f107 0208 	add.w	r2, r7, #8
 80094d0:	2302      	movs	r3, #2
 80094d2:	21aa      	movs	r1, #170	; 0xaa
 80094d4:	f7ff fe02 	bl	80090dc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80094d8:	7a7b      	ldrb	r3, [r7, #9]
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	b21a      	sxth	r2, r3
 80094de:	7a3b      	ldrb	r3, [r7, #8]
 80094e0:	b21b      	sxth	r3, r3
 80094e2:	4313      	orrs	r3, r2
 80094e4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80094e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80094ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	ee07 3a90 	vmov	s15, r3
 80094f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80094fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800950a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800950e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009512:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	ee07 3a90 	vmov	s15, r3
 800951c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009524:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009528:	ee07 3a90 	vmov	s15, r3
 800952c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009534:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	ee07 3a90 	vmov	s15, r3
}
 800953e:	eeb0 0a67 	vmov.f32	s0, s15
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f87b 	bl	8009650 <LPS22HB_Init>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	4603      	mov	r3, r0
 800956a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800956c:	2300      	movs	r3, #0
 800956e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8009570:	f7ff fd72 	bl	8009058 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8009574:	88fb      	ldrh	r3, [r7, #6]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	210f      	movs	r1, #15
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fd90 	bl	80090a0 <SENSOR_IO_Read>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8009590:	b590      	push	{r4, r7, lr}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800959e:	2300      	movs	r3, #0
 80095a0:	74fb      	strb	r3, [r7, #19]
 80095a2:	e013      	b.n	80095cc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80095a4:	88fb      	ldrh	r3, [r7, #6]
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	7cfb      	ldrb	r3, [r7, #19]
 80095aa:	3328      	adds	r3, #40	; 0x28
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	7cfc      	ldrb	r4, [r7, #19]
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7ff fd74 	bl	80090a0 <SENSOR_IO_Read>
 80095b8:	4603      	mov	r3, r0
 80095ba:	461a      	mov	r2, r3
 80095bc:	f107 0318 	add.w	r3, r7, #24
 80095c0:	4423      	add	r3, r4
 80095c2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80095c6:	7cfb      	ldrb	r3, [r7, #19]
 80095c8:	3301      	adds	r3, #1
 80095ca:	74fb      	strb	r3, [r7, #19]
 80095cc:	7cfb      	ldrb	r3, [r7, #19]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d9e8      	bls.n	80095a4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80095d2:	2300      	movs	r3, #0
 80095d4:	74fb      	strb	r3, [r7, #19]
 80095d6:	e010      	b.n	80095fa <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80095d8:	7cfb      	ldrb	r3, [r7, #19]
 80095da:	f107 0218 	add.w	r2, r7, #24
 80095de:	4413      	add	r3, r2
 80095e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80095e4:	461a      	mov	r2, r3
 80095e6:	7cfb      	ldrb	r3, [r7, #19]
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80095f4:	7cfb      	ldrb	r3, [r7, #19]
 80095f6:	3301      	adds	r3, #1
 80095f8:	74fb      	strb	r3, [r7, #19]
 80095fa:	7cfb      	ldrb	r3, [r7, #19]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d9eb      	bls.n	80095d8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009610:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2264      	movs	r2, #100	; 0x64
 800961a:	fb02 f303 	mul.w	r3, r2, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	da01      	bge.n	8009626 <LPS22HB_P_ReadPressure+0x96>
 8009622:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8009626:	131b      	asrs	r3, r3, #12
 8009628:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009634:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800964c <LPS22HB_P_ReadPressure+0xbc>
 8009638:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800963c:	eef0 7a66 	vmov.f32	s15, s13
}
 8009640:	eeb0 0a67 	vmov.f32	s0, s15
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	bd90      	pop	{r4, r7, pc}
 800964a:	bf00      	nop
 800964c:	42c80000 	.word	0x42c80000

08009650 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	211a      	movs	r1, #26
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fd1d 	bl	80090a0 <SENSOR_IO_Read>
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	f043 0301 	orr.w	r3, r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800967a:	88fb      	ldrh	r3, [r7, #6]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	7bfa      	ldrb	r2, [r7, #15]
 8009680:	211a      	movs	r1, #26
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fcf2 	bl	800906c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2110      	movs	r1, #16
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fd06 	bl	80090a0 <SENSOR_IO_Read>
 8009694:	4603      	mov	r3, r0
 8009696:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80096a6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	f023 0302 	bic.w	r3, r3, #2
 80096ae:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	f043 0302 	orr.w	r3, r3, #2
 80096b6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80096b8:	88fb      	ldrh	r3, [r7, #6]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	2110      	movs	r1, #16
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff fcd3 	bl	800906c <SENSOR_IO_Write>
}  
 80096c6:	bf00      	nop
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096d8:	2003      	movs	r0, #3
 80096da:	f000 f95f 	bl	800999c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80096de:	2000      	movs	r0, #0
 80096e0:	f000 f80e 	bl	8009700 <HAL_InitTick>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	71fb      	strb	r3, [r7, #7]
 80096ee:	e001      	b.n	80096f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80096f0:	f7f9 fcd4 	bl	800309c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80096f4:	79fb      	ldrb	r3, [r7, #7]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800970c:	4b17      	ldr	r3, [pc, #92]	; (800976c <HAL_InitTick+0x6c>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d023      	beq.n	800975c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <HAL_InitTick+0x70>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	4b14      	ldr	r3, [pc, #80]	; (800976c <HAL_InitTick+0x6c>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	4619      	mov	r1, r3
 800971e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009722:	fbb3 f3f1 	udiv	r3, r3, r1
 8009726:	fbb2 f3f3 	udiv	r3, r2, r3
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f96b 	bl	8009a06 <HAL_SYSTICK_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10f      	bne.n	8009756 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b0f      	cmp	r3, #15
 800973a:	d809      	bhi.n	8009750 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800973c:	2200      	movs	r2, #0
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	f000 f935 	bl	80099b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009748:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <HAL_InitTick+0x74>)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	e007      	b.n	8009760 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]
 8009754:	e004      	b.n	8009760 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	73fb      	strb	r3, [r7, #15]
 800975a:	e001      	b.n	8009760 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009760:	7bfb      	ldrb	r3, [r7, #15]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	2000048c 	.word	0x2000048c
 8009770:	2000018c 	.word	0x2000018c
 8009774:	20000488 	.word	0x20000488

08009778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <HAL_IncTick+0x20>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	461a      	mov	r2, r3
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <HAL_IncTick+0x24>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4413      	add	r3, r2
 8009788:	4a04      	ldr	r2, [pc, #16]	; (800979c <HAL_IncTick+0x24>)
 800978a:	6013      	str	r3, [r2, #0]
}
 800978c:	bf00      	nop
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	2000048c 	.word	0x2000048c
 800979c:	200040fc 	.word	0x200040fc

080097a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
  return uwTick;
 80097a4:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <HAL_GetTick+0x14>)
 80097a6:	681b      	ldr	r3, [r3, #0]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	200040fc 	.word	0x200040fc

080097b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097c0:	f7ff ffee 	bl	80097a0 <HAL_GetTick>
 80097c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d005      	beq.n	80097de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <HAL_Delay+0x40>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80097de:	bf00      	nop
 80097e0:	f7ff ffde 	bl	80097a0 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d8f7      	bhi.n	80097e0 <HAL_Delay+0x28>
  {
  }
}
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	2000048c 	.word	0x2000048c

080097fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800980c:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <__NVIC_SetPriorityGrouping+0x44>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009818:	4013      	ands	r3, r2
 800981a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800982c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800982e:	4a04      	ldr	r2, [pc, #16]	; (8009840 <__NVIC_SetPriorityGrouping+0x44>)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	60d3      	str	r3, [r2, #12]
}
 8009834:	bf00      	nop
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	e000ed00 	.word	0xe000ed00

08009844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009848:	4b04      	ldr	r3, [pc, #16]	; (800985c <__NVIC_GetPriorityGrouping+0x18>)
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	f003 0307 	and.w	r3, r3, #7
}
 8009852:	4618      	mov	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	e000ed00 	.word	0xe000ed00

08009860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800986a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800986e:	2b00      	cmp	r3, #0
 8009870:	db0b      	blt.n	800988a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	f003 021f 	and.w	r2, r3, #31
 8009878:	4907      	ldr	r1, [pc, #28]	; (8009898 <__NVIC_EnableIRQ+0x38>)
 800987a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	2001      	movs	r0, #1
 8009882:	fa00 f202 	lsl.w	r2, r0, r2
 8009886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	e000e100 	.word	0xe000e100

0800989c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	6039      	str	r1, [r7, #0]
 80098a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	db0a      	blt.n	80098c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	490c      	ldr	r1, [pc, #48]	; (80098e8 <__NVIC_SetPriority+0x4c>)
 80098b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ba:	0112      	lsls	r2, r2, #4
 80098bc:	b2d2      	uxtb	r2, r2
 80098be:	440b      	add	r3, r1
 80098c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098c4:	e00a      	b.n	80098dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	4908      	ldr	r1, [pc, #32]	; (80098ec <__NVIC_SetPriority+0x50>)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	3b04      	subs	r3, #4
 80098d4:	0112      	lsls	r2, r2, #4
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	440b      	add	r3, r1
 80098da:	761a      	strb	r2, [r3, #24]
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	e000e100 	.word	0xe000e100
 80098ec:	e000ed00 	.word	0xe000ed00

080098f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b089      	sub	sp, #36	; 0x24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 0307 	and.w	r3, r3, #7
 8009902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	f1c3 0307 	rsb	r3, r3, #7
 800990a:	2b04      	cmp	r3, #4
 800990c:	bf28      	it	cs
 800990e:	2304      	movcs	r3, #4
 8009910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	3304      	adds	r3, #4
 8009916:	2b06      	cmp	r3, #6
 8009918:	d902      	bls.n	8009920 <NVIC_EncodePriority+0x30>
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	3b03      	subs	r3, #3
 800991e:	e000      	b.n	8009922 <NVIC_EncodePriority+0x32>
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009924:	f04f 32ff 	mov.w	r2, #4294967295
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	fa02 f303 	lsl.w	r3, r2, r3
 800992e:	43da      	mvns	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	401a      	ands	r2, r3
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009938:	f04f 31ff 	mov.w	r1, #4294967295
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	fa01 f303 	lsl.w	r3, r1, r3
 8009942:	43d9      	mvns	r1, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009948:	4313      	orrs	r3, r2
         );
}
 800994a:	4618      	mov	r0, r3
 800994c:	3724      	adds	r7, #36	; 0x24
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
	...

08009958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3b01      	subs	r3, #1
 8009964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009968:	d301      	bcc.n	800996e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800996a:	2301      	movs	r3, #1
 800996c:	e00f      	b.n	800998e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800996e:	4a0a      	ldr	r2, [pc, #40]	; (8009998 <SysTick_Config+0x40>)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3b01      	subs	r3, #1
 8009974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009976:	210f      	movs	r1, #15
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	f7ff ff8e 	bl	800989c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009980:	4b05      	ldr	r3, [pc, #20]	; (8009998 <SysTick_Config+0x40>)
 8009982:	2200      	movs	r2, #0
 8009984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009986:	4b04      	ldr	r3, [pc, #16]	; (8009998 <SysTick_Config+0x40>)
 8009988:	2207      	movs	r2, #7
 800998a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	e000e010 	.word	0xe000e010

0800999c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ff29 	bl	80097fc <__NVIC_SetPriorityGrouping>
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b086      	sub	sp, #24
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	4603      	mov	r3, r0
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
 80099be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80099c4:	f7ff ff3e 	bl	8009844 <__NVIC_GetPriorityGrouping>
 80099c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	6978      	ldr	r0, [r7, #20]
 80099d0:	f7ff ff8e 	bl	80098f0 <NVIC_EncodePriority>
 80099d4:	4602      	mov	r2, r0
 80099d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff ff5d 	bl	800989c <__NVIC_SetPriority>
}
 80099e2:	bf00      	nop
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	4603      	mov	r3, r0
 80099f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7ff ff31 	bl	8009860 <__NVIC_EnableIRQ>
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff ffa2 	bl	8009958 <SysTick_Config>
 8009a14:	4603      	mov	r3, r0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e0ac      	b.n	8009b8c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f8b2 	bl	8009ba0 <DFSDM_GetChannelFromInstance>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	4b55      	ldr	r3, [pc, #340]	; (8009b94 <HAL_DFSDM_ChannelInit+0x174>)
 8009a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e09f      	b.n	8009b8c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7f9 fb49 	bl	80030e4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8009a52:	4b51      	ldr	r3, [pc, #324]	; (8009b98 <HAL_DFSDM_ChannelInit+0x178>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3301      	adds	r3, #1
 8009a58:	4a4f      	ldr	r2, [pc, #316]	; (8009b98 <HAL_DFSDM_ChannelInit+0x178>)
 8009a5a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8009a5c:	4b4e      	ldr	r3, [pc, #312]	; (8009b98 <HAL_DFSDM_ChannelInit+0x178>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d125      	bne.n	8009ab0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8009a64:	4b4d      	ldr	r3, [pc, #308]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a4c      	ldr	r2, [pc, #304]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a6e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009a70:	4b4a      	ldr	r3, [pc, #296]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	4948      	ldr	r1, [pc, #288]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009a7e:	4b47      	ldr	r3, [pc, #284]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a46      	ldr	r2, [pc, #280]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a84:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8009a88:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	791b      	ldrb	r3, [r3, #4]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d108      	bne.n	8009aa4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8009a92:	4b42      	ldr	r3, [pc, #264]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	493f      	ldr	r1, [pc, #252]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8009aa4:	4b3d      	ldr	r3, [pc, #244]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a3c      	ldr	r2, [pc, #240]	; (8009b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8009aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009aae:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8009abe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6819      	ldr	r1, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009ace:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8009ad4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 020f 	bic.w	r2, r2, #15
 8009aec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8009afc:	431a      	orrs	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8009b14:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6899      	ldr	r1, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	3b01      	subs	r3, #1
 8009b26:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f002 0207 	and.w	r2, r2, #7
 8009b40:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6859      	ldr	r1, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b52:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8009b54:	431a      	orrs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f810 	bl	8009ba0 <DFSDM_GetChannelFromInstance>
 8009b80:	4601      	mov	r1, r0
 8009b82:	4a04      	ldr	r2, [pc, #16]	; (8009b94 <HAL_DFSDM_ChannelInit+0x174>)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200008a0 	.word	0x200008a0
 8009b98:	2000089c 	.word	0x2000089c
 8009b9c:	40016000 	.word	0x40016000

08009ba0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a1c      	ldr	r2, [pc, #112]	; (8009c1c <DFSDM_GetChannelFromInstance+0x7c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d102      	bne.n	8009bb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e02b      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a19      	ldr	r2, [pc, #100]	; (8009c20 <DFSDM_GetChannelFromInstance+0x80>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d102      	bne.n	8009bc4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	e024      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <DFSDM_GetChannelFromInstance+0x84>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d102      	bne.n	8009bd2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8009bcc:	2302      	movs	r3, #2
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e01d      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a14      	ldr	r2, [pc, #80]	; (8009c28 <DFSDM_GetChannelFromInstance+0x88>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d102      	bne.n	8009be0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8009bda:	2304      	movs	r3, #4
 8009bdc:	60fb      	str	r3, [r7, #12]
 8009bde:	e016      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a12      	ldr	r2, [pc, #72]	; (8009c2c <DFSDM_GetChannelFromInstance+0x8c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d102      	bne.n	8009bee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8009be8:	2305      	movs	r3, #5
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e00f      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a0f      	ldr	r2, [pc, #60]	; (8009c30 <DFSDM_GetChannelFromInstance+0x90>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d102      	bne.n	8009bfc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8009bf6:	2306      	movs	r3, #6
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e008      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a0d      	ldr	r2, [pc, #52]	; (8009c34 <DFSDM_GetChannelFromInstance+0x94>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d102      	bne.n	8009c0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8009c04:	2307      	movs	r3, #7
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	e001      	b.n	8009c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	40016000 	.word	0x40016000
 8009c20:	40016020 	.word	0x40016020
 8009c24:	40016040 	.word	0x40016040
 8009c28:	40016080 	.word	0x40016080
 8009c2c:	400160a0 	.word	0x400160a0
 8009c30:	400160c0 	.word	0x400160c0
 8009c34:	400160e0 	.word	0x400160e0

08009c38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d005      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2204      	movs	r2, #4
 8009c54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]
 8009c5a:	e029      	b.n	8009cb0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 020e 	bic.w	r2, r2, #14
 8009c6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0201 	bic.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c80:	f003 021c 	and.w	r2, r3, #28
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c88:	2101      	movs	r1, #1
 8009c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c8e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
    }
  }
  return status;
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009cca:	e17f      	b.n	8009fcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd8:	4013      	ands	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 8171 	beq.w	8009fc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d00b      	beq.n	8009d04 <HAL_GPIO_Init+0x48>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d007      	beq.n	8009d04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009cf8:	2b11      	cmp	r3, #17
 8009cfa:	d003      	beq.n	8009d04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	2b12      	cmp	r3, #18
 8009d02:	d130      	bne.n	8009d66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	2203      	movs	r2, #3
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	43db      	mvns	r3, r3
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	68da      	ldr	r2, [r3, #12]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	fa02 f303 	lsl.w	r3, r2, r3
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	43db      	mvns	r3, r3
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4013      	ands	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	091b      	lsrs	r3, r3, #4
 8009d50:	f003 0201 	and.w	r2, r3, #1
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f003 0303 	and.w	r3, r3, #3
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d118      	bne.n	8009da4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009d78:	2201      	movs	r2, #1
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	43db      	mvns	r3, r3
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4013      	ands	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	08db      	lsrs	r3, r3, #3
 8009d8e:	f003 0201 	and.w	r2, r3, #1
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	fa02 f303 	lsl.w	r3, r2, r3
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	2203      	movs	r2, #3
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	43db      	mvns	r3, r3
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4013      	ands	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d003      	beq.n	8009de4 <HAL_GPIO_Init+0x128>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b12      	cmp	r3, #18
 8009de2:	d123      	bne.n	8009e2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	08da      	lsrs	r2, r3, #3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3208      	adds	r2, #8
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	220f      	movs	r2, #15
 8009dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009e00:	43db      	mvns	r3, r3
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	4013      	ands	r3, r2
 8009e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	691a      	ldr	r2, [r3, #16]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	fa02 f303 	lsl.w	r3, r2, r3
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	08da      	lsrs	r2, r3, #3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3208      	adds	r2, #8
 8009e26:	6939      	ldr	r1, [r7, #16]
 8009e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	2203      	movs	r2, #3
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	43db      	mvns	r3, r3
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	4013      	ands	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f003 0203 	and.w	r2, r3, #3
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	fa02 f303 	lsl.w	r3, r2, r3
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 80ac 	beq.w	8009fc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e6e:	4b5e      	ldr	r3, [pc, #376]	; (8009fe8 <HAL_GPIO_Init+0x32c>)
 8009e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e72:	4a5d      	ldr	r2, [pc, #372]	; (8009fe8 <HAL_GPIO_Init+0x32c>)
 8009e74:	f043 0301 	orr.w	r3, r3, #1
 8009e78:	6613      	str	r3, [r2, #96]	; 0x60
 8009e7a:	4b5b      	ldr	r3, [pc, #364]	; (8009fe8 <HAL_GPIO_Init+0x32c>)
 8009e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009e86:	4a59      	ldr	r2, [pc, #356]	; (8009fec <HAL_GPIO_Init+0x330>)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	089b      	lsrs	r3, r3, #2
 8009e8c:	3302      	adds	r3, #2
 8009e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	220f      	movs	r2, #15
 8009e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea2:	43db      	mvns	r3, r3
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009eb0:	d025      	beq.n	8009efe <HAL_GPIO_Init+0x242>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a4e      	ldr	r2, [pc, #312]	; (8009ff0 <HAL_GPIO_Init+0x334>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d01f      	beq.n	8009efa <HAL_GPIO_Init+0x23e>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a4d      	ldr	r2, [pc, #308]	; (8009ff4 <HAL_GPIO_Init+0x338>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d019      	beq.n	8009ef6 <HAL_GPIO_Init+0x23a>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a4c      	ldr	r2, [pc, #304]	; (8009ff8 <HAL_GPIO_Init+0x33c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d013      	beq.n	8009ef2 <HAL_GPIO_Init+0x236>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a4b      	ldr	r2, [pc, #300]	; (8009ffc <HAL_GPIO_Init+0x340>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00d      	beq.n	8009eee <HAL_GPIO_Init+0x232>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a4a      	ldr	r2, [pc, #296]	; (800a000 <HAL_GPIO_Init+0x344>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d007      	beq.n	8009eea <HAL_GPIO_Init+0x22e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a49      	ldr	r2, [pc, #292]	; (800a004 <HAL_GPIO_Init+0x348>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d101      	bne.n	8009ee6 <HAL_GPIO_Init+0x22a>
 8009ee2:	2306      	movs	r3, #6
 8009ee4:	e00c      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009ee6:	2307      	movs	r3, #7
 8009ee8:	e00a      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009eea:	2305      	movs	r3, #5
 8009eec:	e008      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009eee:	2304      	movs	r3, #4
 8009ef0:	e006      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e004      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e002      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <HAL_GPIO_Init+0x244>
 8009efe:	2300      	movs	r3, #0
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	f002 0203 	and.w	r2, r2, #3
 8009f06:	0092      	lsls	r2, r2, #2
 8009f08:	4093      	lsls	r3, r2
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009f10:	4936      	ldr	r1, [pc, #216]	; (8009fec <HAL_GPIO_Init+0x330>)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	089b      	lsrs	r3, r3, #2
 8009f16:	3302      	adds	r3, #2
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009f1e:	4b3a      	ldr	r3, [pc, #232]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	43db      	mvns	r3, r3
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009f42:	4a31      	ldr	r2, [pc, #196]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009f48:	4b2f      	ldr	r3, [pc, #188]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4013      	ands	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009f6c:	4a26      	ldr	r2, [pc, #152]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f72:	4b25      	ldr	r3, [pc, #148]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	43db      	mvns	r3, r3
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009f96:	4a1c      	ldr	r2, [pc, #112]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009fc0:	4a11      	ldr	r2, [pc, #68]	; (800a008 <HAL_GPIO_Init+0x34c>)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f47f ae78 	bne.w	8009ccc <HAL_GPIO_Init+0x10>
  }
}
 8009fdc:	bf00      	nop
 8009fde:	371c      	adds	r7, #28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	40021000 	.word	0x40021000
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	48000400 	.word	0x48000400
 8009ff4:	48000800 	.word	0x48000800
 8009ff8:	48000c00 	.word	0x48000c00
 8009ffc:	48001000 	.word	0x48001000
 800a000:	48001400 	.word	0x48001400
 800a004:	48001800 	.word	0x48001800
 800a008:	40010400 	.word	0x40010400

0800a00c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a01a:	e0cd      	b.n	800a1b8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a01c:	2201      	movs	r2, #1
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	fa02 f303 	lsl.w	r3, r2, r3
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	4013      	ands	r3, r2
 800a028:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80c0 	beq.w	800a1b2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a032:	4a68      	ldr	r2, [pc, #416]	; (800a1d4 <HAL_GPIO_DeInit+0x1c8>)
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	089b      	lsrs	r3, r3, #2
 800a038:	3302      	adds	r3, #2
 800a03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	220f      	movs	r2, #15
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4013      	ands	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a05a:	d025      	beq.n	800a0a8 <HAL_GPIO_DeInit+0x9c>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a5e      	ldr	r2, [pc, #376]	; (800a1d8 <HAL_GPIO_DeInit+0x1cc>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d01f      	beq.n	800a0a4 <HAL_GPIO_DeInit+0x98>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a5d      	ldr	r2, [pc, #372]	; (800a1dc <HAL_GPIO_DeInit+0x1d0>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d019      	beq.n	800a0a0 <HAL_GPIO_DeInit+0x94>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a5c      	ldr	r2, [pc, #368]	; (800a1e0 <HAL_GPIO_DeInit+0x1d4>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d013      	beq.n	800a09c <HAL_GPIO_DeInit+0x90>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a5b      	ldr	r2, [pc, #364]	; (800a1e4 <HAL_GPIO_DeInit+0x1d8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00d      	beq.n	800a098 <HAL_GPIO_DeInit+0x8c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a5a      	ldr	r2, [pc, #360]	; (800a1e8 <HAL_GPIO_DeInit+0x1dc>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d007      	beq.n	800a094 <HAL_GPIO_DeInit+0x88>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a59      	ldr	r2, [pc, #356]	; (800a1ec <HAL_GPIO_DeInit+0x1e0>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d101      	bne.n	800a090 <HAL_GPIO_DeInit+0x84>
 800a08c:	2306      	movs	r3, #6
 800a08e:	e00c      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a090:	2307      	movs	r3, #7
 800a092:	e00a      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a094:	2305      	movs	r3, #5
 800a096:	e008      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a098:	2304      	movs	r3, #4
 800a09a:	e006      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a09c:	2303      	movs	r3, #3
 800a09e:	e004      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	e002      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e000      	b.n	800a0aa <HAL_GPIO_DeInit+0x9e>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	f002 0203 	and.w	r2, r2, #3
 800a0b0:	0092      	lsls	r2, r2, #2
 800a0b2:	4093      	lsls	r3, r2
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d132      	bne.n	800a120 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a0ba:	4b4d      	ldr	r3, [pc, #308]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	43db      	mvns	r3, r3
 800a0c2:	494b      	ldr	r1, [pc, #300]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a0c8:	4b49      	ldr	r3, [pc, #292]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	43db      	mvns	r3, r3
 800a0d0:	4947      	ldr	r1, [pc, #284]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a0d6:	4b46      	ldr	r3, [pc, #280]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	43db      	mvns	r3, r3
 800a0de:	4944      	ldr	r1, [pc, #272]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a0e4:	4b42      	ldr	r3, [pc, #264]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	43db      	mvns	r3, r3
 800a0ec:	4940      	ldr	r1, [pc, #256]	; (800a1f0 <HAL_GPIO_DeInit+0x1e4>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 0303 	and.w	r3, r3, #3
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	220f      	movs	r2, #15
 800a0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a100:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a102:	4a34      	ldr	r2, [pc, #208]	; (800a1d4 <HAL_GPIO_DeInit+0x1c8>)
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	089b      	lsrs	r3, r3, #2
 800a108:	3302      	adds	r3, #2
 800a10a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	43da      	mvns	r2, r3
 800a112:	4830      	ldr	r0, [pc, #192]	; (800a1d4 <HAL_GPIO_DeInit+0x1c8>)
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	089b      	lsrs	r3, r3, #2
 800a118:	400a      	ands	r2, r1
 800a11a:	3302      	adds	r3, #2
 800a11c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	2103      	movs	r1, #3
 800a12a:	fa01 f303 	lsl.w	r3, r1, r3
 800a12e:	431a      	orrs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	08da      	lsrs	r2, r3, #3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3208      	adds	r2, #8
 800a13c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	220f      	movs	r2, #15
 800a14a:	fa02 f303 	lsl.w	r3, r2, r3
 800a14e:	43db      	mvns	r3, r3
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	08d2      	lsrs	r2, r2, #3
 800a154:	4019      	ands	r1, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3208      	adds	r2, #8
 800a15a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	2103      	movs	r1, #3
 800a168:	fa01 f303 	lsl.w	r3, r1, r3
 800a16c:	43db      	mvns	r3, r3
 800a16e:	401a      	ands	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	2101      	movs	r1, #1
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	fa01 f303 	lsl.w	r3, r1, r3
 800a180:	43db      	mvns	r3, r3
 800a182:	401a      	ands	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	2103      	movs	r1, #3
 800a192:	fa01 f303 	lsl.w	r3, r1, r3
 800a196:	43db      	mvns	r3, r3
 800a198:	401a      	ands	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1aa:	43db      	mvns	r3, r3
 800a1ac:	401a      	ands	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f47f af2b 	bne.w	800a01c <HAL_GPIO_DeInit+0x10>
  }
}
 800a1c6:	bf00      	nop
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	48000400 	.word	0x48000400
 800a1dc:	48000800 	.word	0x48000800
 800a1e0:	48000c00 	.word	0x48000c00
 800a1e4:	48001000 	.word	0x48001000
 800a1e8:	48001400 	.word	0x48001400
 800a1ec:	48001800 	.word	0x48001800
 800a1f0:	40010400 	.word	0x40010400

0800a1f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691a      	ldr	r2, [r3, #16]
 800a204:	887b      	ldrh	r3, [r7, #2]
 800a206:	4013      	ands	r3, r2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	e001      	b.n	800a216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	807b      	strh	r3, [r7, #2]
 800a230:	4613      	mov	r3, r2
 800a232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a234:	787b      	ldrb	r3, [r7, #1]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a23a:	887a      	ldrh	r2, [r7, #2]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a240:	e002      	b.n	800a248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a242:	887a      	ldrh	r2, [r7, #2]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a25e:	4b08      	ldr	r3, [pc, #32]	; (800a280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a260:	695a      	ldr	r2, [r3, #20]
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	4013      	ands	r3, r2
 800a266:	2b00      	cmp	r3, #0
 800a268:	d006      	beq.n	800a278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a26a:	4a05      	ldr	r2, [pc, #20]	; (800a280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	4618      	mov	r0, r3
 800a274:	f7f8 fef7 	bl	8003066 <HAL_GPIO_EXTI_Callback>
  }
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	40010400 	.word	0x40010400

0800a284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e081      	b.n	800a39a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7f8 ff5e 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2224      	movs	r2, #36	; 0x24
 800a2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0201 	bic.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d107      	bne.n	800a2fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2fa:	609a      	str	r2, [r3, #8]
 800a2fc:	e006      	b.n	800a30c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689a      	ldr	r2, [r3, #8]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a30a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d104      	bne.n	800a31e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a31c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a32c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a330:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a340:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691a      	ldr	r2, [r3, #16]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	ea42 0103 	orr.w	r1, r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	021a      	lsls	r2, r3, #8
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	69d9      	ldr	r1, [r3, #28]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1a      	ldr	r2, [r3, #32]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f042 0201 	orr.w	r2, r2, #1
 800a37a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e021      	b.n	800a3f8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2224      	movs	r2, #36	; 0x24
 800a3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0201 	bic.w	r2, r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7f8 ff11 	bl	80031f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af02      	add	r7, sp, #8
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	461a      	mov	r2, r3
 800a40c:	460b      	mov	r3, r1
 800a40e:	817b      	strh	r3, [r7, #10]
 800a410:	4613      	mov	r3, r2
 800a412:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	f040 80da 	bne.w	800a5d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d101      	bne.n	800a430 <HAL_I2C_Master_Transmit+0x30>
 800a42c:	2302      	movs	r3, #2
 800a42e:	e0d3      	b.n	800a5d8 <HAL_I2C_Master_Transmit+0x1d8>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a438:	f7ff f9b2 	bl	80097a0 <HAL_GetTick>
 800a43c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	2319      	movs	r3, #25
 800a444:	2201      	movs	r2, #1
 800a446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fcbc 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e0be      	b.n	800a5d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2221      	movs	r2, #33	; 0x21
 800a45e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2210      	movs	r2, #16
 800a466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	893a      	ldrh	r2, [r7, #8]
 800a47a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a486:	b29b      	uxth	r3, r3
 800a488:	2bff      	cmp	r3, #255	; 0xff
 800a48a:	d90e      	bls.n	800a4aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	22ff      	movs	r2, #255	; 0xff
 800a490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	b2da      	uxtb	r2, r3
 800a498:	8979      	ldrh	r1, [r7, #10]
 800a49a:	4b51      	ldr	r3, [pc, #324]	; (800a5e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fe1e 	bl	800b0e4 <I2C_TransferConfig>
 800a4a8:	e06c      	b.n	800a584 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	8979      	ldrh	r1, [r7, #10]
 800a4bc:	4b48      	ldr	r3, [pc, #288]	; (800a5e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fe0d 	bl	800b0e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a4ca:	e05b      	b.n	800a584 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	6a39      	ldr	r1, [r7, #32]
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 fcb9 	bl	800ae48 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e07b      	b.n	800a5d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d034      	beq.n	800a584 <HAL_I2C_Master_Transmit+0x184>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d130      	bne.n	800a584 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	2200      	movs	r2, #0
 800a52a:	2180      	movs	r1, #128	; 0x80
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 fc4b 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e04d      	b.n	800a5d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a540:	b29b      	uxth	r3, r3
 800a542:	2bff      	cmp	r3, #255	; 0xff
 800a544:	d90e      	bls.n	800a564 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	22ff      	movs	r2, #255	; 0xff
 800a54a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a550:	b2da      	uxtb	r2, r3
 800a552:	8979      	ldrh	r1, [r7, #10]
 800a554:	2300      	movs	r3, #0
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 fdc1 	bl	800b0e4 <I2C_TransferConfig>
 800a562:	e00f      	b.n	800a584 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a572:	b2da      	uxtb	r2, r3
 800a574:	8979      	ldrh	r1, [r7, #10]
 800a576:	2300      	movs	r3, #0
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fdb0 	bl	800b0e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d19e      	bne.n	800a4cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	6a39      	ldr	r1, [r7, #32]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 fc98 	bl	800aec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e01a      	b.n	800a5d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6859      	ldr	r1, [r3, #4]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <HAL_I2C_Master_Transmit+0x1e4>)
 800a5b6:	400b      	ands	r3, r1
 800a5b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e000      	b.n	800a5d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a5d6:	2302      	movs	r3, #2
  }
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	80002000 	.word	0x80002000
 800a5e4:	fe00e800 	.word	0xfe00e800

0800a5e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	607a      	str	r2, [r7, #4]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	817b      	strh	r3, [r7, #10]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b20      	cmp	r3, #32
 800a606:	f040 80db 	bne.w	800a7c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a610:	2b01      	cmp	r3, #1
 800a612:	d101      	bne.n	800a618 <HAL_I2C_Master_Receive+0x30>
 800a614:	2302      	movs	r3, #2
 800a616:	e0d4      	b.n	800a7c2 <HAL_I2C_Master_Receive+0x1da>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a620:	f7ff f8be 	bl	80097a0 <HAL_GetTick>
 800a624:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	2319      	movs	r3, #25
 800a62c:	2201      	movs	r2, #1
 800a62e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fbc8 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e0bf      	b.n	800a7c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2222      	movs	r2, #34	; 0x22
 800a646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2210      	movs	r2, #16
 800a64e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	893a      	ldrh	r2, [r7, #8]
 800a662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a66e:	b29b      	uxth	r3, r3
 800a670:	2bff      	cmp	r3, #255	; 0xff
 800a672:	d90e      	bls.n	800a692 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	22ff      	movs	r2, #255	; 0xff
 800a678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	8979      	ldrh	r1, [r7, #10]
 800a682:	4b52      	ldr	r3, [pc, #328]	; (800a7cc <HAL_I2C_Master_Receive+0x1e4>)
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 fd2a 	bl	800b0e4 <I2C_TransferConfig>
 800a690:	e06d      	b.n	800a76e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a696:	b29a      	uxth	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	8979      	ldrh	r1, [r7, #10]
 800a6a4:	4b49      	ldr	r3, [pc, #292]	; (800a7cc <HAL_I2C_Master_Receive+0x1e4>)
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 fd19 	bl	800b0e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a6b2:	e05c      	b.n	800a76e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	6a39      	ldr	r1, [r7, #32]
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 fc41 	bl	800af40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e07c      	b.n	800a7c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	b2d2      	uxtb	r2, r2
 800a6d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d034      	beq.n	800a76e <HAL_I2C_Master_Receive+0x186>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d130      	bne.n	800a76e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2200      	movs	r2, #0
 800a714:	2180      	movs	r1, #128	; 0x80
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fb56 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e04d      	b.n	800a7c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2bff      	cmp	r3, #255	; 0xff
 800a72e:	d90e      	bls.n	800a74e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	22ff      	movs	r2, #255	; 0xff
 800a734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	8979      	ldrh	r1, [r7, #10]
 800a73e:	2300      	movs	r3, #0
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 fccc 	bl	800b0e4 <I2C_TransferConfig>
 800a74c:	e00f      	b.n	800a76e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a752:	b29a      	uxth	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	8979      	ldrh	r1, [r7, #10]
 800a760:	2300      	movs	r3, #0
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 fcbb 	bl	800b0e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a772:	b29b      	uxth	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d19d      	bne.n	800a6b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	6a39      	ldr	r1, [r7, #32]
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 fba3 	bl	800aec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e01a      	b.n	800a7c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2220      	movs	r2, #32
 800a792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6859      	ldr	r1, [r3, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <HAL_I2C_Master_Receive+0x1e8>)
 800a7a0:	400b      	ands	r3, r1
 800a7a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	e000      	b.n	800a7c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a7c0:	2302      	movs	r3, #2
  }
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	80002400 	.word	0x80002400
 800a7d0:	fe00e800 	.word	0xfe00e800

0800a7d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	4608      	mov	r0, r1
 800a7de:	4611      	mov	r1, r2
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	817b      	strh	r3, [r7, #10]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	813b      	strh	r3, [r7, #8]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	f040 80f9 	bne.w	800a9ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <HAL_I2C_Mem_Write+0x34>
 800a802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a804:	2b00      	cmp	r3, #0
 800a806:	d105      	bne.n	800a814 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a80e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e0ed      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d101      	bne.n	800a822 <HAL_I2C_Mem_Write+0x4e>
 800a81e:	2302      	movs	r3, #2
 800a820:	e0e6      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a82a:	f7fe ffb9 	bl	80097a0 <HAL_GetTick>
 800a82e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	2319      	movs	r3, #25
 800a836:	2201      	movs	r2, #1
 800a838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 fac3 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e0d1      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2221      	movs	r2, #33	; 0x21
 800a850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2240      	movs	r2, #64	; 0x40
 800a858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a3a      	ldr	r2, [r7, #32]
 800a866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a86c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a874:	88f8      	ldrh	r0, [r7, #6]
 800a876:	893a      	ldrh	r2, [r7, #8]
 800a878:	8979      	ldrh	r1, [r7, #10]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	4603      	mov	r3, r0
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 f9d3 	bl	800ac30 <I2C_RequestMemoryWrite>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e0a9      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2bff      	cmp	r3, #255	; 0xff
 800a8a4:	d90e      	bls.n	800a8c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	22ff      	movs	r2, #255	; 0xff
 800a8aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	8979      	ldrh	r1, [r7, #10]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 fc11 	bl	800b0e4 <I2C_TransferConfig>
 800a8c2:	e00f      	b.n	800a8e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	8979      	ldrh	r1, [r7, #10]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fc00 	bl	800b0e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 faad 	bl	800ae48 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e07b      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	781a      	ldrb	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a912:	b29b      	uxth	r3, r3
 800a914:	3b01      	subs	r3, #1
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a920:	3b01      	subs	r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d034      	beq.n	800a99c <HAL_I2C_Mem_Write+0x1c8>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d130      	bne.n	800a99c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	2200      	movs	r2, #0
 800a942:	2180      	movs	r1, #128	; 0x80
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fa3f 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e04d      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a958:	b29b      	uxth	r3, r3
 800a95a:	2bff      	cmp	r3, #255	; 0xff
 800a95c:	d90e      	bls.n	800a97c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	22ff      	movs	r2, #255	; 0xff
 800a962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	8979      	ldrh	r1, [r7, #10]
 800a96c:	2300      	movs	r3, #0
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 fbb5 	bl	800b0e4 <I2C_TransferConfig>
 800a97a:	e00f      	b.n	800a99c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a980:	b29a      	uxth	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	8979      	ldrh	r1, [r7, #10]
 800a98e:	2300      	movs	r3, #0
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 fba4 	bl	800b0e4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d19e      	bne.n	800a8e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 fa8c 	bl	800aec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e01a      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6859      	ldr	r1, [r3, #4]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <HAL_I2C_Mem_Write+0x224>)
 800a9ce:	400b      	ands	r3, r1
 800a9d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e000      	b.n	800a9f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a9ee:	2302      	movs	r3, #2
  }
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	fe00e800 	.word	0xfe00e800

0800a9fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af02      	add	r7, sp, #8
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	4608      	mov	r0, r1
 800aa06:	4611      	mov	r1, r2
 800aa08:	461a      	mov	r2, r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	817b      	strh	r3, [r7, #10]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	813b      	strh	r3, [r7, #8]
 800aa12:	4613      	mov	r3, r2
 800aa14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b20      	cmp	r3, #32
 800aa20:	f040 80fd 	bne.w	800ac1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <HAL_I2C_Mem_Read+0x34>
 800aa2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d105      	bne.n	800aa3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e0f1      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_I2C_Mem_Read+0x4e>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e0ea      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa52:	f7fe fea5 	bl	80097a0 <HAL_GetTick>
 800aa56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	2319      	movs	r3, #25
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 f9af 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e0d5      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2222      	movs	r2, #34	; 0x22
 800aa78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2240      	movs	r2, #64	; 0x40
 800aa80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a3a      	ldr	r2, [r7, #32]
 800aa8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa9c:	88f8      	ldrh	r0, [r7, #6]
 800aa9e:	893a      	ldrh	r2, [r7, #8]
 800aaa0:	8979      	ldrh	r1, [r7, #10]
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	4603      	mov	r3, r0
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 f913 	bl	800acd8 <I2C_RequestMemoryRead>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e0ad      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	2bff      	cmp	r3, #255	; 0xff
 800aacc:	d90e      	bls.n	800aaec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	22ff      	movs	r2, #255	; 0xff
 800aad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	8979      	ldrh	r1, [r7, #10]
 800aadc:	4b52      	ldr	r3, [pc, #328]	; (800ac28 <HAL_I2C_Mem_Read+0x22c>)
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 fafd 	bl	800b0e4 <I2C_TransferConfig>
 800aaea:	e00f      	b.n	800ab0c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	8979      	ldrh	r1, [r7, #10]
 800aafe:	4b4a      	ldr	r3, [pc, #296]	; (800ac28 <HAL_I2C_Mem_Read+0x22c>)
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 faec 	bl	800b0e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	2200      	movs	r2, #0
 800ab14:	2104      	movs	r1, #4
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 f956 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e07c      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d034      	beq.n	800abcc <HAL_I2C_Mem_Read+0x1d0>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d130      	bne.n	800abcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	2200      	movs	r2, #0
 800ab72:	2180      	movs	r1, #128	; 0x80
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 f927 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e04d      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	2bff      	cmp	r3, #255	; 0xff
 800ab8c:	d90e      	bls.n	800abac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	22ff      	movs	r2, #255	; 0xff
 800ab92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	8979      	ldrh	r1, [r7, #10]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 fa9d 	bl	800b0e4 <I2C_TransferConfig>
 800abaa:	e00f      	b.n	800abcc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	8979      	ldrh	r1, [r7, #10]
 800abbe:	2300      	movs	r3, #0
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 fa8c 	bl	800b0e4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d19a      	bne.n	800ab0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 f974 	bl	800aec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e01a      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2220      	movs	r2, #32
 800abf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6859      	ldr	r1, [r3, #4]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <HAL_I2C_Mem_Read+0x230>)
 800abfe:	400b      	ands	r3, r1
 800ac00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2220      	movs	r2, #32
 800ac06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e000      	b.n	800ac20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ac1e:	2302      	movs	r3, #2
  }
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	80002400 	.word	0x80002400
 800ac2c:	fe00e800 	.word	0xfe00e800

0800ac30 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4603      	mov	r3, r0
 800ac40:	817b      	strh	r3, [r7, #10]
 800ac42:	460b      	mov	r3, r1
 800ac44:	813b      	strh	r3, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ac4a:	88fb      	ldrh	r3, [r7, #6]
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	8979      	ldrh	r1, [r7, #10]
 800ac50:	4b20      	ldr	r3, [pc, #128]	; (800acd4 <I2C_RequestMemoryWrite+0xa4>)
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f000 fa43 	bl	800b0e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	69b9      	ldr	r1, [r7, #24]
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f000 f8f0 	bl	800ae48 <I2C_WaitOnTXISFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e02c      	b.n	800accc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d105      	bne.n	800ac84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ac78:	893b      	ldrh	r3, [r7, #8]
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	629a      	str	r2, [r3, #40]	; 0x28
 800ac82:	e015      	b.n	800acb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ac84:	893b      	ldrh	r3, [r7, #8]
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac92:	69fa      	ldr	r2, [r7, #28]
 800ac94:	69b9      	ldr	r1, [r7, #24]
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f000 f8d6 	bl	800ae48 <I2C_WaitOnTXISFlagUntilTimeout>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e012      	b.n	800accc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aca6:	893b      	ldrh	r3, [r7, #8]
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	2200      	movs	r2, #0
 800acb8:	2180      	movs	r1, #128	; 0x80
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f884 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	80002000 	.word	0x80002000

0800acd8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af02      	add	r7, sp, #8
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	4608      	mov	r0, r1
 800ace2:	4611      	mov	r1, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	4603      	mov	r3, r0
 800ace8:	817b      	strh	r3, [r7, #10]
 800acea:	460b      	mov	r3, r1
 800acec:	813b      	strh	r3, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800acf2:	88fb      	ldrh	r3, [r7, #6]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	8979      	ldrh	r1, [r7, #10]
 800acf8:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <I2C_RequestMemoryRead+0xa4>)
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	2300      	movs	r3, #0
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 f9f0 	bl	800b0e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	69b9      	ldr	r1, [r7, #24]
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 f89d 	bl	800ae48 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e02c      	b.n	800ad72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad18:	88fb      	ldrh	r3, [r7, #6]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d105      	bne.n	800ad2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad1e:	893b      	ldrh	r3, [r7, #8]
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	629a      	str	r2, [r3, #40]	; 0x28
 800ad28:	e015      	b.n	800ad56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad2a:	893b      	ldrh	r3, [r7, #8]
 800ad2c:	0a1b      	lsrs	r3, r3, #8
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	69b9      	ldr	r1, [r7, #24]
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 f883 	bl	800ae48 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e012      	b.n	800ad72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad4c:	893b      	ldrh	r3, [r7, #8]
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	9300      	str	r3, [sp, #0]
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2140      	movs	r1, #64	; 0x40
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 f831 	bl	800adc8 <I2C_WaitOnFlagUntilTimeout>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	80002000 	.word	0x80002000

0800ad80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d103      	bne.n	800ad9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d007      	beq.n	800adbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f042 0201 	orr.w	r2, r2, #1
 800adba:	619a      	str	r2, [r3, #24]
  }
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	4613      	mov	r3, r2
 800add6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800add8:	e022      	b.n	800ae20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d01e      	beq.n	800ae20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ade2:	f7fe fcdd 	bl	80097a0 <HAL_GetTick>
 800ade6:	4602      	mov	r2, r0
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d302      	bcc.n	800adf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d113      	bne.n	800ae20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adfc:	f043 0220 	orr.w	r2, r3, #32
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e00f      	b.n	800ae40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	bf0c      	ite	eq
 800ae30:	2301      	moveq	r3, #1
 800ae32:	2300      	movne	r3, #0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d0cd      	beq.n	800adda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae54:	e02c      	b.n	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 f8dc 	bl	800b018 <I2C_IsAcknowledgeFailed>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e02a      	b.n	800aec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae70:	d01e      	beq.n	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae72:	f7fe fc95 	bl	80097a0 <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d302      	bcc.n	800ae88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d113      	bne.n	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae8c:	f043 0220 	orr.w	r2, r3, #32
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2220      	movs	r2, #32
 800ae98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e007      	b.n	800aec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d1cb      	bne.n	800ae56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aed4:	e028      	b.n	800af28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	68b9      	ldr	r1, [r7, #8]
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 f89c 	bl	800b018 <I2C_IsAcknowledgeFailed>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e026      	b.n	800af38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeea:	f7fe fc59 	bl	80097a0 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d302      	bcc.n	800af00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d113      	bne.n	800af28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af04:	f043 0220 	orr.w	r2, r3, #32
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2220      	movs	r2, #32
 800af10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e007      	b.n	800af38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b20      	cmp	r3, #32
 800af34:	d1cf      	bne.n	800aed6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af4c:	e055      	b.n	800affa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 f860 	bl	800b018 <I2C_IsAcknowledgeFailed>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e053      	b.n	800b00a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d129      	bne.n	800afc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d105      	bne.n	800af8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	e03f      	b.n	800b00a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2220      	movs	r2, #32
 800af90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6859      	ldr	r1, [r3, #4]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	4b1d      	ldr	r3, [pc, #116]	; (800b014 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800af9e:	400b      	ands	r3, r1
 800afa0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2220      	movs	r2, #32
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e022      	b.n	800b00a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afc4:	f7fe fbec 	bl	80097a0 <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d302      	bcc.n	800afda <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10f      	bne.n	800affa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afde:	f043 0220 	orr.w	r2, r3, #32
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2220      	movs	r2, #32
 800afea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e007      	b.n	800b00a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b04      	cmp	r3, #4
 800b006:	d1a2      	bne.n	800af4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	fe00e800 	.word	0xfe00e800

0800b018 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	f003 0310 	and.w	r3, r3, #16
 800b02e:	2b10      	cmp	r3, #16
 800b030:	d151      	bne.n	800b0d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b032:	e022      	b.n	800b07a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d01e      	beq.n	800b07a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b03c:	f7fe fbb0 	bl	80097a0 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d302      	bcc.n	800b052 <I2C_IsAcknowledgeFailed+0x3a>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d113      	bne.n	800b07a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b056:	f043 0220 	orr.w	r2, r3, #32
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2220      	movs	r2, #32
 800b062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e02e      	b.n	800b0d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f003 0320 	and.w	r3, r3, #32
 800b084:	2b20      	cmp	r3, #32
 800b086:	d1d5      	bne.n	800b034 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2210      	movs	r2, #16
 800b08e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2220      	movs	r2, #32
 800b096:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fe71 	bl	800ad80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6859      	ldr	r1, [r3, #4]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	4b0d      	ldr	r3, [pc, #52]	; (800b0e0 <I2C_IsAcknowledgeFailed+0xc8>)
 800b0aa:	400b      	ands	r3, r1
 800b0ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b2:	f043 0204 	orr.w	r2, r3, #4
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	fe00e800 	.word	0xfe00e800

0800b0e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	607b      	str	r3, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	817b      	strh	r3, [r7, #10]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	0d5b      	lsrs	r3, r3, #21
 800b100:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <I2C_TransferConfig+0x58>)
 800b106:	430b      	orrs	r3, r1
 800b108:	43db      	mvns	r3, r3
 800b10a:	ea02 0103 	and.w	r1, r2, r3
 800b10e:	897b      	ldrh	r3, [r7, #10]
 800b110:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b114:	7a7b      	ldrb	r3, [r7, #9]
 800b116:	041b      	lsls	r3, r3, #16
 800b118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b11c:	431a      	orrs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	431a      	orrs	r2, r3
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	431a      	orrs	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b12e:	bf00      	nop
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	03ff63ff 	.word	0x03ff63ff

0800b140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b20      	cmp	r3, #32
 800b154:	d138      	bne.n	800b1c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d101      	bne.n	800b164 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b160:	2302      	movs	r3, #2
 800b162:	e032      	b.n	800b1ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2224      	movs	r2, #36	; 0x24
 800b170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f022 0201 	bic.w	r2, r2, #1
 800b182:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b192:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6819      	ldr	r1, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f042 0201 	orr.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2220      	movs	r2, #32
 800b1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e000      	b.n	800b1ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1c8:	2302      	movs	r3, #2
  }
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b20      	cmp	r3, #32
 800b1ea:	d139      	bne.n	800b260 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d101      	bne.n	800b1fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	e033      	b.n	800b262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2224      	movs	r2, #36	; 0x24
 800b206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 0201 	bic.w	r2, r2, #1
 800b218:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b228:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f042 0201 	orr.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2220      	movs	r2, #32
 800b250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	e000      	b.n	800b262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b260:	2302      	movs	r3, #2
  }
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b26e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b270:	b08f      	sub	sp, #60	; 0x3c
 800b272:	af0a      	add	r7, sp, #40	; 0x28
 800b274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e116      	b.n	800b4ae <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7f8 f8ea 	bl	8003474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d102      	bne.n	800b2ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f003 fd50 	bl	800ed64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	603b      	str	r3, [r7, #0]
 800b2ca:	687e      	ldr	r6, [r7, #4]
 800b2cc:	466d      	mov	r5, sp
 800b2ce:	f106 0410 	add.w	r4, r6, #16
 800b2d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b2de:	e885 0003 	stmia.w	r5, {r0, r1}
 800b2e2:	1d33      	adds	r3, r6, #4
 800b2e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2e6:	6838      	ldr	r0, [r7, #0]
 800b2e8:	f003 fcea 	bl	800ecc0 <USB_CoreInit>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d005      	beq.n	800b2fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e0d7      	b.n	800b4ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2100      	movs	r1, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f003 fd3e 	bl	800ed86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
 800b30e:	e04a      	b.n	800b3a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b310:	7bfa      	ldrb	r2, [r7, #15]
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	4613      	mov	r3, r2
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	1a9b      	subs	r3, r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	440b      	add	r3, r1
 800b31e:	333d      	adds	r3, #61	; 0x3d
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b324:	7bfa      	ldrb	r2, [r7, #15]
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	00db      	lsls	r3, r3, #3
 800b32c:	1a9b      	subs	r3, r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	333c      	adds	r3, #60	; 0x3c
 800b334:	7bfa      	ldrb	r2, [r7, #15]
 800b336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b338:	7bfa      	ldrb	r2, [r7, #15]
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	b298      	uxth	r0, r3
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	4613      	mov	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	440b      	add	r3, r1
 800b34a:	3342      	adds	r3, #66	; 0x42
 800b34c:	4602      	mov	r2, r0
 800b34e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b350:	7bfa      	ldrb	r2, [r7, #15]
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	440b      	add	r3, r1
 800b35e:	333f      	adds	r3, #63	; 0x3f
 800b360:	2200      	movs	r2, #0
 800b362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b364:	7bfa      	ldrb	r2, [r7, #15]
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	4613      	mov	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	1a9b      	subs	r3, r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	440b      	add	r3, r1
 800b372:	3344      	adds	r3, #68	; 0x44
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b378:	7bfa      	ldrb	r2, [r7, #15]
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	4613      	mov	r3, r2
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	1a9b      	subs	r3, r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	440b      	add	r3, r1
 800b386:	3348      	adds	r3, #72	; 0x48
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b38c:	7bfa      	ldrb	r2, [r7, #15]
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4613      	mov	r3, r2
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	1a9b      	subs	r3, r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	440b      	add	r3, r1
 800b39a:	3350      	adds	r3, #80	; 0x50
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	73fb      	strb	r3, [r7, #15]
 800b3a6:	7bfa      	ldrb	r2, [r7, #15]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d3af      	bcc.n	800b310 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
 800b3b4:	e044      	b.n	800b440 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b3b6:	7bfa      	ldrb	r2, [r7, #15]
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	00db      	lsls	r3, r3, #3
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b3cc:	7bfa      	ldrb	r2, [r7, #15]
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	440b      	add	r3, r1
 800b3da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b3de:	7bfa      	ldrb	r2, [r7, #15]
 800b3e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b3e2:	7bfa      	ldrb	r2, [r7, #15]
 800b3e4:	6879      	ldr	r1, [r7, #4]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	00db      	lsls	r3, r3, #3
 800b3ea:	1a9b      	subs	r3, r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	440b      	add	r3, r1
 800b3f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b3f8:	7bfa      	ldrb	r2, [r7, #15]
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	1a9b      	subs	r3, r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	440b      	add	r3, r1
 800b406:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b40a:	2200      	movs	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b40e:	7bfa      	ldrb	r2, [r7, #15]
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	4613      	mov	r3, r2
 800b414:	00db      	lsls	r3, r3, #3
 800b416:	1a9b      	subs	r3, r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	440b      	add	r3, r1
 800b41c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b424:	7bfa      	ldrb	r2, [r7, #15]
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	4613      	mov	r3, r2
 800b42a:	00db      	lsls	r3, r3, #3
 800b42c:	1a9b      	subs	r3, r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	440b      	add	r3, r1
 800b432:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b436:	2200      	movs	r2, #0
 800b438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	3301      	adds	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
 800b440:	7bfa      	ldrb	r2, [r7, #15]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d3b5      	bcc.n	800b3b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	687e      	ldr	r6, [r7, #4]
 800b452:	466d      	mov	r5, sp
 800b454:	f106 0410 	add.w	r4, r6, #16
 800b458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b45a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b45e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b460:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b464:	e885 0003 	stmia.w	r5, {r0, r1}
 800b468:	1d33      	adds	r3, r6, #4
 800b46a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b46c:	6838      	ldr	r0, [r7, #0]
 800b46e:	f003 fcb5 	bl	800eddc <USB_DevInit>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d005      	beq.n	800b484 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e014      	b.n	800b4ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d102      	bne.n	800b4a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f80a 	bl	800b4b6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f003 fe45 	bl	800f136 <USB_DevDisconnect>

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4e8:	f043 0303 	orr.w	r3, r3, #3
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
	...

0800b500 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a04      	ldr	r2, [pc, #16]	; (800b51c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b50a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b50e:	6013      	str	r3, [r2, #0]
}
 800b510:	bf00      	nop
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	40007000 	.word	0x40007000

0800b520 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b524:	4b04      	ldr	r3, [pc, #16]	; (800b538 <HAL_PWREx_GetVoltageRange+0x18>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	40007000 	.word	0x40007000

0800b53c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b54a:	d130      	bne.n	800b5ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b54c:	4b23      	ldr	r3, [pc, #140]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b558:	d038      	beq.n	800b5cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b55a:	4b20      	ldr	r3, [pc, #128]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b562:	4a1e      	ldr	r2, [pc, #120]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b568:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2232      	movs	r2, #50	; 0x32
 800b570:	fb02 f303 	mul.w	r3, r2, r3
 800b574:	4a1b      	ldr	r2, [pc, #108]	; (800b5e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b576:	fba2 2303 	umull	r2, r3, r2, r3
 800b57a:	0c9b      	lsrs	r3, r3, #18
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b580:	e002      	b.n	800b588 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3b01      	subs	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b588:	4b14      	ldr	r3, [pc, #80]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b594:	d102      	bne.n	800b59c <HAL_PWREx_ControlVoltageScaling+0x60>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f2      	bne.n	800b582 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b59c:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5a8:	d110      	bne.n	800b5cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e00f      	b.n	800b5ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b5ae:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ba:	d007      	beq.n	800b5cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b5bc:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b5c4:	4a05      	ldr	r2, [pc, #20]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	40007000 	.word	0x40007000
 800b5e0:	2000018c 	.word	0x2000018c
 800b5e4:	431bde83 	.word	0x431bde83

0800b5e8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4a04      	ldr	r2, [pc, #16]	; (800b604 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b5f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5f6:	6053      	str	r3, [r2, #4]
}
 800b5f8:	bf00      	nop
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	40007000 	.word	0x40007000

0800b608 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b610:	f7fe f8c6 	bl	80097a0 <HAL_GetTick>
 800b614:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e063      	b.n	800b6e8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10b      	bne.n	800b644 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7f7 fe01 	bl	800323c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b63a:	f241 3188 	movw	r1, #5000	; 0x1388
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f858 	bl	800b6f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	3b01      	subs	r3, #1
 800b654:	021a      	lsls	r2, r3, #8
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	2120      	movs	r1, #32
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f850 	bl	800b710 <QSPI_WaitFlagStateUntilTimeout>
 800b670:	4603      	mov	r3, r0
 800b672:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b674:	7afb      	ldrb	r3, [r7, #11]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d131      	bne.n	800b6de <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b684:	f023 0310 	bic.w	r3, r3, #16
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	6852      	ldr	r2, [r2, #4]
 800b68c:	0611      	lsls	r1, r2, #24
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	68d2      	ldr	r2, [r2, #12]
 800b692:	4311      	orrs	r1, r2
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6812      	ldr	r2, [r2, #0]
 800b698:	430b      	orrs	r3, r1
 800b69a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <HAL_QSPI_Init+0xe8>)
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6912      	ldr	r2, [r2, #16]
 800b6aa:	0411      	lsls	r1, r2, #16
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	6952      	ldr	r2, [r2, #20]
 800b6b0:	4311      	orrs	r1, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6992      	ldr	r2, [r2, #24]
 800b6b6:	4311      	orrs	r1, r2
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	6812      	ldr	r2, [r2, #0]
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f042 0201 	orr.w	r2, r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800b6e6:	7afb      	ldrb	r3, [r7, #11]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	ffe0f8fe 	.word	0xffe0f8fe

0800b6f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	4613      	mov	r3, r2
 800b71e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b720:	e01a      	b.n	800b758 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b728:	d016      	beq.n	800b758 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b72a:	f7fe f839 	bl	80097a0 <HAL_GetTick>
 800b72e:	4602      	mov	r2, r0
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	429a      	cmp	r2, r3
 800b738:	d302      	bcc.n	800b740 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10b      	bne.n	800b758 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2204      	movs	r2, #4
 800b744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74c:	f043 0201 	orr.w	r2, r3, #1
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e00e      	b.n	800b776 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	4013      	ands	r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	bf14      	ite	ne
 800b766:	2301      	movne	r3, #1
 800b768:	2300      	moveq	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	429a      	cmp	r2, r3
 800b772:	d1d6      	bne.n	800b722 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
	...

0800b780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e3d4      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b792:	4ba1      	ldr	r3, [pc, #644]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f003 030c 	and.w	r3, r3, #12
 800b79a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b79c:	4b9e      	ldr	r3, [pc, #632]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0310 	and.w	r3, r3, #16
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 80e4 	beq.w	800b97c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d007      	beq.n	800b7ca <HAL_RCC_OscConfig+0x4a>
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	2b0c      	cmp	r3, #12
 800b7be:	f040 808b 	bne.w	800b8d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	f040 8087 	bne.w	800b8d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b7ca:	4b93      	ldr	r3, [pc, #588]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0302 	and.w	r3, r3, #2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d005      	beq.n	800b7e2 <HAL_RCC_OscConfig+0x62>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e3ac      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1a      	ldr	r2, [r3, #32]
 800b7e6:	4b8c      	ldr	r3, [pc, #560]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0308 	and.w	r3, r3, #8
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d004      	beq.n	800b7fc <HAL_RCC_OscConfig+0x7c>
 800b7f2:	4b89      	ldr	r3, [pc, #548]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7fa:	e005      	b.n	800b808 <HAL_RCC_OscConfig+0x88>
 800b7fc:	4b86      	ldr	r3, [pc, #536]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b7fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b802:	091b      	lsrs	r3, r3, #4
 800b804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b808:	4293      	cmp	r3, r2
 800b80a:	d223      	bcs.n	800b854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	4618      	mov	r0, r3
 800b812:	f000 fd3f 	bl	800c294 <RCC_SetFlashLatencyFromMSIRange>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e38d      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b820:	4b7d      	ldr	r3, [pc, #500]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a7c      	ldr	r2, [pc, #496]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b826:	f043 0308 	orr.w	r3, r3, #8
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	4b7a      	ldr	r3, [pc, #488]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	4977      	ldr	r1, [pc, #476]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b83a:	4313      	orrs	r3, r2
 800b83c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b83e:	4b76      	ldr	r3, [pc, #472]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	4972      	ldr	r1, [pc, #456]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b84e:	4313      	orrs	r3, r2
 800b850:	604b      	str	r3, [r1, #4]
 800b852:	e025      	b.n	800b8a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b854:	4b70      	ldr	r3, [pc, #448]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a6f      	ldr	r2, [pc, #444]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b85a:	f043 0308 	orr.w	r3, r3, #8
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	4b6d      	ldr	r3, [pc, #436]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	496a      	ldr	r1, [pc, #424]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b872:	4b69      	ldr	r3, [pc, #420]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	4965      	ldr	r1, [pc, #404]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b882:	4313      	orrs	r3, r2
 800b884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d109      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a1b      	ldr	r3, [r3, #32]
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fcff 	bl	800c294 <RCC_SetFlashLatencyFromMSIRange>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e34d      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b8a0:	f000 fc36 	bl	800c110 <HAL_RCC_GetSysClockFreq>
 800b8a4:	4601      	mov	r1, r0
 800b8a6:	4b5c      	ldr	r3, [pc, #368]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	091b      	lsrs	r3, r3, #4
 800b8ac:	f003 030f 	and.w	r3, r3, #15
 800b8b0:	4a5a      	ldr	r2, [pc, #360]	; (800ba1c <HAL_RCC_OscConfig+0x29c>)
 800b8b2:	5cd3      	ldrb	r3, [r2, r3]
 800b8b4:	f003 031f 	and.w	r3, r3, #31
 800b8b8:	fa21 f303 	lsr.w	r3, r1, r3
 800b8bc:	4a58      	ldr	r2, [pc, #352]	; (800ba20 <HAL_RCC_OscConfig+0x2a0>)
 800b8be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b8c0:	4b58      	ldr	r3, [pc, #352]	; (800ba24 <HAL_RCC_OscConfig+0x2a4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd ff1b 	bl	8009700 <HAL_InitTick>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d052      	beq.n	800b97a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	e331      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d032      	beq.n	800b946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b8e0:	4b4d      	ldr	r3, [pc, #308]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a4c      	ldr	r2, [pc, #304]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b8ec:	f7fd ff58 	bl	80097a0 <HAL_GetTick>
 800b8f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b8f2:	e008      	b.n	800b906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b8f4:	f7fd ff54 	bl	80097a0 <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d901      	bls.n	800b906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e31a      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b906:	4b44      	ldr	r3, [pc, #272]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0f0      	beq.n	800b8f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b912:	4b41      	ldr	r3, [pc, #260]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a40      	ldr	r2, [pc, #256]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b918:	f043 0308 	orr.w	r3, r3, #8
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	4b3e      	ldr	r3, [pc, #248]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	493b      	ldr	r1, [pc, #236]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b930:	4b39      	ldr	r3, [pc, #228]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	021b      	lsls	r3, r3, #8
 800b93e:	4936      	ldr	r1, [pc, #216]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b940:	4313      	orrs	r3, r2
 800b942:	604b      	str	r3, [r1, #4]
 800b944:	e01a      	b.n	800b97c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b946:	4b34      	ldr	r3, [pc, #208]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a33      	ldr	r2, [pc, #204]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b94c:	f023 0301 	bic.w	r3, r3, #1
 800b950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b952:	f7fd ff25 	bl	80097a0 <HAL_GetTick>
 800b956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b958:	e008      	b.n	800b96c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b95a:	f7fd ff21 	bl	80097a0 <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b02      	cmp	r3, #2
 800b966:	d901      	bls.n	800b96c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e2e7      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b96c:	4b2a      	ldr	r3, [pc, #168]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f0      	bne.n	800b95a <HAL_RCC_OscConfig+0x1da>
 800b978:	e000      	b.n	800b97c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b97a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	d074      	beq.n	800ba72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	2b08      	cmp	r3, #8
 800b98c:	d005      	beq.n	800b99a <HAL_RCC_OscConfig+0x21a>
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	2b0c      	cmp	r3, #12
 800b992:	d10e      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d10b      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b99a:	4b1f      	ldr	r3, [pc, #124]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d064      	beq.n	800ba70 <HAL_RCC_OscConfig+0x2f0>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d160      	bne.n	800ba70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e2c4      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ba:	d106      	bne.n	800b9ca <HAL_RCC_OscConfig+0x24a>
 800b9bc:	4b16      	ldr	r3, [pc, #88]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a15      	ldr	r2, [pc, #84]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	e01d      	b.n	800ba06 <HAL_RCC_OscConfig+0x286>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9d2:	d10c      	bne.n	800b9ee <HAL_RCC_OscConfig+0x26e>
 800b9d4:	4b10      	ldr	r3, [pc, #64]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a0f      	ldr	r2, [pc, #60]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	e00b      	b.n	800ba06 <HAL_RCC_OscConfig+0x286>
 800b9ee:	4b0a      	ldr	r3, [pc, #40]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a09      	ldr	r2, [pc, #36]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a06      	ldr	r2, [pc, #24]	; (800ba18 <HAL_RCC_OscConfig+0x298>)
 800ba00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d01c      	beq.n	800ba48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba0e:	f7fd fec7 	bl	80097a0 <HAL_GetTick>
 800ba12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba14:	e011      	b.n	800ba3a <HAL_RCC_OscConfig+0x2ba>
 800ba16:	bf00      	nop
 800ba18:	40021000 	.word	0x40021000
 800ba1c:	08014eb8 	.word	0x08014eb8
 800ba20:	2000018c 	.word	0x2000018c
 800ba24:	20000488 	.word	0x20000488
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba28:	f7fd feba 	bl	80097a0 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	2b64      	cmp	r3, #100	; 0x64
 800ba34:	d901      	bls.n	800ba3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e280      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba3a:	4baf      	ldr	r3, [pc, #700]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0f0      	beq.n	800ba28 <HAL_RCC_OscConfig+0x2a8>
 800ba46:	e014      	b.n	800ba72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba48:	f7fd feaa 	bl	80097a0 <HAL_GetTick>
 800ba4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba4e:	e008      	b.n	800ba62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba50:	f7fd fea6 	bl	80097a0 <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	2b64      	cmp	r3, #100	; 0x64
 800ba5c:	d901      	bls.n	800ba62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e26c      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba62:	4ba5      	ldr	r3, [pc, #660]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1f0      	bne.n	800ba50 <HAL_RCC_OscConfig+0x2d0>
 800ba6e:	e000      	b.n	800ba72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d060      	beq.n	800bb40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d005      	beq.n	800ba90 <HAL_RCC_OscConfig+0x310>
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2b0c      	cmp	r3, #12
 800ba88:	d119      	bne.n	800babe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d116      	bne.n	800babe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba90:	4b99      	ldr	r3, [pc, #612]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d005      	beq.n	800baa8 <HAL_RCC_OscConfig+0x328>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e249      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baa8:	4b93      	ldr	r3, [pc, #588]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	061b      	lsls	r3, r3, #24
 800bab6:	4990      	ldr	r1, [pc, #576]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bab8:	4313      	orrs	r3, r2
 800baba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800babc:	e040      	b.n	800bb40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d023      	beq.n	800bb0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bac6:	4b8c      	ldr	r3, [pc, #560]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a8b      	ldr	r2, [pc, #556]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bacc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bad2:	f7fd fe65 	bl	80097a0 <HAL_GetTick>
 800bad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bad8:	e008      	b.n	800baec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bada:	f7fd fe61 	bl	80097a0 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d901      	bls.n	800baec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e227      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800baec:	4b82      	ldr	r3, [pc, #520]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d0f0      	beq.n	800bada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baf8:	4b7f      	ldr	r3, [pc, #508]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	061b      	lsls	r3, r3, #24
 800bb06:	497c      	ldr	r1, [pc, #496]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	604b      	str	r3, [r1, #4]
 800bb0c:	e018      	b.n	800bb40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb0e:	4b7a      	ldr	r3, [pc, #488]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a79      	ldr	r2, [pc, #484]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb1a:	f7fd fe41 	bl	80097a0 <HAL_GetTick>
 800bb1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb20:	e008      	b.n	800bb34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb22:	f7fd fe3d 	bl	80097a0 <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d901      	bls.n	800bb34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e203      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb34:	4b70      	ldr	r3, [pc, #448]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f0      	bne.n	800bb22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 0308 	and.w	r3, r3, #8
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d03c      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01c      	beq.n	800bb8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb54:	4b68      	ldr	r3, [pc, #416]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb5a:	4a67      	ldr	r2, [pc, #412]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb5c:	f043 0301 	orr.w	r3, r3, #1
 800bb60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb64:	f7fd fe1c 	bl	80097a0 <HAL_GetTick>
 800bb68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb6a:	e008      	b.n	800bb7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb6c:	f7fd fe18 	bl	80097a0 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d901      	bls.n	800bb7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e1de      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb7e:	4b5e      	ldr	r3, [pc, #376]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0ef      	beq.n	800bb6c <HAL_RCC_OscConfig+0x3ec>
 800bb8c:	e01b      	b.n	800bbc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb8e:	4b5a      	ldr	r3, [pc, #360]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb94:	4a58      	ldr	r2, [pc, #352]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bb96:	f023 0301 	bic.w	r3, r3, #1
 800bb9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb9e:	f7fd fdff 	bl	80097a0 <HAL_GetTick>
 800bba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bba4:	e008      	b.n	800bbb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bba6:	f7fd fdfb 	bl	80097a0 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e1c1      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bbb8:	4b4f      	ldr	r3, [pc, #316]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bbba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbbe:	f003 0302 	and.w	r3, r3, #2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1ef      	bne.n	800bba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80a6 	beq.w	800bd20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bbd8:	4b47      	ldr	r3, [pc, #284]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bbda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10d      	bne.n	800bc00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbe4:	4b44      	ldr	r3, [pc, #272]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bbe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe8:	4a43      	ldr	r2, [pc, #268]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bbea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbee:	6593      	str	r3, [r2, #88]	; 0x58
 800bbf0:	4b41      	ldr	r3, [pc, #260]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bbf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbf8:	60bb      	str	r3, [r7, #8]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc00:	4b3e      	ldr	r3, [pc, #248]	; (800bcfc <HAL_RCC_OscConfig+0x57c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d118      	bne.n	800bc3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc0c:	4b3b      	ldr	r3, [pc, #236]	; (800bcfc <HAL_RCC_OscConfig+0x57c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a3a      	ldr	r2, [pc, #232]	; (800bcfc <HAL_RCC_OscConfig+0x57c>)
 800bc12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc18:	f7fd fdc2 	bl	80097a0 <HAL_GetTick>
 800bc1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc20:	f7fd fdbe 	bl	80097a0 <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e184      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc32:	4b32      	ldr	r3, [pc, #200]	; (800bcfc <HAL_RCC_OscConfig+0x57c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d0f0      	beq.n	800bc20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d108      	bne.n	800bc58 <HAL_RCC_OscConfig+0x4d8>
 800bc46:	4b2c      	ldr	r3, [pc, #176]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc4c:	4a2a      	ldr	r2, [pc, #168]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc4e:	f043 0301 	orr.w	r3, r3, #1
 800bc52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc56:	e024      	b.n	800bca2 <HAL_RCC_OscConfig+0x522>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	2b05      	cmp	r3, #5
 800bc5e:	d110      	bne.n	800bc82 <HAL_RCC_OscConfig+0x502>
 800bc60:	4b25      	ldr	r3, [pc, #148]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc66:	4a24      	ldr	r2, [pc, #144]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc68:	f043 0304 	orr.w	r3, r3, #4
 800bc6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc70:	4b21      	ldr	r3, [pc, #132]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc76:	4a20      	ldr	r2, [pc, #128]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc78:	f043 0301 	orr.w	r3, r3, #1
 800bc7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc80:	e00f      	b.n	800bca2 <HAL_RCC_OscConfig+0x522>
 800bc82:	4b1d      	ldr	r3, [pc, #116]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc88:	4a1b      	ldr	r2, [pc, #108]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc8a:	f023 0301 	bic.w	r3, r3, #1
 800bc8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc92:	4b19      	ldr	r3, [pc, #100]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc98:	4a17      	ldr	r2, [pc, #92]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bc9a:	f023 0304 	bic.w	r3, r3, #4
 800bc9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d016      	beq.n	800bcd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcaa:	f7fd fd79 	bl	80097a0 <HAL_GetTick>
 800bcae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcb0:	e00a      	b.n	800bcc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcb2:	f7fd fd75 	bl	80097a0 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d901      	bls.n	800bcc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	e139      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcc8:	4b0b      	ldr	r3, [pc, #44]	; (800bcf8 <HAL_RCC_OscConfig+0x578>)
 800bcca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcce:	f003 0302 	and.w	r3, r3, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0ed      	beq.n	800bcb2 <HAL_RCC_OscConfig+0x532>
 800bcd6:	e01a      	b.n	800bd0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcd8:	f7fd fd62 	bl	80097a0 <HAL_GetTick>
 800bcdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bcde:	e00f      	b.n	800bd00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bce0:	f7fd fd5e 	bl	80097a0 <HAL_GetTick>
 800bce4:	4602      	mov	r2, r0
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d906      	bls.n	800bd00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e122      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
 800bcf6:	bf00      	nop
 800bcf8:	40021000 	.word	0x40021000
 800bcfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd00:	4b90      	ldr	r3, [pc, #576]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1e8      	bne.n	800bce0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd0e:	7ffb      	ldrb	r3, [r7, #31]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d105      	bne.n	800bd20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd14:	4b8b      	ldr	r3, [pc, #556]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bd16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd18:	4a8a      	ldr	r2, [pc, #552]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bd1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 8108 	beq.w	800bf3a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	f040 80d0 	bne.w	800bed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bd34:	4b83      	ldr	r3, [pc, #524]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f003 0203 	and.w	r2, r3, #3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d130      	bne.n	800bdaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd52:	3b01      	subs	r3, #1
 800bd54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d127      	bne.n	800bdaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d11f      	bne.n	800bdaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd74:	2a07      	cmp	r2, #7
 800bd76:	bf14      	ite	ne
 800bd78:	2201      	movne	r2, #1
 800bd7a:	2200      	moveq	r2, #0
 800bd7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d113      	bne.n	800bdaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8c:	085b      	lsrs	r3, r3, #1
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d109      	bne.n	800bdaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda0:	085b      	lsrs	r3, r3, #1
 800bda2:	3b01      	subs	r3, #1
 800bda4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d06e      	beq.n	800be88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b0c      	cmp	r3, #12
 800bdae:	d069      	beq.n	800be84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bdb0:	4b64      	ldr	r3, [pc, #400]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d105      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800bdbc:	4b61      	ldr	r3, [pc, #388]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e0b7      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bdcc:	4b5d      	ldr	r3, [pc, #372]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a5c      	ldr	r2, [pc, #368]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bdd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bdd8:	f7fd fce2 	bl	80097a0 <HAL_GetTick>
 800bddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdde:	e008      	b.n	800bdf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bde0:	f7fd fcde 	bl	80097a0 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d901      	bls.n	800bdf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e0a4      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdf2:	4b54      	ldr	r3, [pc, #336]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1f0      	bne.n	800bde0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdfe:	4b51      	ldr	r3, [pc, #324]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	4b51      	ldr	r3, [pc, #324]	; (800bf48 <HAL_RCC_OscConfig+0x7c8>)
 800be04:	4013      	ands	r3, r2
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be0e:	3a01      	subs	r2, #1
 800be10:	0112      	lsls	r2, r2, #4
 800be12:	4311      	orrs	r1, r2
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be18:	0212      	lsls	r2, r2, #8
 800be1a:	4311      	orrs	r1, r2
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800be20:	0852      	lsrs	r2, r2, #1
 800be22:	3a01      	subs	r2, #1
 800be24:	0552      	lsls	r2, r2, #21
 800be26:	4311      	orrs	r1, r2
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800be2c:	0852      	lsrs	r2, r2, #1
 800be2e:	3a01      	subs	r2, #1
 800be30:	0652      	lsls	r2, r2, #25
 800be32:	4311      	orrs	r1, r2
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be38:	0912      	lsrs	r2, r2, #4
 800be3a:	0452      	lsls	r2, r2, #17
 800be3c:	430a      	orrs	r2, r1
 800be3e:	4941      	ldr	r1, [pc, #260]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be40:	4313      	orrs	r3, r2
 800be42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800be44:	4b3f      	ldr	r3, [pc, #252]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a3e      	ldr	r2, [pc, #248]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800be50:	4b3c      	ldr	r3, [pc, #240]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	4a3b      	ldr	r2, [pc, #236]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800be5c:	f7fd fca0 	bl	80097a0 <HAL_GetTick>
 800be60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be62:	e008      	b.n	800be76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be64:	f7fd fc9c 	bl	80097a0 <HAL_GetTick>
 800be68:	4602      	mov	r2, r0
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d901      	bls.n	800be76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e062      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be76:	4b33      	ldr	r3, [pc, #204]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0f0      	beq.n	800be64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800be82:	e05a      	b.n	800bf3a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e059      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be88:	4b2e      	ldr	r3, [pc, #184]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d152      	bne.n	800bf3a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800be94:	4b2b      	ldr	r3, [pc, #172]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a2a      	ldr	r2, [pc, #168]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800be9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bea0:	4b28      	ldr	r3, [pc, #160]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	4a27      	ldr	r2, [pc, #156]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800beaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800beac:	f7fd fc78 	bl	80097a0 <HAL_GetTick>
 800beb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800beb2:	e008      	b.n	800bec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800beb4:	f7fd fc74 	bl	80097a0 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e03a      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bec6:	4b1f      	ldr	r3, [pc, #124]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0f0      	beq.n	800beb4 <HAL_RCC_OscConfig+0x734>
 800bed2:	e032      	b.n	800bf3a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	2b0c      	cmp	r3, #12
 800bed8:	d02d      	beq.n	800bf36 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800beda:	4b1a      	ldr	r3, [pc, #104]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a19      	ldr	r2, [pc, #100]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bee4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800bee6:	4b17      	ldr	r3, [pc, #92]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d105      	bne.n	800befe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bef2:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	4a13      	ldr	r2, [pc, #76]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800befe:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	4a10      	ldr	r2, [pc, #64]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bf04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bf08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf0e:	f7fd fc47 	bl	80097a0 <HAL_GetTick>
 800bf12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf14:	e008      	b.n	800bf28 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf16:	f7fd fc43 	bl	80097a0 <HAL_GetTick>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d901      	bls.n	800bf28 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e009      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <HAL_RCC_OscConfig+0x7c4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1f0      	bne.n	800bf16 <HAL_RCC_OscConfig+0x796>
 800bf34:	e001      	b.n	800bf3a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3720      	adds	r7, #32
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	40021000 	.word	0x40021000
 800bf48:	f99d808c 	.word	0xf99d808c

0800bf4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e0c8      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf60:	4b66      	ldr	r3, [pc, #408]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0307 	and.w	r3, r3, #7
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d910      	bls.n	800bf90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf6e:	4b63      	ldr	r3, [pc, #396]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f023 0207 	bic.w	r2, r3, #7
 800bf76:	4961      	ldr	r1, [pc, #388]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf7e:	4b5f      	ldr	r3, [pc, #380]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0307 	and.w	r3, r3, #7
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d001      	beq.n	800bf90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e0b0      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d04c      	beq.n	800c036 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d107      	bne.n	800bfb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bfa4:	4b56      	ldr	r3, [pc, #344]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d121      	bne.n	800bff4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e09e      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d107      	bne.n	800bfcc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfbc:	4b50      	ldr	r3, [pc, #320]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d115      	bne.n	800bff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e092      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d107      	bne.n	800bfe4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bfd4:	4b4a      	ldr	r3, [pc, #296]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e086      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bfe4:	4b46      	ldr	r3, [pc, #280]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e07e      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bff4:	4b42      	ldr	r3, [pc, #264]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f023 0203 	bic.w	r2, r3, #3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	493f      	ldr	r1, [pc, #252]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c002:	4313      	orrs	r3, r2
 800c004:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c006:	f7fd fbcb 	bl	80097a0 <HAL_GetTick>
 800c00a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c00c:	e00a      	b.n	800c024 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c00e:	f7fd fbc7 	bl	80097a0 <HAL_GetTick>
 800c012:	4602      	mov	r2, r0
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	f241 3288 	movw	r2, #5000	; 0x1388
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d901      	bls.n	800c024 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c020:	2303      	movs	r3, #3
 800c022:	e066      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c024:	4b36      	ldr	r3, [pc, #216]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f003 020c 	and.w	r2, r3, #12
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	429a      	cmp	r2, r3
 800c034:	d1eb      	bne.n	800c00e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d008      	beq.n	800c054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c042:	4b2f      	ldr	r3, [pc, #188]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	492c      	ldr	r1, [pc, #176]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c050:	4313      	orrs	r3, r2
 800c052:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c054:	4b29      	ldr	r3, [pc, #164]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0307 	and.w	r3, r3, #7
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d210      	bcs.n	800c084 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c062:	4b26      	ldr	r3, [pc, #152]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f023 0207 	bic.w	r2, r3, #7
 800c06a:	4924      	ldr	r1, [pc, #144]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	4313      	orrs	r3, r2
 800c070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c072:	4b22      	ldr	r3, [pc, #136]	; (800c0fc <HAL_RCC_ClockConfig+0x1b0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0307 	and.w	r3, r3, #7
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d001      	beq.n	800c084 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e036      	b.n	800c0f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0304 	and.w	r3, r3, #4
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d008      	beq.n	800c0a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c090:	4b1b      	ldr	r3, [pc, #108]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	4918      	ldr	r1, [pc, #96]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d009      	beq.n	800c0c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c0ae:	4b14      	ldr	r3, [pc, #80]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	4910      	ldr	r1, [pc, #64]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c0c2:	f000 f825 	bl	800c110 <HAL_RCC_GetSysClockFreq>
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <HAL_RCC_ClockConfig+0x1b4>)
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	091b      	lsrs	r3, r3, #4
 800c0ce:	f003 030f 	and.w	r3, r3, #15
 800c0d2:	4a0c      	ldr	r2, [pc, #48]	; (800c104 <HAL_RCC_ClockConfig+0x1b8>)
 800c0d4:	5cd3      	ldrb	r3, [r2, r3]
 800c0d6:	f003 031f 	and.w	r3, r3, #31
 800c0da:	fa21 f303 	lsr.w	r3, r1, r3
 800c0de:	4a0a      	ldr	r2, [pc, #40]	; (800c108 <HAL_RCC_ClockConfig+0x1bc>)
 800c0e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	; (800c10c <HAL_RCC_ClockConfig+0x1c0>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd fb0a 	bl	8009700 <HAL_InitTick>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	72fb      	strb	r3, [r7, #11]

  return status;
 800c0f0:	7afb      	ldrb	r3, [r7, #11]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	40022000 	.word	0x40022000
 800c100:	40021000 	.word	0x40021000
 800c104:	08014eb8 	.word	0x08014eb8
 800c108:	2000018c 	.word	0x2000018c
 800c10c:	20000488 	.word	0x20000488

0800c110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c110:	b480      	push	{r7}
 800c112:	b089      	sub	sp, #36	; 0x24
 800c114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c116:	2300      	movs	r3, #0
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	2300      	movs	r3, #0
 800c11c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c11e:	4b3d      	ldr	r3, [pc, #244]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f003 030c 	and.w	r3, r3, #12
 800c126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c128:	4b3a      	ldr	r3, [pc, #232]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f003 0303 	and.w	r3, r3, #3
 800c130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d005      	beq.n	800c144 <HAL_RCC_GetSysClockFreq+0x34>
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	2b0c      	cmp	r3, #12
 800c13c:	d121      	bne.n	800c182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d11e      	bne.n	800c182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c144:	4b33      	ldr	r3, [pc, #204]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 0308 	and.w	r3, r3, #8
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d107      	bne.n	800c160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c150:	4b30      	ldr	r3, [pc, #192]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	61fb      	str	r3, [r7, #28]
 800c15e:	e005      	b.n	800c16c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c160:	4b2c      	ldr	r3, [pc, #176]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	091b      	lsrs	r3, r3, #4
 800c166:	f003 030f 	and.w	r3, r3, #15
 800c16a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c16c:	4a2a      	ldr	r2, [pc, #168]	; (800c218 <HAL_RCC_GetSysClockFreq+0x108>)
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10d      	bne.n	800c198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c180:	e00a      	b.n	800c198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	2b04      	cmp	r3, #4
 800c186:	d102      	bne.n	800c18e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c188:	4b24      	ldr	r3, [pc, #144]	; (800c21c <HAL_RCC_GetSysClockFreq+0x10c>)
 800c18a:	61bb      	str	r3, [r7, #24]
 800c18c:	e004      	b.n	800c198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	2b08      	cmp	r3, #8
 800c192:	d101      	bne.n	800c198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c194:	4b22      	ldr	r3, [pc, #136]	; (800c220 <HAL_RCC_GetSysClockFreq+0x110>)
 800c196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	2b0c      	cmp	r3, #12
 800c19c:	d133      	bne.n	800c206 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c19e:	4b1d      	ldr	r3, [pc, #116]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	f003 0303 	and.w	r3, r3, #3
 800c1a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d002      	beq.n	800c1b4 <HAL_RCC_GetSysClockFreq+0xa4>
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d003      	beq.n	800c1ba <HAL_RCC_GetSysClockFreq+0xaa>
 800c1b2:	e005      	b.n	800c1c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c1b4:	4b19      	ldr	r3, [pc, #100]	; (800c21c <HAL_RCC_GetSysClockFreq+0x10c>)
 800c1b6:	617b      	str	r3, [r7, #20]
      break;
 800c1b8:	e005      	b.n	800c1c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c1ba:	4b19      	ldr	r3, [pc, #100]	; (800c220 <HAL_RCC_GetSysClockFreq+0x110>)
 800c1bc:	617b      	str	r3, [r7, #20]
      break;
 800c1be:	e002      	b.n	800c1c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	617b      	str	r3, [r7, #20]
      break;
 800c1c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1c6:	4b13      	ldr	r3, [pc, #76]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	091b      	lsrs	r3, r3, #4
 800c1cc:	f003 0307 	and.w	r3, r3, #7
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c1d4:	4b0f      	ldr	r3, [pc, #60]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	0a1b      	lsrs	r3, r3, #8
 800c1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	fb02 f203 	mul.w	r2, r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c1ec:	4b09      	ldr	r3, [pc, #36]	; (800c214 <HAL_RCC_GetSysClockFreq+0x104>)
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	0e5b      	lsrs	r3, r3, #25
 800c1f2:	f003 0303 	and.w	r3, r3, #3
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	fbb2 f3f3 	udiv	r3, r2, r3
 800c204:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c206:	69bb      	ldr	r3, [r7, #24]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3724      	adds	r7, #36	; 0x24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	40021000 	.word	0x40021000
 800c218:	08014ed0 	.word	0x08014ed0
 800c21c:	00f42400 	.word	0x00f42400
 800c220:	007a1200 	.word	0x007a1200

0800c224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c228:	4b03      	ldr	r3, [pc, #12]	; (800c238 <HAL_RCC_GetHCLKFreq+0x14>)
 800c22a:	681b      	ldr	r3, [r3, #0]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	2000018c 	.word	0x2000018c

0800c23c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c240:	f7ff fff0 	bl	800c224 <HAL_RCC_GetHCLKFreq>
 800c244:	4601      	mov	r1, r0
 800c246:	4b06      	ldr	r3, [pc, #24]	; (800c260 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	0a1b      	lsrs	r3, r3, #8
 800c24c:	f003 0307 	and.w	r3, r3, #7
 800c250:	4a04      	ldr	r2, [pc, #16]	; (800c264 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c252:	5cd3      	ldrb	r3, [r2, r3]
 800c254:	f003 031f 	and.w	r3, r3, #31
 800c258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	40021000 	.word	0x40021000
 800c264:	08014ec8 	.word	0x08014ec8

0800c268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c26c:	f7ff ffda 	bl	800c224 <HAL_RCC_GetHCLKFreq>
 800c270:	4601      	mov	r1, r0
 800c272:	4b06      	ldr	r3, [pc, #24]	; (800c28c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	0adb      	lsrs	r3, r3, #11
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	4a04      	ldr	r2, [pc, #16]	; (800c290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c27e:	5cd3      	ldrb	r3, [r2, r3]
 800c280:	f003 031f 	and.w	r3, r3, #31
 800c284:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c288:	4618      	mov	r0, r3
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	40021000 	.word	0x40021000
 800c290:	08014ec8 	.word	0x08014ec8

0800c294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c29c:	2300      	movs	r3, #0
 800c29e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c2a0:	4b2a      	ldr	r3, [pc, #168]	; (800c34c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c2ac:	f7ff f938 	bl	800b520 <HAL_PWREx_GetVoltageRange>
 800c2b0:	6178      	str	r0, [r7, #20]
 800c2b2:	e014      	b.n	800c2de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c2b4:	4b25      	ldr	r3, [pc, #148]	; (800c34c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b8:	4a24      	ldr	r2, [pc, #144]	; (800c34c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2be:	6593      	str	r3, [r2, #88]	; 0x58
 800c2c0:	4b22      	ldr	r3, [pc, #136]	; (800c34c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c2cc:	f7ff f928 	bl	800b520 <HAL_PWREx_GetVoltageRange>
 800c2d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c2d2:	4b1e      	ldr	r3, [pc, #120]	; (800c34c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2d6:	4a1d      	ldr	r2, [pc, #116]	; (800c34c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2e4:	d10b      	bne.n	800c2fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b80      	cmp	r3, #128	; 0x80
 800c2ea:	d919      	bls.n	800c320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2ba0      	cmp	r3, #160	; 0xa0
 800c2f0:	d902      	bls.n	800c2f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	613b      	str	r3, [r7, #16]
 800c2f6:	e013      	b.n	800c320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	613b      	str	r3, [r7, #16]
 800c2fc:	e010      	b.n	800c320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b80      	cmp	r3, #128	; 0x80
 800c302:	d902      	bls.n	800c30a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c304:	2303      	movs	r3, #3
 800c306:	613b      	str	r3, [r7, #16]
 800c308:	e00a      	b.n	800c320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b80      	cmp	r3, #128	; 0x80
 800c30e:	d102      	bne.n	800c316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c310:	2302      	movs	r3, #2
 800c312:	613b      	str	r3, [r7, #16]
 800c314:	e004      	b.n	800c320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b70      	cmp	r3, #112	; 0x70
 800c31a:	d101      	bne.n	800c320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c31c:	2301      	movs	r3, #1
 800c31e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f023 0207 	bic.w	r2, r3, #7
 800c328:	4909      	ldr	r1, [pc, #36]	; (800c350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d001      	beq.n	800c342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e000      	b.n	800c344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	40021000 	.word	0x40021000
 800c350:	40022000 	.word	0x40022000

0800c354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c35c:	2300      	movs	r3, #0
 800c35e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c360:	2300      	movs	r3, #0
 800c362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d03f      	beq.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c378:	d01c      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800c37a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c37e:	d802      	bhi.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00e      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c384:	e01f      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800c386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c38a:	d003      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800c38c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c390:	d01c      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800c392:	e018      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c394:	4b85      	ldr	r3, [pc, #532]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	4a84      	ldr	r2, [pc, #528]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c39a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c39e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c3a0:	e015      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 fac9 	bl	800c940 <RCCEx_PLLSAI1_Config>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c3b2:	e00c      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3320      	adds	r3, #32
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fbb0 	bl	800cb20 <RCCEx_PLLSAI2_Config>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c3c4:	e003      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	74fb      	strb	r3, [r7, #19]
      break;
 800c3ca:	e000      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800c3cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3ce:	7cfb      	ldrb	r3, [r7, #19]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10b      	bne.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3d4:	4b75      	ldr	r3, [pc, #468]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3e2:	4972      	ldr	r1, [pc, #456]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c3ea:	e001      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ec:	7cfb      	ldrb	r3, [r7, #19]
 800c3ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d03f      	beq.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c404:	d01c      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800c406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c40a:	d802      	bhi.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00e      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xda>
 800c410:	e01f      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c416:	d003      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800c418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c41c:	d01c      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800c41e:	e018      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c420:	4b62      	ldr	r3, [pc, #392]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	4a61      	ldr	r2, [pc, #388]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c42a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c42c:	e015      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	3304      	adds	r3, #4
 800c432:	2100      	movs	r1, #0
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fa83 	bl	800c940 <RCCEx_PLLSAI1_Config>
 800c43a:	4603      	mov	r3, r0
 800c43c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c43e:	e00c      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3320      	adds	r3, #32
 800c444:	2100      	movs	r1, #0
 800c446:	4618      	mov	r0, r3
 800c448:	f000 fb6a 	bl	800cb20 <RCCEx_PLLSAI2_Config>
 800c44c:	4603      	mov	r3, r0
 800c44e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c450:	e003      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	74fb      	strb	r3, [r7, #19]
      break;
 800c456:	e000      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c45a:	7cfb      	ldrb	r3, [r7, #19]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10b      	bne.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c460:	4b52      	ldr	r3, [pc, #328]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c466:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c46e:	494f      	ldr	r1, [pc, #316]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c470:	4313      	orrs	r3, r2
 800c472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c476:	e001      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c478:	7cfb      	ldrb	r3, [r7, #19]
 800c47a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 80a0 	beq.w	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c48a:	2300      	movs	r3, #0
 800c48c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c48e:	4b47      	ldr	r3, [pc, #284]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00d      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4a4:	4b41      	ldr	r3, [pc, #260]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a8:	4a40      	ldr	r2, [pc, #256]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ae:	6593      	str	r3, [r2, #88]	; 0x58
 800c4b0:	4b3e      	ldr	r3, [pc, #248]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4b8:	60bb      	str	r3, [r7, #8]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4c0:	4b3b      	ldr	r3, [pc, #236]	; (800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a3a      	ldr	r2, [pc, #232]	; (800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800c4c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c4cc:	f7fd f968 	bl	80097a0 <HAL_GetTick>
 800c4d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c4d2:	e009      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4d4:	f7fd f964 	bl	80097a0 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d902      	bls.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	74fb      	strb	r3, [r7, #19]
        break;
 800c4e6:	e005      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c4e8:	4b31      	ldr	r3, [pc, #196]	; (800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d0ef      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800c4f4:	7cfb      	ldrb	r3, [r7, #19]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d15c      	bne.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c4fa:	4b2c      	ldr	r3, [pc, #176]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d01f      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	429a      	cmp	r2, r3
 800c516:	d019      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c518:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c524:	4b21      	ldr	r3, [pc, #132]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c52a:	4a20      	ldr	r2, [pc, #128]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c52c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c534:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c53a:	4a1c      	ldr	r2, [pc, #112]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c53c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c544:	4a19      	ldr	r2, [pc, #100]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d016      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c556:	f7fd f923 	bl	80097a0 <HAL_GetTick>
 800c55a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c55c:	e00b      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c55e:	f7fd f91f 	bl	80097a0 <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	f241 3288 	movw	r2, #5000	; 0x1388
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d902      	bls.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	74fb      	strb	r3, [r7, #19]
            break;
 800c574:	e006      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c57c:	f003 0302 	and.w	r3, r3, #2
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0ec      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800c584:	7cfb      	ldrb	r3, [r7, #19]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10c      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c58a:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c59a:	4904      	ldr	r1, [pc, #16]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c5a2:	e009      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c5a4:	7cfb      	ldrb	r3, [r7, #19]
 800c5a6:	74bb      	strb	r3, [r7, #18]
 800c5a8:	e006      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800c5aa:	bf00      	nop
 800c5ac:	40021000 	.word	0x40021000
 800c5b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b4:	7cfb      	ldrb	r3, [r7, #19]
 800c5b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c5b8:	7c7b      	ldrb	r3, [r7, #17]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d105      	bne.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5be:	4b9e      	ldr	r3, [pc, #632]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c2:	4a9d      	ldr	r2, [pc, #628]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c5c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c5d6:	4b98      	ldr	r3, [pc, #608]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5dc:	f023 0203 	bic.w	r2, r3, #3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e4:	4994      	ldr	r1, [pc, #592]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00a      	beq.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c5f8:	4b8f      	ldr	r3, [pc, #572]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5fe:	f023 020c 	bic.w	r2, r3, #12
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c606:	498c      	ldr	r1, [pc, #560]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c608:	4313      	orrs	r3, r2
 800c60a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0304 	and.w	r3, r3, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c61a:	4b87      	ldr	r3, [pc, #540]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c620:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c628:	4983      	ldr	r1, [pc, #524]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c62a:	4313      	orrs	r3, r2
 800c62c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 0308 	and.w	r3, r3, #8
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00a      	beq.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c63c:	4b7e      	ldr	r3, [pc, #504]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c64a:	497b      	ldr	r1, [pc, #492]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c64c:	4313      	orrs	r3, r2
 800c64e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0310 	and.w	r3, r3, #16
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c65e:	4b76      	ldr	r3, [pc, #472]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c66c:	4972      	ldr	r1, [pc, #456]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c66e:	4313      	orrs	r3, r2
 800c670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 0320 	and.w	r3, r3, #32
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c680:	4b6d      	ldr	r3, [pc, #436]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68e:	496a      	ldr	r1, [pc, #424]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c690:	4313      	orrs	r3, r2
 800c692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00a      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6a2:	4b65      	ldr	r3, [pc, #404]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b0:	4961      	ldr	r1, [pc, #388]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00a      	beq.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c6c4:	4b5c      	ldr	r3, [pc, #368]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6d2:	4959      	ldr	r1, [pc, #356]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00a      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6e6:	4b54      	ldr	r3, [pc, #336]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f4:	4950      	ldr	r1, [pc, #320]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00a      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c708:	4b4b      	ldr	r3, [pc, #300]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c70e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c716:	4948      	ldr	r1, [pc, #288]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c718:	4313      	orrs	r3, r2
 800c71a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c72a:	4b43      	ldr	r3, [pc, #268]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c738:	493f      	ldr	r1, [pc, #252]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c73a:	4313      	orrs	r3, r2
 800c73c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d028      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c74c:	4b3a      	ldr	r3, [pc, #232]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c75a:	4937      	ldr	r1, [pc, #220]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c75c:	4313      	orrs	r3, r2
 800c75e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c76a:	d106      	bne.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c76c:	4b32      	ldr	r3, [pc, #200]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	4a31      	ldr	r2, [pc, #196]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c776:	60d3      	str	r3, [r2, #12]
 800c778:	e011      	b.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c77e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c782:	d10c      	bne.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3304      	adds	r3, #4
 800c788:	2101      	movs	r1, #1
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f8d8 	bl	800c940 <RCCEx_PLLSAI1_Config>
 800c790:	4603      	mov	r3, r0
 800c792:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c794:	7cfb      	ldrb	r3, [r7, #19]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800c79a:	7cfb      	ldrb	r3, [r7, #19]
 800c79c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d028      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c7aa:	4b23      	ldr	r3, [pc, #140]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7b8:	491f      	ldr	r1, [pc, #124]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7c8:	d106      	bne.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c7ca:	4b1b      	ldr	r3, [pc, #108]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	4a1a      	ldr	r2, [pc, #104]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7d4:	60d3      	str	r3, [r2, #12]
 800c7d6:	e011      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7e0:	d10c      	bne.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 f8a9 	bl	800c940 <RCCEx_PLLSAI1_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c7f2:	7cfb      	ldrb	r3, [r7, #19]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800c7f8:	7cfb      	ldrb	r3, [r7, #19]
 800c7fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d02b      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c808:	4b0b      	ldr	r3, [pc, #44]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c80e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c816:	4908      	ldr	r1, [pc, #32]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c818:	4313      	orrs	r3, r2
 800c81a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c826:	d109      	bne.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c828:	4b03      	ldr	r3, [pc, #12]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	4a02      	ldr	r2, [pc, #8]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c82e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c832:	60d3      	str	r3, [r2, #12]
 800c834:	e014      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800c836:	bf00      	nop
 800c838:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c844:	d10c      	bne.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	3304      	adds	r3, #4
 800c84a:	2101      	movs	r1, #1
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 f877 	bl	800c940 <RCCEx_PLLSAI1_Config>
 800c852:	4603      	mov	r3, r0
 800c854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c856:	7cfb      	ldrb	r3, [r7, #19]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800c85c:	7cfb      	ldrb	r3, [r7, #19]
 800c85e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d02f      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c86c:	4b2b      	ldr	r3, [pc, #172]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c87a:	4928      	ldr	r1, [pc, #160]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c87c:	4313      	orrs	r3, r2
 800c87e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c88a:	d10d      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	3304      	adds	r3, #4
 800c890:	2102      	movs	r1, #2
 800c892:	4618      	mov	r0, r3
 800c894:	f000 f854 	bl	800c940 <RCCEx_PLLSAI1_Config>
 800c898:	4603      	mov	r3, r0
 800c89a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c89c:	7cfb      	ldrb	r3, [r7, #19]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d014      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800c8a2:	7cfb      	ldrb	r3, [r7, #19]
 800c8a4:	74bb      	strb	r3, [r7, #18]
 800c8a6:	e011      	b.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8b0:	d10c      	bne.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3320      	adds	r3, #32
 800c8b6:	2102      	movs	r1, #2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 f931 	bl	800cb20 <RCCEx_PLLSAI2_Config>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c8c2:	7cfb      	ldrb	r3, [r7, #19]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800c8c8:	7cfb      	ldrb	r3, [r7, #19]
 800c8ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00a      	beq.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c8d8:	4b10      	ldr	r3, [pc, #64]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8e6:	490d      	ldr	r1, [pc, #52]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00b      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c8fa:	4b08      	ldr	r3, [pc, #32]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c90a:	4904      	ldr	r1, [pc, #16]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c90c:	4313      	orrs	r3, r2
 800c90e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c912:	7cbb      	ldrb	r3, [r7, #18]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	40021000 	.word	0x40021000

0800c920 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a04      	ldr	r2, [pc, #16]	; (800c93c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c92a:	f043 0304 	orr.w	r3, r3, #4
 800c92e:	6013      	str	r3, [r2, #0]
}
 800c930:	bf00      	nop
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	40021000 	.word	0x40021000

0800c940 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c94e:	4b73      	ldr	r3, [pc, #460]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	f003 0303 	and.w	r3, r3, #3
 800c956:	2b00      	cmp	r3, #0
 800c958:	d018      	beq.n	800c98c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c95a:	4b70      	ldr	r3, [pc, #448]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	f003 0203 	and.w	r2, r3, #3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d10d      	bne.n	800c986 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
       ||
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d009      	beq.n	800c986 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c972:	4b6a      	ldr	r3, [pc, #424]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	091b      	lsrs	r3, r3, #4
 800c978:	f003 0307 	and.w	r3, r3, #7
 800c97c:	1c5a      	adds	r2, r3, #1
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
       ||
 800c982:	429a      	cmp	r2, r3
 800c984:	d044      	beq.n	800ca10 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	73fb      	strb	r3, [r7, #15]
 800c98a:	e041      	b.n	800ca10 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b02      	cmp	r3, #2
 800c992:	d00c      	beq.n	800c9ae <RCCEx_PLLSAI1_Config+0x6e>
 800c994:	2b03      	cmp	r3, #3
 800c996:	d013      	beq.n	800c9c0 <RCCEx_PLLSAI1_Config+0x80>
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d120      	bne.n	800c9de <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c99c:	4b5f      	ldr	r3, [pc, #380]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0302 	and.w	r3, r3, #2
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11d      	bne.n	800c9e4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9ac:	e01a      	b.n	800c9e4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c9ae:	4b5b      	ldr	r3, [pc, #364]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d116      	bne.n	800c9e8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9be:	e013      	b.n	800c9e8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c9c0:	4b56      	ldr	r3, [pc, #344]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10f      	bne.n	800c9ec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c9cc:	4b53      	ldr	r3, [pc, #332]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d109      	bne.n	800c9ec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9dc:	e006      	b.n	800c9ec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e2:	e004      	b.n	800c9ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 800c9e4:	bf00      	nop
 800c9e6:	e002      	b.n	800c9ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 800c9e8:	bf00      	nop
 800c9ea:	e000      	b.n	800c9ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 800c9ec:	bf00      	nop
    }

    if(status == HAL_OK)
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10d      	bne.n	800ca10 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c9f4:	4b49      	ldr	r3, [pc, #292]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6819      	ldr	r1, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	3b01      	subs	r3, #1
 800ca06:	011b      	lsls	r3, r3, #4
 800ca08:	430b      	orrs	r3, r1
 800ca0a:	4944      	ldr	r1, [pc, #272]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d17d      	bne.n	800cb12 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ca16:	4b41      	ldr	r3, [pc, #260]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a40      	ldr	r2, [pc, #256]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca22:	f7fc febd 	bl	80097a0 <HAL_GetTick>
 800ca26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ca28:	e009      	b.n	800ca3e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ca2a:	f7fc feb9 	bl	80097a0 <HAL_GetTick>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d902      	bls.n	800ca3e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	73fb      	strb	r3, [r7, #15]
        break;
 800ca3c:	e005      	b.n	800ca4a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ca3e:	4b37      	ldr	r3, [pc, #220]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1ef      	bne.n	800ca2a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d160      	bne.n	800cb12 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d111      	bne.n	800ca7a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ca56:	4b31      	ldr	r3, [pc, #196]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ca5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	6892      	ldr	r2, [r2, #8]
 800ca66:	0211      	lsls	r1, r2, #8
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	68d2      	ldr	r2, [r2, #12]
 800ca6c:	0912      	lsrs	r2, r2, #4
 800ca6e:	0452      	lsls	r2, r2, #17
 800ca70:	430a      	orrs	r2, r1
 800ca72:	492a      	ldr	r1, [pc, #168]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	610b      	str	r3, [r1, #16]
 800ca78:	e027      	b.n	800caca <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d112      	bne.n	800caa6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ca80:	4b26      	ldr	r3, [pc, #152]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ca88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6892      	ldr	r2, [r2, #8]
 800ca90:	0211      	lsls	r1, r2, #8
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	6912      	ldr	r2, [r2, #16]
 800ca96:	0852      	lsrs	r2, r2, #1
 800ca98:	3a01      	subs	r2, #1
 800ca9a:	0552      	lsls	r2, r2, #21
 800ca9c:	430a      	orrs	r2, r1
 800ca9e:	491f      	ldr	r1, [pc, #124]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800caa0:	4313      	orrs	r3, r2
 800caa2:	610b      	str	r3, [r1, #16]
 800caa4:	e011      	b.n	800caca <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800caa6:	4b1d      	ldr	r3, [pc, #116]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800caae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	6892      	ldr	r2, [r2, #8]
 800cab6:	0211      	lsls	r1, r2, #8
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	6952      	ldr	r2, [r2, #20]
 800cabc:	0852      	lsrs	r2, r2, #1
 800cabe:	3a01      	subs	r2, #1
 800cac0:	0652      	lsls	r2, r2, #25
 800cac2:	430a      	orrs	r2, r1
 800cac4:	4915      	ldr	r1, [pc, #84]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800caca:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a13      	ldr	r2, [pc, #76]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800cad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cad4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cad6:	f7fc fe63 	bl	80097a0 <HAL_GetTick>
 800cada:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cadc:	e009      	b.n	800caf2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cade:	f7fc fe5f 	bl	80097a0 <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d902      	bls.n	800caf2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	73fb      	strb	r3, [r7, #15]
          break;
 800caf0:	e005      	b.n	800cafe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800caf2:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0ef      	beq.n	800cade <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cb04:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb06:	691a      	ldr	r2, [r3, #16]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	4903      	ldr	r1, [pc, #12]	; (800cb1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	40021000 	.word	0x40021000

0800cb20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb2e:	4b68      	ldr	r3, [pc, #416]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	f003 0303 	and.w	r3, r3, #3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d018      	beq.n	800cb6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cb3a:	4b65      	ldr	r3, [pc, #404]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f003 0203 	and.w	r2, r3, #3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d10d      	bne.n	800cb66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
       ||
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cb52:	4b5f      	ldr	r3, [pc, #380]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	091b      	lsrs	r3, r3, #4
 800cb58:	f003 0307 	and.w	r3, r3, #7
 800cb5c:	1c5a      	adds	r2, r3, #1
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
       ||
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d044      	beq.n	800cbf0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	73fb      	strb	r3, [r7, #15]
 800cb6a:	e041      	b.n	800cbf0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d00c      	beq.n	800cb8e <RCCEx_PLLSAI2_Config+0x6e>
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d013      	beq.n	800cba0 <RCCEx_PLLSAI2_Config+0x80>
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d120      	bne.n	800cbbe <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cb7c:	4b54      	ldr	r3, [pc, #336]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0302 	and.w	r3, r3, #2
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d11d      	bne.n	800cbc4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cb8c:	e01a      	b.n	800cbc4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cb8e:	4b50      	ldr	r3, [pc, #320]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d116      	bne.n	800cbc8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cb9e:	e013      	b.n	800cbc8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cba0:	4b4b      	ldr	r3, [pc, #300]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10f      	bne.n	800cbcc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cbac:	4b48      	ldr	r3, [pc, #288]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d109      	bne.n	800cbcc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbbc:	e006      	b.n	800cbcc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc2:	e004      	b.n	800cbce <RCCEx_PLLSAI2_Config+0xae>
      break;
 800cbc4:	bf00      	nop
 800cbc6:	e002      	b.n	800cbce <RCCEx_PLLSAI2_Config+0xae>
      break;
 800cbc8:	bf00      	nop
 800cbca:	e000      	b.n	800cbce <RCCEx_PLLSAI2_Config+0xae>
      break;
 800cbcc:	bf00      	nop
    }

    if(status == HAL_OK)
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10d      	bne.n	800cbf0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cbd4:	4b3e      	ldr	r3, [pc, #248]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6819      	ldr	r1, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	011b      	lsls	r3, r3, #4
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	4939      	ldr	r1, [pc, #228]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d167      	bne.n	800ccc6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800cbf6:	4b36      	ldr	r3, [pc, #216]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a35      	ldr	r2, [pc, #212]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc02:	f7fc fdcd 	bl	80097a0 <HAL_GetTick>
 800cc06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cc08:	e009      	b.n	800cc1e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cc0a:	f7fc fdc9 	bl	80097a0 <HAL_GetTick>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d902      	bls.n	800cc1e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	73fb      	strb	r3, [r7, #15]
        break;
 800cc1c:	e005      	b.n	800cc2a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cc1e:	4b2c      	ldr	r3, [pc, #176]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1ef      	bne.n	800cc0a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d14a      	bne.n	800ccc6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d111      	bne.n	800cc5a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cc36:	4b26      	ldr	r3, [pc, #152]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800cc3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	6892      	ldr	r2, [r2, #8]
 800cc46:	0211      	lsls	r1, r2, #8
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	68d2      	ldr	r2, [r2, #12]
 800cc4c:	0912      	lsrs	r2, r2, #4
 800cc4e:	0452      	lsls	r2, r2, #17
 800cc50:	430a      	orrs	r2, r1
 800cc52:	491f      	ldr	r1, [pc, #124]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc54:	4313      	orrs	r3, r2
 800cc56:	614b      	str	r3, [r1, #20]
 800cc58:	e011      	b.n	800cc7e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cc5a:	4b1d      	ldr	r3, [pc, #116]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cc62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	6892      	ldr	r2, [r2, #8]
 800cc6a:	0211      	lsls	r1, r2, #8
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	6912      	ldr	r2, [r2, #16]
 800cc70:	0852      	lsrs	r2, r2, #1
 800cc72:	3a01      	subs	r2, #1
 800cc74:	0652      	lsls	r2, r2, #25
 800cc76:	430a      	orrs	r2, r1
 800cc78:	4915      	ldr	r1, [pc, #84]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800cc7e:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a13      	ldr	r2, [pc, #76]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc8a:	f7fc fd89 	bl	80097a0 <HAL_GetTick>
 800cc8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cc90:	e009      	b.n	800cca6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cc92:	f7fc fd85 	bl	80097a0 <HAL_GetTick>
 800cc96:	4602      	mov	r2, r0
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d902      	bls.n	800cca6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800cca0:	2303      	movs	r3, #3
 800cca2:	73fb      	strb	r3, [r7, #15]
          break;
 800cca4:	e005      	b.n	800ccb2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cca6:	4b0a      	ldr	r3, [pc, #40]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d0ef      	beq.n	800cc92 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ccb8:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ccba:	695a      	ldr	r2, [r3, #20]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	4903      	ldr	r1, [pc, #12]	; (800ccd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	40021000 	.word	0x40021000

0800ccd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e095      	b.n	800ce12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d108      	bne.n	800cd00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccf6:	d009      	beq.n	800cd0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	61da      	str	r2, [r3, #28]
 800ccfe:	e005      	b.n	800cd0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d106      	bne.n	800cd2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f7f6 facc 	bl	80032c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2202      	movs	r2, #2
 800cd30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd4c:	d902      	bls.n	800cd54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	e002      	b.n	800cd5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cd54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cd62:	d007      	beq.n	800cd74 <HAL_SPI_Init+0xa0>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd6c:	d002      	beq.n	800cd74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cd84:	431a      	orrs	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cda2:	431a      	orrs	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	69db      	ldr	r3, [r3, #28]
 800cda8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdac:	431a      	orrs	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb6:	ea42 0103 	orr.w	r1, r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	0c1b      	lsrs	r3, r3, #16
 800cdd0:	f003 0204 	and.w	r2, r3, #4
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	f003 0310 	and.w	r3, r3, #16
 800cddc:	431a      	orrs	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde2:	f003 0308 	and.w	r3, r3, #8
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800cdf0:	ea42 0103 	orr.w	r1, r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	430a      	orrs	r2, r1
 800ce00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e01a      	b.n	800ce62 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce42:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7f6 fa81 	bl	800334c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b088      	sub	sp, #32
 800ce6e:	af02      	add	r7, sp, #8
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	603b      	str	r3, [r7, #0]
 800ce76:	4613      	mov	r3, r2
 800ce78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce86:	d112      	bne.n	800ceae <HAL_SPI_Receive+0x44>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10e      	bne.n	800ceae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2204      	movs	r2, #4
 800ce94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ce98:	88fa      	ldrh	r2, [r7, #6]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 f910 	bl	800d0ca <HAL_SPI_TransmitReceive>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	e109      	b.n	800d0c2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d101      	bne.n	800cebc <HAL_SPI_Receive+0x52>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	e102      	b.n	800d0c2 <HAL_SPI_Receive+0x258>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cec4:	f7fc fc6c 	bl	80097a0 <HAL_GetTick>
 800cec8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d002      	beq.n	800cedc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ced6:	2302      	movs	r3, #2
 800ced8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ceda:	e0e9      	b.n	800d0b0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d002      	beq.n	800cee8 <HAL_SPI_Receive+0x7e>
 800cee2:	88fb      	ldrh	r3, [r7, #6]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d102      	bne.n	800ceee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ceec:	e0e0      	b.n	800d0b0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2204      	movs	r2, #4
 800cef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	88fa      	ldrh	r2, [r7, #6]
 800cf06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	88fa      	ldrh	r2, [r7, #6]
 800cf0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cf38:	d908      	bls.n	800cf4c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf48:	605a      	str	r2, [r3, #4]
 800cf4a:	e007      	b.n	800cf5c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf5a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf64:	d10f      	bne.n	800cf86 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf90:	2b40      	cmp	r3, #64	; 0x40
 800cf92:	d007      	beq.n	800cfa4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfa2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cfac:	d867      	bhi.n	800d07e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cfae:	e030      	b.n	800d012 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d117      	bne.n	800cfee <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f103 020c 	add.w	r2, r3, #12
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfca:	7812      	ldrb	r2, [r2, #0]
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cfec:	e011      	b.n	800d012 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfee:	f7fc fbd7 	bl	80097a0 <HAL_GetTick>
 800cff2:	4602      	mov	r2, r0
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d803      	bhi.n	800d006 <HAL_SPI_Receive+0x19c>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d004:	d102      	bne.n	800d00c <HAL_SPI_Receive+0x1a2>
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800d00c:	2303      	movs	r3, #3
 800d00e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d010:	e04e      	b.n	800d0b0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d018:	b29b      	uxth	r3, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1c8      	bne.n	800cfb0 <HAL_SPI_Receive+0x146>
 800d01e:	e034      	b.n	800d08a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d115      	bne.n	800d05a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68da      	ldr	r2, [r3, #12]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d038:	b292      	uxth	r2, r2
 800d03a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d040:	1c9a      	adds	r2, r3, #2
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	3b01      	subs	r3, #1
 800d050:	b29a      	uxth	r2, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d058:	e011      	b.n	800d07e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d05a:	f7fc fba1 	bl	80097a0 <HAL_GetTick>
 800d05e:	4602      	mov	r2, r0
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	429a      	cmp	r2, r3
 800d068:	d803      	bhi.n	800d072 <HAL_SPI_Receive+0x208>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d102      	bne.n	800d078 <HAL_SPI_Receive+0x20e>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d102      	bne.n	800d07e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d07c:	e018      	b.n	800d0b0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d084:	b29b      	uxth	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1ca      	bne.n	800d020 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 fffa 	bl	800e088 <SPI_EndRxTransaction>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2220      	movs	r2, #32
 800d09e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d002      	beq.n	800d0ae <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	75fb      	strb	r3, [r7, #23]
 800d0ac:	e000      	b.n	800d0b0 <HAL_SPI_Receive+0x246>
  }

error :
 800d0ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3718      	adds	r7, #24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b08a      	sub	sp, #40	; 0x28
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	607a      	str	r2, [r7, #4]
 800d0d6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d101      	bne.n	800d0f0 <HAL_SPI_TransmitReceive+0x26>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e1fb      	b.n	800d4e8 <HAL_SPI_TransmitReceive+0x41e>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0f8:	f7fc fb52 	bl	80097a0 <HAL_GetTick>
 800d0fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d104:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800d10c:	887b      	ldrh	r3, [r7, #2]
 800d10e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800d110:	887b      	ldrh	r3, [r7, #2]
 800d112:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d114:	7efb      	ldrb	r3, [r7, #27]
 800d116:	2b01      	cmp	r3, #1
 800d118:	d00e      	beq.n	800d138 <HAL_SPI_TransmitReceive+0x6e>
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d120:	d106      	bne.n	800d130 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d102      	bne.n	800d130 <HAL_SPI_TransmitReceive+0x66>
 800d12a:	7efb      	ldrb	r3, [r7, #27]
 800d12c:	2b04      	cmp	r3, #4
 800d12e:	d003      	beq.n	800d138 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800d130:	2302      	movs	r3, #2
 800d132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d136:	e1cd      	b.n	800d4d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d005      	beq.n	800d14a <HAL_SPI_TransmitReceive+0x80>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <HAL_SPI_TransmitReceive+0x80>
 800d144:	887b      	ldrh	r3, [r7, #2]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d103      	bne.n	800d152 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d150:	e1c0      	b.n	800d4d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b04      	cmp	r3, #4
 800d15c:	d003      	beq.n	800d166 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2205      	movs	r2, #5
 800d162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	887a      	ldrh	r2, [r7, #2]
 800d176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	887a      	ldrh	r2, [r7, #2]
 800d17e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	887a      	ldrh	r2, [r7, #2]
 800d18c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	887a      	ldrh	r2, [r7, #2]
 800d192:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1a8:	d802      	bhi.n	800d1b0 <HAL_SPI_TransmitReceive+0xe6>
 800d1aa:	8a3b      	ldrh	r3, [r7, #16]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d908      	bls.n	800d1c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d1be:	605a      	str	r2, [r3, #4]
 800d1c0:	e007      	b.n	800d1d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d1d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1dc:	2b40      	cmp	r3, #64	; 0x40
 800d1de:	d007      	beq.n	800d1f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1f8:	d97c      	bls.n	800d2f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d002      	beq.n	800d208 <HAL_SPI_TransmitReceive+0x13e>
 800d202:	8a7b      	ldrh	r3, [r7, #18]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d169      	bne.n	800d2dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20c:	881a      	ldrh	r2, [r3, #0]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d218:	1c9a      	adds	r2, r3, #2
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d222:	b29b      	uxth	r3, r3
 800d224:	3b01      	subs	r3, #1
 800d226:	b29a      	uxth	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d22c:	e056      	b.n	800d2dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	f003 0302 	and.w	r3, r3, #2
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d11b      	bne.n	800d274 <HAL_SPI_TransmitReceive+0x1aa>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d240:	b29b      	uxth	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d016      	beq.n	800d274 <HAL_SPI_TransmitReceive+0x1aa>
 800d246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d113      	bne.n	800d274 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	881a      	ldrh	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25c:	1c9a      	adds	r2, r3, #2
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d266:	b29b      	uxth	r3, r3
 800d268:	3b01      	subs	r3, #1
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d11c      	bne.n	800d2bc <HAL_SPI_TransmitReceive+0x1f2>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d288:	b29b      	uxth	r3, r3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d016      	beq.n	800d2bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68da      	ldr	r2, [r3, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d298:	b292      	uxth	r2, r2
 800d29a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	1c9a      	adds	r2, r3, #2
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d2bc:	f7fc fa70 	bl	80097a0 <HAL_GetTick>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d807      	bhi.n	800d2dc <HAL_SPI_TransmitReceive+0x212>
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d2:	d003      	beq.n	800d2dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d2da:	e0fb      	b.n	800d4d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1a3      	bne.n	800d22e <HAL_SPI_TransmitReceive+0x164>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d19d      	bne.n	800d22e <HAL_SPI_TransmitReceive+0x164>
 800d2f2:	e0df      	b.n	800d4b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d003      	beq.n	800d304 <HAL_SPI_TransmitReceive+0x23a>
 800d2fc:	8a7b      	ldrh	r3, [r7, #18]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	f040 80cb 	bne.w	800d49a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d308:	b29b      	uxth	r3, r3
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d912      	bls.n	800d334 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d312:	881a      	ldrh	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31e:	1c9a      	adds	r2, r3, #2
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d328:	b29b      	uxth	r3, r3
 800d32a:	3b02      	subs	r3, #2
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d332:	e0b2      	b.n	800d49a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	330c      	adds	r3, #12
 800d33e:	7812      	ldrb	r2, [r2, #0]
 800d340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b29a      	uxth	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d35a:	e09e      	b.n	800d49a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	2b02      	cmp	r3, #2
 800d368:	d134      	bne.n	800d3d4 <HAL_SPI_TransmitReceive+0x30a>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d02f      	beq.n	800d3d4 <HAL_SPI_TransmitReceive+0x30a>
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	2b01      	cmp	r3, #1
 800d378:	d12c      	bne.n	800d3d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d37e:	b29b      	uxth	r3, r3
 800d380:	2b01      	cmp	r3, #1
 800d382:	d912      	bls.n	800d3aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d388:	881a      	ldrh	r2, [r3, #0]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d394:	1c9a      	adds	r2, r3, #2
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	3b02      	subs	r3, #2
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d3a8:	e012      	b.n	800d3d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	330c      	adds	r3, #12
 800d3b4:	7812      	ldrb	r2, [r2, #0]
 800d3b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d148      	bne.n	800d474 <HAL_SPI_TransmitReceive+0x3aa>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d042      	beq.n	800d474 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d923      	bls.n	800d442 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	68da      	ldr	r2, [r3, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d404:	b292      	uxth	r2, r2
 800d406:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40c:	1c9a      	adds	r2, r3, #2
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d418:	b29b      	uxth	r3, r3
 800d41a:	3b02      	subs	r3, #2
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d81f      	bhi.n	800d470 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d43e:	605a      	str	r2, [r3, #4]
 800d440:	e016      	b.n	800d470 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f103 020c 	add.w	r2, r3, #12
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	7812      	ldrb	r2, [r2, #0]
 800d450:	b2d2      	uxtb	r2, r2
 800d452:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d458:	1c5a      	adds	r2, r3, #1
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d464:	b29b      	uxth	r3, r3
 800d466:	3b01      	subs	r3, #1
 800d468:	b29a      	uxth	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d470:	2301      	movs	r3, #1
 800d472:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d474:	f7fc f994 	bl	80097a0 <HAL_GetTick>
 800d478:	4602      	mov	r2, r0
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d480:	429a      	cmp	r2, r3
 800d482:	d803      	bhi.n	800d48c <HAL_SPI_TransmitReceive+0x3c2>
 800d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48a:	d102      	bne.n	800d492 <HAL_SPI_TransmitReceive+0x3c8>
 800d48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d103      	bne.n	800d49a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800d492:	2303      	movs	r3, #3
 800d494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d498:	e01c      	b.n	800d4d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f47f af5b 	bne.w	800d35c <HAL_SPI_TransmitReceive+0x292>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f47f af54 	bne.w	800d35c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d4b4:	69fa      	ldr	r2, [r7, #28]
 800d4b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 fe3d 	bl	800e138 <SPI_EndRxTxTransaction>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2220      	movs	r2, #32
 800d4ce:	661a      	str	r2, [r3, #96]	; 0x60
 800d4d0:	e000      	b.n	800d4d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800d4d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d4e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3728      	adds	r7, #40	; 0x28
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d101      	bne.n	800d510 <HAL_SPI_Transmit_IT+0x20>
 800d50c:	2302      	movs	r3, #2
 800d50e:	e072      	b.n	800d5f6 <HAL_SPI_Transmit_IT+0x106>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d002      	beq.n	800d524 <HAL_SPI_Transmit_IT+0x34>
 800d51e:	88fb      	ldrh	r3, [r7, #6]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d102      	bne.n	800d52a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800d524:	2301      	movs	r3, #1
 800d526:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d528:	e060      	b.n	800d5ec <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b01      	cmp	r3, #1
 800d534:	d002      	beq.n	800d53c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800d536:	2302      	movs	r3, #2
 800d538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d53a:	e057      	b.n	800d5ec <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2203      	movs	r2, #3
 800d540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	88fa      	ldrh	r2, [r7, #6]
 800d554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	88fa      	ldrh	r2, [r7, #6]
 800d55a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d580:	d903      	bls.n	800d58a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4a1f      	ldr	r2, [pc, #124]	; (800d604 <HAL_SPI_Transmit_IT+0x114>)
 800d586:	651a      	str	r2, [r3, #80]	; 0x50
 800d588:	e002      	b.n	800d590 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	4a1e      	ldr	r2, [pc, #120]	; (800d608 <HAL_SPI_Transmit_IT+0x118>)
 800d58e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d598:	d10f      	bne.n	800d5ba <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800d5c8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d4:	2b40      	cmp	r3, #64	; 0x40
 800d5d6:	d008      	beq.n	800d5ea <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	e000      	b.n	800d5ec <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800d5ea:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	371c      	adds	r7, #28
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	0800de17 	.word	0x0800de17
 800d608:	0800ddd1 	.word	0x0800ddd1

0800d60c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4613      	mov	r3, r2
 800d618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d110      	bne.n	800d648 <HAL_SPI_Receive_IT+0x3c>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d62e:	d10b      	bne.n	800d648 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2204      	movs	r2, #4
 800d634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800d638:	88fb      	ldrh	r3, [r7, #6]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 f894 	bl	800d76c <HAL_SPI_TransmitReceive_IT>
 800d644:	4603      	mov	r3, r0
 800d646:	e089      	b.n	800d75c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d101      	bne.n	800d656 <HAL_SPI_Receive_IT+0x4a>
 800d652:	2302      	movs	r3, #2
 800d654:	e082      	b.n	800d75c <HAL_SPI_Receive_IT+0x150>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b01      	cmp	r3, #1
 800d668:	d002      	beq.n	800d670 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800d66a:	2302      	movs	r3, #2
 800d66c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d66e:	e070      	b.n	800d752 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d002      	beq.n	800d67c <HAL_SPI_Receive_IT+0x70>
 800d676:	88fb      	ldrh	r3, [r7, #6]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d102      	bne.n	800d682 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d680:	e067      	b.n	800d752 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2204      	movs	r2, #4
 800d686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	88fa      	ldrh	r2, [r7, #6]
 800d69a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	88fa      	ldrh	r2, [r7, #6]
 800d6a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6c6:	d90b      	bls.n	800d6e0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d6d6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	4a22      	ldr	r2, [pc, #136]	; (800d764 <HAL_SPI_Receive_IT+0x158>)
 800d6dc:	64da      	str	r2, [r3, #76]	; 0x4c
 800d6de:	e00a      	b.n	800d6f6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d6ee:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4a1d      	ldr	r2, [pc, #116]	; (800d768 <HAL_SPI_Receive_IT+0x15c>)
 800d6f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6fe:	d10f      	bne.n	800d720 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d70e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d71e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685a      	ldr	r2, [r3, #4]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d72e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d73a:	2b40      	cmp	r3, #64	; 0x40
 800d73c:	d008      	beq.n	800d750 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	e000      	b.n	800d752 <HAL_SPI_Receive_IT+0x146>
  }

error :
 800d750:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2200      	movs	r2, #0
 800d756:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3718      	adds	r7, #24
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	0800dd85 	.word	0x0800dd85
 800d768:	0800dd35 	.word	0x0800dd35

0800d76c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b087      	sub	sp, #28
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d784:	2b01      	cmp	r3, #1
 800d786:	d101      	bne.n	800d78c <HAL_SPI_TransmitReceive_IT+0x20>
 800d788:	2302      	movs	r3, #2
 800d78a:	e091      	b.n	800d8b0 <HAL_SPI_TransmitReceive_IT+0x144>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d79a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d7a2:	7dbb      	ldrb	r3, [r7, #22]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d00d      	beq.n	800d7c4 <HAL_SPI_TransmitReceive_IT+0x58>
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7ae:	d106      	bne.n	800d7be <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d102      	bne.n	800d7be <HAL_SPI_TransmitReceive_IT+0x52>
 800d7b8:	7dbb      	ldrb	r3, [r7, #22]
 800d7ba:	2b04      	cmp	r3, #4
 800d7bc:	d002      	beq.n	800d7c4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800d7be:	2302      	movs	r3, #2
 800d7c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d7c2:	e070      	b.n	800d8a6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d005      	beq.n	800d7d6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800d7d0:	887b      	ldrh	r3, [r7, #2]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d102      	bne.n	800d7dc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d7da:	e064      	b.n	800d8a6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	2b04      	cmp	r3, #4
 800d7e6:	d003      	beq.n	800d7f0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2205      	movs	r2, #5
 800d7ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	887a      	ldrh	r2, [r7, #2]
 800d800:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	887a      	ldrh	r2, [r7, #2]
 800d806:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	887a      	ldrh	r2, [r7, #2]
 800d812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	887a      	ldrh	r2, [r7, #2]
 800d81a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d826:	d906      	bls.n	800d836 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4a24      	ldr	r2, [pc, #144]	; (800d8bc <HAL_SPI_TransmitReceive_IT+0x150>)
 800d82c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4a23      	ldr	r2, [pc, #140]	; (800d8c0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800d832:	651a      	str	r2, [r3, #80]	; 0x50
 800d834:	e005      	b.n	800d842 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4a22      	ldr	r2, [pc, #136]	; (800d8c4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800d83a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	4a22      	ldr	r2, [pc, #136]	; (800d8c8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800d840:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d84a:	d802      	bhi.n	800d852 <HAL_SPI_TransmitReceive_IT+0xe6>
 800d84c:	887b      	ldrh	r3, [r7, #2]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d908      	bls.n	800d864 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d860:	605a      	str	r2, [r3, #4]
 800d862:	e007      	b.n	800d874 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d872:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800d882:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d88e:	2b40      	cmp	r3, #64	; 0x40
 800d890:	d008      	beq.n	800d8a4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8a0:	601a      	str	r2, [r3, #0]
 800d8a2:	e000      	b.n	800d8a6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800d8a4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	371c      	adds	r7, #28
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	0800dc6f 	.word	0x0800dc6f
 800d8c0:	0800dcd5 	.word	0x0800dcd5
 800d8c4:	0800db1f 	.word	0x0800db1f
 800d8c8:	0800dbdd 	.word	0x0800dbdd

0800d8cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	099b      	lsrs	r3, r3, #6
 800d8e8:	f003 0301 	and.w	r3, r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10f      	bne.n	800d910 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00a      	beq.n	800d910 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	099b      	lsrs	r3, r3, #6
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	d004      	beq.n	800d910 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	4798      	blx	r3
    return;
 800d90e:	e0d8      	b.n	800dac2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	085b      	lsrs	r3, r3, #1
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00a      	beq.n	800d932 <HAL_SPI_IRQHandler+0x66>
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	09db      	lsrs	r3, r3, #7
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d004      	beq.n	800d932 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	4798      	blx	r3
    return;
 800d930:	e0c7      	b.n	800dac2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	095b      	lsrs	r3, r3, #5
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10c      	bne.n	800d958 <HAL_SPI_IRQHandler+0x8c>
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	099b      	lsrs	r3, r3, #6
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	0a1b      	lsrs	r3, r3, #8
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 80b5 	beq.w	800dac2 <HAL_SPI_IRQHandler+0x1f6>
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	095b      	lsrs	r3, r3, #5
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 80ae 	beq.w	800dac2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	099b      	lsrs	r3, r3, #6
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d023      	beq.n	800d9ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b03      	cmp	r3, #3
 800d97c:	d011      	beq.n	800d9a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d982:	f043 0204 	orr.w	r2, r3, #4
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d98a:	2300      	movs	r3, #0
 800d98c:	617b      	str	r3, [r7, #20]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	617b      	str	r3, [r7, #20]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	617b      	str	r3, [r7, #20]
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	e00b      	b.n	800d9ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	613b      	str	r3, [r7, #16]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	613b      	str	r3, [r7, #16]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	613b      	str	r3, [r7, #16]
 800d9b6:	693b      	ldr	r3, [r7, #16]
        return;
 800d9b8:	e083      	b.n	800dac2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	095b      	lsrs	r3, r3, #5
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d014      	beq.n	800d9f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ca:	f043 0201 	orr.w	r2, r3, #1
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	0a1b      	lsrs	r3, r3, #8
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00c      	beq.n	800da16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da00:	f043 0208 	orr.w	r2, r3, #8
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800da08:	2300      	movs	r3, #0
 800da0a:	60bb      	str	r3, [r7, #8]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	60bb      	str	r3, [r7, #8]
 800da14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d050      	beq.n	800dac0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800da2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	f003 0302 	and.w	r3, r3, #2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d104      	bne.n	800da4a <HAL_SPI_IRQHandler+0x17e>
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b00      	cmp	r3, #0
 800da48:	d034      	beq.n	800dab4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	685a      	ldr	r2, [r3, #4]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f022 0203 	bic.w	r2, r2, #3
 800da58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d011      	beq.n	800da86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da66:	4a18      	ldr	r2, [pc, #96]	; (800dac8 <HAL_SPI_IRQHandler+0x1fc>)
 800da68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fc f8e2 	bl	8009c38 <HAL_DMA_Abort_IT>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d016      	beq.n	800dabc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da92:	4a0d      	ldr	r2, [pc, #52]	; (800dac8 <HAL_SPI_IRQHandler+0x1fc>)
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fc f8cc 	bl	8009c38 <HAL_DMA_Abort_IT>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800dab2:	e003      	b.n	800dabc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f813 	bl	800dae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800daba:	e000      	b.n	800dabe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800dabc:	bf00      	nop
    return;
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
  }
}
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	0800daf5 	.word	0x0800daf5

0800dacc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800dad4:	bf00      	nop
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f7ff ffe5 	bl	800dae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db16:	bf00      	nop
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d923      	bls.n	800db7a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68da      	ldr	r2, [r3, #12]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3c:	b292      	uxth	r2, r2
 800db3e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db44:	1c9a      	adds	r2, r3, #2
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db50:	b29b      	uxth	r3, r3
 800db52:	3b02      	subs	r3, #2
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db62:	b29b      	uxth	r3, r3
 800db64:	2b01      	cmp	r3, #1
 800db66:	d11f      	bne.n	800dba8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	685a      	ldr	r2, [r3, #4]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db76:	605a      	str	r2, [r3, #4]
 800db78:	e016      	b.n	800dba8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f103 020c 	add.w	r2, r3, #12
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	7812      	ldrb	r2, [r2, #0]
 800db88:	b2d2      	uxtb	r2, r2
 800db8a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10f      	bne.n	800dbd4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	685a      	ldr	r2, [r3, #4]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800dbc2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d102      	bne.n	800dbd4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 faf8 	bl	800e1c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d912      	bls.n	800dc14 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf2:	881a      	ldrh	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfe:	1c9a      	adds	r2, r3, #2
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	3b02      	subs	r3, #2
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc12:	e012      	b.n	800dc3a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	330c      	adds	r3, #12
 800dc1e:	7812      	ldrb	r2, [r2, #0]
 800dc20:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	3b01      	subs	r3, #1
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d110      	bne.n	800dc66 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc52:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d102      	bne.n	800dc66 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 faaf 	bl	800e1c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800dc66:	bf00      	nop
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b082      	sub	sp, #8
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc80:	b292      	uxth	r2, r2
 800dc82:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc88:	1c9a      	adds	r2, r3, #2
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	3b01      	subs	r3, #1
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10f      	bne.n	800dccc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fa7c 	bl	800e1c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800dccc:	bf00      	nop
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	881a      	ldrh	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcec:	1c9a      	adds	r2, r3, #2
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d110      	bne.n	800dd2c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd18:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d102      	bne.n	800dd2c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fa4c 	bl	800e1c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800dd2c:	bf00      	nop
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f103 020c 	add.w	r2, r3, #12
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd48:	7812      	ldrb	r2, [r2, #0]
 800dd4a:	b2d2      	uxtb	r2, r2
 800dd4c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3b01      	subs	r3, #1
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fa66 	bl	800e248 <SPI_CloseRx_ISR>
  }
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68da      	ldr	r2, [r3, #12]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd96:	b292      	uxth	r2, r2
 800dd98:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9e:	1c9a      	adds	r2, r3, #2
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	3b01      	subs	r3, #1
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d102      	bne.n	800ddc8 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fa40 	bl	800e248 <SPI_CloseRx_ISR>
  }
}
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	330c      	adds	r3, #12
 800dde2:	7812      	ldrb	r2, [r2, #0]
 800dde4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de02:	b29b      	uxth	r3, r3
 800de04:	2b00      	cmp	r3, #0
 800de06:	d102      	bne.n	800de0e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 fa4d 	bl	800e2a8 <SPI_CloseTx_ISR>
  }
}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de22:	881a      	ldrh	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de2e:	1c9a      	adds	r2, r3, #2
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de38:	b29b      	uxth	r3, r3
 800de3a:	3b01      	subs	r3, #1
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de46:	b29b      	uxth	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d102      	bne.n	800de52 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fa2b 	bl	800e2a8 <SPI_CloseTx_ISR>
  }
}
 800de52:	bf00      	nop
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
	...

0800de5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b088      	sub	sp, #32
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	4613      	mov	r3, r2
 800de6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800de6c:	f7fb fc98 	bl	80097a0 <HAL_GetTick>
 800de70:	4602      	mov	r2, r0
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	1a9b      	subs	r3, r3, r2
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	4413      	add	r3, r2
 800de7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800de7c:	f7fb fc90 	bl	80097a0 <HAL_GetTick>
 800de80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800de82:	4b39      	ldr	r3, [pc, #228]	; (800df68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	015b      	lsls	r3, r3, #5
 800de88:	0d1b      	lsrs	r3, r3, #20
 800de8a:	69fa      	ldr	r2, [r7, #28]
 800de8c:	fb02 f303 	mul.w	r3, r2, r3
 800de90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de92:	e054      	b.n	800df3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9a:	d050      	beq.n	800df3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de9c:	f7fb fc80 	bl	80097a0 <HAL_GetTick>
 800dea0:	4602      	mov	r2, r0
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	69fa      	ldr	r2, [r7, #28]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d902      	bls.n	800deb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d13d      	bne.n	800df2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	685a      	ldr	r2, [r3, #4]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800deca:	d111      	bne.n	800def0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ded4:	d004      	beq.n	800dee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dede:	d107      	bne.n	800def0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800def8:	d10f      	bne.n	800df1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800df2a:	2303      	movs	r3, #3
 800df2c:	e017      	b.n	800df5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800df34:	2300      	movs	r3, #0
 800df36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	689a      	ldr	r2, [r3, #8]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4013      	ands	r3, r2
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	bf0c      	ite	eq
 800df4e:	2301      	moveq	r3, #1
 800df50:	2300      	movne	r3, #0
 800df52:	b2db      	uxtb	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d19b      	bne.n	800de94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3720      	adds	r7, #32
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	2000018c 	.word	0x2000018c

0800df6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800df7a:	f7fb fc11 	bl	80097a0 <HAL_GetTick>
 800df7e:	4602      	mov	r2, r0
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	1a9b      	subs	r3, r3, r2
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	4413      	add	r3, r2
 800df88:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800df8a:	f7fb fc09 	bl	80097a0 <HAL_GetTick>
 800df8e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800df90:	4b3c      	ldr	r3, [pc, #240]	; (800e084 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	4613      	mov	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	00da      	lsls	r2, r3, #3
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	0d1b      	lsrs	r3, r3, #20
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	fb02 f303 	mul.w	r3, r2, r3
 800dfa6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800dfa8:	e05f      	b.n	800e06a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dfb0:	d106      	bne.n	800dfc0 <SPI_WaitFifoStateUntilTimeout+0x54>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d103      	bne.n	800dfc0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	330c      	adds	r3, #12
 800dfbe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d050      	beq.n	800e06a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dfc8:	f7fb fbea 	bl	80097a0 <HAL_GetTick>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	69fa      	ldr	r2, [r7, #28]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d902      	bls.n	800dfde <SPI_WaitFifoStateUntilTimeout+0x72>
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d13d      	bne.n	800e05a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dfec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dff6:	d111      	bne.n	800e01c <SPI_WaitFifoStateUntilTimeout+0xb0>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e000:	d004      	beq.n	800e00c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e00a:	d107      	bne.n	800e01c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e01a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e024:	d10f      	bne.n	800e046 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e056:	2303      	movs	r3, #3
 800e058:	e010      	b.n	800e07c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800e060:	2300      	movs	r3, #0
 800e062:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	3b01      	subs	r3, #1
 800e068:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689a      	ldr	r2, [r3, #8]
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	4013      	ands	r3, r2
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	429a      	cmp	r2, r3
 800e078:	d197      	bne.n	800dfaa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3720      	adds	r7, #32
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	2000018c 	.word	0x2000018c

0800e088 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af02      	add	r7, sp, #8
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e09c:	d111      	bne.n	800e0c2 <SPI_EndRxTransaction+0x3a>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0a6:	d004      	beq.n	800e0b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0b0:	d107      	bne.n	800e0c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2180      	movs	r1, #128	; 0x80
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7ff fec5 	bl	800de5c <SPI_WaitFlagStateUntilTimeout>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0dc:	f043 0220 	orr.w	r2, r3, #32
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	e023      	b.n	800e130 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0f0:	d11d      	bne.n	800e12e <SPI_EndRxTransaction+0xa6>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0fa:	d004      	beq.n	800e106 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e104:	d113      	bne.n	800e12e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7ff ff2a 	bl	800df6c <SPI_WaitFifoStateUntilTimeout>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d007      	beq.n	800e12e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e122:	f043 0220 	orr.w	r2, r3, #32
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e12a:	2303      	movs	r3, #3
 800e12c:	e000      	b.n	800e130 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af02      	add	r7, sp, #8
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2200      	movs	r2, #0
 800e14c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7ff ff0b 	bl	800df6c <SPI_WaitFifoStateUntilTimeout>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d007      	beq.n	800e16c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e160:	f043 0220 	orr.w	r2, r3, #32
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e168:	2303      	movs	r3, #3
 800e16a:	e027      	b.n	800e1bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	2200      	movs	r2, #0
 800e174:	2180      	movs	r1, #128	; 0x80
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f7ff fe70 	bl	800de5c <SPI_WaitFlagStateUntilTimeout>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d007      	beq.n	800e192 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e186:	f043 0220 	orr.w	r2, r3, #32
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e18e:	2303      	movs	r3, #3
 800e190:	e014      	b.n	800e1bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2200      	movs	r2, #0
 800e19a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f7ff fee4 	bl	800df6c <SPI_WaitFifoStateUntilTimeout>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d007      	beq.n	800e1ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1ae:	f043 0220 	orr.w	r2, r3, #32
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	e000      	b.n	800e1bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1cc:	f7fb fae8 	bl	80097a0 <HAL_GetTick>
 800e1d0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	685a      	ldr	r2, [r3, #4]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f022 0220 	bic.w	r2, r2, #32
 800e1e0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	2164      	movs	r1, #100	; 0x64
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff ffa6 	bl	800e138 <SPI_EndRxTxTransaction>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d005      	beq.n	800e1fe <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1f6:	f043 0220 	orr.w	r2, r3, #32
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e202:	2b00      	cmp	r3, #0
 800e204:	d115      	bne.n	800e232 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b04      	cmp	r3, #4
 800e210:	d107      	bne.n	800e222 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7f3 fe64 	bl	8001ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800e220:	e00e      	b.n	800e240 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fc4e 	bl	800dacc <HAL_SPI_TxRxCpltCallback>
}
 800e230:	e006      	b.n	800e240 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7ff fc50 	bl	800dae0 <HAL_SPI_ErrorCallback>
}
 800e240:	bf00      	nop
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	685a      	ldr	r2, [r3, #4]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e25e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800e260:	f7fb fa9e 	bl	80097a0 <HAL_GetTick>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	2164      	movs	r1, #100	; 0x64
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff ff0c 	bl	800e088 <SPI_EndRxTransaction>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d005      	beq.n	800e282 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e27a:	f043 0220 	orr.w	r2, r3, #32
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d103      	bne.n	800e29a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7f3 fe28 	bl	8001ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800e298:	e002      	b.n	800e2a0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fc20 	bl	800dae0 <HAL_SPI_ErrorCallback>
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2b0:	f7fb fa76 	bl	80097a0 <HAL_GetTick>
 800e2b4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e2c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	2164      	movs	r1, #100	; 0x64
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff ff34 	bl	800e138 <SPI_EndRxTxTransaction>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d005      	beq.n	800e2e2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2da:	f043 0220 	orr.w	r2, r3, #32
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10a      	bne.n	800e300 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60bb      	str	r3, [r7, #8]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	60bb      	str	r3, [r7, #8]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	60bb      	str	r3, [r7, #8]
 800e2fe:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d003      	beq.n	800e318 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff fbe5 	bl	800dae0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e316:	e002      	b.n	800e31e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7f3 fdf9 	bl	8001f10 <HAL_SPI_TxCpltCallback>
}
 800e31e:	bf00      	nop
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b082      	sub	sp, #8
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d101      	bne.n	800e338 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e040      	b.n	800e3ba <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7f5 f81d 	bl	8003388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2224      	movs	r2, #36	; 0x24
 800e352:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f022 0201 	bic.w	r2, r2, #1
 800e362:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 f8bf 	bl	800e4e8 <UART_SetConfig>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d101      	bne.n	800e374 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e022      	b.n	800e3ba <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fb3d 	bl	800e9fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e390:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689a      	ldr	r2, [r3, #8]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e3a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f042 0201 	orr.w	r2, r2, #1
 800e3b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fbc4 	bl	800eb40 <UART_CheckIdleState>
 800e3b8:	4603      	mov	r3, r0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b08a      	sub	sp, #40	; 0x28
 800e3c6:	af02      	add	r7, sp, #8
 800e3c8:	60f8      	str	r0, [r7, #12]
 800e3ca:	60b9      	str	r1, [r7, #8]
 800e3cc:	603b      	str	r3, [r7, #0]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d6:	2b20      	cmp	r3, #32
 800e3d8:	f040 8081 	bne.w	800e4de <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <HAL_UART_Transmit+0x26>
 800e3e2:	88fb      	ldrh	r3, [r7, #6]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e079      	b.n	800e4e0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d101      	bne.n	800e3fa <HAL_UART_Transmit+0x38>
 800e3f6:	2302      	movs	r3, #2
 800e3f8:	e072      	b.n	800e4e0 <HAL_UART_Transmit+0x11e>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2221      	movs	r2, #33	; 0x21
 800e40c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e40e:	f7fb f9c7 	bl	80097a0 <HAL_GetTick>
 800e412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	88fa      	ldrh	r2, [r7, #6]
 800e418:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	88fa      	ldrh	r2, [r7, #6]
 800e420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e42c:	d108      	bne.n	800e440 <HAL_UART_Transmit+0x7e>
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d104      	bne.n	800e440 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	61bb      	str	r3, [r7, #24]
 800e43e:	e003      	b.n	800e448 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e444:	2300      	movs	r3, #0
 800e446:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800e450:	e02d      	b.n	800e4ae <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	2200      	movs	r2, #0
 800e45a:	2180      	movs	r1, #128	; 0x80
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 fbb4 	bl	800ebca <UART_WaitOnFlagUntilTimeout>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800e468:	2303      	movs	r3, #3
 800e46a:	e039      	b.n	800e4e0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10b      	bne.n	800e48a <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	881a      	ldrh	r2, [r3, #0]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e47e:	b292      	uxth	r2, r2
 800e480:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	3302      	adds	r3, #2
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e008      	b.n	800e49c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	781a      	ldrb	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	b292      	uxth	r2, r2
 800e494:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	3301      	adds	r3, #1
 800e49a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1cb      	bne.n	800e452 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2140      	movs	r1, #64	; 0x40
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f000 fb80 	bl	800ebca <UART_WaitOnFlagUntilTimeout>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	e005      	b.n	800e4e0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2220      	movs	r2, #32
 800e4d8:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e000      	b.n	800e4e0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800e4de:	2302      	movs	r3, #2
  }
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3720      	adds	r7, #32
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e4ec:	b088      	sub	sp, #32
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	689a      	ldr	r2, [r3, #8]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	431a      	orrs	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	431a      	orrs	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	69db      	ldr	r3, [r3, #28]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	4bac      	ldr	r3, [pc, #688]	; (800e7c8 <UART_SetConfig+0x2e0>)
 800e516:	4013      	ands	r3, r2
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	6812      	ldr	r2, [r2, #0]
 800e51c:	69f9      	ldr	r1, [r7, #28]
 800e51e:	430b      	orrs	r3, r1
 800e520:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	68da      	ldr	r2, [r3, #12]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	430a      	orrs	r2, r1
 800e536:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4aa2      	ldr	r2, [pc, #648]	; (800e7cc <UART_SetConfig+0x2e4>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d004      	beq.n	800e552 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a1b      	ldr	r3, [r3, #32]
 800e54c:	69fa      	ldr	r2, [r7, #28]
 800e54e:	4313      	orrs	r3, r2
 800e550:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	69fa      	ldr	r2, [r7, #28]
 800e562:	430a      	orrs	r2, r1
 800e564:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a99      	ldr	r2, [pc, #612]	; (800e7d0 <UART_SetConfig+0x2e8>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d121      	bne.n	800e5b4 <UART_SetConfig+0xcc>
 800e570:	4b98      	ldr	r3, [pc, #608]	; (800e7d4 <UART_SetConfig+0x2ec>)
 800e572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e576:	f003 0303 	and.w	r3, r3, #3
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d816      	bhi.n	800e5ac <UART_SetConfig+0xc4>
 800e57e:	a201      	add	r2, pc, #4	; (adr r2, 800e584 <UART_SetConfig+0x9c>)
 800e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e584:	0800e595 	.word	0x0800e595
 800e588:	0800e5a1 	.word	0x0800e5a1
 800e58c:	0800e59b 	.word	0x0800e59b
 800e590:	0800e5a7 	.word	0x0800e5a7
 800e594:	2301      	movs	r3, #1
 800e596:	76fb      	strb	r3, [r7, #27]
 800e598:	e0e8      	b.n	800e76c <UART_SetConfig+0x284>
 800e59a:	2302      	movs	r3, #2
 800e59c:	76fb      	strb	r3, [r7, #27]
 800e59e:	e0e5      	b.n	800e76c <UART_SetConfig+0x284>
 800e5a0:	2304      	movs	r3, #4
 800e5a2:	76fb      	strb	r3, [r7, #27]
 800e5a4:	e0e2      	b.n	800e76c <UART_SetConfig+0x284>
 800e5a6:	2308      	movs	r3, #8
 800e5a8:	76fb      	strb	r3, [r7, #27]
 800e5aa:	e0df      	b.n	800e76c <UART_SetConfig+0x284>
 800e5ac:	2310      	movs	r3, #16
 800e5ae:	76fb      	strb	r3, [r7, #27]
 800e5b0:	bf00      	nop
 800e5b2:	e0db      	b.n	800e76c <UART_SetConfig+0x284>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a87      	ldr	r2, [pc, #540]	; (800e7d8 <UART_SetConfig+0x2f0>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d134      	bne.n	800e628 <UART_SetConfig+0x140>
 800e5be:	4b85      	ldr	r3, [pc, #532]	; (800e7d4 <UART_SetConfig+0x2ec>)
 800e5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5c4:	f003 030c 	and.w	r3, r3, #12
 800e5c8:	2b0c      	cmp	r3, #12
 800e5ca:	d829      	bhi.n	800e620 <UART_SetConfig+0x138>
 800e5cc:	a201      	add	r2, pc, #4	; (adr r2, 800e5d4 <UART_SetConfig+0xec>)
 800e5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d2:	bf00      	nop
 800e5d4:	0800e609 	.word	0x0800e609
 800e5d8:	0800e621 	.word	0x0800e621
 800e5dc:	0800e621 	.word	0x0800e621
 800e5e0:	0800e621 	.word	0x0800e621
 800e5e4:	0800e615 	.word	0x0800e615
 800e5e8:	0800e621 	.word	0x0800e621
 800e5ec:	0800e621 	.word	0x0800e621
 800e5f0:	0800e621 	.word	0x0800e621
 800e5f4:	0800e60f 	.word	0x0800e60f
 800e5f8:	0800e621 	.word	0x0800e621
 800e5fc:	0800e621 	.word	0x0800e621
 800e600:	0800e621 	.word	0x0800e621
 800e604:	0800e61b 	.word	0x0800e61b
 800e608:	2300      	movs	r3, #0
 800e60a:	76fb      	strb	r3, [r7, #27]
 800e60c:	e0ae      	b.n	800e76c <UART_SetConfig+0x284>
 800e60e:	2302      	movs	r3, #2
 800e610:	76fb      	strb	r3, [r7, #27]
 800e612:	e0ab      	b.n	800e76c <UART_SetConfig+0x284>
 800e614:	2304      	movs	r3, #4
 800e616:	76fb      	strb	r3, [r7, #27]
 800e618:	e0a8      	b.n	800e76c <UART_SetConfig+0x284>
 800e61a:	2308      	movs	r3, #8
 800e61c:	76fb      	strb	r3, [r7, #27]
 800e61e:	e0a5      	b.n	800e76c <UART_SetConfig+0x284>
 800e620:	2310      	movs	r3, #16
 800e622:	76fb      	strb	r3, [r7, #27]
 800e624:	bf00      	nop
 800e626:	e0a1      	b.n	800e76c <UART_SetConfig+0x284>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a6b      	ldr	r2, [pc, #428]	; (800e7dc <UART_SetConfig+0x2f4>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d120      	bne.n	800e674 <UART_SetConfig+0x18c>
 800e632:	4b68      	ldr	r3, [pc, #416]	; (800e7d4 <UART_SetConfig+0x2ec>)
 800e634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e638:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e63c:	2b10      	cmp	r3, #16
 800e63e:	d00f      	beq.n	800e660 <UART_SetConfig+0x178>
 800e640:	2b10      	cmp	r3, #16
 800e642:	d802      	bhi.n	800e64a <UART_SetConfig+0x162>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d005      	beq.n	800e654 <UART_SetConfig+0x16c>
 800e648:	e010      	b.n	800e66c <UART_SetConfig+0x184>
 800e64a:	2b20      	cmp	r3, #32
 800e64c:	d005      	beq.n	800e65a <UART_SetConfig+0x172>
 800e64e:	2b30      	cmp	r3, #48	; 0x30
 800e650:	d009      	beq.n	800e666 <UART_SetConfig+0x17e>
 800e652:	e00b      	b.n	800e66c <UART_SetConfig+0x184>
 800e654:	2300      	movs	r3, #0
 800e656:	76fb      	strb	r3, [r7, #27]
 800e658:	e088      	b.n	800e76c <UART_SetConfig+0x284>
 800e65a:	2302      	movs	r3, #2
 800e65c:	76fb      	strb	r3, [r7, #27]
 800e65e:	e085      	b.n	800e76c <UART_SetConfig+0x284>
 800e660:	2304      	movs	r3, #4
 800e662:	76fb      	strb	r3, [r7, #27]
 800e664:	e082      	b.n	800e76c <UART_SetConfig+0x284>
 800e666:	2308      	movs	r3, #8
 800e668:	76fb      	strb	r3, [r7, #27]
 800e66a:	e07f      	b.n	800e76c <UART_SetConfig+0x284>
 800e66c:	2310      	movs	r3, #16
 800e66e:	76fb      	strb	r3, [r7, #27]
 800e670:	bf00      	nop
 800e672:	e07b      	b.n	800e76c <UART_SetConfig+0x284>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a59      	ldr	r2, [pc, #356]	; (800e7e0 <UART_SetConfig+0x2f8>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d120      	bne.n	800e6c0 <UART_SetConfig+0x1d8>
 800e67e:	4b55      	ldr	r3, [pc, #340]	; (800e7d4 <UART_SetConfig+0x2ec>)
 800e680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e684:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e688:	2b40      	cmp	r3, #64	; 0x40
 800e68a:	d00f      	beq.n	800e6ac <UART_SetConfig+0x1c4>
 800e68c:	2b40      	cmp	r3, #64	; 0x40
 800e68e:	d802      	bhi.n	800e696 <UART_SetConfig+0x1ae>
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <UART_SetConfig+0x1b8>
 800e694:	e010      	b.n	800e6b8 <UART_SetConfig+0x1d0>
 800e696:	2b80      	cmp	r3, #128	; 0x80
 800e698:	d005      	beq.n	800e6a6 <UART_SetConfig+0x1be>
 800e69a:	2bc0      	cmp	r3, #192	; 0xc0
 800e69c:	d009      	beq.n	800e6b2 <UART_SetConfig+0x1ca>
 800e69e:	e00b      	b.n	800e6b8 <UART_SetConfig+0x1d0>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	76fb      	strb	r3, [r7, #27]
 800e6a4:	e062      	b.n	800e76c <UART_SetConfig+0x284>
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	76fb      	strb	r3, [r7, #27]
 800e6aa:	e05f      	b.n	800e76c <UART_SetConfig+0x284>
 800e6ac:	2304      	movs	r3, #4
 800e6ae:	76fb      	strb	r3, [r7, #27]
 800e6b0:	e05c      	b.n	800e76c <UART_SetConfig+0x284>
 800e6b2:	2308      	movs	r3, #8
 800e6b4:	76fb      	strb	r3, [r7, #27]
 800e6b6:	e059      	b.n	800e76c <UART_SetConfig+0x284>
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	76fb      	strb	r3, [r7, #27]
 800e6bc:	bf00      	nop
 800e6be:	e055      	b.n	800e76c <UART_SetConfig+0x284>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a47      	ldr	r2, [pc, #284]	; (800e7e4 <UART_SetConfig+0x2fc>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d124      	bne.n	800e714 <UART_SetConfig+0x22c>
 800e6ca:	4b42      	ldr	r3, [pc, #264]	; (800e7d4 <UART_SetConfig+0x2ec>)
 800e6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6d8:	d012      	beq.n	800e700 <UART_SetConfig+0x218>
 800e6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6de:	d802      	bhi.n	800e6e6 <UART_SetConfig+0x1fe>
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d007      	beq.n	800e6f4 <UART_SetConfig+0x20c>
 800e6e4:	e012      	b.n	800e70c <UART_SetConfig+0x224>
 800e6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6ea:	d006      	beq.n	800e6fa <UART_SetConfig+0x212>
 800e6ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6f0:	d009      	beq.n	800e706 <UART_SetConfig+0x21e>
 800e6f2:	e00b      	b.n	800e70c <UART_SetConfig+0x224>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	76fb      	strb	r3, [r7, #27]
 800e6f8:	e038      	b.n	800e76c <UART_SetConfig+0x284>
 800e6fa:	2302      	movs	r3, #2
 800e6fc:	76fb      	strb	r3, [r7, #27]
 800e6fe:	e035      	b.n	800e76c <UART_SetConfig+0x284>
 800e700:	2304      	movs	r3, #4
 800e702:	76fb      	strb	r3, [r7, #27]
 800e704:	e032      	b.n	800e76c <UART_SetConfig+0x284>
 800e706:	2308      	movs	r3, #8
 800e708:	76fb      	strb	r3, [r7, #27]
 800e70a:	e02f      	b.n	800e76c <UART_SetConfig+0x284>
 800e70c:	2310      	movs	r3, #16
 800e70e:	76fb      	strb	r3, [r7, #27]
 800e710:	bf00      	nop
 800e712:	e02b      	b.n	800e76c <UART_SetConfig+0x284>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a2c      	ldr	r2, [pc, #176]	; (800e7cc <UART_SetConfig+0x2e4>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d124      	bne.n	800e768 <UART_SetConfig+0x280>
 800e71e:	4b2d      	ldr	r3, [pc, #180]	; (800e7d4 <UART_SetConfig+0x2ec>)
 800e720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e724:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e72c:	d012      	beq.n	800e754 <UART_SetConfig+0x26c>
 800e72e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e732:	d802      	bhi.n	800e73a <UART_SetConfig+0x252>
 800e734:	2b00      	cmp	r3, #0
 800e736:	d007      	beq.n	800e748 <UART_SetConfig+0x260>
 800e738:	e012      	b.n	800e760 <UART_SetConfig+0x278>
 800e73a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e73e:	d006      	beq.n	800e74e <UART_SetConfig+0x266>
 800e740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e744:	d009      	beq.n	800e75a <UART_SetConfig+0x272>
 800e746:	e00b      	b.n	800e760 <UART_SetConfig+0x278>
 800e748:	2300      	movs	r3, #0
 800e74a:	76fb      	strb	r3, [r7, #27]
 800e74c:	e00e      	b.n	800e76c <UART_SetConfig+0x284>
 800e74e:	2302      	movs	r3, #2
 800e750:	76fb      	strb	r3, [r7, #27]
 800e752:	e00b      	b.n	800e76c <UART_SetConfig+0x284>
 800e754:	2304      	movs	r3, #4
 800e756:	76fb      	strb	r3, [r7, #27]
 800e758:	e008      	b.n	800e76c <UART_SetConfig+0x284>
 800e75a:	2308      	movs	r3, #8
 800e75c:	76fb      	strb	r3, [r7, #27]
 800e75e:	e005      	b.n	800e76c <UART_SetConfig+0x284>
 800e760:	2310      	movs	r3, #16
 800e762:	76fb      	strb	r3, [r7, #27]
 800e764:	bf00      	nop
 800e766:	e001      	b.n	800e76c <UART_SetConfig+0x284>
 800e768:	2310      	movs	r3, #16
 800e76a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a16      	ldr	r2, [pc, #88]	; (800e7cc <UART_SetConfig+0x2e4>)
 800e772:	4293      	cmp	r3, r2
 800e774:	f040 8087 	bne.w	800e886 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e778:	7efb      	ldrb	r3, [r7, #27]
 800e77a:	2b08      	cmp	r3, #8
 800e77c:	d836      	bhi.n	800e7ec <UART_SetConfig+0x304>
 800e77e:	a201      	add	r2, pc, #4	; (adr r2, 800e784 <UART_SetConfig+0x29c>)
 800e780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e784:	0800e7a9 	.word	0x0800e7a9
 800e788:	0800e7ed 	.word	0x0800e7ed
 800e78c:	0800e7b1 	.word	0x0800e7b1
 800e790:	0800e7ed 	.word	0x0800e7ed
 800e794:	0800e7b7 	.word	0x0800e7b7
 800e798:	0800e7ed 	.word	0x0800e7ed
 800e79c:	0800e7ed 	.word	0x0800e7ed
 800e7a0:	0800e7ed 	.word	0x0800e7ed
 800e7a4:	0800e7bf 	.word	0x0800e7bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7a8:	f7fd fd48 	bl	800c23c <HAL_RCC_GetPCLK1Freq>
 800e7ac:	6178      	str	r0, [r7, #20]
        break;
 800e7ae:	e022      	b.n	800e7f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7b0:	4b0d      	ldr	r3, [pc, #52]	; (800e7e8 <UART_SetConfig+0x300>)
 800e7b2:	617b      	str	r3, [r7, #20]
        break;
 800e7b4:	e01f      	b.n	800e7f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7b6:	f7fd fcab 	bl	800c110 <HAL_RCC_GetSysClockFreq>
 800e7ba:	6178      	str	r0, [r7, #20]
        break;
 800e7bc:	e01b      	b.n	800e7f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7c2:	617b      	str	r3, [r7, #20]
        break;
 800e7c4:	e017      	b.n	800e7f6 <UART_SetConfig+0x30e>
 800e7c6:	bf00      	nop
 800e7c8:	efff69f3 	.word	0xefff69f3
 800e7cc:	40008000 	.word	0x40008000
 800e7d0:	40013800 	.word	0x40013800
 800e7d4:	40021000 	.word	0x40021000
 800e7d8:	40004400 	.word	0x40004400
 800e7dc:	40004800 	.word	0x40004800
 800e7e0:	40004c00 	.word	0x40004c00
 800e7e4:	40005000 	.word	0x40005000
 800e7e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	76bb      	strb	r3, [r7, #26]
        break;
 800e7f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 80f1 	beq.w	800e9e0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685a      	ldr	r2, [r3, #4]
 800e802:	4613      	mov	r3, r2
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d305      	bcc.n	800e81a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e814:	697a      	ldr	r2, [r7, #20]
 800e816:	429a      	cmp	r2, r3
 800e818:	d902      	bls.n	800e820 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	76bb      	strb	r3, [r7, #26]
 800e81e:	e0df      	b.n	800e9e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	4619      	mov	r1, r3
 800e824:	f04f 0200 	mov.w	r2, #0
 800e828:	f04f 0300 	mov.w	r3, #0
 800e82c:	f04f 0400 	mov.w	r4, #0
 800e830:	0214      	lsls	r4, r2, #8
 800e832:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e836:	020b      	lsls	r3, r1, #8
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	6852      	ldr	r2, [r2, #4]
 800e83c:	0852      	lsrs	r2, r2, #1
 800e83e:	4611      	mov	r1, r2
 800e840:	f04f 0200 	mov.w	r2, #0
 800e844:	eb13 0b01 	adds.w	fp, r3, r1
 800e848:	eb44 0c02 	adc.w	ip, r4, r2
 800e84c:	4658      	mov	r0, fp
 800e84e:	4661      	mov	r1, ip
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	f04f 0400 	mov.w	r4, #0
 800e858:	461a      	mov	r2, r3
 800e85a:	4623      	mov	r3, r4
 800e85c:	f7f1 fef4 	bl	8000648 <__aeabi_uldivmod>
 800e860:	4603      	mov	r3, r0
 800e862:	460c      	mov	r4, r1
 800e864:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e86c:	d308      	bcc.n	800e880 <UART_SetConfig+0x398>
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e874:	d204      	bcs.n	800e880 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	693a      	ldr	r2, [r7, #16]
 800e87c:	60da      	str	r2, [r3, #12]
 800e87e:	e0af      	b.n	800e9e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	76bb      	strb	r3, [r7, #26]
 800e884:	e0ac      	b.n	800e9e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	69db      	ldr	r3, [r3, #28]
 800e88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e88e:	d15b      	bne.n	800e948 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800e890:	7efb      	ldrb	r3, [r7, #27]
 800e892:	2b08      	cmp	r3, #8
 800e894:	d827      	bhi.n	800e8e6 <UART_SetConfig+0x3fe>
 800e896:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <UART_SetConfig+0x3b4>)
 800e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89c:	0800e8c1 	.word	0x0800e8c1
 800e8a0:	0800e8c9 	.word	0x0800e8c9
 800e8a4:	0800e8d1 	.word	0x0800e8d1
 800e8a8:	0800e8e7 	.word	0x0800e8e7
 800e8ac:	0800e8d7 	.word	0x0800e8d7
 800e8b0:	0800e8e7 	.word	0x0800e8e7
 800e8b4:	0800e8e7 	.word	0x0800e8e7
 800e8b8:	0800e8e7 	.word	0x0800e8e7
 800e8bc:	0800e8df 	.word	0x0800e8df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8c0:	f7fd fcbc 	bl	800c23c <HAL_RCC_GetPCLK1Freq>
 800e8c4:	6178      	str	r0, [r7, #20]
        break;
 800e8c6:	e013      	b.n	800e8f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8c8:	f7fd fcce 	bl	800c268 <HAL_RCC_GetPCLK2Freq>
 800e8cc:	6178      	str	r0, [r7, #20]
        break;
 800e8ce:	e00f      	b.n	800e8f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e8d0:	4b49      	ldr	r3, [pc, #292]	; (800e9f8 <UART_SetConfig+0x510>)
 800e8d2:	617b      	str	r3, [r7, #20]
        break;
 800e8d4:	e00c      	b.n	800e8f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8d6:	f7fd fc1b 	bl	800c110 <HAL_RCC_GetSysClockFreq>
 800e8da:	6178      	str	r0, [r7, #20]
        break;
 800e8dc:	e008      	b.n	800e8f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8e2:	617b      	str	r3, [r7, #20]
        break;
 800e8e4:	e004      	b.n	800e8f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	76bb      	strb	r3, [r7, #26]
        break;
 800e8ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d074      	beq.n	800e9e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	005a      	lsls	r2, r3, #1
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	085b      	lsrs	r3, r3, #1
 800e900:	441a      	add	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	fbb2 f3f3 	udiv	r3, r2, r3
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	2b0f      	cmp	r3, #15
 800e912:	d916      	bls.n	800e942 <UART_SetConfig+0x45a>
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e91a:	d212      	bcs.n	800e942 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	b29b      	uxth	r3, r3
 800e920:	f023 030f 	bic.w	r3, r3, #15
 800e924:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	085b      	lsrs	r3, r3, #1
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	f003 0307 	and.w	r3, r3, #7
 800e930:	b29a      	uxth	r2, r3
 800e932:	89fb      	ldrh	r3, [r7, #14]
 800e934:	4313      	orrs	r3, r2
 800e936:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	89fa      	ldrh	r2, [r7, #14]
 800e93e:	60da      	str	r2, [r3, #12]
 800e940:	e04e      	b.n	800e9e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	76bb      	strb	r3, [r7, #26]
 800e946:	e04b      	b.n	800e9e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e948:	7efb      	ldrb	r3, [r7, #27]
 800e94a:	2b08      	cmp	r3, #8
 800e94c:	d827      	bhi.n	800e99e <UART_SetConfig+0x4b6>
 800e94e:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <UART_SetConfig+0x46c>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e979 	.word	0x0800e979
 800e958:	0800e981 	.word	0x0800e981
 800e95c:	0800e989 	.word	0x0800e989
 800e960:	0800e99f 	.word	0x0800e99f
 800e964:	0800e98f 	.word	0x0800e98f
 800e968:	0800e99f 	.word	0x0800e99f
 800e96c:	0800e99f 	.word	0x0800e99f
 800e970:	0800e99f 	.word	0x0800e99f
 800e974:	0800e997 	.word	0x0800e997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e978:	f7fd fc60 	bl	800c23c <HAL_RCC_GetPCLK1Freq>
 800e97c:	6178      	str	r0, [r7, #20]
        break;
 800e97e:	e013      	b.n	800e9a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e980:	f7fd fc72 	bl	800c268 <HAL_RCC_GetPCLK2Freq>
 800e984:	6178      	str	r0, [r7, #20]
        break;
 800e986:	e00f      	b.n	800e9a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e988:	4b1b      	ldr	r3, [pc, #108]	; (800e9f8 <UART_SetConfig+0x510>)
 800e98a:	617b      	str	r3, [r7, #20]
        break;
 800e98c:	e00c      	b.n	800e9a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e98e:	f7fd fbbf 	bl	800c110 <HAL_RCC_GetSysClockFreq>
 800e992:	6178      	str	r0, [r7, #20]
        break;
 800e994:	e008      	b.n	800e9a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e99a:	617b      	str	r3, [r7, #20]
        break;
 800e99c:	e004      	b.n	800e9a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	76bb      	strb	r3, [r7, #26]
        break;
 800e9a6:	bf00      	nop
    }

    if (pclk != 0U)
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d018      	beq.n	800e9e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	085a      	lsrs	r2, r3, #1
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	441a      	add	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b0f      	cmp	r3, #15
 800e9c8:	d908      	bls.n	800e9dc <UART_SetConfig+0x4f4>
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9d0:	d204      	bcs.n	800e9dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	693a      	ldr	r2, [r7, #16]
 800e9d8:	60da      	str	r2, [r3, #12]
 800e9da:	e001      	b.n	800e9e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800e9ec:	7ebb      	ldrb	r3, [r7, #26]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3720      	adds	r7, #32
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800e9f8:	00f42400 	.word	0x00f42400

0800e9fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	f003 0301 	and.w	r3, r3, #1
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00a      	beq.n	800ea26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	430a      	orrs	r2, r1
 800ea24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2a:	f003 0302 	and.w	r3, r3, #2
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00a      	beq.n	800ea48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	430a      	orrs	r2, r1
 800ea46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4c:	f003 0304 	and.w	r3, r3, #4
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00a      	beq.n	800ea6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	f003 0308 	and.w	r3, r3, #8
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00a      	beq.n	800ea8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea90:	f003 0310 	and.w	r3, r3, #16
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00a      	beq.n	800eaae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab2:	f003 0320 	and.w	r3, r3, #32
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00a      	beq.n	800ead0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	430a      	orrs	r2, r1
 800eace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d01a      	beq.n	800eb12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	430a      	orrs	r2, r1
 800eaf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eafa:	d10a      	bne.n	800eb12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	430a      	orrs	r2, r1
 800eb10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	430a      	orrs	r2, r1
 800eb32:	605a      	str	r2, [r3, #4]
  }
}
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800eb4e:	f7fa fe27 	bl	80097a0 <HAL_GetTick>
 800eb52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 0308 	and.w	r3, r3, #8
 800eb5e:	2b08      	cmp	r3, #8
 800eb60:	d10e      	bne.n	800eb80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f82a 	bl	800ebca <UART_WaitOnFlagUntilTimeout>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e020      	b.n	800ebc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f003 0304 	and.w	r3, r3, #4
 800eb8a:	2b04      	cmp	r3, #4
 800eb8c:	d10e      	bne.n	800ebac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f814 	bl	800ebca <UART_WaitOnFlagUntilTimeout>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e00a      	b.n	800ebc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2220      	movs	r2, #32
 800ebb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	60f8      	str	r0, [r7, #12]
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	603b      	str	r3, [r7, #0]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebda:	e05d      	b.n	800ec98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe2:	d059      	beq.n	800ec98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebe4:	f7fa fddc 	bl	80097a0 <HAL_GetTick>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	69ba      	ldr	r2, [r7, #24]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d302      	bcc.n	800ebfa <UART_WaitOnFlagUntilTimeout+0x30>
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d11b      	bne.n	800ec32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ec08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f022 0201 	bic.w	r2, r2, #1
 800ec18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2220      	movs	r2, #32
 800ec24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ec2e:	2303      	movs	r3, #3
 800ec30:	e042      	b.n	800ecb8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 0304 	and.w	r3, r3, #4
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d02b      	beq.n	800ec98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	69db      	ldr	r3, [r3, #28]
 800ec46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec4e:	d123      	bne.n	800ec98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ec68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	689a      	ldr	r2, [r3, #8]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f022 0201 	bic.w	r2, r2, #1
 800ec78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2220      	movs	r2, #32
 800ec7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2220      	movs	r2, #32
 800ec84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e00f      	b.n	800ecb8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	69da      	ldr	r2, [r3, #28]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	4013      	ands	r3, r2
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	bf0c      	ite	eq
 800eca8:	2301      	moveq	r3, #1
 800ecaa:	2300      	movne	r3, #0
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	461a      	mov	r2, r3
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d092      	beq.n	800ebdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecb6:	2300      	movs	r3, #0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ecc0:	b084      	sub	sp, #16
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	f107 001c 	add.w	r0, r7, #28
 800ecce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d122      	bne.n	800ed1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ecec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ed00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d105      	bne.n	800ed12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 fa30 	bl	800f178 <USB_CoreReset>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73fb      	strb	r3, [r7, #15]
 800ed1c:	e01a      	b.n	800ed54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fa24 	bl	800f178 <USB_CoreReset>
 800ed30:	4603      	mov	r3, r0
 800ed32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ed34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d106      	bne.n	800ed48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	639a      	str	r2, [r3, #56]	; 0x38
 800ed46:	e005      	b.n	800ed54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed60:	b004      	add	sp, #16
 800ed62:	4770      	bx	lr

0800ed64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	f023 0201 	bic.w	r2, r3, #1
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	370c      	adds	r7, #12
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr

0800ed86 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	460b      	mov	r3, r1
 800ed90:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed9e:	78fb      	ldrb	r3, [r7, #3]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d106      	bne.n	800edb2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	60da      	str	r2, [r3, #12]
 800edb0:	e00b      	b.n	800edca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	60da      	str	r2, [r3, #12]
 800edc4:	e001      	b.n	800edca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e003      	b.n	800edd2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800edca:	2032      	movs	r0, #50	; 0x32
 800edcc:	f7fa fcf4 	bl	80097b8 <HAL_Delay>

  return HAL_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
	...

0800eddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eddc:	b084      	sub	sp, #16
 800edde:	b580      	push	{r7, lr}
 800ede0:	b086      	sub	sp, #24
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800edea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800edf6:	2300      	movs	r3, #0
 800edf8:	613b      	str	r3, [r7, #16]
 800edfa:	e009      	b.n	800ee10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	3340      	adds	r3, #64	; 0x40
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	2200      	movs	r2, #0
 800ee08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	613b      	str	r3, [r7, #16]
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	2b0e      	cmp	r3, #14
 800ee14:	d9f2      	bls.n	800edfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d11c      	bne.n	800ee56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee2a:	f043 0302 	orr.w	r3, r3, #2
 800ee2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	e005      	b.n	800ee62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee68:	461a      	mov	r2, r3
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee74:	4619      	mov	r1, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	680b      	ldr	r3, [r1, #0]
 800ee80:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ee82:	2103      	movs	r1, #3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f000 f93d 	bl	800f104 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee8a:	2110      	movs	r1, #16
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 f8f1 	bl	800f074 <USB_FlushTxFifo>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d001      	beq.n	800ee9c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f90f 	bl	800f0c0 <USB_FlushRxFifo>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eebe:	461a      	mov	r2, r3
 800eec0:	2300      	movs	r3, #0
 800eec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeca:	461a      	mov	r2, r3
 800eecc:	2300      	movs	r3, #0
 800eece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eed0:	2300      	movs	r3, #0
 800eed2:	613b      	str	r3, [r7, #16]
 800eed4:	e043      	b.n	800ef5e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	015a      	lsls	r2, r3, #5
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	4413      	add	r3, r2
 800eede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeec:	d118      	bne.n	800ef20 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10a      	bne.n	800ef0a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	015a      	lsls	r2, r3, #5
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	4413      	add	r3, r2
 800eefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef00:	461a      	mov	r2, r3
 800ef02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e013      	b.n	800ef32 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	015a      	lsls	r2, r3, #5
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	4413      	add	r3, r2
 800ef12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef16:	461a      	mov	r2, r3
 800ef18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef1c:	6013      	str	r3, [r2, #0]
 800ef1e:	e008      	b.n	800ef32 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	015a      	lsls	r2, r3, #5
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	4413      	add	r3, r2
 800ef28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	2300      	movs	r3, #0
 800ef30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	015a      	lsls	r2, r3, #5
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	4413      	add	r3, r2
 800ef3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3e:	461a      	mov	r2, r3
 800ef40:	2300      	movs	r3, #0
 800ef42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	015a      	lsls	r2, r3, #5
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef50:	461a      	mov	r2, r3
 800ef52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	613b      	str	r3, [r7, #16]
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d3b7      	bcc.n	800eed6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef66:	2300      	movs	r3, #0
 800ef68:	613b      	str	r3, [r7, #16]
 800ef6a:	e043      	b.n	800eff4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef82:	d118      	bne.n	800efb6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d10a      	bne.n	800efa0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	015a      	lsls	r2, r3, #5
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	4413      	add	r3, r2
 800ef92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef96:	461a      	mov	r2, r3
 800ef98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	e013      	b.n	800efc8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	015a      	lsls	r2, r3, #5
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efac:	461a      	mov	r2, r3
 800efae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efb2:	6013      	str	r3, [r2, #0]
 800efb4:	e008      	b.n	800efc8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc2:	461a      	mov	r2, r3
 800efc4:	2300      	movs	r3, #0
 800efc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd4:	461a      	mov	r2, r3
 800efd6:	2300      	movs	r3, #0
 800efd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	015a      	lsls	r2, r3, #5
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4413      	add	r3, r2
 800efe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe6:	461a      	mov	r2, r3
 800efe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	3301      	adds	r3, #1
 800eff2:	613b      	str	r3, [r7, #16]
 800eff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d3b7      	bcc.n	800ef6c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f002:	691b      	ldr	r3, [r3, #16]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f00a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f00e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f01c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	f043 0210 	orr.w	r2, r3, #16
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	699a      	ldr	r2, [r3, #24]
 800f02e:	4b10      	ldr	r3, [pc, #64]	; (800f070 <USB_DevInit+0x294>)
 800f030:	4313      	orrs	r3, r2
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d005      	beq.n	800f048 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	f043 0208 	orr.w	r2, r3, #8
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d107      	bne.n	800f05e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	699b      	ldr	r3, [r3, #24]
 800f052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f056:	f043 0304 	orr.w	r3, r3, #4
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f06a:	b004      	add	sp, #16
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	803c3800 	.word	0x803c3800

0800f074 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f07e:	2300      	movs	r3, #0
 800f080:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	019b      	lsls	r3, r3, #6
 800f086:	f043 0220 	orr.w	r2, r3, #32
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3301      	adds	r3, #1
 800f092:	60fb      	str	r3, [r7, #12]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	4a09      	ldr	r2, [pc, #36]	; (800f0bc <USB_FlushTxFifo+0x48>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d901      	bls.n	800f0a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f09c:	2303      	movs	r3, #3
 800f09e:	e006      	b.n	800f0ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	691b      	ldr	r3, [r3, #16]
 800f0a4:	f003 0320 	and.w	r3, r3, #32
 800f0a8:	2b20      	cmp	r3, #32
 800f0aa:	d0f0      	beq.n	800f08e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	00030d40 	.word	0x00030d40

0800f0c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2210      	movs	r2, #16
 800f0d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4a09      	ldr	r2, [pc, #36]	; (800f100 <USB_FlushRxFifo+0x40>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d901      	bls.n	800f0e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e006      	b.n	800f0f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b10      	cmp	r3, #16
 800f0ee:	d0f0      	beq.n	800f0d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3714      	adds	r7, #20
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	00030d40 	.word	0x00030d40

0800f104 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	78fb      	ldrb	r3, [r7, #3]
 800f11e:	68f9      	ldr	r1, [r7, #12]
 800f120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f124:	4313      	orrs	r3, r2
 800f126:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f136:	b480      	push	{r7}
 800f138:	b085      	sub	sp, #20
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f150:	f023 0303 	bic.w	r3, r3, #3
 800f154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f164:	f043 0302 	orr.w	r3, r3, #2
 800f168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3714      	adds	r7, #20
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f180:	2300      	movs	r3, #0
 800f182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	3301      	adds	r3, #1
 800f188:	60fb      	str	r3, [r7, #12]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	4a13      	ldr	r2, [pc, #76]	; (800f1dc <USB_CoreReset+0x64>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d901      	bls.n	800f196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f192:	2303      	movs	r3, #3
 800f194:	e01b      	b.n	800f1ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	daf2      	bge.n	800f184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	f043 0201 	orr.w	r2, r3, #1
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	4a09      	ldr	r2, [pc, #36]	; (800f1dc <USB_CoreReset+0x64>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d901      	bls.n	800f1c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e006      	b.n	800f1ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d0f0      	beq.n	800f1ae <USB_CoreReset+0x36>

  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3714      	adds	r7, #20
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	00030d40 	.word	0x00030d40

0800f1e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f1e0:	b480      	push	{r7}
 800f1e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f1e4:	bf00      	nop
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
	...

0800f1f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1f6:	f3ef 8305 	mrs	r3, IPSR
 800f1fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800f1fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d10f      	bne.n	800f222 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f202:	f3ef 8310 	mrs	r3, PRIMASK
 800f206:	607b      	str	r3, [r7, #4]
  return(result);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d105      	bne.n	800f21a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f20e:	f3ef 8311 	mrs	r3, BASEPRI
 800f212:	603b      	str	r3, [r7, #0]
  return(result);
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d007      	beq.n	800f22a <osKernelInitialize+0x3a>
 800f21a:	4b0e      	ldr	r3, [pc, #56]	; (800f254 <osKernelInitialize+0x64>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b02      	cmp	r3, #2
 800f220:	d103      	bne.n	800f22a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f222:	f06f 0305 	mvn.w	r3, #5
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	e00c      	b.n	800f244 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f22a:	4b0a      	ldr	r3, [pc, #40]	; (800f254 <osKernelInitialize+0x64>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d105      	bne.n	800f23e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f232:	4b08      	ldr	r3, [pc, #32]	; (800f254 <osKernelInitialize+0x64>)
 800f234:	2201      	movs	r2, #1
 800f236:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f238:	2300      	movs	r3, #0
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	e002      	b.n	800f244 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f23e:	f04f 33ff 	mov.w	r3, #4294967295
 800f242:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f244:	68fb      	ldr	r3, [r7, #12]
}
 800f246:	4618      	mov	r0, r3
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	200008c0 	.word	0x200008c0

0800f258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f25e:	f3ef 8305 	mrs	r3, IPSR
 800f262:	60bb      	str	r3, [r7, #8]
  return(result);
 800f264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10f      	bne.n	800f28a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f26a:	f3ef 8310 	mrs	r3, PRIMASK
 800f26e:	607b      	str	r3, [r7, #4]
  return(result);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d105      	bne.n	800f282 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f276:	f3ef 8311 	mrs	r3, BASEPRI
 800f27a:	603b      	str	r3, [r7, #0]
  return(result);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d007      	beq.n	800f292 <osKernelStart+0x3a>
 800f282:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <osKernelStart+0x68>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b02      	cmp	r3, #2
 800f288:	d103      	bne.n	800f292 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f28a:	f06f 0305 	mvn.w	r3, #5
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	e010      	b.n	800f2b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f292:	4b0b      	ldr	r3, [pc, #44]	; (800f2c0 <osKernelStart+0x68>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d109      	bne.n	800f2ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f29a:	f7ff ffa1 	bl	800f1e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f29e:	4b08      	ldr	r3, [pc, #32]	; (800f2c0 <osKernelStart+0x68>)
 800f2a0:	2202      	movs	r2, #2
 800f2a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f2a4:	f001 fce6 	bl	8010c74 <vTaskStartScheduler>
      stat = osOK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	e002      	b.n	800f2b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	200008c0 	.word	0x200008c0

0800f2c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b090      	sub	sp, #64	; 0x40
 800f2c8:	af04      	add	r7, sp, #16
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2d4:	f3ef 8305 	mrs	r3, IPSR
 800f2d8:	61fb      	str	r3, [r7, #28]
  return(result);
 800f2da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f040 808f 	bne.w	800f400 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2e2:	f3ef 8310 	mrs	r3, PRIMASK
 800f2e6:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d105      	bne.n	800f2fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2ee:	f3ef 8311 	mrs	r3, BASEPRI
 800f2f2:	617b      	str	r3, [r7, #20]
  return(result);
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d003      	beq.n	800f302 <osThreadNew+0x3e>
 800f2fa:	4b44      	ldr	r3, [pc, #272]	; (800f40c <osThreadNew+0x148>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b02      	cmp	r3, #2
 800f300:	d07e      	beq.n	800f400 <osThreadNew+0x13c>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d07b      	beq.n	800f400 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f308:	2340      	movs	r3, #64	; 0x40
 800f30a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f30c:	2318      	movs	r3, #24
 800f30e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f310:	2300      	movs	r3, #0
 800f312:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f314:	f04f 33ff 	mov.w	r3, #4294967295
 800f318:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d045      	beq.n	800f3ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <osThreadNew+0x6a>
        name = attr->name;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	699b      	ldr	r3, [r3, #24]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d002      	beq.n	800f33c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	699b      	ldr	r3, [r3, #24]
 800f33a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d008      	beq.n	800f354 <osThreadNew+0x90>
 800f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f344:	2b38      	cmp	r3, #56	; 0x38
 800f346:	d805      	bhi.n	800f354 <osThreadNew+0x90>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	f003 0301 	and.w	r3, r3, #1
 800f350:	2b00      	cmp	r3, #0
 800f352:	d001      	beq.n	800f358 <osThreadNew+0x94>
        return (NULL);
 800f354:	2300      	movs	r3, #0
 800f356:	e054      	b.n	800f402 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	695b      	ldr	r3, [r3, #20]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	089b      	lsrs	r3, r3, #2
 800f366:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00e      	beq.n	800f38e <osThreadNew+0xca>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	2b5b      	cmp	r3, #91	; 0x5b
 800f376:	d90a      	bls.n	800f38e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d006      	beq.n	800f38e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	695b      	ldr	r3, [r3, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <osThreadNew+0xca>
        mem = 1;
 800f388:	2301      	movs	r3, #1
 800f38a:	623b      	str	r3, [r7, #32]
 800f38c:	e010      	b.n	800f3b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10c      	bne.n	800f3b0 <osThreadNew+0xec>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d108      	bne.n	800f3b0 <osThreadNew+0xec>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d104      	bne.n	800f3b0 <osThreadNew+0xec>
          mem = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	623b      	str	r3, [r7, #32]
 800f3aa:	e001      	b.n	800f3b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f3b0:	6a3b      	ldr	r3, [r7, #32]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d110      	bne.n	800f3d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f3be:	9202      	str	r2, [sp, #8]
 800f3c0:	9301      	str	r3, [sp, #4]
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f001 fa7f 	bl	80108d0 <xTaskCreateStatic>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	613b      	str	r3, [r7, #16]
 800f3d6:	e013      	b.n	800f400 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d110      	bne.n	800f400 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	f107 0310 	add.w	r3, r7, #16
 800f3e6:	9301      	str	r3, [sp, #4]
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f001 fac7 	bl	8010984 <xTaskCreate>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d001      	beq.n	800f400 <osThreadNew+0x13c>
          hTask = NULL;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f400:	693b      	ldr	r3, [r7, #16]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3730      	adds	r7, #48	; 0x30
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	200008c0 	.word	0x200008c0

0800f410 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f418:	f3ef 8305 	mrs	r3, IPSR
 800f41c:	613b      	str	r3, [r7, #16]
  return(result);
 800f41e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10f      	bne.n	800f444 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f424:	f3ef 8310 	mrs	r3, PRIMASK
 800f428:	60fb      	str	r3, [r7, #12]
  return(result);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d105      	bne.n	800f43c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f430:	f3ef 8311 	mrs	r3, BASEPRI
 800f434:	60bb      	str	r3, [r7, #8]
  return(result);
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d007      	beq.n	800f44c <osDelay+0x3c>
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <osDelay+0x58>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b02      	cmp	r3, #2
 800f442:	d103      	bne.n	800f44c <osDelay+0x3c>
    stat = osErrorISR;
 800f444:	f06f 0305 	mvn.w	r3, #5
 800f448:	617b      	str	r3, [r7, #20]
 800f44a:	e007      	b.n	800f45c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f44c:	2300      	movs	r3, #0
 800f44e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <osDelay+0x4c>
      vTaskDelay(ticks);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f001 fbd8 	bl	8010c0c <vTaskDelay>
    }
  }

  return (stat);
 800f45c:	697b      	ldr	r3, [r7, #20]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	200008c0 	.word	0x200008c0

0800f46c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08c      	sub	sp, #48	; 0x30
 800f470:	af02      	add	r7, sp, #8
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f478:	2300      	movs	r3, #0
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f47c:	f3ef 8305 	mrs	r3, IPSR
 800f480:	61bb      	str	r3, [r7, #24]
  return(result);
 800f482:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f484:	2b00      	cmp	r3, #0
 800f486:	f040 8087 	bne.w	800f598 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f48a:	f3ef 8310 	mrs	r3, PRIMASK
 800f48e:	617b      	str	r3, [r7, #20]
  return(result);
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d105      	bne.n	800f4a2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f496:	f3ef 8311 	mrs	r3, BASEPRI
 800f49a:	613b      	str	r3, [r7, #16]
  return(result);
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d003      	beq.n	800f4aa <osSemaphoreNew+0x3e>
 800f4a2:	4b40      	ldr	r3, [pc, #256]	; (800f5a4 <osSemaphoreNew+0x138>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	d076      	beq.n	800f598 <osSemaphoreNew+0x12c>
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d073      	beq.n	800f598 <osSemaphoreNew+0x12c>
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d86f      	bhi.n	800f598 <osSemaphoreNew+0x12c>
    mem = -1;
 800f4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d015      	beq.n	800f4f0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d006      	beq.n	800f4da <osSemaphoreNew+0x6e>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	2b4f      	cmp	r3, #79	; 0x4f
 800f4d2:	d902      	bls.n	800f4da <osSemaphoreNew+0x6e>
        mem = 1;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	623b      	str	r3, [r7, #32]
 800f4d8:	e00c      	b.n	800f4f4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d108      	bne.n	800f4f4 <osSemaphoreNew+0x88>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d104      	bne.n	800f4f4 <osSemaphoreNew+0x88>
          mem = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	623b      	str	r3, [r7, #32]
 800f4ee:	e001      	b.n	800f4f4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f4f4:	6a3b      	ldr	r3, [r7, #32]
 800f4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fa:	d04d      	beq.n	800f598 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d129      	bne.n	800f556 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d10b      	bne.n	800f520 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	2303      	movs	r3, #3
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	4613      	mov	r3, r2
 800f512:	2200      	movs	r2, #0
 800f514:	2100      	movs	r1, #0
 800f516:	2001      	movs	r0, #1
 800f518:	f000 fa54 	bl	800f9c4 <xQueueGenericCreateStatic>
 800f51c:	6278      	str	r0, [r7, #36]	; 0x24
 800f51e:	e005      	b.n	800f52c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f520:	2203      	movs	r2, #3
 800f522:	2100      	movs	r1, #0
 800f524:	2001      	movs	r0, #1
 800f526:	f000 fac0 	bl	800faaa <xQueueGenericCreate>
 800f52a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d022      	beq.n	800f578 <osSemaphoreNew+0x10c>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d01f      	beq.n	800f578 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f538:	2300      	movs	r3, #0
 800f53a:	2200      	movs	r2, #0
 800f53c:	2100      	movs	r1, #0
 800f53e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f540:	f000 fb7c 	bl	800fc3c <xQueueGenericSend>
 800f544:	4603      	mov	r3, r0
 800f546:	2b01      	cmp	r3, #1
 800f548:	d016      	beq.n	800f578 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800f54a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f54c:	f000 ffef 	bl	801052e <vQueueDelete>
            hSemaphore = NULL;
 800f550:	2300      	movs	r3, #0
 800f552:	627b      	str	r3, [r7, #36]	; 0x24
 800f554:	e010      	b.n	800f578 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d108      	bne.n	800f56e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	461a      	mov	r2, r3
 800f562:	68b9      	ldr	r1, [r7, #8]
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f000 fb02 	bl	800fb6e <xQueueCreateCountingSemaphoreStatic>
 800f56a:	6278      	str	r0, [r7, #36]	; 0x24
 800f56c:	e004      	b.n	800f578 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f56e:	68b9      	ldr	r1, [r7, #8]
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f000 fb31 	bl	800fbd8 <xQueueCreateCountingSemaphore>
 800f576:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00c      	beq.n	800f598 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d003      	beq.n	800f58c <osSemaphoreNew+0x120>
          name = attr->name;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	61fb      	str	r3, [r7, #28]
 800f58a:	e001      	b.n	800f590 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800f58c:	2300      	movs	r3, #0
 800f58e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f590:	69f9      	ldr	r1, [r7, #28]
 800f592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f594:	f001 f916 	bl	80107c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3728      	adds	r7, #40	; 0x28
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	200008c0 	.word	0x200008c0

0800f5a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b088      	sub	sp, #32
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d103      	bne.n	800f5c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f5c0:	f06f 0303 	mvn.w	r3, #3
 800f5c4:	61fb      	str	r3, [r7, #28]
 800f5c6:	e04b      	b.n	800f660 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5c8:	f3ef 8305 	mrs	r3, IPSR
 800f5cc:	617b      	str	r3, [r7, #20]
  return(result);
 800f5ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10f      	bne.n	800f5f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5d8:	613b      	str	r3, [r7, #16]
  return(result);
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d105      	bne.n	800f5ec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5e0:	f3ef 8311 	mrs	r3, BASEPRI
 800f5e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d026      	beq.n	800f63a <osSemaphoreAcquire+0x92>
 800f5ec:	4b1f      	ldr	r3, [pc, #124]	; (800f66c <osSemaphoreAcquire+0xc4>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b02      	cmp	r3, #2
 800f5f2:	d122      	bne.n	800f63a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f5fa:	f06f 0303 	mvn.w	r3, #3
 800f5fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f600:	e02d      	b.n	800f65e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f602:	2300      	movs	r3, #0
 800f604:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f606:	f107 0308 	add.w	r3, r7, #8
 800f60a:	461a      	mov	r2, r3
 800f60c:	2100      	movs	r1, #0
 800f60e:	69b8      	ldr	r0, [r7, #24]
 800f610:	f000 ff10 	bl	8010434 <xQueueReceiveFromISR>
 800f614:	4603      	mov	r3, r0
 800f616:	2b01      	cmp	r3, #1
 800f618:	d003      	beq.n	800f622 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f61a:	f06f 0302 	mvn.w	r3, #2
 800f61e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f620:	e01d      	b.n	800f65e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01a      	beq.n	800f65e <osSemaphoreAcquire+0xb6>
 800f628:	4b11      	ldr	r3, [pc, #68]	; (800f670 <osSemaphoreAcquire+0xc8>)
 800f62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f62e:	601a      	str	r2, [r3, #0]
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f638:	e011      	b.n	800f65e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f000 fdf1 	bl	8010224 <xQueueSemaphoreTake>
 800f642:	4603      	mov	r3, r0
 800f644:	2b01      	cmp	r3, #1
 800f646:	d00b      	beq.n	800f660 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d003      	beq.n	800f656 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f64e:	f06f 0301 	mvn.w	r3, #1
 800f652:	61fb      	str	r3, [r7, #28]
 800f654:	e004      	b.n	800f660 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f656:	f06f 0302 	mvn.w	r3, #2
 800f65a:	61fb      	str	r3, [r7, #28]
 800f65c:	e000      	b.n	800f660 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f65e:	bf00      	nop
      }
    }
  }

  return (stat);
 800f660:	69fb      	ldr	r3, [r7, #28]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3720      	adds	r7, #32
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	200008c0 	.word	0x200008c0
 800f670:	e000ed04 	.word	0xe000ed04

0800f674 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f674:	b580      	push	{r7, lr}
 800f676:	b088      	sub	sp, #32
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f680:	2300      	movs	r3, #0
 800f682:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d103      	bne.n	800f692 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f68a:	f06f 0303 	mvn.w	r3, #3
 800f68e:	61fb      	str	r3, [r7, #28]
 800f690:	e03e      	b.n	800f710 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f692:	f3ef 8305 	mrs	r3, IPSR
 800f696:	617b      	str	r3, [r7, #20]
  return(result);
 800f698:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d10f      	bne.n	800f6be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f69e:	f3ef 8310 	mrs	r3, PRIMASK
 800f6a2:	613b      	str	r3, [r7, #16]
  return(result);
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d105      	bne.n	800f6b6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6aa:	f3ef 8311 	mrs	r3, BASEPRI
 800f6ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d01e      	beq.n	800f6f4 <osSemaphoreRelease+0x80>
 800f6b6:	4b19      	ldr	r3, [pc, #100]	; (800f71c <osSemaphoreRelease+0xa8>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d11a      	bne.n	800f6f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6c2:	f107 0308 	add.w	r3, r7, #8
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	69b8      	ldr	r0, [r7, #24]
 800f6ca:	f000 fc45 	bl	800ff58 <xQueueGiveFromISR>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d003      	beq.n	800f6dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f6d4:	f06f 0302 	mvn.w	r3, #2
 800f6d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6da:	e018      	b.n	800f70e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d015      	beq.n	800f70e <osSemaphoreRelease+0x9a>
 800f6e2:	4b0f      	ldr	r3, [pc, #60]	; (800f720 <osSemaphoreRelease+0xac>)
 800f6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6f2:	e00c      	b.n	800f70e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	69b8      	ldr	r0, [r7, #24]
 800f6fc:	f000 fa9e 	bl	800fc3c <xQueueGenericSend>
 800f700:	4603      	mov	r3, r0
 800f702:	2b01      	cmp	r3, #1
 800f704:	d004      	beq.n	800f710 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f706:	f06f 0302 	mvn.w	r3, #2
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	e000      	b.n	800f710 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f70e:	bf00      	nop
    }
  }

  return (stat);
 800f710:	69fb      	ldr	r3, [r7, #28]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3720      	adds	r7, #32
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	200008c0 	.word	0x200008c0
 800f720:	e000ed04 	.word	0xe000ed04

0800f724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	4a07      	ldr	r2, [pc, #28]	; (800f750 <vApplicationGetIdleTaskMemory+0x2c>)
 800f734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	4a06      	ldr	r2, [pc, #24]	; (800f754 <vApplicationGetIdleTaskMemory+0x30>)
 800f73a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2240      	movs	r2, #64	; 0x40
 800f740:	601a      	str	r2, [r3, #0]
}
 800f742:	bf00      	nop
 800f744:	3714      	adds	r7, #20
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	200008c4 	.word	0x200008c4
 800f754:	20000920 	.word	0x20000920

0800f758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	4a07      	ldr	r2, [pc, #28]	; (800f784 <vApplicationGetTimerTaskMemory+0x2c>)
 800f768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	4a06      	ldr	r2, [pc, #24]	; (800f788 <vApplicationGetTimerTaskMemory+0x30>)
 800f76e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f776:	601a      	str	r2, [r3, #0]
}
 800f778:	bf00      	nop
 800f77a:	3714      	adds	r7, #20
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	20000a20 	.word	0x20000a20
 800f788:	20000a7c 	.word	0x20000a7c

0800f78c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f103 0208 	add.w	r2, r3, #8
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f103 0208 	add.w	r2, r3, #8
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f103 0208 	add.w	r2, r3, #8
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f7c0:	bf00      	nop
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f7da:	bf00      	nop
 800f7dc:	370c      	adds	r7, #12
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr

0800f7e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7e6:	b480      	push	{r7}
 800f7e8:	b085      	sub	sp, #20
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	689a      	ldr	r2, [r3, #8]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	683a      	ldr	r2, [r7, #0]
 800f80a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	601a      	str	r2, [r3, #0]
}
 800f822:	bf00      	nop
 800f824:	3714      	adds	r7, #20
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f82e:	b480      	push	{r7}
 800f830:	b085      	sub	sp, #20
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f844:	d103      	bne.n	800f84e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	e00c      	b.n	800f868 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3308      	adds	r3, #8
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e002      	b.n	800f85c <vListInsert+0x2e>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	60fb      	str	r3, [r7, #12]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	429a      	cmp	r2, r3
 800f866:	d2f6      	bcs.n	800f856 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	685a      	ldr	r2, [r3, #4]
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	683a      	ldr	r2, [r7, #0]
 800f876:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	683a      	ldr	r2, [r7, #0]
 800f882:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	1c5a      	adds	r2, r3, #1
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	601a      	str	r2, [r3, #0]
}
 800f894:	bf00      	nop
 800f896:	3714      	adds	r7, #20
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	6892      	ldr	r2, [r2, #8]
 800f8b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	6852      	ldr	r2, [r2, #4]
 800f8c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d103      	bne.n	800f8d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	689a      	ldr	r2, [r3, #8]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	1e5a      	subs	r2, r3, #1
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3714      	adds	r7, #20
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d109      	bne.n	800f91c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	60bb      	str	r3, [r7, #8]
 800f91a:	e7fe      	b.n	800f91a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f91c:	f002 fc26 	bl	801216c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f928:	68f9      	ldr	r1, [r7, #12]
 800f92a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f92c:	fb01 f303 	mul.w	r3, r1, r3
 800f930:	441a      	add	r2, r3
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f94c:	3b01      	subs	r3, #1
 800f94e:	68f9      	ldr	r1, [r7, #12]
 800f950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f952:	fb01 f303 	mul.w	r3, r1, r3
 800f956:	441a      	add	r2, r3
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	22ff      	movs	r2, #255	; 0xff
 800f960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	22ff      	movs	r2, #255	; 0xff
 800f968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d114      	bne.n	800f99c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d01a      	beq.n	800f9b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	3310      	adds	r3, #16
 800f97e:	4618      	mov	r0, r3
 800f980:	f001 fbf8 	bl	8011174 <xTaskRemoveFromEventList>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d012      	beq.n	800f9b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f98a:	4b0d      	ldr	r3, [pc, #52]	; (800f9c0 <xQueueGenericReset+0xcc>)
 800f98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	e009      	b.n	800f9b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	3310      	adds	r3, #16
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7ff fef3 	bl	800f78c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	3324      	adds	r3, #36	; 0x24
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff feee 	bl	800f78c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f9b0:	f002 fc0a 	bl	80121c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f9b4:	2301      	movs	r3, #1
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	e000ed04 	.word	0xe000ed04

0800f9c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b08e      	sub	sp, #56	; 0x38
 800f9c8:	af02      	add	r7, sp, #8
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
 800f9d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d109      	bne.n	800f9ec <xQueueGenericCreateStatic+0x28>
 800f9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9dc:	f383 8811 	msr	BASEPRI, r3
 800f9e0:	f3bf 8f6f 	isb	sy
 800f9e4:	f3bf 8f4f 	dsb	sy
 800f9e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9ea:	e7fe      	b.n	800f9ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d109      	bne.n	800fa06 <xQueueGenericCreateStatic+0x42>
 800f9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	627b      	str	r3, [r7, #36]	; 0x24
 800fa04:	e7fe      	b.n	800fa04 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d002      	beq.n	800fa12 <xQueueGenericCreateStatic+0x4e>
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <xQueueGenericCreateStatic+0x52>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <xQueueGenericCreateStatic+0x54>
 800fa16:	2300      	movs	r3, #0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d109      	bne.n	800fa30 <xQueueGenericCreateStatic+0x6c>
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	623b      	str	r3, [r7, #32]
 800fa2e:	e7fe      	b.n	800fa2e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d102      	bne.n	800fa3c <xQueueGenericCreateStatic+0x78>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d101      	bne.n	800fa40 <xQueueGenericCreateStatic+0x7c>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e000      	b.n	800fa42 <xQueueGenericCreateStatic+0x7e>
 800fa40:	2300      	movs	r3, #0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d109      	bne.n	800fa5a <xQueueGenericCreateStatic+0x96>
 800fa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4a:	f383 8811 	msr	BASEPRI, r3
 800fa4e:	f3bf 8f6f 	isb	sy
 800fa52:	f3bf 8f4f 	dsb	sy
 800fa56:	61fb      	str	r3, [r7, #28]
 800fa58:	e7fe      	b.n	800fa58 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa5a:	2350      	movs	r3, #80	; 0x50
 800fa5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	2b50      	cmp	r3, #80	; 0x50
 800fa62:	d009      	beq.n	800fa78 <xQueueGenericCreateStatic+0xb4>
 800fa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	61bb      	str	r3, [r7, #24]
 800fa76:	e7fe      	b.n	800fa76 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fa78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00d      	beq.n	800faa0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa8c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	4613      	mov	r3, r2
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	68b9      	ldr	r1, [r7, #8]
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f000 f844 	bl	800fb28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800faa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3730      	adds	r7, #48	; 0x30
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b08a      	sub	sp, #40	; 0x28
 800faae:	af02      	add	r7, sp, #8
 800fab0:	60f8      	str	r0, [r7, #12]
 800fab2:	60b9      	str	r1, [r7, #8]
 800fab4:	4613      	mov	r3, r2
 800fab6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <xQueueGenericCreate+0x28>
 800fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	613b      	str	r3, [r7, #16]
 800fad0:	e7fe      	b.n	800fad0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d102      	bne.n	800fade <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	61fb      	str	r3, [r7, #28]
 800fadc:	e004      	b.n	800fae8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	fb02 f303 	mul.w	r3, r2, r3
 800fae6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	3350      	adds	r3, #80	; 0x50
 800faec:	4618      	mov	r0, r3
 800faee:	f002 fc57 	bl	80123a0 <pvPortMalloc>
 800faf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d011      	beq.n	800fb1e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	3350      	adds	r3, #80	; 0x50
 800fb02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	2200      	movs	r2, #0
 800fb08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb0c:	79fa      	ldrb	r2, [r7, #7]
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	9300      	str	r3, [sp, #0]
 800fb12:	4613      	mov	r3, r2
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	68b9      	ldr	r1, [r7, #8]
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f000 f805 	bl	800fb28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb1e:	69bb      	ldr	r3, [r7, #24]
	}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3720      	adds	r7, #32
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d103      	bne.n	800fb44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fb3c:	69bb      	ldr	r3, [r7, #24]
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	e002      	b.n	800fb4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb56:	2101      	movs	r1, #1
 800fb58:	69b8      	ldr	r0, [r7, #24]
 800fb5a:	f7ff fecb 	bl	800f8f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	78fa      	ldrb	r2, [r7, #3]
 800fb62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fb66:	bf00      	nop
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b08a      	sub	sp, #40	; 0x28
 800fb72:	af02      	add	r7, sp, #8
 800fb74:	60f8      	str	r0, [r7, #12]
 800fb76:	60b9      	str	r1, [r7, #8]
 800fb78:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d109      	bne.n	800fb94 <xQueueCreateCountingSemaphoreStatic+0x26>
 800fb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	61bb      	str	r3, [r7, #24]
 800fb92:	e7fe      	b.n	800fb92 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d909      	bls.n	800fbb0 <xQueueCreateCountingSemaphoreStatic+0x42>
 800fb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba0:	f383 8811 	msr	BASEPRI, r3
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	617b      	str	r3, [r7, #20]
 800fbae:	e7fe      	b.n	800fbae <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	2100      	movs	r1, #0
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7ff ff02 	bl	800f9c4 <xQueueGenericCreateStatic>
 800fbc0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d002      	beq.n	800fbce <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fbce:	69fb      	ldr	r3, [r7, #28]
	}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3720      	adds	r7, #32
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d109      	bne.n	800fbfc <xQueueCreateCountingSemaphore+0x24>
 800fbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbec:	f383 8811 	msr	BASEPRI, r3
 800fbf0:	f3bf 8f6f 	isb	sy
 800fbf4:	f3bf 8f4f 	dsb	sy
 800fbf8:	613b      	str	r3, [r7, #16]
 800fbfa:	e7fe      	b.n	800fbfa <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d909      	bls.n	800fc18 <xQueueCreateCountingSemaphore+0x40>
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	f383 8811 	msr	BASEPRI, r3
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	60fb      	str	r3, [r7, #12]
 800fc16:	e7fe      	b.n	800fc16 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fc18:	2202      	movs	r2, #2
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ff44 	bl	800faaa <xQueueGenericCreate>
 800fc22:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	683a      	ldr	r2, [r7, #0]
 800fc2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fc30:	697b      	ldr	r3, [r7, #20]
	}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3718      	adds	r7, #24
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b08e      	sub	sp, #56	; 0x38
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d109      	bne.n	800fc6c <xQueueGenericSend+0x30>
 800fc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5c:	f383 8811 	msr	BASEPRI, r3
 800fc60:	f3bf 8f6f 	isb	sy
 800fc64:	f3bf 8f4f 	dsb	sy
 800fc68:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc6a:	e7fe      	b.n	800fc6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d103      	bne.n	800fc7a <xQueueGenericSend+0x3e>
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <xQueueGenericSend+0x42>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e000      	b.n	800fc80 <xQueueGenericSend+0x44>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d109      	bne.n	800fc98 <xQueueGenericSend+0x5c>
 800fc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc88:	f383 8811 	msr	BASEPRI, r3
 800fc8c:	f3bf 8f6f 	isb	sy
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	627b      	str	r3, [r7, #36]	; 0x24
 800fc96:	e7fe      	b.n	800fc96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d103      	bne.n	800fca6 <xQueueGenericSend+0x6a>
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d101      	bne.n	800fcaa <xQueueGenericSend+0x6e>
 800fca6:	2301      	movs	r3, #1
 800fca8:	e000      	b.n	800fcac <xQueueGenericSend+0x70>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d109      	bne.n	800fcc4 <xQueueGenericSend+0x88>
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	623b      	str	r3, [r7, #32]
 800fcc2:	e7fe      	b.n	800fcc2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fcc4:	f001 fc0c 	bl	80114e0 <xTaskGetSchedulerState>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d102      	bne.n	800fcd4 <xQueueGenericSend+0x98>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d101      	bne.n	800fcd8 <xQueueGenericSend+0x9c>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	e000      	b.n	800fcda <xQueueGenericSend+0x9e>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d109      	bne.n	800fcf2 <xQueueGenericSend+0xb6>
 800fcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	61fb      	str	r3, [r7, #28]
 800fcf0:	e7fe      	b.n	800fcf0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcf2:	f002 fa3b 	bl	801216c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d302      	bcc.n	800fd08 <xQueueGenericSend+0xcc>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d129      	bne.n	800fd5c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd08:	683a      	ldr	r2, [r7, #0]
 800fd0a:	68b9      	ldr	r1, [r7, #8]
 800fd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd0e:	f000 fc48 	bl	80105a2 <prvCopyDataToQueue>
 800fd12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d010      	beq.n	800fd3e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1e:	3324      	adds	r3, #36	; 0x24
 800fd20:	4618      	mov	r0, r3
 800fd22:	f001 fa27 	bl	8011174 <xTaskRemoveFromEventList>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d013      	beq.n	800fd54 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fd2c:	4b3f      	ldr	r3, [pc, #252]	; (800fe2c <xQueueGenericSend+0x1f0>)
 800fd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	f3bf 8f4f 	dsb	sy
 800fd38:	f3bf 8f6f 	isb	sy
 800fd3c:	e00a      	b.n	800fd54 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d007      	beq.n	800fd54 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fd44:	4b39      	ldr	r3, [pc, #228]	; (800fe2c <xQueueGenericSend+0x1f0>)
 800fd46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fd54:	f002 fa38 	bl	80121c8 <vPortExitCritical>
				return pdPASS;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e063      	b.n	800fe24 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d103      	bne.n	800fd6a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd62:	f002 fa31 	bl	80121c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fd66:	2300      	movs	r3, #0
 800fd68:	e05c      	b.n	800fe24 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d106      	bne.n	800fd7e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd70:	f107 0314 	add.w	r3, r7, #20
 800fd74:	4618      	mov	r0, r3
 800fd76:	f001 fa5f 	bl	8011238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd7e:	f002 fa23 	bl	80121c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd82:	f000 ffdb 	bl	8010d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd86:	f002 f9f1 	bl	801216c <vPortEnterCritical>
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd90:	b25b      	sxtb	r3, r3
 800fd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd96:	d103      	bne.n	800fda0 <xQueueGenericSend+0x164>
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fda6:	b25b      	sxtb	r3, r3
 800fda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdac:	d103      	bne.n	800fdb6 <xQueueGenericSend+0x17a>
 800fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fdb6:	f002 fa07 	bl	80121c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdba:	1d3a      	adds	r2, r7, #4
 800fdbc:	f107 0314 	add.w	r3, r7, #20
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f001 fa4e 	bl	8011264 <xTaskCheckForTimeOut>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d124      	bne.n	800fe18 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fdce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdd0:	f000 fcdf 	bl	8010792 <prvIsQueueFull>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d018      	beq.n	800fe0c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fddc:	3310      	adds	r3, #16
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	4611      	mov	r1, r2
 800fde2:	4618      	mov	r0, r3
 800fde4:	f001 f978 	bl	80110d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdea:	f000 fc6a 	bl	80106c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fdee:	f000 ffb3 	bl	8010d58 <xTaskResumeAll>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f47f af7c 	bne.w	800fcf2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800fdfa:	4b0c      	ldr	r3, [pc, #48]	; (800fe2c <xQueueGenericSend+0x1f0>)
 800fdfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	e772      	b.n	800fcf2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fe0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe0e:	f000 fc58 	bl	80106c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe12:	f000 ffa1 	bl	8010d58 <xTaskResumeAll>
 800fe16:	e76c      	b.n	800fcf2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fe18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe1a:	f000 fc52 	bl	80106c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe1e:	f000 ff9b 	bl	8010d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fe22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3738      	adds	r7, #56	; 0x38
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	e000ed04 	.word	0xe000ed04

0800fe30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08e      	sub	sp, #56	; 0x38
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d109      	bne.n	800fe5c <xQueueGenericSendFromISR+0x2c>
 800fe48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4c:	f383 8811 	msr	BASEPRI, r3
 800fe50:	f3bf 8f6f 	isb	sy
 800fe54:	f3bf 8f4f 	dsb	sy
 800fe58:	627b      	str	r3, [r7, #36]	; 0x24
 800fe5a:	e7fe      	b.n	800fe5a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d103      	bne.n	800fe6a <xQueueGenericSendFromISR+0x3a>
 800fe62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d101      	bne.n	800fe6e <xQueueGenericSendFromISR+0x3e>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e000      	b.n	800fe70 <xQueueGenericSendFromISR+0x40>
 800fe6e:	2300      	movs	r3, #0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d109      	bne.n	800fe88 <xQueueGenericSendFromISR+0x58>
 800fe74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	623b      	str	r3, [r7, #32]
 800fe86:	e7fe      	b.n	800fe86 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d103      	bne.n	800fe96 <xQueueGenericSendFromISR+0x66>
 800fe8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d101      	bne.n	800fe9a <xQueueGenericSendFromISR+0x6a>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e000      	b.n	800fe9c <xQueueGenericSendFromISR+0x6c>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d109      	bne.n	800feb4 <xQueueGenericSendFromISR+0x84>
 800fea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea4:	f383 8811 	msr	BASEPRI, r3
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	61fb      	str	r3, [r7, #28]
 800feb2:	e7fe      	b.n	800feb2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800feb4:	f002 fa36 	bl	8012324 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800feb8:	f3ef 8211 	mrs	r2, BASEPRI
 800febc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	61ba      	str	r2, [r7, #24]
 800fece:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fed0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fed2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fedc:	429a      	cmp	r2, r3
 800fede:	d302      	bcc.n	800fee6 <xQueueGenericSendFromISR+0xb6>
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d12c      	bne.n	800ff40 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800feec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fef0:	683a      	ldr	r2, [r7, #0]
 800fef2:	68b9      	ldr	r1, [r7, #8]
 800fef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fef6:	f000 fb54 	bl	80105a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fefa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff02:	d112      	bne.n	800ff2a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d016      	beq.n	800ff3a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0e:	3324      	adds	r3, #36	; 0x24
 800ff10:	4618      	mov	r0, r3
 800ff12:	f001 f92f 	bl	8011174 <xTaskRemoveFromEventList>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00e      	beq.n	800ff3a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00b      	beq.n	800ff3a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2201      	movs	r2, #1
 800ff26:	601a      	str	r2, [r3, #0]
 800ff28:	e007      	b.n	800ff3a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff2e:	3301      	adds	r3, #1
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	b25a      	sxtb	r2, r3
 800ff34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ff3e:	e001      	b.n	800ff44 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff40:	2300      	movs	r3, #0
 800ff42:	637b      	str	r3, [r7, #52]	; 0x34
 800ff44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3738      	adds	r7, #56	; 0x38
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b08e      	sub	sp, #56	; 0x38
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d109      	bne.n	800ff80 <xQueueGiveFromISR+0x28>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	623b      	str	r3, [r7, #32]
 800ff7e:	e7fe      	b.n	800ff7e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ff80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d009      	beq.n	800ff9c <xQueueGiveFromISR+0x44>
 800ff88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	61fb      	str	r3, [r7, #28]
 800ff9a:	e7fe      	b.n	800ff9a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d103      	bne.n	800ffac <xQueueGiveFromISR+0x54>
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d101      	bne.n	800ffb0 <xQueueGiveFromISR+0x58>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e000      	b.n	800ffb2 <xQueueGiveFromISR+0x5a>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d109      	bne.n	800ffca <xQueueGiveFromISR+0x72>
 800ffb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	61bb      	str	r3, [r7, #24]
 800ffc8:	e7fe      	b.n	800ffc8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ffca:	f002 f9ab 	bl	8012324 <vPortValidateInterruptPriority>
	__asm volatile
 800ffce:	f3ef 8211 	mrs	r2, BASEPRI
 800ffd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd6:	f383 8811 	msr	BASEPRI, r3
 800ffda:	f3bf 8f6f 	isb	sy
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	617a      	str	r2, [r7, #20]
 800ffe4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ffe6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ffe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d22b      	bcs.n	8010052 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010006:	1c5a      	adds	r2, r3, #1
 8010008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801000c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010014:	d112      	bne.n	801003c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001a:	2b00      	cmp	r3, #0
 801001c:	d016      	beq.n	801004c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801001e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010020:	3324      	adds	r3, #36	; 0x24
 8010022:	4618      	mov	r0, r3
 8010024:	f001 f8a6 	bl	8011174 <xTaskRemoveFromEventList>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00e      	beq.n	801004c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00b      	beq.n	801004c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2201      	movs	r2, #1
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	e007      	b.n	801004c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801003c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010040:	3301      	adds	r3, #1
 8010042:	b2db      	uxtb	r3, r3
 8010044:	b25a      	sxtb	r2, r3
 8010046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801004c:	2301      	movs	r3, #1
 801004e:	637b      	str	r3, [r7, #52]	; 0x34
 8010050:	e001      	b.n	8010056 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010052:	2300      	movs	r3, #0
 8010054:	637b      	str	r3, [r7, #52]	; 0x34
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010062:	4618      	mov	r0, r3
 8010064:	3738      	adds	r7, #56	; 0x38
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
	...

0801006c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b08c      	sub	sp, #48	; 0x30
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010078:	2300      	movs	r3, #0
 801007a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010082:	2b00      	cmp	r3, #0
 8010084:	d109      	bne.n	801009a <xQueueReceive+0x2e>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	623b      	str	r3, [r7, #32]
 8010098:	e7fe      	b.n	8010098 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d103      	bne.n	80100a8 <xQueueReceive+0x3c>
 80100a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <xQueueReceive+0x40>
 80100a8:	2301      	movs	r3, #1
 80100aa:	e000      	b.n	80100ae <xQueueReceive+0x42>
 80100ac:	2300      	movs	r3, #0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d109      	bne.n	80100c6 <xQueueReceive+0x5a>
 80100b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	61fb      	str	r3, [r7, #28]
 80100c4:	e7fe      	b.n	80100c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100c6:	f001 fa0b 	bl	80114e0 <xTaskGetSchedulerState>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d102      	bne.n	80100d6 <xQueueReceive+0x6a>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <xQueueReceive+0x6e>
 80100d6:	2301      	movs	r3, #1
 80100d8:	e000      	b.n	80100dc <xQueueReceive+0x70>
 80100da:	2300      	movs	r3, #0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d109      	bne.n	80100f4 <xQueueReceive+0x88>
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	61bb      	str	r3, [r7, #24]
 80100f2:	e7fe      	b.n	80100f2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100f4:	f002 f83a 	bl	801216c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010100:	2b00      	cmp	r3, #0
 8010102:	d01f      	beq.n	8010144 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010104:	68b9      	ldr	r1, [r7, #8]
 8010106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010108:	f000 fab5 	bl	8010676 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010e:	1e5a      	subs	r2, r3, #1
 8010110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010112:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010116:	691b      	ldr	r3, [r3, #16]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00f      	beq.n	801013c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801011c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011e:	3310      	adds	r3, #16
 8010120:	4618      	mov	r0, r3
 8010122:	f001 f827 	bl	8011174 <xTaskRemoveFromEventList>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d007      	beq.n	801013c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801012c:	4b3c      	ldr	r3, [pc, #240]	; (8010220 <xQueueReceive+0x1b4>)
 801012e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010132:	601a      	str	r2, [r3, #0]
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801013c:	f002 f844 	bl	80121c8 <vPortExitCritical>
				return pdPASS;
 8010140:	2301      	movs	r3, #1
 8010142:	e069      	b.n	8010218 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d103      	bne.n	8010152 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801014a:	f002 f83d 	bl	80121c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801014e:	2300      	movs	r3, #0
 8010150:	e062      	b.n	8010218 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010154:	2b00      	cmp	r3, #0
 8010156:	d106      	bne.n	8010166 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010158:	f107 0310 	add.w	r3, r7, #16
 801015c:	4618      	mov	r0, r3
 801015e:	f001 f86b 	bl	8011238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010162:	2301      	movs	r3, #1
 8010164:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010166:	f002 f82f 	bl	80121c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801016a:	f000 fde7 	bl	8010d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801016e:	f001 fffd 	bl	801216c <vPortEnterCritical>
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010178:	b25b      	sxtb	r3, r3
 801017a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017e:	d103      	bne.n	8010188 <xQueueReceive+0x11c>
 8010180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010182:	2200      	movs	r2, #0
 8010184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801018e:	b25b      	sxtb	r3, r3
 8010190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010194:	d103      	bne.n	801019e <xQueueReceive+0x132>
 8010196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010198:	2200      	movs	r2, #0
 801019a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801019e:	f002 f813 	bl	80121c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101a2:	1d3a      	adds	r2, r7, #4
 80101a4:	f107 0310 	add.w	r3, r7, #16
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f001 f85a 	bl	8011264 <xTaskCheckForTimeOut>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d123      	bne.n	80101fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101b8:	f000 fad5 	bl	8010766 <prvIsQueueEmpty>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d017      	beq.n	80101f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c4:	3324      	adds	r3, #36	; 0x24
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	4611      	mov	r1, r2
 80101ca:	4618      	mov	r0, r3
 80101cc:	f000 ff84 	bl	80110d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101d2:	f000 fa76 	bl	80106c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80101d6:	f000 fdbf 	bl	8010d58 <xTaskResumeAll>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d189      	bne.n	80100f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80101e0:	4b0f      	ldr	r3, [pc, #60]	; (8010220 <xQueueReceive+0x1b4>)
 80101e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101e6:	601a      	str	r2, [r3, #0]
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	e780      	b.n	80100f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80101f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101f4:	f000 fa65 	bl	80106c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101f8:	f000 fdae 	bl	8010d58 <xTaskResumeAll>
 80101fc:	e77a      	b.n	80100f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80101fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010200:	f000 fa5f 	bl	80106c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010204:	f000 fda8 	bl	8010d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801020a:	f000 faac 	bl	8010766 <prvIsQueueEmpty>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	f43f af6f 	beq.w	80100f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010216:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010218:	4618      	mov	r0, r3
 801021a:	3730      	adds	r7, #48	; 0x30
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	e000ed04 	.word	0xe000ed04

08010224 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b08e      	sub	sp, #56	; 0x38
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801022e:	2300      	movs	r3, #0
 8010230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010236:	2300      	movs	r3, #0
 8010238:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023c:	2b00      	cmp	r3, #0
 801023e:	d109      	bne.n	8010254 <xQueueSemaphoreTake+0x30>
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	623b      	str	r3, [r7, #32]
 8010252:	e7fe      	b.n	8010252 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010258:	2b00      	cmp	r3, #0
 801025a:	d009      	beq.n	8010270 <xQueueSemaphoreTake+0x4c>
 801025c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010260:	f383 8811 	msr	BASEPRI, r3
 8010264:	f3bf 8f6f 	isb	sy
 8010268:	f3bf 8f4f 	dsb	sy
 801026c:	61fb      	str	r3, [r7, #28]
 801026e:	e7fe      	b.n	801026e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010270:	f001 f936 	bl	80114e0 <xTaskGetSchedulerState>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d102      	bne.n	8010280 <xQueueSemaphoreTake+0x5c>
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <xQueueSemaphoreTake+0x60>
 8010280:	2301      	movs	r3, #1
 8010282:	e000      	b.n	8010286 <xQueueSemaphoreTake+0x62>
 8010284:	2300      	movs	r3, #0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d109      	bne.n	801029e <xQueueSemaphoreTake+0x7a>
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	61bb      	str	r3, [r7, #24]
 801029c:	e7fe      	b.n	801029c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801029e:	f001 ff65 	bl	801216c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80102a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d024      	beq.n	80102f8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80102ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b0:	1e5a      	subs	r2, r3, #1
 80102b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80102b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d104      	bne.n	80102c8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80102be:	f001 fa81 	bl	80117c4 <pvTaskIncrementMutexHeldCount>
 80102c2:	4602      	mov	r2, r0
 80102c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d00f      	beq.n	80102f0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d2:	3310      	adds	r3, #16
 80102d4:	4618      	mov	r0, r3
 80102d6:	f000 ff4d 	bl	8011174 <xTaskRemoveFromEventList>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d007      	beq.n	80102f0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102e0:	4b53      	ldr	r3, [pc, #332]	; (8010430 <xQueueSemaphoreTake+0x20c>)
 80102e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102e6:	601a      	str	r2, [r3, #0]
 80102e8:	f3bf 8f4f 	dsb	sy
 80102ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102f0:	f001 ff6a 	bl	80121c8 <vPortExitCritical>
				return pdPASS;
 80102f4:	2301      	movs	r3, #1
 80102f6:	e096      	b.n	8010426 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d110      	bne.n	8010320 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	2b00      	cmp	r3, #0
 8010302:	d009      	beq.n	8010318 <xQueueSemaphoreTake+0xf4>
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	617b      	str	r3, [r7, #20]
 8010316:	e7fe      	b.n	8010316 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010318:	f001 ff56 	bl	80121c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801031c:	2300      	movs	r3, #0
 801031e:	e082      	b.n	8010426 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010326:	f107 030c 	add.w	r3, r7, #12
 801032a:	4618      	mov	r0, r3
 801032c:	f000 ff84 	bl	8011238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010330:	2301      	movs	r3, #1
 8010332:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010334:	f001 ff48 	bl	80121c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010338:	f000 fd00 	bl	8010d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801033c:	f001 ff16 	bl	801216c <vPortEnterCritical>
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010346:	b25b      	sxtb	r3, r3
 8010348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801034c:	d103      	bne.n	8010356 <xQueueSemaphoreTake+0x132>
 801034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801035c:	b25b      	sxtb	r3, r3
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010362:	d103      	bne.n	801036c <xQueueSemaphoreTake+0x148>
 8010364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010366:	2200      	movs	r2, #0
 8010368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801036c:	f001 ff2c 	bl	80121c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010370:	463a      	mov	r2, r7
 8010372:	f107 030c 	add.w	r3, r7, #12
 8010376:	4611      	mov	r1, r2
 8010378:	4618      	mov	r0, r3
 801037a:	f000 ff73 	bl	8011264 <xTaskCheckForTimeOut>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d132      	bne.n	80103ea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010386:	f000 f9ee 	bl	8010766 <prvIsQueueEmpty>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d026      	beq.n	80103de <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d109      	bne.n	80103ac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010398:	f001 fee8 	bl	801216c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f001 f8bb 	bl	801151c <xTaskPriorityInherit>
 80103a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80103a8:	f001 ff0e 	bl	80121c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80103ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ae:	3324      	adds	r3, #36	; 0x24
 80103b0:	683a      	ldr	r2, [r7, #0]
 80103b2:	4611      	mov	r1, r2
 80103b4:	4618      	mov	r0, r3
 80103b6:	f000 fe8f 	bl	80110d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80103ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103bc:	f000 f981 	bl	80106c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80103c0:	f000 fcca 	bl	8010d58 <xTaskResumeAll>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f47f af69 	bne.w	801029e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80103cc:	4b18      	ldr	r3, [pc, #96]	; (8010430 <xQueueSemaphoreTake+0x20c>)
 80103ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	e75f      	b.n	801029e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80103de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103e0:	f000 f96f 	bl	80106c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103e4:	f000 fcb8 	bl	8010d58 <xTaskResumeAll>
 80103e8:	e759      	b.n	801029e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80103ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103ec:	f000 f969 	bl	80106c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103f0:	f000 fcb2 	bl	8010d58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103f6:	f000 f9b6 	bl	8010766 <prvIsQueueEmpty>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f43f af4e 	beq.w	801029e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010404:	2b00      	cmp	r3, #0
 8010406:	d00d      	beq.n	8010424 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010408:	f001 feb0 	bl	801216c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801040c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801040e:	f000 f8b0 	bl	8010572 <prvGetDisinheritPriorityAfterTimeout>
 8010412:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801041a:	4618      	mov	r0, r3
 801041c:	f001 f952 	bl	80116c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010420:	f001 fed2 	bl	80121c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010426:	4618      	mov	r0, r3
 8010428:	3738      	adds	r7, #56	; 0x38
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	e000ed04 	.word	0xe000ed04

08010434 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b08e      	sub	sp, #56	; 0x38
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010446:	2b00      	cmp	r3, #0
 8010448:	d109      	bne.n	801045e <xQueueReceiveFromISR+0x2a>
 801044a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044e:	f383 8811 	msr	BASEPRI, r3
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	623b      	str	r3, [r7, #32]
 801045c:	e7fe      	b.n	801045c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d103      	bne.n	801046c <xQueueReceiveFromISR+0x38>
 8010464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010468:	2b00      	cmp	r3, #0
 801046a:	d101      	bne.n	8010470 <xQueueReceiveFromISR+0x3c>
 801046c:	2301      	movs	r3, #1
 801046e:	e000      	b.n	8010472 <xQueueReceiveFromISR+0x3e>
 8010470:	2300      	movs	r3, #0
 8010472:	2b00      	cmp	r3, #0
 8010474:	d109      	bne.n	801048a <xQueueReceiveFromISR+0x56>
 8010476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047a:	f383 8811 	msr	BASEPRI, r3
 801047e:	f3bf 8f6f 	isb	sy
 8010482:	f3bf 8f4f 	dsb	sy
 8010486:	61fb      	str	r3, [r7, #28]
 8010488:	e7fe      	b.n	8010488 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801048a:	f001 ff4b 	bl	8012324 <vPortValidateInterruptPriority>
	__asm volatile
 801048e:	f3ef 8211 	mrs	r2, BASEPRI
 8010492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010496:	f383 8811 	msr	BASEPRI, r3
 801049a:	f3bf 8f6f 	isb	sy
 801049e:	f3bf 8f4f 	dsb	sy
 80104a2:	61ba      	str	r2, [r7, #24]
 80104a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80104a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d02f      	beq.n	8010516 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104c0:	68b9      	ldr	r1, [r7, #8]
 80104c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104c4:	f000 f8d7 	bl	8010676 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ca:	1e5a      	subs	r2, r3, #1
 80104cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80104d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d8:	d112      	bne.n	8010500 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	691b      	ldr	r3, [r3, #16]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d016      	beq.n	8010510 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e4:	3310      	adds	r3, #16
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 fe44 	bl	8011174 <xTaskRemoveFromEventList>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00e      	beq.n	8010510 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00b      	beq.n	8010510 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2201      	movs	r2, #1
 80104fc:	601a      	str	r2, [r3, #0]
 80104fe:	e007      	b.n	8010510 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010504:	3301      	adds	r3, #1
 8010506:	b2db      	uxtb	r3, r3
 8010508:	b25a      	sxtb	r2, r3
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010510:	2301      	movs	r3, #1
 8010512:	637b      	str	r3, [r7, #52]	; 0x34
 8010514:	e001      	b.n	801051a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8010516:	2300      	movs	r3, #0
 8010518:	637b      	str	r3, [r7, #52]	; 0x34
 801051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010526:	4618      	mov	r0, r3
 8010528:	3738      	adds	r7, #56	; 0x38
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d109      	bne.n	8010554 <vQueueDelete+0x26>
	__asm volatile
 8010540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	60bb      	str	r3, [r7, #8]
 8010552:	e7fe      	b.n	8010552 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f000 f95d 	bl	8010814 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010560:	2b00      	cmp	r3, #0
 8010562:	d102      	bne.n	801056a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f001 ffdd 	bl	8012524 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801056a:	bf00      	nop
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010572:	b480      	push	{r7}
 8010574:	b085      	sub	sp, #20
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d006      	beq.n	8010590 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801058c:	60fb      	str	r3, [r7, #12]
 801058e:	e001      	b.n	8010594 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010590:	2300      	movs	r3, #0
 8010592:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010594:	68fb      	ldr	r3, [r7, #12]
	}
 8010596:	4618      	mov	r0, r3
 8010598:	3714      	adds	r7, #20
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr

080105a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b086      	sub	sp, #24
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	60b9      	str	r1, [r7, #8]
 80105ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80105ae:	2300      	movs	r3, #0
 80105b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d10d      	bne.n	80105dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d14d      	bne.n	8010664 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f001 f80d 	bl	80115ec <xTaskPriorityDisinherit>
 80105d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2200      	movs	r2, #0
 80105d8:	609a      	str	r2, [r3, #8]
 80105da:	e043      	b.n	8010664 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d119      	bne.n	8010616 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6858      	ldr	r0, [r3, #4]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ea:	461a      	mov	r2, r3
 80105ec:	68b9      	ldr	r1, [r7, #8]
 80105ee:	f002 f8ea 	bl	80127c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105fa:	441a      	add	r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	685a      	ldr	r2, [r3, #4]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	429a      	cmp	r2, r3
 801060a:	d32b      	bcc.n	8010664 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	605a      	str	r2, [r3, #4]
 8010614:	e026      	b.n	8010664 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	68d8      	ldr	r0, [r3, #12]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801061e:	461a      	mov	r2, r3
 8010620:	68b9      	ldr	r1, [r7, #8]
 8010622:	f002 f8d0 	bl	80127c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	68da      	ldr	r2, [r3, #12]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801062e:	425b      	negs	r3, r3
 8010630:	441a      	add	r2, r3
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	68da      	ldr	r2, [r3, #12]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	d207      	bcs.n	8010652 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	689a      	ldr	r2, [r3, #8]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064a:	425b      	negs	r3, r3
 801064c:	441a      	add	r2, r3
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b02      	cmp	r3, #2
 8010656:	d105      	bne.n	8010664 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d002      	beq.n	8010664 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	3b01      	subs	r3, #1
 8010662:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801066c:	697b      	ldr	r3, [r7, #20]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3718      	adds	r7, #24
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d018      	beq.n	80106ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	68da      	ldr	r2, [r3, #12]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010690:	441a      	add	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	68da      	ldr	r2, [r3, #12]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d303      	bcc.n	80106aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	68d9      	ldr	r1, [r3, #12]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106b2:	461a      	mov	r2, r3
 80106b4:	6838      	ldr	r0, [r7, #0]
 80106b6:	f002 f886 	bl	80127c6 <memcpy>
	}
}
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b084      	sub	sp, #16
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80106ca:	f001 fd4f 	bl	801216c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80106d6:	e011      	b.n	80106fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d012      	beq.n	8010706 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	3324      	adds	r3, #36	; 0x24
 80106e4:	4618      	mov	r0, r3
 80106e6:	f000 fd45 	bl	8011174 <xTaskRemoveFromEventList>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d001      	beq.n	80106f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80106f0:	f000 fe18 	bl	8011324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
 80106f6:	3b01      	subs	r3, #1
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80106fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010700:	2b00      	cmp	r3, #0
 8010702:	dce9      	bgt.n	80106d8 <prvUnlockQueue+0x16>
 8010704:	e000      	b.n	8010708 <prvUnlockQueue+0x46>
					break;
 8010706:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	22ff      	movs	r2, #255	; 0xff
 801070c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010710:	f001 fd5a 	bl	80121c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010714:	f001 fd2a 	bl	801216c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801071e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010720:	e011      	b.n	8010746 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d012      	beq.n	8010750 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	3310      	adds	r3, #16
 801072e:	4618      	mov	r0, r3
 8010730:	f000 fd20 	bl	8011174 <xTaskRemoveFromEventList>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d001      	beq.n	801073e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801073a:	f000 fdf3 	bl	8011324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801073e:	7bbb      	ldrb	r3, [r7, #14]
 8010740:	3b01      	subs	r3, #1
 8010742:	b2db      	uxtb	r3, r3
 8010744:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801074a:	2b00      	cmp	r3, #0
 801074c:	dce9      	bgt.n	8010722 <prvUnlockQueue+0x60>
 801074e:	e000      	b.n	8010752 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010750:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	22ff      	movs	r2, #255	; 0xff
 8010756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801075a:	f001 fd35 	bl	80121c8 <vPortExitCritical>
}
 801075e:	bf00      	nop
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}

08010766 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b084      	sub	sp, #16
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801076e:	f001 fcfd 	bl	801216c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010776:	2b00      	cmp	r3, #0
 8010778:	d102      	bne.n	8010780 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801077a:	2301      	movs	r3, #1
 801077c:	60fb      	str	r3, [r7, #12]
 801077e:	e001      	b.n	8010784 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010780:	2300      	movs	r3, #0
 8010782:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010784:	f001 fd20 	bl	80121c8 <vPortExitCritical>

	return xReturn;
 8010788:	68fb      	ldr	r3, [r7, #12]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b084      	sub	sp, #16
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801079a:	f001 fce7 	bl	801216c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d102      	bne.n	80107b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80107aa:	2301      	movs	r3, #1
 80107ac:	60fb      	str	r3, [r7, #12]
 80107ae:	e001      	b.n	80107b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80107b0:	2300      	movs	r3, #0
 80107b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80107b4:	f001 fd08 	bl	80121c8 <vPortExitCritical>

	return xReturn;
 80107b8:	68fb      	ldr	r3, [r7, #12]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
	...

080107c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80107ce:	2300      	movs	r3, #0
 80107d0:	60fb      	str	r3, [r7, #12]
 80107d2:	e014      	b.n	80107fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80107d4:	4a0e      	ldr	r2, [pc, #56]	; (8010810 <vQueueAddToRegistry+0x4c>)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d10b      	bne.n	80107f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80107e0:	490b      	ldr	r1, [pc, #44]	; (8010810 <vQueueAddToRegistry+0x4c>)
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	683a      	ldr	r2, [r7, #0]
 80107e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80107ea:	4a09      	ldr	r2, [pc, #36]	; (8010810 <vQueueAddToRegistry+0x4c>)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	00db      	lsls	r3, r3, #3
 80107f0:	4413      	add	r3, r2
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80107f6:	e005      	b.n	8010804 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	3301      	adds	r3, #1
 80107fc:	60fb      	str	r3, [r7, #12]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b07      	cmp	r3, #7
 8010802:	d9e7      	bls.n	80107d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010804:	bf00      	nop
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr
 8010810:	20004100 	.word	0x20004100

08010814 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010814:	b480      	push	{r7}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801081c:	2300      	movs	r3, #0
 801081e:	60fb      	str	r3, [r7, #12]
 8010820:	e016      	b.n	8010850 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010822:	4a10      	ldr	r2, [pc, #64]	; (8010864 <vQueueUnregisterQueue+0x50>)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	4413      	add	r3, r2
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d10b      	bne.n	801084a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010832:	4a0c      	ldr	r2, [pc, #48]	; (8010864 <vQueueUnregisterQueue+0x50>)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2100      	movs	r1, #0
 8010838:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801083c:	4a09      	ldr	r2, [pc, #36]	; (8010864 <vQueueUnregisterQueue+0x50>)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	00db      	lsls	r3, r3, #3
 8010842:	4413      	add	r3, r2
 8010844:	2200      	movs	r2, #0
 8010846:	605a      	str	r2, [r3, #4]
				break;
 8010848:	e005      	b.n	8010856 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	3301      	adds	r3, #1
 801084e:	60fb      	str	r3, [r7, #12]
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2b07      	cmp	r3, #7
 8010854:	d9e5      	bls.n	8010822 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010856:	bf00      	nop
 8010858:	3714      	adds	r7, #20
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	20004100 	.word	0x20004100

08010868 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010878:	f001 fc78 	bl	801216c <vPortEnterCritical>
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010882:	b25b      	sxtb	r3, r3
 8010884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010888:	d103      	bne.n	8010892 <vQueueWaitForMessageRestricted+0x2a>
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2200      	movs	r2, #0
 801088e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010898:	b25b      	sxtb	r3, r3
 801089a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089e:	d103      	bne.n	80108a8 <vQueueWaitForMessageRestricted+0x40>
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108a8:	f001 fc8e 	bl	80121c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d106      	bne.n	80108c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	3324      	adds	r3, #36	; 0x24
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	68b9      	ldr	r1, [r7, #8]
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 fc2f 	bl	8011120 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80108c2:	6978      	ldr	r0, [r7, #20]
 80108c4:	f7ff fefd 	bl	80106c2 <prvUnlockQueue>
	}
 80108c8:	bf00      	nop
 80108ca:	3718      	adds	r7, #24
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b08e      	sub	sp, #56	; 0x38
 80108d4:	af04      	add	r7, sp, #16
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	607a      	str	r2, [r7, #4]
 80108dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80108de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d109      	bne.n	80108f8 <xTaskCreateStatic+0x28>
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	623b      	str	r3, [r7, #32]
 80108f6:	e7fe      	b.n	80108f6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80108f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d109      	bne.n	8010912 <xTaskCreateStatic+0x42>
 80108fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010902:	f383 8811 	msr	BASEPRI, r3
 8010906:	f3bf 8f6f 	isb	sy
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	61fb      	str	r3, [r7, #28]
 8010910:	e7fe      	b.n	8010910 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010912:	235c      	movs	r3, #92	; 0x5c
 8010914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	2b5c      	cmp	r3, #92	; 0x5c
 801091a:	d009      	beq.n	8010930 <xTaskCreateStatic+0x60>
 801091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010920:	f383 8811 	msr	BASEPRI, r3
 8010924:	f3bf 8f6f 	isb	sy
 8010928:	f3bf 8f4f 	dsb	sy
 801092c:	61bb      	str	r3, [r7, #24]
 801092e:	e7fe      	b.n	801092e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010930:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010934:	2b00      	cmp	r3, #0
 8010936:	d01e      	beq.n	8010976 <xTaskCreateStatic+0xa6>
 8010938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093a:	2b00      	cmp	r3, #0
 801093c:	d01b      	beq.n	8010976 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801093e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010940:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010946:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	2202      	movs	r2, #2
 801094c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010950:	2300      	movs	r3, #0
 8010952:	9303      	str	r3, [sp, #12]
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	9302      	str	r3, [sp, #8]
 8010958:	f107 0314 	add.w	r3, r7, #20
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	68b9      	ldr	r1, [r7, #8]
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f000 f850 	bl	8010a0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801096e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010970:	f000 f8dc 	bl	8010b2c <prvAddNewTaskToReadyList>
 8010974:	e001      	b.n	801097a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8010976:	2300      	movs	r3, #0
 8010978:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801097a:	697b      	ldr	r3, [r7, #20]
	}
 801097c:	4618      	mov	r0, r3
 801097e:	3728      	adds	r7, #40	; 0x28
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}

08010984 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010984:	b580      	push	{r7, lr}
 8010986:	b08c      	sub	sp, #48	; 0x30
 8010988:	af04      	add	r7, sp, #16
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	603b      	str	r3, [r7, #0]
 8010990:	4613      	mov	r3, r2
 8010992:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010994:	88fb      	ldrh	r3, [r7, #6]
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4618      	mov	r0, r3
 801099a:	f001 fd01 	bl	80123a0 <pvPortMalloc>
 801099e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00e      	beq.n	80109c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80109a6:	205c      	movs	r0, #92	; 0x5c
 80109a8:	f001 fcfa 	bl	80123a0 <pvPortMalloc>
 80109ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d003      	beq.n	80109bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	631a      	str	r2, [r3, #48]	; 0x30
 80109ba:	e005      	b.n	80109c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80109bc:	6978      	ldr	r0, [r7, #20]
 80109be:	f001 fdb1 	bl	8012524 <vPortFree>
 80109c2:	e001      	b.n	80109c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80109c4:	2300      	movs	r3, #0
 80109c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d017      	beq.n	80109fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80109d6:	88fa      	ldrh	r2, [r7, #6]
 80109d8:	2300      	movs	r3, #0
 80109da:	9303      	str	r3, [sp, #12]
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	9302      	str	r3, [sp, #8]
 80109e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e2:	9301      	str	r3, [sp, #4]
 80109e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	68b9      	ldr	r1, [r7, #8]
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f000 f80e 	bl	8010a0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109f2:	69f8      	ldr	r0, [r7, #28]
 80109f4:	f000 f89a 	bl	8010b2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80109f8:	2301      	movs	r3, #1
 80109fa:	61bb      	str	r3, [r7, #24]
 80109fc:	e002      	b.n	8010a04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80109fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010a02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a04:	69bb      	ldr	r3, [r7, #24]
	}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3720      	adds	r7, #32
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b088      	sub	sp, #32
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	60f8      	str	r0, [r7, #12]
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	607a      	str	r2, [r7, #4]
 8010a1a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	461a      	mov	r2, r3
 8010a26:	21a5      	movs	r1, #165	; 0xa5
 8010a28:	f001 fed8 	bl	80127dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010a36:	3b01      	subs	r3, #1
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	4413      	add	r3, r2
 8010a3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010a3e:	69bb      	ldr	r3, [r7, #24]
 8010a40:	f023 0307 	bic.w	r3, r3, #7
 8010a44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	f003 0307 	and.w	r3, r3, #7
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d009      	beq.n	8010a64 <prvInitialiseNewTask+0x56>
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	617b      	str	r3, [r7, #20]
 8010a62:	e7fe      	b.n	8010a62 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d01f      	beq.n	8010aaa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	61fb      	str	r3, [r7, #28]
 8010a6e:	e012      	b.n	8010a96 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	4413      	add	r3, r2
 8010a76:	7819      	ldrb	r1, [r3, #0]
 8010a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	3334      	adds	r3, #52	; 0x34
 8010a80:	460a      	mov	r2, r1
 8010a82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010a84:	68ba      	ldr	r2, [r7, #8]
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	4413      	add	r3, r2
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	3301      	adds	r3, #1
 8010a94:	61fb      	str	r3, [r7, #28]
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	2b0f      	cmp	r3, #15
 8010a9a:	d9e9      	bls.n	8010a70 <prvInitialiseNewTask+0x62>
 8010a9c:	e000      	b.n	8010aa0 <prvInitialiseNewTask+0x92>
			{
				break;
 8010a9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010aa8:	e003      	b.n	8010ab2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aac:	2200      	movs	r2, #0
 8010aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab4:	2b37      	cmp	r3, #55	; 0x37
 8010ab6:	d901      	bls.n	8010abc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ab8:	2337      	movs	r3, #55	; 0x37
 8010aba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ac0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ac6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aca:	2200      	movs	r2, #0
 8010acc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fe fe7a 	bl	800f7cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ada:	3318      	adds	r3, #24
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe fe75 	bl	800f7cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ae6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010af6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afa:	2200      	movs	r2, #0
 8010afc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	68f9      	ldr	r1, [r7, #12]
 8010b0a:	69b8      	ldr	r0, [r7, #24]
 8010b0c:	f001 fa08 	bl	8011f20 <pxPortInitialiseStack>
 8010b10:	4602      	mov	r2, r0
 8010b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d002      	beq.n	8010b22 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b22:	bf00      	nop
 8010b24:	3720      	adds	r7, #32
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010b34:	f001 fb1a 	bl	801216c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010b38:	4b2d      	ldr	r3, [pc, #180]	; (8010bf0 <prvAddNewTaskToReadyList+0xc4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	4a2c      	ldr	r2, [pc, #176]	; (8010bf0 <prvAddNewTaskToReadyList+0xc4>)
 8010b40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010b42:	4b2c      	ldr	r3, [pc, #176]	; (8010bf4 <prvAddNewTaskToReadyList+0xc8>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d109      	bne.n	8010b5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010b4a:	4a2a      	ldr	r2, [pc, #168]	; (8010bf4 <prvAddNewTaskToReadyList+0xc8>)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b50:	4b27      	ldr	r3, [pc, #156]	; (8010bf0 <prvAddNewTaskToReadyList+0xc4>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d110      	bne.n	8010b7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010b58:	f000 fc08 	bl	801136c <prvInitialiseTaskLists>
 8010b5c:	e00d      	b.n	8010b7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010b5e:	4b26      	ldr	r3, [pc, #152]	; (8010bf8 <prvAddNewTaskToReadyList+0xcc>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d109      	bne.n	8010b7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010b66:	4b23      	ldr	r3, [pc, #140]	; (8010bf4 <prvAddNewTaskToReadyList+0xc8>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d802      	bhi.n	8010b7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010b74:	4a1f      	ldr	r2, [pc, #124]	; (8010bf4 <prvAddNewTaskToReadyList+0xc8>)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010b7a:	4b20      	ldr	r3, [pc, #128]	; (8010bfc <prvAddNewTaskToReadyList+0xd0>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	4a1e      	ldr	r2, [pc, #120]	; (8010bfc <prvAddNewTaskToReadyList+0xd0>)
 8010b82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010b84:	4b1d      	ldr	r3, [pc, #116]	; (8010bfc <prvAddNewTaskToReadyList+0xd0>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b90:	4b1b      	ldr	r3, [pc, #108]	; (8010c00 <prvAddNewTaskToReadyList+0xd4>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d903      	bls.n	8010ba0 <prvAddNewTaskToReadyList+0x74>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9c:	4a18      	ldr	r2, [pc, #96]	; (8010c00 <prvAddNewTaskToReadyList+0xd4>)
 8010b9e:	6013      	str	r3, [r2, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	4413      	add	r3, r2
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	4a15      	ldr	r2, [pc, #84]	; (8010c04 <prvAddNewTaskToReadyList+0xd8>)
 8010bae:	441a      	add	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3304      	adds	r3, #4
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	4610      	mov	r0, r2
 8010bb8:	f7fe fe15 	bl	800f7e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010bbc:	f001 fb04 	bl	80121c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010bc0:	4b0d      	ldr	r3, [pc, #52]	; (8010bf8 <prvAddNewTaskToReadyList+0xcc>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00e      	beq.n	8010be6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010bc8:	4b0a      	ldr	r3, [pc, #40]	; (8010bf4 <prvAddNewTaskToReadyList+0xc8>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d207      	bcs.n	8010be6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010bd6:	4b0c      	ldr	r3, [pc, #48]	; (8010c08 <prvAddNewTaskToReadyList+0xdc>)
 8010bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bdc:	601a      	str	r2, [r3, #0]
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010be6:	bf00      	nop
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	20001350 	.word	0x20001350
 8010bf4:	20000e7c 	.word	0x20000e7c
 8010bf8:	2000135c 	.word	0x2000135c
 8010bfc:	2000136c 	.word	0x2000136c
 8010c00:	20001358 	.word	0x20001358
 8010c04:	20000e80 	.word	0x20000e80
 8010c08:	e000ed04 	.word	0xe000ed04

08010c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010c14:	2300      	movs	r3, #0
 8010c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d016      	beq.n	8010c4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010c1e:	4b13      	ldr	r3, [pc, #76]	; (8010c6c <vTaskDelay+0x60>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d009      	beq.n	8010c3a <vTaskDelay+0x2e>
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	60bb      	str	r3, [r7, #8]
 8010c38:	e7fe      	b.n	8010c38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010c3a:	f000 f87f 	bl	8010d3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010c3e:	2100      	movs	r1, #0
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 fdd3 	bl	80117ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010c46:	f000 f887 	bl	8010d58 <xTaskResumeAll>
 8010c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d107      	bne.n	8010c62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010c52:	4b07      	ldr	r3, [pc, #28]	; (8010c70 <vTaskDelay+0x64>)
 8010c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c62:	bf00      	nop
 8010c64:	3710      	adds	r7, #16
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	20001378 	.word	0x20001378
 8010c70:	e000ed04 	.word	0xe000ed04

08010c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b08a      	sub	sp, #40	; 0x28
 8010c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010c82:	463a      	mov	r2, r7
 8010c84:	1d39      	adds	r1, r7, #4
 8010c86:	f107 0308 	add.w	r3, r7, #8
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe fd4a 	bl	800f724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	9202      	str	r2, [sp, #8]
 8010c98:	9301      	str	r3, [sp, #4]
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	460a      	mov	r2, r1
 8010ca2:	4920      	ldr	r1, [pc, #128]	; (8010d24 <vTaskStartScheduler+0xb0>)
 8010ca4:	4820      	ldr	r0, [pc, #128]	; (8010d28 <vTaskStartScheduler+0xb4>)
 8010ca6:	f7ff fe13 	bl	80108d0 <xTaskCreateStatic>
 8010caa:	4602      	mov	r2, r0
 8010cac:	4b1f      	ldr	r3, [pc, #124]	; (8010d2c <vTaskStartScheduler+0xb8>)
 8010cae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010cb0:	4b1e      	ldr	r3, [pc, #120]	; (8010d2c <vTaskStartScheduler+0xb8>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	617b      	str	r3, [r7, #20]
 8010cbc:	e001      	b.n	8010cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d102      	bne.n	8010cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010cc8:	f000 fde4 	bl	8011894 <xTimerCreateTimerTask>
 8010ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d115      	bne.n	8010d00 <vTaskStartScheduler+0x8c>
 8010cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010ce6:	4b12      	ldr	r3, [pc, #72]	; (8010d30 <vTaskStartScheduler+0xbc>)
 8010ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8010cec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010cee:	4b11      	ldr	r3, [pc, #68]	; (8010d34 <vTaskStartScheduler+0xc0>)
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010cf4:	4b10      	ldr	r3, [pc, #64]	; (8010d38 <vTaskStartScheduler+0xc4>)
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010cfa:	f001 f999 	bl	8012030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010cfe:	e00d      	b.n	8010d1c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d06:	d109      	bne.n	8010d1c <vTaskStartScheduler+0xa8>
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	60fb      	str	r3, [r7, #12]
 8010d1a:	e7fe      	b.n	8010d1a <vTaskStartScheduler+0xa6>
}
 8010d1c:	bf00      	nop
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	08014e34 	.word	0x08014e34
 8010d28:	0801133d 	.word	0x0801133d
 8010d2c:	20001374 	.word	0x20001374
 8010d30:	20001370 	.word	0x20001370
 8010d34:	2000135c 	.word	0x2000135c
 8010d38:	20001354 	.word	0x20001354

08010d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010d40:	4b04      	ldr	r3, [pc, #16]	; (8010d54 <vTaskSuspendAll+0x18>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3301      	adds	r3, #1
 8010d46:	4a03      	ldr	r2, [pc, #12]	; (8010d54 <vTaskSuspendAll+0x18>)
 8010d48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010d4a:	bf00      	nop
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr
 8010d54:	20001378 	.word	0x20001378

08010d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010d62:	2300      	movs	r3, #0
 8010d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010d66:	4b41      	ldr	r3, [pc, #260]	; (8010e6c <xTaskResumeAll+0x114>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d109      	bne.n	8010d82 <xTaskResumeAll+0x2a>
 8010d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	603b      	str	r3, [r7, #0]
 8010d80:	e7fe      	b.n	8010d80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010d82:	f001 f9f3 	bl	801216c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010d86:	4b39      	ldr	r3, [pc, #228]	; (8010e6c <xTaskResumeAll+0x114>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	3b01      	subs	r3, #1
 8010d8c:	4a37      	ldr	r2, [pc, #220]	; (8010e6c <xTaskResumeAll+0x114>)
 8010d8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d90:	4b36      	ldr	r3, [pc, #216]	; (8010e6c <xTaskResumeAll+0x114>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d162      	bne.n	8010e5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d98:	4b35      	ldr	r3, [pc, #212]	; (8010e70 <xTaskResumeAll+0x118>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d05e      	beq.n	8010e5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010da0:	e02f      	b.n	8010e02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010da2:	4b34      	ldr	r3, [pc, #208]	; (8010e74 <xTaskResumeAll+0x11c>)
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	3318      	adds	r3, #24
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7fe fd76 	bl	800f8a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	3304      	adds	r3, #4
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fe fd71 	bl	800f8a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc2:	4b2d      	ldr	r3, [pc, #180]	; (8010e78 <xTaskResumeAll+0x120>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d903      	bls.n	8010dd2 <xTaskResumeAll+0x7a>
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dce:	4a2a      	ldr	r2, [pc, #168]	; (8010e78 <xTaskResumeAll+0x120>)
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	4a27      	ldr	r2, [pc, #156]	; (8010e7c <xTaskResumeAll+0x124>)
 8010de0:	441a      	add	r2, r3
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3304      	adds	r3, #4
 8010de6:	4619      	mov	r1, r3
 8010de8:	4610      	mov	r0, r2
 8010dea:	f7fe fcfc 	bl	800f7e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df2:	4b23      	ldr	r3, [pc, #140]	; (8010e80 <xTaskResumeAll+0x128>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d302      	bcc.n	8010e02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010dfc:	4b21      	ldr	r3, [pc, #132]	; (8010e84 <xTaskResumeAll+0x12c>)
 8010dfe:	2201      	movs	r2, #1
 8010e00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e02:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <xTaskResumeAll+0x11c>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1cb      	bne.n	8010da2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010e10:	f000 fb46 	bl	80114a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010e14:	4b1c      	ldr	r3, [pc, #112]	; (8010e88 <xTaskResumeAll+0x130>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d010      	beq.n	8010e42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e20:	f000 f846 	bl	8010eb0 <xTaskIncrementTick>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d002      	beq.n	8010e30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010e2a:	4b16      	ldr	r3, [pc, #88]	; (8010e84 <xTaskResumeAll+0x12c>)
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	3b01      	subs	r3, #1
 8010e34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1f1      	bne.n	8010e20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010e3c:	4b12      	ldr	r3, [pc, #72]	; (8010e88 <xTaskResumeAll+0x130>)
 8010e3e:	2200      	movs	r2, #0
 8010e40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010e42:	4b10      	ldr	r3, [pc, #64]	; (8010e84 <xTaskResumeAll+0x12c>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d009      	beq.n	8010e5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010e4e:	4b0f      	ldr	r3, [pc, #60]	; (8010e8c <xTaskResumeAll+0x134>)
 8010e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e5e:	f001 f9b3 	bl	80121c8 <vPortExitCritical>

	return xAlreadyYielded;
 8010e62:	68bb      	ldr	r3, [r7, #8]
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3710      	adds	r7, #16
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	20001378 	.word	0x20001378
 8010e70:	20001350 	.word	0x20001350
 8010e74:	20001310 	.word	0x20001310
 8010e78:	20001358 	.word	0x20001358
 8010e7c:	20000e80 	.word	0x20000e80
 8010e80:	20000e7c 	.word	0x20000e7c
 8010e84:	20001364 	.word	0x20001364
 8010e88:	20001360 	.word	0x20001360
 8010e8c:	e000ed04 	.word	0xe000ed04

08010e90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <xTaskGetTickCount+0x1c>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010e9c:	687b      	ldr	r3, [r7, #4]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop
 8010eac:	20001354 	.word	0x20001354

08010eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010eba:	4b4e      	ldr	r3, [pc, #312]	; (8010ff4 <xTaskIncrementTick+0x144>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f040 8088 	bne.w	8010fd4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ec4:	4b4c      	ldr	r3, [pc, #304]	; (8010ff8 <xTaskIncrementTick+0x148>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	3301      	adds	r3, #1
 8010eca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010ecc:	4a4a      	ldr	r2, [pc, #296]	; (8010ff8 <xTaskIncrementTick+0x148>)
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d11f      	bne.n	8010f18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ed8:	4b48      	ldr	r3, [pc, #288]	; (8010ffc <xTaskIncrementTick+0x14c>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d009      	beq.n	8010ef6 <xTaskIncrementTick+0x46>
 8010ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee6:	f383 8811 	msr	BASEPRI, r3
 8010eea:	f3bf 8f6f 	isb	sy
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	603b      	str	r3, [r7, #0]
 8010ef4:	e7fe      	b.n	8010ef4 <xTaskIncrementTick+0x44>
 8010ef6:	4b41      	ldr	r3, [pc, #260]	; (8010ffc <xTaskIncrementTick+0x14c>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	60fb      	str	r3, [r7, #12]
 8010efc:	4b40      	ldr	r3, [pc, #256]	; (8011000 <xTaskIncrementTick+0x150>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a3e      	ldr	r2, [pc, #248]	; (8010ffc <xTaskIncrementTick+0x14c>)
 8010f02:	6013      	str	r3, [r2, #0]
 8010f04:	4a3e      	ldr	r2, [pc, #248]	; (8011000 <xTaskIncrementTick+0x150>)
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	6013      	str	r3, [r2, #0]
 8010f0a:	4b3e      	ldr	r3, [pc, #248]	; (8011004 <xTaskIncrementTick+0x154>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	4a3c      	ldr	r2, [pc, #240]	; (8011004 <xTaskIncrementTick+0x154>)
 8010f12:	6013      	str	r3, [r2, #0]
 8010f14:	f000 fac4 	bl	80114a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f18:	4b3b      	ldr	r3, [pc, #236]	; (8011008 <xTaskIncrementTick+0x158>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	693a      	ldr	r2, [r7, #16]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d349      	bcc.n	8010fb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f22:	4b36      	ldr	r3, [pc, #216]	; (8010ffc <xTaskIncrementTick+0x14c>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d104      	bne.n	8010f36 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f2c:	4b36      	ldr	r3, [pc, #216]	; (8011008 <xTaskIncrementTick+0x158>)
 8010f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f32:	601a      	str	r2, [r3, #0]
					break;
 8010f34:	e03f      	b.n	8010fb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f36:	4b31      	ldr	r3, [pc, #196]	; (8010ffc <xTaskIncrementTick+0x14c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010f46:	693a      	ldr	r2, [r7, #16]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d203      	bcs.n	8010f56 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f4e:	4a2e      	ldr	r2, [pc, #184]	; (8011008 <xTaskIncrementTick+0x158>)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f54:	e02f      	b.n	8010fb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	3304      	adds	r3, #4
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fe fca0 	bl	800f8a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d004      	beq.n	8010f72 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	3318      	adds	r3, #24
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fe fc97 	bl	800f8a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f76:	4b25      	ldr	r3, [pc, #148]	; (801100c <xTaskIncrementTick+0x15c>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d903      	bls.n	8010f86 <xTaskIncrementTick+0xd6>
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f82:	4a22      	ldr	r2, [pc, #136]	; (801100c <xTaskIncrementTick+0x15c>)
 8010f84:	6013      	str	r3, [r2, #0]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	4413      	add	r3, r2
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	4a1f      	ldr	r2, [pc, #124]	; (8011010 <xTaskIncrementTick+0x160>)
 8010f94:	441a      	add	r2, r3
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	3304      	adds	r3, #4
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	4610      	mov	r0, r2
 8010f9e:	f7fe fc22 	bl	800f7e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa6:	4b1b      	ldr	r3, [pc, #108]	; (8011014 <xTaskIncrementTick+0x164>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d3b8      	bcc.n	8010f22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fb4:	e7b5      	b.n	8010f22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010fb6:	4b17      	ldr	r3, [pc, #92]	; (8011014 <xTaskIncrementTick+0x164>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbc:	4914      	ldr	r1, [pc, #80]	; (8011010 <xTaskIncrementTick+0x160>)
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	440b      	add	r3, r1
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d907      	bls.n	8010fde <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	617b      	str	r3, [r7, #20]
 8010fd2:	e004      	b.n	8010fde <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010fd4:	4b10      	ldr	r3, [pc, #64]	; (8011018 <xTaskIncrementTick+0x168>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	4a0f      	ldr	r2, [pc, #60]	; (8011018 <xTaskIncrementTick+0x168>)
 8010fdc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010fde:	4b0f      	ldr	r3, [pc, #60]	; (801101c <xTaskIncrementTick+0x16c>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d001      	beq.n	8010fea <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010fea:	697b      	ldr	r3, [r7, #20]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3718      	adds	r7, #24
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	20001378 	.word	0x20001378
 8010ff8:	20001354 	.word	0x20001354
 8010ffc:	20001308 	.word	0x20001308
 8011000:	2000130c 	.word	0x2000130c
 8011004:	20001368 	.word	0x20001368
 8011008:	20001370 	.word	0x20001370
 801100c:	20001358 	.word	0x20001358
 8011010:	20000e80 	.word	0x20000e80
 8011014:	20000e7c 	.word	0x20000e7c
 8011018:	20001360 	.word	0x20001360
 801101c:	20001364 	.word	0x20001364

08011020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011026:	4b27      	ldr	r3, [pc, #156]	; (80110c4 <vTaskSwitchContext+0xa4>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d003      	beq.n	8011036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801102e:	4b26      	ldr	r3, [pc, #152]	; (80110c8 <vTaskSwitchContext+0xa8>)
 8011030:	2201      	movs	r2, #1
 8011032:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011034:	e040      	b.n	80110b8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011036:	4b24      	ldr	r3, [pc, #144]	; (80110c8 <vTaskSwitchContext+0xa8>)
 8011038:	2200      	movs	r2, #0
 801103a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801103c:	4b23      	ldr	r3, [pc, #140]	; (80110cc <vTaskSwitchContext+0xac>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	60fb      	str	r3, [r7, #12]
 8011042:	e00f      	b.n	8011064 <vTaskSwitchContext+0x44>
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d109      	bne.n	801105e <vTaskSwitchContext+0x3e>
 801104a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801104e:	f383 8811 	msr	BASEPRI, r3
 8011052:	f3bf 8f6f 	isb	sy
 8011056:	f3bf 8f4f 	dsb	sy
 801105a:	607b      	str	r3, [r7, #4]
 801105c:	e7fe      	b.n	801105c <vTaskSwitchContext+0x3c>
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3b01      	subs	r3, #1
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	491a      	ldr	r1, [pc, #104]	; (80110d0 <vTaskSwitchContext+0xb0>)
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	4613      	mov	r3, r2
 801106a:	009b      	lsls	r3, r3, #2
 801106c:	4413      	add	r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	440b      	add	r3, r1
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d0e5      	beq.n	8011044 <vTaskSwitchContext+0x24>
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	4613      	mov	r3, r2
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	4413      	add	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	4a13      	ldr	r2, [pc, #76]	; (80110d0 <vTaskSwitchContext+0xb0>)
 8011084:	4413      	add	r3, r2
 8011086:	60bb      	str	r3, [r7, #8]
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	685a      	ldr	r2, [r3, #4]
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	605a      	str	r2, [r3, #4]
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	685a      	ldr	r2, [r3, #4]
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	3308      	adds	r3, #8
 801109a:	429a      	cmp	r2, r3
 801109c:	d104      	bne.n	80110a8 <vTaskSwitchContext+0x88>
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	685a      	ldr	r2, [r3, #4]
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	605a      	str	r2, [r3, #4]
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	68db      	ldr	r3, [r3, #12]
 80110ae:	4a09      	ldr	r2, [pc, #36]	; (80110d4 <vTaskSwitchContext+0xb4>)
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	4a06      	ldr	r2, [pc, #24]	; (80110cc <vTaskSwitchContext+0xac>)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	6013      	str	r3, [r2, #0]
}
 80110b8:	bf00      	nop
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr
 80110c4:	20001378 	.word	0x20001378
 80110c8:	20001364 	.word	0x20001364
 80110cc:	20001358 	.word	0x20001358
 80110d0:	20000e80 	.word	0x20000e80
 80110d4:	20000e7c 	.word	0x20000e7c

080110d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d109      	bne.n	80110fc <vTaskPlaceOnEventList+0x24>
 80110e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ec:	f383 8811 	msr	BASEPRI, r3
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	60fb      	str	r3, [r7, #12]
 80110fa:	e7fe      	b.n	80110fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110fc:	4b07      	ldr	r3, [pc, #28]	; (801111c <vTaskPlaceOnEventList+0x44>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	3318      	adds	r3, #24
 8011102:	4619      	mov	r1, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7fe fb92 	bl	800f82e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801110a:	2101      	movs	r1, #1
 801110c:	6838      	ldr	r0, [r7, #0]
 801110e:	f000 fb6d 	bl	80117ec <prvAddCurrentTaskToDelayedList>
}
 8011112:	bf00      	nop
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	20000e7c 	.word	0x20000e7c

08011120 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d109      	bne.n	8011146 <vTaskPlaceOnEventListRestricted+0x26>
 8011132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011136:	f383 8811 	msr	BASEPRI, r3
 801113a:	f3bf 8f6f 	isb	sy
 801113e:	f3bf 8f4f 	dsb	sy
 8011142:	617b      	str	r3, [r7, #20]
 8011144:	e7fe      	b.n	8011144 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011146:	4b0a      	ldr	r3, [pc, #40]	; (8011170 <vTaskPlaceOnEventListRestricted+0x50>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	3318      	adds	r3, #24
 801114c:	4619      	mov	r1, r3
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f7fe fb49 	bl	800f7e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d002      	beq.n	8011160 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801115a:	f04f 33ff 	mov.w	r3, #4294967295
 801115e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011160:	6879      	ldr	r1, [r7, #4]
 8011162:	68b8      	ldr	r0, [r7, #8]
 8011164:	f000 fb42 	bl	80117ec <prvAddCurrentTaskToDelayedList>
	}
 8011168:	bf00      	nop
 801116a:	3718      	adds	r7, #24
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	20000e7c 	.word	0x20000e7c

08011174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b086      	sub	sp, #24
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d109      	bne.n	801119e <xTaskRemoveFromEventList+0x2a>
 801118a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	60fb      	str	r3, [r7, #12]
 801119c:	e7fe      	b.n	801119c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	3318      	adds	r3, #24
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fe fb7c 	bl	800f8a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111a8:	4b1d      	ldr	r3, [pc, #116]	; (8011220 <xTaskRemoveFromEventList+0xac>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d11d      	bne.n	80111ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	3304      	adds	r3, #4
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe fb73 	bl	800f8a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111be:	4b19      	ldr	r3, [pc, #100]	; (8011224 <xTaskRemoveFromEventList+0xb0>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d903      	bls.n	80111ce <xTaskRemoveFromEventList+0x5a>
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ca:	4a16      	ldr	r2, [pc, #88]	; (8011224 <xTaskRemoveFromEventList+0xb0>)
 80111cc:	6013      	str	r3, [r2, #0]
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111d2:	4613      	mov	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4413      	add	r3, r2
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4a13      	ldr	r2, [pc, #76]	; (8011228 <xTaskRemoveFromEventList+0xb4>)
 80111dc:	441a      	add	r2, r3
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	3304      	adds	r3, #4
 80111e2:	4619      	mov	r1, r3
 80111e4:	4610      	mov	r0, r2
 80111e6:	f7fe fafe 	bl	800f7e6 <vListInsertEnd>
 80111ea:	e005      	b.n	80111f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	3318      	adds	r3, #24
 80111f0:	4619      	mov	r1, r3
 80111f2:	480e      	ldr	r0, [pc, #56]	; (801122c <xTaskRemoveFromEventList+0xb8>)
 80111f4:	f7fe faf7 	bl	800f7e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111fc:	4b0c      	ldr	r3, [pc, #48]	; (8011230 <xTaskRemoveFromEventList+0xbc>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011202:	429a      	cmp	r2, r3
 8011204:	d905      	bls.n	8011212 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011206:	2301      	movs	r3, #1
 8011208:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801120a:	4b0a      	ldr	r3, [pc, #40]	; (8011234 <xTaskRemoveFromEventList+0xc0>)
 801120c:	2201      	movs	r2, #1
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	e001      	b.n	8011216 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011212:	2300      	movs	r3, #0
 8011214:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011216:	697b      	ldr	r3, [r7, #20]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3718      	adds	r7, #24
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	20001378 	.word	0x20001378
 8011224:	20001358 	.word	0x20001358
 8011228:	20000e80 	.word	0x20000e80
 801122c:	20001310 	.word	0x20001310
 8011230:	20000e7c 	.word	0x20000e7c
 8011234:	20001364 	.word	0x20001364

08011238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011240:	4b06      	ldr	r3, [pc, #24]	; (801125c <vTaskInternalSetTimeOutState+0x24>)
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011248:	4b05      	ldr	r3, [pc, #20]	; (8011260 <vTaskInternalSetTimeOutState+0x28>)
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	605a      	str	r2, [r3, #4]
}
 8011250:	bf00      	nop
 8011252:	370c      	adds	r7, #12
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	20001368 	.word	0x20001368
 8011260:	20001354 	.word	0x20001354

08011264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b088      	sub	sp, #32
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d109      	bne.n	8011288 <xTaskCheckForTimeOut+0x24>
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	613b      	str	r3, [r7, #16]
 8011286:	e7fe      	b.n	8011286 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d109      	bne.n	80112a2 <xTaskCheckForTimeOut+0x3e>
 801128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011292:	f383 8811 	msr	BASEPRI, r3
 8011296:	f3bf 8f6f 	isb	sy
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	60fb      	str	r3, [r7, #12]
 80112a0:	e7fe      	b.n	80112a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80112a2:	f000 ff63 	bl	801216c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80112a6:	4b1d      	ldr	r3, [pc, #116]	; (801131c <xTaskCheckForTimeOut+0xb8>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	69ba      	ldr	r2, [r7, #24]
 80112b2:	1ad3      	subs	r3, r2, r3
 80112b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112be:	d102      	bne.n	80112c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80112c0:	2300      	movs	r3, #0
 80112c2:	61fb      	str	r3, [r7, #28]
 80112c4:	e023      	b.n	801130e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	4b15      	ldr	r3, [pc, #84]	; (8011320 <xTaskCheckForTimeOut+0xbc>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d007      	beq.n	80112e2 <xTaskCheckForTimeOut+0x7e>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	69ba      	ldr	r2, [r7, #24]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d302      	bcc.n	80112e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80112dc:	2301      	movs	r3, #1
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	e015      	b.n	801130e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	697a      	ldr	r2, [r7, #20]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d20b      	bcs.n	8011304 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	1ad2      	subs	r2, r2, r3
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff ff9d 	bl	8011238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112fe:	2300      	movs	r3, #0
 8011300:	61fb      	str	r3, [r7, #28]
 8011302:	e004      	b.n	801130e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	2200      	movs	r2, #0
 8011308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801130a:	2301      	movs	r3, #1
 801130c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801130e:	f000 ff5b 	bl	80121c8 <vPortExitCritical>

	return xReturn;
 8011312:	69fb      	ldr	r3, [r7, #28]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3720      	adds	r7, #32
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20001354 	.word	0x20001354
 8011320:	20001368 	.word	0x20001368

08011324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011324:	b480      	push	{r7}
 8011326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011328:	4b03      	ldr	r3, [pc, #12]	; (8011338 <vTaskMissedYield+0x14>)
 801132a:	2201      	movs	r2, #1
 801132c:	601a      	str	r2, [r3, #0]
}
 801132e:	bf00      	nop
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	20001364 	.word	0x20001364

0801133c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011344:	f000 f852 	bl	80113ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011348:	4b06      	ldr	r3, [pc, #24]	; (8011364 <prvIdleTask+0x28>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d9f9      	bls.n	8011344 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011350:	4b05      	ldr	r3, [pc, #20]	; (8011368 <prvIdleTask+0x2c>)
 8011352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011356:	601a      	str	r2, [r3, #0]
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011360:	e7f0      	b.n	8011344 <prvIdleTask+0x8>
 8011362:	bf00      	nop
 8011364:	20000e80 	.word	0x20000e80
 8011368:	e000ed04 	.word	0xe000ed04

0801136c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011372:	2300      	movs	r3, #0
 8011374:	607b      	str	r3, [r7, #4]
 8011376:	e00c      	b.n	8011392 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	4a12      	ldr	r2, [pc, #72]	; (80113cc <prvInitialiseTaskLists+0x60>)
 8011384:	4413      	add	r3, r2
 8011386:	4618      	mov	r0, r3
 8011388:	f7fe fa00 	bl	800f78c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	3301      	adds	r3, #1
 8011390:	607b      	str	r3, [r7, #4]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2b37      	cmp	r3, #55	; 0x37
 8011396:	d9ef      	bls.n	8011378 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011398:	480d      	ldr	r0, [pc, #52]	; (80113d0 <prvInitialiseTaskLists+0x64>)
 801139a:	f7fe f9f7 	bl	800f78c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801139e:	480d      	ldr	r0, [pc, #52]	; (80113d4 <prvInitialiseTaskLists+0x68>)
 80113a0:	f7fe f9f4 	bl	800f78c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80113a4:	480c      	ldr	r0, [pc, #48]	; (80113d8 <prvInitialiseTaskLists+0x6c>)
 80113a6:	f7fe f9f1 	bl	800f78c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80113aa:	480c      	ldr	r0, [pc, #48]	; (80113dc <prvInitialiseTaskLists+0x70>)
 80113ac:	f7fe f9ee 	bl	800f78c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80113b0:	480b      	ldr	r0, [pc, #44]	; (80113e0 <prvInitialiseTaskLists+0x74>)
 80113b2:	f7fe f9eb 	bl	800f78c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80113b6:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <prvInitialiseTaskLists+0x78>)
 80113b8:	4a05      	ldr	r2, [pc, #20]	; (80113d0 <prvInitialiseTaskLists+0x64>)
 80113ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80113bc:	4b0a      	ldr	r3, [pc, #40]	; (80113e8 <prvInitialiseTaskLists+0x7c>)
 80113be:	4a05      	ldr	r2, [pc, #20]	; (80113d4 <prvInitialiseTaskLists+0x68>)
 80113c0:	601a      	str	r2, [r3, #0]
}
 80113c2:	bf00      	nop
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	20000e80 	.word	0x20000e80
 80113d0:	200012e0 	.word	0x200012e0
 80113d4:	200012f4 	.word	0x200012f4
 80113d8:	20001310 	.word	0x20001310
 80113dc:	20001324 	.word	0x20001324
 80113e0:	2000133c 	.word	0x2000133c
 80113e4:	20001308 	.word	0x20001308
 80113e8:	2000130c 	.word	0x2000130c

080113ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113f2:	e019      	b.n	8011428 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113f4:	f000 feba 	bl	801216c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113f8:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <prvCheckTasksWaitingTermination+0x4c>)
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	3304      	adds	r3, #4
 8011404:	4618      	mov	r0, r3
 8011406:	f7fe fa4b 	bl	800f8a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801140a:	4b0c      	ldr	r3, [pc, #48]	; (801143c <prvCheckTasksWaitingTermination+0x50>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3b01      	subs	r3, #1
 8011410:	4a0a      	ldr	r2, [pc, #40]	; (801143c <prvCheckTasksWaitingTermination+0x50>)
 8011412:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011414:	4b0a      	ldr	r3, [pc, #40]	; (8011440 <prvCheckTasksWaitingTermination+0x54>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	3b01      	subs	r3, #1
 801141a:	4a09      	ldr	r2, [pc, #36]	; (8011440 <prvCheckTasksWaitingTermination+0x54>)
 801141c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801141e:	f000 fed3 	bl	80121c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 f80e 	bl	8011444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011428:	4b05      	ldr	r3, [pc, #20]	; (8011440 <prvCheckTasksWaitingTermination+0x54>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d1e1      	bne.n	80113f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	20001324 	.word	0x20001324
 801143c:	20001350 	.word	0x20001350
 8011440:	20001338 	.word	0x20001338

08011444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011452:	2b00      	cmp	r3, #0
 8011454:	d108      	bne.n	8011468 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145a:	4618      	mov	r0, r3
 801145c:	f001 f862 	bl	8012524 <vPortFree>
				vPortFree( pxTCB );
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f001 f85f 	bl	8012524 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011466:	e017      	b.n	8011498 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801146e:	2b01      	cmp	r3, #1
 8011470:	d103      	bne.n	801147a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f001 f856 	bl	8012524 <vPortFree>
	}
 8011478:	e00e      	b.n	8011498 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011480:	2b02      	cmp	r3, #2
 8011482:	d009      	beq.n	8011498 <prvDeleteTCB+0x54>
 8011484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011488:	f383 8811 	msr	BASEPRI, r3
 801148c:	f3bf 8f6f 	isb	sy
 8011490:	f3bf 8f4f 	dsb	sy
 8011494:	60fb      	str	r3, [r7, #12]
 8011496:	e7fe      	b.n	8011496 <prvDeleteTCB+0x52>
	}
 8011498:	bf00      	nop
 801149a:	3710      	adds	r7, #16
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114a6:	4b0c      	ldr	r3, [pc, #48]	; (80114d8 <prvResetNextTaskUnblockTime+0x38>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d104      	bne.n	80114ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80114b0:	4b0a      	ldr	r3, [pc, #40]	; (80114dc <prvResetNextTaskUnblockTime+0x3c>)
 80114b2:	f04f 32ff 	mov.w	r2, #4294967295
 80114b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80114b8:	e008      	b.n	80114cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114ba:	4b07      	ldr	r3, [pc, #28]	; (80114d8 <prvResetNextTaskUnblockTime+0x38>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	4a04      	ldr	r2, [pc, #16]	; (80114dc <prvResetNextTaskUnblockTime+0x3c>)
 80114ca:	6013      	str	r3, [r2, #0]
}
 80114cc:	bf00      	nop
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr
 80114d8:	20001308 	.word	0x20001308
 80114dc:	20001370 	.word	0x20001370

080114e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114e6:	4b0b      	ldr	r3, [pc, #44]	; (8011514 <xTaskGetSchedulerState+0x34>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d102      	bne.n	80114f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114ee:	2301      	movs	r3, #1
 80114f0:	607b      	str	r3, [r7, #4]
 80114f2:	e008      	b.n	8011506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114f4:	4b08      	ldr	r3, [pc, #32]	; (8011518 <xTaskGetSchedulerState+0x38>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d102      	bne.n	8011502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114fc:	2302      	movs	r3, #2
 80114fe:	607b      	str	r3, [r7, #4]
 8011500:	e001      	b.n	8011506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011502:	2300      	movs	r3, #0
 8011504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011506:	687b      	ldr	r3, [r7, #4]
	}
 8011508:	4618      	mov	r0, r3
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr
 8011514:	2000135c 	.word	0x2000135c
 8011518:	20001378 	.word	0x20001378

0801151c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011528:	2300      	movs	r3, #0
 801152a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d051      	beq.n	80115d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011536:	4b2a      	ldr	r3, [pc, #168]	; (80115e0 <xTaskPriorityInherit+0xc4>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801153c:	429a      	cmp	r2, r3
 801153e:	d241      	bcs.n	80115c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	699b      	ldr	r3, [r3, #24]
 8011544:	2b00      	cmp	r3, #0
 8011546:	db06      	blt.n	8011556 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011548:	4b25      	ldr	r3, [pc, #148]	; (80115e0 <xTaskPriorityInherit+0xc4>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	6959      	ldr	r1, [r3, #20]
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801155e:	4613      	mov	r3, r2
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	4413      	add	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4a1f      	ldr	r2, [pc, #124]	; (80115e4 <xTaskPriorityInherit+0xc8>)
 8011568:	4413      	add	r3, r2
 801156a:	4299      	cmp	r1, r3
 801156c:	d122      	bne.n	80115b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	3304      	adds	r3, #4
 8011572:	4618      	mov	r0, r3
 8011574:	f7fe f994 	bl	800f8a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011578:	4b19      	ldr	r3, [pc, #100]	; (80115e0 <xTaskPriorityInherit+0xc4>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011586:	4b18      	ldr	r3, [pc, #96]	; (80115e8 <xTaskPriorityInherit+0xcc>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d903      	bls.n	8011596 <xTaskPriorityInherit+0x7a>
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011592:	4a15      	ldr	r2, [pc, #84]	; (80115e8 <xTaskPriorityInherit+0xcc>)
 8011594:	6013      	str	r3, [r2, #0]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159a:	4613      	mov	r3, r2
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	4413      	add	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4a10      	ldr	r2, [pc, #64]	; (80115e4 <xTaskPriorityInherit+0xc8>)
 80115a4:	441a      	add	r2, r3
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	3304      	adds	r3, #4
 80115aa:	4619      	mov	r1, r3
 80115ac:	4610      	mov	r0, r2
 80115ae:	f7fe f91a 	bl	800f7e6 <vListInsertEnd>
 80115b2:	e004      	b.n	80115be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80115b4:	4b0a      	ldr	r3, [pc, #40]	; (80115e0 <xTaskPriorityInherit+0xc4>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80115be:	2301      	movs	r3, #1
 80115c0:	60fb      	str	r3, [r7, #12]
 80115c2:	e008      	b.n	80115d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115c8:	4b05      	ldr	r3, [pc, #20]	; (80115e0 <xTaskPriorityInherit+0xc4>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d201      	bcs.n	80115d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80115d2:	2301      	movs	r3, #1
 80115d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115d6:	68fb      	ldr	r3, [r7, #12]
	}
 80115d8:	4618      	mov	r0, r3
 80115da:	3710      	adds	r7, #16
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	20000e7c 	.word	0x20000e7c
 80115e4:	20000e80 	.word	0x20000e80
 80115e8:	20001358 	.word	0x20001358

080115ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115f8:	2300      	movs	r3, #0
 80115fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d054      	beq.n	80116ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011602:	4b2d      	ldr	r3, [pc, #180]	; (80116b8 <xTaskPriorityDisinherit+0xcc>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	429a      	cmp	r2, r3
 801160a:	d009      	beq.n	8011620 <xTaskPriorityDisinherit+0x34>
 801160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011610:	f383 8811 	msr	BASEPRI, r3
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	60fb      	str	r3, [r7, #12]
 801161e:	e7fe      	b.n	801161e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011624:	2b00      	cmp	r3, #0
 8011626:	d109      	bne.n	801163c <xTaskPriorityDisinherit+0x50>
 8011628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801162c:	f383 8811 	msr	BASEPRI, r3
 8011630:	f3bf 8f6f 	isb	sy
 8011634:	f3bf 8f4f 	dsb	sy
 8011638:	60bb      	str	r3, [r7, #8]
 801163a:	e7fe      	b.n	801163a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011640:	1e5a      	subs	r2, r3, #1
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801164e:	429a      	cmp	r2, r3
 8011650:	d02c      	beq.n	80116ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011656:	2b00      	cmp	r3, #0
 8011658:	d128      	bne.n	80116ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	3304      	adds	r3, #4
 801165e:	4618      	mov	r0, r3
 8011660:	f7fe f91e 	bl	800f8a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011670:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801167c:	4b0f      	ldr	r3, [pc, #60]	; (80116bc <xTaskPriorityDisinherit+0xd0>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	429a      	cmp	r2, r3
 8011682:	d903      	bls.n	801168c <xTaskPriorityDisinherit+0xa0>
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011688:	4a0c      	ldr	r2, [pc, #48]	; (80116bc <xTaskPriorityDisinherit+0xd0>)
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011690:	4613      	mov	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4a09      	ldr	r2, [pc, #36]	; (80116c0 <xTaskPriorityDisinherit+0xd4>)
 801169a:	441a      	add	r2, r3
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	3304      	adds	r3, #4
 80116a0:	4619      	mov	r1, r3
 80116a2:	4610      	mov	r0, r2
 80116a4:	f7fe f89f 	bl	800f7e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80116a8:	2301      	movs	r3, #1
 80116aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80116ac:	697b      	ldr	r3, [r7, #20]
	}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3718      	adds	r7, #24
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20000e7c 	.word	0x20000e7c
 80116bc:	20001358 	.word	0x20001358
 80116c0:	20000e80 	.word	0x20000e80

080116c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b088      	sub	sp, #32
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80116d2:	2301      	movs	r3, #1
 80116d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d068      	beq.n	80117ae <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d109      	bne.n	80116f8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80116e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	60fb      	str	r3, [r7, #12]
 80116f6:	e7fe      	b.n	80116f6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d902      	bls.n	8011708 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	61fb      	str	r3, [r7, #28]
 8011706:	e002      	b.n	801170e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801170c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011712:	69fa      	ldr	r2, [r7, #28]
 8011714:	429a      	cmp	r2, r3
 8011716:	d04a      	beq.n	80117ae <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801171c:	697a      	ldr	r2, [r7, #20]
 801171e:	429a      	cmp	r2, r3
 8011720:	d145      	bne.n	80117ae <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011722:	4b25      	ldr	r3, [pc, #148]	; (80117b8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	69ba      	ldr	r2, [r7, #24]
 8011728:	429a      	cmp	r2, r3
 801172a:	d109      	bne.n	8011740 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	60bb      	str	r3, [r7, #8]
 801173e:	e7fe      	b.n	801173e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011744:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	69fa      	ldr	r2, [r7, #28]
 801174a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	699b      	ldr	r3, [r3, #24]
 8011750:	2b00      	cmp	r3, #0
 8011752:	db04      	blt.n	801175e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	6959      	ldr	r1, [r3, #20]
 8011762:	693a      	ldr	r2, [r7, #16]
 8011764:	4613      	mov	r3, r2
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	4413      	add	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4a13      	ldr	r2, [pc, #76]	; (80117bc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801176e:	4413      	add	r3, r2
 8011770:	4299      	cmp	r1, r3
 8011772:	d11c      	bne.n	80117ae <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	3304      	adds	r3, #4
 8011778:	4618      	mov	r0, r3
 801177a:	f7fe f891 	bl	800f8a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011782:	4b0f      	ldr	r3, [pc, #60]	; (80117c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	429a      	cmp	r2, r3
 8011788:	d903      	bls.n	8011792 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178e:	4a0c      	ldr	r2, [pc, #48]	; (80117c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011790:	6013      	str	r3, [r2, #0]
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011796:	4613      	mov	r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4413      	add	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4a07      	ldr	r2, [pc, #28]	; (80117bc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80117a0:	441a      	add	r2, r3
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	3304      	adds	r3, #4
 80117a6:	4619      	mov	r1, r3
 80117a8:	4610      	mov	r0, r2
 80117aa:	f7fe f81c 	bl	800f7e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117ae:	bf00      	nop
 80117b0:	3720      	adds	r7, #32
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	20000e7c 	.word	0x20000e7c
 80117bc:	20000e80 	.word	0x20000e80
 80117c0:	20001358 	.word	0x20001358

080117c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80117c4:	b480      	push	{r7}
 80117c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80117c8:	4b07      	ldr	r3, [pc, #28]	; (80117e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d004      	beq.n	80117da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80117d0:	4b05      	ldr	r3, [pc, #20]	; (80117e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117d6:	3201      	adds	r2, #1
 80117d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80117da:	4b03      	ldr	r3, [pc, #12]	; (80117e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80117dc:	681b      	ldr	r3, [r3, #0]
	}
 80117de:	4618      	mov	r0, r3
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	20000e7c 	.word	0x20000e7c

080117ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117f6:	4b21      	ldr	r3, [pc, #132]	; (801187c <prvAddCurrentTaskToDelayedList+0x90>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117fc:	4b20      	ldr	r3, [pc, #128]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	3304      	adds	r3, #4
 8011802:	4618      	mov	r0, r3
 8011804:	f7fe f84c 	bl	800f8a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801180e:	d10a      	bne.n	8011826 <prvAddCurrentTaskToDelayedList+0x3a>
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d007      	beq.n	8011826 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011816:	4b1a      	ldr	r3, [pc, #104]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	3304      	adds	r3, #4
 801181c:	4619      	mov	r1, r3
 801181e:	4819      	ldr	r0, [pc, #100]	; (8011884 <prvAddCurrentTaskToDelayedList+0x98>)
 8011820:	f7fd ffe1 	bl	800f7e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011824:	e026      	b.n	8011874 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4413      	add	r3, r2
 801182c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801182e:	4b14      	ldr	r3, [pc, #80]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011836:	68ba      	ldr	r2, [r7, #8]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	429a      	cmp	r2, r3
 801183c:	d209      	bcs.n	8011852 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801183e:	4b12      	ldr	r3, [pc, #72]	; (8011888 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	4b0f      	ldr	r3, [pc, #60]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	3304      	adds	r3, #4
 8011848:	4619      	mov	r1, r3
 801184a:	4610      	mov	r0, r2
 801184c:	f7fd ffef 	bl	800f82e <vListInsert>
}
 8011850:	e010      	b.n	8011874 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011852:	4b0e      	ldr	r3, [pc, #56]	; (801188c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3304      	adds	r3, #4
 801185c:	4619      	mov	r1, r3
 801185e:	4610      	mov	r0, r2
 8011860:	f7fd ffe5 	bl	800f82e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011864:	4b0a      	ldr	r3, [pc, #40]	; (8011890 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	429a      	cmp	r2, r3
 801186c:	d202      	bcs.n	8011874 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801186e:	4a08      	ldr	r2, [pc, #32]	; (8011890 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	6013      	str	r3, [r2, #0]
}
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	20001354 	.word	0x20001354
 8011880:	20000e7c 	.word	0x20000e7c
 8011884:	2000133c 	.word	0x2000133c
 8011888:	2000130c 	.word	0x2000130c
 801188c:	20001308 	.word	0x20001308
 8011890:	20001370 	.word	0x20001370

08011894 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b08a      	sub	sp, #40	; 0x28
 8011898:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801189a:	2300      	movs	r3, #0
 801189c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801189e:	f000 faff 	bl	8011ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80118a2:	4b1c      	ldr	r3, [pc, #112]	; (8011914 <xTimerCreateTimerTask+0x80>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d021      	beq.n	80118ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118aa:	2300      	movs	r3, #0
 80118ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118ae:	2300      	movs	r3, #0
 80118b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118b2:	1d3a      	adds	r2, r7, #4
 80118b4:	f107 0108 	add.w	r1, r7, #8
 80118b8:	f107 030c 	add.w	r3, r7, #12
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fd ff4b 	bl	800f758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	68fa      	ldr	r2, [r7, #12]
 80118c8:	9202      	str	r2, [sp, #8]
 80118ca:	9301      	str	r3, [sp, #4]
 80118cc:	2302      	movs	r3, #2
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	2300      	movs	r3, #0
 80118d2:	460a      	mov	r2, r1
 80118d4:	4910      	ldr	r1, [pc, #64]	; (8011918 <xTimerCreateTimerTask+0x84>)
 80118d6:	4811      	ldr	r0, [pc, #68]	; (801191c <xTimerCreateTimerTask+0x88>)
 80118d8:	f7fe fffa 	bl	80108d0 <xTaskCreateStatic>
 80118dc:	4602      	mov	r2, r0
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <xTimerCreateTimerTask+0x8c>)
 80118e0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80118e2:	4b0f      	ldr	r3, [pc, #60]	; (8011920 <xTimerCreateTimerTask+0x8c>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d001      	beq.n	80118ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80118ea:	2301      	movs	r3, #1
 80118ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d109      	bne.n	8011908 <xTimerCreateTimerTask+0x74>
 80118f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	613b      	str	r3, [r7, #16]
 8011906:	e7fe      	b.n	8011906 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8011908:	697b      	ldr	r3, [r7, #20]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3718      	adds	r7, #24
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	200013ac 	.word	0x200013ac
 8011918:	08014e3c 	.word	0x08014e3c
 801191c:	08011a55 	.word	0x08011a55
 8011920:	200013b0 	.word	0x200013b0

08011924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011932:	2300      	movs	r3, #0
 8011934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d109      	bne.n	8011950 <xTimerGenericCommand+0x2c>
 801193c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011940:	f383 8811 	msr	BASEPRI, r3
 8011944:	f3bf 8f6f 	isb	sy
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	623b      	str	r3, [r7, #32]
 801194e:	e7fe      	b.n	801194e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011950:	4b19      	ldr	r3, [pc, #100]	; (80119b8 <xTimerGenericCommand+0x94>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d02a      	beq.n	80119ae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	2b05      	cmp	r3, #5
 8011968:	dc18      	bgt.n	801199c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801196a:	f7ff fdb9 	bl	80114e0 <xTaskGetSchedulerState>
 801196e:	4603      	mov	r3, r0
 8011970:	2b02      	cmp	r3, #2
 8011972:	d109      	bne.n	8011988 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011974:	4b10      	ldr	r3, [pc, #64]	; (80119b8 <xTimerGenericCommand+0x94>)
 8011976:	6818      	ldr	r0, [r3, #0]
 8011978:	f107 0110 	add.w	r1, r7, #16
 801197c:	2300      	movs	r3, #0
 801197e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011980:	f7fe f95c 	bl	800fc3c <xQueueGenericSend>
 8011984:	6278      	str	r0, [r7, #36]	; 0x24
 8011986:	e012      	b.n	80119ae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011988:	4b0b      	ldr	r3, [pc, #44]	; (80119b8 <xTimerGenericCommand+0x94>)
 801198a:	6818      	ldr	r0, [r3, #0]
 801198c:	f107 0110 	add.w	r1, r7, #16
 8011990:	2300      	movs	r3, #0
 8011992:	2200      	movs	r2, #0
 8011994:	f7fe f952 	bl	800fc3c <xQueueGenericSend>
 8011998:	6278      	str	r0, [r7, #36]	; 0x24
 801199a:	e008      	b.n	80119ae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801199c:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <xTimerGenericCommand+0x94>)
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	f107 0110 	add.w	r1, r7, #16
 80119a4:	2300      	movs	r3, #0
 80119a6:	683a      	ldr	r2, [r7, #0]
 80119a8:	f7fe fa42 	bl	800fe30 <xQueueGenericSendFromISR>
 80119ac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3728      	adds	r7, #40	; 0x28
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	200013ac 	.word	0x200013ac

080119bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b088      	sub	sp, #32
 80119c0:	af02      	add	r7, sp, #8
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119c6:	4b22      	ldr	r3, [pc, #136]	; (8011a50 <prvProcessExpiredTimer+0x94>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	3304      	adds	r3, #4
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fd ff63 	bl	800f8a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119e0:	f003 0304 	and.w	r3, r3, #4
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d021      	beq.n	8011a2c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	699a      	ldr	r2, [r3, #24]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	18d1      	adds	r1, r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	6978      	ldr	r0, [r7, #20]
 80119f6:	f000 f8d1 	bl	8011b9c <prvInsertTimerInActiveList>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d01e      	beq.n	8011a3e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a00:	2300      	movs	r3, #0
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	2300      	movs	r3, #0
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	2100      	movs	r1, #0
 8011a0a:	6978      	ldr	r0, [r7, #20]
 8011a0c:	f7ff ff8a 	bl	8011924 <xTimerGenericCommand>
 8011a10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d112      	bne.n	8011a3e <prvProcessExpiredTimer+0x82>
 8011a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1c:	f383 8811 	msr	BASEPRI, r3
 8011a20:	f3bf 8f6f 	isb	sy
 8011a24:	f3bf 8f4f 	dsb	sy
 8011a28:	60fb      	str	r3, [r7, #12]
 8011a2a:	e7fe      	b.n	8011a2a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a32:	f023 0301 	bic.w	r3, r3, #1
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	6978      	ldr	r0, [r7, #20]
 8011a44:	4798      	blx	r3
}
 8011a46:	bf00      	nop
 8011a48:	3718      	adds	r7, #24
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	200013a4 	.word	0x200013a4

08011a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a5c:	f107 0308 	add.w	r3, r7, #8
 8011a60:	4618      	mov	r0, r3
 8011a62:	f000 f857 	bl	8011b14 <prvGetNextExpireTime>
 8011a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f000 f803 	bl	8011a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a72:	f000 f8d5 	bl	8011c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a76:	e7f1      	b.n	8011a5c <prvTimerTask+0x8>

08011a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011a82:	f7ff f95b 	bl	8010d3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a86:	f107 0308 	add.w	r3, r7, #8
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 f866 	bl	8011b5c <prvSampleTimeNow>
 8011a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d130      	bne.n	8011afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d10a      	bne.n	8011ab4 <prvProcessTimerOrBlockTask+0x3c>
 8011a9e:	687a      	ldr	r2, [r7, #4]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d806      	bhi.n	8011ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011aa6:	f7ff f957 	bl	8010d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011aaa:	68f9      	ldr	r1, [r7, #12]
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f7ff ff85 	bl	80119bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011ab2:	e024      	b.n	8011afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d008      	beq.n	8011acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011aba:	4b13      	ldr	r3, [pc, #76]	; (8011b08 <prvProcessTimerOrBlockTask+0x90>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d101      	bne.n	8011ac8 <prvProcessTimerOrBlockTask+0x50>
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	e000      	b.n	8011aca <prvProcessTimerOrBlockTask+0x52>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011acc:	4b0f      	ldr	r3, [pc, #60]	; (8011b0c <prvProcessTimerOrBlockTask+0x94>)
 8011ace:	6818      	ldr	r0, [r3, #0]
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	4619      	mov	r1, r3
 8011ada:	f7fe fec5 	bl	8010868 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011ade:	f7ff f93b 	bl	8010d58 <xTaskResumeAll>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10a      	bne.n	8011afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011ae8:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <prvProcessTimerOrBlockTask+0x98>)
 8011aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aee:	601a      	str	r2, [r3, #0]
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	f3bf 8f6f 	isb	sy
}
 8011af8:	e001      	b.n	8011afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011afa:	f7ff f92d 	bl	8010d58 <xTaskResumeAll>
}
 8011afe:	bf00      	nop
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	200013a8 	.word	0x200013a8
 8011b0c:	200013ac 	.word	0x200013ac
 8011b10:	e000ed04 	.word	0xe000ed04

08011b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b1c:	4b0e      	ldr	r3, [pc, #56]	; (8011b58 <prvGetNextExpireTime+0x44>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <prvGetNextExpireTime+0x16>
 8011b26:	2201      	movs	r2, #1
 8011b28:	e000      	b.n	8011b2c <prvGetNextExpireTime+0x18>
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d105      	bne.n	8011b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b38:	4b07      	ldr	r3, [pc, #28]	; (8011b58 <prvGetNextExpireTime+0x44>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	60fb      	str	r3, [r7, #12]
 8011b42:	e001      	b.n	8011b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b44:	2300      	movs	r3, #0
 8011b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011b48:	68fb      	ldr	r3, [r7, #12]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3714      	adds	r7, #20
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop
 8011b58:	200013a4 	.word	0x200013a4

08011b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011b64:	f7ff f994 	bl	8010e90 <xTaskGetTickCount>
 8011b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011b6a:	4b0b      	ldr	r3, [pc, #44]	; (8011b98 <prvSampleTimeNow+0x3c>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d205      	bcs.n	8011b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011b74:	f000 f930 	bl	8011dd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	e002      	b.n	8011b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011b86:	4a04      	ldr	r2, [pc, #16]	; (8011b98 <prvSampleTimeNow+0x3c>)
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	200013b4 	.word	0x200013b4

08011b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
 8011ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011baa:	2300      	movs	r3, #0
 8011bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	68ba      	ldr	r2, [r7, #8]
 8011bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d812      	bhi.n	8011be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	1ad2      	subs	r2, r2, r3
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d302      	bcc.n	8011bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	617b      	str	r3, [r7, #20]
 8011bd4:	e01b      	b.n	8011c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011bd6:	4b10      	ldr	r3, [pc, #64]	; (8011c18 <prvInsertTimerInActiveList+0x7c>)
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	3304      	adds	r3, #4
 8011bde:	4619      	mov	r1, r3
 8011be0:	4610      	mov	r0, r2
 8011be2:	f7fd fe24 	bl	800f82e <vListInsert>
 8011be6:	e012      	b.n	8011c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d206      	bcs.n	8011bfe <prvInsertTimerInActiveList+0x62>
 8011bf0:	68ba      	ldr	r2, [r7, #8]
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d302      	bcc.n	8011bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	617b      	str	r3, [r7, #20]
 8011bfc:	e007      	b.n	8011c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011bfe:	4b07      	ldr	r3, [pc, #28]	; (8011c1c <prvInsertTimerInActiveList+0x80>)
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	3304      	adds	r3, #4
 8011c06:	4619      	mov	r1, r3
 8011c08:	4610      	mov	r0, r2
 8011c0a:	f7fd fe10 	bl	800f82e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011c0e:	697b      	ldr	r3, [r7, #20]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	200013a8 	.word	0x200013a8
 8011c1c:	200013a4 	.word	0x200013a4

08011c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b08e      	sub	sp, #56	; 0x38
 8011c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c26:	e0c6      	b.n	8011db6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	da17      	bge.n	8011c5e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c2e:	1d3b      	adds	r3, r7, #4
 8011c30:	3304      	adds	r3, #4
 8011c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d109      	bne.n	8011c4e <prvProcessReceivedCommands+0x2e>
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	f383 8811 	msr	BASEPRI, r3
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	f3bf 8f4f 	dsb	sy
 8011c4a:	61fb      	str	r3, [r7, #28]
 8011c4c:	e7fe      	b.n	8011c4c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c54:	6850      	ldr	r0, [r2, #4]
 8011c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c58:	6892      	ldr	r2, [r2, #8]
 8011c5a:	4611      	mov	r1, r2
 8011c5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f2c0 80a7 	blt.w	8011db4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d004      	beq.n	8011c7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c74:	3304      	adds	r3, #4
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fd fe12 	bl	800f8a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c7c:	463b      	mov	r3, r7
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff ff6c 	bl	8011b5c <prvSampleTimeNow>
 8011c84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2b09      	cmp	r3, #9
 8011c8a:	f200 8094 	bhi.w	8011db6 <prvProcessReceivedCommands+0x196>
 8011c8e:	a201      	add	r2, pc, #4	; (adr r2, 8011c94 <prvProcessReceivedCommands+0x74>)
 8011c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c94:	08011cbd 	.word	0x08011cbd
 8011c98:	08011cbd 	.word	0x08011cbd
 8011c9c:	08011cbd 	.word	0x08011cbd
 8011ca0:	08011d2f 	.word	0x08011d2f
 8011ca4:	08011d43 	.word	0x08011d43
 8011ca8:	08011d8b 	.word	0x08011d8b
 8011cac:	08011cbd 	.word	0x08011cbd
 8011cb0:	08011cbd 	.word	0x08011cbd
 8011cb4:	08011d2f 	.word	0x08011d2f
 8011cb8:	08011d43 	.word	0x08011d43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cc2:	f043 0301 	orr.w	r3, r3, #1
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011cce:	68ba      	ldr	r2, [r7, #8]
 8011cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd2:	699b      	ldr	r3, [r3, #24]
 8011cd4:	18d1      	adds	r1, r2, r3
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cdc:	f7ff ff5e 	bl	8011b9c <prvInsertTimerInActiveList>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d067      	beq.n	8011db6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce8:	6a1b      	ldr	r3, [r3, #32]
 8011cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cf4:	f003 0304 	and.w	r3, r3, #4
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d05c      	beq.n	8011db6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d00:	699b      	ldr	r3, [r3, #24]
 8011d02:	441a      	add	r2, r3
 8011d04:	2300      	movs	r3, #0
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	2300      	movs	r3, #0
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d0e:	f7ff fe09 	bl	8011924 <xTimerGenericCommand>
 8011d12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011d14:	6a3b      	ldr	r3, [r7, #32]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d14d      	bne.n	8011db6 <prvProcessReceivedCommands+0x196>
 8011d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1e:	f383 8811 	msr	BASEPRI, r3
 8011d22:	f3bf 8f6f 	isb	sy
 8011d26:	f3bf 8f4f 	dsb	sy
 8011d2a:	61bb      	str	r3, [r7, #24]
 8011d2c:	e7fe      	b.n	8011d2c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d34:	f023 0301 	bic.w	r3, r3, #1
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011d40:	e039      	b.n	8011db6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d48:	f043 0301 	orr.w	r3, r3, #1
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5c:	699b      	ldr	r3, [r3, #24]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d109      	bne.n	8011d76 <prvProcessReceivedCommands+0x156>
 8011d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	617b      	str	r3, [r7, #20]
 8011d74:	e7fe      	b.n	8011d74 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d78:	699a      	ldr	r2, [r3, #24]
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7c:	18d1      	adds	r1, r2, r3
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d84:	f7ff ff0a 	bl	8011b9c <prvInsertTimerInActiveList>
					break;
 8011d88:	e015      	b.n	8011db6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d90:	f003 0302 	and.w	r3, r3, #2
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d103      	bne.n	8011da0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d9a:	f000 fbc3 	bl	8012524 <vPortFree>
 8011d9e:	e00a      	b.n	8011db6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011da6:	f023 0301 	bic.w	r3, r3, #1
 8011daa:	b2da      	uxtb	r2, r3
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011db2:	e000      	b.n	8011db6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011db4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011db6:	4b07      	ldr	r3, [pc, #28]	; (8011dd4 <prvProcessReceivedCommands+0x1b4>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	1d39      	adds	r1, r7, #4
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fe f954 	bl	801006c <xQueueReceive>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f47f af2e 	bne.w	8011c28 <prvProcessReceivedCommands+0x8>
	}
}
 8011dcc:	bf00      	nop
 8011dce:	3730      	adds	r7, #48	; 0x30
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	200013ac 	.word	0x200013ac

08011dd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b088      	sub	sp, #32
 8011ddc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011dde:	e047      	b.n	8011e70 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011de0:	4b2d      	ldr	r3, [pc, #180]	; (8011e98 <prvSwitchTimerLists+0xc0>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dea:	4b2b      	ldr	r3, [pc, #172]	; (8011e98 <prvSwitchTimerLists+0xc0>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	3304      	adds	r3, #4
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fd fd51 	bl	800f8a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	6a1b      	ldr	r3, [r3, #32]
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e0c:	f003 0304 	and.w	r3, r3, #4
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d02d      	beq.n	8011e70 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	699b      	ldr	r3, [r3, #24]
 8011e18:	693a      	ldr	r2, [r7, #16]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d90e      	bls.n	8011e44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e32:	4b19      	ldr	r3, [pc, #100]	; (8011e98 <prvSwitchTimerLists+0xc0>)
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	3304      	adds	r3, #4
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	4610      	mov	r0, r2
 8011e3e:	f7fd fcf6 	bl	800f82e <vListInsert>
 8011e42:	e015      	b.n	8011e70 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e44:	2300      	movs	r3, #0
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	2300      	movs	r3, #0
 8011e4a:	693a      	ldr	r2, [r7, #16]
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7ff fd68 	bl	8011924 <xTimerGenericCommand>
 8011e54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d109      	bne.n	8011e70 <prvSwitchTimerLists+0x98>
 8011e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e60:	f383 8811 	msr	BASEPRI, r3
 8011e64:	f3bf 8f6f 	isb	sy
 8011e68:	f3bf 8f4f 	dsb	sy
 8011e6c:	603b      	str	r3, [r7, #0]
 8011e6e:	e7fe      	b.n	8011e6e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e70:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <prvSwitchTimerLists+0xc0>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d1b2      	bne.n	8011de0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e7a:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <prvSwitchTimerLists+0xc0>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e80:	4b06      	ldr	r3, [pc, #24]	; (8011e9c <prvSwitchTimerLists+0xc4>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4a04      	ldr	r2, [pc, #16]	; (8011e98 <prvSwitchTimerLists+0xc0>)
 8011e86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e88:	4a04      	ldr	r2, [pc, #16]	; (8011e9c <prvSwitchTimerLists+0xc4>)
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	6013      	str	r3, [r2, #0]
}
 8011e8e:	bf00      	nop
 8011e90:	3718      	adds	r7, #24
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	200013a4 	.word	0x200013a4
 8011e9c:	200013a8 	.word	0x200013a8

08011ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011ea6:	f000 f961 	bl	801216c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011eaa:	4b15      	ldr	r3, [pc, #84]	; (8011f00 <prvCheckForValidListAndQueue+0x60>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d120      	bne.n	8011ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011eb2:	4814      	ldr	r0, [pc, #80]	; (8011f04 <prvCheckForValidListAndQueue+0x64>)
 8011eb4:	f7fd fc6a 	bl	800f78c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011eb8:	4813      	ldr	r0, [pc, #76]	; (8011f08 <prvCheckForValidListAndQueue+0x68>)
 8011eba:	f7fd fc67 	bl	800f78c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011ebe:	4b13      	ldr	r3, [pc, #76]	; (8011f0c <prvCheckForValidListAndQueue+0x6c>)
 8011ec0:	4a10      	ldr	r2, [pc, #64]	; (8011f04 <prvCheckForValidListAndQueue+0x64>)
 8011ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011ec4:	4b12      	ldr	r3, [pc, #72]	; (8011f10 <prvCheckForValidListAndQueue+0x70>)
 8011ec6:	4a10      	ldr	r2, [pc, #64]	; (8011f08 <prvCheckForValidListAndQueue+0x68>)
 8011ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011eca:	2300      	movs	r3, #0
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	4b11      	ldr	r3, [pc, #68]	; (8011f14 <prvCheckForValidListAndQueue+0x74>)
 8011ed0:	4a11      	ldr	r2, [pc, #68]	; (8011f18 <prvCheckForValidListAndQueue+0x78>)
 8011ed2:	2110      	movs	r1, #16
 8011ed4:	200a      	movs	r0, #10
 8011ed6:	f7fd fd75 	bl	800f9c4 <xQueueGenericCreateStatic>
 8011eda:	4602      	mov	r2, r0
 8011edc:	4b08      	ldr	r3, [pc, #32]	; (8011f00 <prvCheckForValidListAndQueue+0x60>)
 8011ede:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011ee0:	4b07      	ldr	r3, [pc, #28]	; (8011f00 <prvCheckForValidListAndQueue+0x60>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d005      	beq.n	8011ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011ee8:	4b05      	ldr	r3, [pc, #20]	; (8011f00 <prvCheckForValidListAndQueue+0x60>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	490b      	ldr	r1, [pc, #44]	; (8011f1c <prvCheckForValidListAndQueue+0x7c>)
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fe fc68 	bl	80107c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ef4:	f000 f968 	bl	80121c8 <vPortExitCritical>
}
 8011ef8:	bf00      	nop
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	200013ac 	.word	0x200013ac
 8011f04:	2000137c 	.word	0x2000137c
 8011f08:	20001390 	.word	0x20001390
 8011f0c:	200013a4 	.word	0x200013a4
 8011f10:	200013a8 	.word	0x200013a8
 8011f14:	20001458 	.word	0x20001458
 8011f18:	200013b8 	.word	0x200013b8
 8011f1c:	08014e44 	.word	0x08014e44

08011f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f20:	b480      	push	{r7}
 8011f22:	b085      	sub	sp, #20
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	3b04      	subs	r3, #4
 8011f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	3b04      	subs	r3, #4
 8011f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	f023 0201 	bic.w	r2, r3, #1
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	3b04      	subs	r3, #4
 8011f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f50:	4a0c      	ldr	r2, [pc, #48]	; (8011f84 <pxPortInitialiseStack+0x64>)
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	3b14      	subs	r3, #20
 8011f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3b04      	subs	r3, #4
 8011f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f06f 0202 	mvn.w	r2, #2
 8011f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	3b20      	subs	r3, #32
 8011f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f76:	68fb      	ldr	r3, [r7, #12]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3714      	adds	r7, #20
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	08011f89 	.word	0x08011f89

08011f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f92:	4b11      	ldr	r3, [pc, #68]	; (8011fd8 <prvTaskExitError+0x50>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9a:	d009      	beq.n	8011fb0 <prvTaskExitError+0x28>
 8011f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa0:	f383 8811 	msr	BASEPRI, r3
 8011fa4:	f3bf 8f6f 	isb	sy
 8011fa8:	f3bf 8f4f 	dsb	sy
 8011fac:	60fb      	str	r3, [r7, #12]
 8011fae:	e7fe      	b.n	8011fae <prvTaskExitError+0x26>
 8011fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011fc2:	bf00      	nop
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d0fc      	beq.n	8011fc4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fca:	bf00      	nop
 8011fcc:	3714      	adds	r7, #20
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	20000490 	.word	0x20000490
 8011fdc:	00000000 	.word	0x00000000

08011fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011fe0:	4b07      	ldr	r3, [pc, #28]	; (8012000 <pxCurrentTCBConst2>)
 8011fe2:	6819      	ldr	r1, [r3, #0]
 8011fe4:	6808      	ldr	r0, [r1, #0]
 8011fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fea:	f380 8809 	msr	PSP, r0
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	f04f 0000 	mov.w	r0, #0
 8011ff6:	f380 8811 	msr	BASEPRI, r0
 8011ffa:	4770      	bx	lr
 8011ffc:	f3af 8000 	nop.w

08012000 <pxCurrentTCBConst2>:
 8012000:	20000e7c 	.word	0x20000e7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012004:	bf00      	nop
 8012006:	bf00      	nop

08012008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012008:	4808      	ldr	r0, [pc, #32]	; (801202c <prvPortStartFirstTask+0x24>)
 801200a:	6800      	ldr	r0, [r0, #0]
 801200c:	6800      	ldr	r0, [r0, #0]
 801200e:	f380 8808 	msr	MSP, r0
 8012012:	f04f 0000 	mov.w	r0, #0
 8012016:	f380 8814 	msr	CONTROL, r0
 801201a:	b662      	cpsie	i
 801201c:	b661      	cpsie	f
 801201e:	f3bf 8f4f 	dsb	sy
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	df00      	svc	0
 8012028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801202a:	bf00      	nop
 801202c:	e000ed08 	.word	0xe000ed08

08012030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012036:	4b44      	ldr	r3, [pc, #272]	; (8012148 <xPortStartScheduler+0x118>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4a44      	ldr	r2, [pc, #272]	; (801214c <xPortStartScheduler+0x11c>)
 801203c:	4293      	cmp	r3, r2
 801203e:	d109      	bne.n	8012054 <xPortStartScheduler+0x24>
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	613b      	str	r3, [r7, #16]
 8012052:	e7fe      	b.n	8012052 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012054:	4b3c      	ldr	r3, [pc, #240]	; (8012148 <xPortStartScheduler+0x118>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4a3d      	ldr	r2, [pc, #244]	; (8012150 <xPortStartScheduler+0x120>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d109      	bne.n	8012072 <xPortStartScheduler+0x42>
 801205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	60fb      	str	r3, [r7, #12]
 8012070:	e7fe      	b.n	8012070 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012072:	4b38      	ldr	r3, [pc, #224]	; (8012154 <xPortStartScheduler+0x124>)
 8012074:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	b2db      	uxtb	r3, r3
 801207c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	22ff      	movs	r2, #255	; 0xff
 8012082:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	b2db      	uxtb	r3, r3
 801208a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801208c:	78fb      	ldrb	r3, [r7, #3]
 801208e:	b2db      	uxtb	r3, r3
 8012090:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012094:	b2da      	uxtb	r2, r3
 8012096:	4b30      	ldr	r3, [pc, #192]	; (8012158 <xPortStartScheduler+0x128>)
 8012098:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801209a:	4b30      	ldr	r3, [pc, #192]	; (801215c <xPortStartScheduler+0x12c>)
 801209c:	2207      	movs	r2, #7
 801209e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120a0:	e009      	b.n	80120b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80120a2:	4b2e      	ldr	r3, [pc, #184]	; (801215c <xPortStartScheduler+0x12c>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	3b01      	subs	r3, #1
 80120a8:	4a2c      	ldr	r2, [pc, #176]	; (801215c <xPortStartScheduler+0x12c>)
 80120aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80120ac:	78fb      	ldrb	r3, [r7, #3]
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120b6:	78fb      	ldrb	r3, [r7, #3]
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120be:	2b80      	cmp	r3, #128	; 0x80
 80120c0:	d0ef      	beq.n	80120a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80120c2:	4b26      	ldr	r3, [pc, #152]	; (801215c <xPortStartScheduler+0x12c>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f1c3 0307 	rsb	r3, r3, #7
 80120ca:	2b04      	cmp	r3, #4
 80120cc:	d009      	beq.n	80120e2 <xPortStartScheduler+0xb2>
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	60bb      	str	r3, [r7, #8]
 80120e0:	e7fe      	b.n	80120e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120e2:	4b1e      	ldr	r3, [pc, #120]	; (801215c <xPortStartScheduler+0x12c>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	021b      	lsls	r3, r3, #8
 80120e8:	4a1c      	ldr	r2, [pc, #112]	; (801215c <xPortStartScheduler+0x12c>)
 80120ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120ec:	4b1b      	ldr	r3, [pc, #108]	; (801215c <xPortStartScheduler+0x12c>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120f4:	4a19      	ldr	r2, [pc, #100]	; (801215c <xPortStartScheduler+0x12c>)
 80120f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	b2da      	uxtb	r2, r3
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012100:	4b17      	ldr	r3, [pc, #92]	; (8012160 <xPortStartScheduler+0x130>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4a16      	ldr	r2, [pc, #88]	; (8012160 <xPortStartScheduler+0x130>)
 8012106:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801210a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801210c:	4b14      	ldr	r3, [pc, #80]	; (8012160 <xPortStartScheduler+0x130>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a13      	ldr	r2, [pc, #76]	; (8012160 <xPortStartScheduler+0x130>)
 8012112:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012116:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012118:	f000 f8d6 	bl	80122c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801211c:	4b11      	ldr	r3, [pc, #68]	; (8012164 <xPortStartScheduler+0x134>)
 801211e:	2200      	movs	r2, #0
 8012120:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012122:	f000 f8f5 	bl	8012310 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012126:	4b10      	ldr	r3, [pc, #64]	; (8012168 <xPortStartScheduler+0x138>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4a0f      	ldr	r2, [pc, #60]	; (8012168 <xPortStartScheduler+0x138>)
 801212c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012130:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012132:	f7ff ff69 	bl	8012008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012136:	f7fe ff73 	bl	8011020 <vTaskSwitchContext>
	prvTaskExitError();
 801213a:	f7ff ff25 	bl	8011f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	e000ed00 	.word	0xe000ed00
 801214c:	410fc271 	.word	0x410fc271
 8012150:	410fc270 	.word	0x410fc270
 8012154:	e000e400 	.word	0xe000e400
 8012158:	200014a8 	.word	0x200014a8
 801215c:	200014ac 	.word	0x200014ac
 8012160:	e000ed20 	.word	0xe000ed20
 8012164:	20000490 	.word	0x20000490
 8012168:	e000ef34 	.word	0xe000ef34

0801216c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
 8012172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012184:	4b0e      	ldr	r3, [pc, #56]	; (80121c0 <vPortEnterCritical+0x54>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	3301      	adds	r3, #1
 801218a:	4a0d      	ldr	r2, [pc, #52]	; (80121c0 <vPortEnterCritical+0x54>)
 801218c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801218e:	4b0c      	ldr	r3, [pc, #48]	; (80121c0 <vPortEnterCritical+0x54>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b01      	cmp	r3, #1
 8012194:	d10e      	bne.n	80121b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012196:	4b0b      	ldr	r3, [pc, #44]	; (80121c4 <vPortEnterCritical+0x58>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d009      	beq.n	80121b4 <vPortEnterCritical+0x48>
 80121a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a4:	f383 8811 	msr	BASEPRI, r3
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	603b      	str	r3, [r7, #0]
 80121b2:	e7fe      	b.n	80121b2 <vPortEnterCritical+0x46>
	}
}
 80121b4:	bf00      	nop
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr
 80121c0:	20000490 	.word	0x20000490
 80121c4:	e000ed04 	.word	0xe000ed04

080121c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121c8:	b480      	push	{r7}
 80121ca:	b083      	sub	sp, #12
 80121cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121ce:	4b11      	ldr	r3, [pc, #68]	; (8012214 <vPortExitCritical+0x4c>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d109      	bne.n	80121ea <vPortExitCritical+0x22>
 80121d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121da:	f383 8811 	msr	BASEPRI, r3
 80121de:	f3bf 8f6f 	isb	sy
 80121e2:	f3bf 8f4f 	dsb	sy
 80121e6:	607b      	str	r3, [r7, #4]
 80121e8:	e7fe      	b.n	80121e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80121ea:	4b0a      	ldr	r3, [pc, #40]	; (8012214 <vPortExitCritical+0x4c>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	3b01      	subs	r3, #1
 80121f0:	4a08      	ldr	r2, [pc, #32]	; (8012214 <vPortExitCritical+0x4c>)
 80121f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121f4:	4b07      	ldr	r3, [pc, #28]	; (8012214 <vPortExitCritical+0x4c>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d104      	bne.n	8012206 <vPortExitCritical+0x3e>
 80121fc:	2300      	movs	r3, #0
 80121fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012206:	bf00      	nop
 8012208:	370c      	adds	r7, #12
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
 8012214:	20000490 	.word	0x20000490
	...

08012220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012220:	f3ef 8009 	mrs	r0, PSP
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	4b15      	ldr	r3, [pc, #84]	; (8012280 <pxCurrentTCBConst>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	f01e 0f10 	tst.w	lr, #16
 8012230:	bf08      	it	eq
 8012232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223a:	6010      	str	r0, [r2, #0]
 801223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012244:	f380 8811 	msr	BASEPRI, r0
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f7fe fee6 	bl	8011020 <vTaskSwitchContext>
 8012254:	f04f 0000 	mov.w	r0, #0
 8012258:	f380 8811 	msr	BASEPRI, r0
 801225c:	bc09      	pop	{r0, r3}
 801225e:	6819      	ldr	r1, [r3, #0]
 8012260:	6808      	ldr	r0, [r1, #0]
 8012262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012266:	f01e 0f10 	tst.w	lr, #16
 801226a:	bf08      	it	eq
 801226c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012270:	f380 8809 	msr	PSP, r0
 8012274:	f3bf 8f6f 	isb	sy
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	f3af 8000 	nop.w

08012280 <pxCurrentTCBConst>:
 8012280:	20000e7c 	.word	0x20000e7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012284:	bf00      	nop
 8012286:	bf00      	nop

08012288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122a0:	f7fe fe06 	bl	8010eb0 <xTaskIncrementTick>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d003      	beq.n	80122b2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122aa:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <xPortSysTickHandler+0x3c>)
 80122ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b0:	601a      	str	r2, [r3, #0]
 80122b2:	2300      	movs	r3, #0
 80122b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80122bc:	bf00      	nop
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	e000ed04 	.word	0xe000ed04

080122c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122c8:	b480      	push	{r7}
 80122ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122cc:	4b0b      	ldr	r3, [pc, #44]	; (80122fc <vPortSetupTimerInterrupt+0x34>)
 80122ce:	2200      	movs	r2, #0
 80122d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122d2:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <vPortSetupTimerInterrupt+0x38>)
 80122d4:	2200      	movs	r2, #0
 80122d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122d8:	4b0a      	ldr	r3, [pc, #40]	; (8012304 <vPortSetupTimerInterrupt+0x3c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a0a      	ldr	r2, [pc, #40]	; (8012308 <vPortSetupTimerInterrupt+0x40>)
 80122de:	fba2 2303 	umull	r2, r3, r2, r3
 80122e2:	099b      	lsrs	r3, r3, #6
 80122e4:	4a09      	ldr	r2, [pc, #36]	; (801230c <vPortSetupTimerInterrupt+0x44>)
 80122e6:	3b01      	subs	r3, #1
 80122e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122ea:	4b04      	ldr	r3, [pc, #16]	; (80122fc <vPortSetupTimerInterrupt+0x34>)
 80122ec:	2207      	movs	r2, #7
 80122ee:	601a      	str	r2, [r3, #0]
}
 80122f0:	bf00      	nop
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	e000e010 	.word	0xe000e010
 8012300:	e000e018 	.word	0xe000e018
 8012304:	2000018c 	.word	0x2000018c
 8012308:	10624dd3 	.word	0x10624dd3
 801230c:	e000e014 	.word	0xe000e014

08012310 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012310:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012320 <vPortEnableVFP+0x10>
 8012314:	6801      	ldr	r1, [r0, #0]
 8012316:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801231a:	6001      	str	r1, [r0, #0]
 801231c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801231e:	bf00      	nop
 8012320:	e000ed88 	.word	0xe000ed88

08012324 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801232a:	f3ef 8305 	mrs	r3, IPSR
 801232e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b0f      	cmp	r3, #15
 8012334:	d913      	bls.n	801235e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012336:	4a16      	ldr	r2, [pc, #88]	; (8012390 <vPortValidateInterruptPriority+0x6c>)
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	4413      	add	r3, r2
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012340:	4b14      	ldr	r3, [pc, #80]	; (8012394 <vPortValidateInterruptPriority+0x70>)
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	7afa      	ldrb	r2, [r7, #11]
 8012346:	429a      	cmp	r2, r3
 8012348:	d209      	bcs.n	801235e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234e:	f383 8811 	msr	BASEPRI, r3
 8012352:	f3bf 8f6f 	isb	sy
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	607b      	str	r3, [r7, #4]
 801235c:	e7fe      	b.n	801235c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801235e:	4b0e      	ldr	r3, [pc, #56]	; (8012398 <vPortValidateInterruptPriority+0x74>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012366:	4b0d      	ldr	r3, [pc, #52]	; (801239c <vPortValidateInterruptPriority+0x78>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	429a      	cmp	r2, r3
 801236c:	d909      	bls.n	8012382 <vPortValidateInterruptPriority+0x5e>
 801236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	603b      	str	r3, [r7, #0]
 8012380:	e7fe      	b.n	8012380 <vPortValidateInterruptPriority+0x5c>
	}
 8012382:	bf00      	nop
 8012384:	3714      	adds	r7, #20
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop
 8012390:	e000e3f0 	.word	0xe000e3f0
 8012394:	200014a8 	.word	0x200014a8
 8012398:	e000ed0c 	.word	0xe000ed0c
 801239c:	200014ac 	.word	0x200014ac

080123a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b08a      	sub	sp, #40	; 0x28
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80123a8:	2300      	movs	r3, #0
 80123aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123ac:	f7fe fcc6 	bl	8010d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123b0:	4b57      	ldr	r3, [pc, #348]	; (8012510 <pvPortMalloc+0x170>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d101      	bne.n	80123bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123b8:	f000 f90c 	bl	80125d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123bc:	4b55      	ldr	r3, [pc, #340]	; (8012514 <pvPortMalloc+0x174>)
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	4013      	ands	r3, r2
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	f040 808c 	bne.w	80124e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d01c      	beq.n	801240a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80123d0:	2208      	movs	r2, #8
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	4413      	add	r3, r2
 80123d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f003 0307 	and.w	r3, r3, #7
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d013      	beq.n	801240a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f023 0307 	bic.w	r3, r3, #7
 80123e8:	3308      	adds	r3, #8
 80123ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f003 0307 	and.w	r3, r3, #7
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d009      	beq.n	801240a <pvPortMalloc+0x6a>
 80123f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123fa:	f383 8811 	msr	BASEPRI, r3
 80123fe:	f3bf 8f6f 	isb	sy
 8012402:	f3bf 8f4f 	dsb	sy
 8012406:	617b      	str	r3, [r7, #20]
 8012408:	e7fe      	b.n	8012408 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d068      	beq.n	80124e2 <pvPortMalloc+0x142>
 8012410:	4b41      	ldr	r3, [pc, #260]	; (8012518 <pvPortMalloc+0x178>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	429a      	cmp	r2, r3
 8012418:	d863      	bhi.n	80124e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801241a:	4b40      	ldr	r3, [pc, #256]	; (801251c <pvPortMalloc+0x17c>)
 801241c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801241e:	4b3f      	ldr	r3, [pc, #252]	; (801251c <pvPortMalloc+0x17c>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012424:	e004      	b.n	8012430 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8012426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	429a      	cmp	r2, r3
 8012438:	d903      	bls.n	8012442 <pvPortMalloc+0xa2>
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1f1      	bne.n	8012426 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012442:	4b33      	ldr	r3, [pc, #204]	; (8012510 <pvPortMalloc+0x170>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012448:	429a      	cmp	r2, r3
 801244a:	d04a      	beq.n	80124e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801244c:	6a3b      	ldr	r3, [r7, #32]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2208      	movs	r2, #8
 8012452:	4413      	add	r3, r2
 8012454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	6a3b      	ldr	r3, [r7, #32]
 801245c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	685a      	ldr	r2, [r3, #4]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	1ad2      	subs	r2, r2, r3
 8012466:	2308      	movs	r3, #8
 8012468:	005b      	lsls	r3, r3, #1
 801246a:	429a      	cmp	r2, r3
 801246c:	d91e      	bls.n	80124ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	4413      	add	r3, r2
 8012474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	f003 0307 	and.w	r3, r3, #7
 801247c:	2b00      	cmp	r3, #0
 801247e:	d009      	beq.n	8012494 <pvPortMalloc+0xf4>
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	613b      	str	r3, [r7, #16]
 8012492:	e7fe      	b.n	8012492 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	1ad2      	subs	r2, r2, r3
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124a6:	69b8      	ldr	r0, [r7, #24]
 80124a8:	f000 f8f6 	bl	8012698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124ac:	4b1a      	ldr	r3, [pc, #104]	; (8012518 <pvPortMalloc+0x178>)
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	1ad3      	subs	r3, r2, r3
 80124b6:	4a18      	ldr	r2, [pc, #96]	; (8012518 <pvPortMalloc+0x178>)
 80124b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124ba:	4b17      	ldr	r3, [pc, #92]	; (8012518 <pvPortMalloc+0x178>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	4b18      	ldr	r3, [pc, #96]	; (8012520 <pvPortMalloc+0x180>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d203      	bcs.n	80124ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124c6:	4b14      	ldr	r3, [pc, #80]	; (8012518 <pvPortMalloc+0x178>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	4a15      	ldr	r2, [pc, #84]	; (8012520 <pvPortMalloc+0x180>)
 80124cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d0:	685a      	ldr	r2, [r3, #4]
 80124d2:	4b10      	ldr	r3, [pc, #64]	; (8012514 <pvPortMalloc+0x174>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	431a      	orrs	r2, r3
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124de:	2200      	movs	r2, #0
 80124e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124e2:	f7fe fc39 	bl	8010d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	f003 0307 	and.w	r3, r3, #7
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d009      	beq.n	8012504 <pvPortMalloc+0x164>
 80124f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f4:	f383 8811 	msr	BASEPRI, r3
 80124f8:	f3bf 8f6f 	isb	sy
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	60fb      	str	r3, [r7, #12]
 8012502:	e7fe      	b.n	8012502 <pvPortMalloc+0x162>
	return pvReturn;
 8012504:	69fb      	ldr	r3, [r7, #28]
}
 8012506:	4618      	mov	r0, r3
 8012508:	3728      	adds	r7, #40	; 0x28
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	20003010 	.word	0x20003010
 8012514:	2000301c 	.word	0x2000301c
 8012518:	20003014 	.word	0x20003014
 801251c:	20003008 	.word	0x20003008
 8012520:	20003018 	.word	0x20003018

08012524 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b086      	sub	sp, #24
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d046      	beq.n	80125c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012536:	2308      	movs	r3, #8
 8012538:	425b      	negs	r3, r3
 801253a:	697a      	ldr	r2, [r7, #20]
 801253c:	4413      	add	r3, r2
 801253e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	685a      	ldr	r2, [r3, #4]
 8012548:	4b20      	ldr	r3, [pc, #128]	; (80125cc <vPortFree+0xa8>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	4013      	ands	r3, r2
 801254e:	2b00      	cmp	r3, #0
 8012550:	d109      	bne.n	8012566 <vPortFree+0x42>
 8012552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012556:	f383 8811 	msr	BASEPRI, r3
 801255a:	f3bf 8f6f 	isb	sy
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	60fb      	str	r3, [r7, #12]
 8012564:	e7fe      	b.n	8012564 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d009      	beq.n	8012582 <vPortFree+0x5e>
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	60bb      	str	r3, [r7, #8]
 8012580:	e7fe      	b.n	8012580 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	685a      	ldr	r2, [r3, #4]
 8012586:	4b11      	ldr	r3, [pc, #68]	; (80125cc <vPortFree+0xa8>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4013      	ands	r3, r2
 801258c:	2b00      	cmp	r3, #0
 801258e:	d019      	beq.n	80125c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d115      	bne.n	80125c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	685a      	ldr	r2, [r3, #4]
 801259c:	4b0b      	ldr	r3, [pc, #44]	; (80125cc <vPortFree+0xa8>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	43db      	mvns	r3, r3
 80125a2:	401a      	ands	r2, r3
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125a8:	f7fe fbc8 	bl	8010d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	685a      	ldr	r2, [r3, #4]
 80125b0:	4b07      	ldr	r3, [pc, #28]	; (80125d0 <vPortFree+0xac>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4413      	add	r3, r2
 80125b6:	4a06      	ldr	r2, [pc, #24]	; (80125d0 <vPortFree+0xac>)
 80125b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125ba:	6938      	ldr	r0, [r7, #16]
 80125bc:	f000 f86c 	bl	8012698 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80125c0:	f7fe fbca 	bl	8010d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125c4:	bf00      	nop
 80125c6:	3718      	adds	r7, #24
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	2000301c 	.word	0x2000301c
 80125d0:	20003014 	.word	0x20003014

080125d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125d4:	b480      	push	{r7}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125da:	f641 3358 	movw	r3, #7000	; 0x1b58
 80125de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125e0:	4b27      	ldr	r3, [pc, #156]	; (8012680 <prvHeapInit+0xac>)
 80125e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f003 0307 	and.w	r3, r3, #7
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d00c      	beq.n	8012608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	3307      	adds	r3, #7
 80125f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	f023 0307 	bic.w	r3, r3, #7
 80125fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80125fc:	68ba      	ldr	r2, [r7, #8]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	1ad3      	subs	r3, r2, r3
 8012602:	4a1f      	ldr	r2, [pc, #124]	; (8012680 <prvHeapInit+0xac>)
 8012604:	4413      	add	r3, r2
 8012606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801260c:	4a1d      	ldr	r2, [pc, #116]	; (8012684 <prvHeapInit+0xb0>)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012612:	4b1c      	ldr	r3, [pc, #112]	; (8012684 <prvHeapInit+0xb0>)
 8012614:	2200      	movs	r2, #0
 8012616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	68ba      	ldr	r2, [r7, #8]
 801261c:	4413      	add	r3, r2
 801261e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012620:	2208      	movs	r2, #8
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	1a9b      	subs	r3, r3, r2
 8012626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f023 0307 	bic.w	r3, r3, #7
 801262e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	4a15      	ldr	r2, [pc, #84]	; (8012688 <prvHeapInit+0xb4>)
 8012634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012636:	4b14      	ldr	r3, [pc, #80]	; (8012688 <prvHeapInit+0xb4>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2200      	movs	r2, #0
 801263c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801263e:	4b12      	ldr	r3, [pc, #72]	; (8012688 <prvHeapInit+0xb4>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	1ad2      	subs	r2, r2, r3
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012654:	4b0c      	ldr	r3, [pc, #48]	; (8012688 <prvHeapInit+0xb4>)
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	4a0a      	ldr	r2, [pc, #40]	; (801268c <prvHeapInit+0xb8>)
 8012662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4a09      	ldr	r2, [pc, #36]	; (8012690 <prvHeapInit+0xbc>)
 801266a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801266c:	4b09      	ldr	r3, [pc, #36]	; (8012694 <prvHeapInit+0xc0>)
 801266e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012672:	601a      	str	r2, [r3, #0]
}
 8012674:	bf00      	nop
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr
 8012680:	200014b0 	.word	0x200014b0
 8012684:	20003008 	.word	0x20003008
 8012688:	20003010 	.word	0x20003010
 801268c:	20003018 	.word	0x20003018
 8012690:	20003014 	.word	0x20003014
 8012694:	2000301c 	.word	0x2000301c

08012698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126a0:	4b28      	ldr	r3, [pc, #160]	; (8012744 <prvInsertBlockIntoFreeList+0xac>)
 80126a2:	60fb      	str	r3, [r7, #12]
 80126a4:	e002      	b.n	80126ac <prvInsertBlockIntoFreeList+0x14>
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d8f7      	bhi.n	80126a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	4413      	add	r3, r2
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d108      	bne.n	80126da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	685a      	ldr	r2, [r3, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	441a      	add	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	68ba      	ldr	r2, [r7, #8]
 80126e4:	441a      	add	r2, r3
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d118      	bne.n	8012720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	4b15      	ldr	r3, [pc, #84]	; (8012748 <prvInsertBlockIntoFreeList+0xb0>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d00d      	beq.n	8012716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	685a      	ldr	r2, [r3, #4]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	441a      	add	r2, r3
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	681a      	ldr	r2, [r3, #0]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	601a      	str	r2, [r3, #0]
 8012714:	e008      	b.n	8012728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012716:	4b0c      	ldr	r3, [pc, #48]	; (8012748 <prvInsertBlockIntoFreeList+0xb0>)
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	601a      	str	r2, [r3, #0]
 801271e:	e003      	b.n	8012728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012728:	68fa      	ldr	r2, [r7, #12]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	429a      	cmp	r2, r3
 801272e:	d002      	beq.n	8012736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012736:	bf00      	nop
 8012738:	3714      	adds	r7, #20
 801273a:	46bd      	mov	sp, r7
 801273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	20003008 	.word	0x20003008
 8012748:	20003010 	.word	0x20003010

0801274c <atoi>:
 801274c:	220a      	movs	r2, #10
 801274e:	2100      	movs	r1, #0
 8012750:	f000 ba24 	b.w	8012b9c <strtol>

08012754 <__errno>:
 8012754:	4b01      	ldr	r3, [pc, #4]	; (801275c <__errno+0x8>)
 8012756:	6818      	ldr	r0, [r3, #0]
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	20000494 	.word	0x20000494

08012760 <__libc_init_array>:
 8012760:	b570      	push	{r4, r5, r6, lr}
 8012762:	4e0d      	ldr	r6, [pc, #52]	; (8012798 <__libc_init_array+0x38>)
 8012764:	4c0d      	ldr	r4, [pc, #52]	; (801279c <__libc_init_array+0x3c>)
 8012766:	1ba4      	subs	r4, r4, r6
 8012768:	10a4      	asrs	r4, r4, #2
 801276a:	2500      	movs	r5, #0
 801276c:	42a5      	cmp	r5, r4
 801276e:	d109      	bne.n	8012784 <__libc_init_array+0x24>
 8012770:	4e0b      	ldr	r6, [pc, #44]	; (80127a0 <__libc_init_array+0x40>)
 8012772:	4c0c      	ldr	r4, [pc, #48]	; (80127a4 <__libc_init_array+0x44>)
 8012774:	f001 faf2 	bl	8013d5c <_init>
 8012778:	1ba4      	subs	r4, r4, r6
 801277a:	10a4      	asrs	r4, r4, #2
 801277c:	2500      	movs	r5, #0
 801277e:	42a5      	cmp	r5, r4
 8012780:	d105      	bne.n	801278e <__libc_init_array+0x2e>
 8012782:	bd70      	pop	{r4, r5, r6, pc}
 8012784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012788:	4798      	blx	r3
 801278a:	3501      	adds	r5, #1
 801278c:	e7ee      	b.n	801276c <__libc_init_array+0xc>
 801278e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012792:	4798      	blx	r3
 8012794:	3501      	adds	r5, #1
 8012796:	e7f2      	b.n	801277e <__libc_init_array+0x1e>
 8012798:	080150ac 	.word	0x080150ac
 801279c:	080150ac 	.word	0x080150ac
 80127a0:	080150ac 	.word	0x080150ac
 80127a4:	080150b0 	.word	0x080150b0

080127a8 <memcmp>:
 80127a8:	b530      	push	{r4, r5, lr}
 80127aa:	2400      	movs	r4, #0
 80127ac:	42a2      	cmp	r2, r4
 80127ae:	d101      	bne.n	80127b4 <memcmp+0xc>
 80127b0:	2000      	movs	r0, #0
 80127b2:	e007      	b.n	80127c4 <memcmp+0x1c>
 80127b4:	5d03      	ldrb	r3, [r0, r4]
 80127b6:	3401      	adds	r4, #1
 80127b8:	190d      	adds	r5, r1, r4
 80127ba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80127be:	42ab      	cmp	r3, r5
 80127c0:	d0f4      	beq.n	80127ac <memcmp+0x4>
 80127c2:	1b58      	subs	r0, r3, r5
 80127c4:	bd30      	pop	{r4, r5, pc}

080127c6 <memcpy>:
 80127c6:	b510      	push	{r4, lr}
 80127c8:	1e43      	subs	r3, r0, #1
 80127ca:	440a      	add	r2, r1
 80127cc:	4291      	cmp	r1, r2
 80127ce:	d100      	bne.n	80127d2 <memcpy+0xc>
 80127d0:	bd10      	pop	{r4, pc}
 80127d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127da:	e7f7      	b.n	80127cc <memcpy+0x6>

080127dc <memset>:
 80127dc:	4402      	add	r2, r0
 80127de:	4603      	mov	r3, r0
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d100      	bne.n	80127e6 <memset+0xa>
 80127e4:	4770      	bx	lr
 80127e6:	f803 1b01 	strb.w	r1, [r3], #1
 80127ea:	e7f9      	b.n	80127e0 <memset+0x4>

080127ec <iprintf>:
 80127ec:	b40f      	push	{r0, r1, r2, r3}
 80127ee:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <iprintf+0x2c>)
 80127f0:	b513      	push	{r0, r1, r4, lr}
 80127f2:	681c      	ldr	r4, [r3, #0]
 80127f4:	b124      	cbz	r4, 8012800 <iprintf+0x14>
 80127f6:	69a3      	ldr	r3, [r4, #24]
 80127f8:	b913      	cbnz	r3, 8012800 <iprintf+0x14>
 80127fa:	4620      	mov	r0, r4
 80127fc:	f000 fb94 	bl	8012f28 <__sinit>
 8012800:	ab05      	add	r3, sp, #20
 8012802:	9a04      	ldr	r2, [sp, #16]
 8012804:	68a1      	ldr	r1, [r4, #8]
 8012806:	9301      	str	r3, [sp, #4]
 8012808:	4620      	mov	r0, r4
 801280a:	f000 febd 	bl	8013588 <_vfiprintf_r>
 801280e:	b002      	add	sp, #8
 8012810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012814:	b004      	add	sp, #16
 8012816:	4770      	bx	lr
 8012818:	20000494 	.word	0x20000494

0801281c <_puts_r>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	460e      	mov	r6, r1
 8012820:	4605      	mov	r5, r0
 8012822:	b118      	cbz	r0, 801282c <_puts_r+0x10>
 8012824:	6983      	ldr	r3, [r0, #24]
 8012826:	b90b      	cbnz	r3, 801282c <_puts_r+0x10>
 8012828:	f000 fb7e 	bl	8012f28 <__sinit>
 801282c:	69ab      	ldr	r3, [r5, #24]
 801282e:	68ac      	ldr	r4, [r5, #8]
 8012830:	b913      	cbnz	r3, 8012838 <_puts_r+0x1c>
 8012832:	4628      	mov	r0, r5
 8012834:	f000 fb78 	bl	8012f28 <__sinit>
 8012838:	4b23      	ldr	r3, [pc, #140]	; (80128c8 <_puts_r+0xac>)
 801283a:	429c      	cmp	r4, r3
 801283c:	d117      	bne.n	801286e <_puts_r+0x52>
 801283e:	686c      	ldr	r4, [r5, #4]
 8012840:	89a3      	ldrh	r3, [r4, #12]
 8012842:	071b      	lsls	r3, r3, #28
 8012844:	d51d      	bpl.n	8012882 <_puts_r+0x66>
 8012846:	6923      	ldr	r3, [r4, #16]
 8012848:	b1db      	cbz	r3, 8012882 <_puts_r+0x66>
 801284a:	3e01      	subs	r6, #1
 801284c:	68a3      	ldr	r3, [r4, #8]
 801284e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012852:	3b01      	subs	r3, #1
 8012854:	60a3      	str	r3, [r4, #8]
 8012856:	b9e9      	cbnz	r1, 8012894 <_puts_r+0x78>
 8012858:	2b00      	cmp	r3, #0
 801285a:	da2e      	bge.n	80128ba <_puts_r+0x9e>
 801285c:	4622      	mov	r2, r4
 801285e:	210a      	movs	r1, #10
 8012860:	4628      	mov	r0, r5
 8012862:	f000 f9b1 	bl	8012bc8 <__swbuf_r>
 8012866:	3001      	adds	r0, #1
 8012868:	d011      	beq.n	801288e <_puts_r+0x72>
 801286a:	200a      	movs	r0, #10
 801286c:	e011      	b.n	8012892 <_puts_r+0x76>
 801286e:	4b17      	ldr	r3, [pc, #92]	; (80128cc <_puts_r+0xb0>)
 8012870:	429c      	cmp	r4, r3
 8012872:	d101      	bne.n	8012878 <_puts_r+0x5c>
 8012874:	68ac      	ldr	r4, [r5, #8]
 8012876:	e7e3      	b.n	8012840 <_puts_r+0x24>
 8012878:	4b15      	ldr	r3, [pc, #84]	; (80128d0 <_puts_r+0xb4>)
 801287a:	429c      	cmp	r4, r3
 801287c:	bf08      	it	eq
 801287e:	68ec      	ldreq	r4, [r5, #12]
 8012880:	e7de      	b.n	8012840 <_puts_r+0x24>
 8012882:	4621      	mov	r1, r4
 8012884:	4628      	mov	r0, r5
 8012886:	f000 f9f1 	bl	8012c6c <__swsetup_r>
 801288a:	2800      	cmp	r0, #0
 801288c:	d0dd      	beq.n	801284a <_puts_r+0x2e>
 801288e:	f04f 30ff 	mov.w	r0, #4294967295
 8012892:	bd70      	pop	{r4, r5, r6, pc}
 8012894:	2b00      	cmp	r3, #0
 8012896:	da04      	bge.n	80128a2 <_puts_r+0x86>
 8012898:	69a2      	ldr	r2, [r4, #24]
 801289a:	429a      	cmp	r2, r3
 801289c:	dc06      	bgt.n	80128ac <_puts_r+0x90>
 801289e:	290a      	cmp	r1, #10
 80128a0:	d004      	beq.n	80128ac <_puts_r+0x90>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	6022      	str	r2, [r4, #0]
 80128a8:	7019      	strb	r1, [r3, #0]
 80128aa:	e7cf      	b.n	801284c <_puts_r+0x30>
 80128ac:	4622      	mov	r2, r4
 80128ae:	4628      	mov	r0, r5
 80128b0:	f000 f98a 	bl	8012bc8 <__swbuf_r>
 80128b4:	3001      	adds	r0, #1
 80128b6:	d1c9      	bne.n	801284c <_puts_r+0x30>
 80128b8:	e7e9      	b.n	801288e <_puts_r+0x72>
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	200a      	movs	r0, #10
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	6022      	str	r2, [r4, #0]
 80128c2:	7018      	strb	r0, [r3, #0]
 80128c4:	e7e5      	b.n	8012892 <_puts_r+0x76>
 80128c6:	bf00      	nop
 80128c8:	08014f24 	.word	0x08014f24
 80128cc:	08014f44 	.word	0x08014f44
 80128d0:	08014f04 	.word	0x08014f04

080128d4 <puts>:
 80128d4:	4b02      	ldr	r3, [pc, #8]	; (80128e0 <puts+0xc>)
 80128d6:	4601      	mov	r1, r0
 80128d8:	6818      	ldr	r0, [r3, #0]
 80128da:	f7ff bf9f 	b.w	801281c <_puts_r>
 80128de:	bf00      	nop
 80128e0:	20000494 	.word	0x20000494

080128e4 <sniprintf>:
 80128e4:	b40c      	push	{r2, r3}
 80128e6:	b530      	push	{r4, r5, lr}
 80128e8:	4b17      	ldr	r3, [pc, #92]	; (8012948 <sniprintf+0x64>)
 80128ea:	1e0c      	subs	r4, r1, #0
 80128ec:	b09d      	sub	sp, #116	; 0x74
 80128ee:	681d      	ldr	r5, [r3, #0]
 80128f0:	da08      	bge.n	8012904 <sniprintf+0x20>
 80128f2:	238b      	movs	r3, #139	; 0x8b
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	f04f 30ff 	mov.w	r0, #4294967295
 80128fa:	b01d      	add	sp, #116	; 0x74
 80128fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012900:	b002      	add	sp, #8
 8012902:	4770      	bx	lr
 8012904:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012908:	f8ad 3014 	strh.w	r3, [sp, #20]
 801290c:	bf14      	ite	ne
 801290e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012912:	4623      	moveq	r3, r4
 8012914:	9304      	str	r3, [sp, #16]
 8012916:	9307      	str	r3, [sp, #28]
 8012918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801291c:	9002      	str	r0, [sp, #8]
 801291e:	9006      	str	r0, [sp, #24]
 8012920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012926:	ab21      	add	r3, sp, #132	; 0x84
 8012928:	a902      	add	r1, sp, #8
 801292a:	4628      	mov	r0, r5
 801292c:	9301      	str	r3, [sp, #4]
 801292e:	f000 fd09 	bl	8013344 <_svfiprintf_r>
 8012932:	1c43      	adds	r3, r0, #1
 8012934:	bfbc      	itt	lt
 8012936:	238b      	movlt	r3, #139	; 0x8b
 8012938:	602b      	strlt	r3, [r5, #0]
 801293a:	2c00      	cmp	r4, #0
 801293c:	d0dd      	beq.n	80128fa <sniprintf+0x16>
 801293e:	9b02      	ldr	r3, [sp, #8]
 8012940:	2200      	movs	r2, #0
 8012942:	701a      	strb	r2, [r3, #0]
 8012944:	e7d9      	b.n	80128fa <sniprintf+0x16>
 8012946:	bf00      	nop
 8012948:	20000494 	.word	0x20000494

0801294c <siprintf>:
 801294c:	b40e      	push	{r1, r2, r3}
 801294e:	b500      	push	{lr}
 8012950:	b09c      	sub	sp, #112	; 0x70
 8012952:	ab1d      	add	r3, sp, #116	; 0x74
 8012954:	9002      	str	r0, [sp, #8]
 8012956:	9006      	str	r0, [sp, #24]
 8012958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801295c:	4809      	ldr	r0, [pc, #36]	; (8012984 <siprintf+0x38>)
 801295e:	9107      	str	r1, [sp, #28]
 8012960:	9104      	str	r1, [sp, #16]
 8012962:	4909      	ldr	r1, [pc, #36]	; (8012988 <siprintf+0x3c>)
 8012964:	f853 2b04 	ldr.w	r2, [r3], #4
 8012968:	9105      	str	r1, [sp, #20]
 801296a:	6800      	ldr	r0, [r0, #0]
 801296c:	9301      	str	r3, [sp, #4]
 801296e:	a902      	add	r1, sp, #8
 8012970:	f000 fce8 	bl	8013344 <_svfiprintf_r>
 8012974:	9b02      	ldr	r3, [sp, #8]
 8012976:	2200      	movs	r2, #0
 8012978:	701a      	strb	r2, [r3, #0]
 801297a:	b01c      	add	sp, #112	; 0x70
 801297c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012980:	b003      	add	sp, #12
 8012982:	4770      	bx	lr
 8012984:	20000494 	.word	0x20000494
 8012988:	ffff0208 	.word	0xffff0208

0801298c <strcpy>:
 801298c:	4603      	mov	r3, r0
 801298e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012992:	f803 2b01 	strb.w	r2, [r3], #1
 8012996:	2a00      	cmp	r2, #0
 8012998:	d1f9      	bne.n	801298e <strcpy+0x2>
 801299a:	4770      	bx	lr

0801299c <strncpy>:
 801299c:	b570      	push	{r4, r5, r6, lr}
 801299e:	3901      	subs	r1, #1
 80129a0:	4604      	mov	r4, r0
 80129a2:	b902      	cbnz	r2, 80129a6 <strncpy+0xa>
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	4623      	mov	r3, r4
 80129a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80129ac:	f803 5b01 	strb.w	r5, [r3], #1
 80129b0:	1e56      	subs	r6, r2, #1
 80129b2:	b92d      	cbnz	r5, 80129c0 <strncpy+0x24>
 80129b4:	4414      	add	r4, r2
 80129b6:	42a3      	cmp	r3, r4
 80129b8:	d0f4      	beq.n	80129a4 <strncpy+0x8>
 80129ba:	f803 5b01 	strb.w	r5, [r3], #1
 80129be:	e7fa      	b.n	80129b6 <strncpy+0x1a>
 80129c0:	461c      	mov	r4, r3
 80129c2:	4632      	mov	r2, r6
 80129c4:	e7ed      	b.n	80129a2 <strncpy+0x6>

080129c6 <strstr>:
 80129c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129c8:	7803      	ldrb	r3, [r0, #0]
 80129ca:	b17b      	cbz	r3, 80129ec <strstr+0x26>
 80129cc:	4604      	mov	r4, r0
 80129ce:	7823      	ldrb	r3, [r4, #0]
 80129d0:	4620      	mov	r0, r4
 80129d2:	1c66      	adds	r6, r4, #1
 80129d4:	b17b      	cbz	r3, 80129f6 <strstr+0x30>
 80129d6:	1e4a      	subs	r2, r1, #1
 80129d8:	1e63      	subs	r3, r4, #1
 80129da:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80129de:	b14d      	cbz	r5, 80129f4 <strstr+0x2e>
 80129e0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80129e4:	42af      	cmp	r7, r5
 80129e6:	4634      	mov	r4, r6
 80129e8:	d0f7      	beq.n	80129da <strstr+0x14>
 80129ea:	e7f0      	b.n	80129ce <strstr+0x8>
 80129ec:	780b      	ldrb	r3, [r1, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	bf18      	it	ne
 80129f2:	2000      	movne	r0, #0
 80129f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129f6:	4618      	mov	r0, r3
 80129f8:	e7fc      	b.n	80129f4 <strstr+0x2e>
	...

080129fc <strtok>:
 80129fc:	4b13      	ldr	r3, [pc, #76]	; (8012a4c <strtok+0x50>)
 80129fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a02:	681d      	ldr	r5, [r3, #0]
 8012a04:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8012a06:	4606      	mov	r6, r0
 8012a08:	460f      	mov	r7, r1
 8012a0a:	b9b4      	cbnz	r4, 8012a3a <strtok+0x3e>
 8012a0c:	2050      	movs	r0, #80	; 0x50
 8012a0e:	f000 fb7d 	bl	801310c <malloc>
 8012a12:	65a8      	str	r0, [r5, #88]	; 0x58
 8012a14:	e9c0 4400 	strd	r4, r4, [r0]
 8012a18:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012a1c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012a20:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012a24:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012a28:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012a2c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012a30:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012a34:	6184      	str	r4, [r0, #24]
 8012a36:	7704      	strb	r4, [r0, #28]
 8012a38:	6244      	str	r4, [r0, #36]	; 0x24
 8012a3a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8012a3c:	4639      	mov	r1, r7
 8012a3e:	4630      	mov	r0, r6
 8012a40:	2301      	movs	r3, #1
 8012a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a46:	f000 b803 	b.w	8012a50 <__strtok_r>
 8012a4a:	bf00      	nop
 8012a4c:	20000494 	.word	0x20000494

08012a50 <__strtok_r>:
 8012a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a52:	b918      	cbnz	r0, 8012a5c <__strtok_r+0xc>
 8012a54:	6810      	ldr	r0, [r2, #0]
 8012a56:	b908      	cbnz	r0, 8012a5c <__strtok_r+0xc>
 8012a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	460f      	mov	r7, r1
 8012a60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012a64:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012a68:	b91e      	cbnz	r6, 8012a72 <__strtok_r+0x22>
 8012a6a:	b96d      	cbnz	r5, 8012a88 <__strtok_r+0x38>
 8012a6c:	6015      	str	r5, [r2, #0]
 8012a6e:	4628      	mov	r0, r5
 8012a70:	e7f2      	b.n	8012a58 <__strtok_r+0x8>
 8012a72:	42b5      	cmp	r5, r6
 8012a74:	d1f6      	bne.n	8012a64 <__strtok_r+0x14>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d1ef      	bne.n	8012a5a <__strtok_r+0xa>
 8012a7a:	6014      	str	r4, [r2, #0]
 8012a7c:	7003      	strb	r3, [r0, #0]
 8012a7e:	e7eb      	b.n	8012a58 <__strtok_r+0x8>
 8012a80:	462b      	mov	r3, r5
 8012a82:	e00d      	b.n	8012aa0 <__strtok_r+0x50>
 8012a84:	b926      	cbnz	r6, 8012a90 <__strtok_r+0x40>
 8012a86:	461c      	mov	r4, r3
 8012a88:	4623      	mov	r3, r4
 8012a8a:	460f      	mov	r7, r1
 8012a8c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8012a90:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012a94:	42b5      	cmp	r5, r6
 8012a96:	d1f5      	bne.n	8012a84 <__strtok_r+0x34>
 8012a98:	2d00      	cmp	r5, #0
 8012a9a:	d0f1      	beq.n	8012a80 <__strtok_r+0x30>
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	7021      	strb	r1, [r4, #0]
 8012aa0:	6013      	str	r3, [r2, #0]
 8012aa2:	e7d9      	b.n	8012a58 <__strtok_r+0x8>

08012aa4 <_strtol_l.isra.0>:
 8012aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012aa8:	4680      	mov	r8, r0
 8012aaa:	4689      	mov	r9, r1
 8012aac:	4692      	mov	sl, r2
 8012aae:	461e      	mov	r6, r3
 8012ab0:	460f      	mov	r7, r1
 8012ab2:	463d      	mov	r5, r7
 8012ab4:	9808      	ldr	r0, [sp, #32]
 8012ab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012aba:	f000 fabf 	bl	801303c <__locale_ctype_ptr_l>
 8012abe:	4420      	add	r0, r4
 8012ac0:	7843      	ldrb	r3, [r0, #1]
 8012ac2:	f013 0308 	ands.w	r3, r3, #8
 8012ac6:	d132      	bne.n	8012b2e <_strtol_l.isra.0+0x8a>
 8012ac8:	2c2d      	cmp	r4, #45	; 0x2d
 8012aca:	d132      	bne.n	8012b32 <_strtol_l.isra.0+0x8e>
 8012acc:	787c      	ldrb	r4, [r7, #1]
 8012ace:	1cbd      	adds	r5, r7, #2
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	d05d      	beq.n	8012b92 <_strtol_l.isra.0+0xee>
 8012ad6:	2e10      	cmp	r6, #16
 8012ad8:	d109      	bne.n	8012aee <_strtol_l.isra.0+0x4a>
 8012ada:	2c30      	cmp	r4, #48	; 0x30
 8012adc:	d107      	bne.n	8012aee <_strtol_l.isra.0+0x4a>
 8012ade:	782b      	ldrb	r3, [r5, #0]
 8012ae0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ae4:	2b58      	cmp	r3, #88	; 0x58
 8012ae6:	d14f      	bne.n	8012b88 <_strtol_l.isra.0+0xe4>
 8012ae8:	786c      	ldrb	r4, [r5, #1]
 8012aea:	2610      	movs	r6, #16
 8012aec:	3502      	adds	r5, #2
 8012aee:	2a00      	cmp	r2, #0
 8012af0:	bf14      	ite	ne
 8012af2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012af6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012afa:	2700      	movs	r7, #0
 8012afc:	fbb1 fcf6 	udiv	ip, r1, r6
 8012b00:	4638      	mov	r0, r7
 8012b02:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012b06:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012b0a:	2b09      	cmp	r3, #9
 8012b0c:	d817      	bhi.n	8012b3e <_strtol_l.isra.0+0x9a>
 8012b0e:	461c      	mov	r4, r3
 8012b10:	42a6      	cmp	r6, r4
 8012b12:	dd23      	ble.n	8012b5c <_strtol_l.isra.0+0xb8>
 8012b14:	1c7b      	adds	r3, r7, #1
 8012b16:	d007      	beq.n	8012b28 <_strtol_l.isra.0+0x84>
 8012b18:	4584      	cmp	ip, r0
 8012b1a:	d31c      	bcc.n	8012b56 <_strtol_l.isra.0+0xb2>
 8012b1c:	d101      	bne.n	8012b22 <_strtol_l.isra.0+0x7e>
 8012b1e:	45a6      	cmp	lr, r4
 8012b20:	db19      	blt.n	8012b56 <_strtol_l.isra.0+0xb2>
 8012b22:	fb00 4006 	mla	r0, r0, r6, r4
 8012b26:	2701      	movs	r7, #1
 8012b28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b2c:	e7eb      	b.n	8012b06 <_strtol_l.isra.0+0x62>
 8012b2e:	462f      	mov	r7, r5
 8012b30:	e7bf      	b.n	8012ab2 <_strtol_l.isra.0+0xe>
 8012b32:	2c2b      	cmp	r4, #43	; 0x2b
 8012b34:	bf04      	itt	eq
 8012b36:	1cbd      	addeq	r5, r7, #2
 8012b38:	787c      	ldrbeq	r4, [r7, #1]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	e7c9      	b.n	8012ad2 <_strtol_l.isra.0+0x2e>
 8012b3e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012b42:	2b19      	cmp	r3, #25
 8012b44:	d801      	bhi.n	8012b4a <_strtol_l.isra.0+0xa6>
 8012b46:	3c37      	subs	r4, #55	; 0x37
 8012b48:	e7e2      	b.n	8012b10 <_strtol_l.isra.0+0x6c>
 8012b4a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012b4e:	2b19      	cmp	r3, #25
 8012b50:	d804      	bhi.n	8012b5c <_strtol_l.isra.0+0xb8>
 8012b52:	3c57      	subs	r4, #87	; 0x57
 8012b54:	e7dc      	b.n	8012b10 <_strtol_l.isra.0+0x6c>
 8012b56:	f04f 37ff 	mov.w	r7, #4294967295
 8012b5a:	e7e5      	b.n	8012b28 <_strtol_l.isra.0+0x84>
 8012b5c:	1c7b      	adds	r3, r7, #1
 8012b5e:	d108      	bne.n	8012b72 <_strtol_l.isra.0+0xce>
 8012b60:	2322      	movs	r3, #34	; 0x22
 8012b62:	f8c8 3000 	str.w	r3, [r8]
 8012b66:	4608      	mov	r0, r1
 8012b68:	f1ba 0f00 	cmp.w	sl, #0
 8012b6c:	d107      	bne.n	8012b7e <_strtol_l.isra.0+0xda>
 8012b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b72:	b102      	cbz	r2, 8012b76 <_strtol_l.isra.0+0xd2>
 8012b74:	4240      	negs	r0, r0
 8012b76:	f1ba 0f00 	cmp.w	sl, #0
 8012b7a:	d0f8      	beq.n	8012b6e <_strtol_l.isra.0+0xca>
 8012b7c:	b10f      	cbz	r7, 8012b82 <_strtol_l.isra.0+0xde>
 8012b7e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012b82:	f8ca 9000 	str.w	r9, [sl]
 8012b86:	e7f2      	b.n	8012b6e <_strtol_l.isra.0+0xca>
 8012b88:	2430      	movs	r4, #48	; 0x30
 8012b8a:	2e00      	cmp	r6, #0
 8012b8c:	d1af      	bne.n	8012aee <_strtol_l.isra.0+0x4a>
 8012b8e:	2608      	movs	r6, #8
 8012b90:	e7ad      	b.n	8012aee <_strtol_l.isra.0+0x4a>
 8012b92:	2c30      	cmp	r4, #48	; 0x30
 8012b94:	d0a3      	beq.n	8012ade <_strtol_l.isra.0+0x3a>
 8012b96:	260a      	movs	r6, #10
 8012b98:	e7a9      	b.n	8012aee <_strtol_l.isra.0+0x4a>
	...

08012b9c <strtol>:
 8012b9c:	4b08      	ldr	r3, [pc, #32]	; (8012bc0 <strtol+0x24>)
 8012b9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ba0:	681c      	ldr	r4, [r3, #0]
 8012ba2:	4d08      	ldr	r5, [pc, #32]	; (8012bc4 <strtol+0x28>)
 8012ba4:	6a23      	ldr	r3, [r4, #32]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	bf08      	it	eq
 8012baa:	462b      	moveq	r3, r5
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	460a      	mov	r2, r1
 8012bb2:	4601      	mov	r1, r0
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f7ff ff75 	bl	8012aa4 <_strtol_l.isra.0>
 8012bba:	b003      	add	sp, #12
 8012bbc:	bd30      	pop	{r4, r5, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20000494 	.word	0x20000494
 8012bc4:	200004f8 	.word	0x200004f8

08012bc8 <__swbuf_r>:
 8012bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bca:	460e      	mov	r6, r1
 8012bcc:	4614      	mov	r4, r2
 8012bce:	4605      	mov	r5, r0
 8012bd0:	b118      	cbz	r0, 8012bda <__swbuf_r+0x12>
 8012bd2:	6983      	ldr	r3, [r0, #24]
 8012bd4:	b90b      	cbnz	r3, 8012bda <__swbuf_r+0x12>
 8012bd6:	f000 f9a7 	bl	8012f28 <__sinit>
 8012bda:	4b21      	ldr	r3, [pc, #132]	; (8012c60 <__swbuf_r+0x98>)
 8012bdc:	429c      	cmp	r4, r3
 8012bde:	d12a      	bne.n	8012c36 <__swbuf_r+0x6e>
 8012be0:	686c      	ldr	r4, [r5, #4]
 8012be2:	69a3      	ldr	r3, [r4, #24]
 8012be4:	60a3      	str	r3, [r4, #8]
 8012be6:	89a3      	ldrh	r3, [r4, #12]
 8012be8:	071a      	lsls	r2, r3, #28
 8012bea:	d52e      	bpl.n	8012c4a <__swbuf_r+0x82>
 8012bec:	6923      	ldr	r3, [r4, #16]
 8012bee:	b363      	cbz	r3, 8012c4a <__swbuf_r+0x82>
 8012bf0:	6923      	ldr	r3, [r4, #16]
 8012bf2:	6820      	ldr	r0, [r4, #0]
 8012bf4:	1ac0      	subs	r0, r0, r3
 8012bf6:	6963      	ldr	r3, [r4, #20]
 8012bf8:	b2f6      	uxtb	r6, r6
 8012bfa:	4283      	cmp	r3, r0
 8012bfc:	4637      	mov	r7, r6
 8012bfe:	dc04      	bgt.n	8012c0a <__swbuf_r+0x42>
 8012c00:	4621      	mov	r1, r4
 8012c02:	4628      	mov	r0, r5
 8012c04:	f000 f926 	bl	8012e54 <_fflush_r>
 8012c08:	bb28      	cbnz	r0, 8012c56 <__swbuf_r+0x8e>
 8012c0a:	68a3      	ldr	r3, [r4, #8]
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	60a3      	str	r3, [r4, #8]
 8012c10:	6823      	ldr	r3, [r4, #0]
 8012c12:	1c5a      	adds	r2, r3, #1
 8012c14:	6022      	str	r2, [r4, #0]
 8012c16:	701e      	strb	r6, [r3, #0]
 8012c18:	6963      	ldr	r3, [r4, #20]
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	4283      	cmp	r3, r0
 8012c1e:	d004      	beq.n	8012c2a <__swbuf_r+0x62>
 8012c20:	89a3      	ldrh	r3, [r4, #12]
 8012c22:	07db      	lsls	r3, r3, #31
 8012c24:	d519      	bpl.n	8012c5a <__swbuf_r+0x92>
 8012c26:	2e0a      	cmp	r6, #10
 8012c28:	d117      	bne.n	8012c5a <__swbuf_r+0x92>
 8012c2a:	4621      	mov	r1, r4
 8012c2c:	4628      	mov	r0, r5
 8012c2e:	f000 f911 	bl	8012e54 <_fflush_r>
 8012c32:	b190      	cbz	r0, 8012c5a <__swbuf_r+0x92>
 8012c34:	e00f      	b.n	8012c56 <__swbuf_r+0x8e>
 8012c36:	4b0b      	ldr	r3, [pc, #44]	; (8012c64 <__swbuf_r+0x9c>)
 8012c38:	429c      	cmp	r4, r3
 8012c3a:	d101      	bne.n	8012c40 <__swbuf_r+0x78>
 8012c3c:	68ac      	ldr	r4, [r5, #8]
 8012c3e:	e7d0      	b.n	8012be2 <__swbuf_r+0x1a>
 8012c40:	4b09      	ldr	r3, [pc, #36]	; (8012c68 <__swbuf_r+0xa0>)
 8012c42:	429c      	cmp	r4, r3
 8012c44:	bf08      	it	eq
 8012c46:	68ec      	ldreq	r4, [r5, #12]
 8012c48:	e7cb      	b.n	8012be2 <__swbuf_r+0x1a>
 8012c4a:	4621      	mov	r1, r4
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f000 f80d 	bl	8012c6c <__swsetup_r>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d0cc      	beq.n	8012bf0 <__swbuf_r+0x28>
 8012c56:	f04f 37ff 	mov.w	r7, #4294967295
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	08014f24 	.word	0x08014f24
 8012c64:	08014f44 	.word	0x08014f44
 8012c68:	08014f04 	.word	0x08014f04

08012c6c <__swsetup_r>:
 8012c6c:	4b32      	ldr	r3, [pc, #200]	; (8012d38 <__swsetup_r+0xcc>)
 8012c6e:	b570      	push	{r4, r5, r6, lr}
 8012c70:	681d      	ldr	r5, [r3, #0]
 8012c72:	4606      	mov	r6, r0
 8012c74:	460c      	mov	r4, r1
 8012c76:	b125      	cbz	r5, 8012c82 <__swsetup_r+0x16>
 8012c78:	69ab      	ldr	r3, [r5, #24]
 8012c7a:	b913      	cbnz	r3, 8012c82 <__swsetup_r+0x16>
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f000 f953 	bl	8012f28 <__sinit>
 8012c82:	4b2e      	ldr	r3, [pc, #184]	; (8012d3c <__swsetup_r+0xd0>)
 8012c84:	429c      	cmp	r4, r3
 8012c86:	d10f      	bne.n	8012ca8 <__swsetup_r+0x3c>
 8012c88:	686c      	ldr	r4, [r5, #4]
 8012c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c8e:	b29a      	uxth	r2, r3
 8012c90:	0715      	lsls	r5, r2, #28
 8012c92:	d42c      	bmi.n	8012cee <__swsetup_r+0x82>
 8012c94:	06d0      	lsls	r0, r2, #27
 8012c96:	d411      	bmi.n	8012cbc <__swsetup_r+0x50>
 8012c98:	2209      	movs	r2, #9
 8012c9a:	6032      	str	r2, [r6, #0]
 8012c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ca0:	81a3      	strh	r3, [r4, #12]
 8012ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca6:	e03e      	b.n	8012d26 <__swsetup_r+0xba>
 8012ca8:	4b25      	ldr	r3, [pc, #148]	; (8012d40 <__swsetup_r+0xd4>)
 8012caa:	429c      	cmp	r4, r3
 8012cac:	d101      	bne.n	8012cb2 <__swsetup_r+0x46>
 8012cae:	68ac      	ldr	r4, [r5, #8]
 8012cb0:	e7eb      	b.n	8012c8a <__swsetup_r+0x1e>
 8012cb2:	4b24      	ldr	r3, [pc, #144]	; (8012d44 <__swsetup_r+0xd8>)
 8012cb4:	429c      	cmp	r4, r3
 8012cb6:	bf08      	it	eq
 8012cb8:	68ec      	ldreq	r4, [r5, #12]
 8012cba:	e7e6      	b.n	8012c8a <__swsetup_r+0x1e>
 8012cbc:	0751      	lsls	r1, r2, #29
 8012cbe:	d512      	bpl.n	8012ce6 <__swsetup_r+0x7a>
 8012cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cc2:	b141      	cbz	r1, 8012cd6 <__swsetup_r+0x6a>
 8012cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cc8:	4299      	cmp	r1, r3
 8012cca:	d002      	beq.n	8012cd2 <__swsetup_r+0x66>
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f000 fa37 	bl	8013140 <_free_r>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8012cd6:	89a3      	ldrh	r3, [r4, #12]
 8012cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012cdc:	81a3      	strh	r3, [r4, #12]
 8012cde:	2300      	movs	r3, #0
 8012ce0:	6063      	str	r3, [r4, #4]
 8012ce2:	6923      	ldr	r3, [r4, #16]
 8012ce4:	6023      	str	r3, [r4, #0]
 8012ce6:	89a3      	ldrh	r3, [r4, #12]
 8012ce8:	f043 0308 	orr.w	r3, r3, #8
 8012cec:	81a3      	strh	r3, [r4, #12]
 8012cee:	6923      	ldr	r3, [r4, #16]
 8012cf0:	b94b      	cbnz	r3, 8012d06 <__swsetup_r+0x9a>
 8012cf2:	89a3      	ldrh	r3, [r4, #12]
 8012cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cfc:	d003      	beq.n	8012d06 <__swsetup_r+0x9a>
 8012cfe:	4621      	mov	r1, r4
 8012d00:	4630      	mov	r0, r6
 8012d02:	f000 f9c3 	bl	801308c <__smakebuf_r>
 8012d06:	89a2      	ldrh	r2, [r4, #12]
 8012d08:	f012 0301 	ands.w	r3, r2, #1
 8012d0c:	d00c      	beq.n	8012d28 <__swsetup_r+0xbc>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	60a3      	str	r3, [r4, #8]
 8012d12:	6963      	ldr	r3, [r4, #20]
 8012d14:	425b      	negs	r3, r3
 8012d16:	61a3      	str	r3, [r4, #24]
 8012d18:	6923      	ldr	r3, [r4, #16]
 8012d1a:	b953      	cbnz	r3, 8012d32 <__swsetup_r+0xc6>
 8012d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012d24:	d1ba      	bne.n	8012c9c <__swsetup_r+0x30>
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
 8012d28:	0792      	lsls	r2, r2, #30
 8012d2a:	bf58      	it	pl
 8012d2c:	6963      	ldrpl	r3, [r4, #20]
 8012d2e:	60a3      	str	r3, [r4, #8]
 8012d30:	e7f2      	b.n	8012d18 <__swsetup_r+0xac>
 8012d32:	2000      	movs	r0, #0
 8012d34:	e7f7      	b.n	8012d26 <__swsetup_r+0xba>
 8012d36:	bf00      	nop
 8012d38:	20000494 	.word	0x20000494
 8012d3c:	08014f24 	.word	0x08014f24
 8012d40:	08014f44 	.word	0x08014f44
 8012d44:	08014f04 	.word	0x08014f04

08012d48 <__sflush_r>:
 8012d48:	898a      	ldrh	r2, [r1, #12]
 8012d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4e:	4605      	mov	r5, r0
 8012d50:	0710      	lsls	r0, r2, #28
 8012d52:	460c      	mov	r4, r1
 8012d54:	d458      	bmi.n	8012e08 <__sflush_r+0xc0>
 8012d56:	684b      	ldr	r3, [r1, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	dc05      	bgt.n	8012d68 <__sflush_r+0x20>
 8012d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	dc02      	bgt.n	8012d68 <__sflush_r+0x20>
 8012d62:	2000      	movs	r0, #0
 8012d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d6a:	2e00      	cmp	r6, #0
 8012d6c:	d0f9      	beq.n	8012d62 <__sflush_r+0x1a>
 8012d6e:	2300      	movs	r3, #0
 8012d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d74:	682f      	ldr	r7, [r5, #0]
 8012d76:	6a21      	ldr	r1, [r4, #32]
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	d032      	beq.n	8012de2 <__sflush_r+0x9a>
 8012d7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d7e:	89a3      	ldrh	r3, [r4, #12]
 8012d80:	075a      	lsls	r2, r3, #29
 8012d82:	d505      	bpl.n	8012d90 <__sflush_r+0x48>
 8012d84:	6863      	ldr	r3, [r4, #4]
 8012d86:	1ac0      	subs	r0, r0, r3
 8012d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d8a:	b10b      	cbz	r3, 8012d90 <__sflush_r+0x48>
 8012d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d8e:	1ac0      	subs	r0, r0, r3
 8012d90:	2300      	movs	r3, #0
 8012d92:	4602      	mov	r2, r0
 8012d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d96:	6a21      	ldr	r1, [r4, #32]
 8012d98:	4628      	mov	r0, r5
 8012d9a:	47b0      	blx	r6
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	89a3      	ldrh	r3, [r4, #12]
 8012da0:	d106      	bne.n	8012db0 <__sflush_r+0x68>
 8012da2:	6829      	ldr	r1, [r5, #0]
 8012da4:	291d      	cmp	r1, #29
 8012da6:	d848      	bhi.n	8012e3a <__sflush_r+0xf2>
 8012da8:	4a29      	ldr	r2, [pc, #164]	; (8012e50 <__sflush_r+0x108>)
 8012daa:	40ca      	lsrs	r2, r1
 8012dac:	07d6      	lsls	r6, r2, #31
 8012dae:	d544      	bpl.n	8012e3a <__sflush_r+0xf2>
 8012db0:	2200      	movs	r2, #0
 8012db2:	6062      	str	r2, [r4, #4]
 8012db4:	04d9      	lsls	r1, r3, #19
 8012db6:	6922      	ldr	r2, [r4, #16]
 8012db8:	6022      	str	r2, [r4, #0]
 8012dba:	d504      	bpl.n	8012dc6 <__sflush_r+0x7e>
 8012dbc:	1c42      	adds	r2, r0, #1
 8012dbe:	d101      	bne.n	8012dc4 <__sflush_r+0x7c>
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	b903      	cbnz	r3, 8012dc6 <__sflush_r+0x7e>
 8012dc4:	6560      	str	r0, [r4, #84]	; 0x54
 8012dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dc8:	602f      	str	r7, [r5, #0]
 8012dca:	2900      	cmp	r1, #0
 8012dcc:	d0c9      	beq.n	8012d62 <__sflush_r+0x1a>
 8012dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dd2:	4299      	cmp	r1, r3
 8012dd4:	d002      	beq.n	8012ddc <__sflush_r+0x94>
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f000 f9b2 	bl	8013140 <_free_r>
 8012ddc:	2000      	movs	r0, #0
 8012dde:	6360      	str	r0, [r4, #52]	; 0x34
 8012de0:	e7c0      	b.n	8012d64 <__sflush_r+0x1c>
 8012de2:	2301      	movs	r3, #1
 8012de4:	4628      	mov	r0, r5
 8012de6:	47b0      	blx	r6
 8012de8:	1c41      	adds	r1, r0, #1
 8012dea:	d1c8      	bne.n	8012d7e <__sflush_r+0x36>
 8012dec:	682b      	ldr	r3, [r5, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0c5      	beq.n	8012d7e <__sflush_r+0x36>
 8012df2:	2b1d      	cmp	r3, #29
 8012df4:	d001      	beq.n	8012dfa <__sflush_r+0xb2>
 8012df6:	2b16      	cmp	r3, #22
 8012df8:	d101      	bne.n	8012dfe <__sflush_r+0xb6>
 8012dfa:	602f      	str	r7, [r5, #0]
 8012dfc:	e7b1      	b.n	8012d62 <__sflush_r+0x1a>
 8012dfe:	89a3      	ldrh	r3, [r4, #12]
 8012e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e04:	81a3      	strh	r3, [r4, #12]
 8012e06:	e7ad      	b.n	8012d64 <__sflush_r+0x1c>
 8012e08:	690f      	ldr	r7, [r1, #16]
 8012e0a:	2f00      	cmp	r7, #0
 8012e0c:	d0a9      	beq.n	8012d62 <__sflush_r+0x1a>
 8012e0e:	0793      	lsls	r3, r2, #30
 8012e10:	680e      	ldr	r6, [r1, #0]
 8012e12:	bf08      	it	eq
 8012e14:	694b      	ldreq	r3, [r1, #20]
 8012e16:	600f      	str	r7, [r1, #0]
 8012e18:	bf18      	it	ne
 8012e1a:	2300      	movne	r3, #0
 8012e1c:	eba6 0807 	sub.w	r8, r6, r7
 8012e20:	608b      	str	r3, [r1, #8]
 8012e22:	f1b8 0f00 	cmp.w	r8, #0
 8012e26:	dd9c      	ble.n	8012d62 <__sflush_r+0x1a>
 8012e28:	4643      	mov	r3, r8
 8012e2a:	463a      	mov	r2, r7
 8012e2c:	6a21      	ldr	r1, [r4, #32]
 8012e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e30:	4628      	mov	r0, r5
 8012e32:	47b0      	blx	r6
 8012e34:	2800      	cmp	r0, #0
 8012e36:	dc06      	bgt.n	8012e46 <__sflush_r+0xfe>
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e3e:	81a3      	strh	r3, [r4, #12]
 8012e40:	f04f 30ff 	mov.w	r0, #4294967295
 8012e44:	e78e      	b.n	8012d64 <__sflush_r+0x1c>
 8012e46:	4407      	add	r7, r0
 8012e48:	eba8 0800 	sub.w	r8, r8, r0
 8012e4c:	e7e9      	b.n	8012e22 <__sflush_r+0xda>
 8012e4e:	bf00      	nop
 8012e50:	20400001 	.word	0x20400001

08012e54 <_fflush_r>:
 8012e54:	b538      	push	{r3, r4, r5, lr}
 8012e56:	690b      	ldr	r3, [r1, #16]
 8012e58:	4605      	mov	r5, r0
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	b1db      	cbz	r3, 8012e96 <_fflush_r+0x42>
 8012e5e:	b118      	cbz	r0, 8012e68 <_fflush_r+0x14>
 8012e60:	6983      	ldr	r3, [r0, #24]
 8012e62:	b90b      	cbnz	r3, 8012e68 <_fflush_r+0x14>
 8012e64:	f000 f860 	bl	8012f28 <__sinit>
 8012e68:	4b0c      	ldr	r3, [pc, #48]	; (8012e9c <_fflush_r+0x48>)
 8012e6a:	429c      	cmp	r4, r3
 8012e6c:	d109      	bne.n	8012e82 <_fflush_r+0x2e>
 8012e6e:	686c      	ldr	r4, [r5, #4]
 8012e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e74:	b17b      	cbz	r3, 8012e96 <_fflush_r+0x42>
 8012e76:	4621      	mov	r1, r4
 8012e78:	4628      	mov	r0, r5
 8012e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e7e:	f7ff bf63 	b.w	8012d48 <__sflush_r>
 8012e82:	4b07      	ldr	r3, [pc, #28]	; (8012ea0 <_fflush_r+0x4c>)
 8012e84:	429c      	cmp	r4, r3
 8012e86:	d101      	bne.n	8012e8c <_fflush_r+0x38>
 8012e88:	68ac      	ldr	r4, [r5, #8]
 8012e8a:	e7f1      	b.n	8012e70 <_fflush_r+0x1c>
 8012e8c:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <_fflush_r+0x50>)
 8012e8e:	429c      	cmp	r4, r3
 8012e90:	bf08      	it	eq
 8012e92:	68ec      	ldreq	r4, [r5, #12]
 8012e94:	e7ec      	b.n	8012e70 <_fflush_r+0x1c>
 8012e96:	2000      	movs	r0, #0
 8012e98:	bd38      	pop	{r3, r4, r5, pc}
 8012e9a:	bf00      	nop
 8012e9c:	08014f24 	.word	0x08014f24
 8012ea0:	08014f44 	.word	0x08014f44
 8012ea4:	08014f04 	.word	0x08014f04

08012ea8 <std>:
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	4604      	mov	r4, r0
 8012eae:	e9c0 3300 	strd	r3, r3, [r0]
 8012eb2:	6083      	str	r3, [r0, #8]
 8012eb4:	8181      	strh	r1, [r0, #12]
 8012eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8012eb8:	81c2      	strh	r2, [r0, #14]
 8012eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ebe:	6183      	str	r3, [r0, #24]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	2208      	movs	r2, #8
 8012ec4:	305c      	adds	r0, #92	; 0x5c
 8012ec6:	f7ff fc89 	bl	80127dc <memset>
 8012eca:	4b05      	ldr	r3, [pc, #20]	; (8012ee0 <std+0x38>)
 8012ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8012ece:	4b05      	ldr	r3, [pc, #20]	; (8012ee4 <std+0x3c>)
 8012ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ed2:	4b05      	ldr	r3, [pc, #20]	; (8012ee8 <std+0x40>)
 8012ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ed6:	4b05      	ldr	r3, [pc, #20]	; (8012eec <std+0x44>)
 8012ed8:	6224      	str	r4, [r4, #32]
 8012eda:	6323      	str	r3, [r4, #48]	; 0x30
 8012edc:	bd10      	pop	{r4, pc}
 8012ede:	bf00      	nop
 8012ee0:	08013ae5 	.word	0x08013ae5
 8012ee4:	08013b07 	.word	0x08013b07
 8012ee8:	08013b3f 	.word	0x08013b3f
 8012eec:	08013b63 	.word	0x08013b63

08012ef0 <_cleanup_r>:
 8012ef0:	4901      	ldr	r1, [pc, #4]	; (8012ef8 <_cleanup_r+0x8>)
 8012ef2:	f000 b885 	b.w	8013000 <_fwalk_reent>
 8012ef6:	bf00      	nop
 8012ef8:	08012e55 	.word	0x08012e55

08012efc <__sfmoreglue>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	1e4a      	subs	r2, r1, #1
 8012f00:	2568      	movs	r5, #104	; 0x68
 8012f02:	4355      	muls	r5, r2
 8012f04:	460e      	mov	r6, r1
 8012f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f0a:	f000 f967 	bl	80131dc <_malloc_r>
 8012f0e:	4604      	mov	r4, r0
 8012f10:	b140      	cbz	r0, 8012f24 <__sfmoreglue+0x28>
 8012f12:	2100      	movs	r1, #0
 8012f14:	e9c0 1600 	strd	r1, r6, [r0]
 8012f18:	300c      	adds	r0, #12
 8012f1a:	60a0      	str	r0, [r4, #8]
 8012f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f20:	f7ff fc5c 	bl	80127dc <memset>
 8012f24:	4620      	mov	r0, r4
 8012f26:	bd70      	pop	{r4, r5, r6, pc}

08012f28 <__sinit>:
 8012f28:	6983      	ldr	r3, [r0, #24]
 8012f2a:	b510      	push	{r4, lr}
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	bb33      	cbnz	r3, 8012f7e <__sinit+0x56>
 8012f30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012f34:	6503      	str	r3, [r0, #80]	; 0x50
 8012f36:	4b12      	ldr	r3, [pc, #72]	; (8012f80 <__sinit+0x58>)
 8012f38:	4a12      	ldr	r2, [pc, #72]	; (8012f84 <__sinit+0x5c>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	6282      	str	r2, [r0, #40]	; 0x28
 8012f3e:	4298      	cmp	r0, r3
 8012f40:	bf04      	itt	eq
 8012f42:	2301      	moveq	r3, #1
 8012f44:	6183      	streq	r3, [r0, #24]
 8012f46:	f000 f81f 	bl	8012f88 <__sfp>
 8012f4a:	6060      	str	r0, [r4, #4]
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 f81b 	bl	8012f88 <__sfp>
 8012f52:	60a0      	str	r0, [r4, #8]
 8012f54:	4620      	mov	r0, r4
 8012f56:	f000 f817 	bl	8012f88 <__sfp>
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	60e0      	str	r0, [r4, #12]
 8012f5e:	2104      	movs	r1, #4
 8012f60:	6860      	ldr	r0, [r4, #4]
 8012f62:	f7ff ffa1 	bl	8012ea8 <std>
 8012f66:	2201      	movs	r2, #1
 8012f68:	2109      	movs	r1, #9
 8012f6a:	68a0      	ldr	r0, [r4, #8]
 8012f6c:	f7ff ff9c 	bl	8012ea8 <std>
 8012f70:	2202      	movs	r2, #2
 8012f72:	2112      	movs	r1, #18
 8012f74:	68e0      	ldr	r0, [r4, #12]
 8012f76:	f7ff ff97 	bl	8012ea8 <std>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	61a3      	str	r3, [r4, #24]
 8012f7e:	bd10      	pop	{r4, pc}
 8012f80:	08014f00 	.word	0x08014f00
 8012f84:	08012ef1 	.word	0x08012ef1

08012f88 <__sfp>:
 8012f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8a:	4b1b      	ldr	r3, [pc, #108]	; (8012ff8 <__sfp+0x70>)
 8012f8c:	681e      	ldr	r6, [r3, #0]
 8012f8e:	69b3      	ldr	r3, [r6, #24]
 8012f90:	4607      	mov	r7, r0
 8012f92:	b913      	cbnz	r3, 8012f9a <__sfp+0x12>
 8012f94:	4630      	mov	r0, r6
 8012f96:	f7ff ffc7 	bl	8012f28 <__sinit>
 8012f9a:	3648      	adds	r6, #72	; 0x48
 8012f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	d503      	bpl.n	8012fac <__sfp+0x24>
 8012fa4:	6833      	ldr	r3, [r6, #0]
 8012fa6:	b133      	cbz	r3, 8012fb6 <__sfp+0x2e>
 8012fa8:	6836      	ldr	r6, [r6, #0]
 8012faa:	e7f7      	b.n	8012f9c <__sfp+0x14>
 8012fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fb0:	b16d      	cbz	r5, 8012fce <__sfp+0x46>
 8012fb2:	3468      	adds	r4, #104	; 0x68
 8012fb4:	e7f4      	b.n	8012fa0 <__sfp+0x18>
 8012fb6:	2104      	movs	r1, #4
 8012fb8:	4638      	mov	r0, r7
 8012fba:	f7ff ff9f 	bl	8012efc <__sfmoreglue>
 8012fbe:	6030      	str	r0, [r6, #0]
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d1f1      	bne.n	8012fa8 <__sfp+0x20>
 8012fc4:	230c      	movs	r3, #12
 8012fc6:	603b      	str	r3, [r7, #0]
 8012fc8:	4604      	mov	r4, r0
 8012fca:	4620      	mov	r0, r4
 8012fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fce:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <__sfp+0x74>)
 8012fd0:	6665      	str	r5, [r4, #100]	; 0x64
 8012fd2:	e9c4 5500 	strd	r5, r5, [r4]
 8012fd6:	60a5      	str	r5, [r4, #8]
 8012fd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012fdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012fe0:	2208      	movs	r2, #8
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fe8:	f7ff fbf8 	bl	80127dc <memset>
 8012fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ff4:	e7e9      	b.n	8012fca <__sfp+0x42>
 8012ff6:	bf00      	nop
 8012ff8:	08014f00 	.word	0x08014f00
 8012ffc:	ffff0001 	.word	0xffff0001

08013000 <_fwalk_reent>:
 8013000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013004:	4680      	mov	r8, r0
 8013006:	4689      	mov	r9, r1
 8013008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801300c:	2600      	movs	r6, #0
 801300e:	b914      	cbnz	r4, 8013016 <_fwalk_reent+0x16>
 8013010:	4630      	mov	r0, r6
 8013012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013016:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801301a:	3f01      	subs	r7, #1
 801301c:	d501      	bpl.n	8013022 <_fwalk_reent+0x22>
 801301e:	6824      	ldr	r4, [r4, #0]
 8013020:	e7f5      	b.n	801300e <_fwalk_reent+0xe>
 8013022:	89ab      	ldrh	r3, [r5, #12]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d907      	bls.n	8013038 <_fwalk_reent+0x38>
 8013028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801302c:	3301      	adds	r3, #1
 801302e:	d003      	beq.n	8013038 <_fwalk_reent+0x38>
 8013030:	4629      	mov	r1, r5
 8013032:	4640      	mov	r0, r8
 8013034:	47c8      	blx	r9
 8013036:	4306      	orrs	r6, r0
 8013038:	3568      	adds	r5, #104	; 0x68
 801303a:	e7ee      	b.n	801301a <_fwalk_reent+0x1a>

0801303c <__locale_ctype_ptr_l>:
 801303c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013040:	4770      	bx	lr

08013042 <__swhatbuf_r>:
 8013042:	b570      	push	{r4, r5, r6, lr}
 8013044:	460e      	mov	r6, r1
 8013046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801304a:	2900      	cmp	r1, #0
 801304c:	b096      	sub	sp, #88	; 0x58
 801304e:	4614      	mov	r4, r2
 8013050:	461d      	mov	r5, r3
 8013052:	da07      	bge.n	8013064 <__swhatbuf_r+0x22>
 8013054:	2300      	movs	r3, #0
 8013056:	602b      	str	r3, [r5, #0]
 8013058:	89b3      	ldrh	r3, [r6, #12]
 801305a:	061a      	lsls	r2, r3, #24
 801305c:	d410      	bmi.n	8013080 <__swhatbuf_r+0x3e>
 801305e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013062:	e00e      	b.n	8013082 <__swhatbuf_r+0x40>
 8013064:	466a      	mov	r2, sp
 8013066:	f000 fdaf 	bl	8013bc8 <_fstat_r>
 801306a:	2800      	cmp	r0, #0
 801306c:	dbf2      	blt.n	8013054 <__swhatbuf_r+0x12>
 801306e:	9a01      	ldr	r2, [sp, #4]
 8013070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013078:	425a      	negs	r2, r3
 801307a:	415a      	adcs	r2, r3
 801307c:	602a      	str	r2, [r5, #0]
 801307e:	e7ee      	b.n	801305e <__swhatbuf_r+0x1c>
 8013080:	2340      	movs	r3, #64	; 0x40
 8013082:	2000      	movs	r0, #0
 8013084:	6023      	str	r3, [r4, #0]
 8013086:	b016      	add	sp, #88	; 0x58
 8013088:	bd70      	pop	{r4, r5, r6, pc}
	...

0801308c <__smakebuf_r>:
 801308c:	898b      	ldrh	r3, [r1, #12]
 801308e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013090:	079d      	lsls	r5, r3, #30
 8013092:	4606      	mov	r6, r0
 8013094:	460c      	mov	r4, r1
 8013096:	d507      	bpl.n	80130a8 <__smakebuf_r+0x1c>
 8013098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801309c:	6023      	str	r3, [r4, #0]
 801309e:	6123      	str	r3, [r4, #16]
 80130a0:	2301      	movs	r3, #1
 80130a2:	6163      	str	r3, [r4, #20]
 80130a4:	b002      	add	sp, #8
 80130a6:	bd70      	pop	{r4, r5, r6, pc}
 80130a8:	ab01      	add	r3, sp, #4
 80130aa:	466a      	mov	r2, sp
 80130ac:	f7ff ffc9 	bl	8013042 <__swhatbuf_r>
 80130b0:	9900      	ldr	r1, [sp, #0]
 80130b2:	4605      	mov	r5, r0
 80130b4:	4630      	mov	r0, r6
 80130b6:	f000 f891 	bl	80131dc <_malloc_r>
 80130ba:	b948      	cbnz	r0, 80130d0 <__smakebuf_r+0x44>
 80130bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130c0:	059a      	lsls	r2, r3, #22
 80130c2:	d4ef      	bmi.n	80130a4 <__smakebuf_r+0x18>
 80130c4:	f023 0303 	bic.w	r3, r3, #3
 80130c8:	f043 0302 	orr.w	r3, r3, #2
 80130cc:	81a3      	strh	r3, [r4, #12]
 80130ce:	e7e3      	b.n	8013098 <__smakebuf_r+0xc>
 80130d0:	4b0d      	ldr	r3, [pc, #52]	; (8013108 <__smakebuf_r+0x7c>)
 80130d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80130d4:	89a3      	ldrh	r3, [r4, #12]
 80130d6:	6020      	str	r0, [r4, #0]
 80130d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130dc:	81a3      	strh	r3, [r4, #12]
 80130de:	9b00      	ldr	r3, [sp, #0]
 80130e0:	6163      	str	r3, [r4, #20]
 80130e2:	9b01      	ldr	r3, [sp, #4]
 80130e4:	6120      	str	r0, [r4, #16]
 80130e6:	b15b      	cbz	r3, 8013100 <__smakebuf_r+0x74>
 80130e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130ec:	4630      	mov	r0, r6
 80130ee:	f000 fd7d 	bl	8013bec <_isatty_r>
 80130f2:	b128      	cbz	r0, 8013100 <__smakebuf_r+0x74>
 80130f4:	89a3      	ldrh	r3, [r4, #12]
 80130f6:	f023 0303 	bic.w	r3, r3, #3
 80130fa:	f043 0301 	orr.w	r3, r3, #1
 80130fe:	81a3      	strh	r3, [r4, #12]
 8013100:	89a3      	ldrh	r3, [r4, #12]
 8013102:	431d      	orrs	r5, r3
 8013104:	81a5      	strh	r5, [r4, #12]
 8013106:	e7cd      	b.n	80130a4 <__smakebuf_r+0x18>
 8013108:	08012ef1 	.word	0x08012ef1

0801310c <malloc>:
 801310c:	4b02      	ldr	r3, [pc, #8]	; (8013118 <malloc+0xc>)
 801310e:	4601      	mov	r1, r0
 8013110:	6818      	ldr	r0, [r3, #0]
 8013112:	f000 b863 	b.w	80131dc <_malloc_r>
 8013116:	bf00      	nop
 8013118:	20000494 	.word	0x20000494

0801311c <__ascii_mbtowc>:
 801311c:	b082      	sub	sp, #8
 801311e:	b901      	cbnz	r1, 8013122 <__ascii_mbtowc+0x6>
 8013120:	a901      	add	r1, sp, #4
 8013122:	b142      	cbz	r2, 8013136 <__ascii_mbtowc+0x1a>
 8013124:	b14b      	cbz	r3, 801313a <__ascii_mbtowc+0x1e>
 8013126:	7813      	ldrb	r3, [r2, #0]
 8013128:	600b      	str	r3, [r1, #0]
 801312a:	7812      	ldrb	r2, [r2, #0]
 801312c:	1c10      	adds	r0, r2, #0
 801312e:	bf18      	it	ne
 8013130:	2001      	movne	r0, #1
 8013132:	b002      	add	sp, #8
 8013134:	4770      	bx	lr
 8013136:	4610      	mov	r0, r2
 8013138:	e7fb      	b.n	8013132 <__ascii_mbtowc+0x16>
 801313a:	f06f 0001 	mvn.w	r0, #1
 801313e:	e7f8      	b.n	8013132 <__ascii_mbtowc+0x16>

08013140 <_free_r>:
 8013140:	b538      	push	{r3, r4, r5, lr}
 8013142:	4605      	mov	r5, r0
 8013144:	2900      	cmp	r1, #0
 8013146:	d045      	beq.n	80131d4 <_free_r+0x94>
 8013148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801314c:	1f0c      	subs	r4, r1, #4
 801314e:	2b00      	cmp	r3, #0
 8013150:	bfb8      	it	lt
 8013152:	18e4      	addlt	r4, r4, r3
 8013154:	f000 fd85 	bl	8013c62 <__malloc_lock>
 8013158:	4a1f      	ldr	r2, [pc, #124]	; (80131d8 <_free_r+0x98>)
 801315a:	6813      	ldr	r3, [r2, #0]
 801315c:	4610      	mov	r0, r2
 801315e:	b933      	cbnz	r3, 801316e <_free_r+0x2e>
 8013160:	6063      	str	r3, [r4, #4]
 8013162:	6014      	str	r4, [r2, #0]
 8013164:	4628      	mov	r0, r5
 8013166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801316a:	f000 bd7b 	b.w	8013c64 <__malloc_unlock>
 801316e:	42a3      	cmp	r3, r4
 8013170:	d90c      	bls.n	801318c <_free_r+0x4c>
 8013172:	6821      	ldr	r1, [r4, #0]
 8013174:	1862      	adds	r2, r4, r1
 8013176:	4293      	cmp	r3, r2
 8013178:	bf04      	itt	eq
 801317a:	681a      	ldreq	r2, [r3, #0]
 801317c:	685b      	ldreq	r3, [r3, #4]
 801317e:	6063      	str	r3, [r4, #4]
 8013180:	bf04      	itt	eq
 8013182:	1852      	addeq	r2, r2, r1
 8013184:	6022      	streq	r2, [r4, #0]
 8013186:	6004      	str	r4, [r0, #0]
 8013188:	e7ec      	b.n	8013164 <_free_r+0x24>
 801318a:	4613      	mov	r3, r2
 801318c:	685a      	ldr	r2, [r3, #4]
 801318e:	b10a      	cbz	r2, 8013194 <_free_r+0x54>
 8013190:	42a2      	cmp	r2, r4
 8013192:	d9fa      	bls.n	801318a <_free_r+0x4a>
 8013194:	6819      	ldr	r1, [r3, #0]
 8013196:	1858      	adds	r0, r3, r1
 8013198:	42a0      	cmp	r0, r4
 801319a:	d10b      	bne.n	80131b4 <_free_r+0x74>
 801319c:	6820      	ldr	r0, [r4, #0]
 801319e:	4401      	add	r1, r0
 80131a0:	1858      	adds	r0, r3, r1
 80131a2:	4282      	cmp	r2, r0
 80131a4:	6019      	str	r1, [r3, #0]
 80131a6:	d1dd      	bne.n	8013164 <_free_r+0x24>
 80131a8:	6810      	ldr	r0, [r2, #0]
 80131aa:	6852      	ldr	r2, [r2, #4]
 80131ac:	605a      	str	r2, [r3, #4]
 80131ae:	4401      	add	r1, r0
 80131b0:	6019      	str	r1, [r3, #0]
 80131b2:	e7d7      	b.n	8013164 <_free_r+0x24>
 80131b4:	d902      	bls.n	80131bc <_free_r+0x7c>
 80131b6:	230c      	movs	r3, #12
 80131b8:	602b      	str	r3, [r5, #0]
 80131ba:	e7d3      	b.n	8013164 <_free_r+0x24>
 80131bc:	6820      	ldr	r0, [r4, #0]
 80131be:	1821      	adds	r1, r4, r0
 80131c0:	428a      	cmp	r2, r1
 80131c2:	bf04      	itt	eq
 80131c4:	6811      	ldreq	r1, [r2, #0]
 80131c6:	6852      	ldreq	r2, [r2, #4]
 80131c8:	6062      	str	r2, [r4, #4]
 80131ca:	bf04      	itt	eq
 80131cc:	1809      	addeq	r1, r1, r0
 80131ce:	6021      	streq	r1, [r4, #0]
 80131d0:	605c      	str	r4, [r3, #4]
 80131d2:	e7c7      	b.n	8013164 <_free_r+0x24>
 80131d4:	bd38      	pop	{r3, r4, r5, pc}
 80131d6:	bf00      	nop
 80131d8:	20003020 	.word	0x20003020

080131dc <_malloc_r>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	1ccd      	adds	r5, r1, #3
 80131e0:	f025 0503 	bic.w	r5, r5, #3
 80131e4:	3508      	adds	r5, #8
 80131e6:	2d0c      	cmp	r5, #12
 80131e8:	bf38      	it	cc
 80131ea:	250c      	movcc	r5, #12
 80131ec:	2d00      	cmp	r5, #0
 80131ee:	4606      	mov	r6, r0
 80131f0:	db01      	blt.n	80131f6 <_malloc_r+0x1a>
 80131f2:	42a9      	cmp	r1, r5
 80131f4:	d903      	bls.n	80131fe <_malloc_r+0x22>
 80131f6:	230c      	movs	r3, #12
 80131f8:	6033      	str	r3, [r6, #0]
 80131fa:	2000      	movs	r0, #0
 80131fc:	bd70      	pop	{r4, r5, r6, pc}
 80131fe:	f000 fd30 	bl	8013c62 <__malloc_lock>
 8013202:	4a21      	ldr	r2, [pc, #132]	; (8013288 <_malloc_r+0xac>)
 8013204:	6814      	ldr	r4, [r2, #0]
 8013206:	4621      	mov	r1, r4
 8013208:	b991      	cbnz	r1, 8013230 <_malloc_r+0x54>
 801320a:	4c20      	ldr	r4, [pc, #128]	; (801328c <_malloc_r+0xb0>)
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	b91b      	cbnz	r3, 8013218 <_malloc_r+0x3c>
 8013210:	4630      	mov	r0, r6
 8013212:	f000 fc57 	bl	8013ac4 <_sbrk_r>
 8013216:	6020      	str	r0, [r4, #0]
 8013218:	4629      	mov	r1, r5
 801321a:	4630      	mov	r0, r6
 801321c:	f000 fc52 	bl	8013ac4 <_sbrk_r>
 8013220:	1c43      	adds	r3, r0, #1
 8013222:	d124      	bne.n	801326e <_malloc_r+0x92>
 8013224:	230c      	movs	r3, #12
 8013226:	6033      	str	r3, [r6, #0]
 8013228:	4630      	mov	r0, r6
 801322a:	f000 fd1b 	bl	8013c64 <__malloc_unlock>
 801322e:	e7e4      	b.n	80131fa <_malloc_r+0x1e>
 8013230:	680b      	ldr	r3, [r1, #0]
 8013232:	1b5b      	subs	r3, r3, r5
 8013234:	d418      	bmi.n	8013268 <_malloc_r+0x8c>
 8013236:	2b0b      	cmp	r3, #11
 8013238:	d90f      	bls.n	801325a <_malloc_r+0x7e>
 801323a:	600b      	str	r3, [r1, #0]
 801323c:	50cd      	str	r5, [r1, r3]
 801323e:	18cc      	adds	r4, r1, r3
 8013240:	4630      	mov	r0, r6
 8013242:	f000 fd0f 	bl	8013c64 <__malloc_unlock>
 8013246:	f104 000b 	add.w	r0, r4, #11
 801324a:	1d23      	adds	r3, r4, #4
 801324c:	f020 0007 	bic.w	r0, r0, #7
 8013250:	1ac3      	subs	r3, r0, r3
 8013252:	d0d3      	beq.n	80131fc <_malloc_r+0x20>
 8013254:	425a      	negs	r2, r3
 8013256:	50e2      	str	r2, [r4, r3]
 8013258:	e7d0      	b.n	80131fc <_malloc_r+0x20>
 801325a:	428c      	cmp	r4, r1
 801325c:	684b      	ldr	r3, [r1, #4]
 801325e:	bf16      	itet	ne
 8013260:	6063      	strne	r3, [r4, #4]
 8013262:	6013      	streq	r3, [r2, #0]
 8013264:	460c      	movne	r4, r1
 8013266:	e7eb      	b.n	8013240 <_malloc_r+0x64>
 8013268:	460c      	mov	r4, r1
 801326a:	6849      	ldr	r1, [r1, #4]
 801326c:	e7cc      	b.n	8013208 <_malloc_r+0x2c>
 801326e:	1cc4      	adds	r4, r0, #3
 8013270:	f024 0403 	bic.w	r4, r4, #3
 8013274:	42a0      	cmp	r0, r4
 8013276:	d005      	beq.n	8013284 <_malloc_r+0xa8>
 8013278:	1a21      	subs	r1, r4, r0
 801327a:	4630      	mov	r0, r6
 801327c:	f000 fc22 	bl	8013ac4 <_sbrk_r>
 8013280:	3001      	adds	r0, #1
 8013282:	d0cf      	beq.n	8013224 <_malloc_r+0x48>
 8013284:	6025      	str	r5, [r4, #0]
 8013286:	e7db      	b.n	8013240 <_malloc_r+0x64>
 8013288:	20003020 	.word	0x20003020
 801328c:	20003024 	.word	0x20003024

08013290 <__ssputs_r>:
 8013290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013294:	688e      	ldr	r6, [r1, #8]
 8013296:	429e      	cmp	r6, r3
 8013298:	4682      	mov	sl, r0
 801329a:	460c      	mov	r4, r1
 801329c:	4690      	mov	r8, r2
 801329e:	4699      	mov	r9, r3
 80132a0:	d837      	bhi.n	8013312 <__ssputs_r+0x82>
 80132a2:	898a      	ldrh	r2, [r1, #12]
 80132a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80132a8:	d031      	beq.n	801330e <__ssputs_r+0x7e>
 80132aa:	6825      	ldr	r5, [r4, #0]
 80132ac:	6909      	ldr	r1, [r1, #16]
 80132ae:	1a6f      	subs	r7, r5, r1
 80132b0:	6965      	ldr	r5, [r4, #20]
 80132b2:	2302      	movs	r3, #2
 80132b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80132bc:	f109 0301 	add.w	r3, r9, #1
 80132c0:	443b      	add	r3, r7
 80132c2:	429d      	cmp	r5, r3
 80132c4:	bf38      	it	cc
 80132c6:	461d      	movcc	r5, r3
 80132c8:	0553      	lsls	r3, r2, #21
 80132ca:	d530      	bpl.n	801332e <__ssputs_r+0x9e>
 80132cc:	4629      	mov	r1, r5
 80132ce:	f7ff ff85 	bl	80131dc <_malloc_r>
 80132d2:	4606      	mov	r6, r0
 80132d4:	b950      	cbnz	r0, 80132ec <__ssputs_r+0x5c>
 80132d6:	230c      	movs	r3, #12
 80132d8:	f8ca 3000 	str.w	r3, [sl]
 80132dc:	89a3      	ldrh	r3, [r4, #12]
 80132de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132e2:	81a3      	strh	r3, [r4, #12]
 80132e4:	f04f 30ff 	mov.w	r0, #4294967295
 80132e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132ec:	463a      	mov	r2, r7
 80132ee:	6921      	ldr	r1, [r4, #16]
 80132f0:	f7ff fa69 	bl	80127c6 <memcpy>
 80132f4:	89a3      	ldrh	r3, [r4, #12]
 80132f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80132fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132fe:	81a3      	strh	r3, [r4, #12]
 8013300:	6126      	str	r6, [r4, #16]
 8013302:	6165      	str	r5, [r4, #20]
 8013304:	443e      	add	r6, r7
 8013306:	1bed      	subs	r5, r5, r7
 8013308:	6026      	str	r6, [r4, #0]
 801330a:	60a5      	str	r5, [r4, #8]
 801330c:	464e      	mov	r6, r9
 801330e:	454e      	cmp	r6, r9
 8013310:	d900      	bls.n	8013314 <__ssputs_r+0x84>
 8013312:	464e      	mov	r6, r9
 8013314:	4632      	mov	r2, r6
 8013316:	4641      	mov	r1, r8
 8013318:	6820      	ldr	r0, [r4, #0]
 801331a:	f000 fc89 	bl	8013c30 <memmove>
 801331e:	68a3      	ldr	r3, [r4, #8]
 8013320:	1b9b      	subs	r3, r3, r6
 8013322:	60a3      	str	r3, [r4, #8]
 8013324:	6823      	ldr	r3, [r4, #0]
 8013326:	441e      	add	r6, r3
 8013328:	6026      	str	r6, [r4, #0]
 801332a:	2000      	movs	r0, #0
 801332c:	e7dc      	b.n	80132e8 <__ssputs_r+0x58>
 801332e:	462a      	mov	r2, r5
 8013330:	f000 fc99 	bl	8013c66 <_realloc_r>
 8013334:	4606      	mov	r6, r0
 8013336:	2800      	cmp	r0, #0
 8013338:	d1e2      	bne.n	8013300 <__ssputs_r+0x70>
 801333a:	6921      	ldr	r1, [r4, #16]
 801333c:	4650      	mov	r0, sl
 801333e:	f7ff feff 	bl	8013140 <_free_r>
 8013342:	e7c8      	b.n	80132d6 <__ssputs_r+0x46>

08013344 <_svfiprintf_r>:
 8013344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013348:	461d      	mov	r5, r3
 801334a:	898b      	ldrh	r3, [r1, #12]
 801334c:	061f      	lsls	r7, r3, #24
 801334e:	b09d      	sub	sp, #116	; 0x74
 8013350:	4680      	mov	r8, r0
 8013352:	460c      	mov	r4, r1
 8013354:	4616      	mov	r6, r2
 8013356:	d50f      	bpl.n	8013378 <_svfiprintf_r+0x34>
 8013358:	690b      	ldr	r3, [r1, #16]
 801335a:	b96b      	cbnz	r3, 8013378 <_svfiprintf_r+0x34>
 801335c:	2140      	movs	r1, #64	; 0x40
 801335e:	f7ff ff3d 	bl	80131dc <_malloc_r>
 8013362:	6020      	str	r0, [r4, #0]
 8013364:	6120      	str	r0, [r4, #16]
 8013366:	b928      	cbnz	r0, 8013374 <_svfiprintf_r+0x30>
 8013368:	230c      	movs	r3, #12
 801336a:	f8c8 3000 	str.w	r3, [r8]
 801336e:	f04f 30ff 	mov.w	r0, #4294967295
 8013372:	e0c8      	b.n	8013506 <_svfiprintf_r+0x1c2>
 8013374:	2340      	movs	r3, #64	; 0x40
 8013376:	6163      	str	r3, [r4, #20]
 8013378:	2300      	movs	r3, #0
 801337a:	9309      	str	r3, [sp, #36]	; 0x24
 801337c:	2320      	movs	r3, #32
 801337e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013382:	2330      	movs	r3, #48	; 0x30
 8013384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013388:	9503      	str	r5, [sp, #12]
 801338a:	f04f 0b01 	mov.w	fp, #1
 801338e:	4637      	mov	r7, r6
 8013390:	463d      	mov	r5, r7
 8013392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013396:	b10b      	cbz	r3, 801339c <_svfiprintf_r+0x58>
 8013398:	2b25      	cmp	r3, #37	; 0x25
 801339a:	d13e      	bne.n	801341a <_svfiprintf_r+0xd6>
 801339c:	ebb7 0a06 	subs.w	sl, r7, r6
 80133a0:	d00b      	beq.n	80133ba <_svfiprintf_r+0x76>
 80133a2:	4653      	mov	r3, sl
 80133a4:	4632      	mov	r2, r6
 80133a6:	4621      	mov	r1, r4
 80133a8:	4640      	mov	r0, r8
 80133aa:	f7ff ff71 	bl	8013290 <__ssputs_r>
 80133ae:	3001      	adds	r0, #1
 80133b0:	f000 80a4 	beq.w	80134fc <_svfiprintf_r+0x1b8>
 80133b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133b6:	4453      	add	r3, sl
 80133b8:	9309      	str	r3, [sp, #36]	; 0x24
 80133ba:	783b      	ldrb	r3, [r7, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f000 809d 	beq.w	80134fc <_svfiprintf_r+0x1b8>
 80133c2:	2300      	movs	r3, #0
 80133c4:	f04f 32ff 	mov.w	r2, #4294967295
 80133c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133cc:	9304      	str	r3, [sp, #16]
 80133ce:	9307      	str	r3, [sp, #28]
 80133d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133d4:	931a      	str	r3, [sp, #104]	; 0x68
 80133d6:	462f      	mov	r7, r5
 80133d8:	2205      	movs	r2, #5
 80133da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80133de:	4850      	ldr	r0, [pc, #320]	; (8013520 <_svfiprintf_r+0x1dc>)
 80133e0:	f7ec fefe 	bl	80001e0 <memchr>
 80133e4:	9b04      	ldr	r3, [sp, #16]
 80133e6:	b9d0      	cbnz	r0, 801341e <_svfiprintf_r+0xda>
 80133e8:	06d9      	lsls	r1, r3, #27
 80133ea:	bf44      	itt	mi
 80133ec:	2220      	movmi	r2, #32
 80133ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80133f2:	071a      	lsls	r2, r3, #28
 80133f4:	bf44      	itt	mi
 80133f6:	222b      	movmi	r2, #43	; 0x2b
 80133f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80133fc:	782a      	ldrb	r2, [r5, #0]
 80133fe:	2a2a      	cmp	r2, #42	; 0x2a
 8013400:	d015      	beq.n	801342e <_svfiprintf_r+0xea>
 8013402:	9a07      	ldr	r2, [sp, #28]
 8013404:	462f      	mov	r7, r5
 8013406:	2000      	movs	r0, #0
 8013408:	250a      	movs	r5, #10
 801340a:	4639      	mov	r1, r7
 801340c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013410:	3b30      	subs	r3, #48	; 0x30
 8013412:	2b09      	cmp	r3, #9
 8013414:	d94d      	bls.n	80134b2 <_svfiprintf_r+0x16e>
 8013416:	b1b8      	cbz	r0, 8013448 <_svfiprintf_r+0x104>
 8013418:	e00f      	b.n	801343a <_svfiprintf_r+0xf6>
 801341a:	462f      	mov	r7, r5
 801341c:	e7b8      	b.n	8013390 <_svfiprintf_r+0x4c>
 801341e:	4a40      	ldr	r2, [pc, #256]	; (8013520 <_svfiprintf_r+0x1dc>)
 8013420:	1a80      	subs	r0, r0, r2
 8013422:	fa0b f000 	lsl.w	r0, fp, r0
 8013426:	4318      	orrs	r0, r3
 8013428:	9004      	str	r0, [sp, #16]
 801342a:	463d      	mov	r5, r7
 801342c:	e7d3      	b.n	80133d6 <_svfiprintf_r+0x92>
 801342e:	9a03      	ldr	r2, [sp, #12]
 8013430:	1d11      	adds	r1, r2, #4
 8013432:	6812      	ldr	r2, [r2, #0]
 8013434:	9103      	str	r1, [sp, #12]
 8013436:	2a00      	cmp	r2, #0
 8013438:	db01      	blt.n	801343e <_svfiprintf_r+0xfa>
 801343a:	9207      	str	r2, [sp, #28]
 801343c:	e004      	b.n	8013448 <_svfiprintf_r+0x104>
 801343e:	4252      	negs	r2, r2
 8013440:	f043 0302 	orr.w	r3, r3, #2
 8013444:	9207      	str	r2, [sp, #28]
 8013446:	9304      	str	r3, [sp, #16]
 8013448:	783b      	ldrb	r3, [r7, #0]
 801344a:	2b2e      	cmp	r3, #46	; 0x2e
 801344c:	d10c      	bne.n	8013468 <_svfiprintf_r+0x124>
 801344e:	787b      	ldrb	r3, [r7, #1]
 8013450:	2b2a      	cmp	r3, #42	; 0x2a
 8013452:	d133      	bne.n	80134bc <_svfiprintf_r+0x178>
 8013454:	9b03      	ldr	r3, [sp, #12]
 8013456:	1d1a      	adds	r2, r3, #4
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	9203      	str	r2, [sp, #12]
 801345c:	2b00      	cmp	r3, #0
 801345e:	bfb8      	it	lt
 8013460:	f04f 33ff 	movlt.w	r3, #4294967295
 8013464:	3702      	adds	r7, #2
 8013466:	9305      	str	r3, [sp, #20]
 8013468:	4d2e      	ldr	r5, [pc, #184]	; (8013524 <_svfiprintf_r+0x1e0>)
 801346a:	7839      	ldrb	r1, [r7, #0]
 801346c:	2203      	movs	r2, #3
 801346e:	4628      	mov	r0, r5
 8013470:	f7ec feb6 	bl	80001e0 <memchr>
 8013474:	b138      	cbz	r0, 8013486 <_svfiprintf_r+0x142>
 8013476:	2340      	movs	r3, #64	; 0x40
 8013478:	1b40      	subs	r0, r0, r5
 801347a:	fa03 f000 	lsl.w	r0, r3, r0
 801347e:	9b04      	ldr	r3, [sp, #16]
 8013480:	4303      	orrs	r3, r0
 8013482:	3701      	adds	r7, #1
 8013484:	9304      	str	r3, [sp, #16]
 8013486:	7839      	ldrb	r1, [r7, #0]
 8013488:	4827      	ldr	r0, [pc, #156]	; (8013528 <_svfiprintf_r+0x1e4>)
 801348a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801348e:	2206      	movs	r2, #6
 8013490:	1c7e      	adds	r6, r7, #1
 8013492:	f7ec fea5 	bl	80001e0 <memchr>
 8013496:	2800      	cmp	r0, #0
 8013498:	d038      	beq.n	801350c <_svfiprintf_r+0x1c8>
 801349a:	4b24      	ldr	r3, [pc, #144]	; (801352c <_svfiprintf_r+0x1e8>)
 801349c:	bb13      	cbnz	r3, 80134e4 <_svfiprintf_r+0x1a0>
 801349e:	9b03      	ldr	r3, [sp, #12]
 80134a0:	3307      	adds	r3, #7
 80134a2:	f023 0307 	bic.w	r3, r3, #7
 80134a6:	3308      	adds	r3, #8
 80134a8:	9303      	str	r3, [sp, #12]
 80134aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ac:	444b      	add	r3, r9
 80134ae:	9309      	str	r3, [sp, #36]	; 0x24
 80134b0:	e76d      	b.n	801338e <_svfiprintf_r+0x4a>
 80134b2:	fb05 3202 	mla	r2, r5, r2, r3
 80134b6:	2001      	movs	r0, #1
 80134b8:	460f      	mov	r7, r1
 80134ba:	e7a6      	b.n	801340a <_svfiprintf_r+0xc6>
 80134bc:	2300      	movs	r3, #0
 80134be:	3701      	adds	r7, #1
 80134c0:	9305      	str	r3, [sp, #20]
 80134c2:	4619      	mov	r1, r3
 80134c4:	250a      	movs	r5, #10
 80134c6:	4638      	mov	r0, r7
 80134c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134cc:	3a30      	subs	r2, #48	; 0x30
 80134ce:	2a09      	cmp	r2, #9
 80134d0:	d903      	bls.n	80134da <_svfiprintf_r+0x196>
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d0c8      	beq.n	8013468 <_svfiprintf_r+0x124>
 80134d6:	9105      	str	r1, [sp, #20]
 80134d8:	e7c6      	b.n	8013468 <_svfiprintf_r+0x124>
 80134da:	fb05 2101 	mla	r1, r5, r1, r2
 80134de:	2301      	movs	r3, #1
 80134e0:	4607      	mov	r7, r0
 80134e2:	e7f0      	b.n	80134c6 <_svfiprintf_r+0x182>
 80134e4:	ab03      	add	r3, sp, #12
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	4622      	mov	r2, r4
 80134ea:	4b11      	ldr	r3, [pc, #68]	; (8013530 <_svfiprintf_r+0x1ec>)
 80134ec:	a904      	add	r1, sp, #16
 80134ee:	4640      	mov	r0, r8
 80134f0:	f3af 8000 	nop.w
 80134f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80134f8:	4681      	mov	r9, r0
 80134fa:	d1d6      	bne.n	80134aa <_svfiprintf_r+0x166>
 80134fc:	89a3      	ldrh	r3, [r4, #12]
 80134fe:	065b      	lsls	r3, r3, #25
 8013500:	f53f af35 	bmi.w	801336e <_svfiprintf_r+0x2a>
 8013504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013506:	b01d      	add	sp, #116	; 0x74
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801350c:	ab03      	add	r3, sp, #12
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	4622      	mov	r2, r4
 8013512:	4b07      	ldr	r3, [pc, #28]	; (8013530 <_svfiprintf_r+0x1ec>)
 8013514:	a904      	add	r1, sp, #16
 8013516:	4640      	mov	r0, r8
 8013518:	f000 f9c2 	bl	80138a0 <_printf_i>
 801351c:	e7ea      	b.n	80134f4 <_svfiprintf_r+0x1b0>
 801351e:	bf00      	nop
 8013520:	08014f6e 	.word	0x08014f6e
 8013524:	08014f74 	.word	0x08014f74
 8013528:	08014f78 	.word	0x08014f78
 801352c:	00000000 	.word	0x00000000
 8013530:	08013291 	.word	0x08013291

08013534 <__sfputc_r>:
 8013534:	6893      	ldr	r3, [r2, #8]
 8013536:	3b01      	subs	r3, #1
 8013538:	2b00      	cmp	r3, #0
 801353a:	b410      	push	{r4}
 801353c:	6093      	str	r3, [r2, #8]
 801353e:	da08      	bge.n	8013552 <__sfputc_r+0x1e>
 8013540:	6994      	ldr	r4, [r2, #24]
 8013542:	42a3      	cmp	r3, r4
 8013544:	db01      	blt.n	801354a <__sfputc_r+0x16>
 8013546:	290a      	cmp	r1, #10
 8013548:	d103      	bne.n	8013552 <__sfputc_r+0x1e>
 801354a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801354e:	f7ff bb3b 	b.w	8012bc8 <__swbuf_r>
 8013552:	6813      	ldr	r3, [r2, #0]
 8013554:	1c58      	adds	r0, r3, #1
 8013556:	6010      	str	r0, [r2, #0]
 8013558:	7019      	strb	r1, [r3, #0]
 801355a:	4608      	mov	r0, r1
 801355c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013560:	4770      	bx	lr

08013562 <__sfputs_r>:
 8013562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013564:	4606      	mov	r6, r0
 8013566:	460f      	mov	r7, r1
 8013568:	4614      	mov	r4, r2
 801356a:	18d5      	adds	r5, r2, r3
 801356c:	42ac      	cmp	r4, r5
 801356e:	d101      	bne.n	8013574 <__sfputs_r+0x12>
 8013570:	2000      	movs	r0, #0
 8013572:	e007      	b.n	8013584 <__sfputs_r+0x22>
 8013574:	463a      	mov	r2, r7
 8013576:	f814 1b01 	ldrb.w	r1, [r4], #1
 801357a:	4630      	mov	r0, r6
 801357c:	f7ff ffda 	bl	8013534 <__sfputc_r>
 8013580:	1c43      	adds	r3, r0, #1
 8013582:	d1f3      	bne.n	801356c <__sfputs_r+0xa>
 8013584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013588 <_vfiprintf_r>:
 8013588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358c:	460c      	mov	r4, r1
 801358e:	b09d      	sub	sp, #116	; 0x74
 8013590:	4617      	mov	r7, r2
 8013592:	461d      	mov	r5, r3
 8013594:	4606      	mov	r6, r0
 8013596:	b118      	cbz	r0, 80135a0 <_vfiprintf_r+0x18>
 8013598:	6983      	ldr	r3, [r0, #24]
 801359a:	b90b      	cbnz	r3, 80135a0 <_vfiprintf_r+0x18>
 801359c:	f7ff fcc4 	bl	8012f28 <__sinit>
 80135a0:	4b7c      	ldr	r3, [pc, #496]	; (8013794 <_vfiprintf_r+0x20c>)
 80135a2:	429c      	cmp	r4, r3
 80135a4:	d158      	bne.n	8013658 <_vfiprintf_r+0xd0>
 80135a6:	6874      	ldr	r4, [r6, #4]
 80135a8:	89a3      	ldrh	r3, [r4, #12]
 80135aa:	0718      	lsls	r0, r3, #28
 80135ac:	d55e      	bpl.n	801366c <_vfiprintf_r+0xe4>
 80135ae:	6923      	ldr	r3, [r4, #16]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d05b      	beq.n	801366c <_vfiprintf_r+0xe4>
 80135b4:	2300      	movs	r3, #0
 80135b6:	9309      	str	r3, [sp, #36]	; 0x24
 80135b8:	2320      	movs	r3, #32
 80135ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80135be:	2330      	movs	r3, #48	; 0x30
 80135c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80135c4:	9503      	str	r5, [sp, #12]
 80135c6:	f04f 0b01 	mov.w	fp, #1
 80135ca:	46b8      	mov	r8, r7
 80135cc:	4645      	mov	r5, r8
 80135ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80135d2:	b10b      	cbz	r3, 80135d8 <_vfiprintf_r+0x50>
 80135d4:	2b25      	cmp	r3, #37	; 0x25
 80135d6:	d154      	bne.n	8013682 <_vfiprintf_r+0xfa>
 80135d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80135dc:	d00b      	beq.n	80135f6 <_vfiprintf_r+0x6e>
 80135de:	4653      	mov	r3, sl
 80135e0:	463a      	mov	r2, r7
 80135e2:	4621      	mov	r1, r4
 80135e4:	4630      	mov	r0, r6
 80135e6:	f7ff ffbc 	bl	8013562 <__sfputs_r>
 80135ea:	3001      	adds	r0, #1
 80135ec:	f000 80c2 	beq.w	8013774 <_vfiprintf_r+0x1ec>
 80135f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135f2:	4453      	add	r3, sl
 80135f4:	9309      	str	r3, [sp, #36]	; 0x24
 80135f6:	f898 3000 	ldrb.w	r3, [r8]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f000 80ba 	beq.w	8013774 <_vfiprintf_r+0x1ec>
 8013600:	2300      	movs	r3, #0
 8013602:	f04f 32ff 	mov.w	r2, #4294967295
 8013606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801360a:	9304      	str	r3, [sp, #16]
 801360c:	9307      	str	r3, [sp, #28]
 801360e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013612:	931a      	str	r3, [sp, #104]	; 0x68
 8013614:	46a8      	mov	r8, r5
 8013616:	2205      	movs	r2, #5
 8013618:	f818 1b01 	ldrb.w	r1, [r8], #1
 801361c:	485e      	ldr	r0, [pc, #376]	; (8013798 <_vfiprintf_r+0x210>)
 801361e:	f7ec fddf 	bl	80001e0 <memchr>
 8013622:	9b04      	ldr	r3, [sp, #16]
 8013624:	bb78      	cbnz	r0, 8013686 <_vfiprintf_r+0xfe>
 8013626:	06d9      	lsls	r1, r3, #27
 8013628:	bf44      	itt	mi
 801362a:	2220      	movmi	r2, #32
 801362c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013630:	071a      	lsls	r2, r3, #28
 8013632:	bf44      	itt	mi
 8013634:	222b      	movmi	r2, #43	; 0x2b
 8013636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801363a:	782a      	ldrb	r2, [r5, #0]
 801363c:	2a2a      	cmp	r2, #42	; 0x2a
 801363e:	d02a      	beq.n	8013696 <_vfiprintf_r+0x10e>
 8013640:	9a07      	ldr	r2, [sp, #28]
 8013642:	46a8      	mov	r8, r5
 8013644:	2000      	movs	r0, #0
 8013646:	250a      	movs	r5, #10
 8013648:	4641      	mov	r1, r8
 801364a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801364e:	3b30      	subs	r3, #48	; 0x30
 8013650:	2b09      	cmp	r3, #9
 8013652:	d969      	bls.n	8013728 <_vfiprintf_r+0x1a0>
 8013654:	b360      	cbz	r0, 80136b0 <_vfiprintf_r+0x128>
 8013656:	e024      	b.n	80136a2 <_vfiprintf_r+0x11a>
 8013658:	4b50      	ldr	r3, [pc, #320]	; (801379c <_vfiprintf_r+0x214>)
 801365a:	429c      	cmp	r4, r3
 801365c:	d101      	bne.n	8013662 <_vfiprintf_r+0xda>
 801365e:	68b4      	ldr	r4, [r6, #8]
 8013660:	e7a2      	b.n	80135a8 <_vfiprintf_r+0x20>
 8013662:	4b4f      	ldr	r3, [pc, #316]	; (80137a0 <_vfiprintf_r+0x218>)
 8013664:	429c      	cmp	r4, r3
 8013666:	bf08      	it	eq
 8013668:	68f4      	ldreq	r4, [r6, #12]
 801366a:	e79d      	b.n	80135a8 <_vfiprintf_r+0x20>
 801366c:	4621      	mov	r1, r4
 801366e:	4630      	mov	r0, r6
 8013670:	f7ff fafc 	bl	8012c6c <__swsetup_r>
 8013674:	2800      	cmp	r0, #0
 8013676:	d09d      	beq.n	80135b4 <_vfiprintf_r+0x2c>
 8013678:	f04f 30ff 	mov.w	r0, #4294967295
 801367c:	b01d      	add	sp, #116	; 0x74
 801367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013682:	46a8      	mov	r8, r5
 8013684:	e7a2      	b.n	80135cc <_vfiprintf_r+0x44>
 8013686:	4a44      	ldr	r2, [pc, #272]	; (8013798 <_vfiprintf_r+0x210>)
 8013688:	1a80      	subs	r0, r0, r2
 801368a:	fa0b f000 	lsl.w	r0, fp, r0
 801368e:	4318      	orrs	r0, r3
 8013690:	9004      	str	r0, [sp, #16]
 8013692:	4645      	mov	r5, r8
 8013694:	e7be      	b.n	8013614 <_vfiprintf_r+0x8c>
 8013696:	9a03      	ldr	r2, [sp, #12]
 8013698:	1d11      	adds	r1, r2, #4
 801369a:	6812      	ldr	r2, [r2, #0]
 801369c:	9103      	str	r1, [sp, #12]
 801369e:	2a00      	cmp	r2, #0
 80136a0:	db01      	blt.n	80136a6 <_vfiprintf_r+0x11e>
 80136a2:	9207      	str	r2, [sp, #28]
 80136a4:	e004      	b.n	80136b0 <_vfiprintf_r+0x128>
 80136a6:	4252      	negs	r2, r2
 80136a8:	f043 0302 	orr.w	r3, r3, #2
 80136ac:	9207      	str	r2, [sp, #28]
 80136ae:	9304      	str	r3, [sp, #16]
 80136b0:	f898 3000 	ldrb.w	r3, [r8]
 80136b4:	2b2e      	cmp	r3, #46	; 0x2e
 80136b6:	d10e      	bne.n	80136d6 <_vfiprintf_r+0x14e>
 80136b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80136bc:	2b2a      	cmp	r3, #42	; 0x2a
 80136be:	d138      	bne.n	8013732 <_vfiprintf_r+0x1aa>
 80136c0:	9b03      	ldr	r3, [sp, #12]
 80136c2:	1d1a      	adds	r2, r3, #4
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	9203      	str	r2, [sp, #12]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	bfb8      	it	lt
 80136cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80136d0:	f108 0802 	add.w	r8, r8, #2
 80136d4:	9305      	str	r3, [sp, #20]
 80136d6:	4d33      	ldr	r5, [pc, #204]	; (80137a4 <_vfiprintf_r+0x21c>)
 80136d8:	f898 1000 	ldrb.w	r1, [r8]
 80136dc:	2203      	movs	r2, #3
 80136de:	4628      	mov	r0, r5
 80136e0:	f7ec fd7e 	bl	80001e0 <memchr>
 80136e4:	b140      	cbz	r0, 80136f8 <_vfiprintf_r+0x170>
 80136e6:	2340      	movs	r3, #64	; 0x40
 80136e8:	1b40      	subs	r0, r0, r5
 80136ea:	fa03 f000 	lsl.w	r0, r3, r0
 80136ee:	9b04      	ldr	r3, [sp, #16]
 80136f0:	4303      	orrs	r3, r0
 80136f2:	f108 0801 	add.w	r8, r8, #1
 80136f6:	9304      	str	r3, [sp, #16]
 80136f8:	f898 1000 	ldrb.w	r1, [r8]
 80136fc:	482a      	ldr	r0, [pc, #168]	; (80137a8 <_vfiprintf_r+0x220>)
 80136fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013702:	2206      	movs	r2, #6
 8013704:	f108 0701 	add.w	r7, r8, #1
 8013708:	f7ec fd6a 	bl	80001e0 <memchr>
 801370c:	2800      	cmp	r0, #0
 801370e:	d037      	beq.n	8013780 <_vfiprintf_r+0x1f8>
 8013710:	4b26      	ldr	r3, [pc, #152]	; (80137ac <_vfiprintf_r+0x224>)
 8013712:	bb1b      	cbnz	r3, 801375c <_vfiprintf_r+0x1d4>
 8013714:	9b03      	ldr	r3, [sp, #12]
 8013716:	3307      	adds	r3, #7
 8013718:	f023 0307 	bic.w	r3, r3, #7
 801371c:	3308      	adds	r3, #8
 801371e:	9303      	str	r3, [sp, #12]
 8013720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013722:	444b      	add	r3, r9
 8013724:	9309      	str	r3, [sp, #36]	; 0x24
 8013726:	e750      	b.n	80135ca <_vfiprintf_r+0x42>
 8013728:	fb05 3202 	mla	r2, r5, r2, r3
 801372c:	2001      	movs	r0, #1
 801372e:	4688      	mov	r8, r1
 8013730:	e78a      	b.n	8013648 <_vfiprintf_r+0xc0>
 8013732:	2300      	movs	r3, #0
 8013734:	f108 0801 	add.w	r8, r8, #1
 8013738:	9305      	str	r3, [sp, #20]
 801373a:	4619      	mov	r1, r3
 801373c:	250a      	movs	r5, #10
 801373e:	4640      	mov	r0, r8
 8013740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013744:	3a30      	subs	r2, #48	; 0x30
 8013746:	2a09      	cmp	r2, #9
 8013748:	d903      	bls.n	8013752 <_vfiprintf_r+0x1ca>
 801374a:	2b00      	cmp	r3, #0
 801374c:	d0c3      	beq.n	80136d6 <_vfiprintf_r+0x14e>
 801374e:	9105      	str	r1, [sp, #20]
 8013750:	e7c1      	b.n	80136d6 <_vfiprintf_r+0x14e>
 8013752:	fb05 2101 	mla	r1, r5, r1, r2
 8013756:	2301      	movs	r3, #1
 8013758:	4680      	mov	r8, r0
 801375a:	e7f0      	b.n	801373e <_vfiprintf_r+0x1b6>
 801375c:	ab03      	add	r3, sp, #12
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	4622      	mov	r2, r4
 8013762:	4b13      	ldr	r3, [pc, #76]	; (80137b0 <_vfiprintf_r+0x228>)
 8013764:	a904      	add	r1, sp, #16
 8013766:	4630      	mov	r0, r6
 8013768:	f3af 8000 	nop.w
 801376c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013770:	4681      	mov	r9, r0
 8013772:	d1d5      	bne.n	8013720 <_vfiprintf_r+0x198>
 8013774:	89a3      	ldrh	r3, [r4, #12]
 8013776:	065b      	lsls	r3, r3, #25
 8013778:	f53f af7e 	bmi.w	8013678 <_vfiprintf_r+0xf0>
 801377c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801377e:	e77d      	b.n	801367c <_vfiprintf_r+0xf4>
 8013780:	ab03      	add	r3, sp, #12
 8013782:	9300      	str	r3, [sp, #0]
 8013784:	4622      	mov	r2, r4
 8013786:	4b0a      	ldr	r3, [pc, #40]	; (80137b0 <_vfiprintf_r+0x228>)
 8013788:	a904      	add	r1, sp, #16
 801378a:	4630      	mov	r0, r6
 801378c:	f000 f888 	bl	80138a0 <_printf_i>
 8013790:	e7ec      	b.n	801376c <_vfiprintf_r+0x1e4>
 8013792:	bf00      	nop
 8013794:	08014f24 	.word	0x08014f24
 8013798:	08014f6e 	.word	0x08014f6e
 801379c:	08014f44 	.word	0x08014f44
 80137a0:	08014f04 	.word	0x08014f04
 80137a4:	08014f74 	.word	0x08014f74
 80137a8:	08014f78 	.word	0x08014f78
 80137ac:	00000000 	.word	0x00000000
 80137b0:	08013563 	.word	0x08013563

080137b4 <_printf_common>:
 80137b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137b8:	4691      	mov	r9, r2
 80137ba:	461f      	mov	r7, r3
 80137bc:	688a      	ldr	r2, [r1, #8]
 80137be:	690b      	ldr	r3, [r1, #16]
 80137c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80137c4:	4293      	cmp	r3, r2
 80137c6:	bfb8      	it	lt
 80137c8:	4613      	movlt	r3, r2
 80137ca:	f8c9 3000 	str.w	r3, [r9]
 80137ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80137d2:	4606      	mov	r6, r0
 80137d4:	460c      	mov	r4, r1
 80137d6:	b112      	cbz	r2, 80137de <_printf_common+0x2a>
 80137d8:	3301      	adds	r3, #1
 80137da:	f8c9 3000 	str.w	r3, [r9]
 80137de:	6823      	ldr	r3, [r4, #0]
 80137e0:	0699      	lsls	r1, r3, #26
 80137e2:	bf42      	ittt	mi
 80137e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80137e8:	3302      	addmi	r3, #2
 80137ea:	f8c9 3000 	strmi.w	r3, [r9]
 80137ee:	6825      	ldr	r5, [r4, #0]
 80137f0:	f015 0506 	ands.w	r5, r5, #6
 80137f4:	d107      	bne.n	8013806 <_printf_common+0x52>
 80137f6:	f104 0a19 	add.w	sl, r4, #25
 80137fa:	68e3      	ldr	r3, [r4, #12]
 80137fc:	f8d9 2000 	ldr.w	r2, [r9]
 8013800:	1a9b      	subs	r3, r3, r2
 8013802:	42ab      	cmp	r3, r5
 8013804:	dc28      	bgt.n	8013858 <_printf_common+0xa4>
 8013806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801380a:	6822      	ldr	r2, [r4, #0]
 801380c:	3300      	adds	r3, #0
 801380e:	bf18      	it	ne
 8013810:	2301      	movne	r3, #1
 8013812:	0692      	lsls	r2, r2, #26
 8013814:	d42d      	bmi.n	8013872 <_printf_common+0xbe>
 8013816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801381a:	4639      	mov	r1, r7
 801381c:	4630      	mov	r0, r6
 801381e:	47c0      	blx	r8
 8013820:	3001      	adds	r0, #1
 8013822:	d020      	beq.n	8013866 <_printf_common+0xb2>
 8013824:	6823      	ldr	r3, [r4, #0]
 8013826:	68e5      	ldr	r5, [r4, #12]
 8013828:	f8d9 2000 	ldr.w	r2, [r9]
 801382c:	f003 0306 	and.w	r3, r3, #6
 8013830:	2b04      	cmp	r3, #4
 8013832:	bf08      	it	eq
 8013834:	1aad      	subeq	r5, r5, r2
 8013836:	68a3      	ldr	r3, [r4, #8]
 8013838:	6922      	ldr	r2, [r4, #16]
 801383a:	bf0c      	ite	eq
 801383c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013840:	2500      	movne	r5, #0
 8013842:	4293      	cmp	r3, r2
 8013844:	bfc4      	itt	gt
 8013846:	1a9b      	subgt	r3, r3, r2
 8013848:	18ed      	addgt	r5, r5, r3
 801384a:	f04f 0900 	mov.w	r9, #0
 801384e:	341a      	adds	r4, #26
 8013850:	454d      	cmp	r5, r9
 8013852:	d11a      	bne.n	801388a <_printf_common+0xd6>
 8013854:	2000      	movs	r0, #0
 8013856:	e008      	b.n	801386a <_printf_common+0xb6>
 8013858:	2301      	movs	r3, #1
 801385a:	4652      	mov	r2, sl
 801385c:	4639      	mov	r1, r7
 801385e:	4630      	mov	r0, r6
 8013860:	47c0      	blx	r8
 8013862:	3001      	adds	r0, #1
 8013864:	d103      	bne.n	801386e <_printf_common+0xba>
 8013866:	f04f 30ff 	mov.w	r0, #4294967295
 801386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386e:	3501      	adds	r5, #1
 8013870:	e7c3      	b.n	80137fa <_printf_common+0x46>
 8013872:	18e1      	adds	r1, r4, r3
 8013874:	1c5a      	adds	r2, r3, #1
 8013876:	2030      	movs	r0, #48	; 0x30
 8013878:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801387c:	4422      	add	r2, r4
 801387e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013886:	3302      	adds	r3, #2
 8013888:	e7c5      	b.n	8013816 <_printf_common+0x62>
 801388a:	2301      	movs	r3, #1
 801388c:	4622      	mov	r2, r4
 801388e:	4639      	mov	r1, r7
 8013890:	4630      	mov	r0, r6
 8013892:	47c0      	blx	r8
 8013894:	3001      	adds	r0, #1
 8013896:	d0e6      	beq.n	8013866 <_printf_common+0xb2>
 8013898:	f109 0901 	add.w	r9, r9, #1
 801389c:	e7d8      	b.n	8013850 <_printf_common+0x9c>
	...

080138a0 <_printf_i>:
 80138a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80138a8:	460c      	mov	r4, r1
 80138aa:	7e09      	ldrb	r1, [r1, #24]
 80138ac:	b085      	sub	sp, #20
 80138ae:	296e      	cmp	r1, #110	; 0x6e
 80138b0:	4617      	mov	r7, r2
 80138b2:	4606      	mov	r6, r0
 80138b4:	4698      	mov	r8, r3
 80138b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138b8:	f000 80b3 	beq.w	8013a22 <_printf_i+0x182>
 80138bc:	d822      	bhi.n	8013904 <_printf_i+0x64>
 80138be:	2963      	cmp	r1, #99	; 0x63
 80138c0:	d036      	beq.n	8013930 <_printf_i+0x90>
 80138c2:	d80a      	bhi.n	80138da <_printf_i+0x3a>
 80138c4:	2900      	cmp	r1, #0
 80138c6:	f000 80b9 	beq.w	8013a3c <_printf_i+0x19c>
 80138ca:	2958      	cmp	r1, #88	; 0x58
 80138cc:	f000 8083 	beq.w	80139d6 <_printf_i+0x136>
 80138d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80138d8:	e032      	b.n	8013940 <_printf_i+0xa0>
 80138da:	2964      	cmp	r1, #100	; 0x64
 80138dc:	d001      	beq.n	80138e2 <_printf_i+0x42>
 80138de:	2969      	cmp	r1, #105	; 0x69
 80138e0:	d1f6      	bne.n	80138d0 <_printf_i+0x30>
 80138e2:	6820      	ldr	r0, [r4, #0]
 80138e4:	6813      	ldr	r3, [r2, #0]
 80138e6:	0605      	lsls	r5, r0, #24
 80138e8:	f103 0104 	add.w	r1, r3, #4
 80138ec:	d52a      	bpl.n	8013944 <_printf_i+0xa4>
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	6011      	str	r1, [r2, #0]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	da03      	bge.n	80138fe <_printf_i+0x5e>
 80138f6:	222d      	movs	r2, #45	; 0x2d
 80138f8:	425b      	negs	r3, r3
 80138fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80138fe:	486f      	ldr	r0, [pc, #444]	; (8013abc <_printf_i+0x21c>)
 8013900:	220a      	movs	r2, #10
 8013902:	e039      	b.n	8013978 <_printf_i+0xd8>
 8013904:	2973      	cmp	r1, #115	; 0x73
 8013906:	f000 809d 	beq.w	8013a44 <_printf_i+0x1a4>
 801390a:	d808      	bhi.n	801391e <_printf_i+0x7e>
 801390c:	296f      	cmp	r1, #111	; 0x6f
 801390e:	d020      	beq.n	8013952 <_printf_i+0xb2>
 8013910:	2970      	cmp	r1, #112	; 0x70
 8013912:	d1dd      	bne.n	80138d0 <_printf_i+0x30>
 8013914:	6823      	ldr	r3, [r4, #0]
 8013916:	f043 0320 	orr.w	r3, r3, #32
 801391a:	6023      	str	r3, [r4, #0]
 801391c:	e003      	b.n	8013926 <_printf_i+0x86>
 801391e:	2975      	cmp	r1, #117	; 0x75
 8013920:	d017      	beq.n	8013952 <_printf_i+0xb2>
 8013922:	2978      	cmp	r1, #120	; 0x78
 8013924:	d1d4      	bne.n	80138d0 <_printf_i+0x30>
 8013926:	2378      	movs	r3, #120	; 0x78
 8013928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801392c:	4864      	ldr	r0, [pc, #400]	; (8013ac0 <_printf_i+0x220>)
 801392e:	e055      	b.n	80139dc <_printf_i+0x13c>
 8013930:	6813      	ldr	r3, [r2, #0]
 8013932:	1d19      	adds	r1, r3, #4
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	6011      	str	r1, [r2, #0]
 8013938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013940:	2301      	movs	r3, #1
 8013942:	e08c      	b.n	8013a5e <_printf_i+0x1be>
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	6011      	str	r1, [r2, #0]
 8013948:	f010 0f40 	tst.w	r0, #64	; 0x40
 801394c:	bf18      	it	ne
 801394e:	b21b      	sxthne	r3, r3
 8013950:	e7cf      	b.n	80138f2 <_printf_i+0x52>
 8013952:	6813      	ldr	r3, [r2, #0]
 8013954:	6825      	ldr	r5, [r4, #0]
 8013956:	1d18      	adds	r0, r3, #4
 8013958:	6010      	str	r0, [r2, #0]
 801395a:	0628      	lsls	r0, r5, #24
 801395c:	d501      	bpl.n	8013962 <_printf_i+0xc2>
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	e002      	b.n	8013968 <_printf_i+0xc8>
 8013962:	0668      	lsls	r0, r5, #25
 8013964:	d5fb      	bpl.n	801395e <_printf_i+0xbe>
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	4854      	ldr	r0, [pc, #336]	; (8013abc <_printf_i+0x21c>)
 801396a:	296f      	cmp	r1, #111	; 0x6f
 801396c:	bf14      	ite	ne
 801396e:	220a      	movne	r2, #10
 8013970:	2208      	moveq	r2, #8
 8013972:	2100      	movs	r1, #0
 8013974:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013978:	6865      	ldr	r5, [r4, #4]
 801397a:	60a5      	str	r5, [r4, #8]
 801397c:	2d00      	cmp	r5, #0
 801397e:	f2c0 8095 	blt.w	8013aac <_printf_i+0x20c>
 8013982:	6821      	ldr	r1, [r4, #0]
 8013984:	f021 0104 	bic.w	r1, r1, #4
 8013988:	6021      	str	r1, [r4, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d13d      	bne.n	8013a0a <_printf_i+0x16a>
 801398e:	2d00      	cmp	r5, #0
 8013990:	f040 808e 	bne.w	8013ab0 <_printf_i+0x210>
 8013994:	4665      	mov	r5, ip
 8013996:	2a08      	cmp	r2, #8
 8013998:	d10b      	bne.n	80139b2 <_printf_i+0x112>
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	07db      	lsls	r3, r3, #31
 801399e:	d508      	bpl.n	80139b2 <_printf_i+0x112>
 80139a0:	6923      	ldr	r3, [r4, #16]
 80139a2:	6862      	ldr	r2, [r4, #4]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	bfde      	ittt	le
 80139a8:	2330      	movle	r3, #48	; 0x30
 80139aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80139ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80139b2:	ebac 0305 	sub.w	r3, ip, r5
 80139b6:	6123      	str	r3, [r4, #16]
 80139b8:	f8cd 8000 	str.w	r8, [sp]
 80139bc:	463b      	mov	r3, r7
 80139be:	aa03      	add	r2, sp, #12
 80139c0:	4621      	mov	r1, r4
 80139c2:	4630      	mov	r0, r6
 80139c4:	f7ff fef6 	bl	80137b4 <_printf_common>
 80139c8:	3001      	adds	r0, #1
 80139ca:	d14d      	bne.n	8013a68 <_printf_i+0x1c8>
 80139cc:	f04f 30ff 	mov.w	r0, #4294967295
 80139d0:	b005      	add	sp, #20
 80139d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139d6:	4839      	ldr	r0, [pc, #228]	; (8013abc <_printf_i+0x21c>)
 80139d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80139dc:	6813      	ldr	r3, [r2, #0]
 80139de:	6821      	ldr	r1, [r4, #0]
 80139e0:	1d1d      	adds	r5, r3, #4
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	6015      	str	r5, [r2, #0]
 80139e6:	060a      	lsls	r2, r1, #24
 80139e8:	d50b      	bpl.n	8013a02 <_printf_i+0x162>
 80139ea:	07ca      	lsls	r2, r1, #31
 80139ec:	bf44      	itt	mi
 80139ee:	f041 0120 	orrmi.w	r1, r1, #32
 80139f2:	6021      	strmi	r1, [r4, #0]
 80139f4:	b91b      	cbnz	r3, 80139fe <_printf_i+0x15e>
 80139f6:	6822      	ldr	r2, [r4, #0]
 80139f8:	f022 0220 	bic.w	r2, r2, #32
 80139fc:	6022      	str	r2, [r4, #0]
 80139fe:	2210      	movs	r2, #16
 8013a00:	e7b7      	b.n	8013972 <_printf_i+0xd2>
 8013a02:	064d      	lsls	r5, r1, #25
 8013a04:	bf48      	it	mi
 8013a06:	b29b      	uxthmi	r3, r3
 8013a08:	e7ef      	b.n	80139ea <_printf_i+0x14a>
 8013a0a:	4665      	mov	r5, ip
 8013a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a10:	fb02 3311 	mls	r3, r2, r1, r3
 8013a14:	5cc3      	ldrb	r3, [r0, r3]
 8013a16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013a1a:	460b      	mov	r3, r1
 8013a1c:	2900      	cmp	r1, #0
 8013a1e:	d1f5      	bne.n	8013a0c <_printf_i+0x16c>
 8013a20:	e7b9      	b.n	8013996 <_printf_i+0xf6>
 8013a22:	6813      	ldr	r3, [r2, #0]
 8013a24:	6825      	ldr	r5, [r4, #0]
 8013a26:	6961      	ldr	r1, [r4, #20]
 8013a28:	1d18      	adds	r0, r3, #4
 8013a2a:	6010      	str	r0, [r2, #0]
 8013a2c:	0628      	lsls	r0, r5, #24
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	d501      	bpl.n	8013a36 <_printf_i+0x196>
 8013a32:	6019      	str	r1, [r3, #0]
 8013a34:	e002      	b.n	8013a3c <_printf_i+0x19c>
 8013a36:	066a      	lsls	r2, r5, #25
 8013a38:	d5fb      	bpl.n	8013a32 <_printf_i+0x192>
 8013a3a:	8019      	strh	r1, [r3, #0]
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	6123      	str	r3, [r4, #16]
 8013a40:	4665      	mov	r5, ip
 8013a42:	e7b9      	b.n	80139b8 <_printf_i+0x118>
 8013a44:	6813      	ldr	r3, [r2, #0]
 8013a46:	1d19      	adds	r1, r3, #4
 8013a48:	6011      	str	r1, [r2, #0]
 8013a4a:	681d      	ldr	r5, [r3, #0]
 8013a4c:	6862      	ldr	r2, [r4, #4]
 8013a4e:	2100      	movs	r1, #0
 8013a50:	4628      	mov	r0, r5
 8013a52:	f7ec fbc5 	bl	80001e0 <memchr>
 8013a56:	b108      	cbz	r0, 8013a5c <_printf_i+0x1bc>
 8013a58:	1b40      	subs	r0, r0, r5
 8013a5a:	6060      	str	r0, [r4, #4]
 8013a5c:	6863      	ldr	r3, [r4, #4]
 8013a5e:	6123      	str	r3, [r4, #16]
 8013a60:	2300      	movs	r3, #0
 8013a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a66:	e7a7      	b.n	80139b8 <_printf_i+0x118>
 8013a68:	6923      	ldr	r3, [r4, #16]
 8013a6a:	462a      	mov	r2, r5
 8013a6c:	4639      	mov	r1, r7
 8013a6e:	4630      	mov	r0, r6
 8013a70:	47c0      	blx	r8
 8013a72:	3001      	adds	r0, #1
 8013a74:	d0aa      	beq.n	80139cc <_printf_i+0x12c>
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	079b      	lsls	r3, r3, #30
 8013a7a:	d413      	bmi.n	8013aa4 <_printf_i+0x204>
 8013a7c:	68e0      	ldr	r0, [r4, #12]
 8013a7e:	9b03      	ldr	r3, [sp, #12]
 8013a80:	4298      	cmp	r0, r3
 8013a82:	bfb8      	it	lt
 8013a84:	4618      	movlt	r0, r3
 8013a86:	e7a3      	b.n	80139d0 <_printf_i+0x130>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	464a      	mov	r2, r9
 8013a8c:	4639      	mov	r1, r7
 8013a8e:	4630      	mov	r0, r6
 8013a90:	47c0      	blx	r8
 8013a92:	3001      	adds	r0, #1
 8013a94:	d09a      	beq.n	80139cc <_printf_i+0x12c>
 8013a96:	3501      	adds	r5, #1
 8013a98:	68e3      	ldr	r3, [r4, #12]
 8013a9a:	9a03      	ldr	r2, [sp, #12]
 8013a9c:	1a9b      	subs	r3, r3, r2
 8013a9e:	42ab      	cmp	r3, r5
 8013aa0:	dcf2      	bgt.n	8013a88 <_printf_i+0x1e8>
 8013aa2:	e7eb      	b.n	8013a7c <_printf_i+0x1dc>
 8013aa4:	2500      	movs	r5, #0
 8013aa6:	f104 0919 	add.w	r9, r4, #25
 8013aaa:	e7f5      	b.n	8013a98 <_printf_i+0x1f8>
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d1ac      	bne.n	8013a0a <_printf_i+0x16a>
 8013ab0:	7803      	ldrb	r3, [r0, #0]
 8013ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ab6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013aba:	e76c      	b.n	8013996 <_printf_i+0xf6>
 8013abc:	08014f7f 	.word	0x08014f7f
 8013ac0:	08014f90 	.word	0x08014f90

08013ac4 <_sbrk_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	4c06      	ldr	r4, [pc, #24]	; (8013ae0 <_sbrk_r+0x1c>)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	4605      	mov	r5, r0
 8013acc:	4608      	mov	r0, r1
 8013ace:	6023      	str	r3, [r4, #0]
 8013ad0:	f7ef fe00 	bl	80036d4 <_sbrk>
 8013ad4:	1c43      	adds	r3, r0, #1
 8013ad6:	d102      	bne.n	8013ade <_sbrk_r+0x1a>
 8013ad8:	6823      	ldr	r3, [r4, #0]
 8013ada:	b103      	cbz	r3, 8013ade <_sbrk_r+0x1a>
 8013adc:	602b      	str	r3, [r5, #0]
 8013ade:	bd38      	pop	{r3, r4, r5, pc}
 8013ae0:	20004140 	.word	0x20004140

08013ae4 <__sread>:
 8013ae4:	b510      	push	{r4, lr}
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aec:	f000 f8e2 	bl	8013cb4 <_read_r>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	bfab      	itete	ge
 8013af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013af6:	89a3      	ldrhlt	r3, [r4, #12]
 8013af8:	181b      	addge	r3, r3, r0
 8013afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013afe:	bfac      	ite	ge
 8013b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b02:	81a3      	strhlt	r3, [r4, #12]
 8013b04:	bd10      	pop	{r4, pc}

08013b06 <__swrite>:
 8013b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0a:	461f      	mov	r7, r3
 8013b0c:	898b      	ldrh	r3, [r1, #12]
 8013b0e:	05db      	lsls	r3, r3, #23
 8013b10:	4605      	mov	r5, r0
 8013b12:	460c      	mov	r4, r1
 8013b14:	4616      	mov	r6, r2
 8013b16:	d505      	bpl.n	8013b24 <__swrite+0x1e>
 8013b18:	2302      	movs	r3, #2
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b20:	f000 f874 	bl	8013c0c <_lseek_r>
 8013b24:	89a3      	ldrh	r3, [r4, #12]
 8013b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b2e:	81a3      	strh	r3, [r4, #12]
 8013b30:	4632      	mov	r2, r6
 8013b32:	463b      	mov	r3, r7
 8013b34:	4628      	mov	r0, r5
 8013b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3a:	f000 b823 	b.w	8013b84 <_write_r>

08013b3e <__sseek>:
 8013b3e:	b510      	push	{r4, lr}
 8013b40:	460c      	mov	r4, r1
 8013b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b46:	f000 f861 	bl	8013c0c <_lseek_r>
 8013b4a:	1c43      	adds	r3, r0, #1
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	bf15      	itete	ne
 8013b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b5a:	81a3      	strheq	r3, [r4, #12]
 8013b5c:	bf18      	it	ne
 8013b5e:	81a3      	strhne	r3, [r4, #12]
 8013b60:	bd10      	pop	{r4, pc}

08013b62 <__sclose>:
 8013b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b66:	f000 b81f 	b.w	8013ba8 <_close_r>

08013b6a <__ascii_wctomb>:
 8013b6a:	b149      	cbz	r1, 8013b80 <__ascii_wctomb+0x16>
 8013b6c:	2aff      	cmp	r2, #255	; 0xff
 8013b6e:	bf85      	ittet	hi
 8013b70:	238a      	movhi	r3, #138	; 0x8a
 8013b72:	6003      	strhi	r3, [r0, #0]
 8013b74:	700a      	strbls	r2, [r1, #0]
 8013b76:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b7a:	bf98      	it	ls
 8013b7c:	2001      	movls	r0, #1
 8013b7e:	4770      	bx	lr
 8013b80:	4608      	mov	r0, r1
 8013b82:	4770      	bx	lr

08013b84 <_write_r>:
 8013b84:	b538      	push	{r3, r4, r5, lr}
 8013b86:	4c07      	ldr	r4, [pc, #28]	; (8013ba4 <_write_r+0x20>)
 8013b88:	4605      	mov	r5, r0
 8013b8a:	4608      	mov	r0, r1
 8013b8c:	4611      	mov	r1, r2
 8013b8e:	2200      	movs	r2, #0
 8013b90:	6022      	str	r2, [r4, #0]
 8013b92:	461a      	mov	r2, r3
 8013b94:	f7ef fd4e 	bl	8003634 <_write>
 8013b98:	1c43      	adds	r3, r0, #1
 8013b9a:	d102      	bne.n	8013ba2 <_write_r+0x1e>
 8013b9c:	6823      	ldr	r3, [r4, #0]
 8013b9e:	b103      	cbz	r3, 8013ba2 <_write_r+0x1e>
 8013ba0:	602b      	str	r3, [r5, #0]
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	20004140 	.word	0x20004140

08013ba8 <_close_r>:
 8013ba8:	b538      	push	{r3, r4, r5, lr}
 8013baa:	4c06      	ldr	r4, [pc, #24]	; (8013bc4 <_close_r+0x1c>)
 8013bac:	2300      	movs	r3, #0
 8013bae:	4605      	mov	r5, r0
 8013bb0:	4608      	mov	r0, r1
 8013bb2:	6023      	str	r3, [r4, #0]
 8013bb4:	f7ef fd5a 	bl	800366c <_close>
 8013bb8:	1c43      	adds	r3, r0, #1
 8013bba:	d102      	bne.n	8013bc2 <_close_r+0x1a>
 8013bbc:	6823      	ldr	r3, [r4, #0]
 8013bbe:	b103      	cbz	r3, 8013bc2 <_close_r+0x1a>
 8013bc0:	602b      	str	r3, [r5, #0]
 8013bc2:	bd38      	pop	{r3, r4, r5, pc}
 8013bc4:	20004140 	.word	0x20004140

08013bc8 <_fstat_r>:
 8013bc8:	b538      	push	{r3, r4, r5, lr}
 8013bca:	4c07      	ldr	r4, [pc, #28]	; (8013be8 <_fstat_r+0x20>)
 8013bcc:	2300      	movs	r3, #0
 8013bce:	4605      	mov	r5, r0
 8013bd0:	4608      	mov	r0, r1
 8013bd2:	4611      	mov	r1, r2
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	f7ef fd55 	bl	8003684 <_fstat>
 8013bda:	1c43      	adds	r3, r0, #1
 8013bdc:	d102      	bne.n	8013be4 <_fstat_r+0x1c>
 8013bde:	6823      	ldr	r3, [r4, #0]
 8013be0:	b103      	cbz	r3, 8013be4 <_fstat_r+0x1c>
 8013be2:	602b      	str	r3, [r5, #0]
 8013be4:	bd38      	pop	{r3, r4, r5, pc}
 8013be6:	bf00      	nop
 8013be8:	20004140 	.word	0x20004140

08013bec <_isatty_r>:
 8013bec:	b538      	push	{r3, r4, r5, lr}
 8013bee:	4c06      	ldr	r4, [pc, #24]	; (8013c08 <_isatty_r+0x1c>)
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	4608      	mov	r0, r1
 8013bf6:	6023      	str	r3, [r4, #0]
 8013bf8:	f7ef fd54 	bl	80036a4 <_isatty>
 8013bfc:	1c43      	adds	r3, r0, #1
 8013bfe:	d102      	bne.n	8013c06 <_isatty_r+0x1a>
 8013c00:	6823      	ldr	r3, [r4, #0]
 8013c02:	b103      	cbz	r3, 8013c06 <_isatty_r+0x1a>
 8013c04:	602b      	str	r3, [r5, #0]
 8013c06:	bd38      	pop	{r3, r4, r5, pc}
 8013c08:	20004140 	.word	0x20004140

08013c0c <_lseek_r>:
 8013c0c:	b538      	push	{r3, r4, r5, lr}
 8013c0e:	4c07      	ldr	r4, [pc, #28]	; (8013c2c <_lseek_r+0x20>)
 8013c10:	4605      	mov	r5, r0
 8013c12:	4608      	mov	r0, r1
 8013c14:	4611      	mov	r1, r2
 8013c16:	2200      	movs	r2, #0
 8013c18:	6022      	str	r2, [r4, #0]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	f7ef fd4d 	bl	80036ba <_lseek>
 8013c20:	1c43      	adds	r3, r0, #1
 8013c22:	d102      	bne.n	8013c2a <_lseek_r+0x1e>
 8013c24:	6823      	ldr	r3, [r4, #0]
 8013c26:	b103      	cbz	r3, 8013c2a <_lseek_r+0x1e>
 8013c28:	602b      	str	r3, [r5, #0]
 8013c2a:	bd38      	pop	{r3, r4, r5, pc}
 8013c2c:	20004140 	.word	0x20004140

08013c30 <memmove>:
 8013c30:	4288      	cmp	r0, r1
 8013c32:	b510      	push	{r4, lr}
 8013c34:	eb01 0302 	add.w	r3, r1, r2
 8013c38:	d807      	bhi.n	8013c4a <memmove+0x1a>
 8013c3a:	1e42      	subs	r2, r0, #1
 8013c3c:	4299      	cmp	r1, r3
 8013c3e:	d00a      	beq.n	8013c56 <memmove+0x26>
 8013c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013c48:	e7f8      	b.n	8013c3c <memmove+0xc>
 8013c4a:	4283      	cmp	r3, r0
 8013c4c:	d9f5      	bls.n	8013c3a <memmove+0xa>
 8013c4e:	1881      	adds	r1, r0, r2
 8013c50:	1ad2      	subs	r2, r2, r3
 8013c52:	42d3      	cmn	r3, r2
 8013c54:	d100      	bne.n	8013c58 <memmove+0x28>
 8013c56:	bd10      	pop	{r4, pc}
 8013c58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013c60:	e7f7      	b.n	8013c52 <memmove+0x22>

08013c62 <__malloc_lock>:
 8013c62:	4770      	bx	lr

08013c64 <__malloc_unlock>:
 8013c64:	4770      	bx	lr

08013c66 <_realloc_r>:
 8013c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c68:	4607      	mov	r7, r0
 8013c6a:	4614      	mov	r4, r2
 8013c6c:	460e      	mov	r6, r1
 8013c6e:	b921      	cbnz	r1, 8013c7a <_realloc_r+0x14>
 8013c70:	4611      	mov	r1, r2
 8013c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c76:	f7ff bab1 	b.w	80131dc <_malloc_r>
 8013c7a:	b922      	cbnz	r2, 8013c86 <_realloc_r+0x20>
 8013c7c:	f7ff fa60 	bl	8013140 <_free_r>
 8013c80:	4625      	mov	r5, r4
 8013c82:	4628      	mov	r0, r5
 8013c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c86:	f000 f827 	bl	8013cd8 <_malloc_usable_size_r>
 8013c8a:	42a0      	cmp	r0, r4
 8013c8c:	d20f      	bcs.n	8013cae <_realloc_r+0x48>
 8013c8e:	4621      	mov	r1, r4
 8013c90:	4638      	mov	r0, r7
 8013c92:	f7ff faa3 	bl	80131dc <_malloc_r>
 8013c96:	4605      	mov	r5, r0
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d0f2      	beq.n	8013c82 <_realloc_r+0x1c>
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	f7fe fd91 	bl	80127c6 <memcpy>
 8013ca4:	4631      	mov	r1, r6
 8013ca6:	4638      	mov	r0, r7
 8013ca8:	f7ff fa4a 	bl	8013140 <_free_r>
 8013cac:	e7e9      	b.n	8013c82 <_realloc_r+0x1c>
 8013cae:	4635      	mov	r5, r6
 8013cb0:	e7e7      	b.n	8013c82 <_realloc_r+0x1c>
	...

08013cb4 <_read_r>:
 8013cb4:	b538      	push	{r3, r4, r5, lr}
 8013cb6:	4c07      	ldr	r4, [pc, #28]	; (8013cd4 <_read_r+0x20>)
 8013cb8:	4605      	mov	r5, r0
 8013cba:	4608      	mov	r0, r1
 8013cbc:	4611      	mov	r1, r2
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	6022      	str	r2, [r4, #0]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	f7ef fc99 	bl	80035fa <_read>
 8013cc8:	1c43      	adds	r3, r0, #1
 8013cca:	d102      	bne.n	8013cd2 <_read_r+0x1e>
 8013ccc:	6823      	ldr	r3, [r4, #0]
 8013cce:	b103      	cbz	r3, 8013cd2 <_read_r+0x1e>
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	20004140 	.word	0x20004140

08013cd8 <_malloc_usable_size_r>:
 8013cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cdc:	1f18      	subs	r0, r3, #4
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	bfbc      	itt	lt
 8013ce2:	580b      	ldrlt	r3, [r1, r0]
 8013ce4:	18c0      	addlt	r0, r0, r3
 8013ce6:	4770      	bx	lr

08013ce8 <trunc>:
 8013ce8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8013cec:	ec5c bb10 	vmov	fp, ip, d0
 8013cf0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8013cf4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8013cf8:	2913      	cmp	r1, #19
 8013cfa:	4664      	mov	r4, ip
 8013cfc:	dc11      	bgt.n	8013d22 <trunc+0x3a>
 8013cfe:	2900      	cmp	r1, #0
 8013d00:	bfa7      	ittee	ge
 8013d02:	4b15      	ldrge	r3, [pc, #84]	; (8013d58 <trunc+0x70>)
 8013d04:	fa43 f101 	asrge.w	r1, r3, r1
 8013d08:	2200      	movlt	r2, #0
 8013d0a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8013d0e:	bfa4      	itt	ge
 8013d10:	2200      	movge	r2, #0
 8013d12:	ea2c 0301 	bicge.w	r3, ip, r1
 8013d16:	4693      	mov	fp, r2
 8013d18:	469c      	mov	ip, r3
 8013d1a:	ec4c bb10 	vmov	d0, fp, ip
 8013d1e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8013d22:	2933      	cmp	r1, #51	; 0x33
 8013d24:	dd0d      	ble.n	8013d42 <trunc+0x5a>
 8013d26:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013d2a:	d1f6      	bne.n	8013d1a <trunc+0x32>
 8013d2c:	4663      	mov	r3, ip
 8013d2e:	ee10 2a10 	vmov	r2, s0
 8013d32:	ee10 0a10 	vmov	r0, s0
 8013d36:	4621      	mov	r1, r4
 8013d38:	f7ec faa8 	bl	800028c <__adddf3>
 8013d3c:	4683      	mov	fp, r0
 8013d3e:	468c      	mov	ip, r1
 8013d40:	e7eb      	b.n	8013d1a <trunc+0x32>
 8013d42:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8013d46:	f04f 33ff 	mov.w	r3, #4294967295
 8013d4a:	fa23 f000 	lsr.w	r0, r3, r0
 8013d4e:	ea2b 0600 	bic.w	r6, fp, r0
 8013d52:	46b3      	mov	fp, r6
 8013d54:	46a4      	mov	ip, r4
 8013d56:	e7e0      	b.n	8013d1a <trunc+0x32>
 8013d58:	000fffff 	.word	0x000fffff

08013d5c <_init>:
 8013d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d5e:	bf00      	nop
 8013d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d62:	bc08      	pop	{r3}
 8013d64:	469e      	mov	lr, r3
 8013d66:	4770      	bx	lr

08013d68 <_fini>:
 8013d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d6a:	bf00      	nop
 8013d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d6e:	bc08      	pop	{r3}
 8013d70:	469e      	mov	lr, r3
 8013d72:	4770      	bx	lr
