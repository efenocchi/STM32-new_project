
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd4  0800d134  0800d134  0001d134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de08  0800de08  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800de08  0800de08  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de10  0800de10  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de14  0800de14  0001de14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800de18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036a4  200001f8  0800e010  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000389c  0800e010  0002389c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e4f2  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000050be  00000000  00000000  0004e71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002300  00000000  00000000  000537d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020c8  00000000  00000000  00055ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b366  00000000  00000000  00057ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b5d9  00000000  00000000  00082f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001058a3  00000000  00000000  0009e4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3d82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1a0  00000000  00000000  001a3e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d11c 	.word	0x0800d11c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d11c 	.word	0x0800d11c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b972 	b.w	8000944 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	4688      	mov	r8, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14b      	bne.n	800071e <__udivmoddi4+0xa6>
 8000686:	428a      	cmp	r2, r1
 8000688:	4615      	mov	r5, r2
 800068a:	d967      	bls.n	800075c <__udivmoddi4+0xe4>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0720 	rsb	r7, r2, #32
 8000696:	fa01 f302 	lsl.w	r3, r1, r2
 800069a:	fa20 f707 	lsr.w	r7, r0, r7
 800069e:	4095      	lsls	r5, r2
 80006a0:	ea47 0803 	orr.w	r8, r7, r3
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b0:	fa1f fc85 	uxth.w	ip, r5
 80006b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006bc:	fb07 f10c 	mul.w	r1, r7, ip
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18eb      	adds	r3, r5, r3
 80006c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ca:	f080 811b 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8118 	bls.w	8000904 <__udivmoddi4+0x28c>
 80006d4:	3f02      	subs	r7, #2
 80006d6:	442b      	add	r3, r5
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ec:	45a4      	cmp	ip, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	192c      	adds	r4, r5, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8107 	bcs.w	8000908 <__udivmoddi4+0x290>
 80006fa:	45a4      	cmp	ip, r4
 80006fc:	f240 8104 	bls.w	8000908 <__udivmoddi4+0x290>
 8000700:	3802      	subs	r0, #2
 8000702:	442c      	add	r4, r5
 8000704:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	2700      	movs	r7, #0
 800070e:	b11e      	cbz	r6, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c6 4300 	strd	r4, r3, [r6]
 8000718:	4639      	mov	r1, r7
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	428b      	cmp	r3, r1
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0xbe>
 8000722:	2e00      	cmp	r6, #0
 8000724:	f000 80eb 	beq.w	80008fe <__udivmoddi4+0x286>
 8000728:	2700      	movs	r7, #0
 800072a:	e9c6 0100 	strd	r0, r1, [r6]
 800072e:	4638      	mov	r0, r7
 8000730:	4639      	mov	r1, r7
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	fab3 f783 	clz	r7, r3
 800073a:	2f00      	cmp	r7, #0
 800073c:	d147      	bne.n	80007ce <__udivmoddi4+0x156>
 800073e:	428b      	cmp	r3, r1
 8000740:	d302      	bcc.n	8000748 <__udivmoddi4+0xd0>
 8000742:	4282      	cmp	r2, r0
 8000744:	f200 80fa 	bhi.w	800093c <__udivmoddi4+0x2c4>
 8000748:	1a84      	subs	r4, r0, r2
 800074a:	eb61 0303 	sbc.w	r3, r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	4698      	mov	r8, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d0e0      	beq.n	8000718 <__udivmoddi4+0xa0>
 8000756:	e9c6 4800 	strd	r4, r8, [r6]
 800075a:	e7dd      	b.n	8000718 <__udivmoddi4+0xa0>
 800075c:	b902      	cbnz	r2, 8000760 <__udivmoddi4+0xe8>
 800075e:	deff      	udf	#255	; 0xff
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	2a00      	cmp	r2, #0
 8000766:	f040 808f 	bne.w	8000888 <__udivmoddi4+0x210>
 800076a:	1b49      	subs	r1, r1, r5
 800076c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000770:	fa1f f885 	uxth.w	r8, r5
 8000774:	2701      	movs	r7, #1
 8000776:	fbb1 fcfe 	udiv	ip, r1, lr
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000784:	fb08 f10c 	mul.w	r1, r8, ip
 8000788:	4299      	cmp	r1, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x124>
 800078c:	18eb      	adds	r3, r5, r3
 800078e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x122>
 8000794:	4299      	cmp	r1, r3
 8000796:	f200 80cd 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 800079a:	4684      	mov	ip, r0
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ac:	fb08 f800 	mul.w	r8, r8, r0
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x14c>
 80007b4:	192c      	adds	r4, r5, r4
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x14a>
 80007bc:	45a0      	cmp	r8, r4
 80007be:	f200 80b6 	bhi.w	800092e <__udivmoddi4+0x2b6>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 0408 	sub.w	r4, r4, r8
 80007c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007cc:	e79f      	b.n	800070e <__udivmoddi4+0x96>
 80007ce:	f1c7 0c20 	rsb	ip, r7, #32
 80007d2:	40bb      	lsls	r3, r7
 80007d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007dc:	fa01 f407 	lsl.w	r4, r1, r7
 80007e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ec:	4325      	orrs	r5, r4
 80007ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80007f2:	0c2c      	lsrs	r4, r5, #16
 80007f4:	fb08 3319 	mls	r3, r8, r9, r3
 80007f8:	fa1f fa8e 	uxth.w	sl, lr
 80007fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000800:	fb09 f40a 	mul.w	r4, r9, sl
 8000804:	429c      	cmp	r4, r3
 8000806:	fa02 f207 	lsl.w	r2, r2, r7
 800080a:	fa00 f107 	lsl.w	r1, r0, r7
 800080e:	d90b      	bls.n	8000828 <__udivmoddi4+0x1b0>
 8000810:	eb1e 0303 	adds.w	r3, lr, r3
 8000814:	f109 30ff 	add.w	r0, r9, #4294967295
 8000818:	f080 8087 	bcs.w	800092a <__udivmoddi4+0x2b2>
 800081c:	429c      	cmp	r4, r3
 800081e:	f240 8084 	bls.w	800092a <__udivmoddi4+0x2b2>
 8000822:	f1a9 0902 	sub.w	r9, r9, #2
 8000826:	4473      	add	r3, lr
 8000828:	1b1b      	subs	r3, r3, r4
 800082a:	b2ad      	uxth	r5, r5
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000838:	fb00 fa0a 	mul.w	sl, r0, sl
 800083c:	45a2      	cmp	sl, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x1da>
 8000840:	eb1e 0404 	adds.w	r4, lr, r4
 8000844:	f100 33ff 	add.w	r3, r0, #4294967295
 8000848:	d26b      	bcs.n	8000922 <__udivmoddi4+0x2aa>
 800084a:	45a2      	cmp	sl, r4
 800084c:	d969      	bls.n	8000922 <__udivmoddi4+0x2aa>
 800084e:	3802      	subs	r0, #2
 8000850:	4474      	add	r4, lr
 8000852:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000856:	fba0 8902 	umull	r8, r9, r0, r2
 800085a:	eba4 040a 	sub.w	r4, r4, sl
 800085e:	454c      	cmp	r4, r9
 8000860:	46c2      	mov	sl, r8
 8000862:	464b      	mov	r3, r9
 8000864:	d354      	bcc.n	8000910 <__udivmoddi4+0x298>
 8000866:	d051      	beq.n	800090c <__udivmoddi4+0x294>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d069      	beq.n	8000940 <__udivmoddi4+0x2c8>
 800086c:	ebb1 050a 	subs.w	r5, r1, sl
 8000870:	eb64 0403 	sbc.w	r4, r4, r3
 8000874:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000878:	40fd      	lsrs	r5, r7
 800087a:	40fc      	lsrs	r4, r7
 800087c:	ea4c 0505 	orr.w	r5, ip, r5
 8000880:	e9c6 5400 	strd	r5, r4, [r6]
 8000884:	2700      	movs	r7, #0
 8000886:	e747      	b.n	8000718 <__udivmoddi4+0xa0>
 8000888:	f1c2 0320 	rsb	r3, r2, #32
 800088c:	fa20 f703 	lsr.w	r7, r0, r3
 8000890:	4095      	lsls	r5, r2
 8000892:	fa01 f002 	lsl.w	r0, r1, r2
 8000896:	fa21 f303 	lsr.w	r3, r1, r3
 800089a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800089e:	4338      	orrs	r0, r7
 80008a0:	0c01      	lsrs	r1, r0, #16
 80008a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008a6:	fa1f f885 	uxth.w	r8, r5
 80008aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb07 f308 	mul.w	r3, r7, r8
 80008b6:	428b      	cmp	r3, r1
 80008b8:	fa04 f402 	lsl.w	r4, r4, r2
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x256>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008c4:	d22f      	bcs.n	8000926 <__udivmoddi4+0x2ae>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d92d      	bls.n	8000926 <__udivmoddi4+0x2ae>
 80008ca:	3f02      	subs	r7, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1acb      	subs	r3, r1, r3
 80008d0:	b281      	uxth	r1, r0
 80008d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008de:	fb00 f308 	mul.w	r3, r0, r8
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x27e>
 80008e6:	1869      	adds	r1, r5, r1
 80008e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ec:	d217      	bcs.n	800091e <__udivmoddi4+0x2a6>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d915      	bls.n	800091e <__udivmoddi4+0x2a6>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4429      	add	r1, r5
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008fc:	e73b      	b.n	8000776 <__udivmoddi4+0xfe>
 80008fe:	4637      	mov	r7, r6
 8000900:	4630      	mov	r0, r6
 8000902:	e709      	b.n	8000718 <__udivmoddi4+0xa0>
 8000904:	4607      	mov	r7, r0
 8000906:	e6e7      	b.n	80006d8 <__udivmoddi4+0x60>
 8000908:	4618      	mov	r0, r3
 800090a:	e6fb      	b.n	8000704 <__udivmoddi4+0x8c>
 800090c:	4541      	cmp	r1, r8
 800090e:	d2ab      	bcs.n	8000868 <__udivmoddi4+0x1f0>
 8000910:	ebb8 0a02 	subs.w	sl, r8, r2
 8000914:	eb69 020e 	sbc.w	r2, r9, lr
 8000918:	3801      	subs	r0, #1
 800091a:	4613      	mov	r3, r2
 800091c:	e7a4      	b.n	8000868 <__udivmoddi4+0x1f0>
 800091e:	4660      	mov	r0, ip
 8000920:	e7e9      	b.n	80008f6 <__udivmoddi4+0x27e>
 8000922:	4618      	mov	r0, r3
 8000924:	e795      	b.n	8000852 <__udivmoddi4+0x1da>
 8000926:	4667      	mov	r7, ip
 8000928:	e7d1      	b.n	80008ce <__udivmoddi4+0x256>
 800092a:	4681      	mov	r9, r0
 800092c:	e77c      	b.n	8000828 <__udivmoddi4+0x1b0>
 800092e:	3802      	subs	r0, #2
 8000930:	442c      	add	r4, r5
 8000932:	e747      	b.n	80007c4 <__udivmoddi4+0x14c>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	442b      	add	r3, r5
 800093a:	e72f      	b.n	800079c <__udivmoddi4+0x124>
 800093c:	4638      	mov	r0, r7
 800093e:	e708      	b.n	8000752 <__udivmoddi4+0xda>
 8000940:	4637      	mov	r7, r6
 8000942:	e6e9      	b.n	8000718 <__udivmoddi4+0xa0>

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b2f      	cmp	r3, #47	; 0x2f
 8000956:	d906      	bls.n	8000966 <Hex2Num+0x1e>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b39      	cmp	r3, #57	; 0x39
 800095c:	d803      	bhi.n	8000966 <Hex2Num+0x1e>
        return a - '0';
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3b30      	subs	r3, #48	; 0x30
 8000962:	b2db      	uxtb	r3, r3
 8000964:	e014      	b.n	8000990 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b60      	cmp	r3, #96	; 0x60
 800096a:	d906      	bls.n	800097a <Hex2Num+0x32>
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b66      	cmp	r3, #102	; 0x66
 8000970:	d803      	bhi.n	800097a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3b57      	subs	r3, #87	; 0x57
 8000976:	b2db      	uxtb	r3, r3
 8000978:	e00a      	b.n	8000990 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b40      	cmp	r3, #64	; 0x40
 800097e:	d906      	bls.n	800098e <Hex2Num+0x46>
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b46      	cmp	r3, #70	; 0x46
 8000984:	d803      	bhi.n	800098e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3b37      	subs	r3, #55	; 0x37
 800098a:	b2db      	uxtb	r3, r3
 800098c:	e000      	b.n	8000990 <Hex2Num+0x48>
    }

    return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80009ae:	e012      	b.n	80009d6 <ParseHexNumber+0x3a>
        sum <<= 4;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffc4 	bl	8000948 <Hex2Num>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
        ptr++;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
        i++;
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	3301      	adds	r3, #1
 80009d4:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b2f      	cmp	r3, #47	; 0x2f
 80009dc:	d903      	bls.n	80009e6 <ParseHexNumber+0x4a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b39      	cmp	r3, #57	; 0x39
 80009e4:	d9e4      	bls.n	80009b0 <ParseHexNumber+0x14>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b60      	cmp	r3, #96	; 0x60
 80009ec:	d903      	bls.n	80009f6 <ParseHexNumber+0x5a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b66      	cmp	r3, #102	; 0x66
 80009f4:	d9dc      	bls.n	80009b0 <ParseHexNumber+0x14>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d903      	bls.n	8000a06 <ParseHexNumber+0x6a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b46      	cmp	r3, #70	; 0x46
 8000a04:	d9d4      	bls.n	80009b0 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <ParseHexNumber+0x76>
        *cnt = i;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	7afa      	ldrb	r2, [r7, #11]
 8000a10:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b2d      	cmp	r3, #45	; 0x2d
 8000a38:	d119      	bne.n	8000a6e <ParseNumber+0x52>
        minus = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3301      	adds	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
        i++;
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a4a:	e010      	b.n	8000a6e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b30      	subs	r3, #48	; 0x30
 8000a5e:	4413      	add	r3, r2
 8000a60:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
        i++;
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b2f      	cmp	r3, #47	; 0x2f
 8000a74:	d903      	bls.n	8000a7e <ParseNumber+0x62>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b39      	cmp	r3, #57	; 0x39
 8000a7c:	d9e6      	bls.n	8000a4c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <ParseNumber+0x6e>
        *cnt = i;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	7bba      	ldrb	r2, [r7, #14]
 8000a88:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <ParseNumber+0x7a>
        return 0 - sum;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	425b      	negs	r3, r3
 8000a94:	e000      	b.n	8000a98 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000a96:	68bb      	ldr	r3, [r7, #8]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000ab2:	e019      	b.n	8000ae8 <ParseMAC+0x44>
    hexcnt = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b3a      	cmp	r3, #58	; 0x3a
 8000abe:	d00e      	beq.n	8000ade <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000ac0:	f107 030e 	add.w	r3, r7, #14
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ff68 	bl	800099c <ParseHexNumber>
 8000acc:	4601      	mov	r1, r0
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	73fa      	strb	r2, [r7, #15]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1e1      	bne.n	8000ab4 <ParseMAC+0x10>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000b06:	e019      	b.n	8000b3c <ParseIP+0x44>
    hexcnt = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b2e      	cmp	r3, #46	; 0x2e
 8000b12:	d00e      	beq.n	8000b32 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff7e 	bl	8000a1c <ParseNumber>
 8000b20:	4601      	mov	r1, r0
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	73fa      	strb	r2, [r7, #15]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e1      	bne.n	8000b08 <ParseIP+0x10>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	4934      	ldr	r1, [pc, #208]	; (8000c30 <AT_ParseInfo+0xe4>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00b f92b 	bl	800bdbc <strtok>
 8000b66:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000b68:	e05a      	b.n	8000c20 <AT_ParseInfo+0xd4>
    switch (num++) {
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	72fa      	strb	r2, [r7, #11]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d84f      	bhi.n	8000c14 <AT_ParseInfo+0xc8>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <AT_ParseInfo+0x30>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b99 	.word	0x08000b99
 8000b80:	08000ba7 	.word	0x08000ba7
 8000b84:	08000bb7 	.word	0x08000bb7
 8000b88:	08000bc7 	.word	0x08000bc7
 8000b8c:	08000bd7 	.word	0x08000bd7
 8000b90:	08000be7 	.word	0x08000be7
 8000b94:	08000bfb 	.word	0x08000bfb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00b f8dc 	bl	800bd5c <strncpy>
      break;
 8000ba4:	e037      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3320      	adds	r3, #32
 8000baa:	2218      	movs	r2, #24
 8000bac:	68f9      	ldr	r1, [r7, #12]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00b f8d4 	bl	800bd5c <strncpy>
      break;
 8000bb4:	e02f      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3338      	adds	r3, #56	; 0x38
 8000bba:	2210      	movs	r2, #16
 8000bbc:	68f9      	ldr	r1, [r7, #12]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f00b f8cc 	bl	800bd5c <strncpy>
      break;
 8000bc4:	e027      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3348      	adds	r3, #72	; 0x48
 8000bca:	2210      	movs	r2, #16
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00b f8c4 	bl	800bd5c <strncpy>
      break;
 8000bd4:	e01f      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3358      	adds	r3, #88	; 0x58
 8000bda:	2210      	movs	r2, #16
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f00b f8bc 	bl	800bd5c <strncpy>
      break;
 8000be4:	e017      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000be6:	2100      	movs	r1, #0
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff ff17 	bl	8000a1c <ParseNumber>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000bf8:	e00d      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <AT_ParseInfo+0xe8>)
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f00b f8dd 	bl	800bdbc <strtok>
 8000c02:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3368      	adds	r3, #104	; 0x68
 8000c08:	2220      	movs	r2, #32
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00b f8a5 	bl	800bd5c <strncpy>
      break;
 8000c12:	e000      	b.n	8000c16 <AT_ParseInfo+0xca>

    default: break;
 8000c14:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000c16:	4906      	ldr	r1, [pc, #24]	; (8000c30 <AT_ParseInfo+0xe4>)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f00b f8cf 	bl	800bdbc <strtok>
 8000c1e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1a1      	bne.n	8000b6a <AT_ParseInfo+0x1e>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	0800d164 	.word	0x0800d164
 8000c34:	0800d168 	.word	0x0800d168

08000c38 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	4952      	ldr	r1, [pc, #328]	; (8000d94 <AT_ParseConnSettings+0x15c>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00b f8b5 	bl	800bdbc <strtok>
 8000c52:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000c54:	e095      	b.n	8000d82 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	73fa      	strb	r2, [r7, #15]
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	d87f      	bhi.n	8000d60 <AT_ParseConnSettings+0x128>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <AT_ParseConnSettings+0x30>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000ca7 	.word	0x08000ca7
 8000c70:	08000cb7 	.word	0x08000cb7
 8000c74:	08000ccb 	.word	0x08000ccb
 8000c78:	08000cdf 	.word	0x08000cdf
 8000c7c:	08000cf3 	.word	0x08000cf3
 8000c80:	08000d01 	.word	0x08000d01
 8000c84:	08000d0f 	.word	0x08000d0f
 8000c88:	08000d1d 	.word	0x08000d1d
 8000c8c:	08000d2b 	.word	0x08000d2b
 8000c90:	08000d39 	.word	0x08000d39
 8000c94:	08000d4d 	.word	0x08000d4d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2221      	movs	r2, #33	; 0x21
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00b f85c 	bl	800bd5c <strncpy>
      break;
 8000ca4:	e05d      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3321      	adds	r3, #33	; 0x21
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f00b f854 	bl	800bd5c <strncpy>
      break;
 8000cb4:	e055      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f7ff feaf 	bl	8000a1c <ParseNumber>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000cc8:	e04b      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fea5 	bl	8000a1c <ParseNumber>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000cdc:	e041      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f7ff fe9b 	bl	8000a1c <ParseNumber>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000cf0:	e037      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3348      	adds	r3, #72	; 0x48
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f7ff fefd 	bl	8000af8 <ParseIP>
      break;
 8000cfe:	e030      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	334c      	adds	r3, #76	; 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff fef6 	bl	8000af8 <ParseIP>
      break;
 8000d0c:	e029      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3350      	adds	r3, #80	; 0x50
 8000d12:	4619      	mov	r1, r3
 8000d14:	68b8      	ldr	r0, [r7, #8]
 8000d16:	f7ff feef 	bl	8000af8 <ParseIP>
      break;
 8000d1a:	e022      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3354      	adds	r3, #84	; 0x54
 8000d20:	4619      	mov	r1, r3
 8000d22:	68b8      	ldr	r0, [r7, #8]
 8000d24:	f7ff fee8 	bl	8000af8 <ParseIP>
      break;
 8000d28:	e01b      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3358      	adds	r3, #88	; 0x58
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f7ff fee1 	bl	8000af8 <ParseIP>
      break;
 8000d36:	e014      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f7ff fe6e 	bl	8000a1c <ParseNumber>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000d4a:	e00a      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	68b8      	ldr	r0, [r7, #8]
 8000d50:	f7ff fe64 	bl	8000a1c <ParseNumber>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000d5e:	e000      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8000d60:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <AT_ParseConnSettings+0x15c>)
 8000d64:	2000      	movs	r0, #0
 8000d66:	f00b f829 	bl	800bdbc <strtok>
 8000d6a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <AT_ParseConnSettings+0x14a>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7a:	d102      	bne.n	8000d82 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f af66 	bne.w	8000c56 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0800d164 	.word	0x0800d164

08000d98 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3302      	adds	r3, #2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b31      	cmp	r3, #49	; 0x31
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000dde:	68b8      	ldr	r0, [r7, #8]
 8000de0:	f7ff f9f6 	bl	80001d0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b299      	uxth	r1, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000dee:	461a      	mov	r2, r3
 8000df0:	68b8      	ldr	r0, [r7, #8]
 8000df2:	47a0      	blx	r4
 8000df4:	4603      	mov	r3, r0
 8000df6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd3e      	ble.n	8000e7c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	4798      	blx	r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dd27      	ble.n	8000e6e <AT_ExecuteCommand+0xaa>
 8000e1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e26:	dc22      	bgt.n	8000e6e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000e28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e30:	d105      	bne.n	8000e3e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000e3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000e4a:	490f      	ldr	r1, [pc, #60]	; (8000e88 <AT_ExecuteCommand+0xc4>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f00a ff9a 	bl	800bd86 <strstr>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e010      	b.n	8000e7e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000e5c:	490b      	ldr	r1, [pc, #44]	; (8000e8c <AT_ExecuteCommand+0xc8>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f00a ff91 	bl	800bd86 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e007      	b.n	8000e7e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e72:	f113 0f04 	cmn.w	r3, #4
 8000e76:	d101      	bne.n	8000e7c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e000      	b.n	8000e7e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000e7c:	2304      	movs	r3, #4
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	0800d178 	.word	0x0800d178
 8000e8c:	0800d184 	.word	0x0800d184

08000e90 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f7ff f990 	bl	80001d0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000eb4:	8a7b      	ldrh	r3, [r7, #18]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <AT_RequestSendData+0x32>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e053      	b.n	8000f6a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000ece:	8a79      	ldrh	r1, [r7, #18]
 8000ed0:	68b8      	ldr	r0, [r7, #8]
 8000ed2:	4798      	blx	r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000ed8:	8a3a      	ldrh	r2, [r7, #16]
 8000eda:	8a7b      	ldrh	r3, [r7, #18]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d143      	bne.n	8000f68 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000eec:	8879      	ldrh	r1, [r7, #2]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000ef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d131      	bne.n	8000f64 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6a38      	ldr	r0, [r7, #32]
 8000f10:	4798      	blx	r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dd19      	ble.n	8000f52 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8000f1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f22:	6a3a      	ldr	r2, [r7, #32]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000f2a:	4912      	ldr	r1, [pc, #72]	; (8000f74 <AT_RequestSendData+0xe4>)
 8000f2c:	6a38      	ldr	r0, [r7, #32]
 8000f2e:	f00a ff2a 	bl	800bd86 <strstr>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e016      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000f3c:	490e      	ldr	r1, [pc, #56]	; (8000f78 <AT_RequestSendData+0xe8>)
 8000f3e:	6a38      	ldr	r0, [r7, #32]
 8000f40:	f00a ff21 	bl	800bd86 <strstr>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e00d      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e00b      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f56:	f113 0f04 	cmn.w	r3, #4
 8000f5a:	d101      	bne.n	8000f60 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e004      	b.n	8000f6a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000f64:	2302      	movs	r3, #2
 8000f66:	e000      	b.n	8000f6a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000f68:	2304      	movs	r3, #4
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800d178 	.word	0x0800d178
 8000f78:	0800d184 	.word	0x0800d184

08000f7c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f90:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000f98:	68b8      	ldr	r0, [r7, #8]
 8000f9a:	f7ff f919 	bl	80001d0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	47a0      	blx	r4
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd6f      	ble.n	8001094 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	4798      	blx	r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d104      	bne.n	8000fdc <AT_RequestReceiveData+0x60>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d001      	beq.n	8000fe0 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e05a      	b.n	8001096 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3b02      	subs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
    p+=2;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d94a      	bls.n	8001088 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8000ff2:	e002      	b.n	8000ffa <AT_RequestReceiveData+0x7e>
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AT_RequestReceiveData+0x92>
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3b01      	subs	r3, #1
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b15      	cmp	r3, #21
 800100c:	d0f2      	beq.n	8000ff4 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4413      	add	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3b08      	subs	r3, #8
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4413      	add	r3, r2
 8001020:	491f      	ldr	r1, [pc, #124]	; (80010a0 <AT_RequestReceiveData+0x124>)
 8001022:	4618      	mov	r0, r3
 8001024:	f00a feaf 	bl	800bd86 <strstr>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b08      	subs	r3, #8
 8001034:	b29a      	uxth	r2, r3
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	429a      	cmp	r2, r3
 8001042:	d202      	bcs.n	800104a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	6939      	ldr	r1, [r7, #16]
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f00a fd9f 	bl	800bb96 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e01c      	b.n	8001096 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3b04      	subs	r3, #4
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4413      	add	r3, r2
 8001064:	2204      	movs	r2, #4
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <AT_RequestReceiveData+0x128>)
 8001068:	4618      	mov	r0, r3
 800106a:	f00a fd85 	bl	800bb78 <memcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d104      	bne.n	800107e <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800107a:	2305      	movs	r3, #5
 800107c:	e00b      	b.n	8001096 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001084:	2305      	movs	r3, #5
 8001086:	e006      	b.n	8001096 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f113 0f04 	cmn.w	r3, #4
 800108e:	d101      	bne.n	8001094 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001090:	2306      	movs	r3, #6
 8001092:	e000      	b.n	8001096 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001094:	2304      	movs	r3, #4
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	0800d178 	.word	0x0800d178
 80010a4:	0800d18c 	.word	0x0800d18c

080010a8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80010b0:	2302      	movs	r3, #2
 80010b2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80010ba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80010c4:	2000      	movs	r0, #0
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d113      	bne.n	80010f6 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010d4:	461a      	mov	r2, r3
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <ES_WIFI_Init+0x58>)
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fe73 	bl	8000dc4 <AT_ExecuteCommand>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d106      	bne.n	80010f6 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fd2b 	bl	8000b4c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800d194 	.word	0x0800d194

08001104 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001130:	2302      	movs	r3, #2
 8001132:	e014      	b.n	800115e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	4931      	ldr	r1, [pc, #196]	; (8001248 <ES_WIFI_Connect+0xdc>)
 8001184:	4618      	mov	r0, r3
 8001186:	f00a fdc9 	bl	800bd1c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001196:	461a      	mov	r2, r3
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fe13 	bl	8000dc4 <AT_ExecuteCommand>
 800119e:	4603      	mov	r3, r0
 80011a0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d14a      	bne.n	800123e <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4926      	ldr	r1, [pc, #152]	; (800124c <ES_WIFI_Connect+0xe0>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00a fdb2 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011c4:	461a      	mov	r2, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fdfc 	bl	8000dc4 <AT_ExecuteCommand>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d133      	bne.n	800123e <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	491a      	ldr	r1, [pc, #104]	; (8001250 <ES_WIFI_Connect+0xe4>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00a fd97 	bl	800bd1c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011fa:	461a      	mov	r2, r3
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff fde1 	bl	8000dc4 <AT_ExecuteCommand>
 8001202:	4603      	mov	r3, r0
 8001204:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d118      	bne.n	800123e <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <ES_WIFI_Connect+0xe8>)
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001224:	461a      	mov	r2, r3
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fdcc 	bl	8000dc4 <AT_ExecuteCommand>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0800d1ac 	.word	0x0800d1ac
 800124c:	0800d1b4 	.word	0x0800d1b4
 8001250:	0800d1bc 	.word	0x0800d1bc
 8001254:	0800d1c4 	.word	0x0800d1c4

08001258 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <ES_WIFI_IsConnected+0x54>)
 8001268:	6810      	ldr	r0, [r2, #0]
 800126a:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001278:	461a      	mov	r2, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fda2 	bl	8000dc4 <AT_ExecuteCommand>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	33d2      	adds	r3, #210	; 0xd2
 8001294:	4619      	mov	r1, r3
 8001296:	4610      	mov	r0, r2
 8001298:	f7ff fd7e 	bl	8000d98 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0800d1c8 	.word	0x0800d1c8

080012b0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <ES_WIFI_GetNetworkSettings+0x50>)
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012d0:	461a      	mov	r2, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd76 	bl	8000dc4 <AT_ExecuteCommand>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	338d      	adds	r3, #141	; 0x8d
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f7ff fca2 	bl	8000c38 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	0800d1d0 	.word	0x0800d1d0

08001304 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <ES_WIFI_GetMACAddress+0x58>)
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001326:	461a      	mov	r2, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fd4b 	bl	8000dc4 <AT_ExecuteCommand>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800133e:	3302      	adds	r3, #2
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <ES_WIFI_GetMACAddress+0x5c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f00a fd3a 	bl	800bdbc <strtok>
 8001348:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fba9 	bl	8000aa4 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800d22c 	.word	0x0800d22c
 8001360:	0800d230 	.word	0x0800d230

08001364 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b087      	sub	sp, #28
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <ES_WIFI_StartClientConnection+0x1e>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d105      	bne.n	800138e <ES_WIFI_StartClientConnection+0x2a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <ES_WIFI_StartClientConnection+0x2a>
 800138a:	2302      	movs	r3, #2
 800138c:	e0c3      	b.n	8001516 <ES_WIFI_StartClientConnection+0x1b2>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	461a      	mov	r2, r3
 800139a:	4961      	ldr	r1, [pc, #388]	; (8001520 <ES_WIFI_StartClientConnection+0x1bc>)
 800139c:	f00a fcbe 	bl	800bd1c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013ac:	461a      	mov	r2, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd08 	bl	8000dc4 <AT_ExecuteCommand>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4956      	ldr	r1, [pc, #344]	; (8001524 <ES_WIFI_StartClientConnection+0x1c0>)
 80013cc:	f00a fca6 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013dc:	461a      	mov	r2, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fcf0 	bl	8000dc4 <AT_ExecuteCommand>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d114      	bne.n	8001418 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	461a      	mov	r2, r3
 80013fa:	494b      	ldr	r1, [pc, #300]	; (8001528 <ES_WIFI_StartClientConnection+0x1c4>)
 80013fc:	f00a fc8e 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800140c:	461a      	mov	r2, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fcd8 	bl	8000dc4 <AT_ExecuteCommand>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11c      	bne.n	8001458 <ES_WIFI_StartClientConnection+0xf4>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <ES_WIFI_StartClientConnection+0xca>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d114      	bne.n	8001458 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	461a      	mov	r2, r3
 800143a:	493c      	ldr	r1, [pc, #240]	; (800152c <ES_WIFI_StartClientConnection+0x1c8>)
 800143c:	f00a fc6e 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800144c:	461a      	mov	r2, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fcb8 	bl	8000dc4 <AT_ExecuteCommand>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d128      	bne.n	80014b0 <ES_WIFI_StartClientConnection+0x14c>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <ES_WIFI_StartClientConnection+0x10a>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d120      	bne.n	80014b0 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	4619      	mov	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	79db      	ldrb	r3, [r3, #7]
 800147e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001484:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	460a      	mov	r2, r1
 8001492:	4927      	ldr	r1, [pc, #156]	; (8001530 <ES_WIFI_StartClientConnection+0x1cc>)
 8001494:	f00a fc42 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014a4:	461a      	mov	r2, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fc8c 	bl	8000dc4 <AT_ExecuteCommand>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d117      	bne.n	80014e6 <ES_WIFI_StartClientConnection+0x182>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d113      	bne.n	80014e6 <ES_WIFI_StartClientConnection+0x182>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <ES_WIFI_StartClientConnection+0x1d0>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	6018      	str	r0, [r3, #0]
 80014ca:	8892      	ldrh	r2, [r2, #4]
 80014cc:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014da:	461a      	mov	r2, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fc71 	bl	8000dc4 <AT_ExecuteCommand>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d113      	bne.n	8001514 <ES_WIFI_StartClientConnection+0x1b0>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <ES_WIFI_StartClientConnection+0x1d4>)
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	6018      	str	r0, [r3, #0]
 80014f8:	8892      	ldrh	r2, [r2, #4]
 80014fa:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001508:	461a      	mov	r2, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fc5a 	bl	8000dc4 <AT_ExecuteCommand>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	0800d294 	.word	0x0800d294
 8001524:	0800d29c 	.word	0x0800d29c
 8001528:	0800d2a4 	.word	0x0800d2a4
 800152c:	0800d2ac 	.word	0x0800d2ac
 8001530:	0800d2b4 	.word	0x0800d2b4
 8001534:	0800d2c4 	.word	0x0800d2c4
 8001538:	0800d2cc 	.word	0x0800d2cc

0800153c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	460b      	mov	r3, r1
 800154a:	72fb      	strb	r3, [r7, #11]
 800154c:	4613      	mov	r3, r2
 800154e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001550:	2302      	movs	r3, #2
 8001552:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e001      	b.n	8001564 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800156a:	d302      	bcc.n	8001572 <ES_WIFI_SendData+0x36>
 800156c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001570:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	893a      	ldrh	r2, [r7, #8]
 8001576:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800157e:	7afa      	ldrb	r2, [r7, #11]
 8001580:	4942      	ldr	r1, [pc, #264]	; (800168c <ES_WIFI_SendData+0x150>)
 8001582:	4618      	mov	r0, r3
 8001584:	f00a fbca 	bl	800bd1c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001594:	461a      	mov	r2, r3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff fc14 	bl	8000dc4 <AT_ExecuteCommand>
 800159c:	4603      	mov	r3, r0
 800159e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d15e      	bne.n	8001664 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4938      	ldr	r1, [pc, #224]	; (8001690 <ES_WIFI_SendData+0x154>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a fbb3 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fbfd 	bl	8000dc4 <AT_ExecuteCommand>
 80015ca:	4603      	mov	r3, r0
 80015cc:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 80015ce:	7cfb      	ldrb	r3, [r7, #19]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13d      	bne.n	8001650 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015da:	893a      	ldrh	r2, [r7, #8]
 80015dc:	492d      	ldr	r1, [pc, #180]	; (8001694 <ES_WIFI_SendData+0x158>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f00a fb9c 	bl	800bd1c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f0:	893a      	ldrh	r2, [r7, #8]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fc49 	bl	8000e90 <AT_RequestSendData>
 80015fe:	4603      	mov	r3, r0
 8001600:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001602:	7cfb      	ldrb	r3, [r7, #19]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d119      	bne.n	800163c <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800160e:	4922      	ldr	r1, [pc, #136]	; (8001698 <ES_WIFI_SendData+0x15c>)
 8001610:	4618      	mov	r0, r3
 8001612:	f00a fbb8 	bl	800bd86 <strstr>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02c      	beq.n	8001676 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800161c:	f640 025b 	movw	r2, #2139	; 0x85b
 8001620:	491e      	ldr	r1, [pc, #120]	; (800169c <ES_WIFI_SendData+0x160>)
 8001622:	481f      	ldr	r0, [pc, #124]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001624:	f00a faca 	bl	800bbbc <iprintf>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <ES_WIFI_SendData+0x168>)
 8001632:	f00a fac3 	bl	800bbbc <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001636:	2302      	movs	r3, #2
 8001638:	74fb      	strb	r3, [r7, #19]
 800163a:	e01c      	b.n	8001676 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800163c:	f640 0261 	movw	r2, #2145	; 0x861
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <ES_WIFI_SendData+0x160>)
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001644:	f00a faba 	bl	800bbbc <iprintf>
 8001648:	4817      	ldr	r0, [pc, #92]	; (80016a8 <ES_WIFI_SendData+0x16c>)
 800164a:	f00a fb2b 	bl	800bca4 <puts>
 800164e:	e012      	b.n	8001676 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001650:	f640 0266 	movw	r2, #2150	; 0x866
 8001654:	4911      	ldr	r1, [pc, #68]	; (800169c <ES_WIFI_SendData+0x160>)
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001658:	f00a fab0 	bl	800bbbc <iprintf>
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <ES_WIFI_SendData+0x170>)
 800165e:	f00a fb21 	bl	800bca4 <puts>
 8001662:	e008      	b.n	8001676 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001664:	f640 026b 	movw	r2, #2155	; 0x86b
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <ES_WIFI_SendData+0x160>)
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <ES_WIFI_SendData+0x164>)
 800166c:	f00a faa6 	bl	800bbbc <iprintf>
 8001670:	480f      	ldr	r0, [pc, #60]	; (80016b0 <ES_WIFI_SendData+0x174>)
 8001672:	f00a fb17 	bl	800bca4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001676:	7cfb      	ldrb	r3, [r7, #19]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d102      	bne.n	8001682 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001682:	7cfb      	ldrb	r3, [r7, #19]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0800d294 	.word	0x0800d294
 8001690:	0800d448 	.word	0x0800d448
 8001694:	0800d450 	.word	0x0800d450
 8001698:	0800d45c 	.word	0x0800d45c
 800169c:	0800d324 	.word	0x0800d324
 80016a0:	0800d33c 	.word	0x0800d33c
 80016a4:	0800d464 	.word	0x0800d464
 80016a8:	0800d480 	.word	0x0800d480
 80016ac:	0800d49c 	.word	0x0800d49c
 80016b0:	0800d4b0 	.word	0x0800d4b0

080016b4 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
 80016c4:	4613      	mov	r3, r2
 80016c6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80016c8:	2302      	movs	r3, #2
 80016ca:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e001      	b.n	80016dc <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80016dc:	893b      	ldrh	r3, [r7, #8]
 80016de:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016e2:	f200 808a 	bhi.w	80017fa <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ec:	7afa      	ldrb	r2, [r7, #11]
 80016ee:	4945      	ldr	r1, [pc, #276]	; (8001804 <ES_WIFI_ReceiveData+0x150>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00a fb13 	bl	800bd1c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001702:	461a      	mov	r2, r3
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fb5d 	bl	8000dc4 <AT_ExecuteCommand>
 800170a:	4603      	mov	r3, r0
 800170c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d164      	bne.n	80017de <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800171a:	893a      	ldrh	r2, [r7, #8]
 800171c:	493a      	ldr	r1, [pc, #232]	; (8001808 <ES_WIFI_ReceiveData+0x154>)
 800171e:	4618      	mov	r0, r3
 8001720:	f00a fafc 	bl	800bd1c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001730:	461a      	mov	r2, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fb46 	bl	8000dc4 <AT_ExecuteCommand>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d140      	bne.n	80017c4 <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4930      	ldr	r1, [pc, #192]	; (800180c <ES_WIFI_ReceiveData+0x158>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00a fae5 	bl	800bd1c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175e:	461a      	mov	r2, r3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fb2f 	bl	8000dc4 <AT_ExecuteCommand>
 8001766:	4603      	mov	r3, r0
 8001768:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11f      	bne.n	80017b0 <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <ES_WIFI_ReceiveData+0x15c>)
 8001778:	6810      	ldr	r0, [r2, #0]
 800177a:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001782:	893a      	ldrh	r2, [r7, #8]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fbf5 	bl	8000f7c <AT_RequestReceiveData>
 8001792:	4603      	mov	r3, r0
 8001794:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02e      	beq.n	80017fa <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800179c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80017a0:	491c      	ldr	r1, [pc, #112]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017a2:	481d      	ldr	r0, [pc, #116]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017a4:	f00a fa0a 	bl	800bbbc <iprintf>
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <ES_WIFI_ReceiveData+0x168>)
 80017aa:	f00a fa7b 	bl	800bca4 <puts>
 80017ae:	e024      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 80017b0:	f640 1201 	movw	r2, #2305	; 0x901
 80017b4:	4917      	ldr	r1, [pc, #92]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017b8:	f00a fa00 	bl	800bbbc <iprintf>
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <ES_WIFI_ReceiveData+0x16c>)
 80017be:	f00a fa71 	bl	800bca4 <puts>
 80017c2:	e01a      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 80017c4:	f640 1206 	movw	r2, #2310	; 0x906
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017ca:	4813      	ldr	r0, [pc, #76]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017cc:	f00a f9f6 	bl	800bbbc <iprintf>
 80017d0:	4814      	ldr	r0, [pc, #80]	; (8001824 <ES_WIFI_ReceiveData+0x170>)
 80017d2:	f00a fa67 	bl	800bca4 <puts>
        *Receivedlen = 0;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e00d      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 80017de:	f640 120c 	movw	r2, #2316	; 0x90c
 80017e2:	490c      	ldr	r1, [pc, #48]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017e6:	f00a f9e9 	bl	800bbbc <iprintf>
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <ES_WIFI_ReceiveData+0x174>)
 80017ec:	f00a fa5a 	bl	800bca4 <puts>
      issue15++;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <ES_WIFI_ReceiveData+0x178>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a0d      	ldr	r2, [pc, #52]	; (800182c <ES_WIFI_ReceiveData+0x178>)
 80017f8:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0800d294 	.word	0x0800d294
 8001808:	0800d4d4 	.word	0x0800d4d4
 800180c:	0800d4dc 	.word	0x0800d4dc
 8001810:	0800d4e4 	.word	0x0800d4e4
 8001814:	0800d324 	.word	0x0800d324
 8001818:	0800d33c 	.word	0x0800d33c
 800181c:	0800d4e8 	.word	0x0800d4e8
 8001820:	0800d508 	.word	0x0800d508
 8001824:	0800d520 	.word	0x0800d520
 8001828:	0800d540 	.word	0x0800d540
 800182c:	20000214 	.word	0x20000214

08001830 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	6593      	str	r3, [r2, #88]	; 0x58
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a49      	ldr	r2, [pc, #292]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a43      	ldr	r2, [pc, #268]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189e:	483e      	ldr	r0, [pc, #248]	; (8001998 <SPI_WIFI_MspInit+0x168>)
 80018a0:	f002 fd7a 	bl	8004398 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4836      	ldr	r0, [pc, #216]	; (8001998 <SPI_WIFI_MspInit+0x168>)
 80018be:	f002 fab7 	bl	8003e30 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <SPI_WIFI_MspInit+0x16c>)
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4831      	ldr	r0, [pc, #196]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 80018da:	f002 faa9 	bl	8003e30 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80018de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4829      	ldr	r0, [pc, #164]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 80018fc:	f002 fa98 	bl	8003e30 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001900:	2201      	movs	r2, #1
 8001902:	2101      	movs	r1, #1
 8001904:	4826      	ldr	r0, [pc, #152]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 8001906:	f002 fd47 	bl	8004398 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800190a:	2301      	movs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 8001922:	f002 fa85 	bl	8003e30 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001938:	2306      	movs	r3, #6
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001944:	f002 fa74 	bl	8003e30 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800195a:	2306      	movs	r3, #6
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	480f      	ldr	r0, [pc, #60]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001966:	f002 fa63 	bl	8003e30 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800196a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800197c:	2306      	movs	r3, #6
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001988:	f002 fa52 	bl	8003e30 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	48000400 	.word	0x48000400
 800199c:	10110000 	.word	0x10110000
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48000800 	.word	0x48000800

080019a8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d145      	bne.n	8001a48 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <SPI_WIFI_Init+0xb8>)
 80019c0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80019c2:	4826      	ldr	r0, [pc, #152]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019c4:	f7ff ff34 	bl	8001830 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ce:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019dc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019f4:	2210      	movs	r2, #16
 80019f6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a12:	f004 fb49 	bl	80060a8 <HAL_SPI_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e018      	b.n	8001a54 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2007      	movs	r0, #7
 8001a28:	f002 f87d 	bl	8003b26 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001a2c:	2007      	movs	r0, #7
 8001a2e:	f002 f896 	bl	8003b5e <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2033      	movs	r0, #51	; 0x33
 8001a38:	f002 f875 	bl	8003b26 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001a3c:	2033      	movs	r0, #51	; 0x33
 8001a3e:	f002 f88e 	bl	8003b5e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f000 f9fe 	bl	8001e44 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001a48:	f000 f80c 	bl	8001a64 <SPI_WIFI_ResetModule>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200027cc 	.word	0x200027cc
 8001a60:	40003c00 	.word	0x40003c00

08001a64 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001a6a:	f001 ff53 	bl	8003914 <HAL_GetTick>
 8001a6e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	4830      	ldr	r0, [pc, #192]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001a7c:	f002 fc8c 	bl	8004398 <HAL_GPIO_WritePin>
 8001a80:	200a      	movs	r0, #10
 8001a82:	f001 ff53 	bl	800392c <HAL_Delay>
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8c:	482b      	ldr	r0, [pc, #172]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001a8e:	f002 fc83 	bl	8004398 <HAL_GPIO_WritePin>
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f001 ff49 	bl	800392c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001aa0:	f002 fc7a 	bl	8004398 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001aa4:	200f      	movs	r0, #15
 8001aa6:	f000 f9cd 	bl	8001e44 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001aaa:	e020      	b.n	8001aee <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	463a      	mov	r2, r7
 8001ab0:	18d1      	adds	r1, r2, r3
 8001ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4821      	ldr	r0, [pc, #132]	; (8001b40 <SPI_WIFI_ResetModule+0xdc>)
 8001aba:	f004 fbc0 	bl	800623e <HAL_SPI_Receive>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001ac8:	f001 ff24 	bl	8003914 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d202      	bcs.n	8001ade <SPI_WIFI_ResetModule+0x7a>
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001ae4:	f002 fc58 	bl	8004398 <HAL_GPIO_WritePin>
      return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e021      	b.n	8001b32 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001aee:	2102      	movs	r1, #2
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001af2:	f002 fc39 	bl	8004368 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d0d7      	beq.n	8001aac <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001afc:	2201      	movs	r2, #1
 8001afe:	2101      	movs	r1, #1
 8001b00:	480e      	ldr	r0, [pc, #56]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001b02:	f002 fc49 	bl	8004398 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001b06:	783b      	ldrb	r3, [r7, #0]
 8001b08:	2b15      	cmp	r3, #21
 8001b0a:	d10e      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b15      	cmp	r3, #21
 8001b10:	d10b      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b0d      	cmp	r3, #13
 8001b16:	d108      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001b18:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d105      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001b1e:	793b      	ldrb	r3, [r7, #4]
 8001b20:	2b3e      	cmp	r3, #62	; 0x3e
 8001b22:	d102      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d002      	beq.n	8001b30 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e000      	b.n	8001b32 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	200027cc 	.word	0x200027cc

08001b44 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <SPI_WIFI_DeInit+0x10>)
 8001b4a:	f004 fb50 	bl	80061ee <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200027cc 	.word	0x200027cc

08001b58 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001b60:	f001 fed8 	bl	8003914 <HAL_GetTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b68:	e00a      	b.n	8001b80 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b6a:	f001 fed3 	bl	8003914 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d902      	bls.n	8001b80 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e007      	b.n	8001b90 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b80:	2102      	movs	r1, #2
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <wait_cmddata_rdy_high+0x40>)
 8001b84:	f002 fbf0 	bl	8004368 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d1ed      	bne.n	8001b6a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	48001000 	.word	0x48001000

08001b9c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ba4:	f001 feb6 	bl	8003914 <HAL_GetTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001bac:	e00a      	b.n	8001bc4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bae:	f001 feb1 	bl	8003914 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d902      	bls.n	8001bc4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e004      	b.n	8001bce <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <wait_cmddata_rdy_rising_event+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d0f0      	beq.n	8001bae <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001bcc:	2300      	movs	r3, #0
#endif
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000220 	.word	0x20000220

08001bdc <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001be4:	f001 fe96 	bl	8003914 <HAL_GetTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001bec:	e00a      	b.n	8001c04 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bee:	f001 fe91 	bl	8003914 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d902      	bls.n	8001c04 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e004      	b.n	8001c0e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <wait_spi_rx_event+0x3c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d0f0      	beq.n	8001bee <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001c0c:	2300      	movs	r3, #0
#endif
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000218 	.word	0x20000218

08001c1c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001c24:	f001 fe76 	bl	8003914 <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001c2c:	e00a      	b.n	8001c44 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c2e:	f001 fe71 	bl	8003914 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d902      	bls.n	8001c44 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e004      	b.n	8001c4e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <wait_spi_tx_event+0x3c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d0f0      	beq.n	8001c2e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001c4c:	2300      	movs	r3, #0
#endif
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000021c 	.word	0x2000021c

08001c5c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	460b      	mov	r3, r1
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2101      	movs	r1, #1
 8001c72:	4834      	ldr	r0, [pc, #208]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001c74:	f002 fb90 	bl	8004398 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f8e3 	bl	8001e44 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff8b 	bl	8001b9c <wait_cmddata_rdy_rising_event>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da02      	bge.n	8001c92 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001c8c:	f06f 0302 	mvn.w	r3, #2
 8001c90:	e054      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001c92:	2200      	movs	r2, #0
 8001c94:	2101      	movs	r1, #1
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001c98:	f002 fb7e 	bl	8004398 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001c9c:	200f      	movs	r0, #15
 8001c9e:	f000 f8d1 	bl	8001e44 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001ca2:	e03d      	b.n	8001d20 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	db02      	blt.n	8001cb4 <SPI_WIFI_ReceiveData+0x58>
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13c      	bne.n	8001d2e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <SPI_WIFI_ReceiveData+0xec>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4822      	ldr	r0, [pc, #136]	; (8001d4c <SPI_WIFI_ReceiveData+0xf0>)
 8001cc4:	f004 fe8c 	bl	80069e0 <HAL_SPI_Receive_IT>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	481c      	ldr	r0, [pc, #112]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001cd4:	f002 fb60 	bl	8004398 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	e02e      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff7b 	bl	8001bdc <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001ce6:	7d3a      	ldrb	r2, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	7d7a      	ldrb	r2, [r7, #21]
 8001cf2:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d0a:	db09      	blt.n	8001d20 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2101      	movs	r1, #1
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d12:	f002 fb41 	bl	8004398 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001d16:	f7ff fea5 	bl	8001a64 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d1a:	f06f 0303 	mvn.w	r3, #3
 8001d1e:	e00d      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001d20:	2102      	movs	r1, #2
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d24:	f002 fb20 	bl	8004368 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d0ba      	beq.n	8001ca4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d34:	f002 fb30 	bl	8004398 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	48001000 	.word	0x48001000
 8001d48:	20000218 	.word	0x20000218
 8001d4c:	200027cc 	.word	0x200027cc

08001d50 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fef9 	bl	8001b58 <wait_cmddata_rdy_high>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da02      	bge.n	8001d72 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	e04f      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <SPI_WIFI_SendData+0xcc>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001d7e:	f002 fb0b 	bl	8004398 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f85e 	bl	8001e44 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d919      	bls.n	8001dc2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <SPI_WIFI_SendData+0xd4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4822      	ldr	r0, [pc, #136]	; (8001e28 <SPI_WIFI_SendData+0xd8>)
 8001da0:	f004 fd90 	bl	80068c4 <HAL_SPI_Transmit_IT>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001daa:	2201      	movs	r2, #1
 8001dac:	2101      	movs	r1, #1
 8001dae:	481c      	ldr	r0, [pc, #112]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001db0:	f002 faf2 	bl	8004398 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	e02b      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff2d 	bl	8001c1c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001dd8:	230a      	movs	r3, #10
 8001dda:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <SPI_WIFI_SendData+0xd4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	2201      	movs	r2, #1
 8001de8:	4619      	mov	r1, r3
 8001dea:	480f      	ldr	r0, [pc, #60]	; (8001e28 <SPI_WIFI_SendData+0xd8>)
 8001dec:	f004 fd6a 	bl	80068c4 <HAL_SPI_Transmit_IT>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001df6:	2201      	movs	r2, #1
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001dfc:	f002 facc 	bl	8004398 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	e005      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff07 	bl	8001c1c <wait_spi_tx_event>
    
  }
  return len;
 8001e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000220 	.word	0x20000220
 8001e20:	48001000 	.word	0x48001000
 8001e24:	2000021c 	.word	0x2000021c
 8001e28:	200027cc 	.word	0x200027cc

08001e2c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f001 fd79 	bl	800392c <HAL_Delay>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d122      	bne.n	8001ea2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <SPI_WIFI_DelayUs+0x98>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <SPI_WIFI_DelayUs+0x9c>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001e72:	f001 fd4f 	bl	8003914 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001e78:	e002      	b.n	8001e80 <SPI_WIFI_DelayUs+0x3c>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8001e86:	f001 fd45 	bl	8003914 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e92:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <SPI_WIFI_DelayUs+0x5e>
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <SPI_WIFI_DelayUs+0x98>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <SPI_WIFI_DelayUs+0xa0>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9a      	lsrs	r2, r3, #18
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001ec2:	e002      	b.n	8001eca <SPI_WIFI_DelayUs+0x86>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f9      	bne.n	8001ec4 <SPI_WIFI_DelayUs+0x80>
  return;
 8001ed0:	bf00      	nop
}
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000224 	.word	0x20000224
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	10624dd3 	.word	0x10624dd3
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_SPI_RxCpltCallback+0x24>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_SPI_RxCpltCallback+0x24>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000218 	.word	0x20000218

08001f10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_SPI_TxCpltCallback+0x24>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_SPI_TxCpltCallback+0x24>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000021c 	.word	0x2000021c

08001f38 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SPI_WIFI_ISR+0x1c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <SPI_WIFI_ISR+0x1c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
   }
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	20000220 	.word	0x20000220

08001f58 <inizialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void inizialize(struct sharedValues_t *sv){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	sv->humidity=0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
	sv->proximity=0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
	sv->temperature_val1=0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
	sv->temperature_val2=0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]


	sv->primo = osSemaphoreNew(1, 1, NULL);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2101      	movs	r1, #1
 8001f82:	2001      	movs	r0, #1
 8001f84:	f006 fc5c 	bl	8008840 <osSemaphoreNew>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
	sv->secondo = osSemaphoreNew(1, 1, NULL);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2101      	movs	r1, #1
 8001f92:	2001      	movs	r0, #1
 8001f94:	f006 fc54 	bl	8008840 <osSemaphoreNew>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	615a      	str	r2, [r3, #20]


}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <main>:
  * @retval int
  */


int main(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	   HAL_Init();
 8001fac:	f001 fc4a 	bl	8003844 <HAL_Init>

	   /* Configure the system clock */
	   SystemClock_Config();
 8001fb0:	f000 f88a 	bl	80020c8 <SystemClock_Config>
	   /* Configure LED2 */
	   BSP_LED_Init(LED2);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f001 fb2f 	bl	8003618 <BSP_LED_Init>

      /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f001 fb71 	bl	80036a4 <BSP_PB_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <main+0xe0>)
 8001fc4:	4a31      	ldr	r2, [pc, #196]	; (800208c <main+0xe4>)
 8001fc6:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <main+0xe0>)
 8001fca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fce:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <main+0xe0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <main+0xe0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <main+0xe0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <main+0xe0>)
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <main+0xe0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <main+0xe0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <main+0xe0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <main+0xe0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8002000:	4921      	ldr	r1, [pc, #132]	; (8002088 <main+0xe0>)
 8002002:	2000      	movs	r0, #0
 8002004:	f001 fba4 	bl	8003750 <BSP_COM_Init>
#endif /* TERMINAL_USE */

		MX_GPIO_Init();
 8002008:	f000 fa7e 	bl	8002508 <MX_GPIO_Init>
		MX_DFSDM1_Init();
 800200c:	f000 f912 	bl	8002234 <MX_DFSDM1_Init>
		MX_I2C2_Init();
 8002010:	f000 f948 	bl	80022a4 <MX_I2C2_Init>
		MX_QUADSPI_Init();
 8002014:	f000 f986 	bl	8002324 <MX_QUADSPI_Init>
		MX_SPI3_Init();
 8002018:	f000 f9aa 	bl	8002370 <MX_SPI3_Init>
		MX_USART1_UART_Init();
 800201c:	f000 f9e6 	bl	80023ec <MX_USART1_UART_Init>
		MX_USART3_UART_Init();
 8002020:	f000 fa14 	bl	800244c <MX_USART3_UART_Init>
		MX_USB_OTG_FS_PCD_Init();
 8002024:	f000 fa42 	bl	80024ac <MX_USB_OTG_FS_PCD_Init>





	  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8002028:	4819      	ldr	r0, [pc, #100]	; (8002090 <main+0xe8>)
 800202a:	f009 fe3b 	bl	800bca4 <puts>
	  TERMOUT("TCP Client Instructions :\n");
 800202e:	4819      	ldr	r0, [pc, #100]	; (8002094 <main+0xec>)
 8002030:	f009 fe38 	bl	800bca4 <puts>
	  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <main+0xf0>)
 8002036:	f009 fe35 	bl	800bca4 <puts>
	  TERMOUT("   you configured using the Configuration Access Point.\n");
 800203a:	4818      	ldr	r0, [pc, #96]	; (800209c <main+0xf4>)
 800203c:	f009 fe32 	bl	800bca4 <puts>
	  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8002040:	4817      	ldr	r0, [pc, #92]	; (80020a0 <main+0xf8>)
 8002042:	f009 fe2f 	bl	800bca4 <puts>
	  TERMOUT("   with port(8002).\n");
 8002046:	4817      	ldr	r0, [pc, #92]	; (80020a4 <main+0xfc>)
 8002048:	f009 fe2c 	bl	800bca4 <puts>
	  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 800204c:	4816      	ldr	r0, [pc, #88]	; (80020a8 <main+0x100>)
 800204e:	f009 fe29 	bl	800bca4 <puts>


		    /* Init scheduler ----------------------------------------------------------------------------*/
	  osKernelInitialize();
 8002052:	f006 fab7 	bl	80085c4 <osKernelInitialize>


	  /* USER CODE BEGIN RTOS_THREADS */
	  //inizialize the structure
	  inizialize(&sharedValues);
 8002056:	4815      	ldr	r0, [pc, #84]	; (80020ac <main+0x104>)
 8002058:	f7ff ff7e 	bl	8001f58 <inizialize>
	  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <main+0x108>)
 800205e:	2100      	movs	r1, #0
 8002060:	4814      	ldr	r0, [pc, #80]	; (80020b4 <main+0x10c>)
 8002062:	f006 fb19 	bl	8008698 <osThreadNew>
 8002066:	4602      	mov	r2, r0
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <main+0x110>)
 800206a:	601a      	str	r2, [r3, #0]
	  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <main+0x114>)
 800206e:	2100      	movs	r1, #0
 8002070:	4813      	ldr	r0, [pc, #76]	; (80020c0 <main+0x118>)
 8002072:	f006 fb11 	bl	8008698 <osThreadNew>
 8002076:	4602      	mov	r2, r0
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <main+0x11c>)
 800207a:	601a      	str	r2, [r3, #0]


	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	  osKernelStart();
 800207c:	f006 fad6 	bl	800862c <osKernelStart>
 8002080:	2300      	movs	r3, #0


}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20003788 	.word	0x20003788
 800208c:	40013800 	.word	0x40013800
 8002090:	0800d61c 	.word	0x0800d61c
 8002094:	0800d65c 	.word	0x0800d65c
 8002098:	0800d678 	.word	0x0800d678
 800209c:	0800d6b8 	.word	0x0800d6b8
 80020a0:	0800d6f0 	.word	0x0800d6f0
 80020a4:	0800d730 	.word	0x0800d730
 80020a8:	0800d744 	.word	0x0800d744
 80020ac:	20002d40 	.word	0x20002d40
 80020b0:	0800dbd4 	.word	0x0800dbd4
 80020b4:	08002b95 	.word	0x08002b95
 80020b8:	20002868 	.word	0x20002868
 80020bc:	0800dbf8 	.word	0x0800dbf8
 80020c0:	08002ca9 	.word	0x08002ca9
 80020c4:	20002e40 	.word	0x20002e40

080020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0b8      	sub	sp, #224	; 0xe0
 80020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020d2:	2244      	movs	r2, #68	; 0x44
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f009 fd68 	bl	800bbac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	463b      	mov	r3, r7
 80020ee:	2288      	movs	r2, #136	; 0x88
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f009 fd5a 	bl	800bbac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020f8:	f002 fbec 	bl	80048d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <SystemClock_Config+0x140>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	4a41      	ldr	r2, [pc, #260]	; (8002208 <SystemClock_Config+0x140>)
 8002104:	f023 0318 	bic.w	r3, r3, #24
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800210c:	2314      	movs	r3, #20
 800210e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002112:	2301      	movs	r3, #1
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002118:	2301      	movs	r3, #1
 800211a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002124:	2360      	movs	r3, #96	; 0x60
 8002126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002130:	2301      	movs	r3, #1
 8002132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800213c:	2328      	movs	r3, #40	; 0x28
 800213e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002142:	2307      	movs	r3, #7
 8002144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fcfb 	bl	8004b54 <HAL_RCC_OscConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002164:	f000 fdaa 	bl	8002cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002168:	230f      	movs	r3, #15
 800216a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800216e:	2303      	movs	r3, #3
 8002170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002186:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800218a:	2104      	movs	r1, #4
 800218c:	4618      	mov	r0, r3
 800218e:	f003 f8c7 	bl	8005320 <HAL_RCC_ClockConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002198:	f000 fd90 	bl	8002cbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <SystemClock_Config+0x144>)
 800219e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80021b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80021b8:	2301      	movs	r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80021c0:	2318      	movs	r3, #24
 80021c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80021c4:	2307      	movs	r3, #7
 80021c6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021c8:	2302      	movs	r3, #2
 80021ca:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80021d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d6:	463b      	mov	r3, r7
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 faa5 	bl	8005728 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80021e4:	f000 fd6a 	bl	8002cbc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ec:	f002 fb90 	bl	8004910 <HAL_PWREx_ControlVoltageScaling>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <SystemClock_Config+0x132>
  {
    Error_Handler();
 80021f6:	f000 fd61 	bl	8002cbc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80021fa:	f003 fd7b 	bl	8005cf4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80021fe:	bf00      	nop
 8002200:	37e0      	adds	r7, #224	; 0xe0
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	00012085 	.word	0x00012085

08002210 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002218:	1d39      	adds	r1, r7, #4
 800221a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800221e:	2201      	movs	r2, #1
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <__io_putchar+0x20>)
 8002222:	f005 fab8 	bl	8007796 <HAL_UART_Transmit>

  return ch;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20003788 	.word	0x20003788

08002234 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <MX_DFSDM1_Init+0x68>)
 800223a:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <MX_DFSDM1_Init+0x6c>)
 800223c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002240:	2201      	movs	r2, #1
 8002242:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_DFSDM1_Init+0x68>)
 800224c:	2202      	movs	r2, #2
 800224e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_DFSDM1_Init+0x68>)
 800225e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002262:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_DFSDM1_Init+0x68>)
 800226c:	2204      	movs	r2, #4
 800226e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002278:	2201      	movs	r2, #1
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <MX_DFSDM1_Init+0x68>)
 800227e:	2200      	movs	r2, #0
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_DFSDM1_Init+0x68>)
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_DFSDM1_Init+0x68>)
 800228a:	f001 fc83 	bl	8003b94 <HAL_DFSDM_ChannelInit>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002294:	f000 fd12 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20002830 	.word	0x20002830
 80022a0:	40016020 	.word	0x40016020

080022a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_I2C2_Init+0x74>)
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <MX_I2C2_Init+0x78>)
 80022ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_I2C2_Init+0x74>)
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <MX_I2C2_Init+0x7c>)
 80022b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_I2C2_Init+0x74>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_I2C2_Init+0x74>)
 80022bc:	2201      	movs	r2, #1
 80022be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_I2C2_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_I2C2_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_I2C2_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_I2C2_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_I2C2_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022de:	480e      	ldr	r0, [pc, #56]	; (8002318 <MX_I2C2_Init+0x74>)
 80022e0:	f002 f88a 	bl	80043f8 <HAL_I2C_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80022ea:	f000 fce7 	bl	8002cbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022ee:	2100      	movs	r1, #0
 80022f0:	4809      	ldr	r0, [pc, #36]	; (8002318 <MX_I2C2_Init+0x74>)
 80022f2:	f002 f910 	bl	8004516 <HAL_I2CEx_ConfigAnalogFilter>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80022fc:	f000 fcde 	bl	8002cbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002300:	2100      	movs	r1, #0
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_I2C2_Init+0x74>)
 8002304:	f002 f952 	bl	80045ac <HAL_I2CEx_ConfigDigitalFilter>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800230e:	f000 fcd5 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20002cf4 	.word	0x20002cf4
 800231c:	40005800 	.word	0x40005800
 8002320:	10909cec 	.word	0x10909cec

08002324 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_QUADSPI_Init+0x44>)
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <MX_QUADSPI_Init+0x48>)
 800232c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_QUADSPI_Init+0x44>)
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_QUADSPI_Init+0x44>)
 8002336:	2201      	movs	r2, #1
 8002338:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_QUADSPI_Init+0x44>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_QUADSPI_Init+0x44>)
 8002342:	2201      	movs	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_QUADSPI_Init+0x44>)
 8002348:	2200      	movs	r2, #0
 800234a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_QUADSPI_Init+0x44>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_QUADSPI_Init+0x44>)
 8002354:	f002 fb42 	bl	80049dc <HAL_QSPI_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800235e:	f000 fcad 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20002e44 	.word	0x20002e44
 800236c:	a0001000 	.word	0xa0001000

08002370 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_SPI3_Init+0x74>)
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <MX_SPI3_Init+0x78>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_SPI3_Init+0x74>)
 800237c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002380:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_SPI3_Init+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_SPI3_Init+0x74>)
 800238a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800238e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_SPI3_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <MX_SPI3_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_SPI3_Init+0x74>)
 800239e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023be:	2207      	movs	r2, #7
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023ca:	2208      	movs	r2, #8
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_SPI3_Init+0x74>)
 80023d0:	f003 fe6a 	bl	80060a8 <HAL_SPI_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80023da:	f000 fc6f 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20002d58 	.word	0x20002d58
 80023e8:	40003c00 	.word	0x40003c00

080023ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_USART1_UART_Init+0x58>)
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <MX_USART1_UART_Init+0x5c>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_USART1_UART_Init+0x58>)
 80023f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_USART1_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_USART1_UART_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_USART1_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_USART1_UART_Init+0x58>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_USART1_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_USART1_UART_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_USART1_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_USART1_UART_Init+0x58>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_USART1_UART_Init+0x58>)
 8002430:	f005 f963 	bl	80076fa <HAL_UART_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800243a:	f000 fc3f 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20002dbc 	.word	0x20002dbc
 8002448:	40013800 	.word	0x40013800

0800244c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <MX_USART3_UART_Init+0x5c>)
 8002454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800245c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART3_UART_Init+0x58>)
 8002490:	f005 f933 	bl	80076fa <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800249a:	f000 fc0f 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000286c 	.word	0x2000286c
 80024a8:	40004800 	.word	0x40004800

080024ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ba:	2206      	movs	r2, #6
 80024bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c0:	2202      	movs	r2, #2
 80024c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024ee:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f0:	f002 f8a8 	bl	8004644 <HAL_PCD_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024fa:	f000 fbdf 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200028ec 	.word	0x200028ec

08002508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800251e:	4bba      	ldr	r3, [pc, #744]	; (8002808 <MX_GPIO_Init+0x300>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4ab9      	ldr	r2, [pc, #740]	; (8002808 <MX_GPIO_Init+0x300>)
 8002524:	f043 0310 	orr.w	r3, r3, #16
 8002528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252a:	4bb7      	ldr	r3, [pc, #732]	; (8002808 <MX_GPIO_Init+0x300>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	4bb4      	ldr	r3, [pc, #720]	; (8002808 <MX_GPIO_Init+0x300>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4ab3      	ldr	r2, [pc, #716]	; (8002808 <MX_GPIO_Init+0x300>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002542:	4bb1      	ldr	r3, [pc, #708]	; (8002808 <MX_GPIO_Init+0x300>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4bae      	ldr	r3, [pc, #696]	; (8002808 <MX_GPIO_Init+0x300>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4aad      	ldr	r2, [pc, #692]	; (8002808 <MX_GPIO_Init+0x300>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4bab      	ldr	r3, [pc, #684]	; (8002808 <MX_GPIO_Init+0x300>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	4ba8      	ldr	r3, [pc, #672]	; (8002808 <MX_GPIO_Init+0x300>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4aa7      	ldr	r2, [pc, #668]	; (8002808 <MX_GPIO_Init+0x300>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002572:	4ba5      	ldr	r3, [pc, #660]	; (8002808 <MX_GPIO_Init+0x300>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800257e:	4ba2      	ldr	r3, [pc, #648]	; (8002808 <MX_GPIO_Init+0x300>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	4aa1      	ldr	r2, [pc, #644]	; (8002808 <MX_GPIO_Init+0x300>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258a:	4b9f      	ldr	r3, [pc, #636]	; (8002808 <MX_GPIO_Init+0x300>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	f44f 718a 	mov.w	r1, #276	; 0x114
 800259c:	489b      	ldr	r0, [pc, #620]	; (800280c <MX_GPIO_Init+0x304>)
 800259e:	f001 fefb 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f248 1104 	movw	r1, #33028	; 0x8104
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f001 fef4 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80025b0:	2200      	movs	r2, #0
 80025b2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80025b6:	4896      	ldr	r0, [pc, #600]	; (8002810 <MX_GPIO_Init+0x308>)
 80025b8:	f001 feee 	bl	8004398 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	f241 0181 	movw	r1, #4225	; 0x1081
 80025c2:	4894      	ldr	r0, [pc, #592]	; (8002814 <MX_GPIO_Init+0x30c>)
 80025c4:	f001 fee8 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ce:	4891      	ldr	r0, [pc, #580]	; (8002814 <MX_GPIO_Init+0x30c>)
 80025d0:	f001 fee2 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80025da:	488f      	ldr	r0, [pc, #572]	; (8002818 <MX_GPIO_Init+0x310>)
 80025dc:	f001 fedc 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2120      	movs	r1, #32
 80025e4:	488a      	ldr	r0, [pc, #552]	; (8002810 <MX_GPIO_Init+0x308>)
 80025e6:	f001 fed7 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	2101      	movs	r1, #1
 80025ee:	4887      	ldr	r0, [pc, #540]	; (800280c <MX_GPIO_Init+0x304>)
 80025f0:	f001 fed2 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80025f4:	f240 1315 	movw	r3, #277	; 0x115
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	487f      	ldr	r0, [pc, #508]	; (800280c <MX_GPIO_Init+0x304>)
 800260e:	f001 fc0f 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002612:	236a      	movs	r3, #106	; 0x6a
 8002614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002616:	4b81      	ldr	r3, [pc, #516]	; (800281c <MX_GPIO_Init+0x314>)
 8002618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	4879      	ldr	r0, [pc, #484]	; (800280c <MX_GPIO_Init+0x304>)
 8002626:	f001 fc03 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800262a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800262e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <MX_GPIO_Init+0x318>)
 8002632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	4876      	ldr	r0, [pc, #472]	; (8002818 <MX_GPIO_Init+0x310>)
 8002640:	f001 fbf6 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002644:	233f      	movs	r3, #63	; 0x3f
 8002646:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002648:	230b      	movs	r3, #11
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4870      	ldr	r0, [pc, #448]	; (8002818 <MX_GPIO_Init+0x310>)
 8002658:	f001 fbea 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800265c:	2303      	movs	r3, #3
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800266c:	2308      	movs	r3, #8
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f001 fbd9 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800267e:	f248 1304 	movw	r3, #33028	; 0x8104
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f001 fbc9 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800269e:	2308      	movs	r3, #8
 80026a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ae:	2301      	movs	r3, #1
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026bc:	f001 fbb8 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80026c0:	2310      	movs	r3, #16
 80026c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026c4:	230b      	movs	r3, #11
 80026c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d6:	f001 fbab 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80026da:	23e0      	movs	r3, #224	; 0xe0
 80026dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ea:	2305      	movs	r3, #5
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f8:	f001 fb9a 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80026fc:	2301      	movs	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <MX_GPIO_Init+0x314>)
 8002702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	4840      	ldr	r0, [pc, #256]	; (8002810 <MX_GPIO_Init+0x308>)
 8002710:	f001 fb8e 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002714:	2302      	movs	r3, #2
 8002716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002718:	230b      	movs	r3, #11
 800271a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	483a      	ldr	r0, [pc, #232]	; (8002810 <MX_GPIO_Init+0x308>)
 8002728:	f001 fb82 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800272c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002730:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	4832      	ldr	r0, [pc, #200]	; (8002810 <MX_GPIO_Init+0x308>)
 8002746:	f001 fb73 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800274a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800274e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <MX_GPIO_Init+0x314>)
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	482d      	ldr	r0, [pc, #180]	; (8002814 <MX_GPIO_Init+0x30c>)
 8002760:	f001 fb66 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002764:	f243 0381 	movw	r3, #12417	; 0x3081
 8002768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276a:	2301      	movs	r3, #1
 800276c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4825      	ldr	r0, [pc, #148]	; (8002814 <MX_GPIO_Init+0x30c>)
 800277e:	f001 fb57 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002782:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	481f      	ldr	r0, [pc, #124]	; (8002818 <MX_GPIO_Init+0x310>)
 800279c:	f001 fb48 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80027a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <MX_GPIO_Init+0x314>)
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4818      	ldr	r0, [pc, #96]	; (8002818 <MX_GPIO_Init+0x310>)
 80027b6:	f001 fb3b 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80027ba:	2302      	movs	r3, #2
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ca:	2305      	movs	r3, #5
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	480f      	ldr	r0, [pc, #60]	; (8002814 <MX_GPIO_Init+0x30c>)
 80027d6:	f001 fb2b 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80027da:	2378      	movs	r3, #120	; 0x78
 80027dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ea:	2307      	movs	r3, #7
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <MX_GPIO_Init+0x30c>)
 80027f6:	f001 fb1b 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80027fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002800:	2312      	movs	r3, #18
 8002802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002804:	2301      	movs	r3, #1
 8002806:	e00d      	b.n	8002824 <MX_GPIO_Init+0x31c>
 8002808:	40021000 	.word	0x40021000
 800280c:	48001000 	.word	0x48001000
 8002810:	48000400 	.word	0x48000400
 8002814:	48000c00 	.word	0x48000c00
 8002818:	48000800 	.word	0x48000800
 800281c:	10110000 	.word	0x10110000
 8002820:	10210000 	.word	0x10210000
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800282a:	2304      	movs	r3, #4
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <MX_GPIO_Init+0x35c>)
 8002836:	f001 fafb 	bl	8003e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	2017      	movs	r0, #23
 8002840:	f001 f971 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002844:	2017      	movs	r0, #23
 8002846:	f001 f98a 	bl	8003b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2028      	movs	r0, #40	; 0x28
 8002850:	f001 f969 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002854:	2028      	movs	r0, #40	; 0x28
 8002856:	f001 f982 	bl	8003b5e <HAL_NVIC_EnableIRQ>

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	48000400 	.word	0x48000400

08002868 <controlla_valori_telefono>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */

void controlla_valori_telefono(struct sharedValues_t *sv){
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b0a4      	sub	sp, #144	; 0x90
 800286c:	af04      	add	r7, sp, #16
 800286e:	6078      	str	r0, [r7, #4]

	uint8_t TxData[] = "STM32 : Hello!\n";
 8002870:	4bb2      	ldr	r3, [pc, #712]	; (8002b3c <controlla_valori_telefono+0x2d4>)
 8002872:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			int32_t ret;
			uint16_t Datalen;
			uint8_t  MAC_Addr[6];
			uint8_t  IP_Addr[4];

			int32_t Socket = -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	67bb      	str	r3, [r7, #120]	; 0x78

			int16_t Trials = CONNECTION_TRIAL_MAX;
 8002882:	230a      	movs	r3, #10
 8002884:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			char text[30];

			/*Initialize  WIFI module */
			  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8002888:	f000 fd9e 	bl	80033c8 <WIFI_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8099 	bne.w	80029c6 <controlla_valori_telefono+0x15e>
			  {
				TERMOUT("> WIFI Module Initialized.\n");
 8002894:	48aa      	ldr	r0, [pc, #680]	; (8002b40 <controlla_valori_telefono+0x2d8>)
 8002896:	f009 fa05 	bl	800bca4 <puts>
				if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800289a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fde0 	bl	8003464 <WIFI_GetMAC_Address>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <controlla_valori_telefono+0x74>
				{
				  TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80028aa:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80028ae:	4618      	mov	r0, r3
 80028b0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80028b4:	461c      	mov	r4, r3
 80028b6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80028ba:	461d      	mov	r5, r3
 80028bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80028c0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80028c4:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 80028c8:	9102      	str	r1, [sp, #8]
 80028ca:	9201      	str	r2, [sp, #4]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	462b      	mov	r3, r5
 80028d0:	4622      	mov	r2, r4
 80028d2:	4601      	mov	r1, r0
 80028d4:	489b      	ldr	r0, [pc, #620]	; (8002b44 <controlla_valori_telefono+0x2dc>)
 80028d6:	f009 f971 	bl	800bbbc <iprintf>
 80028da:	e005      	b.n	80028e8 <controlla_valori_telefono+0x80>
						   MAC_Addr[4],
						   MAC_Addr[5]);
				}
				else
				{
				  TERMOUT("> ERROR : CANNOT get MAC address\n");
 80028dc:	489a      	ldr	r0, [pc, #616]	; (8002b48 <controlla_valori_telefono+0x2e0>)
 80028de:	f009 f9e1 	bl	800bca4 <puts>
				  BSP_LED_On(LED2);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f000 fec8 	bl	8003678 <BSP_LED_On>
				}

				if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80028e8:	2203      	movs	r2, #3
 80028ea:	4998      	ldr	r1, [pc, #608]	; (8002b4c <controlla_valori_telefono+0x2e4>)
 80028ec:	4897      	ldr	r0, [pc, #604]	; (8002b4c <controlla_valori_telefono+0x2e4>)
 80028ee:	f000 fd97 	bl	8003420 <WIFI_Connect>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d15f      	bne.n	80029b8 <controlla_valori_telefono+0x150>
				{
				  TERMOUT("> es-wifi module connected \n");
 80028f8:	4895      	ldr	r0, [pc, #596]	; (8002b50 <controlla_valori_telefono+0x2e8>)
 80028fa:	f009 f9d3 	bl	800bca4 <puts>
				  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80028fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fdc4 	bl	8003490 <WIFI_GetIP_Address>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d14d      	bne.n	80029aa <controlla_valori_telefono+0x142>
				  {
					TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800290e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002912:	4619      	mov	r1, r3
 8002914:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002918:	461a      	mov	r2, r3
 800291a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800291e:	4618      	mov	r0, r3
 8002920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	488a      	ldr	r0, [pc, #552]	; (8002b54 <controlla_valori_telefono+0x2ec>)
 800292a:	f009 f947 	bl	800bbbc <iprintf>
						   IP_Addr[0],
						   IP_Addr[1],
						   IP_Addr[2],
						   IP_Addr[3]);

					TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 800292e:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <controlla_valori_telefono+0x2f0>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <controlla_valori_telefono+0x2f0>)
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	4618      	mov	r0, r3
 800293a:	4b87      	ldr	r3, [pc, #540]	; (8002b58 <controlla_valori_telefono+0x2f0>)
 800293c:	789b      	ldrb	r3, [r3, #2]
 800293e:	461c      	mov	r4, r3
 8002940:	4b85      	ldr	r3, [pc, #532]	; (8002b58 <controlla_valori_telefono+0x2f0>)
 8002942:	78db      	ldrb	r3, [r3, #3]
 8002944:	461a      	mov	r2, r3
 8002946:	f641 7342 	movw	r3, #8002	; 0x1f42
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	9200      	str	r2, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	4602      	mov	r2, r0
 8002952:	4882      	ldr	r0, [pc, #520]	; (8002b5c <controlla_valori_telefono+0x2f4>)
 8002954:	f009 f932 	bl	800bbbc <iprintf>
						   RemoteIP[1],
						   RemoteIP[2],
						   RemoteIP[3],
										 RemotePORT);

					while (Trials--)
 8002958:	e013      	b.n	8002982 <controlla_valori_telefono+0x11a>
					{
					  if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 800295a:	2300      	movs	r3, #0
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4b7c      	ldr	r3, [pc, #496]	; (8002b58 <controlla_valori_telefono+0x2f0>)
 8002966:	4a7e      	ldr	r2, [pc, #504]	; (8002b60 <controlla_valori_telefono+0x2f8>)
 8002968:	2100      	movs	r1, #0
 800296a:	2000      	movs	r0, #0
 800296c:	f000 fdac 	bl	80034c8 <WIFI_OpenClientConnection>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <controlla_valori_telefono+0x11a>
					  {
						TERMOUT("> TCP Connection opened successfully.\n");
 8002976:	487b      	ldr	r0, [pc, #492]	; (8002b64 <controlla_valori_telefono+0x2fc>)
 8002978:	f009 f994 	bl	800bca4 <puts>
						Socket = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	67bb      	str	r3, [r7, #120]	; 0x78
						break;
 8002980:	e008      	b.n	8002994 <controlla_valori_telefono+0x12c>
					while (Trials--)
 8002982:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002986:	b29a      	uxth	r2, r3
 8002988:	3a01      	subs	r2, #1
 800298a:	b292      	uxth	r2, r2
 800298c:	f8a7 2076 	strh.w	r2, [r7, #118]	; 0x76
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e2      	bne.n	800295a <controlla_valori_telefono+0xf2>
					  }

					}
					if(Socket == -1)
 8002994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d11a      	bne.n	80029d2 <controlla_valori_telefono+0x16a>
					{
					  TERMOUT("> ERROR : Cannot open Connection\n");
 800299c:	4872      	ldr	r0, [pc, #456]	; (8002b68 <controlla_valori_telefono+0x300>)
 800299e:	f009 f981 	bl	800bca4 <puts>
					  BSP_LED_On(LED2);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 fe68 	bl	8003678 <BSP_LED_On>
 80029a8:	e013      	b.n	80029d2 <controlla_valori_telefono+0x16a>
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 80029aa:	4870      	ldr	r0, [pc, #448]	; (8002b6c <controlla_valori_telefono+0x304>)
 80029ac:	f009 f97a 	bl	800bca4 <puts>
					BSP_LED_On(LED2);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f000 fe61 	bl	8003678 <BSP_LED_On>
 80029b6:	e00c      	b.n	80029d2 <controlla_valori_telefono+0x16a>
				  }
				}
				else
				{
				  TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80029b8:	486d      	ldr	r0, [pc, #436]	; (8002b70 <controlla_valori_telefono+0x308>)
 80029ba:	f009 f973 	bl	800bca4 <puts>
				  BSP_LED_On(LED2);
 80029be:	2000      	movs	r0, #0
 80029c0:	f000 fe5a 	bl	8003678 <BSP_LED_On>
 80029c4:	e005      	b.n	80029d2 <controlla_valori_telefono+0x16a>
				}
			  }
			  else
			  {
				TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 80029c6:	486b      	ldr	r0, [pc, #428]	; (8002b74 <controlla_valori_telefono+0x30c>)
 80029c8:	f009 f96c 	bl	800bca4 <puts>
				BSP_LED_On(LED2);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f000 fe53 	bl	8003678 <BSP_LED_On>
			  }

			  while(1)
			  {
				 // osSemaphoreAcquire(primo, portMAX_DELAY);
				if(Socket != -1)
 80029d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d0fb      	beq.n	80029d2 <controlla_valori_telefono+0x16a>
				{
				  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80029da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029dc:	b2d8      	uxtb	r0, r3
 80029de:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 80029e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	f240 12f3 	movw	r2, #499	; 0x1f3
 80029ee:	4962      	ldr	r1, [pc, #392]	; (8002b78 <controlla_valori_telefono+0x310>)
 80029f0:	f000 fdc6 	bl	8003580 <WIFI_ReceiveData>
 80029f4:	4603      	mov	r3, r0
 80029f6:	67fb      	str	r3, [r7, #124]	; 0x7c
				  if(ret == WIFI_STATUS_OK)
 80029f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 8097 	bne.w	8002b2e <controlla_valori_telefono+0x2c6>
				  {
					if(Datalen > 0)
 8002a00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0e4      	beq.n	80029d2 <controlla_valori_telefono+0x16a>
					{
					  RxData[Datalen]=0;
 8002a08:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <controlla_valori_telefono+0x310>)
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]
					  TERMOUT("Received: %s\n",RxData);
 8002a14:	4958      	ldr	r1, [pc, #352]	; (8002b78 <controlla_valori_telefono+0x310>)
 8002a16:	4859      	ldr	r0, [pc, #356]	; (8002b7c <controlla_valori_telefono+0x314>)
 8002a18:	f009 f8d0 	bl	800bbbc <iprintf>
					  int ritorno = atoi(RxData);
 8002a1c:	4856      	ldr	r0, [pc, #344]	; (8002b78 <controlla_valori_telefono+0x310>)
 8002a1e:	f009 f87d 	bl	800bb1c <atoi>
 8002a22:	6738      	str	r0, [r7, #112]	; 0x70
					  if(ritorno==45){
 8002a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a26:	2b2d      	cmp	r3, #45	; 0x2d
 8002a28:	d10e      	bne.n	8002a48 <controlla_valori_telefono+0x1e0>
						  ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8002a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002a32:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002a36:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	2210      	movs	r2, #16
 8002a40:	f000 fd7c 	bl	800353c <WIFI_SendData>
 8002a44:	4603      	mov	r3, r0
 8002a46:	67fb      	str	r3, [r7, #124]	; 0x7c
					  }
					  if(ritorno == 50){
 8002a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4a:	2b32      	cmp	r3, #50	; 0x32
 8002a4c:	d117      	bne.n	8002a7e <controlla_valori_telefono+0x216>
						  uint8_t TxData2[] = "Numero 50\n";
 8002a4e:	4a4c      	ldr	r2, [pc, #304]	; (8002b80 <controlla_valori_telefono+0x318>)
 8002a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a56:	c303      	stmia	r3!, {r0, r1}
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	0c12      	lsrs	r2, r2, #16
 8002a5e:	701a      	strb	r2, [r3, #0]
						  ret = WIFI_SendData(Socket, TxData2, sizeof(TxData2), &Datalen, WIFI_WRITE_TIMEOUT);
 8002a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a62:	b2d8      	uxtb	r0, r3
 8002a64:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002a68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	220b      	movs	r2, #11
 8002a76:	f000 fd61 	bl	800353c <WIFI_SendData>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
					  }

					  if(ritorno == 0){
 8002a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <controlla_valori_telefono+0x24a>



						  //itoa ( sv->proximity, text, 10);
						  snprintf(text, 30, "Valore temperatura: %d \n", sv->proximity); // puts string into buffer
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002a8c:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <controlla_valori_telefono+0x31c>)
 8002a8e:	211e      	movs	r1, #30
 8002a90:	f009 f910 	bl	800bcb4 <sniprintf>


						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002a9c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002aa0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	221e      	movs	r2, #30
 8002aaa:	f000 fd47 	bl	800353c <WIFI_SendData>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	67fb      	str	r3, [r7, #124]	; 0x7c


					  }
					  if(ritorno==1){
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d132      	bne.n	8002b1e <controlla_valori_telefono+0x2b6>
						  char msg[30] = "";
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	831a      	strh	r2, [r3, #24]

						  snprintf(text,30," TEMPERATURE = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd37 	bl	8000548 <__aeabi_f2d>
 8002ada:	4604      	mov	r4, r0
 8002adc:	460d      	mov	r5, r1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd30 	bl	8000548 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002af0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002af4:	e9cd 4500 	strd	r4, r5, [sp]
 8002af8:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <controlla_valori_telefono+0x320>)
 8002afa:	211e      	movs	r1, #30
 8002afc:	f009 f8da 	bl	800bcb4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b02:	b2d8      	uxtb	r0, r3
 8002b04:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002b08:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002b0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	221e      	movs	r2, #30
 8002b16:	f000 fd11 	bl	800353c <WIFI_SendData>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	67fb      	str	r3, [r7, #124]	; 0x7c

					  }

						  if (ret != WIFI_STATUS_OK)
 8002b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f43f af56 	beq.w	80029d2 <controlla_valori_telefono+0x16a>
					  {
						TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 8002b26:	4819      	ldr	r0, [pc, #100]	; (8002b8c <controlla_valori_telefono+0x324>)
 8002b28:	f009 f8bc 	bl	800bca4 <puts>
						break;
 8002b2c:	e002      	b.n	8002b34 <controlla_valori_telefono+0x2cc>
					  }
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8002b2e:	4818      	ldr	r0, [pc, #96]	; (8002b90 <controlla_valori_telefono+0x328>)
 8002b30:	f009 f8b8 	bl	800bca4 <puts>
			  }




}
 8002b34:	bf00      	nop
 8002b36:	3780      	adds	r7, #128	; 0x80
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	0800daa0 	.word	0x0800daa0
 8002b40:	0800d818 	.word	0x0800d818
 8002b44:	0800d834 	.word	0x0800d834
 8002b48:	0800d868 	.word	0x0800d868
 8002b4c:	0800d88c 	.word	0x0800d88c
 8002b50:	0800d890 	.word	0x0800d890
 8002b54:	0800d8ac 	.word	0x0800d8ac
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	0800d8dc 	.word	0x0800d8dc
 8002b60:	0800d910 	.word	0x0800d910
 8002b64:	0800d91c 	.word	0x0800d91c
 8002b68:	0800d944 	.word	0x0800d944
 8002b6c:	0800d968 	.word	0x0800d968
 8002b70:	0800d998 	.word	0x0800d998
 8002b74:	0800d9c0 	.word	0x0800d9c0
 8002b78:	20000228 	.word	0x20000228
 8002b7c:	0800d9f0 	.word	0x0800d9f0
 8002b80:	0800dab0 	.word	0x0800dab0
 8002b84:	0800da00 	.word	0x0800da00
 8002b88:	0800da1c 	.word	0x0800da1c
 8002b8c:	0800da38 	.word	0x0800da38
 8002b90:	0800da6c 	.word	0x0800da6c

08002b94 <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *arguments)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

	controlla_valori_telefono(&sharedValues);
 8002b9c:	4803      	ldr	r0, [pc, #12]	; (8002bac <StartDefaultTask+0x18>)
 8002b9e:	f7ff fe63 	bl	8002868 <controlla_valori_telefono>



}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20002d40 	.word	0x20002d40

08002bb0 <stampa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */

void stampa(struct sharedValues_t *sv){
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b091      	sub	sp, #68	; 0x44
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
	 osSemaphoreAcquire(sv->secondo, portMAX_DELAY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f005 fedb 	bl	800897c <osSemaphoreAcquire>
		printf("Thread 2\n");
 8002bc6:	4835      	ldr	r0, [pc, #212]	; (8002c9c <stampa+0xec>)
 8002bc8:	f009 f86c 	bl	800bca4 <puts>

		float temperature;
		float separa = 0;
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
		int val1,val2;
		char msg[30] = "";
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	831a      	strh	r2, [r3, #24]
		temperature = BSP_TSENSOR_ReadTemp();
 8002bea:	f000 fe1d 	bl	8003828 <BSP_TSENSOR_ReadTemp>
 8002bee:	ee07 0a90 	vmov	s15, r0
 8002bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		val1 = temperature;
 8002bfa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c02:	ee17 3a90 	vmov	r3, s15
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
		separa = temperature - val1;
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c12:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		val2 = trunc(separa * 100);
 8002c1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c22:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002ca0 <stampa+0xf0>
 8002c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2a:	ee17 0a90 	vmov	r0, s15
 8002c2e:	f7fd fc8b 	bl	8000548 <__aeabi_f2d>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	ec44 3b10 	vmov	d0, r3, r4
 8002c3a:	f00a fa35 	bl	800d0a8 <trunc>
 8002c3e:	ec54 3b10 	vmov	r3, r4, d0
 8002c42:	4618      	mov	r0, r3
 8002c44:	4621      	mov	r1, r4
 8002c46:	f7fd fcd7 	bl	80005f8 <__aeabi_d2iz>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
		sv->temperature_val1 = val1;
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
		sv->temperature_val2 = val2;
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	edc3 7a01 	vstr	s15, [r3, #4]
		snprintf(msg,30," TEMPERATURE = %d.%02d\n\r", val1, val2);
 8002c6e:	f107 0008 	add.w	r0, r7, #8
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <stampa+0xf4>)
 8002c7a:	211e      	movs	r1, #30
 8002c7c:	f009 f81a 	bl	800bcb4 <sniprintf>
		//HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);


  osSemaphoreRelease(sv->secondo);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fedf 	bl	8008a48 <osSemaphoreRelease>
  osDelay(500);
 8002c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c8e:	f005 fda9 	bl	80087e4 <osDelay>
}
 8002c92:	bf00      	nop
 8002c94:	373c      	adds	r7, #60	; 0x3c
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0800dabc 	.word	0x0800dabc
 8002ca0:	42c80000 	.word	0x42c80000
 8002ca4:	0800da1c 	.word	0x0800da1c

08002ca8 <StartTask02>:
void StartTask02(void *arguments)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  stampa(&sharedValues);
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <StartTask02+0x10>)
 8002cb2:	f7ff ff7d 	bl	8002bb0 <stampa>
 8002cb6:	e7fb      	b.n	8002cb0 <StartTask02+0x8>
 8002cb8:	20002d40 	.word	0x20002d40

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d000      	beq.n	8002cdc <HAL_GPIO_EXTI_Callback+0x12>
      SPI_WIFI_ISR();
      break;
    }
    default:
    {
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x18>
      SPI_WIFI_ISR();
 8002cdc:	f7ff f92c 	bl	8001f38 <SPI_WIFI_ISR>
      break;
 8002ce0:	bf00      	nop
    }
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <SPI3_IRQHandler+0x10>)
 8002cf2:	f003 ffd5 	bl	8006ca0 <HAL_SPI_IRQHandler>
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200027cc 	.word	0x200027cc

08002d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_MspInit+0x44>)
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_MspInit+0x44>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6613      	str	r3, [r2, #96]	; 0x60
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_MspInit+0x44>)
 8002d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_MspInit+0x44>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a08      	ldr	r2, [pc, #32]	; (8002d44 <HAL_MspInit+0x44>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_MspInit+0x44>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d128      	bne.n	8002dba <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6613      	str	r3, [r2, #96]	; 0x60
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002d86:	f043 0310 	orr.w	r3, r3, #16
 8002d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002d98:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002daa:	2306      	movs	r3, #6
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	; (8002dcc <HAL_DFSDM_ChannelMspInit+0x84>)
 8002db6:	f001 f83b 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000041c 	.word	0x2000041c
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	48001000 	.word	0x48001000

08002dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <HAL_I2C_MspInit+0x7c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d128      	bne.n	8002e44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <HAL_I2C_MspInit+0x80>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_I2C_MspInit+0x80>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <HAL_I2C_MspInit+0x80>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002e0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e10:	2312      	movs	r3, #18
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	480b      	ldr	r0, [pc, #44]	; (8002e54 <HAL_I2C_MspInit+0x84>)
 8002e28:	f001 f802 	bl	8003e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_I2C_MspInit+0x80>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_I2C_MspInit+0x80>)
 8002e32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e36:	6593      	str	r3, [r2, #88]	; 0x58
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_I2C_MspInit+0x80>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40005800 	.word	0x40005800
 8002e50:	40021000 	.word	0x40021000
 8002e54:	48000400 	.word	0x48000400

08002e58 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <HAL_QSPI_MspInit+0x7c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d128      	bne.n	8002ecc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_QSPI_MspInit+0x80>)
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_QSPI_MspInit+0x80>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6513      	str	r3, [r2, #80]	; 0x50
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_QSPI_MspInit+0x80>)
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_QSPI_MspInit+0x80>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <HAL_QSPI_MspInit+0x80>)
 8002e98:	f043 0310 	orr.w	r3, r3, #16
 8002e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_QSPI_MspInit+0x80>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002eaa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002eae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ebc:	230a      	movs	r3, #10
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <HAL_QSPI_MspInit+0x84>)
 8002ec8:	f000 ffb2 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	a0001000 	.word	0xa0001000
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48001000 	.word	0x48001000

08002ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_SPI_MspInit+0x7c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d128      	bne.n	8002f54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_SPI_MspInit+0x80>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_SPI_MspInit+0x80>)
 8002f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_SPI_MspInit+0x80>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_SPI_MspInit+0x80>)
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_SPI_MspInit+0x80>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_SPI_MspInit+0x80>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002f32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f44:	2306      	movs	r3, #6
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <HAL_SPI_MspInit+0x84>)
 8002f50:	f000 ff6e 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40003c00 	.word	0x40003c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	48000800 	.word	0x48000800

08002f68 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_SPI_MspDeInit+0x30>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10a      	bne.n	8002f90 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_SPI_MspDeInit+0x34>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <HAL_SPI_MspDeInit+0x34>)
 8002f80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002f86:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002f8a:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <HAL_SPI_MspDeInit+0x38>)
 8002f8c:	f001 f8f8 	bl	8004180 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40003c00 	.word	0x40003c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	48000800 	.word	0x48000800

08002fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	; (800307c <HAL_UART_MspInit+0xd8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d128      	bne.n	8003018 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	4a27      	ldr	r2, [pc, #156]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fea:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002ff6:	23c0      	movs	r3, #192	; 0xc0
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003006:	2307      	movs	r3, #7
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4619      	mov	r1, r3
 8003010:	481c      	ldr	r0, [pc, #112]	; (8003084 <HAL_UART_MspInit+0xe0>)
 8003012:	f000 ff0d 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003016:	e02d      	b.n	8003074 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_UART_MspInit+0xe4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d128      	bne.n	8003074 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6593      	str	r3, [r2, #88]	; 0x58
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_UART_MspInit+0xdc>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_UART_MspInit+0xdc>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003064:	2307      	movs	r3, #7
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4619      	mov	r1, r3
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <HAL_UART_MspInit+0xe8>)
 8003070:	f000 fede 	bl	8003e30 <HAL_GPIO_Init>
}
 8003074:	bf00      	nop
 8003076:	3730      	adds	r7, #48	; 0x30
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40013800 	.word	0x40013800
 8003080:	40021000 	.word	0x40021000
 8003084:	48000400 	.word	0x48000400
 8003088:	40004800 	.word	0x40004800
 800308c:	48000c00 	.word	0x48000c00

08003090 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b0:	d154      	bne.n	800315c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030be:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80030ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4619      	mov	r1, r3
 80030de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e2:	f000 fea5 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80030e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80030ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030f8:	230a      	movs	r3, #10
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003106:	f000 fe93 	bl	8003e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 8003110:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6593      	str	r3, [r2, #88]	; 0x58
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003146:	f001 fc39 	bl	80049bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	4a05      	ldr	r2, [pc, #20]	; (8003164 <HAL_PCD_MspInit+0xd4>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003156:	e001      	b.n	800315c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8003158:	f001 fc30 	bl	80049bc <HAL_PWREx_EnableVddUSB>
}
 800315c:	bf00      	nop
 800315e:	3728      	adds	r7, #40	; 0x28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000

08003168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler+0x4>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <UsageFault_Handler+0x4>

0800318e <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a0:	f000 fba4 	bl	80038ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80031a4:	f007 fb86 	bl	800a8b4 <xTaskGetSchedulerState>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80031ae:	f008 fa53 	bl	800b658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80031ba:	2020      	movs	r0, #32
 80031bc:	f001 f904 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80031c0:	2040      	movs	r0, #64	; 0x40
 80031c2:	f001 f901 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031c6:	2080      	movs	r0, #128	; 0x80
 80031c8:	f001 f8fe 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80031cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031d0:	f001 f8fa 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI1_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80031dc:	2002      	movs	r0, #2
 80031de:	f001 f8f3 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80031ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80031ee:	f001 f8eb 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80031f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031f6:	f001 f8e7 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031fe:	f001 f8e3 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003202:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003206:	f001 f8df 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800320a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800320e:	f001 f8db 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}

08003216 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e00a      	b.n	800323e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003228:	f3af 8000 	nop.w
 800322c:	4601      	mov	r1, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60ba      	str	r2, [r7, #8]
 8003234:	b2ca      	uxtb	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3301      	adds	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	dbf0      	blt.n	8003228 <_read+0x12>
	}

return len;
 8003246:	687b      	ldr	r3, [r7, #4]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e009      	b.n	8003276 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	60ba      	str	r2, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ffd0 	bl	8002210 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	dbf1      	blt.n	8003262 <_write+0x12>
	}
	return len;
 800327e:	687b      	ldr	r3, [r7, #4]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <_close>:

int _close(int file)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	return -1;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b0:	605a      	str	r2, [r3, #4]
	return 0;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <_isatty>:

int _isatty(int file)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	return 1;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
	return 0;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <_sbrk+0x5c>)
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <_sbrk+0x60>)
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <_sbrk+0x64>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <_sbrk+0x64>)
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <_sbrk+0x68>)
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <_sbrk+0x64>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	429a      	cmp	r2, r3
 800331e:	d207      	bcs.n	8003330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003320:	f008 fc00 	bl	800bb24 <__errno>
 8003324:	4602      	mov	r2, r0
 8003326:	230c      	movs	r3, #12
 8003328:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e009      	b.n	8003344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <_sbrk+0x64>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <_sbrk+0x64>)
 8003340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20018000 	.word	0x20018000
 8003350:	00000400 	.word	0x00000400
 8003354:	20000420 	.word	0x20000420
 8003358:	200038a0 	.word	0x200038a0

0800335c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <SystemInit+0x64>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <SystemInit+0x64>)
 8003368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800336c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <SystemInit+0x68>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <SystemInit+0x68>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <SystemInit+0x68>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <SystemInit+0x68>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <SystemInit+0x68>)
 8003388:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800338c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003390:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <SystemInit+0x68>)
 8003394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003398:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <SystemInit+0x68>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <SystemInit+0x68>)
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <SystemInit+0x68>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SystemInit+0x64>)
 80033ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b2:	609a      	str	r2, [r3, #8]
#endif
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00
 80033c4:	40021000 	.word	0x40021000

080033c8 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <WIFI_Init+0x40>)
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <WIFI_Init+0x44>)
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <WIFI_Init+0x48>)
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <WIFI_Init+0x4c>)
 80033de:	490e      	ldr	r1, [pc, #56]	; (8003418 <WIFI_Init+0x50>)
 80033e0:	480e      	ldr	r0, [pc, #56]	; (800341c <WIFI_Init+0x54>)
 80033e2:	f7fd fe8f 	bl	8001104 <ES_WIFI_RegisterBusIO>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80033ec:	480b      	ldr	r0, [pc, #44]	; (800341c <WIFI_Init+0x54>)
 80033ee:	f7fd fe5b 	bl	80010a8 <ES_WIFI_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80033fc:	79fb      	ldrb	r3, [r7, #7]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	08001c5d 	.word	0x08001c5d
 800340c:	08001d51 	.word	0x08001d51
 8003410:	08001e2d 	.word	0x08001e2d
 8003414:	08001b45 	.word	0x08001b45
 8003418:	080019a9 	.word	0x080019a9
 800341c:	20002e88 	.word	0x20002e88

08003420 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <WIFI_Connect+0x40>)
 800343a:	f7fd fe97 	bl	800116c <ES_WIFI_Connect>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003444:	4806      	ldr	r0, [pc, #24]	; (8003460 <WIFI_Connect+0x40>)
 8003446:	f7fd ff33 	bl	80012b0 <ES_WIFI_GetNetworkSettings>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20002e88 	.word	0x20002e88

08003464 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <WIFI_GetMAC_Address+0x28>)
 8003474:	f7fd ff46 	bl	8001304 <ES_WIFI_GetMACAddress>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20002e88 	.word	0x20002e88

08003490 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800349c:	4809      	ldr	r0, [pc, #36]	; (80034c4 <WIFI_GetIP_Address+0x34>)
 800349e:	f7fd fedb 	bl	8001258 <ES_WIFI_IsConnected>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <WIFI_GetIP_Address+0x34>)
 80034aa:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20002e88 	.word	0x20002e88

080034c8 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	460b      	mov	r3, r1
 80034d6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80034e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80034e6:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 80034e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034ea:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80034ec:	7afb      	ldrb	r3, [r7, #11]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	789b      	ldrb	r3, [r3, #2]
 800350a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	4619      	mov	r1, r3
 8003518:	4807      	ldr	r0, [pc, #28]	; (8003538 <WIFI_OpenClientConnection+0x70>)
 800351a:	f7fd ff23 	bl	8001364 <ES_WIFI_StartClientConnection>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800352a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800352e:	4618      	mov	r0, r3
 8003530:	3728      	adds	r7, #40	; 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20002e88 	.word	0x20002e88

0800353c <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	4613      	mov	r3, r2
 800354c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003552:	89ba      	ldrh	r2, [r7, #12]
 8003554:	7bf9      	ldrb	r1, [r7, #15]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	4806      	ldr	r0, [pc, #24]	; (800357c <WIFI_SendData+0x40>)
 8003564:	f7fd ffea 	bl	800153c <ES_WIFI_SendData>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20002e88 	.word	0x20002e88

08003580 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	4603      	mov	r3, r0
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	4613      	mov	r3, r2
 8003590:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003596:	89ba      	ldrh	r2, [r7, #12]
 8003598:	7bf9      	ldrb	r1, [r7, #15]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4806      	ldr	r0, [pc, #24]	; (80035c0 <WIFI_ReceiveData+0x40>)
 80035a8:	f7fe f884 	bl	80016b4 <ES_WIFI_ReceiveData>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20002e88 	.word	0x20002e88

080035c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035c8:	f7ff fec8 	bl	800335c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035ce:	e003      	b.n	80035d8 <LoopCopyDataInit>

080035d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035d6:	3104      	adds	r1, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035d8:	480a      	ldr	r0, [pc, #40]	; (8003604 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <LoopForever+0xe>)
	adds	r2, r0, r1
 80035dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035e0:	d3f6      	bcc.n	80035d0 <CopyDataInit>
	ldr	r2, =_sbss
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <LoopForever+0x12>)
	b	LoopFillZerobss
 80035e4:	e002      	b.n	80035ec <LoopFillZerobss>

080035e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035e8:	f842 3b04 	str.w	r3, [r2], #4

080035ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <LoopForever+0x16>)
	cmp	r2, r3
 80035ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035f0:	d3f9      	bcc.n	80035e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035f2:	f008 fa9d 	bl	800bb30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035f6:	f7fe fcd7 	bl	8001fa8 <main>

080035fa <LoopForever>:

LoopForever:
    b LoopForever
 80035fa:	e7fe      	b.n	80035fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80035fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003600:	0800de18 	.word	0x0800de18
	ldr	r0, =_sdata
 8003604:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003608:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 800360c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8003610:	2000389c 	.word	0x2000389c

08003614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC1_2_IRQHandler>
	...

08003618 <BSP_LED_Init>:
  * @param  Led  LED to be initialized.
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  LEDx_GPIO_CLK_ENABLE(Led);
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <BSP_LED_Init+0x28>
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <BSP_LED_Init+0x58>)
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	4a10      	ldr	r2, [pc, #64]	; (8003670 <BSP_LED_Init+0x58>)
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <BSP_LED_Init+0x58>)
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003644:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800364e:	2302      	movs	r3, #2
 8003650:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	4a07      	ldr	r2, [pc, #28]	; (8003674 <BSP_LED_Init+0x5c>)
 8003656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365a:	f107 020c 	add.w	r2, r7, #12
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fbe5 	bl	8003e30 <HAL_GPIO_Init>
}
 8003666:	bf00      	nop
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	20000008 	.word	0x20000008

08003678 <BSP_LED_On>:
  * @param  Led  LED to be set on
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <BSP_LED_On+0x28>)
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800368e:	b291      	uxth	r1, r2
 8003690:	2201      	movs	r2, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fe80 	bl	8004398 <HAL_GPIO_WritePin>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000008 	.word	0x20000008

080036a4 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line
  *                                              with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	460a      	mov	r2, r1
 80036ae:	71fb      	strb	r3, [r7, #7]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <BSP_PB_Init+0xa0>)
 80036b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <BSP_PB_Init+0xa0>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <BSP_PB_Init+0xa0>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80036cc:	79bb      	ldrb	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d112      	bne.n	80036f8 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80036d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80036dc:	2301      	movs	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80036e0:	2302      	movs	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <BSP_PB_Init+0xa4>)
 80036e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ec:	f107 020c 	add.w	r2, r7, #12
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fb9c 	bl	8003e30 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 80036f8:	79bb      	ldrb	r3, [r7, #6]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d11e      	bne.n	800373c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80036fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003702:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003708:	2303      	movs	r3, #3
 800370a:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <BSP_PB_Init+0xa8>)
 800370e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <BSP_PB_Init+0xa4>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	f107 020c 	add.w	r2, r7, #12
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fb86 	bl	8003e30 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003724:	2328      	movs	r3, #40	; 0x28
 8003726:	b25b      	sxtb	r3, r3
 8003728:	2200      	movs	r2, #0
 800372a:	210f      	movs	r1, #15
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f9fa 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003732:	2328      	movs	r3, #40	; 0x28
 8003734:	b25b      	sxtb	r3, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fa11 	bl	8003b5e <HAL_NVIC_EnableIRQ>
  }
}
 800373c:	bf00      	nop
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	2000000c 	.word	0x2000000c
 800374c:	10110000 	.word	0x10110000

08003750 <BSP_COM_Init>:
  *                @arg  COM1
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <BSP_COM_Init+0x2a>
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <BSP_COM_Init+0xc8>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <BSP_COM_Init+0xc8>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <BSP_COM_Init+0xc8>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <BSP_COM_Init+0x48>
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <BSP_COM_Init+0xc8>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <BSP_COM_Init+0xc8>)
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <BSP_COM_Init+0xc8>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <BSP_COM_Init+0x66>
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <BSP_COM_Init+0xc8>)
 80037a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a2:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <BSP_COM_Init+0xc8>)
 80037a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a8:	6613      	str	r3, [r2, #96]	; 0x60
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <BSP_COM_Init+0xc8>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80037be:	2302      	movs	r3, #2
 80037c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80037c6:	2307      	movs	r3, #7
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <BSP_COM_Init+0xcc>)
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	f107 0214 	add.w	r2, r7, #20
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fb29 	bl	8003e30 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80037e6:	2307      	movs	r3, #7
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <BSP_COM_Init+0xd0>)
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	f107 0214 	add.w	r2, r7, #20
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fb19 	bl	8003e30 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4a08      	ldr	r2, [pc, #32]	; (8003824 <BSP_COM_Init+0xd4>)
 8003802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f003 ff75 	bl	80076fa <HAL_UART_Init>
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	20000014 	.word	0x20000014
 8003820:	20000018 	.word	0x20000018
 8003824:	20000010 	.word	0x20000010

08003828 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <BSP_TSENSOR_ReadTemp+0x18>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	20be      	movs	r0, #190	; 0xbe
 8003834:	4798      	blx	r3
 8003836:	eef0 7a40 	vmov.f32	s15, s0
}
 800383a:	eeb0 0a67 	vmov.f32	s0, s15
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000424 	.word	0x20000424

08003844 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800384e:	2003      	movs	r0, #3
 8003850:	f000 f95e 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003854:	2000      	movs	r0, #0
 8003856:	f000 f80d 	bl	8003874 <HAL_InitTick>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	71fb      	strb	r3, [r7, #7]
 8003864:	e001      	b.n	800386a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003866:	f7ff fa4b 	bl	8002d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800386a:	79fb      	ldrb	r3, [r7, #7]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_InitTick+0x6c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d023      	beq.n	80038d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_InitTick+0x70>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_InitTick+0x6c>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003896:	fbb3 f3f1 	udiv	r3, r3, r1
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f96b 	bl	8003b7a <HAL_SYSTICK_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d809      	bhi.n	80038c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b0:	2200      	movs	r2, #0
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f000 f935 	bl	8003b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <HAL_InitTick+0x74>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e007      	b.n	80038d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e004      	b.n	80038d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e001      	b.n	80038d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000020 	.word	0x20000020
 80038e4:	20000004 	.word	0x20000004
 80038e8:	2000001c 	.word	0x2000001c

080038ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x20>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_IncTick+0x24>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_IncTick+0x24>)
 80038fe:	6013      	str	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000020 	.word	0x20000020
 8003910:	20003854 	.word	0x20003854

08003914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return uwTick;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <HAL_GetTick+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20003854 	.word	0x20003854

0800392c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7ff ffee 	bl	8003914 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d005      	beq.n	8003952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_Delay+0x40>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003952:	bf00      	nop
 8003954:	f7ff ffde 	bl	8003914 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d8f7      	bhi.n	8003954 <HAL_Delay+0x28>
  {
  }
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000020 	.word	0x20000020

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	; (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff29 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff3e 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff8e 	bl	8003a64 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5d 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff31 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffa2 	bl	8003acc <SysTick_Config>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0ac      	b.n	8003d00 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f8b2 	bl	8003d14 <DFSDM_GetChannelFromInstance>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b55      	ldr	r3, [pc, #340]	; (8003d08 <HAL_DFSDM_ChannelInit+0x174>)
 8003bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e09f      	b.n	8003d00 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff f8c1 	bl	8002d48 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_DFSDM_ChannelInit+0x178>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a4f      	ldr	r2, [pc, #316]	; (8003d0c <HAL_DFSDM_ChannelInit+0x178>)
 8003bce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003bd0:	4b4e      	ldr	r3, [pc, #312]	; (8003d0c <HAL_DFSDM_ChannelInit+0x178>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d125      	bne.n	8003c24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a4c      	ldr	r2, [pc, #304]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003be2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4948      	ldr	r1, [pc, #288]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a46      	ldr	r2, [pc, #280]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bf8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003bfc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	791b      	ldrb	r3, [r3, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d108      	bne.n	8003c18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003c06:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	493f      	ldr	r1, [pc, #252]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003c18:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3c      	ldr	r2, [pc, #240]	; (8003d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003c32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 020f 	bic.w	r2, r2, #15
 8003c60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6819      	ldr	r1, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003c88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f002 0207 	and.w	r2, r2, #7
 8003cb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f810 	bl	8003d14 <DFSDM_GetChannelFromInstance>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_DFSDM_ChannelInit+0x174>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	2000042c 	.word	0x2000042c
 8003d0c:	20000428 	.word	0x20000428
 8003d10:	40016000 	.word	0x40016000

08003d14 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <DFSDM_GetChannelFromInstance+0x7c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d102      	bne.n	8003d2a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e02b      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <DFSDM_GetChannelFromInstance+0x80>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d102      	bne.n	8003d38 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e024      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <DFSDM_GetChannelFromInstance+0x84>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d102      	bne.n	8003d46 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003d40:	2302      	movs	r3, #2
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e01d      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <DFSDM_GetChannelFromInstance+0x88>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d102      	bne.n	8003d54 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e016      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d5c:	2305      	movs	r3, #5
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e00f      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <DFSDM_GetChannelFromInstance+0x90>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d102      	bne.n	8003d70 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e008      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <DFSDM_GetChannelFromInstance+0x94>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d102      	bne.n	8003d7e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d78:	2307      	movs	r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e001      	b.n	8003d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40016000 	.word	0x40016000
 8003d94:	40016020 	.word	0x40016020
 8003d98:	40016040 	.word	0x40016040
 8003d9c:	40016080 	.word	0x40016080
 8003da0:	400160a0 	.word	0x400160a0
 8003da4:	400160c0 	.word	0x400160c0
 8003da8:	400160e0 	.word	0x400160e0

08003dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d005      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e029      	b.n	8003e24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020e 	bic.w	r2, r2, #14
 8003dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f003 021c 	and.w	r2, r3, #28
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
    }
  }
  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3e:	e17f      	b.n	8004140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8171 	beq.w	800413a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d00b      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e6c:	2b11      	cmp	r3, #17
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b12      	cmp	r3, #18
 8003e76:	d130      	bne.n	8003eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0201 	and.w	r2, r3, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d118      	bne.n	8003f18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003eec:	2201      	movs	r2, #1
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	f003 0201 	and.w	r2, r3, #1
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x128>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d123      	bne.n	8003fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ac 	beq.w	800413a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_GPIO_Init+0x32c>)
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	4a5d      	ldr	r2, [pc, #372]	; (800415c <HAL_GPIO_Init+0x32c>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6613      	str	r3, [r2, #96]	; 0x60
 8003fee:	4b5b      	ldr	r3, [pc, #364]	; (800415c <HAL_GPIO_Init+0x32c>)
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ffa:	4a59      	ldr	r2, [pc, #356]	; (8004160 <HAL_GPIO_Init+0x330>)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	3302      	adds	r3, #2
 8004002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	220f      	movs	r2, #15
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004024:	d025      	beq.n	8004072 <HAL_GPIO_Init+0x242>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4e      	ldr	r2, [pc, #312]	; (8004164 <HAL_GPIO_Init+0x334>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01f      	beq.n	800406e <HAL_GPIO_Init+0x23e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a4d      	ldr	r2, [pc, #308]	; (8004168 <HAL_GPIO_Init+0x338>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d019      	beq.n	800406a <HAL_GPIO_Init+0x23a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4c      	ldr	r2, [pc, #304]	; (800416c <HAL_GPIO_Init+0x33c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_GPIO_Init+0x236>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4b      	ldr	r2, [pc, #300]	; (8004170 <HAL_GPIO_Init+0x340>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00d      	beq.n	8004062 <HAL_GPIO_Init+0x232>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4a      	ldr	r2, [pc, #296]	; (8004174 <HAL_GPIO_Init+0x344>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <HAL_GPIO_Init+0x22e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a49      	ldr	r2, [pc, #292]	; (8004178 <HAL_GPIO_Init+0x348>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_GPIO_Init+0x22a>
 8004056:	2306      	movs	r3, #6
 8004058:	e00c      	b.n	8004074 <HAL_GPIO_Init+0x244>
 800405a:	2307      	movs	r3, #7
 800405c:	e00a      	b.n	8004074 <HAL_GPIO_Init+0x244>
 800405e:	2305      	movs	r3, #5
 8004060:	e008      	b.n	8004074 <HAL_GPIO_Init+0x244>
 8004062:	2304      	movs	r3, #4
 8004064:	e006      	b.n	8004074 <HAL_GPIO_Init+0x244>
 8004066:	2303      	movs	r3, #3
 8004068:	e004      	b.n	8004074 <HAL_GPIO_Init+0x244>
 800406a:	2302      	movs	r3, #2
 800406c:	e002      	b.n	8004074 <HAL_GPIO_Init+0x244>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_GPIO_Init+0x244>
 8004072:	2300      	movs	r3, #0
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	f002 0203 	and.w	r2, r2, #3
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	4093      	lsls	r3, r2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004084:	4936      	ldr	r1, [pc, #216]	; (8004160 <HAL_GPIO_Init+0x330>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	3302      	adds	r3, #2
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004092:	4b3a      	ldr	r3, [pc, #232]	; (800417c <HAL_GPIO_Init+0x34c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040b6:	4a31      	ldr	r2, [pc, #196]	; (800417c <HAL_GPIO_Init+0x34c>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80040bc:	4b2f      	ldr	r3, [pc, #188]	; (800417c <HAL_GPIO_Init+0x34c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_GPIO_Init+0x34c>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040e6:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_GPIO_Init+0x34c>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800410a:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_GPIO_Init+0x34c>)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_GPIO_Init+0x34c>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	43db      	mvns	r3, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4013      	ands	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_GPIO_Init+0x34c>)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3301      	adds	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f ae78 	bne.w	8003e40 <HAL_GPIO_Init+0x10>
  }
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40021000 	.word	0x40021000
 8004160:	40010000 	.word	0x40010000
 8004164:	48000400 	.word	0x48000400
 8004168:	48000800 	.word	0x48000800
 800416c:	48000c00 	.word	0x48000c00
 8004170:	48001000 	.word	0x48001000
 8004174:	48001400 	.word	0x48001400
 8004178:	48001800 	.word	0x48001800
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800418e:	e0cd      	b.n	800432c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004190:	2201      	movs	r2, #1
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	4013      	ands	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80c0 	beq.w	8004326 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80041a6:	4a68      	ldr	r2, [pc, #416]	; (8004348 <HAL_GPIO_DeInit+0x1c8>)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	220f      	movs	r2, #15
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041ce:	d025      	beq.n	800421c <HAL_GPIO_DeInit+0x9c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a5e      	ldr	r2, [pc, #376]	; (800434c <HAL_GPIO_DeInit+0x1cc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01f      	beq.n	8004218 <HAL_GPIO_DeInit+0x98>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_GPIO_DeInit+0x1d0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d019      	beq.n	8004214 <HAL_GPIO_DeInit+0x94>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a5c      	ldr	r2, [pc, #368]	; (8004354 <HAL_GPIO_DeInit+0x1d4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <HAL_GPIO_DeInit+0x90>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a5b      	ldr	r2, [pc, #364]	; (8004358 <HAL_GPIO_DeInit+0x1d8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00d      	beq.n	800420c <HAL_GPIO_DeInit+0x8c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a5a      	ldr	r2, [pc, #360]	; (800435c <HAL_GPIO_DeInit+0x1dc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <HAL_GPIO_DeInit+0x88>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a59      	ldr	r2, [pc, #356]	; (8004360 <HAL_GPIO_DeInit+0x1e0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_GPIO_DeInit+0x84>
 8004200:	2306      	movs	r3, #6
 8004202:	e00c      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 8004204:	2307      	movs	r3, #7
 8004206:	e00a      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 8004208:	2305      	movs	r3, #5
 800420a:	e008      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 800420c:	2304      	movs	r3, #4
 800420e:	e006      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 8004210:	2303      	movs	r3, #3
 8004212:	e004      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 8004214:	2302      	movs	r3, #2
 8004216:	e002      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_GPIO_DeInit+0x9e>
 800421c:	2300      	movs	r3, #0
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	f002 0203 	and.w	r2, r2, #3
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	4093      	lsls	r3, r2
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d132      	bne.n	8004294 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800422e:	4b4d      	ldr	r3, [pc, #308]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	494b      	ldr	r1, [pc, #300]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 8004238:	4013      	ands	r3, r2
 800423a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800423c:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	4947      	ldr	r1, [pc, #284]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 8004246:	4013      	ands	r3, r2
 8004248:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800424a:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	4944      	ldr	r1, [pc, #272]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 8004254:	4013      	ands	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004258:	4b42      	ldr	r3, [pc, #264]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	4940      	ldr	r1, [pc, #256]	; (8004364 <HAL_GPIO_DeInit+0x1e4>)
 8004262:	4013      	ands	r3, r2
 8004264:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	220f      	movs	r2, #15
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004276:	4a34      	ldr	r2, [pc, #208]	; (8004348 <HAL_GPIO_DeInit+0x1c8>)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	43da      	mvns	r2, r3
 8004286:	4830      	ldr	r0, [pc, #192]	; (8004348 <HAL_GPIO_DeInit+0x1c8>)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	089b      	lsrs	r3, r3, #2
 800428c:	400a      	ands	r2, r1
 800428e:	3302      	adds	r3, #2
 8004290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2103      	movs	r1, #3
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	08da      	lsrs	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3208      	adds	r2, #8
 80042b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	220f      	movs	r2, #15
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	08d2      	lsrs	r2, r2, #3
 80042c8:	4019      	ands	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	2103      	movs	r1, #3
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	2101      	movs	r1, #1
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	401a      	ands	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	2103      	movs	r1, #3
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	2101      	movs	r1, #1
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	401a      	ands	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3301      	adds	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	f47f af2b 	bne.w	8004190 <HAL_GPIO_DeInit+0x10>
  }
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000
 800434c:	48000400 	.word	0x48000400
 8004350:	48000800 	.word	0x48000800
 8004354:	48000c00 	.word	0x48000c00
 8004358:	48001000 	.word	0x48001000
 800435c:	48001400 	.word	0x48001400
 8004360:	48001800 	.word	0x48001800
 8004364:	40010400 	.word	0x40010400

08004368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	e001      	b.n	800438a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	807b      	strh	r3, [r7, #2]
 80043a4:	4613      	mov	r3, r2
 80043a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a8:	787b      	ldrb	r3, [r7, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043b4:	e002      	b.n	80043bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043de:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc6f 	bl	8002cca <HAL_GPIO_EXTI_Callback>
  }
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e081      	b.n	800450e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fe fcd6 	bl	8002dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004448:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004458:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	e006      	b.n	8004480 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800447e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d104      	bne.n	8004492 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	ea42 0103 	orr.w	r1, r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	021a      	lsls	r2, r3, #8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b20      	cmp	r3, #32
 800452a:	d138      	bne.n	800459e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004536:	2302      	movs	r3, #2
 8004538:	e032      	b.n	80045a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	; 0x24
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004568:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d139      	bne.n	8004636 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e033      	b.n	8004638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0201 	orr.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004646:	b08f      	sub	sp, #60	; 0x3c
 8004648:	af0a      	add	r7, sp, #40	; 0x28
 800464a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e116      	b.n	8004884 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fe fd0d 	bl	8003090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2203      	movs	r2, #3
 800467a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f003 fd4f 	bl	8008138 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	687e      	ldr	r6, [r7, #4]
 80046a2:	466d      	mov	r5, sp
 80046a4:	f106 0410 	add.w	r4, r6, #16
 80046a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80046b8:	1d33      	adds	r3, r6, #4
 80046ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046bc:	6838      	ldr	r0, [r7, #0]
 80046be:	f003 fce9 	bl	8008094 <USB_CoreInit>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0d7      	b.n	8004884 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fd3d 	bl	800815a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	e04a      	b.n	800477c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	333d      	adds	r3, #61	; 0x3d
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	333c      	adds	r3, #60	; 0x3c
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	b298      	uxth	r0, r3
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	3342      	adds	r3, #66	; 0x42
 8004722:	4602      	mov	r2, r0
 8004724:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	333f      	adds	r3, #63	; 0x3f
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3344      	adds	r3, #68	; 0x44
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3348      	adds	r3, #72	; 0x48
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3350      	adds	r3, #80	; 0x50
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	3301      	adds	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d3af      	bcc.n	80046e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	e044      	b.n	8004816 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047b8:	7bfa      	ldrb	r2, [r7, #15]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	3301      	adds	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d3b5      	bcc.n	800478c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	687e      	ldr	r6, [r7, #4]
 8004828:	466d      	mov	r5, sp
 800482a:	f106 0410 	add.w	r4, r6, #16
 800482e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004836:	e894 0003 	ldmia.w	r4, {r0, r1}
 800483a:	e885 0003 	stmia.w	r5, {r0, r1}
 800483e:	1d33      	adds	r3, r6, #4
 8004840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004842:	6838      	ldr	r0, [r7, #0]
 8004844:	f003 fcb4 	bl	80081b0 <USB_DevInit>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e014      	b.n	8004884 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b01      	cmp	r3, #1
 8004870:	d102      	bne.n	8004878 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f80a 	bl	800488c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f003 fe44 	bl	800850a <USB_DevDisconnect>

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800488c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	f043 0303 	orr.w	r3, r3, #3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e2:	6013      	str	r3, [r2, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40007000 	.word	0x40007000

080048f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <HAL_PWREx_GetVoltageRange+0x18>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40007000 	.word	0x40007000

08004910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491e:	d130      	bne.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004920:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492c:	d038      	beq.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800493e:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2232      	movs	r2, #50	; 0x32
 8004944:	fb02 f303 	mul.w	r3, r2, r3
 8004948:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0c9b      	lsrs	r3, r3, #18
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004954:	e002      	b.n	800495c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b01      	subs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d102      	bne.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x60>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f2      	bne.n	8004956 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d110      	bne.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e00f      	b.n	80049a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498e:	d007      	beq.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004998:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800499e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40007000 	.word	0x40007000
 80049b4:	20000004 	.word	0x20000004
 80049b8:	431bde83 	.word	0x431bde83

080049bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ca:	6053      	str	r3, [r2, #4]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40007000 	.word	0x40007000

080049dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80049e4:	f7fe ff96 	bl	8003914 <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e063      	b.n	8004abc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe fa25 	bl	8002e58 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004a0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f858 	bl	8004ac8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2120      	movs	r1, #32
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f850 	bl	8004ae4 <QSPI_WaitFlagStateUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d131      	bne.n	8004ab2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a58:	f023 0310 	bic.w	r3, r3, #16
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6852      	ldr	r2, [r2, #4]
 8004a60:	0611      	lsls	r1, r2, #24
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68d2      	ldr	r2, [r2, #12]
 8004a66:	4311      	orrs	r1, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <HAL_QSPI_Init+0xe8>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6912      	ldr	r2, [r2, #16]
 8004a7e:	0411      	lsls	r1, r2, #16
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6952      	ldr	r2, [r2, #20]
 8004a84:	4311      	orrs	r1, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6992      	ldr	r2, [r2, #24]
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	ffe0f8fe 	.word	0xffe0f8fe

08004ac8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004af4:	e01a      	b.n	8004b2c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d016      	beq.n	8004b2c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afe:	f7fe ff09 	bl	8003914 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2204      	movs	r2, #4
 8004b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e00e      	b.n	8004b4a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1d6      	bne.n	8004af6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e3d4      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	4ba1      	ldr	r3, [pc, #644]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b70:	4b9e      	ldr	r3, [pc, #632]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80e4 	beq.w	8004d50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_RCC_OscConfig+0x4a>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	f040 808b 	bne.w	8004cac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 8087 	bne.w	8004cac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b9e:	4b93      	ldr	r3, [pc, #588]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e3ac      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1a      	ldr	r2, [r3, #32]
 8004bba:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x7c>
 8004bc6:	4b89      	ldr	r3, [pc, #548]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bce:	e005      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
 8004bd0:	4b86      	ldr	r3, [pc, #536]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d223      	bcs.n	8004c28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fd3f 	bl	8005668 <RCC_SetFlashLatencyFromMSIRange>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e38d      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf4:	4b7d      	ldr	r3, [pc, #500]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7c      	ldr	r2, [pc, #496]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004bfa:	f043 0308 	orr.w	r3, r3, #8
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4b7a      	ldr	r3, [pc, #488]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4977      	ldr	r1, [pc, #476]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c12:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	4972      	ldr	r1, [pc, #456]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
 8004c26:	e025      	b.n	8004c74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c28:	4b70      	ldr	r3, [pc, #448]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6f      	ldr	r2, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c2e:	f043 0308 	orr.w	r3, r3, #8
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	496a      	ldr	r1, [pc, #424]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c46:	4b69      	ldr	r3, [pc, #420]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	4965      	ldr	r1, [pc, #404]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fcff 	bl	8005668 <RCC_SetFlashLatencyFromMSIRange>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e34d      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c74:	f000 fc36 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8004c78:	4601      	mov	r1, r0
 8004c7a:	4b5c      	ldr	r3, [pc, #368]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	091b      	lsrs	r3, r3, #4
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	4a5a      	ldr	r2, [pc, #360]	; (8004df0 <HAL_RCC_OscConfig+0x29c>)
 8004c86:	5cd3      	ldrb	r3, [r2, r3]
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	fa21 f303 	lsr.w	r3, r1, r3
 8004c90:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_RCC_OscConfig+0x2a0>)
 8004c92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c94:	4b58      	ldr	r3, [pc, #352]	; (8004df8 <HAL_RCC_OscConfig+0x2a4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fdeb 	bl	8003874 <HAL_InitTick>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d052      	beq.n	8004d4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	e331      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d032      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a4c      	ldr	r2, [pc, #304]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cc0:	f7fe fe28 	bl	8003914 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc8:	f7fe fe24 	bl	8003914 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e31a      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004cec:	f043 0308 	orr.w	r3, r3, #8
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	493b      	ldr	r1, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	4936      	ldr	r1, [pc, #216]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
 8004d18:	e01a      	b.n	8004d50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d1a:	4b34      	ldr	r3, [pc, #208]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a33      	ldr	r2, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d26:	f7fe fdf5 	bl	8003914 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d2e:	f7fe fdf1 	bl	8003914 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e2e7      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x1da>
 8004d4c:	e000      	b.n	8004d50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d074      	beq.n	8004e46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d005      	beq.n	8004d6e <HAL_RCC_OscConfig+0x21a>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	d10e      	bne.n	8004d86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d10b      	bne.n	8004d86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6e:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d064      	beq.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d160      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e2c4      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x24a>
 8004d90:	4b16      	ldr	r3, [pc, #88]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e01d      	b.n	8004dda <HAL_RCC_OscConfig+0x286>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da6:	d10c      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x26e>
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a0f      	ldr	r2, [pc, #60]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e00b      	b.n	8004dda <HAL_RCC_OscConfig+0x286>
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a06      	ldr	r2, [pc, #24]	; (8004dec <HAL_RCC_OscConfig+0x298>)
 8004dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fe fd97 	bl	8003914 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de8:	e011      	b.n	8004e0e <HAL_RCC_OscConfig+0x2ba>
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	0800dc1c 	.word	0x0800dc1c
 8004df4:	20000004 	.word	0x20000004
 8004df8:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fe fd8a 	bl	8003914 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e280      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e0e:	4baf      	ldr	r3, [pc, #700]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x2a8>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fd7a 	bl	8003914 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fe fd76 	bl	8003914 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e26c      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e36:	4ba5      	ldr	r3, [pc, #660]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2d0>
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d060      	beq.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x310>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d119      	bne.n	8004e92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d116      	bne.n	8004e92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	4b99      	ldr	r3, [pc, #612]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_OscConfig+0x328>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e249      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b93      	ldr	r3, [pc, #588]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	061b      	lsls	r3, r3, #24
 8004e8a:	4990      	ldr	r1, [pc, #576]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e90:	e040      	b.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d023      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9a:	4b8c      	ldr	r3, [pc, #560]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a8b      	ldr	r2, [pc, #556]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fe fd35 	bl	8003914 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eae:	f7fe fd31 	bl	8003914 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e227      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec0:	4b82      	ldr	r3, [pc, #520]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ecc:	4b7f      	ldr	r3, [pc, #508]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	497c      	ldr	r1, [pc, #496]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	604b      	str	r3, [r1, #4]
 8004ee0:	e018      	b.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a79      	ldr	r2, [pc, #484]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eee:	f7fe fd11 	bl	8003914 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef6:	f7fe fd0d 	bl	8003914 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e203      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f08:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d03c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01c      	beq.n	8004f62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f28:	4b68      	ldr	r3, [pc, #416]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2e:	4a67      	ldr	r2, [pc, #412]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fe fcec 	bl	8003914 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fe fce8 	bl	8003914 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e1de      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f52:	4b5e      	ldr	r3, [pc, #376]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ef      	beq.n	8004f40 <HAL_RCC_OscConfig+0x3ec>
 8004f60:	e01b      	b.n	8004f9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f62:	4b5a      	ldr	r3, [pc, #360]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f68:	4a58      	ldr	r2, [pc, #352]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fe fccf 	bl	8003914 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fe fccb 	bl	8003914 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1c1      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8c:	4b4f      	ldr	r3, [pc, #316]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ef      	bne.n	8004f7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a6 	beq.w	80050f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fac:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb8:	4b44      	ldr	r3, [pc, #272]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a43      	ldr	r2, [pc, #268]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc4:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <HAL_RCC_OscConfig+0x57c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d118      	bne.n	8005012 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe0:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <HAL_RCC_OscConfig+0x57c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a3a      	ldr	r2, [pc, #232]	; (80050d0 <HAL_RCC_OscConfig+0x57c>)
 8004fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fec:	f7fe fc92 	bl	8003914 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fe fc8e 	bl	8003914 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e184      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005006:	4b32      	ldr	r3, [pc, #200]	; (80050d0 <HAL_RCC_OscConfig+0x57c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d108      	bne.n	800502c <HAL_RCC_OscConfig+0x4d8>
 800501a:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502a:	e024      	b.n	8005076 <HAL_RCC_OscConfig+0x522>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b05      	cmp	r3, #5
 8005032:	d110      	bne.n	8005056 <HAL_RCC_OscConfig+0x502>
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	4a20      	ldr	r2, [pc, #128]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005054:	e00f      	b.n	8005076 <HAL_RCC_OscConfig+0x522>
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 800506e:	f023 0304 	bic.w	r3, r3, #4
 8005072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fe fc49 	bl	8003914 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fe fc45 	bl	8003914 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e139      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_OscConfig+0x578>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ed      	beq.n	8005086 <HAL_RCC_OscConfig+0x532>
 80050aa:	e01a      	b.n	80050e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fe fc32 	bl	8003914 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b2:	e00f      	b.n	80050d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fe fc2e 	bl	8003914 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d906      	bls.n	80050d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e122      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d4:	4b90      	ldr	r3, [pc, #576]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e8      	bne.n	80050b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e8:	4b8b      	ldr	r3, [pc, #556]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	4a8a      	ldr	r2, [pc, #552]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8108 	beq.w	800530e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	2b02      	cmp	r3, #2
 8005104:	f040 80d0 	bne.w	80052a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005108:	4b83      	ldr	r3, [pc, #524]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	429a      	cmp	r2, r3
 800511a:	d130      	bne.n	800517e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	3b01      	subs	r3, #1
 8005128:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d127      	bne.n	800517e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d11f      	bne.n	800517e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005148:	2a07      	cmp	r2, #7
 800514a:	bf14      	ite	ne
 800514c:	2201      	movne	r2, #1
 800514e:	2200      	moveq	r2, #0
 8005150:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005152:	4293      	cmp	r3, r2
 8005154:	d113      	bne.n	800517e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	3b01      	subs	r3, #1
 8005164:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d109      	bne.n	800517e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d06e      	beq.n	800525c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d069      	beq.n	8005258 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005184:	4b64      	ldr	r3, [pc, #400]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005190:	4b61      	ldr	r3, [pc, #388]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0b7      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051a0:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5c      	ldr	r2, [pc, #368]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051ac:	f7fe fbb2 	bl	8003914 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fbae 	bl	8003914 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0a4      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c6:	4b54      	ldr	r3, [pc, #336]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051d2:	4b51      	ldr	r3, [pc, #324]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	4b51      	ldr	r3, [pc, #324]	; (800531c <HAL_RCC_OscConfig+0x7c8>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051e2:	3a01      	subs	r2, #1
 80051e4:	0112      	lsls	r2, r2, #4
 80051e6:	4311      	orrs	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051ec:	0212      	lsls	r2, r2, #8
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051f4:	0852      	lsrs	r2, r2, #1
 80051f6:	3a01      	subs	r2, #1
 80051f8:	0552      	lsls	r2, r2, #21
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005200:	0852      	lsrs	r2, r2, #1
 8005202:	3a01      	subs	r2, #1
 8005204:	0652      	lsls	r2, r2, #25
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800520c:	0912      	lsrs	r2, r2, #4
 800520e:	0452      	lsls	r2, r2, #17
 8005210:	430a      	orrs	r2, r1
 8005212:	4941      	ldr	r1, [pc, #260]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005218:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3e      	ldr	r2, [pc, #248]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800521e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005224:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a3b      	ldr	r2, [pc, #236]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005230:	f7fe fb70 	bl	8003914 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fe fb6c 	bl	8003914 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e062      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	4b33      	ldr	r3, [pc, #204]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005256:	e05a      	b.n	800530e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e059      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525c:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d152      	bne.n	800530e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800526e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005272:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800527a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800527e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005280:	f7fe fb48 	bl	8003914 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fe fb44 	bl	8003914 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e03a      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x734>
 80052a6:	e032      	b.n	800530e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d02d      	beq.n	800530a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80052ba:	4b17      	ldr	r3, [pc, #92]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d105      	bne.n	80052d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	4a13      	ldr	r2, [pc, #76]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fe fb17 	bl	8003914 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fe fb13 	bl	8003914 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e009      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_RCC_OscConfig+0x7c4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_OscConfig+0x796>
 8005308:	e001      	b.n	800530e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000
 800531c:	f99d808c 	.word	0xf99d808c

08005320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0c8      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d910      	bls.n	8005364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 0207 	bic.w	r2, r3, #7
 800534a:	4961      	ldr	r1, [pc, #388]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0b0      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d04c      	beq.n	800540a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005378:	4b56      	ldr	r3, [pc, #344]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d121      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e09e      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d115      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e092      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053a8:	4b4a      	ldr	r3, [pc, #296]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e086      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053b8:	4b46      	ldr	r3, [pc, #280]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e07e      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053c8:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 0203 	bic.w	r2, r3, #3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	493f      	ldr	r1, [pc, #252]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053da:	f7fe fa9b 	bl	8003914 <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e2:	f7fe fa97 	bl	8003914 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e066      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f8:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 020c 	and.w	r2, r3, #12
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	429a      	cmp	r2, r3
 8005408:	d1eb      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005416:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	492c      	ldr	r1, [pc, #176]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005428:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d210      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 0207 	bic.w	r2, r3, #7
 800543e:	4924      	ldr	r1, [pc, #144]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e036      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4918      	ldr	r1, [pc, #96]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4910      	ldr	r1, [pc, #64]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005496:	f000 f825 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800549a:	4601      	mov	r1, r0
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <HAL_RCC_ClockConfig+0x1b4>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	fa21 f303 	lsr.w	r3, r1, r3
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe f9da 	bl	8003874 <HAL_InitTick>
 80054c0:	4603      	mov	r3, r0
 80054c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80054c4:	7afb      	ldrb	r3, [r7, #11]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40022000 	.word	0x40022000
 80054d4:	40021000 	.word	0x40021000
 80054d8:	0800dc1c 	.word	0x0800dc1c
 80054dc:	20000004 	.word	0x20000004
 80054e0:	2000001c 	.word	0x2000001c

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f2:	4b3d      	ldr	r3, [pc, #244]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054fc:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x34>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d121      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d11e      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005518:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e005      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005534:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005540:	4a2a      	ldr	r2, [pc, #168]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10d      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005554:	e00a      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b04      	cmp	r3, #4
 800555a:	d102      	bne.n	8005562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800555c:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e004      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d101      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800556a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d133      	bne.n	80055da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005572:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d002      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0xa4>
 8005582:	2b03      	cmp	r3, #3
 8005584:	d003      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0xaa>
 8005586:	e005      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800558a:	617b      	str	r3, [r7, #20]
      break;
 800558c:	e005      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800558e:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005590:	617b      	str	r3, [r7, #20]
      break;
 8005592:	e002      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	617b      	str	r3, [r7, #20]
      break;
 8005598:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	3301      	adds	r3, #1
 80055a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	fb02 f203 	mul.w	r2, r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	0e5b      	lsrs	r3, r3, #25
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	3301      	adds	r3, #1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055da:	69bb      	ldr	r3, [r7, #24]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3724      	adds	r7, #36	; 0x24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40021000 	.word	0x40021000
 80055ec:	0800dc34 	.word	0x0800dc34
 80055f0:	00f42400 	.word	0x00f42400
 80055f4:	007a1200 	.word	0x007a1200

080055f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <HAL_RCC_GetHCLKFreq+0x14>)
 80055fe:	681b      	ldr	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000004 	.word	0x20000004

08005610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005614:	f7ff fff0 	bl	80055f8 <HAL_RCC_GetHCLKFreq>
 8005618:	4601      	mov	r1, r0
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4a04      	ldr	r2, [pc, #16]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005626:	5cd3      	ldrb	r3, [r2, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40021000 	.word	0x40021000
 8005638:	0800dc2c 	.word	0x0800dc2c

0800563c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005640:	f7ff ffda 	bl	80055f8 <HAL_RCC_GetHCLKFreq>
 8005644:	4601      	mov	r1, r0
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0adb      	lsrs	r3, r3, #11
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	0800dc2c 	.word	0x0800dc2c

08005668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005674:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005680:	f7ff f938 	bl	80048f4 <HAL_PWREx_GetVoltageRange>
 8005684:	6178      	str	r0, [r7, #20]
 8005686:	e014      	b.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	4a24      	ldr	r2, [pc, #144]	; (8005720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005692:	6593      	str	r3, [r2, #88]	; 0x58
 8005694:	4b22      	ldr	r3, [pc, #136]	; (8005720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056a0:	f7ff f928 	bl	80048f4 <HAL_PWREx_GetVoltageRange>
 80056a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056a6:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b8:	d10b      	bne.n	80056d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b80      	cmp	r3, #128	; 0x80
 80056be:	d919      	bls.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2ba0      	cmp	r3, #160	; 0xa0
 80056c4:	d902      	bls.n	80056cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056c6:	2302      	movs	r3, #2
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e013      	b.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056cc:	2301      	movs	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	e010      	b.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d902      	bls.n	80056de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056d8:	2303      	movs	r3, #3
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	e00a      	b.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d102      	bne.n	80056ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e4:	2302      	movs	r3, #2
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	e004      	b.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b70      	cmp	r3, #112	; 0x70
 80056ee:	d101      	bne.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056f0:	2301      	movs	r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 0207 	bic.w	r2, r3, #7
 80056fc:	4909      	ldr	r1, [pc, #36]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	429a      	cmp	r2, r3
 8005710:	d001      	beq.n	8005716 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000
 8005724:	40022000 	.word	0x40022000

08005728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005730:	2300      	movs	r3, #0
 8005732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005734:	2300      	movs	r3, #0
 8005736:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005740:	2b00      	cmp	r3, #0
 8005742:	d03f      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d01c      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d802      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005758:	e01f      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800575a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800575e:	d003      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005764:	d01c      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005766:	e018      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005768:	4b85      	ldr	r3, [pc, #532]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a84      	ldr	r2, [pc, #528]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800576e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005772:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005774:	e015      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fac9 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005786:	e00c      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3320      	adds	r3, #32
 800578c:	2100      	movs	r1, #0
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fbb0 	bl	8005ef4 <RCCEx_PLLSAI2_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	74fb      	strb	r3, [r7, #19]
      break;
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80057a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a8:	4b75      	ldr	r3, [pc, #468]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b6:	4972      	ldr	r1, [pc, #456]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057be:	e001      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03f      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057d8:	d01c      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80057da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057de:	d802      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80057e4:	e01f      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80057ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057f0:	d01c      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80057f2:	e018      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057f4:	4b62      	ldr	r3, [pc, #392]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a61      	ldr	r2, [pc, #388]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005800:	e015      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3304      	adds	r3, #4
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fa83 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005812:	e00c      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3320      	adds	r3, #32
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fb6a 	bl	8005ef4 <RCCEx_PLLSAI2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005824:	e003      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	74fb      	strb	r3, [r7, #19]
      break;
 800582a:	e000      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800582c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005834:	4b52      	ldr	r3, [pc, #328]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005842:	494f      	ldr	r1, [pc, #316]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800584a:	e001      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a0 	beq.w	800599e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00d      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005878:	4b41      	ldr	r3, [pc, #260]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587c:	4a40      	ldr	r2, [pc, #256]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005882:	6593      	str	r3, [r2, #88]	; 0x58
 8005884:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005890:	2301      	movs	r3, #1
 8005892:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005894:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a3a      	ldr	r2, [pc, #232]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800589a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058a0:	f7fe f838 	bl	8003914 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058a6:	e009      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a8:	f7fe f834 	bl	8003914 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d902      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	74fb      	strb	r3, [r7, #19]
        break;
 80058ba:	e005      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058bc:	4b31      	ldr	r3, [pc, #196]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ef      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d15c      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058ce:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01f      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d019      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058ec:	4b24      	ldr	r3, [pc, #144]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058f8:	4b21      	ldr	r3, [pc, #132]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fe:	4a20      	ldr	r2, [pc, #128]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592a:	f7fd fff3 	bl	8003914 <HAL_GetTick>
 800592e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005930:	e00b      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fd ffef 	bl	8003914 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d902      	bls.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	74fb      	strb	r3, [r7, #19]
            break;
 8005948:	e006      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ec      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10c      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595e:	4b08      	ldr	r3, [pc, #32]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596e:	4904      	ldr	r1, [pc, #16]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005976:	e009      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	74bb      	strb	r3, [r7, #18]
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
 8005984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800598c:	7c7b      	ldrb	r3, [r7, #17]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d105      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005992:	4b9e      	ldr	r3, [pc, #632]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005996:	4a9d      	ldr	r2, [pc, #628]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059aa:	4b98      	ldr	r3, [pc, #608]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f023 0203 	bic.w	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	4994      	ldr	r1, [pc, #592]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059cc:	4b8f      	ldr	r3, [pc, #572]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f023 020c 	bic.w	r2, r3, #12
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	498c      	ldr	r1, [pc, #560]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ee:	4b87      	ldr	r3, [pc, #540]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	4983      	ldr	r1, [pc, #524]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a10:	4b7e      	ldr	r3, [pc, #504]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	497b      	ldr	r1, [pc, #492]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a32:	4b76      	ldr	r3, [pc, #472]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a40:	4972      	ldr	r1, [pc, #456]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a54:	4b6d      	ldr	r3, [pc, #436]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a62:	496a      	ldr	r1, [pc, #424]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a76:	4b65      	ldr	r3, [pc, #404]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	4961      	ldr	r1, [pc, #388]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a98:	4b5c      	ldr	r3, [pc, #368]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa6:	4959      	ldr	r1, [pc, #356]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aba:	4b54      	ldr	r3, [pc, #336]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	4950      	ldr	r1, [pc, #320]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aea:	4948      	ldr	r1, [pc, #288]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005afe:	4b43      	ldr	r3, [pc, #268]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	493f      	ldr	r1, [pc, #252]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d028      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b20:	4b3a      	ldr	r3, [pc, #232]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2e:	4937      	ldr	r1, [pc, #220]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b40:	4b32      	ldr	r3, [pc, #200]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a31      	ldr	r2, [pc, #196]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4a:	60d3      	str	r3, [r2, #12]
 8005b4c:	e011      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b56:	d10c      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f8d8 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b7e:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	491f      	ldr	r1, [pc, #124]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9c:	d106      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ba8:	60d3      	str	r3, [r2, #12]
 8005baa:	e011      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2101      	movs	r1, #1
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f8a9 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d02b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	4908      	ldr	r1, [pc, #32]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bfa:	d109      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4a02      	ldr	r2, [pc, #8]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c06:	60d3      	str	r3, [r2, #12]
 8005c08:	e014      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f877 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c2a:	7cfb      	ldrb	r3, [r7, #19]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d02f      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c40:	4b2b      	ldr	r3, [pc, #172]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c4e:	4928      	ldr	r1, [pc, #160]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3304      	adds	r3, #4
 8005c64:	2102      	movs	r1, #2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f854 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d014      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	74bb      	strb	r3, [r7, #18]
 8005c7a:	e011      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3320      	adds	r3, #32
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f931 	bl	8005ef4 <RCCEx_PLLSAI2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cac:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cba:	490d      	ldr	r1, [pc, #52]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cde:	4904      	ldr	r1, [pc, #16]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ce6:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000

08005cf4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005cfe:	f043 0304 	orr.w	r3, r3, #4
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000

08005d14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d22:	4b73      	ldr	r3, [pc, #460]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d2e:	4b70      	ldr	r3, [pc, #448]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d10d      	bne.n	8005d5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
       ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d46:	4b6a      	ldr	r3, [pc, #424]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
       ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d044      	beq.n	8005de4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e041      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d00c      	beq.n	8005d82 <RCCEx_PLLSAI1_Config+0x6e>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d013      	beq.n	8005d94 <RCCEx_PLLSAI1_Config+0x80>
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d120      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d70:	4b5f      	ldr	r3, [pc, #380]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11d      	bne.n	8005db8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d80:	e01a      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d82:	4b5b      	ldr	r3, [pc, #364]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d116      	bne.n	8005dbc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d92:	e013      	b.n	8005dbc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d94:	4b56      	ldr	r3, [pc, #344]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005da0:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005db0:	e006      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
      break;
 8005db6:	e004      	b.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005dc0:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dc8:	4b49      	ldr	r3, [pc, #292]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	4944      	ldr	r1, [pc, #272]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d17d      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dea:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a40      	ldr	r2, [pc, #256]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df6:	f7fd fd8d 	bl	8003914 <HAL_GetTick>
 8005dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dfc:	e009      	b.n	8005e12 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dfe:	f7fd fd89 	bl	8003914 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d902      	bls.n	8005e12 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	73fb      	strb	r3, [r7, #15]
        break;
 8005e10:	e005      	b.n	8005e1e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e12:	4b37      	ldr	r3, [pc, #220]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1ef      	bne.n	8005dfe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d160      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d111      	bne.n	8005e4e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e2a:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6892      	ldr	r2, [r2, #8]
 8005e3a:	0211      	lsls	r1, r2, #8
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68d2      	ldr	r2, [r2, #12]
 8005e40:	0912      	lsrs	r2, r2, #4
 8005e42:	0452      	lsls	r2, r2, #17
 8005e44:	430a      	orrs	r2, r1
 8005e46:	492a      	ldr	r1, [pc, #168]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]
 8005e4c:	e027      	b.n	8005e9e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d112      	bne.n	8005e7a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6892      	ldr	r2, [r2, #8]
 8005e64:	0211      	lsls	r1, r2, #8
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6912      	ldr	r2, [r2, #16]
 8005e6a:	0852      	lsrs	r2, r2, #1
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0552      	lsls	r2, r2, #21
 8005e70:	430a      	orrs	r2, r1
 8005e72:	491f      	ldr	r1, [pc, #124]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
 8005e78:	e011      	b.n	8005e9e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6892      	ldr	r2, [r2, #8]
 8005e8a:	0211      	lsls	r1, r2, #8
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6952      	ldr	r2, [r2, #20]
 8005e90:	0852      	lsrs	r2, r2, #1
 8005e92:	3a01      	subs	r2, #1
 8005e94:	0652      	lsls	r2, r2, #25
 8005e96:	430a      	orrs	r2, r1
 8005e98:	4915      	ldr	r1, [pc, #84]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e9e:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ea8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eaa:	f7fd fd33 	bl	8003914 <HAL_GetTick>
 8005eae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eb0:	e009      	b.n	8005ec6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb2:	f7fd fd2f 	bl	8003914 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d902      	bls.n	8005ec6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ec4:	e005      	b.n	8005ed2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ef      	beq.n	8005eb2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f02:	4b68      	ldr	r3, [pc, #416]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d018      	beq.n	8005f40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f0e:	4b65      	ldr	r3, [pc, #404]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0203 	and.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d10d      	bne.n	8005f3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
       ||
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f26:	4b5f      	ldr	r3, [pc, #380]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
       ||
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d044      	beq.n	8005fc4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	e041      	b.n	8005fc4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d00c      	beq.n	8005f62 <RCCEx_PLLSAI2_Config+0x6e>
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d013      	beq.n	8005f74 <RCCEx_PLLSAI2_Config+0x80>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d120      	bne.n	8005f92 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f50:	4b54      	ldr	r3, [pc, #336]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11d      	bne.n	8005f98 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f60:	e01a      	b.n	8005f98 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f62:	4b50      	ldr	r3, [pc, #320]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d116      	bne.n	8005f9c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f72:	e013      	b.n	8005f9c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f74:	4b4b      	ldr	r3, [pc, #300]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f80:	4b48      	ldr	r3, [pc, #288]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f90:	e006      	b.n	8005fa0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
      break;
 8005f96:	e004      	b.n	8005fa2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005f98:	bf00      	nop
 8005f9a:	e002      	b.n	8005fa2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005f9c:	bf00      	nop
 8005f9e:	e000      	b.n	8005fa2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005fa0:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10d      	bne.n	8005fc4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fa8:	4b3e      	ldr	r3, [pc, #248]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	4939      	ldr	r1, [pc, #228]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d167      	bne.n	800609a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fca:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fd fc9d 	bl	8003914 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fdc:	e009      	b.n	8005ff2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fde:	f7fd fc99 	bl	8003914 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d902      	bls.n	8005ff2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	73fb      	strb	r3, [r7, #15]
        break;
 8005ff0:	e005      	b.n	8005ffe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1ef      	bne.n	8005fde <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d14a      	bne.n	800609a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d111      	bne.n	800602e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800600a:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	0211      	lsls	r1, r2, #8
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68d2      	ldr	r2, [r2, #12]
 8006020:	0912      	lsrs	r2, r2, #4
 8006022:	0452      	lsls	r2, r2, #17
 8006024:	430a      	orrs	r2, r1
 8006026:	491f      	ldr	r1, [pc, #124]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006028:	4313      	orrs	r3, r2
 800602a:	614b      	str	r3, [r1, #20]
 800602c:	e011      	b.n	8006052 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006036:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6892      	ldr	r2, [r2, #8]
 800603e:	0211      	lsls	r1, r2, #8
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6912      	ldr	r2, [r2, #16]
 8006044:	0852      	lsrs	r2, r2, #1
 8006046:	3a01      	subs	r2, #1
 8006048:	0652      	lsls	r2, r2, #25
 800604a:	430a      	orrs	r2, r1
 800604c:	4915      	ldr	r1, [pc, #84]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800604e:	4313      	orrs	r3, r2
 8006050:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006052:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605e:	f7fd fc59 	bl	8003914 <HAL_GetTick>
 8006062:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006064:	e009      	b.n	800607a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006066:	f7fd fc55 	bl	8003914 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d902      	bls.n	800607a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	73fb      	strb	r3, [r7, #15]
          break;
 8006078:	e005      	b.n	8006086 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0ef      	beq.n	8006066 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	4903      	ldr	r1, [pc, #12]	; (80060a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006096:	4313      	orrs	r3, r2
 8006098:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40021000 	.word	0x40021000

080060a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e095      	b.n	80061e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d108      	bne.n	80060d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ca:	d009      	beq.n	80060e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	61da      	str	r2, [r3, #28]
 80060d2:	e005      	b.n	80060e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fc fef0 	bl	8002ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006116:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006120:	d902      	bls.n	8006128 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e002      	b.n	800612e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800612c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006136:	d007      	beq.n	8006148 <HAL_SPI_Init+0xa0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006140:	d002      	beq.n	8006148 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	ea42 0103 	orr.w	r1, r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	f003 0204 	and.w	r2, r3, #4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061c4:	ea42 0103 	orr.w	r1, r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e01a      	b.n	8006236 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006216:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fc fea5 	bl	8002f68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af02      	add	r7, sp, #8
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625a:	d112      	bne.n	8006282 <HAL_SPI_Receive+0x44>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10e      	bne.n	8006282 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2204      	movs	r2, #4
 8006268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f910 	bl	800649e <HAL_SPI_TransmitReceive>
 800627e:	4603      	mov	r3, r0
 8006280:	e109      	b.n	8006496 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_SPI_Receive+0x52>
 800628c:	2302      	movs	r3, #2
 800628e:	e102      	b.n	8006496 <HAL_SPI_Receive+0x258>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006298:	f7fd fb3c 	bl	8003914 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ae:	e0e9      	b.n	8006484 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Receive+0x7e>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062c0:	e0e0      	b.n	8006484 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2204      	movs	r2, #4
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800630c:	d908      	bls.n	8006320 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	e007      	b.n	8006330 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	d10f      	bne.n	800635a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d007      	beq.n	8006378 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006376:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006380:	d867      	bhi.n	8006452 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006382:	e030      	b.n	80063e6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b01      	cmp	r3, #1
 8006390:	d117      	bne.n	80063c2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f103 020c 	add.w	r2, r3, #12
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063c0:	e011      	b.n	80063e6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c2:	f7fd faa7 	bl	8003914 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d803      	bhi.n	80063da <HAL_SPI_Receive+0x19c>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d102      	bne.n	80063e0 <HAL_SPI_Receive+0x1a2>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063e4:	e04e      	b.n	8006484 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1c8      	bne.n	8006384 <HAL_SPI_Receive+0x146>
 80063f2:	e034      	b.n	800645e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d115      	bne.n	800642e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	b292      	uxth	r2, r2
 800640e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	1c9a      	adds	r2, r3, #2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800642c:	e011      	b.n	8006452 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642e:	f7fd fa71 	bl	8003914 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d803      	bhi.n	8006446 <HAL_SPI_Receive+0x208>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d102      	bne.n	800644c <HAL_SPI_Receive+0x20e>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006450:	e018      	b.n	8006484 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ca      	bne.n	80063f4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fffa 	bl	800745c <SPI_EndRxTransaction>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
 8006480:	e000      	b.n	8006484 <HAL_SPI_Receive+0x246>
  }

error :
 8006482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b08a      	sub	sp, #40	; 0x28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ac:	2301      	movs	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x26>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e1fb      	b.n	80068bc <HAL_SPI_TransmitReceive+0x41e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064cc:	f7fd fa22 	bl	8003914 <HAL_GetTick>
 80064d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80064e4:	887b      	ldrh	r3, [r7, #2]
 80064e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064e8:	7efb      	ldrb	r3, [r7, #27]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d00e      	beq.n	800650c <HAL_SPI_TransmitReceive+0x6e>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x66>
 80064fe:	7efb      	ldrb	r3, [r7, #27]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d003      	beq.n	800650c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800650a:	e1cd      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_SPI_TransmitReceive+0x80>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_SPI_TransmitReceive+0x80>
 8006518:	887b      	ldrh	r3, [r7, #2]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006524:	e1c0      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b04      	cmp	r3, #4
 8006530:	d003      	beq.n	800653a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2205      	movs	r2, #5
 8006536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	887a      	ldrh	r2, [r7, #2]
 8006552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	887a      	ldrh	r2, [r7, #2]
 8006560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	887a      	ldrh	r2, [r7, #2]
 8006566:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800657c:	d802      	bhi.n	8006584 <HAL_SPI_TransmitReceive+0xe6>
 800657e:	8a3b      	ldrh	r3, [r7, #16]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d908      	bls.n	8006596 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006592:	605a      	str	r2, [r3, #4]
 8006594:	e007      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d007      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065cc:	d97c      	bls.n	80066c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x13e>
 80065d6:	8a7b      	ldrh	r3, [r7, #18]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d169      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	881a      	ldrh	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006600:	e056      	b.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b02      	cmp	r3, #2
 800660e:	d11b      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x1aa>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x1aa>
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b01      	cmp	r3, #1
 800661e:	d113      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d11c      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x1f2>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d016      	beq.n	8006690 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	b292      	uxth	r2, r2
 800666e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800668c:	2301      	movs	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006690:	f7fd f940 	bl	8003914 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	429a      	cmp	r2, r3
 800669e:	d807      	bhi.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d003      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066ae:	e0fb      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1a3      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x164>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d19d      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x164>
 80066c6:	e0df      	b.n	8006888 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x23a>
 80066d0:	8a7b      	ldrh	r3, [r7, #18]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	f040 80cb 	bne.w	800686e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d912      	bls.n	8006708 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	1c9a      	adds	r2, r3, #2
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b02      	subs	r3, #2
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006706:	e0b2      	b.n	800686e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800672e:	e09e      	b.n	800686e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d134      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x30a>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02f      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x30a>
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	2b01      	cmp	r3, #1
 800674c:	d12c      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	d912      	bls.n	800677e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b02      	subs	r3, #2
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800677c:	e012      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	330c      	adds	r3, #12
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d148      	bne.n	8006848 <HAL_SPI_TransmitReceive+0x3aa>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d042      	beq.n	8006848 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d923      	bls.n	8006816 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	b292      	uxth	r2, r2
 80067da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b02      	subs	r3, #2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d81f      	bhi.n	8006844 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006812:	605a      	str	r2, [r3, #4]
 8006814:	e016      	b.n	8006844 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f103 020c 	add.w	r2, r3, #12
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006844:	2301      	movs	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006848:	f7fd f864 	bl	8003914 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	429a      	cmp	r2, r3
 8006856:	d803      	bhi.n	8006860 <HAL_SPI_TransmitReceive+0x3c2>
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d102      	bne.n	8006866 <HAL_SPI_TransmitReceive+0x3c8>
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800686c:	e01c      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f af5b 	bne.w	8006730 <HAL_SPI_TransmitReceive+0x292>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f af54 	bne.w	8006730 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fe3d 	bl	800750c <SPI_EndRxTxTransaction>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d006      	beq.n	80068a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
 80068a4:	e000      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80068a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3728      	adds	r7, #40	; 0x28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_SPI_Transmit_IT+0x20>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e072      	b.n	80069ca <HAL_SPI_Transmit_IT+0x106>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Transmit_IT+0x34>
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068fc:	e060      	b.n	80069c0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d002      	beq.n	8006910 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800690a:	2302      	movs	r3, #2
 800690c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800690e:	e057      	b.n	80069c0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2203      	movs	r2, #3
 8006914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	88fa      	ldrh	r2, [r7, #6]
 800692e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006954:	d903      	bls.n	800695e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <HAL_SPI_Transmit_IT+0x114>)
 800695a:	651a      	str	r2, [r3, #80]	; 0x50
 800695c:	e002      	b.n	8006964 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <HAL_SPI_Transmit_IT+0x118>)
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d10f      	bne.n	800698e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800698c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800699c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d008      	beq.n	80069be <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	e000      	b.n	80069c0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80069be:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	080071eb 	.word	0x080071eb
 80069dc:	080071a5 	.word	0x080071a5

080069e0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d110      	bne.n	8006a1c <HAL_SPI_Receive_IT+0x3c>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a02:	d10b      	bne.n	8006a1c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2204      	movs	r2, #4
 8006a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006a0c:	88fb      	ldrh	r3, [r7, #6]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f894 	bl	8006b40 <HAL_SPI_TransmitReceive_IT>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	e089      	b.n	8006b30 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_SPI_Receive_IT+0x4a>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e082      	b.n	8006b30 <HAL_SPI_Receive_IT+0x150>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a42:	e070      	b.n	8006b26 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_SPI_Receive_IT+0x70>
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a54:	e067      	b.n	8006b26 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a9a:	d90b      	bls.n	8006ab4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aaa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a22      	ldr	r2, [pc, #136]	; (8006b38 <HAL_SPI_Receive_IT+0x158>)
 8006ab0:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ab2:	e00a      	b.n	8006aca <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ac2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a1d      	ldr	r2, [pc, #116]	; (8006b3c <HAL_SPI_Receive_IT+0x15c>)
 8006ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad2:	d10f      	bne.n	8006af4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006af2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006b02:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d008      	beq.n	8006b24 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e000      	b.n	8006b26 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006b24:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	08007159 	.word	0x08007159
 8006b3c:	08007109 	.word	0x08007109

08006b40 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_SPI_TransmitReceive_IT+0x20>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e091      	b.n	8006c84 <HAL_SPI_TransmitReceive_IT+0x144>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b6e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b76:	7dbb      	ldrb	r3, [r7, #22]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d00d      	beq.n	8006b98 <HAL_SPI_TransmitReceive_IT+0x58>
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b82:	d106      	bne.n	8006b92 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_TransmitReceive_IT+0x52>
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
 8006b94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b96:	e070      	b.n	8006c7a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_SPI_TransmitReceive_IT+0x6a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_SPI_TransmitReceive_IT+0x6a>
 8006ba4:	887b      	ldrh	r3, [r7, #2]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bae:	e064      	b.n	8006c7a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d003      	beq.n	8006bc4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	887a      	ldrh	r2, [r7, #2]
 8006bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	887a      	ldrh	r2, [r7, #2]
 8006bda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	887a      	ldrh	r2, [r7, #2]
 8006be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	887a      	ldrh	r2, [r7, #2]
 8006bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bfa:	d906      	bls.n	8006c0a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a24      	ldr	r2, [pc, #144]	; (8006c90 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006c00:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a23      	ldr	r2, [pc, #140]	; (8006c94 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006c06:	651a      	str	r2, [r3, #80]	; 0x50
 8006c08:	e005      	b.n	8006c16 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006c0e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c1e:	d802      	bhi.n	8006c26 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d908      	bls.n	8006c38 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c34:	605a      	str	r2, [r3, #4]
 8006c36:	e007      	b.n	8006c48 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006c56:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d008      	beq.n	8006c78 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e000      	b.n	8006c7a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006c78:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	08007043 	.word	0x08007043
 8006c94:	080070a9 	.word	0x080070a9
 8006c98:	08006ef3 	.word	0x08006ef3
 8006c9c:	08006fb1 	.word	0x08006fb1

08006ca0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10f      	bne.n	8006ce4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	099b      	lsrs	r3, r3, #6
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
    return;
 8006ce2:	e0d8      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_SPI_IRQHandler+0x66>
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
    return;
 8006d04:	e0c7      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10c      	bne.n	8006d2c <HAL_SPI_IRQHandler+0x8c>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	0a1b      	lsrs	r3, r3, #8
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 80b5 	beq.w	8006e96 <HAL_SPI_IRQHandler+0x1f6>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80ae 	beq.w	8006e96 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	099b      	lsrs	r3, r3, #6
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d023      	beq.n	8006d8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d011      	beq.n	8006d76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d56:	f043 0204 	orr.w	r2, r3, #4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	e00b      	b.n	8006d8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	693b      	ldr	r3, [r7, #16]
        return;
 8006d8c:	e083      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d014      	beq.n	8006dc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9e:	f043 0201 	orr.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd4:	f043 0208 	orr.w	r2, r3, #8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	60bb      	str	r3, [r7, #8]
 8006de8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d050      	beq.n	8006e94 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d104      	bne.n	8006e1e <HAL_SPI_IRQHandler+0x17e>
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d034      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0203 	bic.w	r2, r2, #3
 8006e2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d011      	beq.n	8006e5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <HAL_SPI_IRQHandler+0x1fc>)
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fc ffb2 	bl	8003dac <HAL_DMA_Abort_IT>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	4a0d      	ldr	r2, [pc, #52]	; (8006e9c <HAL_SPI_IRQHandler+0x1fc>)
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fc ff9c 	bl	8003dac <HAL_DMA_Abort_IT>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e86:	e003      	b.n	8006e90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f813 	bl	8006eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e8e:	e000      	b.n	8006e92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e90:	bf00      	nop
    return;
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
  }
}
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	08006ec9 	.word	0x08006ec9

08006ea0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff ffe5 	bl	8006eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d923      	bls.n	8006f4e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	b292      	uxth	r2, r2
 8006f12:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	1c9a      	adds	r2, r3, #2
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b02      	subs	r3, #2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d11f      	bne.n	8006f7c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f4a:	605a      	str	r2, [r3, #4]
 8006f4c:	e016      	b.n	8006f7c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f103 020c 	add.w	r2, r3, #12
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10f      	bne.n	8006fa8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f96:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 faf8 	bl	8007598 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d912      	bls.n	8006fe8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	881a      	ldrh	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b02      	subs	r3, #2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fe6:	e012      	b.n	800700e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d110      	bne.n	800703a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007026:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 faaf 	bl	8007598 <SPI_CloseRxTx_ISR>
    }
  }
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	b292      	uxth	r2, r2
 8007056:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	1c9a      	adds	r2, r3, #2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10f      	bne.n	80070a0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa7c 	bl	8007598 <SPI_CloseRxTx_ISR>
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	881a      	ldrh	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	1c9a      	adds	r2, r3, #2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d110      	bne.n	8007100 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ec:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa4c 	bl	8007598 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f103 020c 	add.w	r2, r3, #12
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa66 	bl	800761c <SPI_CloseRx_ISR>
  }
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	b292      	uxth	r2, r2
 800716c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa40 	bl	800761c <SPI_CloseRx_ISR>
  }
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	330c      	adds	r3, #12
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fa4d 	bl	800767c <SPI_CloseTx_ISR>
  }
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	881a      	ldrh	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	1c9a      	adds	r2, r3, #2
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b01      	subs	r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa2b 	bl	800767c <SPI_CloseTx_ISR>
  }
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	4613      	mov	r3, r2
 800723e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007240:	f7fc fb68 	bl	8003914 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4413      	add	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007250:	f7fc fb60 	bl	8003914 <HAL_GetTick>
 8007254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007256:	4b39      	ldr	r3, [pc, #228]	; (800733c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	015b      	lsls	r3, r3, #5
 800725c:	0d1b      	lsrs	r3, r3, #20
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	fb02 f303 	mul.w	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007266:	e054      	b.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d050      	beq.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007270:	f7fc fb50 	bl	8003914 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	429a      	cmp	r2, r3
 800727e:	d902      	bls.n	8007286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d13d      	bne.n	8007302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800729e:	d111      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a8:	d004      	beq.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b2:	d107      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072cc:	d10f      	bne.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e017      	b.n	8007332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3b01      	subs	r3, #1
 8007310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	429a      	cmp	r2, r3
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	429a      	cmp	r2, r3
 800732e:	d19b      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000004 	.word	0x20000004

08007340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800734e:	f7fc fae1 	bl	8003914 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800735e:	f7fc fad9 	bl	8003914 <HAL_GetTick>
 8007362:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007364:	4b3c      	ldr	r3, [pc, #240]	; (8007458 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	00da      	lsls	r2, r3, #3
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	0d1b      	lsrs	r3, r3, #20
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800737c:	e05f      	b.n	800743e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007384:	d106      	bne.n	8007394 <SPI_WaitFifoStateUntilTimeout+0x54>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739a:	d050      	beq.n	800743e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800739c:	f7fc faba 	bl	8003914 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d902      	bls.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d13d      	bne.n	800742e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ca:	d111      	bne.n	80073f0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d4:	d004      	beq.n	80073e0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073de:	d107      	bne.n	80073f0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f8:	d10f      	bne.n	800741a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e010      	b.n	8007450 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	3b01      	subs	r3, #1
 800743c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d197      	bne.n	800737e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000004 	.word	0x20000004

0800745c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007470:	d111      	bne.n	8007496 <SPI_EndRxTransaction+0x3a>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747a:	d004      	beq.n	8007486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007484:	d107      	bne.n	8007496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007494:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2200      	movs	r2, #0
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff fec5 	bl	8007230 <SPI_WaitFlagStateUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	f043 0220 	orr.w	r2, r3, #32
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e023      	b.n	8007504 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c4:	d11d      	bne.n	8007502 <SPI_EndRxTransaction+0xa6>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ce:	d004      	beq.n	80074da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d113      	bne.n	8007502 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff ff2a 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e000      	b.n	8007504 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af02      	add	r7, sp, #8
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff ff0b 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007534:	f043 0220 	orr.w	r2, r3, #32
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e027      	b.n	8007590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fe70 	bl	8007230 <SPI_WaitFlagStateUntilTimeout>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	f043 0220 	orr.w	r2, r3, #32
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e014      	b.n	8007590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff fee4 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e000      	b.n	8007590 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075a0:	f7fc f9b8 	bl	8003914 <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0220 	bic.w	r2, r2, #32
 80075b4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	2164      	movs	r1, #100	; 0x64
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ffa6 	bl	800750c <SPI_EndRxTxTransaction>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ca:	f043 0220 	orr.w	r2, r3, #32
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d115      	bne.n	8007606 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d107      	bne.n	80075f6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fa fc7a 	bl	8001ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80075f4:	e00e      	b.n	8007614 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fc4e 	bl	8006ea0 <HAL_SPI_TxRxCpltCallback>
}
 8007604:	e006      	b.n	8007614 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fc50 	bl	8006eb4 <HAL_SPI_ErrorCallback>
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007632:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007634:	f7fc f96e 	bl	8003914 <HAL_GetTick>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	2164      	movs	r1, #100	; 0x64
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff ff0c 	bl	800745c <SPI_EndRxTransaction>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764e:	f043 0220 	orr.w	r2, r3, #32
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa fc3e 	bl	8001ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800766c:	e002      	b.n	8007674 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fc20 	bl	8006eb4 <HAL_SPI_ErrorCallback>
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007684:	f7fc f946 	bl	8003914 <HAL_GetTick>
 8007688:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007698:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	2164      	movs	r1, #100	; 0x64
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff ff34 	bl	800750c <SPI_EndRxTxTransaction>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ae:	f043 0220 	orr.w	r2, r3, #32
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fbe5 	bl	8006eb4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80076ea:	e002      	b.n	80076f2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fa fc0f 	bl	8001f10 <HAL_SPI_TxCpltCallback>
}
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e040      	b.n	800778e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7fb fc41 	bl	8002fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2224      	movs	r2, #36	; 0x24
 8007726:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0201 	bic.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f8bf 	bl	80078bc <UART_SetConfig>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e022      	b.n	800778e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb3d 	bl	8007dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007764:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007774:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0201 	orr.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fbc4 	bl	8007f14 <UART_CheckIdleState>
 800778c:	4603      	mov	r3, r0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b08a      	sub	sp, #40	; 0x28
 800779a:	af02      	add	r7, sp, #8
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	f040 8081 	bne.w	80078b2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_UART_Transmit+0x26>
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e079      	b.n	80078b4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Transmit+0x38>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e072      	b.n	80078b4 <HAL_UART_Transmit+0x11e>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2221      	movs	r2, #33	; 0x21
 80077e0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80077e2:	f7fc f897 	bl	8003914 <HAL_GetTick>
 80077e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007800:	d108      	bne.n	8007814 <HAL_UART_Transmit+0x7e>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e003      	b.n	800781c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007824:	e02d      	b.n	8007882 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fbb4 	bl	8007f9e <UART_WaitOnFlagUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e039      	b.n	80078b4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007852:	b292      	uxth	r2, r2
 8007854:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3302      	adds	r3, #2
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e008      	b.n	8007870 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	b292      	uxth	r2, r2
 8007868:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	3301      	adds	r3, #1
 800786e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1cb      	bne.n	8007826 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2200      	movs	r2, #0
 8007896:	2140      	movs	r1, #64	; 0x40
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fb80 	bl	8007f9e <UART_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e005      	b.n	80078b4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2220      	movs	r2, #32
 80078ac:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80078b2:	2302      	movs	r3, #2
  }
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3720      	adds	r7, #32
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80078c0:	b088      	sub	sp, #32
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	4313      	orrs	r3, r2
 80078e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4bac      	ldr	r3, [pc, #688]	; (8007b9c <UART_SetConfig+0x2e0>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	69f9      	ldr	r1, [r7, #28]
 80078f2:	430b      	orrs	r3, r1
 80078f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4aa2      	ldr	r2, [pc, #648]	; (8007ba0 <UART_SetConfig+0x2e4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	4313      	orrs	r3, r2
 8007924:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	430a      	orrs	r2, r1
 8007938:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a99      	ldr	r2, [pc, #612]	; (8007ba4 <UART_SetConfig+0x2e8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d121      	bne.n	8007988 <UART_SetConfig+0xcc>
 8007944:	4b98      	ldr	r3, [pc, #608]	; (8007ba8 <UART_SetConfig+0x2ec>)
 8007946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d816      	bhi.n	8007980 <UART_SetConfig+0xc4>
 8007952:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <UART_SetConfig+0x9c>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	08007969 	.word	0x08007969
 800795c:	08007975 	.word	0x08007975
 8007960:	0800796f 	.word	0x0800796f
 8007964:	0800797b 	.word	0x0800797b
 8007968:	2301      	movs	r3, #1
 800796a:	76fb      	strb	r3, [r7, #27]
 800796c:	e0e8      	b.n	8007b40 <UART_SetConfig+0x284>
 800796e:	2302      	movs	r3, #2
 8007970:	76fb      	strb	r3, [r7, #27]
 8007972:	e0e5      	b.n	8007b40 <UART_SetConfig+0x284>
 8007974:	2304      	movs	r3, #4
 8007976:	76fb      	strb	r3, [r7, #27]
 8007978:	e0e2      	b.n	8007b40 <UART_SetConfig+0x284>
 800797a:	2308      	movs	r3, #8
 800797c:	76fb      	strb	r3, [r7, #27]
 800797e:	e0df      	b.n	8007b40 <UART_SetConfig+0x284>
 8007980:	2310      	movs	r3, #16
 8007982:	76fb      	strb	r3, [r7, #27]
 8007984:	bf00      	nop
 8007986:	e0db      	b.n	8007b40 <UART_SetConfig+0x284>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a87      	ldr	r2, [pc, #540]	; (8007bac <UART_SetConfig+0x2f0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d134      	bne.n	80079fc <UART_SetConfig+0x140>
 8007992:	4b85      	ldr	r3, [pc, #532]	; (8007ba8 <UART_SetConfig+0x2ec>)
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b0c      	cmp	r3, #12
 800799e:	d829      	bhi.n	80079f4 <UART_SetConfig+0x138>
 80079a0:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <UART_SetConfig+0xec>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	080079dd 	.word	0x080079dd
 80079ac:	080079f5 	.word	0x080079f5
 80079b0:	080079f5 	.word	0x080079f5
 80079b4:	080079f5 	.word	0x080079f5
 80079b8:	080079e9 	.word	0x080079e9
 80079bc:	080079f5 	.word	0x080079f5
 80079c0:	080079f5 	.word	0x080079f5
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	080079e3 	.word	0x080079e3
 80079cc:	080079f5 	.word	0x080079f5
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	080079f5 	.word	0x080079f5
 80079d8:	080079ef 	.word	0x080079ef
 80079dc:	2300      	movs	r3, #0
 80079de:	76fb      	strb	r3, [r7, #27]
 80079e0:	e0ae      	b.n	8007b40 <UART_SetConfig+0x284>
 80079e2:	2302      	movs	r3, #2
 80079e4:	76fb      	strb	r3, [r7, #27]
 80079e6:	e0ab      	b.n	8007b40 <UART_SetConfig+0x284>
 80079e8:	2304      	movs	r3, #4
 80079ea:	76fb      	strb	r3, [r7, #27]
 80079ec:	e0a8      	b.n	8007b40 <UART_SetConfig+0x284>
 80079ee:	2308      	movs	r3, #8
 80079f0:	76fb      	strb	r3, [r7, #27]
 80079f2:	e0a5      	b.n	8007b40 <UART_SetConfig+0x284>
 80079f4:	2310      	movs	r3, #16
 80079f6:	76fb      	strb	r3, [r7, #27]
 80079f8:	bf00      	nop
 80079fa:	e0a1      	b.n	8007b40 <UART_SetConfig+0x284>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a6b      	ldr	r2, [pc, #428]	; (8007bb0 <UART_SetConfig+0x2f4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d120      	bne.n	8007a48 <UART_SetConfig+0x18c>
 8007a06:	4b68      	ldr	r3, [pc, #416]	; (8007ba8 <UART_SetConfig+0x2ec>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d00f      	beq.n	8007a34 <UART_SetConfig+0x178>
 8007a14:	2b10      	cmp	r3, #16
 8007a16:	d802      	bhi.n	8007a1e <UART_SetConfig+0x162>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <UART_SetConfig+0x16c>
 8007a1c:	e010      	b.n	8007a40 <UART_SetConfig+0x184>
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	d005      	beq.n	8007a2e <UART_SetConfig+0x172>
 8007a22:	2b30      	cmp	r3, #48	; 0x30
 8007a24:	d009      	beq.n	8007a3a <UART_SetConfig+0x17e>
 8007a26:	e00b      	b.n	8007a40 <UART_SetConfig+0x184>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	76fb      	strb	r3, [r7, #27]
 8007a2c:	e088      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	76fb      	strb	r3, [r7, #27]
 8007a32:	e085      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a34:	2304      	movs	r3, #4
 8007a36:	76fb      	strb	r3, [r7, #27]
 8007a38:	e082      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	76fb      	strb	r3, [r7, #27]
 8007a3e:	e07f      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a40:	2310      	movs	r3, #16
 8007a42:	76fb      	strb	r3, [r7, #27]
 8007a44:	bf00      	nop
 8007a46:	e07b      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a59      	ldr	r2, [pc, #356]	; (8007bb4 <UART_SetConfig+0x2f8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d120      	bne.n	8007a94 <UART_SetConfig+0x1d8>
 8007a52:	4b55      	ldr	r3, [pc, #340]	; (8007ba8 <UART_SetConfig+0x2ec>)
 8007a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d00f      	beq.n	8007a80 <UART_SetConfig+0x1c4>
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d802      	bhi.n	8007a6a <UART_SetConfig+0x1ae>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <UART_SetConfig+0x1b8>
 8007a68:	e010      	b.n	8007a8c <UART_SetConfig+0x1d0>
 8007a6a:	2b80      	cmp	r3, #128	; 0x80
 8007a6c:	d005      	beq.n	8007a7a <UART_SetConfig+0x1be>
 8007a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a70:	d009      	beq.n	8007a86 <UART_SetConfig+0x1ca>
 8007a72:	e00b      	b.n	8007a8c <UART_SetConfig+0x1d0>
 8007a74:	2300      	movs	r3, #0
 8007a76:	76fb      	strb	r3, [r7, #27]
 8007a78:	e062      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	76fb      	strb	r3, [r7, #27]
 8007a7e:	e05f      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a80:	2304      	movs	r3, #4
 8007a82:	76fb      	strb	r3, [r7, #27]
 8007a84:	e05c      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a86:	2308      	movs	r3, #8
 8007a88:	76fb      	strb	r3, [r7, #27]
 8007a8a:	e059      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	76fb      	strb	r3, [r7, #27]
 8007a90:	bf00      	nop
 8007a92:	e055      	b.n	8007b40 <UART_SetConfig+0x284>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a47      	ldr	r2, [pc, #284]	; (8007bb8 <UART_SetConfig+0x2fc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d124      	bne.n	8007ae8 <UART_SetConfig+0x22c>
 8007a9e:	4b42      	ldr	r3, [pc, #264]	; (8007ba8 <UART_SetConfig+0x2ec>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aac:	d012      	beq.n	8007ad4 <UART_SetConfig+0x218>
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab2:	d802      	bhi.n	8007aba <UART_SetConfig+0x1fe>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <UART_SetConfig+0x20c>
 8007ab8:	e012      	b.n	8007ae0 <UART_SetConfig+0x224>
 8007aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007abe:	d006      	beq.n	8007ace <UART_SetConfig+0x212>
 8007ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac4:	d009      	beq.n	8007ada <UART_SetConfig+0x21e>
 8007ac6:	e00b      	b.n	8007ae0 <UART_SetConfig+0x224>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	76fb      	strb	r3, [r7, #27]
 8007acc:	e038      	b.n	8007b40 <UART_SetConfig+0x284>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	76fb      	strb	r3, [r7, #27]
 8007ad2:	e035      	b.n	8007b40 <UART_SetConfig+0x284>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	76fb      	strb	r3, [r7, #27]
 8007ad8:	e032      	b.n	8007b40 <UART_SetConfig+0x284>
 8007ada:	2308      	movs	r3, #8
 8007adc:	76fb      	strb	r3, [r7, #27]
 8007ade:	e02f      	b.n	8007b40 <UART_SetConfig+0x284>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	76fb      	strb	r3, [r7, #27]
 8007ae4:	bf00      	nop
 8007ae6:	e02b      	b.n	8007b40 <UART_SetConfig+0x284>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a2c      	ldr	r2, [pc, #176]	; (8007ba0 <UART_SetConfig+0x2e4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d124      	bne.n	8007b3c <UART_SetConfig+0x280>
 8007af2:	4b2d      	ldr	r3, [pc, #180]	; (8007ba8 <UART_SetConfig+0x2ec>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b00:	d012      	beq.n	8007b28 <UART_SetConfig+0x26c>
 8007b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b06:	d802      	bhi.n	8007b0e <UART_SetConfig+0x252>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <UART_SetConfig+0x260>
 8007b0c:	e012      	b.n	8007b34 <UART_SetConfig+0x278>
 8007b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b12:	d006      	beq.n	8007b22 <UART_SetConfig+0x266>
 8007b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b18:	d009      	beq.n	8007b2e <UART_SetConfig+0x272>
 8007b1a:	e00b      	b.n	8007b34 <UART_SetConfig+0x278>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	76fb      	strb	r3, [r7, #27]
 8007b20:	e00e      	b.n	8007b40 <UART_SetConfig+0x284>
 8007b22:	2302      	movs	r3, #2
 8007b24:	76fb      	strb	r3, [r7, #27]
 8007b26:	e00b      	b.n	8007b40 <UART_SetConfig+0x284>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	76fb      	strb	r3, [r7, #27]
 8007b2c:	e008      	b.n	8007b40 <UART_SetConfig+0x284>
 8007b2e:	2308      	movs	r3, #8
 8007b30:	76fb      	strb	r3, [r7, #27]
 8007b32:	e005      	b.n	8007b40 <UART_SetConfig+0x284>
 8007b34:	2310      	movs	r3, #16
 8007b36:	76fb      	strb	r3, [r7, #27]
 8007b38:	bf00      	nop
 8007b3a:	e001      	b.n	8007b40 <UART_SetConfig+0x284>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a16      	ldr	r2, [pc, #88]	; (8007ba0 <UART_SetConfig+0x2e4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	f040 8087 	bne.w	8007c5a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b4c:	7efb      	ldrb	r3, [r7, #27]
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d836      	bhi.n	8007bc0 <UART_SetConfig+0x304>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x29c>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b7d 	.word	0x08007b7d
 8007b5c:	08007bc1 	.word	0x08007bc1
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007bc1 	.word	0x08007bc1
 8007b68:	08007b8b 	.word	0x08007b8b
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007bc1 	.word	0x08007bc1
 8007b78:	08007b93 	.word	0x08007b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b7c:	f7fd fd48 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8007b80:	6178      	str	r0, [r7, #20]
        break;
 8007b82:	e022      	b.n	8007bca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b84:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <UART_SetConfig+0x300>)
 8007b86:	617b      	str	r3, [r7, #20]
        break;
 8007b88:	e01f      	b.n	8007bca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8a:	f7fd fcab 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8007b8e:	6178      	str	r0, [r7, #20]
        break;
 8007b90:	e01b      	b.n	8007bca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b96:	617b      	str	r3, [r7, #20]
        break;
 8007b98:	e017      	b.n	8007bca <UART_SetConfig+0x30e>
 8007b9a:	bf00      	nop
 8007b9c:	efff69f3 	.word	0xefff69f3
 8007ba0:	40008000 	.word	0x40008000
 8007ba4:	40013800 	.word	0x40013800
 8007ba8:	40021000 	.word	0x40021000
 8007bac:	40004400 	.word	0x40004400
 8007bb0:	40004800 	.word	0x40004800
 8007bb4:	40004c00 	.word	0x40004c00
 8007bb8:	40005000 	.word	0x40005000
 8007bbc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	76bb      	strb	r3, [r7, #26]
        break;
 8007bc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80f1 	beq.w	8007db4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4413      	add	r3, r2
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d305      	bcc.n	8007bee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d902      	bls.n	8007bf4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	76bb      	strb	r3, [r7, #26]
 8007bf2:	e0df      	b.n	8007db4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	f04f 0400 	mov.w	r4, #0
 8007c04:	0214      	lsls	r4, r2, #8
 8007c06:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007c0a:	020b      	lsls	r3, r1, #8
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6852      	ldr	r2, [r2, #4]
 8007c10:	0852      	lsrs	r2, r2, #1
 8007c12:	4611      	mov	r1, r2
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	eb13 0b01 	adds.w	fp, r3, r1
 8007c1c:	eb44 0c02 	adc.w	ip, r4, r2
 8007c20:	4658      	mov	r0, fp
 8007c22:	4661      	mov	r1, ip
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f04f 0400 	mov.w	r4, #0
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4623      	mov	r3, r4
 8007c30:	f7f8 fd0a 	bl	8000648 <__aeabi_uldivmod>
 8007c34:	4603      	mov	r3, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c40:	d308      	bcc.n	8007c54 <UART_SetConfig+0x398>
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c48:	d204      	bcs.n	8007c54 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	e0af      	b.n	8007db4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	76bb      	strb	r3, [r7, #26]
 8007c58:	e0ac      	b.n	8007db4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c62:	d15b      	bne.n	8007d1c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007c64:	7efb      	ldrb	r3, [r7, #27]
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d827      	bhi.n	8007cba <UART_SetConfig+0x3fe>
 8007c6a:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0x3b4>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007c95 	.word	0x08007c95
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007cbb 	.word	0x08007cbb
 8007c80:	08007cab 	.word	0x08007cab
 8007c84:	08007cbb 	.word	0x08007cbb
 8007c88:	08007cbb 	.word	0x08007cbb
 8007c8c:	08007cbb 	.word	0x08007cbb
 8007c90:	08007cb3 	.word	0x08007cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fd fcbc 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8007c98:	6178      	str	r0, [r7, #20]
        break;
 8007c9a:	e013      	b.n	8007cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c9c:	f7fd fcce 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 8007ca0:	6178      	str	r0, [r7, #20]
        break;
 8007ca2:	e00f      	b.n	8007cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca4:	4b49      	ldr	r3, [pc, #292]	; (8007dcc <UART_SetConfig+0x510>)
 8007ca6:	617b      	str	r3, [r7, #20]
        break;
 8007ca8:	e00c      	b.n	8007cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007caa:	f7fd fc1b 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8007cae:	6178      	str	r0, [r7, #20]
        break;
 8007cb0:	e008      	b.n	8007cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb6:	617b      	str	r3, [r7, #20]
        break;
 8007cb8:	e004      	b.n	8007cc4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	76bb      	strb	r3, [r7, #26]
        break;
 8007cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d074      	beq.n	8007db4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	005a      	lsls	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	441a      	add	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b0f      	cmp	r3, #15
 8007ce6:	d916      	bls.n	8007d16 <UART_SetConfig+0x45a>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cee:	d212      	bcs.n	8007d16 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f023 030f 	bic.w	r3, r3, #15
 8007cf8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	89fb      	ldrh	r3, [r7, #14]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	89fa      	ldrh	r2, [r7, #14]
 8007d12:	60da      	str	r2, [r3, #12]
 8007d14:	e04e      	b.n	8007db4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	76bb      	strb	r3, [r7, #26]
 8007d1a:	e04b      	b.n	8007db4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d1c:	7efb      	ldrb	r3, [r7, #27]
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d827      	bhi.n	8007d72 <UART_SetConfig+0x4b6>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x46c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	08007d73 	.word	0x08007d73
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d73 	.word	0x08007d73
 8007d40:	08007d73 	.word	0x08007d73
 8007d44:	08007d73 	.word	0x08007d73
 8007d48:	08007d6b 	.word	0x08007d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d4c:	f7fd fc60 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8007d50:	6178      	str	r0, [r7, #20]
        break;
 8007d52:	e013      	b.n	8007d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fd fc72 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 8007d58:	6178      	str	r0, [r7, #20]
        break;
 8007d5a:	e00f      	b.n	8007d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d5c:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <UART_SetConfig+0x510>)
 8007d5e:	617b      	str	r3, [r7, #20]
        break;
 8007d60:	e00c      	b.n	8007d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d62:	f7fd fbbf 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8007d66:	6178      	str	r0, [r7, #20]
        break;
 8007d68:	e008      	b.n	8007d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d6e:	617b      	str	r3, [r7, #20]
        break;
 8007d70:	e004      	b.n	8007d7c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	76bb      	strb	r3, [r7, #26]
        break;
 8007d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d018      	beq.n	8007db4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	085a      	lsrs	r2, r3, #1
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	441a      	add	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	d908      	bls.n	8007db0 <UART_SetConfig+0x4f4>
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da4:	d204      	bcs.n	8007db0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	60da      	str	r2, [r3, #12]
 8007dae:	e001      	b.n	8007db4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007dc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007dcc:	00f42400 	.word	0x00f42400

08007dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01a      	beq.n	8007ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ece:	d10a      	bne.n	8007ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]
  }
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f22:	f7fb fcf7 	bl	8003914 <HAL_GetTick>
 8007f26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d10e      	bne.n	8007f54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f82a 	bl	8007f9e <UART_WaitOnFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e020      	b.n	8007f96 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d10e      	bne.n	8007f80 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f814 	bl	8007f9e <UART_WaitOnFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e00a      	b.n	8007f96 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fae:	e05d      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb6:	d059      	beq.n	800806c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb8:	f7fb fcac 	bl	8003914 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d302      	bcc.n	8007fce <UART_WaitOnFlagUntilTimeout+0x30>
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d11b      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fdc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e042      	b.n	800808c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d02b      	beq.n	800806c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008022:	d123      	bne.n	800806c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800803c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2220      	movs	r2, #32
 8008058:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e00f      	b.n	800808c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69da      	ldr	r2, [r3, #28]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	429a      	cmp	r2, r3
 8008088:	d092      	beq.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008094:	b084      	sub	sp, #16
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	f107 001c 	add.w	r0, r7, #28
 80080a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d122      	bne.n	80080f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d105      	bne.n	80080e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa30 	bl	800854c <USB_CoreReset>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73fb      	strb	r3, [r7, #15]
 80080f0:	e01a      	b.n	8008128 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa24 	bl	800854c <USB_CoreReset>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
 800811a:	e005      	b.n	8008128 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008134:	b004      	add	sp, #16
 8008136:	4770      	bx	lr

08008138 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f023 0201 	bic.w	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d106      	bne.n	8008186 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60da      	str	r2, [r3, #12]
 8008184:	e00b      	b.n	800819e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60da      	str	r2, [r3, #12]
 8008198:	e001      	b.n	800819e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e003      	b.n	80081a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800819e:	2032      	movs	r0, #50	; 0x32
 80081a0:	f7fb fbc4 	bl	800392c <HAL_Delay>

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081b0:	b084      	sub	sp, #16
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081ca:	2300      	movs	r3, #0
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	e009      	b.n	80081e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	3340      	adds	r3, #64	; 0x40
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3301      	adds	r3, #1
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b0e      	cmp	r3, #14
 80081e8:	d9f2      	bls.n	80081d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d11c      	bne.n	800822a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081fe:	f043 0302 	orr.w	r3, r3, #2
 8008202:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e005      	b.n	8008236 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800823c:	461a      	mov	r2, r3
 800823e:	2300      	movs	r3, #0
 8008240:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	4619      	mov	r1, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008250:	461a      	mov	r2, r3
 8008252:	680b      	ldr	r3, [r1, #0]
 8008254:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008256:	2103      	movs	r1, #3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f93d 	bl	80084d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800825e:	2110      	movs	r1, #16
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f8f1 	bl	8008448 <USB_FlushTxFifo>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f90f 	bl	8008494 <USB_FlushRxFifo>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	461a      	mov	r2, r3
 8008288:	2300      	movs	r3, #0
 800828a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008292:	461a      	mov	r2, r3
 8008294:	2300      	movs	r3, #0
 8008296:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	461a      	mov	r2, r3
 80082a0:	2300      	movs	r3, #0
 80082a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082a4:	2300      	movs	r3, #0
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	e043      	b.n	8008332 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082c0:	d118      	bne.n	80082f4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d4:	461a      	mov	r2, r3
 80082d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	e013      	b.n	8008306 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ea:	461a      	mov	r2, r3
 80082ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	e008      	b.n	8008306 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	461a      	mov	r2, r3
 8008302:	2300      	movs	r3, #0
 8008304:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008312:	461a      	mov	r2, r3
 8008314:	2300      	movs	r3, #0
 8008316:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	461a      	mov	r2, r3
 8008326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800832a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	3301      	adds	r3, #1
 8008330:	613b      	str	r3, [r7, #16]
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3b7      	bcc.n	80082aa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	e043      	b.n	80083c8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008356:	d118      	bne.n	800838a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	461a      	mov	r2, r3
 800836c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e013      	b.n	800839c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008380:	461a      	mov	r2, r3
 8008382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	e008      	b.n	800839c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008396:	461a      	mov	r2, r3
 8008398:	2300      	movs	r3, #0
 800839a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	461a      	mov	r2, r3
 80083aa:	2300      	movs	r3, #0
 80083ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ba:	461a      	mov	r2, r3
 80083bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3301      	adds	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d3b7      	bcc.n	8008340 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80083f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	f043 0210 	orr.w	r2, r3, #16
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	4b10      	ldr	r3, [pc, #64]	; (8008444 <USB_DevInit+0x294>)
 8008404:	4313      	orrs	r3, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800840a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	f043 0208 	orr.w	r2, r3, #8
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d107      	bne.n	8008432 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800842a:	f043 0304 	orr.w	r3, r3, #4
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008432:	7dfb      	ldrb	r3, [r7, #23]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800843e:	b004      	add	sp, #16
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	803c3800 	.word	0x803c3800

08008448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	019b      	lsls	r3, r3, #6
 800845a:	f043 0220 	orr.w	r2, r3, #32
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3301      	adds	r3, #1
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4a09      	ldr	r2, [pc, #36]	; (8008490 <USB_FlushTxFifo+0x48>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d901      	bls.n	8008474 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e006      	b.n	8008482 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b20      	cmp	r3, #32
 800847e:	d0f0      	beq.n	8008462 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	00030d40 	.word	0x00030d40

08008494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2210      	movs	r2, #16
 80084a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3301      	adds	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <USB_FlushRxFifo+0x40>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d901      	bls.n	80084b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e006      	b.n	80084c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d0f0      	beq.n	80084a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	00030d40 	.word	0x00030d40

080084d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084f8:	4313      	orrs	r3, r2
 80084fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008524:	f023 0303 	bic.w	r3, r3, #3
 8008528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3301      	adds	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <USB_CoreReset+0x64>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d901      	bls.n	800856a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e01b      	b.n	80085a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	daf2      	bge.n	8008558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f043 0201 	orr.w	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <USB_CoreReset+0x64>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d901      	bls.n	8008594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e006      	b.n	80085a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b01      	cmp	r3, #1
 800859e:	d0f0      	beq.n	8008582 <USB_CoreReset+0x36>

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	00030d40 	.word	0x00030d40

080085b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80085b8:	bf00      	nop
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
	...

080085c4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ca:	f3ef 8305 	mrs	r3, IPSR
 80085ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80085d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10f      	bne.n	80085f6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085d6:	f3ef 8310 	mrs	r3, PRIMASK
 80085da:	607b      	str	r3, [r7, #4]
  return(result);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085e2:	f3ef 8311 	mrs	r3, BASEPRI
 80085e6:	603b      	str	r3, [r7, #0]
  return(result);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <osKernelInitialize+0x3a>
 80085ee:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <osKernelInitialize+0x64>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d103      	bne.n	80085fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80085f6:	f06f 0305 	mvn.w	r3, #5
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e00c      	b.n	8008618 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085fe:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <osKernelInitialize+0x64>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d105      	bne.n	8008612 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <osKernelInitialize+0x64>)
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e002      	b.n	8008618 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008612:	f04f 33ff 	mov.w	r3, #4294967295
 8008616:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008618:	68fb      	ldr	r3, [r7, #12]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	2000044c 	.word	0x2000044c

0800862c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008632:	f3ef 8305 	mrs	r3, IPSR
 8008636:	60bb      	str	r3, [r7, #8]
  return(result);
 8008638:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10f      	bne.n	800865e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863e:	f3ef 8310 	mrs	r3, PRIMASK
 8008642:	607b      	str	r3, [r7, #4]
  return(result);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d105      	bne.n	8008656 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800864a:	f3ef 8311 	mrs	r3, BASEPRI
 800864e:	603b      	str	r3, [r7, #0]
  return(result);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <osKernelStart+0x3a>
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <osKernelStart+0x68>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d103      	bne.n	8008666 <osKernelStart+0x3a>
    stat = osErrorISR;
 800865e:	f06f 0305 	mvn.w	r3, #5
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e010      	b.n	8008688 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008666:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <osKernelStart+0x68>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d109      	bne.n	8008682 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800866e:	f7ff ffa1 	bl	80085b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008672:	4b08      	ldr	r3, [pc, #32]	; (8008694 <osKernelStart+0x68>)
 8008674:	2202      	movs	r2, #2
 8008676:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008678:	f001 fce6 	bl	800a048 <vTaskStartScheduler>
      stat = osOK;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e002      	b.n	8008688 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008682:	f04f 33ff 	mov.w	r3, #4294967295
 8008686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	2000044c 	.word	0x2000044c

08008698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b090      	sub	sp, #64	; 0x40
 800869c:	af04      	add	r7, sp, #16
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a8:	f3ef 8305 	mrs	r3, IPSR
 80086ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80086ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 808f 	bne.w	80087d4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086c2:	f3ef 8311 	mrs	r3, BASEPRI
 80086c6:	617b      	str	r3, [r7, #20]
  return(result);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <osThreadNew+0x3e>
 80086ce:	4b44      	ldr	r3, [pc, #272]	; (80087e0 <osThreadNew+0x148>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d07e      	beq.n	80087d4 <osThreadNew+0x13c>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d07b      	beq.n	80087d4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80086e0:	2318      	movs	r3, #24
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80086e8:	f04f 33ff 	mov.w	r3, #4294967295
 80086ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d045      	beq.n	8008780 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <osThreadNew+0x6a>
        name = attr->name;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <osThreadNew+0x90>
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	2b38      	cmp	r3, #56	; 0x38
 800871a:	d805      	bhi.n	8008728 <osThreadNew+0x90>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <osThreadNew+0x94>
        return (NULL);
 8008728:	2300      	movs	r3, #0
 800872a:	e054      	b.n	80087d6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	089b      	lsrs	r3, r3, #2
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00e      	beq.n	8008762 <osThreadNew+0xca>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b5b      	cmp	r3, #91	; 0x5b
 800874a:	d90a      	bls.n	8008762 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <osThreadNew+0xca>
        mem = 1;
 800875c:	2301      	movs	r3, #1
 800875e:	623b      	str	r3, [r7, #32]
 8008760:	e010      	b.n	8008784 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10c      	bne.n	8008784 <osThreadNew+0xec>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d108      	bne.n	8008784 <osThreadNew+0xec>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d104      	bne.n	8008784 <osThreadNew+0xec>
          mem = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	623b      	str	r3, [r7, #32]
 800877e:	e001      	b.n	8008784 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d110      	bne.n	80087ac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008792:	9202      	str	r2, [sp, #8]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f001 fa7f 	bl	8009ca4 <xTaskCreateStatic>
 80087a6:	4603      	mov	r3, r0
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	e013      	b.n	80087d4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d110      	bne.n	80087d4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f107 0310 	add.w	r3, r7, #16
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f001 fac7 	bl	8009d58 <xTaskCreate>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d001      	beq.n	80087d4 <osThreadNew+0x13c>
          hTask = NULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087d4:	693b      	ldr	r3, [r7, #16]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3730      	adds	r7, #48	; 0x30
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	2000044c 	.word	0x2000044c

080087e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ec:	f3ef 8305 	mrs	r3, IPSR
 80087f0:	613b      	str	r3, [r7, #16]
  return(result);
 80087f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10f      	bne.n	8008818 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f8:	f3ef 8310 	mrs	r3, PRIMASK
 80087fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008804:	f3ef 8311 	mrs	r3, BASEPRI
 8008808:	60bb      	str	r3, [r7, #8]
  return(result);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <osDelay+0x3c>
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <osDelay+0x58>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d103      	bne.n	8008820 <osDelay+0x3c>
    stat = osErrorISR;
 8008818:	f06f 0305 	mvn.w	r3, #5
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	e007      	b.n	8008830 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <osDelay+0x4c>
      vTaskDelay(ticks);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fbd8 	bl	8009fe0 <vTaskDelay>
    }
  }

  return (stat);
 8008830:	697b      	ldr	r3, [r7, #20]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	2000044c 	.word	0x2000044c

08008840 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	; 0x30
 8008844:	af02      	add	r7, sp, #8
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008850:	f3ef 8305 	mrs	r3, IPSR
 8008854:	61bb      	str	r3, [r7, #24]
  return(result);
 8008856:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 8087 	bne.w	800896c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800885e:	f3ef 8310 	mrs	r3, PRIMASK
 8008862:	617b      	str	r3, [r7, #20]
  return(result);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800886a:	f3ef 8311 	mrs	r3, BASEPRI
 800886e:	613b      	str	r3, [r7, #16]
  return(result);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <osSemaphoreNew+0x3e>
 8008876:	4b40      	ldr	r3, [pc, #256]	; (8008978 <osSemaphoreNew+0x138>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d076      	beq.n	800896c <osSemaphoreNew+0x12c>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d073      	beq.n	800896c <osSemaphoreNew+0x12c>
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	429a      	cmp	r2, r3
 800888a:	d86f      	bhi.n	800896c <osSemaphoreNew+0x12c>
    mem = -1;
 800888c:	f04f 33ff 	mov.w	r3, #4294967295
 8008890:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d015      	beq.n	80088c4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d006      	beq.n	80088ae <osSemaphoreNew+0x6e>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b4f      	cmp	r3, #79	; 0x4f
 80088a6:	d902      	bls.n	80088ae <osSemaphoreNew+0x6e>
        mem = 1;
 80088a8:	2301      	movs	r3, #1
 80088aa:	623b      	str	r3, [r7, #32]
 80088ac:	e00c      	b.n	80088c8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d108      	bne.n	80088c8 <osSemaphoreNew+0x88>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <osSemaphoreNew+0x88>
          mem = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	623b      	str	r3, [r7, #32]
 80088c2:	e001      	b.n	80088c8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ce:	d04d      	beq.n	800896c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d129      	bne.n	800892a <osSemaphoreNew+0xea>
        if (mem == 1) {
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d10b      	bne.n	80088f4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	2303      	movs	r3, #3
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	4613      	mov	r3, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	2001      	movs	r0, #1
 80088ec:	f000 fa54 	bl	8008d98 <xQueueGenericCreateStatic>
 80088f0:	6278      	str	r0, [r7, #36]	; 0x24
 80088f2:	e005      	b.n	8008900 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80088f4:	2203      	movs	r2, #3
 80088f6:	2100      	movs	r1, #0
 80088f8:	2001      	movs	r0, #1
 80088fa:	f000 fac0 	bl	8008e7e <xQueueGenericCreate>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	2b00      	cmp	r3, #0
 8008904:	d022      	beq.n	800894c <osSemaphoreNew+0x10c>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01f      	beq.n	800894c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800890c:	2300      	movs	r3, #0
 800890e:	2200      	movs	r2, #0
 8008910:	2100      	movs	r1, #0
 8008912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008914:	f000 fb7c 	bl	8009010 <xQueueGenericSend>
 8008918:	4603      	mov	r3, r0
 800891a:	2b01      	cmp	r3, #1
 800891c:	d016      	beq.n	800894c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800891e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008920:	f000 ffef 	bl	8009902 <vQueueDelete>
            hSemaphore = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
 8008928:	e010      	b.n	800894c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d108      	bne.n	8008942 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	461a      	mov	r2, r3
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fb02 	bl	8008f42 <xQueueCreateCountingSemaphoreStatic>
 800893e:	6278      	str	r0, [r7, #36]	; 0x24
 8008940:	e004      	b.n	800894c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fb31 	bl	8008fac <xQueueCreateCountingSemaphore>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <osSemaphoreNew+0x120>
          name = attr->name;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	61fb      	str	r3, [r7, #28]
 800895e:	e001      	b.n	8008964 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008964:	69f9      	ldr	r1, [r7, #28]
 8008966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008968:	f001 f916 	bl	8009b98 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800896e:	4618      	mov	r0, r3
 8008970:	3728      	adds	r7, #40	; 0x28
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	2000044c 	.word	0x2000044c

0800897c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d103      	bne.n	800899c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008994:	f06f 0303 	mvn.w	r3, #3
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	e04b      	b.n	8008a34 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800899c:	f3ef 8305 	mrs	r3, IPSR
 80089a0:	617b      	str	r3, [r7, #20]
  return(result);
 80089a2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10f      	bne.n	80089c8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a8:	f3ef 8310 	mrs	r3, PRIMASK
 80089ac:	613b      	str	r3, [r7, #16]
  return(result);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089b4:	f3ef 8311 	mrs	r3, BASEPRI
 80089b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d026      	beq.n	8008a0e <osSemaphoreAcquire+0x92>
 80089c0:	4b1f      	ldr	r3, [pc, #124]	; (8008a40 <osSemaphoreAcquire+0xc4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d122      	bne.n	8008a0e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80089ce:	f06f 0303 	mvn.w	r3, #3
 80089d2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80089d4:	e02d      	b.n	8008a32 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	461a      	mov	r2, r3
 80089e0:	2100      	movs	r1, #0
 80089e2:	69b8      	ldr	r0, [r7, #24]
 80089e4:	f000 ff10 	bl	8009808 <xQueueReceiveFromISR>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d003      	beq.n	80089f6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80089ee:	f06f 0302 	mvn.w	r3, #2
 80089f2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80089f4:	e01d      	b.n	8008a32 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01a      	beq.n	8008a32 <osSemaphoreAcquire+0xb6>
 80089fc:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <osSemaphoreAcquire+0xc8>)
 80089fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008a0c:	e011      	b.n	8008a32 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	69b8      	ldr	r0, [r7, #24]
 8008a12:	f000 fdf1 	bl	80095f8 <xQueueSemaphoreTake>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d00b      	beq.n	8008a34 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008a22:	f06f 0301 	mvn.w	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	e004      	b.n	8008a34 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008a2a:	f06f 0302 	mvn.w	r3, #2
 8008a2e:	61fb      	str	r3, [r7, #28]
 8008a30:	e000      	b.n	8008a34 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008a32:	bf00      	nop
      }
    }
  }

  return (stat);
 8008a34:	69fb      	ldr	r3, [r7, #28]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3720      	adds	r7, #32
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	2000044c 	.word	0x2000044c
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008a5e:	f06f 0303 	mvn.w	r3, #3
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e03e      	b.n	8008ae4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a66:	f3ef 8305 	mrs	r3, IPSR
 8008a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a6c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10f      	bne.n	8008a92 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a72:	f3ef 8310 	mrs	r3, PRIMASK
 8008a76:	613b      	str	r3, [r7, #16]
  return(result);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a82:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01e      	beq.n	8008ac8 <osSemaphoreRelease+0x80>
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <osSemaphoreRelease+0xa8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d11a      	bne.n	8008ac8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008a96:	f107 0308 	add.w	r3, r7, #8
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	69b8      	ldr	r0, [r7, #24]
 8008a9e:	f000 fc45 	bl	800932c <xQueueGiveFromISR>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d003      	beq.n	8008ab0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008aa8:	f06f 0302 	mvn.w	r3, #2
 8008aac:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008aae:	e018      	b.n	8008ae2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d015      	beq.n	8008ae2 <osSemaphoreRelease+0x9a>
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <osSemaphoreRelease+0xac>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ac6:	e00c      	b.n	8008ae2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2200      	movs	r2, #0
 8008acc:	2100      	movs	r1, #0
 8008ace:	69b8      	ldr	r0, [r7, #24]
 8008ad0:	f000 fa9e 	bl	8009010 <xQueueGenericSend>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d004      	beq.n	8008ae4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008ada:	f06f 0302 	mvn.w	r3, #2
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	e000      	b.n	8008ae4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ae2:	bf00      	nop
    }
  }

  return (stat);
 8008ae4:	69fb      	ldr	r3, [r7, #28]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	2000044c 	.word	0x2000044c
 8008af4:	e000ed04 	.word	0xe000ed04

08008af8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a06      	ldr	r2, [pc, #24]	; (8008b28 <vApplicationGetIdleTaskMemory+0x30>)
 8008b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2240      	movs	r2, #64	; 0x40
 8008b14:	601a      	str	r2, [r3, #0]
}
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20000450 	.word	0x20000450
 8008b28:	200004ac 	.word	0x200004ac

08008b2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4a07      	ldr	r2, [pc, #28]	; (8008b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4a06      	ldr	r2, [pc, #24]	; (8008b5c <vApplicationGetTimerTaskMemory+0x30>)
 8008b42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b4a:	601a      	str	r2, [r3, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	200005ac 	.word	0x200005ac
 8008b5c:	20000608 	.word	0x20000608

08008b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f103 0208 	add.w	r2, r3, #8
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295
 8008b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f103 0208 	add.w	r2, r3, #8
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f103 0208 	add.w	r2, r3, #8
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d103      	bne.n	8008c22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e00c      	b.n	8008c3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3308      	adds	r3, #8
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e002      	b.n	8008c30 <vListInsert+0x2e>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d2f6      	bcs.n	8008c2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6892      	ldr	r2, [r2, #8]
 8008c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	6852      	ldr	r2, [r2, #4]
 8008c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d103      	bne.n	8008ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	1e5a      	subs	r2, r3, #1
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d109      	bne.n	8008cf0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60bb      	str	r3, [r7, #8]
 8008cee:	e7fe      	b.n	8008cee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008cf0:	f002 fc24 	bl	800b53c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	68f9      	ldr	r1, [r7, #12]
 8008cfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d00:	fb01 f303 	mul.w	r3, r1, r3
 8008d04:	441a      	add	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d20:	3b01      	subs	r3, #1
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d26:	fb01 f303 	mul.w	r3, r1, r3
 8008d2a:	441a      	add	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	22ff      	movs	r2, #255	; 0xff
 8008d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	22ff      	movs	r2, #255	; 0xff
 8008d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d114      	bne.n	8008d70 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01a      	beq.n	8008d84 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3310      	adds	r3, #16
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 fbf8 	bl	800a548 <xTaskRemoveFromEventList>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d012      	beq.n	8008d84 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <xQueueGenericReset+0xcc>)
 8008d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	e009      	b.n	8008d84 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3310      	adds	r3, #16
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff fef3 	bl	8008b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3324      	adds	r3, #36	; 0x24
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff feee 	bl	8008b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d84:	f002 fc08 	bl	800b598 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d88:	2301      	movs	r3, #1
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08e      	sub	sp, #56	; 0x38
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d109      	bne.n	8008dc0 <xQueueGenericCreateStatic+0x28>
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dbe:	e7fe      	b.n	8008dbe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <xQueueGenericCreateStatic+0x42>
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <xQueueGenericCreateStatic+0x4e>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <xQueueGenericCreateStatic+0x52>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <xQueueGenericCreateStatic+0x54>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <xQueueGenericCreateStatic+0x6c>
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	623b      	str	r3, [r7, #32]
 8008e02:	e7fe      	b.n	8008e02 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <xQueueGenericCreateStatic+0x78>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <xQueueGenericCreateStatic+0x7c>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <xQueueGenericCreateStatic+0x7e>
 8008e14:	2300      	movs	r3, #0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d109      	bne.n	8008e2e <xQueueGenericCreateStatic+0x96>
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	61fb      	str	r3, [r7, #28]
 8008e2c:	e7fe      	b.n	8008e2c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e2e:	2350      	movs	r3, #80	; 0x50
 8008e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b50      	cmp	r3, #80	; 0x50
 8008e36:	d009      	beq.n	8008e4c <xQueueGenericCreateStatic+0xb4>
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e7fe      	b.n	8008e4a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00d      	beq.n	8008e74 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e60:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f844 	bl	8008efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3730      	adds	r7, #48	; 0x30
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b08a      	sub	sp, #40	; 0x28
 8008e82:	af02      	add	r7, sp, #8
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d109      	bne.n	8008ea6 <xQueueGenericCreate+0x28>
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	e7fe      	b.n	8008ea4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e004      	b.n	8008ebc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	fb02 f303 	mul.w	r3, r2, r3
 8008eba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	3350      	adds	r3, #80	; 0x50
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 fc55 	bl	800b770 <pvPortMalloc>
 8008ec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d011      	beq.n	8008ef2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	3350      	adds	r3, #80	; 0x50
 8008ed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ee0:	79fa      	ldrb	r2, [r7, #7]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f805 	bl	8008efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3720      	adds	r7, #32
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	e002      	b.n	8008f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	69b8      	ldr	r0, [r7, #24]
 8008f2e:	f7ff fecb 	bl	8008cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	78fa      	ldrb	r2, [r7, #3]
 8008f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b08a      	sub	sp, #40	; 0x28
 8008f46:	af02      	add	r7, sp, #8
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <xQueueCreateCountingSemaphoreStatic+0x26>
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	e7fe      	b.n	8008f66 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d909      	bls.n	8008f84 <xQueueCreateCountingSemaphoreStatic+0x42>
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	e7fe      	b.n	8008f82 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f84:	2302      	movs	r3, #2
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff ff02 	bl	8008d98 <xQueueGenericCreateStatic>
 8008f94:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
	}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d109      	bne.n	8008fd0 <xQueueCreateCountingSemaphore+0x24>
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	613b      	str	r3, [r7, #16]
 8008fce:	e7fe      	b.n	8008fce <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d909      	bls.n	8008fec <xQueueCreateCountingSemaphore+0x40>
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	e7fe      	b.n	8008fea <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fec:	2202      	movs	r2, #2
 8008fee:	2100      	movs	r1, #0
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ff44 	bl	8008e7e <xQueueGenericCreate>
 8008ff6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009004:	697b      	ldr	r3, [r7, #20]
	}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08e      	sub	sp, #56	; 0x38
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800901e:	2300      	movs	r3, #0
 8009020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	2b00      	cmp	r3, #0
 800902a:	d109      	bne.n	8009040 <xQueueGenericSend+0x30>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
 800903e:	e7fe      	b.n	800903e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d103      	bne.n	800904e <xQueueGenericSend+0x3e>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <xQueueGenericSend+0x42>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <xQueueGenericSend+0x44>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <xQueueGenericSend+0x5c>
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
 800906a:	e7fe      	b.n	800906a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d103      	bne.n	800907a <xQueueGenericSend+0x6a>
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <xQueueGenericSend+0x6e>
 800907a:	2301      	movs	r3, #1
 800907c:	e000      	b.n	8009080 <xQueueGenericSend+0x70>
 800907e:	2300      	movs	r3, #0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d109      	bne.n	8009098 <xQueueGenericSend+0x88>
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	623b      	str	r3, [r7, #32]
 8009096:	e7fe      	b.n	8009096 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009098:	f001 fc0c 	bl	800a8b4 <xTaskGetSchedulerState>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d102      	bne.n	80090a8 <xQueueGenericSend+0x98>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <xQueueGenericSend+0x9c>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <xQueueGenericSend+0x9e>
 80090ac:	2300      	movs	r3, #0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <xQueueGenericSend+0xb6>
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	61fb      	str	r3, [r7, #28]
 80090c4:	e7fe      	b.n	80090c4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090c6:	f002 fa39 	bl	800b53c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d302      	bcc.n	80090dc <xQueueGenericSend+0xcc>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d129      	bne.n	8009130 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e2:	f000 fc48 	bl	8009976 <prvCopyDataToQueue>
 80090e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d010      	beq.n	8009112 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	4618      	mov	r0, r3
 80090f6:	f001 fa27 	bl	800a548 <xTaskRemoveFromEventList>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d013      	beq.n	8009128 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009100:	4b3f      	ldr	r3, [pc, #252]	; (8009200 <xQueueGenericSend+0x1f0>)
 8009102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	e00a      	b.n	8009128 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009118:	4b39      	ldr	r3, [pc, #228]	; (8009200 <xQueueGenericSend+0x1f0>)
 800911a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009128:	f002 fa36 	bl	800b598 <vPortExitCritical>
				return pdPASS;
 800912c:	2301      	movs	r3, #1
 800912e:	e063      	b.n	80091f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d103      	bne.n	800913e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009136:	f002 fa2f 	bl	800b598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800913a:	2300      	movs	r3, #0
 800913c:	e05c      	b.n	80091f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800913e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009144:	f107 0314 	add.w	r3, r7, #20
 8009148:	4618      	mov	r0, r3
 800914a:	f001 fa5f 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800914e:	2301      	movs	r3, #1
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009152:	f002 fa21 	bl	800b598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009156:	f000 ffdb 	bl	800a110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800915a:	f002 f9ef 	bl	800b53c <vPortEnterCritical>
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009164:	b25b      	sxtb	r3, r3
 8009166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916a:	d103      	bne.n	8009174 <xQueueGenericSend+0x164>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800917a:	b25b      	sxtb	r3, r3
 800917c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009180:	d103      	bne.n	800918a <xQueueGenericSend+0x17a>
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800918a:	f002 fa05 	bl	800b598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800918e:	1d3a      	adds	r2, r7, #4
 8009190:	f107 0314 	add.w	r3, r7, #20
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f001 fa4e 	bl	800a638 <xTaskCheckForTimeOut>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d124      	bne.n	80091ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a4:	f000 fcdf 	bl	8009b66 <prvIsQueueFull>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d018      	beq.n	80091e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	3310      	adds	r3, #16
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 f978 	bl	800a4ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091be:	f000 fc6a 	bl	8009a96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091c2:	f000 ffb3 	bl	800a12c <xTaskResumeAll>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f47f af7c 	bne.w	80090c6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <xQueueGenericSend+0x1f0>)
 80091d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	e772      	b.n	80090c6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091e2:	f000 fc58 	bl	8009a96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091e6:	f000 ffa1 	bl	800a12c <xTaskResumeAll>
 80091ea:	e76c      	b.n	80090c6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ee:	f000 fc52 	bl	8009a96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091f2:	f000 ff9b 	bl	800a12c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3738      	adds	r7, #56	; 0x38
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08e      	sub	sp, #56	; 0x38
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <xQueueGenericSendFromISR+0x2c>
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
 800922e:	e7fe      	b.n	800922e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d103      	bne.n	800923e <xQueueGenericSendFromISR+0x3a>
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <xQueueGenericSendFromISR+0x3e>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueGenericSendFromISR+0x40>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d109      	bne.n	800925c <xQueueGenericSendFromISR+0x58>
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	623b      	str	r3, [r7, #32]
 800925a:	e7fe      	b.n	800925a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d103      	bne.n	800926a <xQueueGenericSendFromISR+0x66>
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <xQueueGenericSendFromISR+0x6a>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <xQueueGenericSendFromISR+0x6c>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <xQueueGenericSendFromISR+0x84>
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	e7fe      	b.n	8009286 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009288:	f002 fa34 	bl	800b6f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800928c:	f3ef 8211 	mrs	r2, BASEPRI
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61ba      	str	r2, [r7, #24]
 80092a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d302      	bcc.n	80092ba <xQueueGenericSendFromISR+0xb6>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d12c      	bne.n	8009314 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ca:	f000 fb54 	bl	8009976 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d112      	bne.n	80092fe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d016      	beq.n	800930e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	3324      	adds	r3, #36	; 0x24
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 f92f 	bl	800a548 <xTaskRemoveFromEventList>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00e      	beq.n	800930e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00b      	beq.n	800930e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	e007      	b.n	800930e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009302:	3301      	adds	r3, #1
 8009304:	b2db      	uxtb	r3, r3
 8009306:	b25a      	sxtb	r2, r3
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800930e:	2301      	movs	r3, #1
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009312:	e001      	b.n	8009318 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009314:	2300      	movs	r3, #0
 8009316:	637b      	str	r3, [r7, #52]	; 0x34
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009324:	4618      	mov	r0, r3
 8009326:	3738      	adds	r7, #56	; 0x38
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08e      	sub	sp, #56	; 0x38
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <xQueueGiveFromISR+0x28>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	623b      	str	r3, [r7, #32]
 8009352:	e7fe      	b.n	8009352 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <xQueueGiveFromISR+0x44>
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	61fb      	str	r3, [r7, #28]
 800936e:	e7fe      	b.n	800936e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <xQueueGiveFromISR+0x54>
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <xQueueGiveFromISR+0x58>
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <xQueueGiveFromISR+0x5a>
 8009384:	2300      	movs	r3, #0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <xQueueGiveFromISR+0x72>
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e7fe      	b.n	800939c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800939e:	f002 f9a9 	bl	800b6f4 <vPortValidateInterruptPriority>
	__asm volatile
 80093a2:	f3ef 8211 	mrs	r2, BASEPRI
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	617a      	str	r2, [r7, #20]
 80093b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d22b      	bcs.n	8009426 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d112      	bne.n	8009410 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d016      	beq.n	8009420 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	3324      	adds	r3, #36	; 0x24
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 f8a6 	bl	800a548 <xTaskRemoveFromEventList>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00e      	beq.n	8009420 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2201      	movs	r2, #1
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e007      	b.n	8009420 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009414:	3301      	adds	r3, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	b25a      	sxtb	r2, r3
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009420:	2301      	movs	r3, #1
 8009422:	637b      	str	r3, [r7, #52]	; 0x34
 8009424:	e001      	b.n	800942a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009426:	2300      	movs	r3, #0
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009436:	4618      	mov	r0, r3
 8009438:	3738      	adds	r7, #56	; 0x38
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08c      	sub	sp, #48	; 0x30
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800944c:	2300      	movs	r3, #0
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	2b00      	cmp	r3, #0
 8009458:	d109      	bne.n	800946e <xQueueReceive+0x2e>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	623b      	str	r3, [r7, #32]
 800946c:	e7fe      	b.n	800946c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d103      	bne.n	800947c <xQueueReceive+0x3c>
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <xQueueReceive+0x40>
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <xQueueReceive+0x42>
 8009480:	2300      	movs	r3, #0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <xQueueReceive+0x5a>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e7fe      	b.n	8009498 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800949a:	f001 fa0b 	bl	800a8b4 <xTaskGetSchedulerState>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <xQueueReceive+0x6a>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <xQueueReceive+0x6e>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <xQueueReceive+0x70>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <xQueueReceive+0x88>
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	61bb      	str	r3, [r7, #24]
 80094c6:	e7fe      	b.n	80094c6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094c8:	f002 f838 	bl	800b53c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01f      	beq.n	8009518 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094dc:	f000 fab5 	bl	8009a4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	1e5a      	subs	r2, r3, #1
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00f      	beq.n	8009510 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	3310      	adds	r3, #16
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 f827 	bl	800a548 <xTaskRemoveFromEventList>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009500:	4b3c      	ldr	r3, [pc, #240]	; (80095f4 <xQueueReceive+0x1b4>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009510:	f002 f842 	bl	800b598 <vPortExitCritical>
				return pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	e069      	b.n	80095ec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800951e:	f002 f83b 	bl	800b598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009522:	2300      	movs	r3, #0
 8009524:	e062      	b.n	80095ec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800952c:	f107 0310 	add.w	r3, r7, #16
 8009530:	4618      	mov	r0, r3
 8009532:	f001 f86b 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800953a:	f002 f82d 	bl	800b598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800953e:	f000 fde7 	bl	800a110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009542:	f001 fffb 	bl	800b53c <vPortEnterCritical>
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800954c:	b25b      	sxtb	r3, r3
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d103      	bne.n	800955c <xQueueReceive+0x11c>
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009562:	b25b      	sxtb	r3, r3
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009568:	d103      	bne.n	8009572 <xQueueReceive+0x132>
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009572:	f002 f811 	bl	800b598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009576:	1d3a      	adds	r2, r7, #4
 8009578:	f107 0310 	add.w	r3, r7, #16
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f85a 	bl	800a638 <xTaskCheckForTimeOut>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d123      	bne.n	80095d2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800958a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800958c:	f000 fad5 	bl	8009b3a <prvIsQueueEmpty>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d017      	beq.n	80095c6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	3324      	adds	r3, #36	; 0x24
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 ff84 	bl	800a4ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a6:	f000 fa76 	bl	8009a96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095aa:	f000 fdbf 	bl	800a12c <xTaskResumeAll>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d189      	bne.n	80094c8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80095b4:	4b0f      	ldr	r3, [pc, #60]	; (80095f4 <xQueueReceive+0x1b4>)
 80095b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	e780      	b.n	80094c8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c8:	f000 fa65 	bl	8009a96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095cc:	f000 fdae 	bl	800a12c <xTaskResumeAll>
 80095d0:	e77a      	b.n	80094c8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80095d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d4:	f000 fa5f 	bl	8009a96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095d8:	f000 fda8 	bl	800a12c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095de:	f000 faac 	bl	8009b3a <prvIsQueueEmpty>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f43f af6f 	beq.w	80094c8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3730      	adds	r7, #48	; 0x30
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	e000ed04 	.word	0xe000ed04

080095f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08e      	sub	sp, #56	; 0x38
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009602:	2300      	movs	r3, #0
 8009604:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800960a:	2300      	movs	r3, #0
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <xQueueSemaphoreTake+0x30>
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	623b      	str	r3, [r7, #32]
 8009626:	e7fe      	b.n	8009626 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <xQueueSemaphoreTake+0x4c>
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	e7fe      	b.n	8009642 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009644:	f001 f936 	bl	800a8b4 <xTaskGetSchedulerState>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <xQueueSemaphoreTake+0x5c>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <xQueueSemaphoreTake+0x60>
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <xQueueSemaphoreTake+0x62>
 8009658:	2300      	movs	r3, #0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <xQueueSemaphoreTake+0x7a>
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	61bb      	str	r3, [r7, #24]
 8009670:	e7fe      	b.n	8009670 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009672:	f001 ff63 	bl	800b53c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d024      	beq.n	80096cc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	1e5a      	subs	r2, r3, #1
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009692:	f001 fa81 	bl	800ab98 <pvTaskIncrementMutexHeldCount>
 8009696:	4602      	mov	r2, r0
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00f      	beq.n	80096c4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	3310      	adds	r3, #16
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 ff4d 	bl	800a548 <xTaskRemoveFromEventList>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d007      	beq.n	80096c4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096b4:	4b53      	ldr	r3, [pc, #332]	; (8009804 <xQueueSemaphoreTake+0x20c>)
 80096b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096c4:	f001 ff68 	bl	800b598 <vPortExitCritical>
				return pdPASS;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e096      	b.n	80097fa <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d110      	bne.n	80096f4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d009      	beq.n	80096ec <xQueueSemaphoreTake+0xf4>
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e7fe      	b.n	80096ea <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80096ec:	f001 ff54 	bl	800b598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096f0:	2300      	movs	r3, #0
 80096f2:	e082      	b.n	80097fa <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096fa:	f107 030c 	add.w	r3, r7, #12
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 ff84 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009704:	2301      	movs	r3, #1
 8009706:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009708:	f001 ff46 	bl	800b598 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800970c:	f000 fd00 	bl	800a110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009710:	f001 ff14 	bl	800b53c <vPortEnterCritical>
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800971a:	b25b      	sxtb	r3, r3
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009720:	d103      	bne.n	800972a <xQueueSemaphoreTake+0x132>
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009730:	b25b      	sxtb	r3, r3
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d103      	bne.n	8009740 <xQueueSemaphoreTake+0x148>
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009740:	f001 ff2a 	bl	800b598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009744:	463a      	mov	r2, r7
 8009746:	f107 030c 	add.w	r3, r7, #12
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f000 ff73 	bl	800a638 <xTaskCheckForTimeOut>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d132      	bne.n	80097be <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800975a:	f000 f9ee 	bl	8009b3a <prvIsQueueEmpty>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d026      	beq.n	80097b2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800976c:	f001 fee6 	bl	800b53c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	4618      	mov	r0, r3
 8009776:	f001 f8bb 	bl	800a8f0 <xTaskPriorityInherit>
 800977a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800977c:	f001 ff0c 	bl	800b598 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	3324      	adds	r3, #36	; 0x24
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fe8f 	bl	800a4ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800978e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009790:	f000 f981 	bl	8009a96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009794:	f000 fcca 	bl	800a12c <xTaskResumeAll>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	f47f af69 	bne.w	8009672 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80097a0:	4b18      	ldr	r3, [pc, #96]	; (8009804 <xQueueSemaphoreTake+0x20c>)
 80097a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	e75f      	b.n	8009672 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80097b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097b4:	f000 f96f 	bl	8009a96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097b8:	f000 fcb8 	bl	800a12c <xTaskResumeAll>
 80097bc:	e759      	b.n	8009672 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80097be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097c0:	f000 f969 	bl	8009a96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097c4:	f000 fcb2 	bl	800a12c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097ca:	f000 f9b6 	bl	8009b3a <prvIsQueueEmpty>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f43f af4e 	beq.w	8009672 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00d      	beq.n	80097f8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80097dc:	f001 feae 	bl	800b53c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80097e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097e2:	f000 f8b0 	bl	8009946 <prvGetDisinheritPriorityAfterTimeout>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 f952 	bl	800aa98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80097f4:	f001 fed0 	bl	800b598 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3738      	adds	r7, #56	; 0x38
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08e      	sub	sp, #56	; 0x38
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <xQueueReceiveFromISR+0x2a>
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	623b      	str	r3, [r7, #32]
 8009830:	e7fe      	b.n	8009830 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d103      	bne.n	8009840 <xQueueReceiveFromISR+0x38>
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <xQueueReceiveFromISR+0x3c>
 8009840:	2301      	movs	r3, #1
 8009842:	e000      	b.n	8009846 <xQueueReceiveFromISR+0x3e>
 8009844:	2300      	movs	r3, #0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <xQueueReceiveFromISR+0x56>
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	61fb      	str	r3, [r7, #28]
 800985c:	e7fe      	b.n	800985c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800985e:	f001 ff49 	bl	800b6f4 <vPortValidateInterruptPriority>
	__asm volatile
 8009862:	f3ef 8211 	mrs	r2, BASEPRI
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	61ba      	str	r2, [r7, #24]
 8009878:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800987a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02f      	beq.n	80098ea <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009898:	f000 f8d7 	bl	8009a4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d112      	bne.n	80098d4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d016      	beq.n	80098e4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	3310      	adds	r3, #16
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fe44 	bl	800a548 <xTaskRemoveFromEventList>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00e      	beq.n	80098e4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e007      	b.n	80098e4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80098d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d8:	3301      	adds	r3, #1
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	b25a      	sxtb	r2, r3
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80098e4:	2301      	movs	r3, #1
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
 80098e8:	e001      	b.n	80098ee <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3738      	adds	r7, #56	; 0x38
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d109      	bne.n	8009928 <vQueueDelete+0x26>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	60bb      	str	r3, [r7, #8]
 8009926:	e7fe      	b.n	8009926 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f95d 	bl	8009be8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f001 ffdb 	bl	800b8f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800993e:	bf00      	nop
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009946:	b480      	push	{r7}
 8009948:	b085      	sub	sp, #20
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e001      	b.n	8009968 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009968:	68fb      	ldr	r3, [r7, #12]
	}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b086      	sub	sp, #24
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10d      	bne.n	80099b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d14d      	bne.n	8009a38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 f80d 	bl	800a9c0 <xTaskPriorityDisinherit>
 80099a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	609a      	str	r2, [r3, #8]
 80099ae:	e043      	b.n	8009a38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d119      	bne.n	80099ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6858      	ldr	r0, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	461a      	mov	r2, r3
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	f002 f8e8 	bl	800bb96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d32b      	bcc.n	8009a38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	e026      	b.n	8009a38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68d8      	ldr	r0, [r3, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	461a      	mov	r2, r3
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	f002 f8ce 	bl	800bb96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	425b      	negs	r3, r3
 8009a04:	441a      	add	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d207      	bcs.n	8009a26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	425b      	negs	r3, r3
 8009a20:	441a      	add	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d105      	bne.n	8009a38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a40:	697b      	ldr	r3, [r7, #20]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d018      	beq.n	8009a8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	441a      	add	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68da      	ldr	r2, [r3, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d303      	bcc.n	8009a7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68d9      	ldr	r1, [r3, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	461a      	mov	r2, r3
 8009a88:	6838      	ldr	r0, [r7, #0]
 8009a8a:	f002 f884 	bl	800bb96 <memcpy>
	}
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a9e:	f001 fd4d 	bl	800b53c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aaa:	e011      	b.n	8009ad0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d012      	beq.n	8009ada <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3324      	adds	r3, #36	; 0x24
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fd45 	bl	800a548 <xTaskRemoveFromEventList>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ac4:	f000 fe18 	bl	800a6f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	dce9      	bgt.n	8009aac <prvUnlockQueue+0x16>
 8009ad8:	e000      	b.n	8009adc <prvUnlockQueue+0x46>
					break;
 8009ada:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	22ff      	movs	r2, #255	; 0xff
 8009ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ae4:	f001 fd58 	bl	800b598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ae8:	f001 fd28 	bl	800b53c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009af2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009af4:	e011      	b.n	8009b1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d012      	beq.n	8009b24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3310      	adds	r3, #16
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fd20 	bl	800a548 <xTaskRemoveFromEventList>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b0e:	f000 fdf3 	bl	800a6f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dce9      	bgt.n	8009af6 <prvUnlockQueue+0x60>
 8009b22:	e000      	b.n	8009b26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	22ff      	movs	r2, #255	; 0xff
 8009b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b2e:	f001 fd33 	bl	800b598 <vPortExitCritical>
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b42:	f001 fcfb 	bl	800b53c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e001      	b.n	8009b58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b58:	f001 fd1e 	bl	800b598 <vPortExitCritical>

	return xReturn;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b6e:	f001 fce5 	bl	800b53c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d102      	bne.n	8009b84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	e001      	b.n	8009b88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b88:	f001 fd06 	bl	800b598 <vPortExitCritical>

	return xReturn;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	e014      	b.n	8009bd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ba8:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <vQueueAddToRegistry+0x4c>)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bb4:	490b      	ldr	r1, [pc, #44]	; (8009be4 <vQueueAddToRegistry+0x4c>)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bbe:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <vQueueAddToRegistry+0x4c>)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bca:	e005      	b.n	8009bd8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b07      	cmp	r3, #7
 8009bd6:	d9e7      	bls.n	8009ba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	20003858 	.word	0x20003858

08009be8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	e016      	b.n	8009c24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009bf6:	4a10      	ldr	r2, [pc, #64]	; (8009c38 <vQueueUnregisterQueue+0x50>)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d10b      	bne.n	8009c1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009c06:	4a0c      	ldr	r2, [pc, #48]	; (8009c38 <vQueueUnregisterQueue+0x50>)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009c10:	4a09      	ldr	r2, [pc, #36]	; (8009c38 <vQueueUnregisterQueue+0x50>)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	4413      	add	r3, r2
 8009c18:	2200      	movs	r2, #0
 8009c1a:	605a      	str	r2, [r3, #4]
				break;
 8009c1c:	e005      	b.n	8009c2a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b07      	cmp	r3, #7
 8009c28:	d9e5      	bls.n	8009bf6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20003858 	.word	0x20003858

08009c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c4c:	f001 fc76 	bl	800b53c <vPortEnterCritical>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d103      	bne.n	8009c66 <vQueueWaitForMessageRestricted+0x2a>
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c6c:	b25b      	sxtb	r3, r3
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d103      	bne.n	8009c7c <vQueueWaitForMessageRestricted+0x40>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c7c:	f001 fc8c 	bl	800b598 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	3324      	adds	r3, #36	; 0x24
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fc2f 	bl	800a4f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c96:	6978      	ldr	r0, [r7, #20]
 8009c98:	f7ff fefd 	bl	8009a96 <prvUnlockQueue>
	}
 8009c9c:	bf00      	nop
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08e      	sub	sp, #56	; 0x38
 8009ca8:	af04      	add	r7, sp, #16
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d109      	bne.n	8009ccc <xTaskCreateStatic+0x28>
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	623b      	str	r3, [r7, #32]
 8009cca:	e7fe      	b.n	8009cca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <xTaskCreateStatic+0x42>
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	61fb      	str	r3, [r7, #28]
 8009ce4:	e7fe      	b.n	8009ce4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ce6:	235c      	movs	r3, #92	; 0x5c
 8009ce8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	2b5c      	cmp	r3, #92	; 0x5c
 8009cee:	d009      	beq.n	8009d04 <xTaskCreateStatic+0x60>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	e7fe      	b.n	8009d02 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01e      	beq.n	8009d4a <xTaskCreateStatic+0xa6>
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01b      	beq.n	8009d4a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d24:	2300      	movs	r3, #0
 8009d26:	9303      	str	r3, [sp, #12]
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	9302      	str	r3, [sp, #8]
 8009d2c:	f107 0314 	add.w	r3, r7, #20
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f850 	bl	8009de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d44:	f000 f8dc 	bl	8009f00 <prvAddNewTaskToReadyList>
 8009d48:	e001      	b.n	8009d4e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d4e:	697b      	ldr	r3, [r7, #20]
	}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3728      	adds	r7, #40	; 0x28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af04      	add	r7, sp, #16
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d68:	88fb      	ldrh	r3, [r7, #6]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f001 fcff 	bl	800b770 <pvPortMalloc>
 8009d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00e      	beq.n	8009d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d7a:	205c      	movs	r0, #92	; 0x5c
 8009d7c:	f001 fcf8 	bl	800b770 <pvPortMalloc>
 8009d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8009d8e:	e005      	b.n	8009d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d90:	6978      	ldr	r0, [r7, #20]
 8009d92:	f001 fdaf 	bl	800b8f4 <vPortFree>
 8009d96:	e001      	b.n	8009d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d017      	beq.n	8009dd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009daa:	88fa      	ldrh	r2, [r7, #6]
 8009dac:	2300      	movs	r3, #0
 8009dae:	9303      	str	r3, [sp, #12]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	9302      	str	r3, [sp, #8]
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f80e 	bl	8009de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dc6:	69f8      	ldr	r0, [r7, #28]
 8009dc8:	f000 f89a 	bl	8009f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	61bb      	str	r3, [r7, #24]
 8009dd0:	e002      	b.n	8009dd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
	}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b088      	sub	sp, #32
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	461a      	mov	r2, r3
 8009dfa:	21a5      	movs	r1, #165	; 0xa5
 8009dfc:	f001 fed6 	bl	800bbac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	f023 0307 	bic.w	r3, r3, #7
 8009e18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	f003 0307 	and.w	r3, r3, #7
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d009      	beq.n	8009e38 <prvInitialiseNewTask+0x56>
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	617b      	str	r3, [r7, #20]
 8009e36:	e7fe      	b.n	8009e36 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01f      	beq.n	8009e7e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e012      	b.n	8009e6a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	7819      	ldrb	r1, [r3, #0]
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	3334      	adds	r3, #52	; 0x34
 8009e54:	460a      	mov	r2, r1
 8009e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	2b0f      	cmp	r3, #15
 8009e6e:	d9e9      	bls.n	8009e44 <prvInitialiseNewTask+0x62>
 8009e70:	e000      	b.n	8009e74 <prvInitialiseNewTask+0x92>
			{
				break;
 8009e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e7c:	e003      	b.n	8009e86 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	2b37      	cmp	r3, #55	; 0x37
 8009e8a:	d901      	bls.n	8009e90 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e8c:	2337      	movs	r3, #55	; 0x37
 8009e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fe7a 	bl	8008ba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	3318      	adds	r3, #24
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe fe75 	bl	8008ba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2200      	movs	r2, #0
 8009ed0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	68f9      	ldr	r1, [r7, #12]
 8009ede:	69b8      	ldr	r0, [r7, #24]
 8009ee0:	f001 fa08 	bl	800b2f4 <pxPortInitialiseStack>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f08:	f001 fb18 	bl	800b53c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f0c:	4b2d      	ldr	r3, [pc, #180]	; (8009fc4 <prvAddNewTaskToReadyList+0xc4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	4a2c      	ldr	r2, [pc, #176]	; (8009fc4 <prvAddNewTaskToReadyList+0xc4>)
 8009f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f16:	4b2c      	ldr	r3, [pc, #176]	; (8009fc8 <prvAddNewTaskToReadyList+0xc8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d109      	bne.n	8009f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f1e:	4a2a      	ldr	r2, [pc, #168]	; (8009fc8 <prvAddNewTaskToReadyList+0xc8>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f24:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <prvAddNewTaskToReadyList+0xc4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d110      	bne.n	8009f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f2c:	f000 fc08 	bl	800a740 <prvInitialiseTaskLists>
 8009f30:	e00d      	b.n	8009f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f32:	4b26      	ldr	r3, [pc, #152]	; (8009fcc <prvAddNewTaskToReadyList+0xcc>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d109      	bne.n	8009f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f3a:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <prvAddNewTaskToReadyList+0xc8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d802      	bhi.n	8009f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f48:	4a1f      	ldr	r2, [pc, #124]	; (8009fc8 <prvAddNewTaskToReadyList+0xc8>)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f4e:	4b20      	ldr	r3, [pc, #128]	; (8009fd0 <prvAddNewTaskToReadyList+0xd0>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	4a1e      	ldr	r2, [pc, #120]	; (8009fd0 <prvAddNewTaskToReadyList+0xd0>)
 8009f56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f58:	4b1d      	ldr	r3, [pc, #116]	; (8009fd0 <prvAddNewTaskToReadyList+0xd0>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f64:	4b1b      	ldr	r3, [pc, #108]	; (8009fd4 <prvAddNewTaskToReadyList+0xd4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d903      	bls.n	8009f74 <prvAddNewTaskToReadyList+0x74>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	4a18      	ldr	r2, [pc, #96]	; (8009fd4 <prvAddNewTaskToReadyList+0xd4>)
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4a15      	ldr	r2, [pc, #84]	; (8009fd8 <prvAddNewTaskToReadyList+0xd8>)
 8009f82:	441a      	add	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fe fe15 	bl	8008bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f90:	f001 fb02 	bl	800b598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f94:	4b0d      	ldr	r3, [pc, #52]	; (8009fcc <prvAddNewTaskToReadyList+0xcc>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00e      	beq.n	8009fba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <prvAddNewTaskToReadyList+0xc8>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d207      	bcs.n	8009fba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009faa:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <prvAddNewTaskToReadyList+0xdc>)
 8009fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000edc 	.word	0x20000edc
 8009fc8:	20000a08 	.word	0x20000a08
 8009fcc:	20000ee8 	.word	0x20000ee8
 8009fd0:	20000ef8 	.word	0x20000ef8
 8009fd4:	20000ee4 	.word	0x20000ee4
 8009fd8:	20000a0c 	.word	0x20000a0c
 8009fdc:	e000ed04 	.word	0xe000ed04

08009fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d016      	beq.n	800a020 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <vTaskDelay+0x60>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d009      	beq.n	800a00e <vTaskDelay+0x2e>
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	60bb      	str	r3, [r7, #8]
 800a00c:	e7fe      	b.n	800a00c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a00e:	f000 f87f 	bl	800a110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a012:	2100      	movs	r1, #0
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fdd3 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a01a:	f000 f887 	bl	800a12c <xTaskResumeAll>
 800a01e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d107      	bne.n	800a036 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a026:	4b07      	ldr	r3, [pc, #28]	; (800a044 <vTaskDelay+0x64>)
 800a028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20000f04 	.word	0x20000f04
 800a044:	e000ed04 	.word	0xe000ed04

0800a048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08a      	sub	sp, #40	; 0x28
 800a04c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a056:	463a      	mov	r2, r7
 800a058:	1d39      	adds	r1, r7, #4
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fd4a 	bl	8008af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	9202      	str	r2, [sp, #8]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	2300      	movs	r3, #0
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	460a      	mov	r2, r1
 800a076:	4920      	ldr	r1, [pc, #128]	; (800a0f8 <vTaskStartScheduler+0xb0>)
 800a078:	4820      	ldr	r0, [pc, #128]	; (800a0fc <vTaskStartScheduler+0xb4>)
 800a07a:	f7ff fe13 	bl	8009ca4 <xTaskCreateStatic>
 800a07e:	4602      	mov	r2, r0
 800a080:	4b1f      	ldr	r3, [pc, #124]	; (800a100 <vTaskStartScheduler+0xb8>)
 800a082:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a084:	4b1e      	ldr	r3, [pc, #120]	; (800a100 <vTaskStartScheduler+0xb8>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a08c:	2301      	movs	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e001      	b.n	800a096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d102      	bne.n	800a0a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a09c:	f000 fde4 	bl	800ac68 <xTimerCreateTimerTask>
 800a0a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d115      	bne.n	800a0d4 <vTaskStartScheduler+0x8c>
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0ba:	4b12      	ldr	r3, [pc, #72]	; (800a104 <vTaskStartScheduler+0xbc>)
 800a0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0c2:	4b11      	ldr	r3, [pc, #68]	; (800a108 <vTaskStartScheduler+0xc0>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0c8:	4b10      	ldr	r3, [pc, #64]	; (800a10c <vTaskStartScheduler+0xc4>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0ce:	f001 f997 	bl	800b400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0d2:	e00d      	b.n	800a0f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0da:	d109      	bne.n	800a0f0 <vTaskStartScheduler+0xa8>
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	e7fe      	b.n	800a0ee <vTaskStartScheduler+0xa6>
}
 800a0f0:	bf00      	nop
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	0800dbbc 	.word	0x0800dbbc
 800a0fc:	0800a711 	.word	0x0800a711
 800a100:	20000f00 	.word	0x20000f00
 800a104:	20000efc 	.word	0x20000efc
 800a108:	20000ee8 	.word	0x20000ee8
 800a10c:	20000ee0 	.word	0x20000ee0

0800a110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a114:	4b04      	ldr	r3, [pc, #16]	; (800a128 <vTaskSuspendAll+0x18>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3301      	adds	r3, #1
 800a11a:	4a03      	ldr	r2, [pc, #12]	; (800a128 <vTaskSuspendAll+0x18>)
 800a11c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a11e:	bf00      	nop
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	20000f04 	.word	0x20000f04

0800a12c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a13a:	4b41      	ldr	r3, [pc, #260]	; (800a240 <xTaskResumeAll+0x114>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <xTaskResumeAll+0x2a>
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	e7fe      	b.n	800a154 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a156:	f001 f9f1 	bl	800b53c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a15a:	4b39      	ldr	r3, [pc, #228]	; (800a240 <xTaskResumeAll+0x114>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3b01      	subs	r3, #1
 800a160:	4a37      	ldr	r2, [pc, #220]	; (800a240 <xTaskResumeAll+0x114>)
 800a162:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a164:	4b36      	ldr	r3, [pc, #216]	; (800a240 <xTaskResumeAll+0x114>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d162      	bne.n	800a232 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a16c:	4b35      	ldr	r3, [pc, #212]	; (800a244 <xTaskResumeAll+0x118>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d05e      	beq.n	800a232 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a174:	e02f      	b.n	800a1d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a176:	4b34      	ldr	r3, [pc, #208]	; (800a248 <xTaskResumeAll+0x11c>)
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3318      	adds	r3, #24
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fd76 	bl	8008c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fd71 	bl	8008c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4b2d      	ldr	r3, [pc, #180]	; (800a24c <xTaskResumeAll+0x120>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d903      	bls.n	800a1a6 <xTaskResumeAll+0x7a>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	4a2a      	ldr	r2, [pc, #168]	; (800a24c <xTaskResumeAll+0x120>)
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4a27      	ldr	r2, [pc, #156]	; (800a250 <xTaskResumeAll+0x124>)
 800a1b4:	441a      	add	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fe fcfc 	bl	8008bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c6:	4b23      	ldr	r3, [pc, #140]	; (800a254 <xTaskResumeAll+0x128>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d302      	bcc.n	800a1d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a1d0:	4b21      	ldr	r3, [pc, #132]	; (800a258 <xTaskResumeAll+0x12c>)
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1d6:	4b1c      	ldr	r3, [pc, #112]	; (800a248 <xTaskResumeAll+0x11c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1cb      	bne.n	800a176 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1e4:	f000 fb46 	bl	800a874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a1e8:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <xTaskResumeAll+0x130>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1f4:	f000 f846 	bl	800a284 <xTaskIncrementTick>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a1fe:	4b16      	ldr	r3, [pc, #88]	; (800a258 <xTaskResumeAll+0x12c>)
 800a200:	2201      	movs	r2, #1
 800a202:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3b01      	subs	r3, #1
 800a208:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1f1      	bne.n	800a1f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a210:	4b12      	ldr	r3, [pc, #72]	; (800a25c <xTaskResumeAll+0x130>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a216:	4b10      	ldr	r3, [pc, #64]	; (800a258 <xTaskResumeAll+0x12c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d009      	beq.n	800a232 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a21e:	2301      	movs	r3, #1
 800a220:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a222:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <xTaskResumeAll+0x134>)
 800a224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a232:	f001 f9b1 	bl	800b598 <vPortExitCritical>

	return xAlreadyYielded;
 800a236:	68bb      	ldr	r3, [r7, #8]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20000f04 	.word	0x20000f04
 800a244:	20000edc 	.word	0x20000edc
 800a248:	20000e9c 	.word	0x20000e9c
 800a24c:	20000ee4 	.word	0x20000ee4
 800a250:	20000a0c 	.word	0x20000a0c
 800a254:	20000a08 	.word	0x20000a08
 800a258:	20000ef0 	.word	0x20000ef0
 800a25c:	20000eec 	.word	0x20000eec
 800a260:	e000ed04 	.word	0xe000ed04

0800a264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a26a:	4b05      	ldr	r3, [pc, #20]	; (800a280 <xTaskGetTickCount+0x1c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a270:	687b      	ldr	r3, [r7, #4]
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	20000ee0 	.word	0x20000ee0

0800a284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28e:	4b4e      	ldr	r3, [pc, #312]	; (800a3c8 <xTaskIncrementTick+0x144>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 8088 	bne.w	800a3a8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a298:	4b4c      	ldr	r3, [pc, #304]	; (800a3cc <xTaskIncrementTick+0x148>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3301      	adds	r3, #1
 800a29e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2a0:	4a4a      	ldr	r2, [pc, #296]	; (800a3cc <xTaskIncrementTick+0x148>)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d11f      	bne.n	800a2ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2ac:	4b48      	ldr	r3, [pc, #288]	; (800a3d0 <xTaskIncrementTick+0x14c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d009      	beq.n	800a2ca <xTaskIncrementTick+0x46>
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	e7fe      	b.n	800a2c8 <xTaskIncrementTick+0x44>
 800a2ca:	4b41      	ldr	r3, [pc, #260]	; (800a3d0 <xTaskIncrementTick+0x14c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	4b40      	ldr	r3, [pc, #256]	; (800a3d4 <xTaskIncrementTick+0x150>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a3e      	ldr	r2, [pc, #248]	; (800a3d0 <xTaskIncrementTick+0x14c>)
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	4a3e      	ldr	r2, [pc, #248]	; (800a3d4 <xTaskIncrementTick+0x150>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	4b3e      	ldr	r3, [pc, #248]	; (800a3d8 <xTaskIncrementTick+0x154>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	4a3c      	ldr	r2, [pc, #240]	; (800a3d8 <xTaskIncrementTick+0x154>)
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	f000 fac4 	bl	800a874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2ec:	4b3b      	ldr	r3, [pc, #236]	; (800a3dc <xTaskIncrementTick+0x158>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d349      	bcc.n	800a38a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2f6:	4b36      	ldr	r3, [pc, #216]	; (800a3d0 <xTaskIncrementTick+0x14c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d104      	bne.n	800a30a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a300:	4b36      	ldr	r3, [pc, #216]	; (800a3dc <xTaskIncrementTick+0x158>)
 800a302:	f04f 32ff 	mov.w	r2, #4294967295
 800a306:	601a      	str	r2, [r3, #0]
					break;
 800a308:	e03f      	b.n	800a38a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <xTaskIncrementTick+0x14c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d203      	bcs.n	800a32a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a322:	4a2e      	ldr	r2, [pc, #184]	; (800a3dc <xTaskIncrementTick+0x158>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a328:	e02f      	b.n	800a38a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fca0 	bl	8008c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	3318      	adds	r3, #24
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe fc97 	bl	8008c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34a:	4b25      	ldr	r3, [pc, #148]	; (800a3e0 <xTaskIncrementTick+0x15c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d903      	bls.n	800a35a <xTaskIncrementTick+0xd6>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a356:	4a22      	ldr	r2, [pc, #136]	; (800a3e0 <xTaskIncrementTick+0x15c>)
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4a1f      	ldr	r2, [pc, #124]	; (800a3e4 <xTaskIncrementTick+0x160>)
 800a368:	441a      	add	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3304      	adds	r3, #4
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f7fe fc22 	bl	8008bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37a:	4b1b      	ldr	r3, [pc, #108]	; (800a3e8 <xTaskIncrementTick+0x164>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	429a      	cmp	r2, r3
 800a382:	d3b8      	bcc.n	800a2f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a384:	2301      	movs	r3, #1
 800a386:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a388:	e7b5      	b.n	800a2f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a38a:	4b17      	ldr	r3, [pc, #92]	; (800a3e8 <xTaskIncrementTick+0x164>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	4914      	ldr	r1, [pc, #80]	; (800a3e4 <xTaskIncrementTick+0x160>)
 800a392:	4613      	mov	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4413      	add	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	440b      	add	r3, r1
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d907      	bls.n	800a3b2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e004      	b.n	800a3b2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a3a8:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <xTaskIncrementTick+0x168>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	4a0f      	ldr	r2, [pc, #60]	; (800a3ec <xTaskIncrementTick+0x168>)
 800a3b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <xTaskIncrementTick+0x16c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a3be:	697b      	ldr	r3, [r7, #20]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20000f04 	.word	0x20000f04
 800a3cc:	20000ee0 	.word	0x20000ee0
 800a3d0:	20000e94 	.word	0x20000e94
 800a3d4:	20000e98 	.word	0x20000e98
 800a3d8:	20000ef4 	.word	0x20000ef4
 800a3dc:	20000efc 	.word	0x20000efc
 800a3e0:	20000ee4 	.word	0x20000ee4
 800a3e4:	20000a0c 	.word	0x20000a0c
 800a3e8:	20000a08 	.word	0x20000a08
 800a3ec:	20000eec 	.word	0x20000eec
 800a3f0:	20000ef0 	.word	0x20000ef0

0800a3f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3fa:	4b27      	ldr	r3, [pc, #156]	; (800a498 <vTaskSwitchContext+0xa4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a402:	4b26      	ldr	r3, [pc, #152]	; (800a49c <vTaskSwitchContext+0xa8>)
 800a404:	2201      	movs	r2, #1
 800a406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a408:	e040      	b.n	800a48c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a40a:	4b24      	ldr	r3, [pc, #144]	; (800a49c <vTaskSwitchContext+0xa8>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a410:	4b23      	ldr	r3, [pc, #140]	; (800a4a0 <vTaskSwitchContext+0xac>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	e00f      	b.n	800a438 <vTaskSwitchContext+0x44>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d109      	bne.n	800a432 <vTaskSwitchContext+0x3e>
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	607b      	str	r3, [r7, #4]
 800a430:	e7fe      	b.n	800a430 <vTaskSwitchContext+0x3c>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3b01      	subs	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	491a      	ldr	r1, [pc, #104]	; (800a4a4 <vTaskSwitchContext+0xb0>)
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	440b      	add	r3, r1
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d0e5      	beq.n	800a418 <vTaskSwitchContext+0x24>
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4613      	mov	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4a13      	ldr	r2, [pc, #76]	; (800a4a4 <vTaskSwitchContext+0xb0>)
 800a458:	4413      	add	r3, r2
 800a45a:	60bb      	str	r3, [r7, #8]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	3308      	adds	r3, #8
 800a46e:	429a      	cmp	r2, r3
 800a470:	d104      	bne.n	800a47c <vTaskSwitchContext+0x88>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	605a      	str	r2, [r3, #4]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	4a09      	ldr	r2, [pc, #36]	; (800a4a8 <vTaskSwitchContext+0xb4>)
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	4a06      	ldr	r2, [pc, #24]	; (800a4a0 <vTaskSwitchContext+0xac>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6013      	str	r3, [r2, #0]
}
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	20000f04 	.word	0x20000f04
 800a49c:	20000ef0 	.word	0x20000ef0
 800a4a0:	20000ee4 	.word	0x20000ee4
 800a4a4:	20000a0c 	.word	0x20000a0c
 800a4a8:	20000a08 	.word	0x20000a08

0800a4ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d109      	bne.n	800a4d0 <vTaskPlaceOnEventList+0x24>
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e7fe      	b.n	800a4ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <vTaskPlaceOnEventList+0x44>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3318      	adds	r3, #24
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe fb92 	bl	8008c02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4de:	2101      	movs	r1, #1
 800a4e0:	6838      	ldr	r0, [r7, #0]
 800a4e2:	f000 fb6d 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000a08 	.word	0x20000a08

0800a4f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <vTaskPlaceOnEventListRestricted+0x26>
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	e7fe      	b.n	800a518 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a51a:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <vTaskPlaceOnEventListRestricted+0x50>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3318      	adds	r3, #24
 800a520:	4619      	mov	r1, r3
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7fe fb49 	bl	8008bba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a52e:	f04f 33ff 	mov.w	r3, #4294967295
 800a532:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	68b8      	ldr	r0, [r7, #8]
 800a538:	f000 fb42 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
	}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20000a08 	.word	0x20000a08

0800a548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d109      	bne.n	800a572 <xTaskRemoveFromEventList+0x2a>
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	e7fe      	b.n	800a570 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3318      	adds	r3, #24
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fb7c 	bl	8008c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a57c:	4b1d      	ldr	r3, [pc, #116]	; (800a5f4 <xTaskRemoveFromEventList+0xac>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11d      	bne.n	800a5c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fb73 	bl	8008c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a592:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <xTaskRemoveFromEventList+0xb0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d903      	bls.n	800a5a2 <xTaskRemoveFromEventList+0x5a>
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59e:	4a16      	ldr	r2, [pc, #88]	; (800a5f8 <xTaskRemoveFromEventList+0xb0>)
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4a13      	ldr	r2, [pc, #76]	; (800a5fc <xTaskRemoveFromEventList+0xb4>)
 800a5b0:	441a      	add	r2, r3
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7fe fafe 	bl	8008bba <vListInsertEnd>
 800a5be:	e005      	b.n	800a5cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	480e      	ldr	r0, [pc, #56]	; (800a600 <xTaskRemoveFromEventList+0xb8>)
 800a5c8:	f7fe faf7 	bl	8008bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d0:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <xTaskRemoveFromEventList+0xbc>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d905      	bls.n	800a5e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5de:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <xTaskRemoveFromEventList+0xc0>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e001      	b.n	800a5ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5ea:	697b      	ldr	r3, [r7, #20]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000f04 	.word	0x20000f04
 800a5f8:	20000ee4 	.word	0x20000ee4
 800a5fc:	20000a0c 	.word	0x20000a0c
 800a600:	20000e9c 	.word	0x20000e9c
 800a604:	20000a08 	.word	0x20000a08
 800a608:	20000ef0 	.word	0x20000ef0

0800a60c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a614:	4b06      	ldr	r3, [pc, #24]	; (800a630 <vTaskInternalSetTimeOutState+0x24>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <vTaskInternalSetTimeOutState+0x28>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	605a      	str	r2, [r3, #4]
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	20000ef4 	.word	0x20000ef4
 800a634:	20000ee0 	.word	0x20000ee0

0800a638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d109      	bne.n	800a65c <xTaskCheckForTimeOut+0x24>
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	613b      	str	r3, [r7, #16]
 800a65a:	e7fe      	b.n	800a65a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <xTaskCheckForTimeOut+0x3e>
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e7fe      	b.n	800a674 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a676:	f000 ff61 	bl	800b53c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a67a:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <xTaskCheckForTimeOut+0xb8>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a692:	d102      	bne.n	800a69a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
 800a698:	e023      	b.n	800a6e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b15      	ldr	r3, [pc, #84]	; (800a6f4 <xTaskCheckForTimeOut+0xbc>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d007      	beq.n	800a6b6 <xTaskCheckForTimeOut+0x7e>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d302      	bcc.n	800a6b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	61fb      	str	r3, [r7, #28]
 800a6b4:	e015      	b.n	800a6e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d20b      	bcs.n	800a6d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	1ad2      	subs	r2, r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff ff9d 	bl	800a60c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61fb      	str	r3, [r7, #28]
 800a6d6:	e004      	b.n	800a6e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6e2:	f000 ff59 	bl	800b598 <vPortExitCritical>

	return xReturn;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000ee0 	.word	0x20000ee0
 800a6f4:	20000ef4 	.word	0x20000ef4

0800a6f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6fc:	4b03      	ldr	r3, [pc, #12]	; (800a70c <vTaskMissedYield+0x14>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	601a      	str	r2, [r3, #0]
}
 800a702:	bf00      	nop
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000ef0 	.word	0x20000ef0

0800a710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a718:	f000 f852 	bl	800a7c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a71c:	4b06      	ldr	r3, [pc, #24]	; (800a738 <prvIdleTask+0x28>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d9f9      	bls.n	800a718 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a724:	4b05      	ldr	r3, [pc, #20]	; (800a73c <prvIdleTask+0x2c>)
 800a726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a734:	e7f0      	b.n	800a718 <prvIdleTask+0x8>
 800a736:	bf00      	nop
 800a738:	20000a0c 	.word	0x20000a0c
 800a73c:	e000ed04 	.word	0xe000ed04

0800a740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a746:	2300      	movs	r3, #0
 800a748:	607b      	str	r3, [r7, #4]
 800a74a:	e00c      	b.n	800a766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4a12      	ldr	r2, [pc, #72]	; (800a7a0 <prvInitialiseTaskLists+0x60>)
 800a758:	4413      	add	r3, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fa00 	bl	8008b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3301      	adds	r3, #1
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b37      	cmp	r3, #55	; 0x37
 800a76a:	d9ef      	bls.n	800a74c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a76c:	480d      	ldr	r0, [pc, #52]	; (800a7a4 <prvInitialiseTaskLists+0x64>)
 800a76e:	f7fe f9f7 	bl	8008b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a772:	480d      	ldr	r0, [pc, #52]	; (800a7a8 <prvInitialiseTaskLists+0x68>)
 800a774:	f7fe f9f4 	bl	8008b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a778:	480c      	ldr	r0, [pc, #48]	; (800a7ac <prvInitialiseTaskLists+0x6c>)
 800a77a:	f7fe f9f1 	bl	8008b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a77e:	480c      	ldr	r0, [pc, #48]	; (800a7b0 <prvInitialiseTaskLists+0x70>)
 800a780:	f7fe f9ee 	bl	8008b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a784:	480b      	ldr	r0, [pc, #44]	; (800a7b4 <prvInitialiseTaskLists+0x74>)
 800a786:	f7fe f9eb 	bl	8008b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <prvInitialiseTaskLists+0x78>)
 800a78c:	4a05      	ldr	r2, [pc, #20]	; (800a7a4 <prvInitialiseTaskLists+0x64>)
 800a78e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a790:	4b0a      	ldr	r3, [pc, #40]	; (800a7bc <prvInitialiseTaskLists+0x7c>)
 800a792:	4a05      	ldr	r2, [pc, #20]	; (800a7a8 <prvInitialiseTaskLists+0x68>)
 800a794:	601a      	str	r2, [r3, #0]
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000a0c 	.word	0x20000a0c
 800a7a4:	20000e6c 	.word	0x20000e6c
 800a7a8:	20000e80 	.word	0x20000e80
 800a7ac:	20000e9c 	.word	0x20000e9c
 800a7b0:	20000eb0 	.word	0x20000eb0
 800a7b4:	20000ec8 	.word	0x20000ec8
 800a7b8:	20000e94 	.word	0x20000e94
 800a7bc:	20000e98 	.word	0x20000e98

0800a7c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7c6:	e019      	b.n	800a7fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7c8:	f000 feb8 	bl	800b53c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7cc:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <prvCheckTasksWaitingTermination+0x4c>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fa4b 	bl	8008c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7de:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <prvCheckTasksWaitingTermination+0x50>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	4a0a      	ldr	r2, [pc, #40]	; (800a810 <prvCheckTasksWaitingTermination+0x50>)
 800a7e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7e8:	4b0a      	ldr	r3, [pc, #40]	; (800a814 <prvCheckTasksWaitingTermination+0x54>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	4a09      	ldr	r2, [pc, #36]	; (800a814 <prvCheckTasksWaitingTermination+0x54>)
 800a7f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7f2:	f000 fed1 	bl	800b598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f80e 	bl	800a818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7fc:	4b05      	ldr	r3, [pc, #20]	; (800a814 <prvCheckTasksWaitingTermination+0x54>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e1      	bne.n	800a7c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000eb0 	.word	0x20000eb0
 800a810:	20000edc 	.word	0x20000edc
 800a814:	20000ec4 	.word	0x20000ec4

0800a818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a826:	2b00      	cmp	r3, #0
 800a828:	d108      	bne.n	800a83c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	4618      	mov	r0, r3
 800a830:	f001 f860 	bl	800b8f4 <vPortFree>
				vPortFree( pxTCB );
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 f85d 	bl	800b8f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a83a:	e017      	b.n	800a86c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a842:	2b01      	cmp	r3, #1
 800a844:	d103      	bne.n	800a84e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 f854 	bl	800b8f4 <vPortFree>
	}
 800a84c:	e00e      	b.n	800a86c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a854:	2b02      	cmp	r3, #2
 800a856:	d009      	beq.n	800a86c <prvDeleteTCB+0x54>
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e7fe      	b.n	800a86a <prvDeleteTCB+0x52>
	}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a87a:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <prvResetNextTaskUnblockTime+0x38>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a884:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a886:	f04f 32ff 	mov.w	r2, #4294967295
 800a88a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a88c:	e008      	b.n	800a8a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88e:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <prvResetNextTaskUnblockTime+0x38>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	4a04      	ldr	r2, [pc, #16]	; (800a8b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a89e:	6013      	str	r3, [r2, #0]
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	20000e94 	.word	0x20000e94
 800a8b0:	20000efc 	.word	0x20000efc

0800a8b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <xTaskGetSchedulerState+0x34>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	607b      	str	r3, [r7, #4]
 800a8c6:	e008      	b.n	800a8da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c8:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <xTaskGetSchedulerState+0x38>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	e001      	b.n	800a8da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8da:	687b      	ldr	r3, [r7, #4]
	}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	20000ee8 	.word	0x20000ee8
 800a8ec:	20000f04 	.word	0x20000f04

0800a8f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d051      	beq.n	800a9aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90a:	4b2a      	ldr	r3, [pc, #168]	; (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a910:	429a      	cmp	r2, r3
 800a912:	d241      	bcs.n	800a998 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db06      	blt.n	800a92a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91c:	4b25      	ldr	r3, [pc, #148]	; (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	6959      	ldr	r1, [r3, #20]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4a1f      	ldr	r2, [pc, #124]	; (800a9b8 <xTaskPriorityInherit+0xc8>)
 800a93c:	4413      	add	r3, r2
 800a93e:	4299      	cmp	r1, r3
 800a940:	d122      	bne.n	800a988 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	3304      	adds	r3, #4
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe f994 	bl	8008c74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a94c:	4b19      	ldr	r3, [pc, #100]	; (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95a:	4b18      	ldr	r3, [pc, #96]	; (800a9bc <xTaskPriorityInherit+0xcc>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d903      	bls.n	800a96a <xTaskPriorityInherit+0x7a>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	4a15      	ldr	r2, [pc, #84]	; (800a9bc <xTaskPriorityInherit+0xcc>)
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <xTaskPriorityInherit+0xc8>)
 800a978:	441a      	add	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fe f91a 	bl	8008bba <vListInsertEnd>
 800a986:	e004      	b.n	800a992 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a992:	2301      	movs	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	e008      	b.n	800a9aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a99c:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d201      	bcs.n	800a9aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
	}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20000a08 	.word	0x20000a08
 800a9b8:	20000a0c 	.word	0x20000a0c
 800a9bc:	20000ee4 	.word	0x20000ee4

0800a9c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d054      	beq.n	800aa80 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9d6:	4b2d      	ldr	r3, [pc, #180]	; (800aa8c <xTaskPriorityDisinherit+0xcc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d009      	beq.n	800a9f4 <xTaskPriorityDisinherit+0x34>
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	e7fe      	b.n	800a9f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <xTaskPriorityDisinherit+0x50>
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	60bb      	str	r3, [r7, #8]
 800aa0e:	e7fe      	b.n	800aa0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa14:	1e5a      	subs	r2, r3, #1
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d02c      	beq.n	800aa80 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d128      	bne.n	800aa80 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	3304      	adds	r3, #4
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe f91e 	bl	8008c74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <xTaskPriorityDisinherit+0xd0>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d903      	bls.n	800aa60 <xTaskPriorityDisinherit+0xa0>
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	4a0c      	ldr	r2, [pc, #48]	; (800aa90 <xTaskPriorityDisinherit+0xd0>)
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <xTaskPriorityDisinherit+0xd4>)
 800aa6e:	441a      	add	r2, r3
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	f7fe f89f 	bl	8008bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa80:	697b      	ldr	r3, [r7, #20]
	}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20000a08 	.word	0x20000a08
 800aa90:	20000ee4 	.word	0x20000ee4
 800aa94:	20000a0c 	.word	0x20000a0c

0800aa98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d068      	beq.n	800ab82 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d109      	bne.n	800aacc <vTaskPriorityDisinheritAfterTimeout+0x34>
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
 800aaca:	e7fe      	b.n	800aaca <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d902      	bls.n	800aadc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	61fb      	str	r3, [r7, #28]
 800aada:	e002      	b.n	800aae2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	69fa      	ldr	r2, [r7, #28]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d04a      	beq.n	800ab82 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d145      	bne.n	800ab82 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aaf6:	4b25      	ldr	r3, [pc, #148]	; (800ab8c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d109      	bne.n	800ab14 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	60bb      	str	r3, [r7, #8]
 800ab12:	e7fe      	b.n	800ab12 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	db04      	blt.n	800ab32 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	6959      	ldr	r1, [r3, #20]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4a13      	ldr	r2, [pc, #76]	; (800ab90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab42:	4413      	add	r3, r2
 800ab44:	4299      	cmp	r1, r3
 800ab46:	d11c      	bne.n	800ab82 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe f891 	bl	8008c74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d903      	bls.n	800ab66 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	4a0c      	ldr	r2, [pc, #48]	; (800ab94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4a07      	ldr	r2, [pc, #28]	; (800ab90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab74:	441a      	add	r2, r3
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f7fe f81c 	bl	8008bba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab82:	bf00      	nop
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000a08 	.word	0x20000a08
 800ab90:	20000a0c 	.word	0x20000a0c
 800ab94:	20000ee4 	.word	0x20000ee4

0800ab98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab98:	b480      	push	{r7}
 800ab9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab9c:	4b07      	ldr	r3, [pc, #28]	; (800abbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d004      	beq.n	800abae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aba4:	4b05      	ldr	r3, [pc, #20]	; (800abbc <pvTaskIncrementMutexHeldCount+0x24>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abaa:	3201      	adds	r2, #1
 800abac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800abae:	4b03      	ldr	r3, [pc, #12]	; (800abbc <pvTaskIncrementMutexHeldCount+0x24>)
 800abb0:	681b      	ldr	r3, [r3, #0]
	}
 800abb2:	4618      	mov	r0, r3
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	20000a08 	.word	0x20000a08

0800abc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abca:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <prvAddCurrentTaskToDelayedList+0x90>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abd0:	4b20      	ldr	r3, [pc, #128]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3304      	adds	r3, #4
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe f84c 	bl	8008c74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe2:	d10a      	bne.n	800abfa <prvAddCurrentTaskToDelayedList+0x3a>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d007      	beq.n	800abfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abea:	4b1a      	ldr	r3, [pc, #104]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3304      	adds	r3, #4
 800abf0:	4619      	mov	r1, r3
 800abf2:	4819      	ldr	r0, [pc, #100]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x98>)
 800abf4:	f7fd ffe1 	bl	8008bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abf8:	e026      	b.n	800ac48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4413      	add	r3, r2
 800ac00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac02:	4b14      	ldr	r3, [pc, #80]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d209      	bcs.n	800ac26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac12:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4b0f      	ldr	r3, [pc, #60]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	f7fd ffef 	bl	8008c02 <vListInsert>
}
 800ac24:	e010      	b.n	800ac48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac26:	4b0e      	ldr	r3, [pc, #56]	; (800ac60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f7fd ffe5 	bl	8008c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d202      	bcs.n	800ac48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac42:	4a08      	ldr	r2, [pc, #32]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6013      	str	r3, [r2, #0]
}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000ee0 	.word	0x20000ee0
 800ac54:	20000a08 	.word	0x20000a08
 800ac58:	20000ec8 	.word	0x20000ec8
 800ac5c:	20000e98 	.word	0x20000e98
 800ac60:	20000e94 	.word	0x20000e94
 800ac64:	20000efc 	.word	0x20000efc

0800ac68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08a      	sub	sp, #40	; 0x28
 800ac6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac72:	f000 faff 	bl	800b274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac76:	4b1c      	ldr	r3, [pc, #112]	; (800ace8 <xTimerCreateTimerTask+0x80>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d021      	beq.n	800acc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac86:	1d3a      	adds	r2, r7, #4
 800ac88:	f107 0108 	add.w	r1, r7, #8
 800ac8c:	f107 030c 	add.w	r3, r7, #12
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fd ff4b 	bl	8008b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	9202      	str	r2, [sp, #8]
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	2302      	movs	r3, #2
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	2300      	movs	r3, #0
 800aca6:	460a      	mov	r2, r1
 800aca8:	4910      	ldr	r1, [pc, #64]	; (800acec <xTimerCreateTimerTask+0x84>)
 800acaa:	4811      	ldr	r0, [pc, #68]	; (800acf0 <xTimerCreateTimerTask+0x88>)
 800acac:	f7fe fffa 	bl	8009ca4 <xTaskCreateStatic>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4b10      	ldr	r3, [pc, #64]	; (800acf4 <xTimerCreateTimerTask+0x8c>)
 800acb4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acb6:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <xTimerCreateTimerTask+0x8c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acbe:	2301      	movs	r3, #1
 800acc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d109      	bne.n	800acdc <xTimerCreateTimerTask+0x74>
 800acc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	613b      	str	r3, [r7, #16]
 800acda:	e7fe      	b.n	800acda <xTimerCreateTimerTask+0x72>
	return xReturn;
 800acdc:	697b      	ldr	r3, [r7, #20]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000f38 	.word	0x20000f38
 800acec:	0800dbc4 	.word	0x0800dbc4
 800acf0:	0800ae29 	.word	0x0800ae29
 800acf4:	20000f3c 	.word	0x20000f3c

0800acf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08a      	sub	sp, #40	; 0x28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <xTimerGenericCommand+0x2c>
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	623b      	str	r3, [r7, #32]
 800ad22:	e7fe      	b.n	800ad22 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad24:	4b19      	ldr	r3, [pc, #100]	; (800ad8c <xTimerGenericCommand+0x94>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d02a      	beq.n	800ad82 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	dc18      	bgt.n	800ad70 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad3e:	f7ff fdb9 	bl	800a8b4 <xTaskGetSchedulerState>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d109      	bne.n	800ad5c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad48:	4b10      	ldr	r3, [pc, #64]	; (800ad8c <xTimerGenericCommand+0x94>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	f107 0110 	add.w	r1, r7, #16
 800ad50:	2300      	movs	r3, #0
 800ad52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad54:	f7fe f95c 	bl	8009010 <xQueueGenericSend>
 800ad58:	6278      	str	r0, [r7, #36]	; 0x24
 800ad5a:	e012      	b.n	800ad82 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad5c:	4b0b      	ldr	r3, [pc, #44]	; (800ad8c <xTimerGenericCommand+0x94>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	f107 0110 	add.w	r1, r7, #16
 800ad64:	2300      	movs	r3, #0
 800ad66:	2200      	movs	r2, #0
 800ad68:	f7fe f952 	bl	8009010 <xQueueGenericSend>
 800ad6c:	6278      	str	r0, [r7, #36]	; 0x24
 800ad6e:	e008      	b.n	800ad82 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad70:	4b06      	ldr	r3, [pc, #24]	; (800ad8c <xTimerGenericCommand+0x94>)
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	f107 0110 	add.w	r1, r7, #16
 800ad78:	2300      	movs	r3, #0
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	f7fe fa42 	bl	8009204 <xQueueGenericSendFromISR>
 800ad80:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3728      	adds	r7, #40	; 0x28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	20000f38 	.word	0x20000f38

0800ad90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad9a:	4b22      	ldr	r3, [pc, #136]	; (800ae24 <prvProcessExpiredTimer+0x94>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fd ff63 	bl	8008c74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d021      	beq.n	800ae00 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	699a      	ldr	r2, [r3, #24]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	18d1      	adds	r1, r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	6978      	ldr	r0, [r7, #20]
 800adca:	f000 f8d1 	bl	800af70 <prvInsertTimerInActiveList>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d01e      	beq.n	800ae12 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800add4:	2300      	movs	r3, #0
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	2300      	movs	r3, #0
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	2100      	movs	r1, #0
 800adde:	6978      	ldr	r0, [r7, #20]
 800ade0:	f7ff ff8a 	bl	800acf8 <xTimerGenericCommand>
 800ade4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d112      	bne.n	800ae12 <prvProcessExpiredTimer+0x82>
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	e7fe      	b.n	800adfe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae06:	f023 0301 	bic.w	r3, r3, #1
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	6978      	ldr	r0, [r7, #20]
 800ae18:	4798      	blx	r3
}
 800ae1a:	bf00      	nop
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20000f30 	.word	0x20000f30

0800ae28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae30:	f107 0308 	add.w	r3, r7, #8
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f857 	bl	800aee8 <prvGetNextExpireTime>
 800ae3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f803 	bl	800ae4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae46:	f000 f8d5 	bl	800aff4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae4a:	e7f1      	b.n	800ae30 <prvTimerTask+0x8>

0800ae4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae56:	f7ff f95b 	bl	800a110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f866 	bl	800af30 <prvSampleTimeNow>
 800ae64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d130      	bne.n	800aece <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <prvProcessTimerOrBlockTask+0x3c>
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d806      	bhi.n	800ae88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae7a:	f7ff f957 	bl	800a12c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ff85 	bl	800ad90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae86:	e024      	b.n	800aed2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d008      	beq.n	800aea0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <prvProcessTimerOrBlockTask+0x90>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <prvProcessTimerOrBlockTask+0x50>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <prvProcessTimerOrBlockTask+0x52>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aea0:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <prvProcessTimerOrBlockTask+0x94>)
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	f7fe fec5 	bl	8009c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aeb2:	f7ff f93b 	bl	800a12c <xTaskResumeAll>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <prvProcessTimerOrBlockTask+0x98>)
 800aebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	f3bf 8f6f 	isb	sy
}
 800aecc:	e001      	b.n	800aed2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aece:	f7ff f92d 	bl	800a12c <xTaskResumeAll>
}
 800aed2:	bf00      	nop
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20000f34 	.word	0x20000f34
 800aee0:	20000f38 	.word	0x20000f38
 800aee4:	e000ed04 	.word	0xe000ed04

0800aee8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aef0:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <prvGetNextExpireTime+0x44>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <prvGetNextExpireTime+0x16>
 800aefa:	2201      	movs	r2, #1
 800aefc:	e000      	b.n	800af00 <prvGetNextExpireTime+0x18>
 800aefe:	2200      	movs	r2, #0
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d105      	bne.n	800af18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af0c:	4b07      	ldr	r3, [pc, #28]	; (800af2c <prvGetNextExpireTime+0x44>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	e001      	b.n	800af1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af1c:	68fb      	ldr	r3, [r7, #12]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	20000f30 	.word	0x20000f30

0800af30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af38:	f7ff f994 	bl	800a264 <xTaskGetTickCount>
 800af3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af3e:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <prvSampleTimeNow+0x3c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	429a      	cmp	r2, r3
 800af46:	d205      	bcs.n	800af54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af48:	f000 f930 	bl	800b1ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e002      	b.n	800af5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af5a:	4a04      	ldr	r2, [pc, #16]	; (800af6c <prvSampleTimeNow+0x3c>)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af60:	68fb      	ldr	r3, [r7, #12]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20000f40 	.word	0x20000f40

0800af70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	429a      	cmp	r2, r3
 800af94:	d812      	bhi.n	800afbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	1ad2      	subs	r2, r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d302      	bcc.n	800afaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e01b      	b.n	800afe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afaa:	4b10      	ldr	r3, [pc, #64]	; (800afec <prvInsertTimerInActiveList+0x7c>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f7fd fe24 	bl	8008c02 <vListInsert>
 800afba:	e012      	b.n	800afe2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d206      	bcs.n	800afd2 <prvInsertTimerInActiveList+0x62>
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d302      	bcc.n	800afd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afcc:	2301      	movs	r3, #1
 800afce:	617b      	str	r3, [r7, #20]
 800afd0:	e007      	b.n	800afe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afd2:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <prvInsertTimerInActiveList+0x80>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3304      	adds	r3, #4
 800afda:	4619      	mov	r1, r3
 800afdc:	4610      	mov	r0, r2
 800afde:	f7fd fe10 	bl	8008c02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afe2:	697b      	ldr	r3, [r7, #20]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20000f34 	.word	0x20000f34
 800aff0:	20000f30 	.word	0x20000f30

0800aff4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08e      	sub	sp, #56	; 0x38
 800aff8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800affa:	e0c6      	b.n	800b18a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	da17      	bge.n	800b032 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b002:	1d3b      	adds	r3, r7, #4
 800b004:	3304      	adds	r3, #4
 800b006:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvProcessReceivedCommands+0x2e>
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	e7fe      	b.n	800b020 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b028:	6850      	ldr	r0, [r2, #4]
 800b02a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b02c:	6892      	ldr	r2, [r2, #8]
 800b02e:	4611      	mov	r1, r2
 800b030:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	f2c0 80a7 	blt.w	800b188 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d004      	beq.n	800b050 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	3304      	adds	r3, #4
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fd fe12 	bl	8008c74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b050:	463b      	mov	r3, r7
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff ff6c 	bl	800af30 <prvSampleTimeNow>
 800b058:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b09      	cmp	r3, #9
 800b05e:	f200 8094 	bhi.w	800b18a <prvProcessReceivedCommands+0x196>
 800b062:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <prvProcessReceivedCommands+0x74>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b091 	.word	0x0800b091
 800b06c:	0800b091 	.word	0x0800b091
 800b070:	0800b091 	.word	0x0800b091
 800b074:	0800b103 	.word	0x0800b103
 800b078:	0800b117 	.word	0x0800b117
 800b07c:	0800b15f 	.word	0x0800b15f
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b091 	.word	0x0800b091
 800b088:	0800b103 	.word	0x0800b103
 800b08c:	0800b117 	.word	0x0800b117
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b096:	f043 0301 	orr.w	r3, r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	18d1      	adds	r1, r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b0:	f7ff ff5e 	bl	800af70 <prvInsertTimerInActiveList>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d067      	beq.n	800b18a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d05c      	beq.n	800b18a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	441a      	add	r2, r3
 800b0d8:	2300      	movs	r3, #0
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0e2:	f7ff fe09 	bl	800acf8 <xTimerGenericCommand>
 800b0e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d14d      	bne.n	800b18a <prvProcessReceivedCommands+0x196>
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	61bb      	str	r3, [r7, #24]
 800b100:	e7fe      	b.n	800b100 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b114:	e039      	b.n	800b18a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b11c:	f043 0301 	orr.w	r3, r3, #1
 800b120:	b2da      	uxtb	r2, r3
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <prvProcessReceivedCommands+0x156>
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	617b      	str	r3, [r7, #20]
 800b148:	e7fe      	b.n	800b148 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	699a      	ldr	r2, [r3, #24]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	18d1      	adds	r1, r2, r3
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b158:	f7ff ff0a 	bl	800af70 <prvInsertTimerInActiveList>
					break;
 800b15c:	e015      	b.n	800b18a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b16e:	f000 fbc1 	bl	800b8f4 <vPortFree>
 800b172:	e00a      	b.n	800b18a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b186:	e000      	b.n	800b18a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b18a:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <prvProcessReceivedCommands+0x1b4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	1d39      	adds	r1, r7, #4
 800b190:	2200      	movs	r2, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe f954 	bl	8009440 <xQueueReceive>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f47f af2e 	bne.w	800affc <prvProcessReceivedCommands+0x8>
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	3730      	adds	r7, #48	; 0x30
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20000f38 	.word	0x20000f38

0800b1ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1b2:	e047      	b.n	800b244 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1b4:	4b2d      	ldr	r3, [pc, #180]	; (800b26c <prvSwitchTimerLists+0xc0>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1be:	4b2b      	ldr	r3, [pc, #172]	; (800b26c <prvSwitchTimerLists+0xc0>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fd fd51 	bl	8008c74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d02d      	beq.n	800b244 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d90e      	bls.n	800b218 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b206:	4b19      	ldr	r3, [pc, #100]	; (800b26c <prvSwitchTimerLists+0xc0>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3304      	adds	r3, #4
 800b20e:	4619      	mov	r1, r3
 800b210:	4610      	mov	r0, r2
 800b212:	f7fd fcf6 	bl	8008c02 <vListInsert>
 800b216:	e015      	b.n	800b244 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	2300      	movs	r3, #0
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	2100      	movs	r1, #0
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fd68 	bl	800acf8 <xTimerGenericCommand>
 800b228:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d109      	bne.n	800b244 <prvSwitchTimerLists+0x98>
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	e7fe      	b.n	800b242 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b244:	4b09      	ldr	r3, [pc, #36]	; (800b26c <prvSwitchTimerLists+0xc0>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1b2      	bne.n	800b1b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b24e:	4b07      	ldr	r3, [pc, #28]	; (800b26c <prvSwitchTimerLists+0xc0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <prvSwitchTimerLists+0xc4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a04      	ldr	r2, [pc, #16]	; (800b26c <prvSwitchTimerLists+0xc0>)
 800b25a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b25c:	4a04      	ldr	r2, [pc, #16]	; (800b270 <prvSwitchTimerLists+0xc4>)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	6013      	str	r3, [r2, #0]
}
 800b262:	bf00      	nop
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000f30 	.word	0x20000f30
 800b270:	20000f34 	.word	0x20000f34

0800b274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b27a:	f000 f95f 	bl	800b53c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b27e:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <prvCheckForValidListAndQueue+0x60>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d120      	bne.n	800b2c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b286:	4814      	ldr	r0, [pc, #80]	; (800b2d8 <prvCheckForValidListAndQueue+0x64>)
 800b288:	f7fd fc6a 	bl	8008b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b28c:	4813      	ldr	r0, [pc, #76]	; (800b2dc <prvCheckForValidListAndQueue+0x68>)
 800b28e:	f7fd fc67 	bl	8008b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b292:	4b13      	ldr	r3, [pc, #76]	; (800b2e0 <prvCheckForValidListAndQueue+0x6c>)
 800b294:	4a10      	ldr	r2, [pc, #64]	; (800b2d8 <prvCheckForValidListAndQueue+0x64>)
 800b296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b298:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <prvCheckForValidListAndQueue+0x70>)
 800b29a:	4a10      	ldr	r2, [pc, #64]	; (800b2dc <prvCheckForValidListAndQueue+0x68>)
 800b29c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <prvCheckForValidListAndQueue+0x74>)
 800b2a4:	4a11      	ldr	r2, [pc, #68]	; (800b2ec <prvCheckForValidListAndQueue+0x78>)
 800b2a6:	2110      	movs	r1, #16
 800b2a8:	200a      	movs	r0, #10
 800b2aa:	f7fd fd75 	bl	8008d98 <xQueueGenericCreateStatic>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b08      	ldr	r3, [pc, #32]	; (800b2d4 <prvCheckForValidListAndQueue+0x60>)
 800b2b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <prvCheckForValidListAndQueue+0x60>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <prvCheckForValidListAndQueue+0x60>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	490b      	ldr	r1, [pc, #44]	; (800b2f0 <prvCheckForValidListAndQueue+0x7c>)
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fc68 	bl	8009b98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2c8:	f000 f966 	bl	800b598 <vPortExitCritical>
}
 800b2cc:	bf00      	nop
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	20000f38 	.word	0x20000f38
 800b2d8:	20000f08 	.word	0x20000f08
 800b2dc:	20000f1c 	.word	0x20000f1c
 800b2e0:	20000f30 	.word	0x20000f30
 800b2e4:	20000f34 	.word	0x20000f34
 800b2e8:	20000fe4 	.word	0x20000fe4
 800b2ec:	20000f44 	.word	0x20000f44
 800b2f0:	0800dbcc 	.word	0x0800dbcc

0800b2f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3b04      	subs	r3, #4
 800b304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b04      	subs	r3, #4
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f023 0201 	bic.w	r2, r3, #1
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3b04      	subs	r3, #4
 800b322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b324:	4a0c      	ldr	r2, [pc, #48]	; (800b358 <pxPortInitialiseStack+0x64>)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3b14      	subs	r3, #20
 800b32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3b04      	subs	r3, #4
 800b33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f06f 0202 	mvn.w	r2, #2
 800b342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3b20      	subs	r3, #32
 800b348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b34a:	68fb      	ldr	r3, [r7, #12]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	0800b35d 	.word	0x0800b35d

0800b35c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b366:	4b11      	ldr	r3, [pc, #68]	; (800b3ac <prvTaskExitError+0x50>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36e:	d009      	beq.n	800b384 <prvTaskExitError+0x28>
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	e7fe      	b.n	800b382 <prvTaskExitError+0x26>
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b396:	bf00      	nop
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d0fc      	beq.n	800b398 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b39e:	bf00      	nop
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20000024 	.word	0x20000024

0800b3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3b0:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <pxCurrentTCBConst2>)
 800b3b2:	6819      	ldr	r1, [r3, #0]
 800b3b4:	6808      	ldr	r0, [r1, #0]
 800b3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ba:	f380 8809 	msr	PSP, r0
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8811 	msr	BASEPRI, r0
 800b3ca:	4770      	bx	lr
 800b3cc:	f3af 8000 	nop.w

0800b3d0 <pxCurrentTCBConst2>:
 800b3d0:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop

0800b3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3d8:	4808      	ldr	r0, [pc, #32]	; (800b3fc <prvPortStartFirstTask+0x24>)
 800b3da:	6800      	ldr	r0, [r0, #0]
 800b3dc:	6800      	ldr	r0, [r0, #0]
 800b3de:	f380 8808 	msr	MSP, r0
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f380 8814 	msr	CONTROL, r0
 800b3ea:	b662      	cpsie	i
 800b3ec:	b661      	cpsie	f
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	df00      	svc	0
 800b3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3fa:	bf00      	nop
 800b3fc:	e000ed08 	.word	0xe000ed08

0800b400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b406:	4b44      	ldr	r3, [pc, #272]	; (800b518 <xPortStartScheduler+0x118>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a44      	ldr	r2, [pc, #272]	; (800b51c <xPortStartScheduler+0x11c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d109      	bne.n	800b424 <xPortStartScheduler+0x24>
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	613b      	str	r3, [r7, #16]
 800b422:	e7fe      	b.n	800b422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b424:	4b3c      	ldr	r3, [pc, #240]	; (800b518 <xPortStartScheduler+0x118>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a3d      	ldr	r2, [pc, #244]	; (800b520 <xPortStartScheduler+0x120>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d109      	bne.n	800b442 <xPortStartScheduler+0x42>
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	e7fe      	b.n	800b440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b442:	4b38      	ldr	r3, [pc, #224]	; (800b524 <xPortStartScheduler+0x124>)
 800b444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	22ff      	movs	r2, #255	; 0xff
 800b452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b464:	b2da      	uxtb	r2, r3
 800b466:	4b30      	ldr	r3, [pc, #192]	; (800b528 <xPortStartScheduler+0x128>)
 800b468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b46a:	4b30      	ldr	r3, [pc, #192]	; (800b52c <xPortStartScheduler+0x12c>)
 800b46c:	2207      	movs	r2, #7
 800b46e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b470:	e009      	b.n	800b486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b472:	4b2e      	ldr	r3, [pc, #184]	; (800b52c <xPortStartScheduler+0x12c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	3b01      	subs	r3, #1
 800b478:	4a2c      	ldr	r2, [pc, #176]	; (800b52c <xPortStartScheduler+0x12c>)
 800b47a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	b2db      	uxtb	r3, r3
 800b484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48e:	2b80      	cmp	r3, #128	; 0x80
 800b490:	d0ef      	beq.n	800b472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b492:	4b26      	ldr	r3, [pc, #152]	; (800b52c <xPortStartScheduler+0x12c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f1c3 0307 	rsb	r3, r3, #7
 800b49a:	2b04      	cmp	r3, #4
 800b49c:	d009      	beq.n	800b4b2 <xPortStartScheduler+0xb2>
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	60bb      	str	r3, [r7, #8]
 800b4b0:	e7fe      	b.n	800b4b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4b2:	4b1e      	ldr	r3, [pc, #120]	; (800b52c <xPortStartScheduler+0x12c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	021b      	lsls	r3, r3, #8
 800b4b8:	4a1c      	ldr	r2, [pc, #112]	; (800b52c <xPortStartScheduler+0x12c>)
 800b4ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4bc:	4b1b      	ldr	r3, [pc, #108]	; (800b52c <xPortStartScheduler+0x12c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4c4:	4a19      	ldr	r2, [pc, #100]	; (800b52c <xPortStartScheduler+0x12c>)
 800b4c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4d0:	4b17      	ldr	r3, [pc, #92]	; (800b530 <xPortStartScheduler+0x130>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a16      	ldr	r2, [pc, #88]	; (800b530 <xPortStartScheduler+0x130>)
 800b4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4dc:	4b14      	ldr	r3, [pc, #80]	; (800b530 <xPortStartScheduler+0x130>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a13      	ldr	r2, [pc, #76]	; (800b530 <xPortStartScheduler+0x130>)
 800b4e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4e8:	f000 f8d6 	bl	800b698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4ec:	4b11      	ldr	r3, [pc, #68]	; (800b534 <xPortStartScheduler+0x134>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4f2:	f000 f8f5 	bl	800b6e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4f6:	4b10      	ldr	r3, [pc, #64]	; (800b538 <xPortStartScheduler+0x138>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a0f      	ldr	r2, [pc, #60]	; (800b538 <xPortStartScheduler+0x138>)
 800b4fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b502:	f7ff ff69 	bl	800b3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b506:	f7fe ff75 	bl	800a3f4 <vTaskSwitchContext>
	prvTaskExitError();
 800b50a:	f7ff ff27 	bl	800b35c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	e000ed00 	.word	0xe000ed00
 800b51c:	410fc271 	.word	0x410fc271
 800b520:	410fc270 	.word	0x410fc270
 800b524:	e000e400 	.word	0xe000e400
 800b528:	20001034 	.word	0x20001034
 800b52c:	20001038 	.word	0x20001038
 800b530:	e000ed20 	.word	0xe000ed20
 800b534:	20000024 	.word	0x20000024
 800b538:	e000ef34 	.word	0xe000ef34

0800b53c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b554:	4b0e      	ldr	r3, [pc, #56]	; (800b590 <vPortEnterCritical+0x54>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3301      	adds	r3, #1
 800b55a:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <vPortEnterCritical+0x54>)
 800b55c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b55e:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <vPortEnterCritical+0x54>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d10e      	bne.n	800b584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b566:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <vPortEnterCritical+0x58>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d009      	beq.n	800b584 <vPortEnterCritical+0x48>
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	603b      	str	r3, [r7, #0]
 800b582:	e7fe      	b.n	800b582 <vPortEnterCritical+0x46>
	}
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	20000024 	.word	0x20000024
 800b594:	e000ed04 	.word	0xe000ed04

0800b598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b59e:	4b11      	ldr	r3, [pc, #68]	; (800b5e4 <vPortExitCritical+0x4c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d109      	bne.n	800b5ba <vPortExitCritical+0x22>
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	607b      	str	r3, [r7, #4]
 800b5b8:	e7fe      	b.n	800b5b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b5ba:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <vPortExitCritical+0x4c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <vPortExitCritical+0x4c>)
 800b5c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <vPortExitCritical+0x4c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <vPortExitCritical+0x3e>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000024 	.word	0x20000024
	...

0800b5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5f0:	f3ef 8009 	mrs	r0, PSP
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	4b15      	ldr	r3, [pc, #84]	; (800b650 <pxCurrentTCBConst>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	f01e 0f10 	tst.w	lr, #16
 800b600:	bf08      	it	eq
 800b602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	6010      	str	r0, [r2, #0]
 800b60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b614:	f380 8811 	msr	BASEPRI, r0
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f7fe fee8 	bl	800a3f4 <vTaskSwitchContext>
 800b624:	f04f 0000 	mov.w	r0, #0
 800b628:	f380 8811 	msr	BASEPRI, r0
 800b62c:	bc09      	pop	{r0, r3}
 800b62e:	6819      	ldr	r1, [r3, #0]
 800b630:	6808      	ldr	r0, [r1, #0]
 800b632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b636:	f01e 0f10 	tst.w	lr, #16
 800b63a:	bf08      	it	eq
 800b63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b640:	f380 8809 	msr	PSP, r0
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w

0800b650 <pxCurrentTCBConst>:
 800b650:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop

0800b658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b670:	f7fe fe08 	bl	800a284 <xTaskIncrementTick>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b67a:	4b06      	ldr	r3, [pc, #24]	; (800b694 <xPortSysTickHandler+0x3c>)
 800b67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	2300      	movs	r3, #0
 800b684:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b69c:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <vPortSetupTimerInterrupt+0x34>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6a2:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <vPortSetupTimerInterrupt+0x38>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <vPortSetupTimerInterrupt+0x3c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a0a      	ldr	r2, [pc, #40]	; (800b6d8 <vPortSetupTimerInterrupt+0x40>)
 800b6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b2:	099b      	lsrs	r3, r3, #6
 800b6b4:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <vPortSetupTimerInterrupt+0x44>)
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ba:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <vPortSetupTimerInterrupt+0x34>)
 800b6bc:	2207      	movs	r2, #7
 800b6be:	601a      	str	r2, [r3, #0]
}
 800b6c0:	bf00      	nop
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	e000e010 	.word	0xe000e010
 800b6d0:	e000e018 	.word	0xe000e018
 800b6d4:	20000004 	.word	0x20000004
 800b6d8:	10624dd3 	.word	0x10624dd3
 800b6dc:	e000e014 	.word	0xe000e014

0800b6e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6f0 <vPortEnableVFP+0x10>
 800b6e4:	6801      	ldr	r1, [r0, #0]
 800b6e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ea:	6001      	str	r1, [r0, #0]
 800b6ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6ee:	bf00      	nop
 800b6f0:	e000ed88 	.word	0xe000ed88

0800b6f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6fa:	f3ef 8305 	mrs	r3, IPSR
 800b6fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d913      	bls.n	800b72e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b706:	4a16      	ldr	r2, [pc, #88]	; (800b760 <vPortValidateInterruptPriority+0x6c>)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4413      	add	r3, r2
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b710:	4b14      	ldr	r3, [pc, #80]	; (800b764 <vPortValidateInterruptPriority+0x70>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	7afa      	ldrb	r2, [r7, #11]
 800b716:	429a      	cmp	r2, r3
 800b718:	d209      	bcs.n	800b72e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	607b      	str	r3, [r7, #4]
 800b72c:	e7fe      	b.n	800b72c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b72e:	4b0e      	ldr	r3, [pc, #56]	; (800b768 <vPortValidateInterruptPriority+0x74>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b736:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <vPortValidateInterruptPriority+0x78>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d909      	bls.n	800b752 <vPortValidateInterruptPriority+0x5e>
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	e7fe      	b.n	800b750 <vPortValidateInterruptPriority+0x5c>
	}
 800b752:	bf00      	nop
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	e000e3f0 	.word	0xe000e3f0
 800b764:	20001034 	.word	0x20001034
 800b768:	e000ed0c 	.word	0xe000ed0c
 800b76c:	20001038 	.word	0x20001038

0800b770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	; 0x28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b778:	2300      	movs	r3, #0
 800b77a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b77c:	f7fe fcc8 	bl	800a110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b780:	4b57      	ldr	r3, [pc, #348]	; (800b8e0 <pvPortMalloc+0x170>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b788:	f000 f90c 	bl	800b9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b78c:	4b55      	ldr	r3, [pc, #340]	; (800b8e4 <pvPortMalloc+0x174>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4013      	ands	r3, r2
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 808c 	bne.w	800b8b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d01c      	beq.n	800b7da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b7a0:	2208      	movs	r2, #8
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f003 0307 	and.w	r3, r3, #7
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d013      	beq.n	800b7da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f023 0307 	bic.w	r3, r3, #7
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f003 0307 	and.w	r3, r3, #7
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d009      	beq.n	800b7da <pvPortMalloc+0x6a>
 800b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e7fe      	b.n	800b7d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d068      	beq.n	800b8b2 <pvPortMalloc+0x142>
 800b7e0:	4b41      	ldr	r3, [pc, #260]	; (800b8e8 <pvPortMalloc+0x178>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d863      	bhi.n	800b8b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7ea:	4b40      	ldr	r3, [pc, #256]	; (800b8ec <pvPortMalloc+0x17c>)
 800b7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7ee:	4b3f      	ldr	r3, [pc, #252]	; (800b8ec <pvPortMalloc+0x17c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7f4:	e004      	b.n	800b800 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	429a      	cmp	r2, r3
 800b808:	d903      	bls.n	800b812 <pvPortMalloc+0xa2>
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f1      	bne.n	800b7f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b812:	4b33      	ldr	r3, [pc, #204]	; (800b8e0 <pvPortMalloc+0x170>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b818:	429a      	cmp	r2, r3
 800b81a:	d04a      	beq.n	800b8b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2208      	movs	r2, #8
 800b822:	4413      	add	r3, r2
 800b824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	1ad2      	subs	r2, r2, r3
 800b836:	2308      	movs	r3, #8
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d91e      	bls.n	800b87c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4413      	add	r3, r2
 800b844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	f003 0307 	and.w	r3, r3, #7
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d009      	beq.n	800b864 <pvPortMalloc+0xf4>
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
 800b862:	e7fe      	b.n	800b862 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b876:	69b8      	ldr	r0, [r7, #24]
 800b878:	f000 f8f6 	bl	800ba68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b87c:	4b1a      	ldr	r3, [pc, #104]	; (800b8e8 <pvPortMalloc+0x178>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	4a18      	ldr	r2, [pc, #96]	; (800b8e8 <pvPortMalloc+0x178>)
 800b888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b88a:	4b17      	ldr	r3, [pc, #92]	; (800b8e8 <pvPortMalloc+0x178>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <pvPortMalloc+0x180>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d203      	bcs.n	800b89e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b896:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <pvPortMalloc+0x178>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a15      	ldr	r2, [pc, #84]	; (800b8f0 <pvPortMalloc+0x180>)
 800b89c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	4b10      	ldr	r3, [pc, #64]	; (800b8e4 <pvPortMalloc+0x174>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	431a      	orrs	r2, r3
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8b2:	f7fe fc3b 	bl	800a12c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d009      	beq.n	800b8d4 <pvPortMalloc+0x164>
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	e7fe      	b.n	800b8d2 <pvPortMalloc+0x162>
	return pvReturn;
 800b8d4:	69fb      	ldr	r3, [r7, #28]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3728      	adds	r7, #40	; 0x28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	200027b4 	.word	0x200027b4
 800b8e4:	200027c0 	.word	0x200027c0
 800b8e8:	200027b8 	.word	0x200027b8
 800b8ec:	200027ac 	.word	0x200027ac
 800b8f0:	200027bc 	.word	0x200027bc

0800b8f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d046      	beq.n	800b994 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b906:	2308      	movs	r3, #8
 800b908:	425b      	negs	r3, r3
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4413      	add	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	4b20      	ldr	r3, [pc, #128]	; (800b99c <vPortFree+0xa8>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4013      	ands	r3, r2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d109      	bne.n	800b936 <vPortFree+0x42>
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	e7fe      	b.n	800b934 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d009      	beq.n	800b952 <vPortFree+0x5e>
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	60bb      	str	r3, [r7, #8]
 800b950:	e7fe      	b.n	800b950 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <vPortFree+0xa8>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4013      	ands	r3, r2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d019      	beq.n	800b994 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d115      	bne.n	800b994 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b0b      	ldr	r3, [pc, #44]	; (800b99c <vPortFree+0xa8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	43db      	mvns	r3, r3
 800b972:	401a      	ands	r2, r3
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b978:	f7fe fbca 	bl	800a110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <vPortFree+0xac>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4413      	add	r3, r2
 800b986:	4a06      	ldr	r2, [pc, #24]	; (800b9a0 <vPortFree+0xac>)
 800b988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b98a:	6938      	ldr	r0, [r7, #16]
 800b98c:	f000 f86c 	bl	800ba68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b990:	f7fe fbcc 	bl	800a12c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b994:	bf00      	nop
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	200027c0 	.word	0x200027c0
 800b9a0:	200027b8 	.word	0x200027b8

0800b9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9aa:	f241 7370 	movw	r3, #6000	; 0x1770
 800b9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9b0:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <prvHeapInit+0xac>)
 800b9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00c      	beq.n	800b9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3307      	adds	r3, #7
 800b9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <prvHeapInit+0xac>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ba54 <prvHeapInit+0xb0>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <prvHeapInit+0xb0>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0307 	bic.w	r3, r3, #7
 800b9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <prvHeapInit+0xb4>)
 800ba04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <prvHeapInit+0xb4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvHeapInit+0xb4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba24:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <prvHeapInit+0xb4>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	4a0a      	ldr	r2, [pc, #40]	; (800ba5c <prvHeapInit+0xb8>)
 800ba32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <prvHeapInit+0xbc>)
 800ba3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <prvHeapInit+0xc0>)
 800ba3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba42:	601a      	str	r2, [r3, #0]
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	2000103c 	.word	0x2000103c
 800ba54:	200027ac 	.word	0x200027ac
 800ba58:	200027b4 	.word	0x200027b4
 800ba5c:	200027bc 	.word	0x200027bc
 800ba60:	200027b8 	.word	0x200027b8
 800ba64:	200027c0 	.word	0x200027c0

0800ba68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba70:	4b28      	ldr	r3, [pc, #160]	; (800bb14 <prvInsertBlockIntoFreeList+0xac>)
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e002      	b.n	800ba7c <prvInsertBlockIntoFreeList+0x14>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d8f7      	bhi.n	800ba76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	4413      	add	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d108      	bne.n	800baaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	441a      	add	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	441a      	add	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d118      	bne.n	800baf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d00d      	beq.n	800bae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	441a      	add	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	e008      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bae6:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e003      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d002      	beq.n	800bb06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb06:	bf00      	nop
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	200027ac 	.word	0x200027ac
 800bb18:	200027b4 	.word	0x200027b4

0800bb1c <atoi>:
 800bb1c:	220a      	movs	r2, #10
 800bb1e:	2100      	movs	r1, #0
 800bb20:	f000 ba1c 	b.w	800bf5c <strtol>

0800bb24 <__errno>:
 800bb24:	4b01      	ldr	r3, [pc, #4]	; (800bb2c <__errno+0x8>)
 800bb26:	6818      	ldr	r0, [r3, #0]
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	20000028 	.word	0x20000028

0800bb30 <__libc_init_array>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4e0d      	ldr	r6, [pc, #52]	; (800bb68 <__libc_init_array+0x38>)
 800bb34:	4c0d      	ldr	r4, [pc, #52]	; (800bb6c <__libc_init_array+0x3c>)
 800bb36:	1ba4      	subs	r4, r4, r6
 800bb38:	10a4      	asrs	r4, r4, #2
 800bb3a:	2500      	movs	r5, #0
 800bb3c:	42a5      	cmp	r5, r4
 800bb3e:	d109      	bne.n	800bb54 <__libc_init_array+0x24>
 800bb40:	4e0b      	ldr	r6, [pc, #44]	; (800bb70 <__libc_init_array+0x40>)
 800bb42:	4c0c      	ldr	r4, [pc, #48]	; (800bb74 <__libc_init_array+0x44>)
 800bb44:	f001 faea 	bl	800d11c <_init>
 800bb48:	1ba4      	subs	r4, r4, r6
 800bb4a:	10a4      	asrs	r4, r4, #2
 800bb4c:	2500      	movs	r5, #0
 800bb4e:	42a5      	cmp	r5, r4
 800bb50:	d105      	bne.n	800bb5e <__libc_init_array+0x2e>
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb58:	4798      	blx	r3
 800bb5a:	3501      	adds	r5, #1
 800bb5c:	e7ee      	b.n	800bb3c <__libc_init_array+0xc>
 800bb5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb62:	4798      	blx	r3
 800bb64:	3501      	adds	r5, #1
 800bb66:	e7f2      	b.n	800bb4e <__libc_init_array+0x1e>
 800bb68:	0800de10 	.word	0x0800de10
 800bb6c:	0800de10 	.word	0x0800de10
 800bb70:	0800de10 	.word	0x0800de10
 800bb74:	0800de14 	.word	0x0800de14

0800bb78 <memcmp>:
 800bb78:	b530      	push	{r4, r5, lr}
 800bb7a:	2400      	movs	r4, #0
 800bb7c:	42a2      	cmp	r2, r4
 800bb7e:	d101      	bne.n	800bb84 <memcmp+0xc>
 800bb80:	2000      	movs	r0, #0
 800bb82:	e007      	b.n	800bb94 <memcmp+0x1c>
 800bb84:	5d03      	ldrb	r3, [r0, r4]
 800bb86:	3401      	adds	r4, #1
 800bb88:	190d      	adds	r5, r1, r4
 800bb8a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800bb8e:	42ab      	cmp	r3, r5
 800bb90:	d0f4      	beq.n	800bb7c <memcmp+0x4>
 800bb92:	1b58      	subs	r0, r3, r5
 800bb94:	bd30      	pop	{r4, r5, pc}

0800bb96 <memcpy>:
 800bb96:	b510      	push	{r4, lr}
 800bb98:	1e43      	subs	r3, r0, #1
 800bb9a:	440a      	add	r2, r1
 800bb9c:	4291      	cmp	r1, r2
 800bb9e:	d100      	bne.n	800bba2 <memcpy+0xc>
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbaa:	e7f7      	b.n	800bb9c <memcpy+0x6>

0800bbac <memset>:
 800bbac:	4402      	add	r2, r0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d100      	bne.n	800bbb6 <memset+0xa>
 800bbb4:	4770      	bx	lr
 800bbb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbba:	e7f9      	b.n	800bbb0 <memset+0x4>

0800bbbc <iprintf>:
 800bbbc:	b40f      	push	{r0, r1, r2, r3}
 800bbbe:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <iprintf+0x2c>)
 800bbc0:	b513      	push	{r0, r1, r4, lr}
 800bbc2:	681c      	ldr	r4, [r3, #0]
 800bbc4:	b124      	cbz	r4, 800bbd0 <iprintf+0x14>
 800bbc6:	69a3      	ldr	r3, [r4, #24]
 800bbc8:	b913      	cbnz	r3, 800bbd0 <iprintf+0x14>
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f000 fb8c 	bl	800c2e8 <__sinit>
 800bbd0:	ab05      	add	r3, sp, #20
 800bbd2:	9a04      	ldr	r2, [sp, #16]
 800bbd4:	68a1      	ldr	r1, [r4, #8]
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f000 feb5 	bl	800c948 <_vfiprintf_r>
 800bbde:	b002      	add	sp, #8
 800bbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe4:	b004      	add	sp, #16
 800bbe6:	4770      	bx	lr
 800bbe8:	20000028 	.word	0x20000028

0800bbec <_puts_r>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	460e      	mov	r6, r1
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	b118      	cbz	r0, 800bbfc <_puts_r+0x10>
 800bbf4:	6983      	ldr	r3, [r0, #24]
 800bbf6:	b90b      	cbnz	r3, 800bbfc <_puts_r+0x10>
 800bbf8:	f000 fb76 	bl	800c2e8 <__sinit>
 800bbfc:	69ab      	ldr	r3, [r5, #24]
 800bbfe:	68ac      	ldr	r4, [r5, #8]
 800bc00:	b913      	cbnz	r3, 800bc08 <_puts_r+0x1c>
 800bc02:	4628      	mov	r0, r5
 800bc04:	f000 fb70 	bl	800c2e8 <__sinit>
 800bc08:	4b23      	ldr	r3, [pc, #140]	; (800bc98 <_puts_r+0xac>)
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	d117      	bne.n	800bc3e <_puts_r+0x52>
 800bc0e:	686c      	ldr	r4, [r5, #4]
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	071b      	lsls	r3, r3, #28
 800bc14:	d51d      	bpl.n	800bc52 <_puts_r+0x66>
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	b1db      	cbz	r3, 800bc52 <_puts_r+0x66>
 800bc1a:	3e01      	subs	r6, #1
 800bc1c:	68a3      	ldr	r3, [r4, #8]
 800bc1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc22:	3b01      	subs	r3, #1
 800bc24:	60a3      	str	r3, [r4, #8]
 800bc26:	b9e9      	cbnz	r1, 800bc64 <_puts_r+0x78>
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	da2e      	bge.n	800bc8a <_puts_r+0x9e>
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	210a      	movs	r1, #10
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 f9a9 	bl	800bf88 <__swbuf_r>
 800bc36:	3001      	adds	r0, #1
 800bc38:	d011      	beq.n	800bc5e <_puts_r+0x72>
 800bc3a:	200a      	movs	r0, #10
 800bc3c:	e011      	b.n	800bc62 <_puts_r+0x76>
 800bc3e:	4b17      	ldr	r3, [pc, #92]	; (800bc9c <_puts_r+0xb0>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d101      	bne.n	800bc48 <_puts_r+0x5c>
 800bc44:	68ac      	ldr	r4, [r5, #8]
 800bc46:	e7e3      	b.n	800bc10 <_puts_r+0x24>
 800bc48:	4b15      	ldr	r3, [pc, #84]	; (800bca0 <_puts_r+0xb4>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	bf08      	it	eq
 800bc4e:	68ec      	ldreq	r4, [r5, #12]
 800bc50:	e7de      	b.n	800bc10 <_puts_r+0x24>
 800bc52:	4621      	mov	r1, r4
 800bc54:	4628      	mov	r0, r5
 800bc56:	f000 f9e9 	bl	800c02c <__swsetup_r>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d0dd      	beq.n	800bc1a <_puts_r+0x2e>
 800bc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	da04      	bge.n	800bc72 <_puts_r+0x86>
 800bc68:	69a2      	ldr	r2, [r4, #24]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	dc06      	bgt.n	800bc7c <_puts_r+0x90>
 800bc6e:	290a      	cmp	r1, #10
 800bc70:	d004      	beq.n	800bc7c <_puts_r+0x90>
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	7019      	strb	r1, [r3, #0]
 800bc7a:	e7cf      	b.n	800bc1c <_puts_r+0x30>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f982 	bl	800bf88 <__swbuf_r>
 800bc84:	3001      	adds	r0, #1
 800bc86:	d1c9      	bne.n	800bc1c <_puts_r+0x30>
 800bc88:	e7e9      	b.n	800bc5e <_puts_r+0x72>
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	200a      	movs	r0, #10
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	7018      	strb	r0, [r3, #0]
 800bc94:	e7e5      	b.n	800bc62 <_puts_r+0x76>
 800bc96:	bf00      	nop
 800bc98:	0800dc88 	.word	0x0800dc88
 800bc9c:	0800dca8 	.word	0x0800dca8
 800bca0:	0800dc68 	.word	0x0800dc68

0800bca4 <puts>:
 800bca4:	4b02      	ldr	r3, [pc, #8]	; (800bcb0 <puts+0xc>)
 800bca6:	4601      	mov	r1, r0
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	f7ff bf9f 	b.w	800bbec <_puts_r>
 800bcae:	bf00      	nop
 800bcb0:	20000028 	.word	0x20000028

0800bcb4 <sniprintf>:
 800bcb4:	b40c      	push	{r2, r3}
 800bcb6:	b530      	push	{r4, r5, lr}
 800bcb8:	4b17      	ldr	r3, [pc, #92]	; (800bd18 <sniprintf+0x64>)
 800bcba:	1e0c      	subs	r4, r1, #0
 800bcbc:	b09d      	sub	sp, #116	; 0x74
 800bcbe:	681d      	ldr	r5, [r3, #0]
 800bcc0:	da08      	bge.n	800bcd4 <sniprintf+0x20>
 800bcc2:	238b      	movs	r3, #139	; 0x8b
 800bcc4:	602b      	str	r3, [r5, #0]
 800bcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcca:	b01d      	add	sp, #116	; 0x74
 800bccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcd0:	b002      	add	sp, #8
 800bcd2:	4770      	bx	lr
 800bcd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bcd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcdc:	bf14      	ite	ne
 800bcde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bce2:	4623      	moveq	r3, r4
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	9307      	str	r3, [sp, #28]
 800bce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcec:	9002      	str	r0, [sp, #8]
 800bcee:	9006      	str	r0, [sp, #24]
 800bcf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcf6:	ab21      	add	r3, sp, #132	; 0x84
 800bcf8:	a902      	add	r1, sp, #8
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	f000 fd01 	bl	800c704 <_svfiprintf_r>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	bfbc      	itt	lt
 800bd06:	238b      	movlt	r3, #139	; 0x8b
 800bd08:	602b      	strlt	r3, [r5, #0]
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	d0dd      	beq.n	800bcca <sniprintf+0x16>
 800bd0e:	9b02      	ldr	r3, [sp, #8]
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
 800bd14:	e7d9      	b.n	800bcca <sniprintf+0x16>
 800bd16:	bf00      	nop
 800bd18:	20000028 	.word	0x20000028

0800bd1c <siprintf>:
 800bd1c:	b40e      	push	{r1, r2, r3}
 800bd1e:	b500      	push	{lr}
 800bd20:	b09c      	sub	sp, #112	; 0x70
 800bd22:	ab1d      	add	r3, sp, #116	; 0x74
 800bd24:	9002      	str	r0, [sp, #8]
 800bd26:	9006      	str	r0, [sp, #24]
 800bd28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd2c:	4809      	ldr	r0, [pc, #36]	; (800bd54 <siprintf+0x38>)
 800bd2e:	9107      	str	r1, [sp, #28]
 800bd30:	9104      	str	r1, [sp, #16]
 800bd32:	4909      	ldr	r1, [pc, #36]	; (800bd58 <siprintf+0x3c>)
 800bd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	6800      	ldr	r0, [r0, #0]
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	a902      	add	r1, sp, #8
 800bd40:	f000 fce0 	bl	800c704 <_svfiprintf_r>
 800bd44:	9b02      	ldr	r3, [sp, #8]
 800bd46:	2200      	movs	r2, #0
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	b01c      	add	sp, #112	; 0x70
 800bd4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd50:	b003      	add	sp, #12
 800bd52:	4770      	bx	lr
 800bd54:	20000028 	.word	0x20000028
 800bd58:	ffff0208 	.word	0xffff0208

0800bd5c <strncpy>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	3901      	subs	r1, #1
 800bd60:	4604      	mov	r4, r0
 800bd62:	b902      	cbnz	r2, 800bd66 <strncpy+0xa>
 800bd64:	bd70      	pop	{r4, r5, r6, pc}
 800bd66:	4623      	mov	r3, r4
 800bd68:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bd6c:	f803 5b01 	strb.w	r5, [r3], #1
 800bd70:	1e56      	subs	r6, r2, #1
 800bd72:	b92d      	cbnz	r5, 800bd80 <strncpy+0x24>
 800bd74:	4414      	add	r4, r2
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	d0f4      	beq.n	800bd64 <strncpy+0x8>
 800bd7a:	f803 5b01 	strb.w	r5, [r3], #1
 800bd7e:	e7fa      	b.n	800bd76 <strncpy+0x1a>
 800bd80:	461c      	mov	r4, r3
 800bd82:	4632      	mov	r2, r6
 800bd84:	e7ed      	b.n	800bd62 <strncpy+0x6>

0800bd86 <strstr>:
 800bd86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd88:	7803      	ldrb	r3, [r0, #0]
 800bd8a:	b17b      	cbz	r3, 800bdac <strstr+0x26>
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	7823      	ldrb	r3, [r4, #0]
 800bd90:	4620      	mov	r0, r4
 800bd92:	1c66      	adds	r6, r4, #1
 800bd94:	b17b      	cbz	r3, 800bdb6 <strstr+0x30>
 800bd96:	1e4a      	subs	r2, r1, #1
 800bd98:	1e63      	subs	r3, r4, #1
 800bd9a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800bd9e:	b14d      	cbz	r5, 800bdb4 <strstr+0x2e>
 800bda0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bda4:	42af      	cmp	r7, r5
 800bda6:	4634      	mov	r4, r6
 800bda8:	d0f7      	beq.n	800bd9a <strstr+0x14>
 800bdaa:	e7f0      	b.n	800bd8e <strstr+0x8>
 800bdac:	780b      	ldrb	r3, [r1, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	bf18      	it	ne
 800bdb2:	2000      	movne	r0, #0
 800bdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	e7fc      	b.n	800bdb4 <strstr+0x2e>
	...

0800bdbc <strtok>:
 800bdbc:	4b13      	ldr	r3, [pc, #76]	; (800be0c <strtok+0x50>)
 800bdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc2:	681d      	ldr	r5, [r3, #0]
 800bdc4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	460f      	mov	r7, r1
 800bdca:	b9b4      	cbnz	r4, 800bdfa <strtok+0x3e>
 800bdcc:	2050      	movs	r0, #80	; 0x50
 800bdce:	f000 fb7d 	bl	800c4cc <malloc>
 800bdd2:	65a8      	str	r0, [r5, #88]	; 0x58
 800bdd4:	e9c0 4400 	strd	r4, r4, [r0]
 800bdd8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bddc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bde0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bde4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bde8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bdec:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bdf0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bdf4:	6184      	str	r4, [r0, #24]
 800bdf6:	7704      	strb	r4, [r0, #28]
 800bdf8:	6244      	str	r4, [r0, #36]	; 0x24
 800bdfa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	4630      	mov	r0, r6
 800be00:	2301      	movs	r3, #1
 800be02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be06:	f000 b803 	b.w	800be10 <__strtok_r>
 800be0a:	bf00      	nop
 800be0c:	20000028 	.word	0x20000028

0800be10 <__strtok_r>:
 800be10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be12:	b918      	cbnz	r0, 800be1c <__strtok_r+0xc>
 800be14:	6810      	ldr	r0, [r2, #0]
 800be16:	b908      	cbnz	r0, 800be1c <__strtok_r+0xc>
 800be18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1a:	4620      	mov	r0, r4
 800be1c:	4604      	mov	r4, r0
 800be1e:	460f      	mov	r7, r1
 800be20:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be24:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be28:	b91e      	cbnz	r6, 800be32 <__strtok_r+0x22>
 800be2a:	b96d      	cbnz	r5, 800be48 <__strtok_r+0x38>
 800be2c:	6015      	str	r5, [r2, #0]
 800be2e:	4628      	mov	r0, r5
 800be30:	e7f2      	b.n	800be18 <__strtok_r+0x8>
 800be32:	42b5      	cmp	r5, r6
 800be34:	d1f6      	bne.n	800be24 <__strtok_r+0x14>
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1ef      	bne.n	800be1a <__strtok_r+0xa>
 800be3a:	6014      	str	r4, [r2, #0]
 800be3c:	7003      	strb	r3, [r0, #0]
 800be3e:	e7eb      	b.n	800be18 <__strtok_r+0x8>
 800be40:	462b      	mov	r3, r5
 800be42:	e00d      	b.n	800be60 <__strtok_r+0x50>
 800be44:	b926      	cbnz	r6, 800be50 <__strtok_r+0x40>
 800be46:	461c      	mov	r4, r3
 800be48:	4623      	mov	r3, r4
 800be4a:	460f      	mov	r7, r1
 800be4c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800be50:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be54:	42b5      	cmp	r5, r6
 800be56:	d1f5      	bne.n	800be44 <__strtok_r+0x34>
 800be58:	2d00      	cmp	r5, #0
 800be5a:	d0f1      	beq.n	800be40 <__strtok_r+0x30>
 800be5c:	2100      	movs	r1, #0
 800be5e:	7021      	strb	r1, [r4, #0]
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	e7d9      	b.n	800be18 <__strtok_r+0x8>

0800be64 <_strtol_l.isra.0>:
 800be64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be68:	4680      	mov	r8, r0
 800be6a:	4689      	mov	r9, r1
 800be6c:	4692      	mov	sl, r2
 800be6e:	461e      	mov	r6, r3
 800be70:	460f      	mov	r7, r1
 800be72:	463d      	mov	r5, r7
 800be74:	9808      	ldr	r0, [sp, #32]
 800be76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be7a:	f000 fabf 	bl	800c3fc <__locale_ctype_ptr_l>
 800be7e:	4420      	add	r0, r4
 800be80:	7843      	ldrb	r3, [r0, #1]
 800be82:	f013 0308 	ands.w	r3, r3, #8
 800be86:	d132      	bne.n	800beee <_strtol_l.isra.0+0x8a>
 800be88:	2c2d      	cmp	r4, #45	; 0x2d
 800be8a:	d132      	bne.n	800bef2 <_strtol_l.isra.0+0x8e>
 800be8c:	787c      	ldrb	r4, [r7, #1]
 800be8e:	1cbd      	adds	r5, r7, #2
 800be90:	2201      	movs	r2, #1
 800be92:	2e00      	cmp	r6, #0
 800be94:	d05d      	beq.n	800bf52 <_strtol_l.isra.0+0xee>
 800be96:	2e10      	cmp	r6, #16
 800be98:	d109      	bne.n	800beae <_strtol_l.isra.0+0x4a>
 800be9a:	2c30      	cmp	r4, #48	; 0x30
 800be9c:	d107      	bne.n	800beae <_strtol_l.isra.0+0x4a>
 800be9e:	782b      	ldrb	r3, [r5, #0]
 800bea0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bea4:	2b58      	cmp	r3, #88	; 0x58
 800bea6:	d14f      	bne.n	800bf48 <_strtol_l.isra.0+0xe4>
 800bea8:	786c      	ldrb	r4, [r5, #1]
 800beaa:	2610      	movs	r6, #16
 800beac:	3502      	adds	r5, #2
 800beae:	2a00      	cmp	r2, #0
 800beb0:	bf14      	ite	ne
 800beb2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800beb6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800beba:	2700      	movs	r7, #0
 800bebc:	fbb1 fcf6 	udiv	ip, r1, r6
 800bec0:	4638      	mov	r0, r7
 800bec2:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bec6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800beca:	2b09      	cmp	r3, #9
 800becc:	d817      	bhi.n	800befe <_strtol_l.isra.0+0x9a>
 800bece:	461c      	mov	r4, r3
 800bed0:	42a6      	cmp	r6, r4
 800bed2:	dd23      	ble.n	800bf1c <_strtol_l.isra.0+0xb8>
 800bed4:	1c7b      	adds	r3, r7, #1
 800bed6:	d007      	beq.n	800bee8 <_strtol_l.isra.0+0x84>
 800bed8:	4584      	cmp	ip, r0
 800beda:	d31c      	bcc.n	800bf16 <_strtol_l.isra.0+0xb2>
 800bedc:	d101      	bne.n	800bee2 <_strtol_l.isra.0+0x7e>
 800bede:	45a6      	cmp	lr, r4
 800bee0:	db19      	blt.n	800bf16 <_strtol_l.isra.0+0xb2>
 800bee2:	fb00 4006 	mla	r0, r0, r6, r4
 800bee6:	2701      	movs	r7, #1
 800bee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beec:	e7eb      	b.n	800bec6 <_strtol_l.isra.0+0x62>
 800beee:	462f      	mov	r7, r5
 800bef0:	e7bf      	b.n	800be72 <_strtol_l.isra.0+0xe>
 800bef2:	2c2b      	cmp	r4, #43	; 0x2b
 800bef4:	bf04      	itt	eq
 800bef6:	1cbd      	addeq	r5, r7, #2
 800bef8:	787c      	ldrbeq	r4, [r7, #1]
 800befa:	461a      	mov	r2, r3
 800befc:	e7c9      	b.n	800be92 <_strtol_l.isra.0+0x2e>
 800befe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bf02:	2b19      	cmp	r3, #25
 800bf04:	d801      	bhi.n	800bf0a <_strtol_l.isra.0+0xa6>
 800bf06:	3c37      	subs	r4, #55	; 0x37
 800bf08:	e7e2      	b.n	800bed0 <_strtol_l.isra.0+0x6c>
 800bf0a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bf0e:	2b19      	cmp	r3, #25
 800bf10:	d804      	bhi.n	800bf1c <_strtol_l.isra.0+0xb8>
 800bf12:	3c57      	subs	r4, #87	; 0x57
 800bf14:	e7dc      	b.n	800bed0 <_strtol_l.isra.0+0x6c>
 800bf16:	f04f 37ff 	mov.w	r7, #4294967295
 800bf1a:	e7e5      	b.n	800bee8 <_strtol_l.isra.0+0x84>
 800bf1c:	1c7b      	adds	r3, r7, #1
 800bf1e:	d108      	bne.n	800bf32 <_strtol_l.isra.0+0xce>
 800bf20:	2322      	movs	r3, #34	; 0x22
 800bf22:	f8c8 3000 	str.w	r3, [r8]
 800bf26:	4608      	mov	r0, r1
 800bf28:	f1ba 0f00 	cmp.w	sl, #0
 800bf2c:	d107      	bne.n	800bf3e <_strtol_l.isra.0+0xda>
 800bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf32:	b102      	cbz	r2, 800bf36 <_strtol_l.isra.0+0xd2>
 800bf34:	4240      	negs	r0, r0
 800bf36:	f1ba 0f00 	cmp.w	sl, #0
 800bf3a:	d0f8      	beq.n	800bf2e <_strtol_l.isra.0+0xca>
 800bf3c:	b10f      	cbz	r7, 800bf42 <_strtol_l.isra.0+0xde>
 800bf3e:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf42:	f8ca 9000 	str.w	r9, [sl]
 800bf46:	e7f2      	b.n	800bf2e <_strtol_l.isra.0+0xca>
 800bf48:	2430      	movs	r4, #48	; 0x30
 800bf4a:	2e00      	cmp	r6, #0
 800bf4c:	d1af      	bne.n	800beae <_strtol_l.isra.0+0x4a>
 800bf4e:	2608      	movs	r6, #8
 800bf50:	e7ad      	b.n	800beae <_strtol_l.isra.0+0x4a>
 800bf52:	2c30      	cmp	r4, #48	; 0x30
 800bf54:	d0a3      	beq.n	800be9e <_strtol_l.isra.0+0x3a>
 800bf56:	260a      	movs	r6, #10
 800bf58:	e7a9      	b.n	800beae <_strtol_l.isra.0+0x4a>
	...

0800bf5c <strtol>:
 800bf5c:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <strtol+0x24>)
 800bf5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf60:	681c      	ldr	r4, [r3, #0]
 800bf62:	4d08      	ldr	r5, [pc, #32]	; (800bf84 <strtol+0x28>)
 800bf64:	6a23      	ldr	r3, [r4, #32]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	bf08      	it	eq
 800bf6a:	462b      	moveq	r3, r5
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	460a      	mov	r2, r1
 800bf72:	4601      	mov	r1, r0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7ff ff75 	bl	800be64 <_strtol_l.isra.0>
 800bf7a:	b003      	add	sp, #12
 800bf7c:	bd30      	pop	{r4, r5, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000028 	.word	0x20000028
 800bf84:	2000008c 	.word	0x2000008c

0800bf88 <__swbuf_r>:
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8a:	460e      	mov	r6, r1
 800bf8c:	4614      	mov	r4, r2
 800bf8e:	4605      	mov	r5, r0
 800bf90:	b118      	cbz	r0, 800bf9a <__swbuf_r+0x12>
 800bf92:	6983      	ldr	r3, [r0, #24]
 800bf94:	b90b      	cbnz	r3, 800bf9a <__swbuf_r+0x12>
 800bf96:	f000 f9a7 	bl	800c2e8 <__sinit>
 800bf9a:	4b21      	ldr	r3, [pc, #132]	; (800c020 <__swbuf_r+0x98>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d12a      	bne.n	800bff6 <__swbuf_r+0x6e>
 800bfa0:	686c      	ldr	r4, [r5, #4]
 800bfa2:	69a3      	ldr	r3, [r4, #24]
 800bfa4:	60a3      	str	r3, [r4, #8]
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	071a      	lsls	r2, r3, #28
 800bfaa:	d52e      	bpl.n	800c00a <__swbuf_r+0x82>
 800bfac:	6923      	ldr	r3, [r4, #16]
 800bfae:	b363      	cbz	r3, 800c00a <__swbuf_r+0x82>
 800bfb0:	6923      	ldr	r3, [r4, #16]
 800bfb2:	6820      	ldr	r0, [r4, #0]
 800bfb4:	1ac0      	subs	r0, r0, r3
 800bfb6:	6963      	ldr	r3, [r4, #20]
 800bfb8:	b2f6      	uxtb	r6, r6
 800bfba:	4283      	cmp	r3, r0
 800bfbc:	4637      	mov	r7, r6
 800bfbe:	dc04      	bgt.n	800bfca <__swbuf_r+0x42>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f926 	bl	800c214 <_fflush_r>
 800bfc8:	bb28      	cbnz	r0, 800c016 <__swbuf_r+0x8e>
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	60a3      	str	r3, [r4, #8]
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	6022      	str	r2, [r4, #0]
 800bfd6:	701e      	strb	r6, [r3, #0]
 800bfd8:	6963      	ldr	r3, [r4, #20]
 800bfda:	3001      	adds	r0, #1
 800bfdc:	4283      	cmp	r3, r0
 800bfde:	d004      	beq.n	800bfea <__swbuf_r+0x62>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	07db      	lsls	r3, r3, #31
 800bfe4:	d519      	bpl.n	800c01a <__swbuf_r+0x92>
 800bfe6:	2e0a      	cmp	r6, #10
 800bfe8:	d117      	bne.n	800c01a <__swbuf_r+0x92>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4628      	mov	r0, r5
 800bfee:	f000 f911 	bl	800c214 <_fflush_r>
 800bff2:	b190      	cbz	r0, 800c01a <__swbuf_r+0x92>
 800bff4:	e00f      	b.n	800c016 <__swbuf_r+0x8e>
 800bff6:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <__swbuf_r+0x9c>)
 800bff8:	429c      	cmp	r4, r3
 800bffa:	d101      	bne.n	800c000 <__swbuf_r+0x78>
 800bffc:	68ac      	ldr	r4, [r5, #8]
 800bffe:	e7d0      	b.n	800bfa2 <__swbuf_r+0x1a>
 800c000:	4b09      	ldr	r3, [pc, #36]	; (800c028 <__swbuf_r+0xa0>)
 800c002:	429c      	cmp	r4, r3
 800c004:	bf08      	it	eq
 800c006:	68ec      	ldreq	r4, [r5, #12]
 800c008:	e7cb      	b.n	800bfa2 <__swbuf_r+0x1a>
 800c00a:	4621      	mov	r1, r4
 800c00c:	4628      	mov	r0, r5
 800c00e:	f000 f80d 	bl	800c02c <__swsetup_r>
 800c012:	2800      	cmp	r0, #0
 800c014:	d0cc      	beq.n	800bfb0 <__swbuf_r+0x28>
 800c016:	f04f 37ff 	mov.w	r7, #4294967295
 800c01a:	4638      	mov	r0, r7
 800c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c01e:	bf00      	nop
 800c020:	0800dc88 	.word	0x0800dc88
 800c024:	0800dca8 	.word	0x0800dca8
 800c028:	0800dc68 	.word	0x0800dc68

0800c02c <__swsetup_r>:
 800c02c:	4b32      	ldr	r3, [pc, #200]	; (800c0f8 <__swsetup_r+0xcc>)
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	681d      	ldr	r5, [r3, #0]
 800c032:	4606      	mov	r6, r0
 800c034:	460c      	mov	r4, r1
 800c036:	b125      	cbz	r5, 800c042 <__swsetup_r+0x16>
 800c038:	69ab      	ldr	r3, [r5, #24]
 800c03a:	b913      	cbnz	r3, 800c042 <__swsetup_r+0x16>
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 f953 	bl	800c2e8 <__sinit>
 800c042:	4b2e      	ldr	r3, [pc, #184]	; (800c0fc <__swsetup_r+0xd0>)
 800c044:	429c      	cmp	r4, r3
 800c046:	d10f      	bne.n	800c068 <__swsetup_r+0x3c>
 800c048:	686c      	ldr	r4, [r5, #4]
 800c04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c04e:	b29a      	uxth	r2, r3
 800c050:	0715      	lsls	r5, r2, #28
 800c052:	d42c      	bmi.n	800c0ae <__swsetup_r+0x82>
 800c054:	06d0      	lsls	r0, r2, #27
 800c056:	d411      	bmi.n	800c07c <__swsetup_r+0x50>
 800c058:	2209      	movs	r2, #9
 800c05a:	6032      	str	r2, [r6, #0]
 800c05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	e03e      	b.n	800c0e6 <__swsetup_r+0xba>
 800c068:	4b25      	ldr	r3, [pc, #148]	; (800c100 <__swsetup_r+0xd4>)
 800c06a:	429c      	cmp	r4, r3
 800c06c:	d101      	bne.n	800c072 <__swsetup_r+0x46>
 800c06e:	68ac      	ldr	r4, [r5, #8]
 800c070:	e7eb      	b.n	800c04a <__swsetup_r+0x1e>
 800c072:	4b24      	ldr	r3, [pc, #144]	; (800c104 <__swsetup_r+0xd8>)
 800c074:	429c      	cmp	r4, r3
 800c076:	bf08      	it	eq
 800c078:	68ec      	ldreq	r4, [r5, #12]
 800c07a:	e7e6      	b.n	800c04a <__swsetup_r+0x1e>
 800c07c:	0751      	lsls	r1, r2, #29
 800c07e:	d512      	bpl.n	800c0a6 <__swsetup_r+0x7a>
 800c080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c082:	b141      	cbz	r1, 800c096 <__swsetup_r+0x6a>
 800c084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c088:	4299      	cmp	r1, r3
 800c08a:	d002      	beq.n	800c092 <__swsetup_r+0x66>
 800c08c:	4630      	mov	r0, r6
 800c08e:	f000 fa37 	bl	800c500 <_free_r>
 800c092:	2300      	movs	r3, #0
 800c094:	6363      	str	r3, [r4, #52]	; 0x34
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	6063      	str	r3, [r4, #4]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f043 0308 	orr.w	r3, r3, #8
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	b94b      	cbnz	r3, 800c0c6 <__swsetup_r+0x9a>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0bc:	d003      	beq.n	800c0c6 <__swsetup_r+0x9a>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f000 f9c3 	bl	800c44c <__smakebuf_r>
 800c0c6:	89a2      	ldrh	r2, [r4, #12]
 800c0c8:	f012 0301 	ands.w	r3, r2, #1
 800c0cc:	d00c      	beq.n	800c0e8 <__swsetup_r+0xbc>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	60a3      	str	r3, [r4, #8]
 800c0d2:	6963      	ldr	r3, [r4, #20]
 800c0d4:	425b      	negs	r3, r3
 800c0d6:	61a3      	str	r3, [r4, #24]
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	b953      	cbnz	r3, 800c0f2 <__swsetup_r+0xc6>
 800c0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c0e4:	d1ba      	bne.n	800c05c <__swsetup_r+0x30>
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	0792      	lsls	r2, r2, #30
 800c0ea:	bf58      	it	pl
 800c0ec:	6963      	ldrpl	r3, [r4, #20]
 800c0ee:	60a3      	str	r3, [r4, #8]
 800c0f0:	e7f2      	b.n	800c0d8 <__swsetup_r+0xac>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e7f7      	b.n	800c0e6 <__swsetup_r+0xba>
 800c0f6:	bf00      	nop
 800c0f8:	20000028 	.word	0x20000028
 800c0fc:	0800dc88 	.word	0x0800dc88
 800c100:	0800dca8 	.word	0x0800dca8
 800c104:	0800dc68 	.word	0x0800dc68

0800c108 <__sflush_r>:
 800c108:	898a      	ldrh	r2, [r1, #12]
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	4605      	mov	r5, r0
 800c110:	0710      	lsls	r0, r2, #28
 800c112:	460c      	mov	r4, r1
 800c114:	d458      	bmi.n	800c1c8 <__sflush_r+0xc0>
 800c116:	684b      	ldr	r3, [r1, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dc05      	bgt.n	800c128 <__sflush_r+0x20>
 800c11c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dc02      	bgt.n	800c128 <__sflush_r+0x20>
 800c122:	2000      	movs	r0, #0
 800c124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	d0f9      	beq.n	800c122 <__sflush_r+0x1a>
 800c12e:	2300      	movs	r3, #0
 800c130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c134:	682f      	ldr	r7, [r5, #0]
 800c136:	6a21      	ldr	r1, [r4, #32]
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	d032      	beq.n	800c1a2 <__sflush_r+0x9a>
 800c13c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	075a      	lsls	r2, r3, #29
 800c142:	d505      	bpl.n	800c150 <__sflush_r+0x48>
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	1ac0      	subs	r0, r0, r3
 800c148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c14a:	b10b      	cbz	r3, 800c150 <__sflush_r+0x48>
 800c14c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c14e:	1ac0      	subs	r0, r0, r3
 800c150:	2300      	movs	r3, #0
 800c152:	4602      	mov	r2, r0
 800c154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c156:	6a21      	ldr	r1, [r4, #32]
 800c158:	4628      	mov	r0, r5
 800c15a:	47b0      	blx	r6
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	d106      	bne.n	800c170 <__sflush_r+0x68>
 800c162:	6829      	ldr	r1, [r5, #0]
 800c164:	291d      	cmp	r1, #29
 800c166:	d848      	bhi.n	800c1fa <__sflush_r+0xf2>
 800c168:	4a29      	ldr	r2, [pc, #164]	; (800c210 <__sflush_r+0x108>)
 800c16a:	40ca      	lsrs	r2, r1
 800c16c:	07d6      	lsls	r6, r2, #31
 800c16e:	d544      	bpl.n	800c1fa <__sflush_r+0xf2>
 800c170:	2200      	movs	r2, #0
 800c172:	6062      	str	r2, [r4, #4]
 800c174:	04d9      	lsls	r1, r3, #19
 800c176:	6922      	ldr	r2, [r4, #16]
 800c178:	6022      	str	r2, [r4, #0]
 800c17a:	d504      	bpl.n	800c186 <__sflush_r+0x7e>
 800c17c:	1c42      	adds	r2, r0, #1
 800c17e:	d101      	bne.n	800c184 <__sflush_r+0x7c>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b903      	cbnz	r3, 800c186 <__sflush_r+0x7e>
 800c184:	6560      	str	r0, [r4, #84]	; 0x54
 800c186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c188:	602f      	str	r7, [r5, #0]
 800c18a:	2900      	cmp	r1, #0
 800c18c:	d0c9      	beq.n	800c122 <__sflush_r+0x1a>
 800c18e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c192:	4299      	cmp	r1, r3
 800c194:	d002      	beq.n	800c19c <__sflush_r+0x94>
 800c196:	4628      	mov	r0, r5
 800c198:	f000 f9b2 	bl	800c500 <_free_r>
 800c19c:	2000      	movs	r0, #0
 800c19e:	6360      	str	r0, [r4, #52]	; 0x34
 800c1a0:	e7c0      	b.n	800c124 <__sflush_r+0x1c>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b0      	blx	r6
 800c1a8:	1c41      	adds	r1, r0, #1
 800c1aa:	d1c8      	bne.n	800c13e <__sflush_r+0x36>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0c5      	beq.n	800c13e <__sflush_r+0x36>
 800c1b2:	2b1d      	cmp	r3, #29
 800c1b4:	d001      	beq.n	800c1ba <__sflush_r+0xb2>
 800c1b6:	2b16      	cmp	r3, #22
 800c1b8:	d101      	bne.n	800c1be <__sflush_r+0xb6>
 800c1ba:	602f      	str	r7, [r5, #0]
 800c1bc:	e7b1      	b.n	800c122 <__sflush_r+0x1a>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c4:	81a3      	strh	r3, [r4, #12]
 800c1c6:	e7ad      	b.n	800c124 <__sflush_r+0x1c>
 800c1c8:	690f      	ldr	r7, [r1, #16]
 800c1ca:	2f00      	cmp	r7, #0
 800c1cc:	d0a9      	beq.n	800c122 <__sflush_r+0x1a>
 800c1ce:	0793      	lsls	r3, r2, #30
 800c1d0:	680e      	ldr	r6, [r1, #0]
 800c1d2:	bf08      	it	eq
 800c1d4:	694b      	ldreq	r3, [r1, #20]
 800c1d6:	600f      	str	r7, [r1, #0]
 800c1d8:	bf18      	it	ne
 800c1da:	2300      	movne	r3, #0
 800c1dc:	eba6 0807 	sub.w	r8, r6, r7
 800c1e0:	608b      	str	r3, [r1, #8]
 800c1e2:	f1b8 0f00 	cmp.w	r8, #0
 800c1e6:	dd9c      	ble.n	800c122 <__sflush_r+0x1a>
 800c1e8:	4643      	mov	r3, r8
 800c1ea:	463a      	mov	r2, r7
 800c1ec:	6a21      	ldr	r1, [r4, #32]
 800c1ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b0      	blx	r6
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	dc06      	bgt.n	800c206 <__sflush_r+0xfe>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	e78e      	b.n	800c124 <__sflush_r+0x1c>
 800c206:	4407      	add	r7, r0
 800c208:	eba8 0800 	sub.w	r8, r8, r0
 800c20c:	e7e9      	b.n	800c1e2 <__sflush_r+0xda>
 800c20e:	bf00      	nop
 800c210:	20400001 	.word	0x20400001

0800c214 <_fflush_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	690b      	ldr	r3, [r1, #16]
 800c218:	4605      	mov	r5, r0
 800c21a:	460c      	mov	r4, r1
 800c21c:	b1db      	cbz	r3, 800c256 <_fflush_r+0x42>
 800c21e:	b118      	cbz	r0, 800c228 <_fflush_r+0x14>
 800c220:	6983      	ldr	r3, [r0, #24]
 800c222:	b90b      	cbnz	r3, 800c228 <_fflush_r+0x14>
 800c224:	f000 f860 	bl	800c2e8 <__sinit>
 800c228:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <_fflush_r+0x48>)
 800c22a:	429c      	cmp	r4, r3
 800c22c:	d109      	bne.n	800c242 <_fflush_r+0x2e>
 800c22e:	686c      	ldr	r4, [r5, #4]
 800c230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c234:	b17b      	cbz	r3, 800c256 <_fflush_r+0x42>
 800c236:	4621      	mov	r1, r4
 800c238:	4628      	mov	r0, r5
 800c23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c23e:	f7ff bf63 	b.w	800c108 <__sflush_r>
 800c242:	4b07      	ldr	r3, [pc, #28]	; (800c260 <_fflush_r+0x4c>)
 800c244:	429c      	cmp	r4, r3
 800c246:	d101      	bne.n	800c24c <_fflush_r+0x38>
 800c248:	68ac      	ldr	r4, [r5, #8]
 800c24a:	e7f1      	b.n	800c230 <_fflush_r+0x1c>
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <_fflush_r+0x50>)
 800c24e:	429c      	cmp	r4, r3
 800c250:	bf08      	it	eq
 800c252:	68ec      	ldreq	r4, [r5, #12]
 800c254:	e7ec      	b.n	800c230 <_fflush_r+0x1c>
 800c256:	2000      	movs	r0, #0
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	bf00      	nop
 800c25c:	0800dc88 	.word	0x0800dc88
 800c260:	0800dca8 	.word	0x0800dca8
 800c264:	0800dc68 	.word	0x0800dc68

0800c268 <std>:
 800c268:	2300      	movs	r3, #0
 800c26a:	b510      	push	{r4, lr}
 800c26c:	4604      	mov	r4, r0
 800c26e:	e9c0 3300 	strd	r3, r3, [r0]
 800c272:	6083      	str	r3, [r0, #8]
 800c274:	8181      	strh	r1, [r0, #12]
 800c276:	6643      	str	r3, [r0, #100]	; 0x64
 800c278:	81c2      	strh	r2, [r0, #14]
 800c27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c27e:	6183      	str	r3, [r0, #24]
 800c280:	4619      	mov	r1, r3
 800c282:	2208      	movs	r2, #8
 800c284:	305c      	adds	r0, #92	; 0x5c
 800c286:	f7ff fc91 	bl	800bbac <memset>
 800c28a:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <std+0x38>)
 800c28c:	6263      	str	r3, [r4, #36]	; 0x24
 800c28e:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <std+0x3c>)
 800c290:	62a3      	str	r3, [r4, #40]	; 0x28
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <std+0x40>)
 800c294:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <std+0x44>)
 800c298:	6224      	str	r4, [r4, #32]
 800c29a:	6323      	str	r3, [r4, #48]	; 0x30
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800cea5 	.word	0x0800cea5
 800c2a4:	0800cec7 	.word	0x0800cec7
 800c2a8:	0800ceff 	.word	0x0800ceff
 800c2ac:	0800cf23 	.word	0x0800cf23

0800c2b0 <_cleanup_r>:
 800c2b0:	4901      	ldr	r1, [pc, #4]	; (800c2b8 <_cleanup_r+0x8>)
 800c2b2:	f000 b885 	b.w	800c3c0 <_fwalk_reent>
 800c2b6:	bf00      	nop
 800c2b8:	0800c215 	.word	0x0800c215

0800c2bc <__sfmoreglue>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	1e4a      	subs	r2, r1, #1
 800c2c0:	2568      	movs	r5, #104	; 0x68
 800c2c2:	4355      	muls	r5, r2
 800c2c4:	460e      	mov	r6, r1
 800c2c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2ca:	f000 f967 	bl	800c59c <_malloc_r>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	b140      	cbz	r0, 800c2e4 <__sfmoreglue+0x28>
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	e9c0 1600 	strd	r1, r6, [r0]
 800c2d8:	300c      	adds	r0, #12
 800c2da:	60a0      	str	r0, [r4, #8]
 800c2dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2e0:	f7ff fc64 	bl	800bbac <memset>
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	bd70      	pop	{r4, r5, r6, pc}

0800c2e8 <__sinit>:
 800c2e8:	6983      	ldr	r3, [r0, #24]
 800c2ea:	b510      	push	{r4, lr}
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	bb33      	cbnz	r3, 800c33e <__sinit+0x56>
 800c2f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c2f4:	6503      	str	r3, [r0, #80]	; 0x50
 800c2f6:	4b12      	ldr	r3, [pc, #72]	; (800c340 <__sinit+0x58>)
 800c2f8:	4a12      	ldr	r2, [pc, #72]	; (800c344 <__sinit+0x5c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6282      	str	r2, [r0, #40]	; 0x28
 800c2fe:	4298      	cmp	r0, r3
 800c300:	bf04      	itt	eq
 800c302:	2301      	moveq	r3, #1
 800c304:	6183      	streq	r3, [r0, #24]
 800c306:	f000 f81f 	bl	800c348 <__sfp>
 800c30a:	6060      	str	r0, [r4, #4]
 800c30c:	4620      	mov	r0, r4
 800c30e:	f000 f81b 	bl	800c348 <__sfp>
 800c312:	60a0      	str	r0, [r4, #8]
 800c314:	4620      	mov	r0, r4
 800c316:	f000 f817 	bl	800c348 <__sfp>
 800c31a:	2200      	movs	r2, #0
 800c31c:	60e0      	str	r0, [r4, #12]
 800c31e:	2104      	movs	r1, #4
 800c320:	6860      	ldr	r0, [r4, #4]
 800c322:	f7ff ffa1 	bl	800c268 <std>
 800c326:	2201      	movs	r2, #1
 800c328:	2109      	movs	r1, #9
 800c32a:	68a0      	ldr	r0, [r4, #8]
 800c32c:	f7ff ff9c 	bl	800c268 <std>
 800c330:	2202      	movs	r2, #2
 800c332:	2112      	movs	r1, #18
 800c334:	68e0      	ldr	r0, [r4, #12]
 800c336:	f7ff ff97 	bl	800c268 <std>
 800c33a:	2301      	movs	r3, #1
 800c33c:	61a3      	str	r3, [r4, #24]
 800c33e:	bd10      	pop	{r4, pc}
 800c340:	0800dc64 	.word	0x0800dc64
 800c344:	0800c2b1 	.word	0x0800c2b1

0800c348 <__sfp>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	4b1b      	ldr	r3, [pc, #108]	; (800c3b8 <__sfp+0x70>)
 800c34c:	681e      	ldr	r6, [r3, #0]
 800c34e:	69b3      	ldr	r3, [r6, #24]
 800c350:	4607      	mov	r7, r0
 800c352:	b913      	cbnz	r3, 800c35a <__sfp+0x12>
 800c354:	4630      	mov	r0, r6
 800c356:	f7ff ffc7 	bl	800c2e8 <__sinit>
 800c35a:	3648      	adds	r6, #72	; 0x48
 800c35c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c360:	3b01      	subs	r3, #1
 800c362:	d503      	bpl.n	800c36c <__sfp+0x24>
 800c364:	6833      	ldr	r3, [r6, #0]
 800c366:	b133      	cbz	r3, 800c376 <__sfp+0x2e>
 800c368:	6836      	ldr	r6, [r6, #0]
 800c36a:	e7f7      	b.n	800c35c <__sfp+0x14>
 800c36c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c370:	b16d      	cbz	r5, 800c38e <__sfp+0x46>
 800c372:	3468      	adds	r4, #104	; 0x68
 800c374:	e7f4      	b.n	800c360 <__sfp+0x18>
 800c376:	2104      	movs	r1, #4
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff ff9f 	bl	800c2bc <__sfmoreglue>
 800c37e:	6030      	str	r0, [r6, #0]
 800c380:	2800      	cmp	r0, #0
 800c382:	d1f1      	bne.n	800c368 <__sfp+0x20>
 800c384:	230c      	movs	r3, #12
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	4604      	mov	r4, r0
 800c38a:	4620      	mov	r0, r4
 800c38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <__sfp+0x74>)
 800c390:	6665      	str	r5, [r4, #100]	; 0x64
 800c392:	e9c4 5500 	strd	r5, r5, [r4]
 800c396:	60a5      	str	r5, [r4, #8]
 800c398:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c39c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c3a0:	2208      	movs	r2, #8
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3a8:	f7ff fc00 	bl	800bbac <memset>
 800c3ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3b4:	e7e9      	b.n	800c38a <__sfp+0x42>
 800c3b6:	bf00      	nop
 800c3b8:	0800dc64 	.word	0x0800dc64
 800c3bc:	ffff0001 	.word	0xffff0001

0800c3c0 <_fwalk_reent>:
 800c3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c4:	4680      	mov	r8, r0
 800c3c6:	4689      	mov	r9, r1
 800c3c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3cc:	2600      	movs	r6, #0
 800c3ce:	b914      	cbnz	r4, 800c3d6 <_fwalk_reent+0x16>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c3da:	3f01      	subs	r7, #1
 800c3dc:	d501      	bpl.n	800c3e2 <_fwalk_reent+0x22>
 800c3de:	6824      	ldr	r4, [r4, #0]
 800c3e0:	e7f5      	b.n	800c3ce <_fwalk_reent+0xe>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d907      	bls.n	800c3f8 <_fwalk_reent+0x38>
 800c3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	d003      	beq.n	800c3f8 <_fwalk_reent+0x38>
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	47c8      	blx	r9
 800c3f6:	4306      	orrs	r6, r0
 800c3f8:	3568      	adds	r5, #104	; 0x68
 800c3fa:	e7ee      	b.n	800c3da <_fwalk_reent+0x1a>

0800c3fc <__locale_ctype_ptr_l>:
 800c3fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c400:	4770      	bx	lr

0800c402 <__swhatbuf_r>:
 800c402:	b570      	push	{r4, r5, r6, lr}
 800c404:	460e      	mov	r6, r1
 800c406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40a:	2900      	cmp	r1, #0
 800c40c:	b096      	sub	sp, #88	; 0x58
 800c40e:	4614      	mov	r4, r2
 800c410:	461d      	mov	r5, r3
 800c412:	da07      	bge.n	800c424 <__swhatbuf_r+0x22>
 800c414:	2300      	movs	r3, #0
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	89b3      	ldrh	r3, [r6, #12]
 800c41a:	061a      	lsls	r2, r3, #24
 800c41c:	d410      	bmi.n	800c440 <__swhatbuf_r+0x3e>
 800c41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c422:	e00e      	b.n	800c442 <__swhatbuf_r+0x40>
 800c424:	466a      	mov	r2, sp
 800c426:	f000 fdaf 	bl	800cf88 <_fstat_r>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	dbf2      	blt.n	800c414 <__swhatbuf_r+0x12>
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c438:	425a      	negs	r2, r3
 800c43a:	415a      	adcs	r2, r3
 800c43c:	602a      	str	r2, [r5, #0]
 800c43e:	e7ee      	b.n	800c41e <__swhatbuf_r+0x1c>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	2000      	movs	r0, #0
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	b016      	add	sp, #88	; 0x58
 800c448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c44c <__smakebuf_r>:
 800c44c:	898b      	ldrh	r3, [r1, #12]
 800c44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c450:	079d      	lsls	r5, r3, #30
 800c452:	4606      	mov	r6, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d507      	bpl.n	800c468 <__smakebuf_r+0x1c>
 800c458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	6123      	str	r3, [r4, #16]
 800c460:	2301      	movs	r3, #1
 800c462:	6163      	str	r3, [r4, #20]
 800c464:	b002      	add	sp, #8
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	ab01      	add	r3, sp, #4
 800c46a:	466a      	mov	r2, sp
 800c46c:	f7ff ffc9 	bl	800c402 <__swhatbuf_r>
 800c470:	9900      	ldr	r1, [sp, #0]
 800c472:	4605      	mov	r5, r0
 800c474:	4630      	mov	r0, r6
 800c476:	f000 f891 	bl	800c59c <_malloc_r>
 800c47a:	b948      	cbnz	r0, 800c490 <__smakebuf_r+0x44>
 800c47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d4ef      	bmi.n	800c464 <__smakebuf_r+0x18>
 800c484:	f023 0303 	bic.w	r3, r3, #3
 800c488:	f043 0302 	orr.w	r3, r3, #2
 800c48c:	81a3      	strh	r3, [r4, #12]
 800c48e:	e7e3      	b.n	800c458 <__smakebuf_r+0xc>
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <__smakebuf_r+0x7c>)
 800c492:	62b3      	str	r3, [r6, #40]	; 0x28
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	6163      	str	r3, [r4, #20]
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	6120      	str	r0, [r4, #16]
 800c4a6:	b15b      	cbz	r3, 800c4c0 <__smakebuf_r+0x74>
 800c4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f000 fd7d 	bl	800cfac <_isatty_r>
 800c4b2:	b128      	cbz	r0, 800c4c0 <__smakebuf_r+0x74>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	f043 0301 	orr.w	r3, r3, #1
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	431d      	orrs	r5, r3
 800c4c4:	81a5      	strh	r5, [r4, #12]
 800c4c6:	e7cd      	b.n	800c464 <__smakebuf_r+0x18>
 800c4c8:	0800c2b1 	.word	0x0800c2b1

0800c4cc <malloc>:
 800c4cc:	4b02      	ldr	r3, [pc, #8]	; (800c4d8 <malloc+0xc>)
 800c4ce:	4601      	mov	r1, r0
 800c4d0:	6818      	ldr	r0, [r3, #0]
 800c4d2:	f000 b863 	b.w	800c59c <_malloc_r>
 800c4d6:	bf00      	nop
 800c4d8:	20000028 	.word	0x20000028

0800c4dc <__ascii_mbtowc>:
 800c4dc:	b082      	sub	sp, #8
 800c4de:	b901      	cbnz	r1, 800c4e2 <__ascii_mbtowc+0x6>
 800c4e0:	a901      	add	r1, sp, #4
 800c4e2:	b142      	cbz	r2, 800c4f6 <__ascii_mbtowc+0x1a>
 800c4e4:	b14b      	cbz	r3, 800c4fa <__ascii_mbtowc+0x1e>
 800c4e6:	7813      	ldrb	r3, [r2, #0]
 800c4e8:	600b      	str	r3, [r1, #0]
 800c4ea:	7812      	ldrb	r2, [r2, #0]
 800c4ec:	1c10      	adds	r0, r2, #0
 800c4ee:	bf18      	it	ne
 800c4f0:	2001      	movne	r0, #1
 800c4f2:	b002      	add	sp, #8
 800c4f4:	4770      	bx	lr
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	e7fb      	b.n	800c4f2 <__ascii_mbtowc+0x16>
 800c4fa:	f06f 0001 	mvn.w	r0, #1
 800c4fe:	e7f8      	b.n	800c4f2 <__ascii_mbtowc+0x16>

0800c500 <_free_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	2900      	cmp	r1, #0
 800c506:	d045      	beq.n	800c594 <_free_r+0x94>
 800c508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c50c:	1f0c      	subs	r4, r1, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfb8      	it	lt
 800c512:	18e4      	addlt	r4, r4, r3
 800c514:	f000 fd85 	bl	800d022 <__malloc_lock>
 800c518:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <_free_r+0x98>)
 800c51a:	6813      	ldr	r3, [r2, #0]
 800c51c:	4610      	mov	r0, r2
 800c51e:	b933      	cbnz	r3, 800c52e <_free_r+0x2e>
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	6014      	str	r4, [r2, #0]
 800c524:	4628      	mov	r0, r5
 800c526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c52a:	f000 bd7b 	b.w	800d024 <__malloc_unlock>
 800c52e:	42a3      	cmp	r3, r4
 800c530:	d90c      	bls.n	800c54c <_free_r+0x4c>
 800c532:	6821      	ldr	r1, [r4, #0]
 800c534:	1862      	adds	r2, r4, r1
 800c536:	4293      	cmp	r3, r2
 800c538:	bf04      	itt	eq
 800c53a:	681a      	ldreq	r2, [r3, #0]
 800c53c:	685b      	ldreq	r3, [r3, #4]
 800c53e:	6063      	str	r3, [r4, #4]
 800c540:	bf04      	itt	eq
 800c542:	1852      	addeq	r2, r2, r1
 800c544:	6022      	streq	r2, [r4, #0]
 800c546:	6004      	str	r4, [r0, #0]
 800c548:	e7ec      	b.n	800c524 <_free_r+0x24>
 800c54a:	4613      	mov	r3, r2
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	b10a      	cbz	r2, 800c554 <_free_r+0x54>
 800c550:	42a2      	cmp	r2, r4
 800c552:	d9fa      	bls.n	800c54a <_free_r+0x4a>
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	1858      	adds	r0, r3, r1
 800c558:	42a0      	cmp	r0, r4
 800c55a:	d10b      	bne.n	800c574 <_free_r+0x74>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	4401      	add	r1, r0
 800c560:	1858      	adds	r0, r3, r1
 800c562:	4282      	cmp	r2, r0
 800c564:	6019      	str	r1, [r3, #0]
 800c566:	d1dd      	bne.n	800c524 <_free_r+0x24>
 800c568:	6810      	ldr	r0, [r2, #0]
 800c56a:	6852      	ldr	r2, [r2, #4]
 800c56c:	605a      	str	r2, [r3, #4]
 800c56e:	4401      	add	r1, r0
 800c570:	6019      	str	r1, [r3, #0]
 800c572:	e7d7      	b.n	800c524 <_free_r+0x24>
 800c574:	d902      	bls.n	800c57c <_free_r+0x7c>
 800c576:	230c      	movs	r3, #12
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	e7d3      	b.n	800c524 <_free_r+0x24>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	1821      	adds	r1, r4, r0
 800c580:	428a      	cmp	r2, r1
 800c582:	bf04      	itt	eq
 800c584:	6811      	ldreq	r1, [r2, #0]
 800c586:	6852      	ldreq	r2, [r2, #4]
 800c588:	6062      	str	r2, [r4, #4]
 800c58a:	bf04      	itt	eq
 800c58c:	1809      	addeq	r1, r1, r0
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	605c      	str	r4, [r3, #4]
 800c592:	e7c7      	b.n	800c524 <_free_r+0x24>
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	200027c4 	.word	0x200027c4

0800c59c <_malloc_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	1ccd      	adds	r5, r1, #3
 800c5a0:	f025 0503 	bic.w	r5, r5, #3
 800c5a4:	3508      	adds	r5, #8
 800c5a6:	2d0c      	cmp	r5, #12
 800c5a8:	bf38      	it	cc
 800c5aa:	250c      	movcc	r5, #12
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	db01      	blt.n	800c5b6 <_malloc_r+0x1a>
 800c5b2:	42a9      	cmp	r1, r5
 800c5b4:	d903      	bls.n	800c5be <_malloc_r+0x22>
 800c5b6:	230c      	movs	r3, #12
 800c5b8:	6033      	str	r3, [r6, #0]
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	f000 fd30 	bl	800d022 <__malloc_lock>
 800c5c2:	4a21      	ldr	r2, [pc, #132]	; (800c648 <_malloc_r+0xac>)
 800c5c4:	6814      	ldr	r4, [r2, #0]
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	b991      	cbnz	r1, 800c5f0 <_malloc_r+0x54>
 800c5ca:	4c20      	ldr	r4, [pc, #128]	; (800c64c <_malloc_r+0xb0>)
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	b91b      	cbnz	r3, 800c5d8 <_malloc_r+0x3c>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 fc57 	bl	800ce84 <_sbrk_r>
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f000 fc52 	bl	800ce84 <_sbrk_r>
 800c5e0:	1c43      	adds	r3, r0, #1
 800c5e2:	d124      	bne.n	800c62e <_malloc_r+0x92>
 800c5e4:	230c      	movs	r3, #12
 800c5e6:	6033      	str	r3, [r6, #0]
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f000 fd1b 	bl	800d024 <__malloc_unlock>
 800c5ee:	e7e4      	b.n	800c5ba <_malloc_r+0x1e>
 800c5f0:	680b      	ldr	r3, [r1, #0]
 800c5f2:	1b5b      	subs	r3, r3, r5
 800c5f4:	d418      	bmi.n	800c628 <_malloc_r+0x8c>
 800c5f6:	2b0b      	cmp	r3, #11
 800c5f8:	d90f      	bls.n	800c61a <_malloc_r+0x7e>
 800c5fa:	600b      	str	r3, [r1, #0]
 800c5fc:	50cd      	str	r5, [r1, r3]
 800c5fe:	18cc      	adds	r4, r1, r3
 800c600:	4630      	mov	r0, r6
 800c602:	f000 fd0f 	bl	800d024 <__malloc_unlock>
 800c606:	f104 000b 	add.w	r0, r4, #11
 800c60a:	1d23      	adds	r3, r4, #4
 800c60c:	f020 0007 	bic.w	r0, r0, #7
 800c610:	1ac3      	subs	r3, r0, r3
 800c612:	d0d3      	beq.n	800c5bc <_malloc_r+0x20>
 800c614:	425a      	negs	r2, r3
 800c616:	50e2      	str	r2, [r4, r3]
 800c618:	e7d0      	b.n	800c5bc <_malloc_r+0x20>
 800c61a:	428c      	cmp	r4, r1
 800c61c:	684b      	ldr	r3, [r1, #4]
 800c61e:	bf16      	itet	ne
 800c620:	6063      	strne	r3, [r4, #4]
 800c622:	6013      	streq	r3, [r2, #0]
 800c624:	460c      	movne	r4, r1
 800c626:	e7eb      	b.n	800c600 <_malloc_r+0x64>
 800c628:	460c      	mov	r4, r1
 800c62a:	6849      	ldr	r1, [r1, #4]
 800c62c:	e7cc      	b.n	800c5c8 <_malloc_r+0x2c>
 800c62e:	1cc4      	adds	r4, r0, #3
 800c630:	f024 0403 	bic.w	r4, r4, #3
 800c634:	42a0      	cmp	r0, r4
 800c636:	d005      	beq.n	800c644 <_malloc_r+0xa8>
 800c638:	1a21      	subs	r1, r4, r0
 800c63a:	4630      	mov	r0, r6
 800c63c:	f000 fc22 	bl	800ce84 <_sbrk_r>
 800c640:	3001      	adds	r0, #1
 800c642:	d0cf      	beq.n	800c5e4 <_malloc_r+0x48>
 800c644:	6025      	str	r5, [r4, #0]
 800c646:	e7db      	b.n	800c600 <_malloc_r+0x64>
 800c648:	200027c4 	.word	0x200027c4
 800c64c:	200027c8 	.word	0x200027c8

0800c650 <__ssputs_r>:
 800c650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c654:	688e      	ldr	r6, [r1, #8]
 800c656:	429e      	cmp	r6, r3
 800c658:	4682      	mov	sl, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	4690      	mov	r8, r2
 800c65e:	4699      	mov	r9, r3
 800c660:	d837      	bhi.n	800c6d2 <__ssputs_r+0x82>
 800c662:	898a      	ldrh	r2, [r1, #12]
 800c664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c668:	d031      	beq.n	800c6ce <__ssputs_r+0x7e>
 800c66a:	6825      	ldr	r5, [r4, #0]
 800c66c:	6909      	ldr	r1, [r1, #16]
 800c66e:	1a6f      	subs	r7, r5, r1
 800c670:	6965      	ldr	r5, [r4, #20]
 800c672:	2302      	movs	r3, #2
 800c674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c678:	fb95 f5f3 	sdiv	r5, r5, r3
 800c67c:	f109 0301 	add.w	r3, r9, #1
 800c680:	443b      	add	r3, r7
 800c682:	429d      	cmp	r5, r3
 800c684:	bf38      	it	cc
 800c686:	461d      	movcc	r5, r3
 800c688:	0553      	lsls	r3, r2, #21
 800c68a:	d530      	bpl.n	800c6ee <__ssputs_r+0x9e>
 800c68c:	4629      	mov	r1, r5
 800c68e:	f7ff ff85 	bl	800c59c <_malloc_r>
 800c692:	4606      	mov	r6, r0
 800c694:	b950      	cbnz	r0, 800c6ac <__ssputs_r+0x5c>
 800c696:	230c      	movs	r3, #12
 800c698:	f8ca 3000 	str.w	r3, [sl]
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ac:	463a      	mov	r2, r7
 800c6ae:	6921      	ldr	r1, [r4, #16]
 800c6b0:	f7ff fa71 	bl	800bb96 <memcpy>
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	6126      	str	r6, [r4, #16]
 800c6c2:	6165      	str	r5, [r4, #20]
 800c6c4:	443e      	add	r6, r7
 800c6c6:	1bed      	subs	r5, r5, r7
 800c6c8:	6026      	str	r6, [r4, #0]
 800c6ca:	60a5      	str	r5, [r4, #8]
 800c6cc:	464e      	mov	r6, r9
 800c6ce:	454e      	cmp	r6, r9
 800c6d0:	d900      	bls.n	800c6d4 <__ssputs_r+0x84>
 800c6d2:	464e      	mov	r6, r9
 800c6d4:	4632      	mov	r2, r6
 800c6d6:	4641      	mov	r1, r8
 800c6d8:	6820      	ldr	r0, [r4, #0]
 800c6da:	f000 fc89 	bl	800cff0 <memmove>
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	1b9b      	subs	r3, r3, r6
 800c6e2:	60a3      	str	r3, [r4, #8]
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	441e      	add	r6, r3
 800c6e8:	6026      	str	r6, [r4, #0]
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e7dc      	b.n	800c6a8 <__ssputs_r+0x58>
 800c6ee:	462a      	mov	r2, r5
 800c6f0:	f000 fc99 	bl	800d026 <_realloc_r>
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d1e2      	bne.n	800c6c0 <__ssputs_r+0x70>
 800c6fa:	6921      	ldr	r1, [r4, #16]
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	f7ff feff 	bl	800c500 <_free_r>
 800c702:	e7c8      	b.n	800c696 <__ssputs_r+0x46>

0800c704 <_svfiprintf_r>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	461d      	mov	r5, r3
 800c70a:	898b      	ldrh	r3, [r1, #12]
 800c70c:	061f      	lsls	r7, r3, #24
 800c70e:	b09d      	sub	sp, #116	; 0x74
 800c710:	4680      	mov	r8, r0
 800c712:	460c      	mov	r4, r1
 800c714:	4616      	mov	r6, r2
 800c716:	d50f      	bpl.n	800c738 <_svfiprintf_r+0x34>
 800c718:	690b      	ldr	r3, [r1, #16]
 800c71a:	b96b      	cbnz	r3, 800c738 <_svfiprintf_r+0x34>
 800c71c:	2140      	movs	r1, #64	; 0x40
 800c71e:	f7ff ff3d 	bl	800c59c <_malloc_r>
 800c722:	6020      	str	r0, [r4, #0]
 800c724:	6120      	str	r0, [r4, #16]
 800c726:	b928      	cbnz	r0, 800c734 <_svfiprintf_r+0x30>
 800c728:	230c      	movs	r3, #12
 800c72a:	f8c8 3000 	str.w	r3, [r8]
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	e0c8      	b.n	800c8c6 <_svfiprintf_r+0x1c2>
 800c734:	2340      	movs	r3, #64	; 0x40
 800c736:	6163      	str	r3, [r4, #20]
 800c738:	2300      	movs	r3, #0
 800c73a:	9309      	str	r3, [sp, #36]	; 0x24
 800c73c:	2320      	movs	r3, #32
 800c73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c742:	2330      	movs	r3, #48	; 0x30
 800c744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c748:	9503      	str	r5, [sp, #12]
 800c74a:	f04f 0b01 	mov.w	fp, #1
 800c74e:	4637      	mov	r7, r6
 800c750:	463d      	mov	r5, r7
 800c752:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c756:	b10b      	cbz	r3, 800c75c <_svfiprintf_r+0x58>
 800c758:	2b25      	cmp	r3, #37	; 0x25
 800c75a:	d13e      	bne.n	800c7da <_svfiprintf_r+0xd6>
 800c75c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c760:	d00b      	beq.n	800c77a <_svfiprintf_r+0x76>
 800c762:	4653      	mov	r3, sl
 800c764:	4632      	mov	r2, r6
 800c766:	4621      	mov	r1, r4
 800c768:	4640      	mov	r0, r8
 800c76a:	f7ff ff71 	bl	800c650 <__ssputs_r>
 800c76e:	3001      	adds	r0, #1
 800c770:	f000 80a4 	beq.w	800c8bc <_svfiprintf_r+0x1b8>
 800c774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c776:	4453      	add	r3, sl
 800c778:	9309      	str	r3, [sp, #36]	; 0x24
 800c77a:	783b      	ldrb	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f000 809d 	beq.w	800c8bc <_svfiprintf_r+0x1b8>
 800c782:	2300      	movs	r3, #0
 800c784:	f04f 32ff 	mov.w	r2, #4294967295
 800c788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	9307      	str	r3, [sp, #28]
 800c790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c794:	931a      	str	r3, [sp, #104]	; 0x68
 800c796:	462f      	mov	r7, r5
 800c798:	2205      	movs	r2, #5
 800c79a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c79e:	4850      	ldr	r0, [pc, #320]	; (800c8e0 <_svfiprintf_r+0x1dc>)
 800c7a0:	f7f3 fd1e 	bl	80001e0 <memchr>
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	b9d0      	cbnz	r0, 800c7de <_svfiprintf_r+0xda>
 800c7a8:	06d9      	lsls	r1, r3, #27
 800c7aa:	bf44      	itt	mi
 800c7ac:	2220      	movmi	r2, #32
 800c7ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7b2:	071a      	lsls	r2, r3, #28
 800c7b4:	bf44      	itt	mi
 800c7b6:	222b      	movmi	r2, #43	; 0x2b
 800c7b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7bc:	782a      	ldrb	r2, [r5, #0]
 800c7be:	2a2a      	cmp	r2, #42	; 0x2a
 800c7c0:	d015      	beq.n	800c7ee <_svfiprintf_r+0xea>
 800c7c2:	9a07      	ldr	r2, [sp, #28]
 800c7c4:	462f      	mov	r7, r5
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	250a      	movs	r5, #10
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7d0:	3b30      	subs	r3, #48	; 0x30
 800c7d2:	2b09      	cmp	r3, #9
 800c7d4:	d94d      	bls.n	800c872 <_svfiprintf_r+0x16e>
 800c7d6:	b1b8      	cbz	r0, 800c808 <_svfiprintf_r+0x104>
 800c7d8:	e00f      	b.n	800c7fa <_svfiprintf_r+0xf6>
 800c7da:	462f      	mov	r7, r5
 800c7dc:	e7b8      	b.n	800c750 <_svfiprintf_r+0x4c>
 800c7de:	4a40      	ldr	r2, [pc, #256]	; (800c8e0 <_svfiprintf_r+0x1dc>)
 800c7e0:	1a80      	subs	r0, r0, r2
 800c7e2:	fa0b f000 	lsl.w	r0, fp, r0
 800c7e6:	4318      	orrs	r0, r3
 800c7e8:	9004      	str	r0, [sp, #16]
 800c7ea:	463d      	mov	r5, r7
 800c7ec:	e7d3      	b.n	800c796 <_svfiprintf_r+0x92>
 800c7ee:	9a03      	ldr	r2, [sp, #12]
 800c7f0:	1d11      	adds	r1, r2, #4
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	9103      	str	r1, [sp, #12]
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	db01      	blt.n	800c7fe <_svfiprintf_r+0xfa>
 800c7fa:	9207      	str	r2, [sp, #28]
 800c7fc:	e004      	b.n	800c808 <_svfiprintf_r+0x104>
 800c7fe:	4252      	negs	r2, r2
 800c800:	f043 0302 	orr.w	r3, r3, #2
 800c804:	9207      	str	r2, [sp, #28]
 800c806:	9304      	str	r3, [sp, #16]
 800c808:	783b      	ldrb	r3, [r7, #0]
 800c80a:	2b2e      	cmp	r3, #46	; 0x2e
 800c80c:	d10c      	bne.n	800c828 <_svfiprintf_r+0x124>
 800c80e:	787b      	ldrb	r3, [r7, #1]
 800c810:	2b2a      	cmp	r3, #42	; 0x2a
 800c812:	d133      	bne.n	800c87c <_svfiprintf_r+0x178>
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	1d1a      	adds	r2, r3, #4
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	9203      	str	r2, [sp, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	bfb8      	it	lt
 800c820:	f04f 33ff 	movlt.w	r3, #4294967295
 800c824:	3702      	adds	r7, #2
 800c826:	9305      	str	r3, [sp, #20]
 800c828:	4d2e      	ldr	r5, [pc, #184]	; (800c8e4 <_svfiprintf_r+0x1e0>)
 800c82a:	7839      	ldrb	r1, [r7, #0]
 800c82c:	2203      	movs	r2, #3
 800c82e:	4628      	mov	r0, r5
 800c830:	f7f3 fcd6 	bl	80001e0 <memchr>
 800c834:	b138      	cbz	r0, 800c846 <_svfiprintf_r+0x142>
 800c836:	2340      	movs	r3, #64	; 0x40
 800c838:	1b40      	subs	r0, r0, r5
 800c83a:	fa03 f000 	lsl.w	r0, r3, r0
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	4303      	orrs	r3, r0
 800c842:	3701      	adds	r7, #1
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	7839      	ldrb	r1, [r7, #0]
 800c848:	4827      	ldr	r0, [pc, #156]	; (800c8e8 <_svfiprintf_r+0x1e4>)
 800c84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c84e:	2206      	movs	r2, #6
 800c850:	1c7e      	adds	r6, r7, #1
 800c852:	f7f3 fcc5 	bl	80001e0 <memchr>
 800c856:	2800      	cmp	r0, #0
 800c858:	d038      	beq.n	800c8cc <_svfiprintf_r+0x1c8>
 800c85a:	4b24      	ldr	r3, [pc, #144]	; (800c8ec <_svfiprintf_r+0x1e8>)
 800c85c:	bb13      	cbnz	r3, 800c8a4 <_svfiprintf_r+0x1a0>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	3307      	adds	r3, #7
 800c862:	f023 0307 	bic.w	r3, r3, #7
 800c866:	3308      	adds	r3, #8
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86c:	444b      	add	r3, r9
 800c86e:	9309      	str	r3, [sp, #36]	; 0x24
 800c870:	e76d      	b.n	800c74e <_svfiprintf_r+0x4a>
 800c872:	fb05 3202 	mla	r2, r5, r2, r3
 800c876:	2001      	movs	r0, #1
 800c878:	460f      	mov	r7, r1
 800c87a:	e7a6      	b.n	800c7ca <_svfiprintf_r+0xc6>
 800c87c:	2300      	movs	r3, #0
 800c87e:	3701      	adds	r7, #1
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	4619      	mov	r1, r3
 800c884:	250a      	movs	r5, #10
 800c886:	4638      	mov	r0, r7
 800c888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c88c:	3a30      	subs	r2, #48	; 0x30
 800c88e:	2a09      	cmp	r2, #9
 800c890:	d903      	bls.n	800c89a <_svfiprintf_r+0x196>
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0c8      	beq.n	800c828 <_svfiprintf_r+0x124>
 800c896:	9105      	str	r1, [sp, #20]
 800c898:	e7c6      	b.n	800c828 <_svfiprintf_r+0x124>
 800c89a:	fb05 2101 	mla	r1, r5, r1, r2
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	e7f0      	b.n	800c886 <_svfiprintf_r+0x182>
 800c8a4:	ab03      	add	r3, sp, #12
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	4b11      	ldr	r3, [pc, #68]	; (800c8f0 <_svfiprintf_r+0x1ec>)
 800c8ac:	a904      	add	r1, sp, #16
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	f3af 8000 	nop.w
 800c8b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	d1d6      	bne.n	800c86a <_svfiprintf_r+0x166>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	065b      	lsls	r3, r3, #25
 800c8c0:	f53f af35 	bmi.w	800c72e <_svfiprintf_r+0x2a>
 800c8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c6:	b01d      	add	sp, #116	; 0x74
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	ab03      	add	r3, sp, #12
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <_svfiprintf_r+0x1ec>)
 800c8d4:	a904      	add	r1, sp, #16
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	f000 f9c2 	bl	800cc60 <_printf_i>
 800c8dc:	e7ea      	b.n	800c8b4 <_svfiprintf_r+0x1b0>
 800c8de:	bf00      	nop
 800c8e0:	0800dcd2 	.word	0x0800dcd2
 800c8e4:	0800dcd8 	.word	0x0800dcd8
 800c8e8:	0800dcdc 	.word	0x0800dcdc
 800c8ec:	00000000 	.word	0x00000000
 800c8f0:	0800c651 	.word	0x0800c651

0800c8f4 <__sfputc_r>:
 800c8f4:	6893      	ldr	r3, [r2, #8]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	b410      	push	{r4}
 800c8fc:	6093      	str	r3, [r2, #8]
 800c8fe:	da08      	bge.n	800c912 <__sfputc_r+0x1e>
 800c900:	6994      	ldr	r4, [r2, #24]
 800c902:	42a3      	cmp	r3, r4
 800c904:	db01      	blt.n	800c90a <__sfputc_r+0x16>
 800c906:	290a      	cmp	r1, #10
 800c908:	d103      	bne.n	800c912 <__sfputc_r+0x1e>
 800c90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c90e:	f7ff bb3b 	b.w	800bf88 <__swbuf_r>
 800c912:	6813      	ldr	r3, [r2, #0]
 800c914:	1c58      	adds	r0, r3, #1
 800c916:	6010      	str	r0, [r2, #0]
 800c918:	7019      	strb	r1, [r3, #0]
 800c91a:	4608      	mov	r0, r1
 800c91c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <__sfputs_r>:
 800c922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	4614      	mov	r4, r2
 800c92a:	18d5      	adds	r5, r2, r3
 800c92c:	42ac      	cmp	r4, r5
 800c92e:	d101      	bne.n	800c934 <__sfputs_r+0x12>
 800c930:	2000      	movs	r0, #0
 800c932:	e007      	b.n	800c944 <__sfputs_r+0x22>
 800c934:	463a      	mov	r2, r7
 800c936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c93a:	4630      	mov	r0, r6
 800c93c:	f7ff ffda 	bl	800c8f4 <__sfputc_r>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d1f3      	bne.n	800c92c <__sfputs_r+0xa>
 800c944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c948 <_vfiprintf_r>:
 800c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	460c      	mov	r4, r1
 800c94e:	b09d      	sub	sp, #116	; 0x74
 800c950:	4617      	mov	r7, r2
 800c952:	461d      	mov	r5, r3
 800c954:	4606      	mov	r6, r0
 800c956:	b118      	cbz	r0, 800c960 <_vfiprintf_r+0x18>
 800c958:	6983      	ldr	r3, [r0, #24]
 800c95a:	b90b      	cbnz	r3, 800c960 <_vfiprintf_r+0x18>
 800c95c:	f7ff fcc4 	bl	800c2e8 <__sinit>
 800c960:	4b7c      	ldr	r3, [pc, #496]	; (800cb54 <_vfiprintf_r+0x20c>)
 800c962:	429c      	cmp	r4, r3
 800c964:	d158      	bne.n	800ca18 <_vfiprintf_r+0xd0>
 800c966:	6874      	ldr	r4, [r6, #4]
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	0718      	lsls	r0, r3, #28
 800c96c:	d55e      	bpl.n	800ca2c <_vfiprintf_r+0xe4>
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d05b      	beq.n	800ca2c <_vfiprintf_r+0xe4>
 800c974:	2300      	movs	r3, #0
 800c976:	9309      	str	r3, [sp, #36]	; 0x24
 800c978:	2320      	movs	r3, #32
 800c97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c97e:	2330      	movs	r3, #48	; 0x30
 800c980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c984:	9503      	str	r5, [sp, #12]
 800c986:	f04f 0b01 	mov.w	fp, #1
 800c98a:	46b8      	mov	r8, r7
 800c98c:	4645      	mov	r5, r8
 800c98e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c992:	b10b      	cbz	r3, 800c998 <_vfiprintf_r+0x50>
 800c994:	2b25      	cmp	r3, #37	; 0x25
 800c996:	d154      	bne.n	800ca42 <_vfiprintf_r+0xfa>
 800c998:	ebb8 0a07 	subs.w	sl, r8, r7
 800c99c:	d00b      	beq.n	800c9b6 <_vfiprintf_r+0x6e>
 800c99e:	4653      	mov	r3, sl
 800c9a0:	463a      	mov	r2, r7
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7ff ffbc 	bl	800c922 <__sfputs_r>
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	f000 80c2 	beq.w	800cb34 <_vfiprintf_r+0x1ec>
 800c9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b2:	4453      	add	r3, sl
 800c9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b6:	f898 3000 	ldrb.w	r3, [r8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80ba 	beq.w	800cb34 <_vfiprintf_r+0x1ec>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	9307      	str	r3, [sp, #28]
 800c9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9d2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9d4:	46a8      	mov	r8, r5
 800c9d6:	2205      	movs	r2, #5
 800c9d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c9dc:	485e      	ldr	r0, [pc, #376]	; (800cb58 <_vfiprintf_r+0x210>)
 800c9de:	f7f3 fbff 	bl	80001e0 <memchr>
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	bb78      	cbnz	r0, 800ca46 <_vfiprintf_r+0xfe>
 800c9e6:	06d9      	lsls	r1, r3, #27
 800c9e8:	bf44      	itt	mi
 800c9ea:	2220      	movmi	r2, #32
 800c9ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c9f0:	071a      	lsls	r2, r3, #28
 800c9f2:	bf44      	itt	mi
 800c9f4:	222b      	movmi	r2, #43	; 0x2b
 800c9f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c9fa:	782a      	ldrb	r2, [r5, #0]
 800c9fc:	2a2a      	cmp	r2, #42	; 0x2a
 800c9fe:	d02a      	beq.n	800ca56 <_vfiprintf_r+0x10e>
 800ca00:	9a07      	ldr	r2, [sp, #28]
 800ca02:	46a8      	mov	r8, r5
 800ca04:	2000      	movs	r0, #0
 800ca06:	250a      	movs	r5, #10
 800ca08:	4641      	mov	r1, r8
 800ca0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca0e:	3b30      	subs	r3, #48	; 0x30
 800ca10:	2b09      	cmp	r3, #9
 800ca12:	d969      	bls.n	800cae8 <_vfiprintf_r+0x1a0>
 800ca14:	b360      	cbz	r0, 800ca70 <_vfiprintf_r+0x128>
 800ca16:	e024      	b.n	800ca62 <_vfiprintf_r+0x11a>
 800ca18:	4b50      	ldr	r3, [pc, #320]	; (800cb5c <_vfiprintf_r+0x214>)
 800ca1a:	429c      	cmp	r4, r3
 800ca1c:	d101      	bne.n	800ca22 <_vfiprintf_r+0xda>
 800ca1e:	68b4      	ldr	r4, [r6, #8]
 800ca20:	e7a2      	b.n	800c968 <_vfiprintf_r+0x20>
 800ca22:	4b4f      	ldr	r3, [pc, #316]	; (800cb60 <_vfiprintf_r+0x218>)
 800ca24:	429c      	cmp	r4, r3
 800ca26:	bf08      	it	eq
 800ca28:	68f4      	ldreq	r4, [r6, #12]
 800ca2a:	e79d      	b.n	800c968 <_vfiprintf_r+0x20>
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f7ff fafc 	bl	800c02c <__swsetup_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d09d      	beq.n	800c974 <_vfiprintf_r+0x2c>
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	b01d      	add	sp, #116	; 0x74
 800ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca42:	46a8      	mov	r8, r5
 800ca44:	e7a2      	b.n	800c98c <_vfiprintf_r+0x44>
 800ca46:	4a44      	ldr	r2, [pc, #272]	; (800cb58 <_vfiprintf_r+0x210>)
 800ca48:	1a80      	subs	r0, r0, r2
 800ca4a:	fa0b f000 	lsl.w	r0, fp, r0
 800ca4e:	4318      	orrs	r0, r3
 800ca50:	9004      	str	r0, [sp, #16]
 800ca52:	4645      	mov	r5, r8
 800ca54:	e7be      	b.n	800c9d4 <_vfiprintf_r+0x8c>
 800ca56:	9a03      	ldr	r2, [sp, #12]
 800ca58:	1d11      	adds	r1, r2, #4
 800ca5a:	6812      	ldr	r2, [r2, #0]
 800ca5c:	9103      	str	r1, [sp, #12]
 800ca5e:	2a00      	cmp	r2, #0
 800ca60:	db01      	blt.n	800ca66 <_vfiprintf_r+0x11e>
 800ca62:	9207      	str	r2, [sp, #28]
 800ca64:	e004      	b.n	800ca70 <_vfiprintf_r+0x128>
 800ca66:	4252      	negs	r2, r2
 800ca68:	f043 0302 	orr.w	r3, r3, #2
 800ca6c:	9207      	str	r2, [sp, #28]
 800ca6e:	9304      	str	r3, [sp, #16]
 800ca70:	f898 3000 	ldrb.w	r3, [r8]
 800ca74:	2b2e      	cmp	r3, #46	; 0x2e
 800ca76:	d10e      	bne.n	800ca96 <_vfiprintf_r+0x14e>
 800ca78:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ca7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca7e:	d138      	bne.n	800caf2 <_vfiprintf_r+0x1aa>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	9203      	str	r2, [sp, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	bfb8      	it	lt
 800ca8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca90:	f108 0802 	add.w	r8, r8, #2
 800ca94:	9305      	str	r3, [sp, #20]
 800ca96:	4d33      	ldr	r5, [pc, #204]	; (800cb64 <_vfiprintf_r+0x21c>)
 800ca98:	f898 1000 	ldrb.w	r1, [r8]
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7f3 fb9e 	bl	80001e0 <memchr>
 800caa4:	b140      	cbz	r0, 800cab8 <_vfiprintf_r+0x170>
 800caa6:	2340      	movs	r3, #64	; 0x40
 800caa8:	1b40      	subs	r0, r0, r5
 800caaa:	fa03 f000 	lsl.w	r0, r3, r0
 800caae:	9b04      	ldr	r3, [sp, #16]
 800cab0:	4303      	orrs	r3, r0
 800cab2:	f108 0801 	add.w	r8, r8, #1
 800cab6:	9304      	str	r3, [sp, #16]
 800cab8:	f898 1000 	ldrb.w	r1, [r8]
 800cabc:	482a      	ldr	r0, [pc, #168]	; (800cb68 <_vfiprintf_r+0x220>)
 800cabe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cac2:	2206      	movs	r2, #6
 800cac4:	f108 0701 	add.w	r7, r8, #1
 800cac8:	f7f3 fb8a 	bl	80001e0 <memchr>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d037      	beq.n	800cb40 <_vfiprintf_r+0x1f8>
 800cad0:	4b26      	ldr	r3, [pc, #152]	; (800cb6c <_vfiprintf_r+0x224>)
 800cad2:	bb1b      	cbnz	r3, 800cb1c <_vfiprintf_r+0x1d4>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	3307      	adds	r3, #7
 800cad8:	f023 0307 	bic.w	r3, r3, #7
 800cadc:	3308      	adds	r3, #8
 800cade:	9303      	str	r3, [sp, #12]
 800cae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae2:	444b      	add	r3, r9
 800cae4:	9309      	str	r3, [sp, #36]	; 0x24
 800cae6:	e750      	b.n	800c98a <_vfiprintf_r+0x42>
 800cae8:	fb05 3202 	mla	r2, r5, r2, r3
 800caec:	2001      	movs	r0, #1
 800caee:	4688      	mov	r8, r1
 800caf0:	e78a      	b.n	800ca08 <_vfiprintf_r+0xc0>
 800caf2:	2300      	movs	r3, #0
 800caf4:	f108 0801 	add.w	r8, r8, #1
 800caf8:	9305      	str	r3, [sp, #20]
 800cafa:	4619      	mov	r1, r3
 800cafc:	250a      	movs	r5, #10
 800cafe:	4640      	mov	r0, r8
 800cb00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb04:	3a30      	subs	r2, #48	; 0x30
 800cb06:	2a09      	cmp	r2, #9
 800cb08:	d903      	bls.n	800cb12 <_vfiprintf_r+0x1ca>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0c3      	beq.n	800ca96 <_vfiprintf_r+0x14e>
 800cb0e:	9105      	str	r1, [sp, #20]
 800cb10:	e7c1      	b.n	800ca96 <_vfiprintf_r+0x14e>
 800cb12:	fb05 2101 	mla	r1, r5, r1, r2
 800cb16:	2301      	movs	r3, #1
 800cb18:	4680      	mov	r8, r0
 800cb1a:	e7f0      	b.n	800cafe <_vfiprintf_r+0x1b6>
 800cb1c:	ab03      	add	r3, sp, #12
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	4622      	mov	r2, r4
 800cb22:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <_vfiprintf_r+0x228>)
 800cb24:	a904      	add	r1, sp, #16
 800cb26:	4630      	mov	r0, r6
 800cb28:	f3af 8000 	nop.w
 800cb2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cb30:	4681      	mov	r9, r0
 800cb32:	d1d5      	bne.n	800cae0 <_vfiprintf_r+0x198>
 800cb34:	89a3      	ldrh	r3, [r4, #12]
 800cb36:	065b      	lsls	r3, r3, #25
 800cb38:	f53f af7e 	bmi.w	800ca38 <_vfiprintf_r+0xf0>
 800cb3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb3e:	e77d      	b.n	800ca3c <_vfiprintf_r+0xf4>
 800cb40:	ab03      	add	r3, sp, #12
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	4622      	mov	r2, r4
 800cb46:	4b0a      	ldr	r3, [pc, #40]	; (800cb70 <_vfiprintf_r+0x228>)
 800cb48:	a904      	add	r1, sp, #16
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f000 f888 	bl	800cc60 <_printf_i>
 800cb50:	e7ec      	b.n	800cb2c <_vfiprintf_r+0x1e4>
 800cb52:	bf00      	nop
 800cb54:	0800dc88 	.word	0x0800dc88
 800cb58:	0800dcd2 	.word	0x0800dcd2
 800cb5c:	0800dca8 	.word	0x0800dca8
 800cb60:	0800dc68 	.word	0x0800dc68
 800cb64:	0800dcd8 	.word	0x0800dcd8
 800cb68:	0800dcdc 	.word	0x0800dcdc
 800cb6c:	00000000 	.word	0x00000000
 800cb70:	0800c923 	.word	0x0800c923

0800cb74 <_printf_common>:
 800cb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb78:	4691      	mov	r9, r2
 800cb7a:	461f      	mov	r7, r3
 800cb7c:	688a      	ldr	r2, [r1, #8]
 800cb7e:	690b      	ldr	r3, [r1, #16]
 800cb80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb84:	4293      	cmp	r3, r2
 800cb86:	bfb8      	it	lt
 800cb88:	4613      	movlt	r3, r2
 800cb8a:	f8c9 3000 	str.w	r3, [r9]
 800cb8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb92:	4606      	mov	r6, r0
 800cb94:	460c      	mov	r4, r1
 800cb96:	b112      	cbz	r2, 800cb9e <_printf_common+0x2a>
 800cb98:	3301      	adds	r3, #1
 800cb9a:	f8c9 3000 	str.w	r3, [r9]
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	0699      	lsls	r1, r3, #26
 800cba2:	bf42      	ittt	mi
 800cba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cba8:	3302      	addmi	r3, #2
 800cbaa:	f8c9 3000 	strmi.w	r3, [r9]
 800cbae:	6825      	ldr	r5, [r4, #0]
 800cbb0:	f015 0506 	ands.w	r5, r5, #6
 800cbb4:	d107      	bne.n	800cbc6 <_printf_common+0x52>
 800cbb6:	f104 0a19 	add.w	sl, r4, #25
 800cbba:	68e3      	ldr	r3, [r4, #12]
 800cbbc:	f8d9 2000 	ldr.w	r2, [r9]
 800cbc0:	1a9b      	subs	r3, r3, r2
 800cbc2:	42ab      	cmp	r3, r5
 800cbc4:	dc28      	bgt.n	800cc18 <_printf_common+0xa4>
 800cbc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	3300      	adds	r3, #0
 800cbce:	bf18      	it	ne
 800cbd0:	2301      	movne	r3, #1
 800cbd2:	0692      	lsls	r2, r2, #26
 800cbd4:	d42d      	bmi.n	800cc32 <_printf_common+0xbe>
 800cbd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbda:	4639      	mov	r1, r7
 800cbdc:	4630      	mov	r0, r6
 800cbde:	47c0      	blx	r8
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d020      	beq.n	800cc26 <_printf_common+0xb2>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	68e5      	ldr	r5, [r4, #12]
 800cbe8:	f8d9 2000 	ldr.w	r2, [r9]
 800cbec:	f003 0306 	and.w	r3, r3, #6
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	bf08      	it	eq
 800cbf4:	1aad      	subeq	r5, r5, r2
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	6922      	ldr	r2, [r4, #16]
 800cbfa:	bf0c      	ite	eq
 800cbfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc00:	2500      	movne	r5, #0
 800cc02:	4293      	cmp	r3, r2
 800cc04:	bfc4      	itt	gt
 800cc06:	1a9b      	subgt	r3, r3, r2
 800cc08:	18ed      	addgt	r5, r5, r3
 800cc0a:	f04f 0900 	mov.w	r9, #0
 800cc0e:	341a      	adds	r4, #26
 800cc10:	454d      	cmp	r5, r9
 800cc12:	d11a      	bne.n	800cc4a <_printf_common+0xd6>
 800cc14:	2000      	movs	r0, #0
 800cc16:	e008      	b.n	800cc2a <_printf_common+0xb6>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	4652      	mov	r2, sl
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	4630      	mov	r0, r6
 800cc20:	47c0      	blx	r8
 800cc22:	3001      	adds	r0, #1
 800cc24:	d103      	bne.n	800cc2e <_printf_common+0xba>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2e:	3501      	adds	r5, #1
 800cc30:	e7c3      	b.n	800cbba <_printf_common+0x46>
 800cc32:	18e1      	adds	r1, r4, r3
 800cc34:	1c5a      	adds	r2, r3, #1
 800cc36:	2030      	movs	r0, #48	; 0x30
 800cc38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc3c:	4422      	add	r2, r4
 800cc3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc46:	3302      	adds	r3, #2
 800cc48:	e7c5      	b.n	800cbd6 <_printf_common+0x62>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	4622      	mov	r2, r4
 800cc4e:	4639      	mov	r1, r7
 800cc50:	4630      	mov	r0, r6
 800cc52:	47c0      	blx	r8
 800cc54:	3001      	adds	r0, #1
 800cc56:	d0e6      	beq.n	800cc26 <_printf_common+0xb2>
 800cc58:	f109 0901 	add.w	r9, r9, #1
 800cc5c:	e7d8      	b.n	800cc10 <_printf_common+0x9c>
	...

0800cc60 <_printf_i>:
 800cc60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc68:	460c      	mov	r4, r1
 800cc6a:	7e09      	ldrb	r1, [r1, #24]
 800cc6c:	b085      	sub	sp, #20
 800cc6e:	296e      	cmp	r1, #110	; 0x6e
 800cc70:	4617      	mov	r7, r2
 800cc72:	4606      	mov	r6, r0
 800cc74:	4698      	mov	r8, r3
 800cc76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc78:	f000 80b3 	beq.w	800cde2 <_printf_i+0x182>
 800cc7c:	d822      	bhi.n	800ccc4 <_printf_i+0x64>
 800cc7e:	2963      	cmp	r1, #99	; 0x63
 800cc80:	d036      	beq.n	800ccf0 <_printf_i+0x90>
 800cc82:	d80a      	bhi.n	800cc9a <_printf_i+0x3a>
 800cc84:	2900      	cmp	r1, #0
 800cc86:	f000 80b9 	beq.w	800cdfc <_printf_i+0x19c>
 800cc8a:	2958      	cmp	r1, #88	; 0x58
 800cc8c:	f000 8083 	beq.w	800cd96 <_printf_i+0x136>
 800cc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc98:	e032      	b.n	800cd00 <_printf_i+0xa0>
 800cc9a:	2964      	cmp	r1, #100	; 0x64
 800cc9c:	d001      	beq.n	800cca2 <_printf_i+0x42>
 800cc9e:	2969      	cmp	r1, #105	; 0x69
 800cca0:	d1f6      	bne.n	800cc90 <_printf_i+0x30>
 800cca2:	6820      	ldr	r0, [r4, #0]
 800cca4:	6813      	ldr	r3, [r2, #0]
 800cca6:	0605      	lsls	r5, r0, #24
 800cca8:	f103 0104 	add.w	r1, r3, #4
 800ccac:	d52a      	bpl.n	800cd04 <_printf_i+0xa4>
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6011      	str	r1, [r2, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	da03      	bge.n	800ccbe <_printf_i+0x5e>
 800ccb6:	222d      	movs	r2, #45	; 0x2d
 800ccb8:	425b      	negs	r3, r3
 800ccba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ccbe:	486f      	ldr	r0, [pc, #444]	; (800ce7c <_printf_i+0x21c>)
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	e039      	b.n	800cd38 <_printf_i+0xd8>
 800ccc4:	2973      	cmp	r1, #115	; 0x73
 800ccc6:	f000 809d 	beq.w	800ce04 <_printf_i+0x1a4>
 800ccca:	d808      	bhi.n	800ccde <_printf_i+0x7e>
 800cccc:	296f      	cmp	r1, #111	; 0x6f
 800ccce:	d020      	beq.n	800cd12 <_printf_i+0xb2>
 800ccd0:	2970      	cmp	r1, #112	; 0x70
 800ccd2:	d1dd      	bne.n	800cc90 <_printf_i+0x30>
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	f043 0320 	orr.w	r3, r3, #32
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	e003      	b.n	800cce6 <_printf_i+0x86>
 800ccde:	2975      	cmp	r1, #117	; 0x75
 800cce0:	d017      	beq.n	800cd12 <_printf_i+0xb2>
 800cce2:	2978      	cmp	r1, #120	; 0x78
 800cce4:	d1d4      	bne.n	800cc90 <_printf_i+0x30>
 800cce6:	2378      	movs	r3, #120	; 0x78
 800cce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccec:	4864      	ldr	r0, [pc, #400]	; (800ce80 <_printf_i+0x220>)
 800ccee:	e055      	b.n	800cd9c <_printf_i+0x13c>
 800ccf0:	6813      	ldr	r3, [r2, #0]
 800ccf2:	1d19      	adds	r1, r3, #4
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	6011      	str	r1, [r2, #0]
 800ccf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd00:	2301      	movs	r3, #1
 800cd02:	e08c      	b.n	800ce1e <_printf_i+0x1be>
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	6011      	str	r1, [r2, #0]
 800cd08:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd0c:	bf18      	it	ne
 800cd0e:	b21b      	sxthne	r3, r3
 800cd10:	e7cf      	b.n	800ccb2 <_printf_i+0x52>
 800cd12:	6813      	ldr	r3, [r2, #0]
 800cd14:	6825      	ldr	r5, [r4, #0]
 800cd16:	1d18      	adds	r0, r3, #4
 800cd18:	6010      	str	r0, [r2, #0]
 800cd1a:	0628      	lsls	r0, r5, #24
 800cd1c:	d501      	bpl.n	800cd22 <_printf_i+0xc2>
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	e002      	b.n	800cd28 <_printf_i+0xc8>
 800cd22:	0668      	lsls	r0, r5, #25
 800cd24:	d5fb      	bpl.n	800cd1e <_printf_i+0xbe>
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	4854      	ldr	r0, [pc, #336]	; (800ce7c <_printf_i+0x21c>)
 800cd2a:	296f      	cmp	r1, #111	; 0x6f
 800cd2c:	bf14      	ite	ne
 800cd2e:	220a      	movne	r2, #10
 800cd30:	2208      	moveq	r2, #8
 800cd32:	2100      	movs	r1, #0
 800cd34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd38:	6865      	ldr	r5, [r4, #4]
 800cd3a:	60a5      	str	r5, [r4, #8]
 800cd3c:	2d00      	cmp	r5, #0
 800cd3e:	f2c0 8095 	blt.w	800ce6c <_printf_i+0x20c>
 800cd42:	6821      	ldr	r1, [r4, #0]
 800cd44:	f021 0104 	bic.w	r1, r1, #4
 800cd48:	6021      	str	r1, [r4, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d13d      	bne.n	800cdca <_printf_i+0x16a>
 800cd4e:	2d00      	cmp	r5, #0
 800cd50:	f040 808e 	bne.w	800ce70 <_printf_i+0x210>
 800cd54:	4665      	mov	r5, ip
 800cd56:	2a08      	cmp	r2, #8
 800cd58:	d10b      	bne.n	800cd72 <_printf_i+0x112>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	07db      	lsls	r3, r3, #31
 800cd5e:	d508      	bpl.n	800cd72 <_printf_i+0x112>
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	6862      	ldr	r2, [r4, #4]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	bfde      	ittt	le
 800cd68:	2330      	movle	r3, #48	; 0x30
 800cd6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd72:	ebac 0305 	sub.w	r3, ip, r5
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	f8cd 8000 	str.w	r8, [sp]
 800cd7c:	463b      	mov	r3, r7
 800cd7e:	aa03      	add	r2, sp, #12
 800cd80:	4621      	mov	r1, r4
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7ff fef6 	bl	800cb74 <_printf_common>
 800cd88:	3001      	adds	r0, #1
 800cd8a:	d14d      	bne.n	800ce28 <_printf_i+0x1c8>
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd90:	b005      	add	sp, #20
 800cd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd96:	4839      	ldr	r0, [pc, #228]	; (800ce7c <_printf_i+0x21c>)
 800cd98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd9c:	6813      	ldr	r3, [r2, #0]
 800cd9e:	6821      	ldr	r1, [r4, #0]
 800cda0:	1d1d      	adds	r5, r3, #4
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6015      	str	r5, [r2, #0]
 800cda6:	060a      	lsls	r2, r1, #24
 800cda8:	d50b      	bpl.n	800cdc2 <_printf_i+0x162>
 800cdaa:	07ca      	lsls	r2, r1, #31
 800cdac:	bf44      	itt	mi
 800cdae:	f041 0120 	orrmi.w	r1, r1, #32
 800cdb2:	6021      	strmi	r1, [r4, #0]
 800cdb4:	b91b      	cbnz	r3, 800cdbe <_printf_i+0x15e>
 800cdb6:	6822      	ldr	r2, [r4, #0]
 800cdb8:	f022 0220 	bic.w	r2, r2, #32
 800cdbc:	6022      	str	r2, [r4, #0]
 800cdbe:	2210      	movs	r2, #16
 800cdc0:	e7b7      	b.n	800cd32 <_printf_i+0xd2>
 800cdc2:	064d      	lsls	r5, r1, #25
 800cdc4:	bf48      	it	mi
 800cdc6:	b29b      	uxthmi	r3, r3
 800cdc8:	e7ef      	b.n	800cdaa <_printf_i+0x14a>
 800cdca:	4665      	mov	r5, ip
 800cdcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdd0:	fb02 3311 	mls	r3, r2, r1, r3
 800cdd4:	5cc3      	ldrb	r3, [r0, r3]
 800cdd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cdda:	460b      	mov	r3, r1
 800cddc:	2900      	cmp	r1, #0
 800cdde:	d1f5      	bne.n	800cdcc <_printf_i+0x16c>
 800cde0:	e7b9      	b.n	800cd56 <_printf_i+0xf6>
 800cde2:	6813      	ldr	r3, [r2, #0]
 800cde4:	6825      	ldr	r5, [r4, #0]
 800cde6:	6961      	ldr	r1, [r4, #20]
 800cde8:	1d18      	adds	r0, r3, #4
 800cdea:	6010      	str	r0, [r2, #0]
 800cdec:	0628      	lsls	r0, r5, #24
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	d501      	bpl.n	800cdf6 <_printf_i+0x196>
 800cdf2:	6019      	str	r1, [r3, #0]
 800cdf4:	e002      	b.n	800cdfc <_printf_i+0x19c>
 800cdf6:	066a      	lsls	r2, r5, #25
 800cdf8:	d5fb      	bpl.n	800cdf2 <_printf_i+0x192>
 800cdfa:	8019      	strh	r1, [r3, #0]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	4665      	mov	r5, ip
 800ce02:	e7b9      	b.n	800cd78 <_printf_i+0x118>
 800ce04:	6813      	ldr	r3, [r2, #0]
 800ce06:	1d19      	adds	r1, r3, #4
 800ce08:	6011      	str	r1, [r2, #0]
 800ce0a:	681d      	ldr	r5, [r3, #0]
 800ce0c:	6862      	ldr	r2, [r4, #4]
 800ce0e:	2100      	movs	r1, #0
 800ce10:	4628      	mov	r0, r5
 800ce12:	f7f3 f9e5 	bl	80001e0 <memchr>
 800ce16:	b108      	cbz	r0, 800ce1c <_printf_i+0x1bc>
 800ce18:	1b40      	subs	r0, r0, r5
 800ce1a:	6060      	str	r0, [r4, #4]
 800ce1c:	6863      	ldr	r3, [r4, #4]
 800ce1e:	6123      	str	r3, [r4, #16]
 800ce20:	2300      	movs	r3, #0
 800ce22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce26:	e7a7      	b.n	800cd78 <_printf_i+0x118>
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	462a      	mov	r2, r5
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	4630      	mov	r0, r6
 800ce30:	47c0      	blx	r8
 800ce32:	3001      	adds	r0, #1
 800ce34:	d0aa      	beq.n	800cd8c <_printf_i+0x12c>
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	079b      	lsls	r3, r3, #30
 800ce3a:	d413      	bmi.n	800ce64 <_printf_i+0x204>
 800ce3c:	68e0      	ldr	r0, [r4, #12]
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	4298      	cmp	r0, r3
 800ce42:	bfb8      	it	lt
 800ce44:	4618      	movlt	r0, r3
 800ce46:	e7a3      	b.n	800cd90 <_printf_i+0x130>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	464a      	mov	r2, r9
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	4630      	mov	r0, r6
 800ce50:	47c0      	blx	r8
 800ce52:	3001      	adds	r0, #1
 800ce54:	d09a      	beq.n	800cd8c <_printf_i+0x12c>
 800ce56:	3501      	adds	r5, #1
 800ce58:	68e3      	ldr	r3, [r4, #12]
 800ce5a:	9a03      	ldr	r2, [sp, #12]
 800ce5c:	1a9b      	subs	r3, r3, r2
 800ce5e:	42ab      	cmp	r3, r5
 800ce60:	dcf2      	bgt.n	800ce48 <_printf_i+0x1e8>
 800ce62:	e7eb      	b.n	800ce3c <_printf_i+0x1dc>
 800ce64:	2500      	movs	r5, #0
 800ce66:	f104 0919 	add.w	r9, r4, #25
 800ce6a:	e7f5      	b.n	800ce58 <_printf_i+0x1f8>
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1ac      	bne.n	800cdca <_printf_i+0x16a>
 800ce70:	7803      	ldrb	r3, [r0, #0]
 800ce72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce7a:	e76c      	b.n	800cd56 <_printf_i+0xf6>
 800ce7c:	0800dce3 	.word	0x0800dce3
 800ce80:	0800dcf4 	.word	0x0800dcf4

0800ce84 <_sbrk_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4c06      	ldr	r4, [pc, #24]	; (800cea0 <_sbrk_r+0x1c>)
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	f7f6 fa2e 	bl	80032f0 <_sbrk>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_sbrk_r+0x1a>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_sbrk_r+0x1a>
 800ce9c:	602b      	str	r3, [r5, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	20003898 	.word	0x20003898

0800cea4 <__sread>:
 800cea4:	b510      	push	{r4, lr}
 800cea6:	460c      	mov	r4, r1
 800cea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceac:	f000 f8e2 	bl	800d074 <_read_r>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	bfab      	itete	ge
 800ceb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ceb8:	181b      	addge	r3, r3, r0
 800ceba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cebe:	bfac      	ite	ge
 800cec0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cec2:	81a3      	strhlt	r3, [r4, #12]
 800cec4:	bd10      	pop	{r4, pc}

0800cec6 <__swrite>:
 800cec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceca:	461f      	mov	r7, r3
 800cecc:	898b      	ldrh	r3, [r1, #12]
 800cece:	05db      	lsls	r3, r3, #23
 800ced0:	4605      	mov	r5, r0
 800ced2:	460c      	mov	r4, r1
 800ced4:	4616      	mov	r6, r2
 800ced6:	d505      	bpl.n	800cee4 <__swrite+0x1e>
 800ced8:	2302      	movs	r3, #2
 800ceda:	2200      	movs	r2, #0
 800cedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee0:	f000 f874 	bl	800cfcc <_lseek_r>
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceee:	81a3      	strh	r3, [r4, #12]
 800cef0:	4632      	mov	r2, r6
 800cef2:	463b      	mov	r3, r7
 800cef4:	4628      	mov	r0, r5
 800cef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefa:	f000 b823 	b.w	800cf44 <_write_r>

0800cefe <__sseek>:
 800cefe:	b510      	push	{r4, lr}
 800cf00:	460c      	mov	r4, r1
 800cf02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf06:	f000 f861 	bl	800cfcc <_lseek_r>
 800cf0a:	1c43      	adds	r3, r0, #1
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	bf15      	itete	ne
 800cf10:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf1a:	81a3      	strheq	r3, [r4, #12]
 800cf1c:	bf18      	it	ne
 800cf1e:	81a3      	strhne	r3, [r4, #12]
 800cf20:	bd10      	pop	{r4, pc}

0800cf22 <__sclose>:
 800cf22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf26:	f000 b81f 	b.w	800cf68 <_close_r>

0800cf2a <__ascii_wctomb>:
 800cf2a:	b149      	cbz	r1, 800cf40 <__ascii_wctomb+0x16>
 800cf2c:	2aff      	cmp	r2, #255	; 0xff
 800cf2e:	bf85      	ittet	hi
 800cf30:	238a      	movhi	r3, #138	; 0x8a
 800cf32:	6003      	strhi	r3, [r0, #0]
 800cf34:	700a      	strbls	r2, [r1, #0]
 800cf36:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf3a:	bf98      	it	ls
 800cf3c:	2001      	movls	r0, #1
 800cf3e:	4770      	bx	lr
 800cf40:	4608      	mov	r0, r1
 800cf42:	4770      	bx	lr

0800cf44 <_write_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4c07      	ldr	r4, [pc, #28]	; (800cf64 <_write_r+0x20>)
 800cf48:	4605      	mov	r5, r0
 800cf4a:	4608      	mov	r0, r1
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	2200      	movs	r2, #0
 800cf50:	6022      	str	r2, [r4, #0]
 800cf52:	461a      	mov	r2, r3
 800cf54:	f7f6 f97c 	bl	8003250 <_write>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d102      	bne.n	800cf62 <_write_r+0x1e>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	b103      	cbz	r3, 800cf62 <_write_r+0x1e>
 800cf60:	602b      	str	r3, [r5, #0]
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	20003898 	.word	0x20003898

0800cf68 <_close_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4c06      	ldr	r4, [pc, #24]	; (800cf84 <_close_r+0x1c>)
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	4605      	mov	r5, r0
 800cf70:	4608      	mov	r0, r1
 800cf72:	6023      	str	r3, [r4, #0]
 800cf74:	f7f6 f988 	bl	8003288 <_close>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_close_r+0x1a>
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_close_r+0x1a>
 800cf80:	602b      	str	r3, [r5, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20003898 	.word	0x20003898

0800cf88 <_fstat_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4c07      	ldr	r4, [pc, #28]	; (800cfa8 <_fstat_r+0x20>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4605      	mov	r5, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	4611      	mov	r1, r2
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	f7f6 f983 	bl	80032a0 <_fstat>
 800cf9a:	1c43      	adds	r3, r0, #1
 800cf9c:	d102      	bne.n	800cfa4 <_fstat_r+0x1c>
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	b103      	cbz	r3, 800cfa4 <_fstat_r+0x1c>
 800cfa2:	602b      	str	r3, [r5, #0]
 800cfa4:	bd38      	pop	{r3, r4, r5, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20003898 	.word	0x20003898

0800cfac <_isatty_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4c06      	ldr	r4, [pc, #24]	; (800cfc8 <_isatty_r+0x1c>)
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	4608      	mov	r0, r1
 800cfb6:	6023      	str	r3, [r4, #0]
 800cfb8:	f7f6 f982 	bl	80032c0 <_isatty>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_isatty_r+0x1a>
 800cfc0:	6823      	ldr	r3, [r4, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_isatty_r+0x1a>
 800cfc4:	602b      	str	r3, [r5, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	20003898 	.word	0x20003898

0800cfcc <_lseek_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4c07      	ldr	r4, [pc, #28]	; (800cfec <_lseek_r+0x20>)
 800cfd0:	4605      	mov	r5, r0
 800cfd2:	4608      	mov	r0, r1
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	6022      	str	r2, [r4, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f7f6 f97b 	bl	80032d6 <_lseek>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d102      	bne.n	800cfea <_lseek_r+0x1e>
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	b103      	cbz	r3, 800cfea <_lseek_r+0x1e>
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	bd38      	pop	{r3, r4, r5, pc}
 800cfec:	20003898 	.word	0x20003898

0800cff0 <memmove>:
 800cff0:	4288      	cmp	r0, r1
 800cff2:	b510      	push	{r4, lr}
 800cff4:	eb01 0302 	add.w	r3, r1, r2
 800cff8:	d807      	bhi.n	800d00a <memmove+0x1a>
 800cffa:	1e42      	subs	r2, r0, #1
 800cffc:	4299      	cmp	r1, r3
 800cffe:	d00a      	beq.n	800d016 <memmove+0x26>
 800d000:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d004:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d008:	e7f8      	b.n	800cffc <memmove+0xc>
 800d00a:	4283      	cmp	r3, r0
 800d00c:	d9f5      	bls.n	800cffa <memmove+0xa>
 800d00e:	1881      	adds	r1, r0, r2
 800d010:	1ad2      	subs	r2, r2, r3
 800d012:	42d3      	cmn	r3, r2
 800d014:	d100      	bne.n	800d018 <memmove+0x28>
 800d016:	bd10      	pop	{r4, pc}
 800d018:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d01c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d020:	e7f7      	b.n	800d012 <memmove+0x22>

0800d022 <__malloc_lock>:
 800d022:	4770      	bx	lr

0800d024 <__malloc_unlock>:
 800d024:	4770      	bx	lr

0800d026 <_realloc_r>:
 800d026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d028:	4607      	mov	r7, r0
 800d02a:	4614      	mov	r4, r2
 800d02c:	460e      	mov	r6, r1
 800d02e:	b921      	cbnz	r1, 800d03a <_realloc_r+0x14>
 800d030:	4611      	mov	r1, r2
 800d032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d036:	f7ff bab1 	b.w	800c59c <_malloc_r>
 800d03a:	b922      	cbnz	r2, 800d046 <_realloc_r+0x20>
 800d03c:	f7ff fa60 	bl	800c500 <_free_r>
 800d040:	4625      	mov	r5, r4
 800d042:	4628      	mov	r0, r5
 800d044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d046:	f000 f827 	bl	800d098 <_malloc_usable_size_r>
 800d04a:	42a0      	cmp	r0, r4
 800d04c:	d20f      	bcs.n	800d06e <_realloc_r+0x48>
 800d04e:	4621      	mov	r1, r4
 800d050:	4638      	mov	r0, r7
 800d052:	f7ff faa3 	bl	800c59c <_malloc_r>
 800d056:	4605      	mov	r5, r0
 800d058:	2800      	cmp	r0, #0
 800d05a:	d0f2      	beq.n	800d042 <_realloc_r+0x1c>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4622      	mov	r2, r4
 800d060:	f7fe fd99 	bl	800bb96 <memcpy>
 800d064:	4631      	mov	r1, r6
 800d066:	4638      	mov	r0, r7
 800d068:	f7ff fa4a 	bl	800c500 <_free_r>
 800d06c:	e7e9      	b.n	800d042 <_realloc_r+0x1c>
 800d06e:	4635      	mov	r5, r6
 800d070:	e7e7      	b.n	800d042 <_realloc_r+0x1c>
	...

0800d074 <_read_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4c07      	ldr	r4, [pc, #28]	; (800d094 <_read_r+0x20>)
 800d078:	4605      	mov	r5, r0
 800d07a:	4608      	mov	r0, r1
 800d07c:	4611      	mov	r1, r2
 800d07e:	2200      	movs	r2, #0
 800d080:	6022      	str	r2, [r4, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	f7f6 f8c7 	bl	8003216 <_read>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_read_r+0x1e>
 800d08c:	6823      	ldr	r3, [r4, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_read_r+0x1e>
 800d090:	602b      	str	r3, [r5, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	20003898 	.word	0x20003898

0800d098 <_malloc_usable_size_r>:
 800d098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d09c:	1f18      	subs	r0, r3, #4
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfbc      	itt	lt
 800d0a2:	580b      	ldrlt	r3, [r1, r0]
 800d0a4:	18c0      	addlt	r0, r0, r3
 800d0a6:	4770      	bx	lr

0800d0a8 <trunc>:
 800d0a8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800d0ac:	ec5c bb10 	vmov	fp, ip, d0
 800d0b0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800d0b4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800d0b8:	2913      	cmp	r1, #19
 800d0ba:	4664      	mov	r4, ip
 800d0bc:	dc11      	bgt.n	800d0e2 <trunc+0x3a>
 800d0be:	2900      	cmp	r1, #0
 800d0c0:	bfa7      	ittee	ge
 800d0c2:	4b15      	ldrge	r3, [pc, #84]	; (800d118 <trunc+0x70>)
 800d0c4:	fa43 f101 	asrge.w	r1, r3, r1
 800d0c8:	2200      	movlt	r2, #0
 800d0ca:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800d0ce:	bfa4      	itt	ge
 800d0d0:	2200      	movge	r2, #0
 800d0d2:	ea2c 0301 	bicge.w	r3, ip, r1
 800d0d6:	4693      	mov	fp, r2
 800d0d8:	469c      	mov	ip, r3
 800d0da:	ec4c bb10 	vmov	d0, fp, ip
 800d0de:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800d0e2:	2933      	cmp	r1, #51	; 0x33
 800d0e4:	dd0d      	ble.n	800d102 <trunc+0x5a>
 800d0e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d0ea:	d1f6      	bne.n	800d0da <trunc+0x32>
 800d0ec:	4663      	mov	r3, ip
 800d0ee:	ee10 2a10 	vmov	r2, s0
 800d0f2:	ee10 0a10 	vmov	r0, s0
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f7f3 f8c8 	bl	800028c <__adddf3>
 800d0fc:	4683      	mov	fp, r0
 800d0fe:	468c      	mov	ip, r1
 800d100:	e7eb      	b.n	800d0da <trunc+0x32>
 800d102:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800d106:	f04f 33ff 	mov.w	r3, #4294967295
 800d10a:	fa23 f000 	lsr.w	r0, r3, r0
 800d10e:	ea2b 0600 	bic.w	r6, fp, r0
 800d112:	46b3      	mov	fp, r6
 800d114:	46a4      	mov	ip, r4
 800d116:	e7e0      	b.n	800d0da <trunc+0x32>
 800d118:	000fffff 	.word	0x000fffff

0800d11c <_init>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	bf00      	nop
 800d120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d122:	bc08      	pop	{r3}
 800d124:	469e      	mov	lr, r3
 800d126:	4770      	bx	lr

0800d128 <_fini>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	bf00      	nop
 800d12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12e:	bc08      	pop	{r3}
 800d130:	469e      	mov	lr, r3
 800d132:	4770      	bx	lr
