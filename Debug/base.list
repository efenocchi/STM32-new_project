
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001498  08015b28  08015b28  00025b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fc0  08016fc0  00030668  2**0
                  CONTENTS
  4 .ARM          00000008  08016fc0  08016fc0  00026fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fc8  08016fc8  00030668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fc8  08016fc8  00026fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016fcc  08016fcc  00026fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  20000000  08016fd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000668  08017638  00030668  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  08017638  00034990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030668  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b7f9  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006289  00000000  00000000  0006be91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029d0  00000000  00000000  00072120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002708  00000000  00000000  00074af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d555  00000000  00000000  000771f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000220ce  00000000  00000000  000a474d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a047  00000000  00000000  000c681b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d0862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c170  00000000  00000000  001d08e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000668 	.word	0x20000668
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015b0c 	.word	0x08015b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000066c 	.word	0x2000066c
 80001cc:	08015b0c 	.word	0x08015b0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b2f      	cmp	r3, #47	; 0x2f
 8000eb6:	d906      	bls.n	8000ec6 <Hex2Num+0x1e>
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b39      	cmp	r3, #57	; 0x39
 8000ebc:	d803      	bhi.n	8000ec6 <Hex2Num+0x1e>
        return a - '0';
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3b30      	subs	r3, #48	; 0x30
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e014      	b.n	8000ef0 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b60      	cmp	r3, #96	; 0x60
 8000eca:	d906      	bls.n	8000eda <Hex2Num+0x32>
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b66      	cmp	r3, #102	; 0x66
 8000ed0:	d803      	bhi.n	8000eda <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b57      	subs	r3, #87	; 0x57
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	e00a      	b.n	8000ef0 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b40      	cmp	r3, #64	; 0x40
 8000ede:	d906      	bls.n	8000eee <Hex2Num+0x46>
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b46      	cmp	r3, #70	; 0x46
 8000ee4:	d803      	bhi.n	8000eee <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	3b37      	subs	r3, #55	; 0x37
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	e000      	b.n	8000ef0 <Hex2Num+0x48>
    }

    return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f0e:	e012      	b.n	8000f36 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ffc4 	bl	8000ea8 <Hex2Num>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
        i++;
 8000f30:	7afb      	ldrb	r3, [r7, #11]
 8000f32:	3301      	adds	r3, #1
 8000f34:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f3c:	d903      	bls.n	8000f46 <ParseHexNumber+0x4a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b39      	cmp	r3, #57	; 0x39
 8000f44:	d9e4      	bls.n	8000f10 <ParseHexNumber+0x14>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b60      	cmp	r3, #96	; 0x60
 8000f4c:	d903      	bls.n	8000f56 <ParseHexNumber+0x5a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b66      	cmp	r3, #102	; 0x66
 8000f54:	d9dc      	bls.n	8000f10 <ParseHexNumber+0x14>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b40      	cmp	r3, #64	; 0x40
 8000f5c:	d903      	bls.n	8000f66 <ParseHexNumber+0x6a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b46      	cmp	r3, #70	; 0x46
 8000f64:	d9d4      	bls.n	8000f10 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <ParseHexNumber+0x76>
        *cnt = i;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	7afa      	ldrb	r2, [r7, #11]
 8000f70:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b2d      	cmp	r3, #45	; 0x2d
 8000f98:	d119      	bne.n	8000fce <ParseNumber+0x52>
        minus = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
        i++;
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000faa:	e010      	b.n	8000fce <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3b30      	subs	r3, #48	; 0x30
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
        i++;
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd4:	d903      	bls.n	8000fde <ParseNumber+0x62>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b39      	cmp	r3, #57	; 0x39
 8000fdc:	d9e6      	bls.n	8000fac <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <ParseNumber+0x6e>
        *cnt = i;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	7bba      	ldrb	r2, [r7, #14]
 8000fe8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <ParseNumber+0x7a>
        return 0 - sum;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	e000      	b.n	8000ff8 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000ff6:	68bb      	ldr	r3, [r7, #8]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001012:	e019      	b.n	8001048 <ParseMAC+0x44>
    hexcnt = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b3a      	cmp	r3, #58	; 0x3a
 800101e:	d00e      	beq.n	800103e <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8001020:	f107 030e 	add.w	r3, r7, #14
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff68 	bl	8000efc <ParseHexNumber>
 800102c:	4601      	mov	r1, r0
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	73fa      	strb	r2, [r7, #15]
 8001034:	461a      	mov	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e1      	bne.n	8001014 <ParseMAC+0x10>
  }
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001066:	e019      	b.n	800109c <ParseIP+0x44>
    hexcnt = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b2e      	cmp	r3, #46	; 0x2e
 8001072:	d00e      	beq.n	8001092 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8001074:	f107 030e 	add.w	r3, r7, #14
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff7e 	bl	8000f7c <ParseNumber>
 8001080:	4601      	mov	r1, r0
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	73fa      	strb	r2, [r7, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4413      	add	r3, r2
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e1      	bne.n	8001068 <ParseIP+0x10>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3302      	adds	r3, #2
 80010be:	4934      	ldr	r1, [pc, #208]	; (8001190 <AT_ParseInfo+0xe4>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f012 fb1b 	bl	80136fc <strtok>
 80010c6:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80010c8:	e05a      	b.n	8001180 <AT_ParseInfo+0xd4>
    switch (num++) {
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	72fa      	strb	r2, [r7, #11]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d84f      	bhi.n	8001174 <AT_ParseInfo+0xc8>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <AT_ParseInfo+0x30>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010f9 	.word	0x080010f9
 80010e0:	08001107 	.word	0x08001107
 80010e4:	08001117 	.word	0x08001117
 80010e8:	08001127 	.word	0x08001127
 80010ec:	08001137 	.word	0x08001137
 80010f0:	08001147 	.word	0x08001147
 80010f4:	0800115b 	.word	0x0800115b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f012 facc 	bl	801369c <strncpy>
      break;
 8001104:	e037      	b.n	8001176 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3320      	adds	r3, #32
 800110a:	2218      	movs	r2, #24
 800110c:	68f9      	ldr	r1, [r7, #12]
 800110e:	4618      	mov	r0, r3
 8001110:	f012 fac4 	bl	801369c <strncpy>
      break;
 8001114:	e02f      	b.n	8001176 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3338      	adds	r3, #56	; 0x38
 800111a:	2210      	movs	r2, #16
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f012 fabc 	bl	801369c <strncpy>
      break;
 8001124:	e027      	b.n	8001176 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3348      	adds	r3, #72	; 0x48
 800112a:	2210      	movs	r2, #16
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	4618      	mov	r0, r3
 8001130:	f012 fab4 	bl	801369c <strncpy>
      break;
 8001134:	e01f      	b.n	8001176 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3358      	adds	r3, #88	; 0x58
 800113a:	2210      	movs	r2, #16
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	4618      	mov	r0, r3
 8001140:	f012 faac 	bl	801369c <strncpy>
      break;
 8001144:	e017      	b.n	8001176 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001146:	2100      	movs	r1, #0
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff ff17 	bl	8000f7c <ParseNumber>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001158:	e00d      	b.n	8001176 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <AT_ParseInfo+0xe8>)
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f012 facd 	bl	80136fc <strtok>
 8001162:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3368      	adds	r3, #104	; 0x68
 8001168:	2220      	movs	r2, #32
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f012 fa95 	bl	801369c <strncpy>
      break;
 8001172:	e000      	b.n	8001176 <AT_ParseInfo+0xca>

    default: break;
 8001174:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001176:	4906      	ldr	r1, [pc, #24]	; (8001190 <AT_ParseInfo+0xe4>)
 8001178:	2000      	movs	r0, #0
 800117a:	f012 fabf 	bl	80136fc <strtok>
 800117e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1a1      	bne.n	80010ca <AT_ParseInfo+0x1e>
  }
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	08015b58 	.word	0x08015b58
 8001194:	08015b5c 	.word	0x08015b5c

08001198 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3302      	adds	r3, #2
 80011aa:	4952      	ldr	r1, [pc, #328]	; (80012f4 <AT_ParseConnSettings+0x15c>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f012 faa5 	bl	80136fc <strtok>
 80011b2:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80011b4:	e095      	b.n	80012e2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	73fa      	strb	r2, [r7, #15]
 80011bc:	2b0b      	cmp	r3, #11
 80011be:	d87f      	bhi.n	80012c0 <AT_ParseConnSettings+0x128>
 80011c0:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <AT_ParseConnSettings+0x30>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011f9 	.word	0x080011f9
 80011cc:	08001207 	.word	0x08001207
 80011d0:	08001217 	.word	0x08001217
 80011d4:	0800122b 	.word	0x0800122b
 80011d8:	0800123f 	.word	0x0800123f
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001261 	.word	0x08001261
 80011e4:	0800126f 	.word	0x0800126f
 80011e8:	0800127d 	.word	0x0800127d
 80011ec:	0800128b 	.word	0x0800128b
 80011f0:	08001299 	.word	0x08001299
 80011f4:	080012ad 	.word	0x080012ad
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2221      	movs	r2, #33	; 0x21
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	4618      	mov	r0, r3
 8001200:	f012 fa4c 	bl	801369c <strncpy>
      break;
 8001204:	e05d      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3321      	adds	r3, #33	; 0x21
 800120a:	2221      	movs	r2, #33	; 0x21
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	4618      	mov	r0, r3
 8001210:	f012 fa44 	bl	801369c <strncpy>
      break;
 8001214:	e055      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001216:	2100      	movs	r1, #0
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f7ff feaf 	bl	8000f7c <ParseNumber>
 800121e:	4603      	mov	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001228:	e04b      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800122a:	2100      	movs	r1, #0
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f7ff fea5 	bl	8000f7c <ParseNumber>
 8001232:	4603      	mov	r3, r0
 8001234:	b2da      	uxtb	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800123c:	e041      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800123e:	2100      	movs	r1, #0
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f7ff fe9b 	bl	8000f7c <ParseNumber>
 8001246:	4603      	mov	r3, r0
 8001248:	b2da      	uxtb	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001250:	e037      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3348      	adds	r3, #72	; 0x48
 8001256:	4619      	mov	r1, r3
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f7ff fefd 	bl	8001058 <ParseIP>
      break;
 800125e:	e030      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	334c      	adds	r3, #76	; 0x4c
 8001264:	4619      	mov	r1, r3
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f7ff fef6 	bl	8001058 <ParseIP>
      break;
 800126c:	e029      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3350      	adds	r3, #80	; 0x50
 8001272:	4619      	mov	r1, r3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f7ff feef 	bl	8001058 <ParseIP>
      break;
 800127a:	e022      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3354      	adds	r3, #84	; 0x54
 8001280:	4619      	mov	r1, r3
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f7ff fee8 	bl	8001058 <ParseIP>
      break;
 8001288:	e01b      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3358      	adds	r3, #88	; 0x58
 800128e:	4619      	mov	r1, r3
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f7ff fee1 	bl	8001058 <ParseIP>
      break;
 8001296:	e014      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001298:	2100      	movs	r1, #0
 800129a:	68b8      	ldr	r0, [r7, #8]
 800129c:	f7ff fe6e 	bl	8000f7c <ParseNumber>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80012aa:	e00a      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80012ac:	2100      	movs	r1, #0
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f7ff fe64 	bl	8000f7c <ParseNumber>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80012be:	e000      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    default:
      break;
 80012c0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80012c2:	490c      	ldr	r1, [pc, #48]	; (80012f4 <AT_ParseConnSettings+0x15c>)
 80012c4:	2000      	movs	r0, #0
 80012c6:	f012 fa19 	bl	80136fc <strtok>
 80012ca:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <AT_ParseConnSettings+0x14a>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2c      	cmp	r3, #44	; 0x2c
 80012da:	d102      	bne.n	80012e2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f af66 	bne.w	80011b6 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08015b58 	.word	0x08015b58

080012f8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3302      	adds	r3, #2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b31      	cmp	r3, #49	; 0x31
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	701a      	strb	r2, [r3, #0]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f7fe ff46 	bl	80001d0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b299      	uxth	r1, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800134e:	461a      	mov	r2, r3
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	47a0      	blx	r4
 8001354:	4603      	mov	r3, r0
 8001356:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	dd3e      	ble.n	80013dc <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800136a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
 8001372:	4603      	mov	r3, r0
 8001374:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800137a:	2b00      	cmp	r3, #0
 800137c:	dd27      	ble.n	80013ce <AT_ExecuteCommand+0xaa>
 800137e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001386:	dc22      	bgt.n	80013ce <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001390:	d105      	bne.n	800139e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001392:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001396:	b29b      	uxth	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800139e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80013aa:	490f      	ldr	r1, [pc, #60]	; (80013e8 <AT_ExecuteCommand+0xc4>)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f012 f98a 	bl	80136c6 <strstr>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e010      	b.n	80013de <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013bc:	490b      	ldr	r1, [pc, #44]	; (80013ec <AT_ExecuteCommand+0xc8>)
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f012 f981 	bl	80136c6 <strstr>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013ca:	2305      	movs	r3, #5
 80013cc:	e007      	b.n	80013de <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80013ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013d2:	f113 0f04 	cmn.w	r3, #4
 80013d6:	d101      	bne.n	80013dc <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80013d8:	2306      	movs	r3, #6
 80013da:	e000      	b.n	80013de <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80013dc:	2304      	movs	r3, #4
}
 80013de:	4618      	mov	r0, r3
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	08015b6c 	.word	0x08015b6c
 80013ec:	08015b78 	.word	0x08015b78

080013f0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7fe fee0 	bl	80001d0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001414:	8a7b      	ldrh	r3, [r7, #18]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <AT_RequestSendData+0x32>
 800141e:	2302      	movs	r3, #2
 8001420:	e053      	b.n	80014ca <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800142e:	8a79      	ldrh	r1, [r7, #18]
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	4798      	blx	r3
 8001434:	4603      	mov	r3, r0
 8001436:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001438:	8a3a      	ldrh	r2, [r7, #16]
 800143a:	8a7b      	ldrh	r3, [r7, #18]
 800143c:	429a      	cmp	r2, r3
 800143e:	d143      	bne.n	80014c8 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800144c:	8879      	ldrh	r1, [r7, #2]
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
 8001452:	4603      	mov	r3, r0
 8001454:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d131      	bne.n	80014c4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800146c:	2100      	movs	r1, #0
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	4798      	blx	r3
 8001472:	4603      	mov	r3, r0
 8001474:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001476:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	dd19      	ble.n	80014b2 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800147e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	4413      	add	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800148a:	4912      	ldr	r1, [pc, #72]	; (80014d4 <AT_RequestSendData+0xe4>)
 800148c:	6a38      	ldr	r0, [r7, #32]
 800148e:	f012 f91a 	bl	80136c6 <strstr>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e016      	b.n	80014ca <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <AT_RequestSendData+0xe8>)
 800149e:	6a38      	ldr	r0, [r7, #32]
 80014a0:	f012 f911 	bl	80136c6 <strstr>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80014aa:	2305      	movs	r3, #5
 80014ac:	e00d      	b.n	80014ca <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80014ae:	2302      	movs	r3, #2
 80014b0:	e00b      	b.n	80014ca <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80014b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014b6:	f113 0f04 	cmn.w	r3, #4
 80014ba:	d101      	bne.n	80014c0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80014bc:	2306      	movs	r3, #6
 80014be:	e004      	b.n	80014ca <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80014c4:	2302      	movs	r3, #2
 80014c6:	e000      	b.n	80014ca <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80014c8:	2304      	movs	r3, #4
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08015b6c 	.word	0x08015b6c
 80014d8:	08015b78 	.word	0x08015b78

080014dc <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f7fe fe69 	bl	80001d0 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b299      	uxth	r1, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001508:	461a      	mov	r2, r3
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	47a0      	blx	r4
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	dd6f      	ble.n	80015f4 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001520:	2100      	movs	r1, #0
 8001522:	6938      	ldr	r0, [r7, #16]
 8001524:	4798      	blx	r3
 8001526:	4603      	mov	r3, r0
 8001528:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b0d      	cmp	r3, #13
 8001530:	d104      	bne.n	800153c <AT_RequestReceiveData+0x60>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b0a      	cmp	r3, #10
 800153a:	d001      	beq.n	8001540 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800153c:	2304      	movs	r3, #4
 800153e:	e05a      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3b02      	subs	r3, #2
 8001544:	617b      	str	r3, [r7, #20]
    p+=2;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	3302      	adds	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b07      	cmp	r3, #7
 8001550:	d94a      	bls.n	80015e8 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8001552:	e002      	b.n	800155a <AT_RequestReceiveData+0x7e>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3b01      	subs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <AT_RequestReceiveData+0x92>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3b01      	subs	r3, #1
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b15      	cmp	r3, #21
 800156c:	d0f2      	beq.n	8001554 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4413      	add	r3, r2
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3b08      	subs	r3, #8
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	491f      	ldr	r1, [pc, #124]	; (8001600 <AT_RequestReceiveData+0x124>)
 8001582:	4618      	mov	r0, r3
 8001584:	f012 f89f 	bl	80136c6 <strstr>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b08      	subs	r3, #8
 8001594:	b29a      	uxth	r2, r3
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d202      	bcs.n	80015aa <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f011 ff87 	bl	80134c6 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e01c      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3b04      	subs	r3, #4
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4413      	add	r3, r2
 80015c4:	2204      	movs	r2, #4
 80015c6:	490f      	ldr	r1, [pc, #60]	; (8001604 <AT_RequestReceiveData+0x128>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f011 ff6d 	bl	80134a8 <memcmp>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d104      	bne.n	80015de <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80015da:	2305      	movs	r3, #5
 80015dc:	e00b      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80015e4:	2305      	movs	r3, #5
 80015e6:	e006      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f113 0f04 	cmn.w	r3, #4
 80015ee:	d101      	bne.n	80015f4 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80015f0:	2306      	movs	r3, #6
 80015f2:	e000      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80015f4:	2304      	movs	r3, #4
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	08015b6c 	.word	0x08015b6c
 8001604:	08015b80 	.word	0x08015b80

08001608 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001610:	2302      	movs	r3, #2
 8001612:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f247 5230 	movw	r2, #30000	; 0x7530
 800161a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001624:	2000      	movs	r0, #0
 8001626:	4798      	blx	r3
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d113      	bne.n	8001656 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001634:	461a      	mov	r2, r3
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <ES_WIFI_Init+0x58>)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fe73 	bl	8001324 <AT_ExecuteCommand>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800164e:	4619      	mov	r1, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fd2b 	bl	80010ac <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	08015b88 	.word	0x08015b88

08001664 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001690:	2302      	movs	r3, #2
 8001692:	e014      	b.n	80016be <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	4931      	ldr	r1, [pc, #196]	; (80017a8 <ES_WIFI_Connect+0xdc>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f011 ffb1 	bl	801364c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f6:	461a      	mov	r2, r3
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff fe13 	bl	8001324 <AT_ExecuteCommand>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d14a      	bne.n	800179e <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4926      	ldr	r1, [pc, #152]	; (80017ac <ES_WIFI_Connect+0xe0>)
 8001712:	4618      	mov	r0, r3
 8001714:	f011 ff9a 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001724:	461a      	mov	r2, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fdfc 	bl	8001324 <AT_ExecuteCommand>
 800172c:	4603      	mov	r3, r0
 800172e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d133      	bne.n	800179e <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	491a      	ldr	r1, [pc, #104]	; (80017b0 <ES_WIFI_Connect+0xe4>)
 8001748:	4618      	mov	r0, r3
 800174a:	f011 ff7f 	bl	801364c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175a:	461a      	mov	r2, r3
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fde1 	bl	8001324 <AT_ExecuteCommand>
 8001762:	4603      	mov	r3, r0
 8001764:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d118      	bne.n	800179e <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <ES_WIFI_Connect+0xe8>)
 8001774:	6810      	ldr	r0, [r2, #0]
 8001776:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001784:	461a      	mov	r2, r3
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff fdcc 	bl	8001324 <AT_ExecuteCommand>
 800178c:	4603      	mov	r3, r0
 800178e:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08015ba0 	.word	0x08015ba0
 80017ac:	08015ba8 	.word	0x08015ba8
 80017b0:	08015bb0 	.word	0x08015bb0
 80017b4:	08015bb8 	.word	0x08015bb8

080017b8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <ES_WIFI_IsConnected+0x54>)
 80017c8:	6810      	ldr	r0, [r2, #0]
 80017ca:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d8:	461a      	mov	r2, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fda2 	bl	8001324 <AT_ExecuteCommand>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	33d2      	adds	r3, #210	; 0xd2
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7ff fd7e 	bl	80012f8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08015bbc 	.word	0x08015bbc

08001810 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <ES_WIFI_GetNetworkSettings+0x50>)
 8001820:	6810      	ldr	r0, [r2, #0]
 8001822:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001830:	461a      	mov	r2, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fd76 	bl	8001324 <AT_ExecuteCommand>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	338d      	adds	r3, #141	; 0x8d
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff fca2 	bl	8001198 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08015bc4 	.word	0x08015bc4

08001864 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <ES_WIFI_GetMACAddress+0x58>)
 8001876:	6810      	ldr	r0, [r2, #0]
 8001878:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001886:	461a      	mov	r2, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fd4b 	bl	8001324 <AT_ExecuteCommand>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10c      	bne.n	80018b2 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800189e:	3302      	adds	r3, #2
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <ES_WIFI_GetMACAddress+0x5c>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f011 ff2a 	bl	80136fc <strtok>
 80018a8:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f7ff fba9 	bl	8001004 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08015c20 	.word	0x08015c20
 80018c0:	08015c24 	.word	0x08015c24

080018c4 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <ES_WIFI_StartClientConnection+0x1e>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d105      	bne.n	80018ee <ES_WIFI_StartClientConnection+0x2a>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	885b      	ldrh	r3, [r3, #2]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <ES_WIFI_StartClientConnection+0x2a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e0c3      	b.n	8001a76 <ES_WIFI_StartClientConnection+0x1b2>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4961      	ldr	r1, [pc, #388]	; (8001a80 <ES_WIFI_StartClientConnection+0x1bc>)
 80018fc:	f011 fea6 	bl	801364c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800190c:	461a      	mov	r2, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fd08 	bl	8001324 <AT_ExecuteCommand>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d114      	bne.n	8001948 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4956      	ldr	r1, [pc, #344]	; (8001a84 <ES_WIFI_StartClientConnection+0x1c0>)
 800192c:	f011 fe8e 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800193c:	461a      	mov	r2, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fcf0 	bl	8001324 <AT_ExecuteCommand>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d114      	bne.n	8001978 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	461a      	mov	r2, r3
 800195a:	494b      	ldr	r1, [pc, #300]	; (8001a88 <ES_WIFI_StartClientConnection+0x1c4>)
 800195c:	f011 fe76 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800196c:	461a      	mov	r2, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fcd8 	bl	8001324 <AT_ExecuteCommand>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d11c      	bne.n	80019b8 <ES_WIFI_StartClientConnection+0xf4>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <ES_WIFI_StartClientConnection+0xca>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d114      	bne.n	80019b8 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	885b      	ldrh	r3, [r3, #2]
 8001998:	461a      	mov	r2, r3
 800199a:	493c      	ldr	r1, [pc, #240]	; (8001a8c <ES_WIFI_StartClientConnection+0x1c8>)
 800199c:	f011 fe56 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ac:	461a      	mov	r2, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fcb8 	bl	8001324 <AT_ExecuteCommand>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d128      	bne.n	8001a10 <ES_WIFI_StartClientConnection+0x14c>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <ES_WIFI_StartClientConnection+0x10a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d120      	bne.n	8001a10 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	4619      	mov	r1, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	79db      	ldrb	r3, [r3, #7]
 80019de:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019e4:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	4623      	mov	r3, r4
 80019f0:	460a      	mov	r2, r1
 80019f2:	4927      	ldr	r1, [pc, #156]	; (8001a90 <ES_WIFI_StartClientConnection+0x1cc>)
 80019f4:	f011 fe2a 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a04:	461a      	mov	r2, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fc8c 	bl	8001324 <AT_ExecuteCommand>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d117      	bne.n	8001a46 <ES_WIFI_StartClientConnection+0x182>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d113      	bne.n	8001a46 <ES_WIFI_StartClientConnection+0x182>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a24:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <ES_WIFI_StartClientConnection+0x1d0>)
 8001a26:	6810      	ldr	r0, [r2, #0]
 8001a28:	6018      	str	r0, [r3, #0]
 8001a2a:	8892      	ldrh	r2, [r2, #4]
 8001a2c:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fc71 	bl	8001324 <AT_ExecuteCommand>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d113      	bne.n	8001a74 <ES_WIFI_StartClientConnection+0x1b0>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <ES_WIFI_StartClientConnection+0x1d4>)
 8001a54:	6810      	ldr	r0, [r2, #0]
 8001a56:	6018      	str	r0, [r3, #0]
 8001a58:	8892      	ldrh	r2, [r2, #4]
 8001a5a:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a68:	461a      	mov	r2, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fc5a 	bl	8001324 <AT_ExecuteCommand>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08015c88 	.word	0x08015c88
 8001a84:	08015c90 	.word	0x08015c90
 8001a88:	08015c98 	.word	0x08015c98
 8001a8c:	08015ca0 	.word	0x08015ca0
 8001a90:	08015ca8 	.word	0x08015ca8
 8001a94:	08015cb8 	.word	0x08015cb8
 8001a98:	08015cc0 	.word	0x08015cc0

08001a9c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	72fb      	strb	r3, [r7, #11]
 8001aac:	4613      	mov	r3, r2
 8001aae:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e001      	b.n	8001ac4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001ac4:	893b      	ldrh	r3, [r7, #8]
 8001ac6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001aca:	d302      	bcc.n	8001ad2 <ES_WIFI_SendData+0x36>
 8001acc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001ad0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	893a      	ldrh	r2, [r7, #8]
 8001ad6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ade:	7afa      	ldrb	r2, [r7, #11]
 8001ae0:	4942      	ldr	r1, [pc, #264]	; (8001bec <ES_WIFI_SendData+0x150>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f011 fdb2 	bl	801364c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001af4:	461a      	mov	r2, r3
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fc14 	bl	8001324 <AT_ExecuteCommand>
 8001afc:	4603      	mov	r3, r0
 8001afe:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d15e      	bne.n	8001bc4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4938      	ldr	r1, [pc, #224]	; (8001bf0 <ES_WIFI_SendData+0x154>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f011 fd9b 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b22:	461a      	mov	r2, r3
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fbfd 	bl	8001324 <AT_ExecuteCommand>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d13d      	bne.n	8001bb0 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b3a:	893a      	ldrh	r2, [r7, #8]
 8001b3c:	492d      	ldr	r1, [pc, #180]	; (8001bf4 <ES_WIFI_SendData+0x158>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f011 fd84 	bl	801364c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b50:	893a      	ldrh	r2, [r7, #8]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fc49 	bl	80013f0 <AT_RequestSendData>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d119      	bne.n	8001b9c <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b6e:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <ES_WIFI_SendData+0x15c>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f011 fda8 	bl	80136c6 <strstr>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d02c      	beq.n	8001bd6 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001b7c:	f640 025b 	movw	r2, #2139	; 0x85b
 8001b80:	491e      	ldr	r1, [pc, #120]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001b82:	481f      	ldr	r0, [pc, #124]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001b84:	f011 fcb2 	bl	80134ec <iprintf>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481c      	ldr	r0, [pc, #112]	; (8001c04 <ES_WIFI_SendData+0x168>)
 8001b92:	f011 fcab 	bl	80134ec <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001b96:	2302      	movs	r3, #2
 8001b98:	74fb      	strb	r3, [r7, #19]
 8001b9a:	e01c      	b.n	8001bd6 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001b9c:	f640 0261 	movw	r2, #2145	; 0x861
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001ba2:	4817      	ldr	r0, [pc, #92]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001ba4:	f011 fca2 	bl	80134ec <iprintf>
 8001ba8:	4817      	ldr	r0, [pc, #92]	; (8001c08 <ES_WIFI_SendData+0x16c>)
 8001baa:	f011 fd13 	bl	80135d4 <puts>
 8001bae:	e012      	b.n	8001bd6 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001bb0:	f640 0266 	movw	r2, #2150	; 0x866
 8001bb4:	4911      	ldr	r1, [pc, #68]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001bb8:	f011 fc98 	bl	80134ec <iprintf>
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <ES_WIFI_SendData+0x170>)
 8001bbe:	f011 fd09 	bl	80135d4 <puts>
 8001bc2:	e008      	b.n	8001bd6 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001bc4:	f640 026b 	movw	r2, #2155	; 0x86b
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001bcc:	f011 fc8e 	bl	80134ec <iprintf>
 8001bd0:	480f      	ldr	r0, [pc, #60]	; (8001c10 <ES_WIFI_SendData+0x174>)
 8001bd2:	f011 fcff 	bl	80135d4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d102      	bne.n	8001be2 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	08015c88 	.word	0x08015c88
 8001bf0:	08015e3c 	.word	0x08015e3c
 8001bf4:	08015e44 	.word	0x08015e44
 8001bf8:	08015e50 	.word	0x08015e50
 8001bfc:	08015d18 	.word	0x08015d18
 8001c00:	08015d30 	.word	0x08015d30
 8001c04:	08015e58 	.word	0x08015e58
 8001c08:	08015e74 	.word	0x08015e74
 8001c0c:	08015e90 	.word	0x08015e90
 8001c10:	08015ea4 	.word	0x08015ea4

08001c14 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
 8001c24:	4613      	mov	r3, r2
 8001c26:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e001      	b.n	8001c3c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001c3c:	893b      	ldrh	r3, [r7, #8]
 8001c3e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001c42:	f200 808a 	bhi.w	8001d5a <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c4c:	7afa      	ldrb	r2, [r7, #11]
 8001c4e:	4945      	ldr	r1, [pc, #276]	; (8001d64 <ES_WIFI_ReceiveData+0x150>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f011 fcfb 	bl	801364c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c62:	461a      	mov	r2, r3
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fb5d 	bl	8001324 <AT_ExecuteCommand>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d164      	bne.n	8001d3e <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c7a:	893a      	ldrh	r2, [r7, #8]
 8001c7c:	493a      	ldr	r1, [pc, #232]	; (8001d68 <ES_WIFI_ReceiveData+0x154>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f011 fce4 	bl	801364c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c90:	461a      	mov	r2, r3
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fb46 	bl	8001324 <AT_ExecuteCommand>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8001c9c:	7cfb      	ldrb	r3, [r7, #19]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d140      	bne.n	8001d24 <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4930      	ldr	r1, [pc, #192]	; (8001d6c <ES_WIFI_ReceiveData+0x158>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f011 fccd 	bl	801364c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7ff fb2f 	bl	8001324 <AT_ExecuteCommand>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11f      	bne.n	8001d10 <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cd6:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <ES_WIFI_ReceiveData+0x15c>)
 8001cd8:	6810      	ldr	r0, [r2, #0]
 8001cda:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ce2:	893a      	ldrh	r2, [r7, #8]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fbf5 	bl	80014dc <AT_RequestReceiveData>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001cf6:	7cfb      	ldrb	r3, [r7, #19]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02e      	beq.n	8001d5a <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8001cfc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001d00:	491c      	ldr	r1, [pc, #112]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d02:	481d      	ldr	r0, [pc, #116]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d04:	f011 fbf2 	bl	80134ec <iprintf>
 8001d08:	481c      	ldr	r0, [pc, #112]	; (8001d7c <ES_WIFI_ReceiveData+0x168>)
 8001d0a:	f011 fc63 	bl	80135d4 <puts>
 8001d0e:	e024      	b.n	8001d5a <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8001d10:	f640 1201 	movw	r2, #2305	; 0x901
 8001d14:	4917      	ldr	r1, [pc, #92]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d18:	f011 fbe8 	bl	80134ec <iprintf>
 8001d1c:	4818      	ldr	r0, [pc, #96]	; (8001d80 <ES_WIFI_ReceiveData+0x16c>)
 8001d1e:	f011 fc59 	bl	80135d4 <puts>
 8001d22:	e01a      	b.n	8001d5a <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8001d24:	f640 1206 	movw	r2, #2310	; 0x906
 8001d28:	4912      	ldr	r1, [pc, #72]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d2a:	4813      	ldr	r0, [pc, #76]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d2c:	f011 fbde 	bl	80134ec <iprintf>
 8001d30:	4814      	ldr	r0, [pc, #80]	; (8001d84 <ES_WIFI_ReceiveData+0x170>)
 8001d32:	f011 fc4f 	bl	80135d4 <puts>
        *Receivedlen = 0;
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	e00d      	b.n	8001d5a <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8001d3e:	f640 120c 	movw	r2, #2316	; 0x90c
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d46:	f011 fbd1 	bl	80134ec <iprintf>
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <ES_WIFI_ReceiveData+0x174>)
 8001d4c:	f011 fc42 	bl	80135d4 <puts>
      issue15++;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <ES_WIFI_ReceiveData+0x178>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <ES_WIFI_ReceiveData+0x178>)
 8001d58:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001d5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	08015c88 	.word	0x08015c88
 8001d68:	08015ec8 	.word	0x08015ec8
 8001d6c:	08015ed0 	.word	0x08015ed0
 8001d70:	08015ed8 	.word	0x08015ed8
 8001d74:	08015d18 	.word	0x08015d18
 8001d78:	08015d30 	.word	0x08015d30
 8001d7c:	08015edc 	.word	0x08015edc
 8001d80:	08015efc 	.word	0x08015efc
 8001d84:	08015f14 	.word	0x08015f14
 8001d88:	08015f34 	.word	0x08015f34
 8001d8c:	20000684 	.word	0x20000684

08001d90 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	6593      	str	r3, [r2, #88]	; 0x58
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc8:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	4a49      	ldr	r2, [pc, #292]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dec:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfe:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <SPI_WIFI_MspInit+0x168>)
 8001e00:	f009 f874 	bl	800aeec <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4836      	ldr	r0, [pc, #216]	; (8001ef8 <SPI_WIFI_MspInit+0x168>)
 8001e1e:	f008 fdb1 	bl	800a984 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <SPI_WIFI_MspInit+0x16c>)
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4831      	ldr	r0, [pc, #196]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e3a:	f008 fda3 	bl	800a984 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4829      	ldr	r0, [pc, #164]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e5c:	f008 fd92 	bl	800a984 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001e60:	2201      	movs	r2, #1
 8001e62:	2101      	movs	r1, #1
 8001e64:	4826      	ldr	r0, [pc, #152]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e66:	f009 f841 	bl	800aeec <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481f      	ldr	r0, [pc, #124]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e82:	f008 fd7f 	bl	800a984 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4818      	ldr	r0, [pc, #96]	; (8001f04 <SPI_WIFI_MspInit+0x174>)
 8001ea4:	f008 fd6e 	bl	800a984 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480f      	ldr	r0, [pc, #60]	; (8001f04 <SPI_WIFI_MspInit+0x174>)
 8001ec6:	f008 fd5d 	bl	800a984 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001edc:	2306      	movs	r3, #6
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4807      	ldr	r0, [pc, #28]	; (8001f04 <SPI_WIFI_MspInit+0x174>)
 8001ee8:	f008 fd4c 	bl	800a984 <HAL_GPIO_Init>
}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	; 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	10110000 	.word	0x10110000
 8001f00:	48001000 	.word	0x48001000
 8001f04:	48000800 	.word	0x48000800

08001f08 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d145      	bne.n	8001fa8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <SPI_WIFI_Init+0xb8>)
 8001f20:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001f22:	4826      	ldr	r0, [pc, #152]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f24:	f7ff ff34 	bl	8001d90 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f2e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f38:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001f3c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f50:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f54:	2210      	movs	r2, #16
 8001f56:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001f70:	4812      	ldr	r0, [pc, #72]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f72:	f00b fd2d 	bl	800d9d0 <HAL_SPI_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e018      	b.n	8001fb4 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2007      	movs	r0, #7
 8001f88:	f008 fb77 	bl	800a67a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001f8c:	2007      	movs	r0, #7
 8001f8e:	f008 fb90 	bl	800a6b2 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2033      	movs	r0, #51	; 0x33
 8001f98:	f008 fb6f 	bl	800a67a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001f9c:	2033      	movs	r0, #51	; 0x33
 8001f9e:	f008 fb88 	bl	800a6b2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001fa2:	200a      	movs	r0, #10
 8001fa4:	f000 f9fe 	bl	80023a4 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001fa8:	f000 f80c 	bl	8001fc4 <SPI_WIFI_ResetModule>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200037fc 	.word	0x200037fc
 8001fc0:	40003c00 	.word	0x40003c00

08001fc4 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001fca:	f008 fa4d 	bl	800a468 <HAL_GetTick>
 8001fce:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fda:	4830      	ldr	r0, [pc, #192]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8001fdc:	f008 ff86 	bl	800aeec <HAL_GPIO_WritePin>
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f008 fa4d 	bl	800a480 <HAL_Delay>
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	482b      	ldr	r0, [pc, #172]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8001fee:	f008 ff7d 	bl	800aeec <HAL_GPIO_WritePin>
 8001ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff6:	f008 fa43 	bl	800a480 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4827      	ldr	r0, [pc, #156]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002000:	f008 ff74 	bl	800aeec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002004:	200f      	movs	r0, #15
 8002006:	f000 f9cd 	bl	80023a4 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800200a:	e020      	b.n	800204e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	463a      	mov	r2, r7
 8002010:	18d1      	adds	r1, r2, r3
 8002012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002016:	2201      	movs	r2, #1
 8002018:	4821      	ldr	r0, [pc, #132]	; (80020a0 <SPI_WIFI_ResetModule+0xdc>)
 800201a:	f00b fda4 	bl	800db66 <HAL_SPI_Receive>
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3302      	adds	r3, #2
 8002026:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002028:	f008 fa1e 	bl	800a468 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d202      	bcs.n	800203e <SPI_WIFI_ResetModule+0x7a>
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800203e:	2201      	movs	r2, #1
 8002040:	2101      	movs	r1, #1
 8002042:	4816      	ldr	r0, [pc, #88]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002044:	f008 ff52 	bl	800aeec <HAL_GPIO_WritePin>
      return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	e021      	b.n	8002092 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800204e:	2102      	movs	r1, #2
 8002050:	4812      	ldr	r0, [pc, #72]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002052:	f008 ff33 	bl	800aebc <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d0d7      	beq.n	800200c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800205c:	2201      	movs	r2, #1
 800205e:	2101      	movs	r1, #1
 8002060:	480e      	ldr	r0, [pc, #56]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002062:	f008 ff43 	bl	800aeec <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002066:	783b      	ldrb	r3, [r7, #0]
 8002068:	2b15      	cmp	r3, #21
 800206a:	d10e      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b15      	cmp	r3, #21
 8002070:	d10b      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
 8002072:	78bb      	ldrb	r3, [r7, #2]
 8002074:	2b0d      	cmp	r3, #13
 8002076:	d108      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002078:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800207a:	2b0a      	cmp	r3, #10
 800207c:	d105      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800207e:	793b      	ldrb	r3, [r7, #4]
 8002080:	2b3e      	cmp	r3, #62	; 0x3e
 8002082:	d102      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
 8002084:	797b      	ldrb	r3, [r7, #5]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d002      	beq.n	8002090 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e000      	b.n	8002092 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	48001000 	.word	0x48001000
 80020a0:	200037fc 	.word	0x200037fc

080020a4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <SPI_WIFI_DeInit+0x10>)
 80020aa:	f00b fd34 	bl	800db16 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200037fc 	.word	0x200037fc

080020b8 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80020c0:	f008 f9d2 	bl	800a468 <HAL_GetTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80020c8:	e00a      	b.n	80020e0 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80020ca:	f008 f9cd 	bl	800a468 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d902      	bls.n	80020e0 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e007      	b.n	80020f0 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80020e0:	2102      	movs	r1, #2
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <wait_cmddata_rdy_high+0x40>)
 80020e4:	f008 feea 	bl	800aebc <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d1ed      	bne.n	80020ca <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	48001000 	.word	0x48001000

080020fc <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002104:	f008 f9b0 	bl	800a468 <HAL_GetTick>
 8002108:	4603      	mov	r3, r0
 800210a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800210c:	e00a      	b.n	8002124 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800210e:	f008 f9ab 	bl	800a468 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d902      	bls.n	8002124 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e004      	b.n	800212e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <wait_cmddata_rdy_rising_event+0x3c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d0f0      	beq.n	800210e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800212c:	2300      	movs	r3, #0
#endif
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000690 	.word	0x20000690

0800213c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002144:	f008 f990 	bl	800a468 <HAL_GetTick>
 8002148:	4603      	mov	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800214c:	e00a      	b.n	8002164 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800214e:	f008 f98b 	bl	800a468 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad2      	subs	r2, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d902      	bls.n	8002164 <wait_spi_rx_event+0x28>
    {
      return -1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e004      	b.n	800216e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <wait_spi_rx_event+0x3c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d0f0      	beq.n	800214e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800216c:	2300      	movs	r3, #0
#endif
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000688 	.word	0x20000688

0800217c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002184:	f008 f970 	bl	800a468 <HAL_GetTick>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800218c:	e00a      	b.n	80021a4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800218e:	f008 f96b 	bl	800a468 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad2      	subs	r2, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d902      	bls.n	80021a4 <wait_spi_tx_event+0x28>
    {
      return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e004      	b.n	80021ae <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <wait_spi_tx_event+0x3c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d0f0      	beq.n	800218e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80021ac:	2300      	movs	r3, #0
#endif
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000068c 	.word	0x2000068c

080021bc <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	460b      	mov	r3, r1
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80021ce:	2201      	movs	r2, #1
 80021d0:	2101      	movs	r1, #1
 80021d2:	4834      	ldr	r0, [pc, #208]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 80021d4:	f008 fe8a 	bl	800aeec <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 f8e3 	bl	80023a4 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff8b 	bl	80020fc <wait_cmddata_rdy_rising_event>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da02      	bge.n	80021f2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80021ec:	f06f 0302 	mvn.w	r3, #2
 80021f0:	e054      	b.n	800229c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80021f2:	2200      	movs	r2, #0
 80021f4:	2101      	movs	r1, #1
 80021f6:	482b      	ldr	r0, [pc, #172]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 80021f8:	f008 fe78 	bl	800aeec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80021fc:	200f      	movs	r0, #15
 80021fe:	f000 f8d1 	bl	80023a4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002202:	e03d      	b.n	8002280 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8002204:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002208:	897b      	ldrh	r3, [r7, #10]
 800220a:	429a      	cmp	r2, r3
 800220c:	db02      	blt.n	8002214 <SPI_WIFI_ReceiveData+0x58>
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d13c      	bne.n	800228e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <SPI_WIFI_ReceiveData+0xec>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	2201      	movs	r2, #1
 8002220:	4619      	mov	r1, r3
 8002222:	4822      	ldr	r0, [pc, #136]	; (80022ac <SPI_WIFI_ReceiveData+0xf0>)
 8002224:	f00c f870 	bl	800e308 <HAL_SPI_Receive_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800222e:	2201      	movs	r2, #1
 8002230:	2101      	movs	r1, #1
 8002232:	481c      	ldr	r0, [pc, #112]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002234:	f008 fe5a 	bl	800aeec <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e02e      	b.n	800229c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff7b 	bl	800213c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002246:	7d3a      	ldrb	r2, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	7d7a      	ldrb	r2, [r7, #21]
 8002252:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	3302      	adds	r3, #2
 8002258:	b29b      	uxth	r3, r3
 800225a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3302      	adds	r3, #2
 8002260:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002262:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002266:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800226a:	db09      	blt.n	8002280 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800226c:	2201      	movs	r2, #1
 800226e:	2101      	movs	r1, #1
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002272:	f008 fe3b 	bl	800aeec <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002276:	f7ff fea5 	bl	8001fc4 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800227a:	f06f 0303 	mvn.w	r3, #3
 800227e:	e00d      	b.n	800229c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002280:	2102      	movs	r1, #2
 8002282:	4808      	ldr	r0, [pc, #32]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002284:	f008 fe1a 	bl	800aebc <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d0ba      	beq.n	8002204 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800228e:	2201      	movs	r2, #1
 8002290:	2101      	movs	r1, #1
 8002292:	4804      	ldr	r0, [pc, #16]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002294:	f008 fe2a 	bl	800aeec <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002298:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	48001000 	.word	0x48001000
 80022a8:	20000688 	.word	0x20000688
 80022ac:	200037fc 	.word	0x200037fc

080022b0 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	460b      	mov	r3, r1
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fef9 	bl	80020b8 <wait_cmddata_rdy_high>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da02      	bge.n	80022d2 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	e04f      	b.n	8002372 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <SPI_WIFI_SendData+0xcc>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	4828      	ldr	r0, [pc, #160]	; (8002380 <SPI_WIFI_SendData+0xd0>)
 80022de:	f008 fe05 	bl	800aeec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f000 f85e 	bl	80023a4 <SPI_WIFI_DelayUs>
  if (len > 1)
 80022e8:	897b      	ldrh	r3, [r7, #10]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d919      	bls.n	8002322 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <SPI_WIFI_SendData+0xd4>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	4822      	ldr	r0, [pc, #136]	; (8002388 <SPI_WIFI_SendData+0xd8>)
 8002300:	f00b ff74 	bl	800e1ec <HAL_SPI_Transmit_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800230a:	2201      	movs	r2, #1
 800230c:	2101      	movs	r1, #1
 800230e:	481c      	ldr	r0, [pc, #112]	; (8002380 <SPI_WIFI_SendData+0xd0>)
 8002310:	f008 fdec 	bl	800aeec <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	e02b      	b.n	8002372 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff2d 	bl	800217c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800232c:	897b      	ldrh	r3, [r7, #10]
 800232e:	3b01      	subs	r3, #1
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002338:	230a      	movs	r3, #10
 800233a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <SPI_WIFI_SendData+0xd4>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	2201      	movs	r2, #1
 8002348:	4619      	mov	r1, r3
 800234a:	480f      	ldr	r0, [pc, #60]	; (8002388 <SPI_WIFI_SendData+0xd8>)
 800234c:	f00b ff4e 	bl	800e1ec <HAL_SPI_Transmit_IT>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002356:	2201      	movs	r2, #1
 8002358:	2101      	movs	r1, #1
 800235a:	4809      	ldr	r0, [pc, #36]	; (8002380 <SPI_WIFI_SendData+0xd0>)
 800235c:	f008 fdc6 	bl	800aeec <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	e005      	b.n	8002372 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff07 	bl	800217c <wait_spi_tx_event>
    
  }
  return len;
 800236e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000690 	.word	0x20000690
 8002380:	48001000 	.word	0x48001000
 8002384:	2000068c 	.word	0x2000068c
 8002388:	200037fc 	.word	0x200037fc

0800238c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f008 f873 	bl	800a480 <HAL_Delay>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d122      	bne.n	8002402 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <SPI_WIFI_DelayUs+0x98>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <SPI_WIFI_DelayUs+0x9c>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80023d2:	f008 f849 	bl	800a468 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80023d8:	e002      	b.n	80023e0 <SPI_WIFI_DelayUs+0x3c>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80023e6:	f008 f83f 	bl	800a468 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023f2:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <SPI_WIFI_DelayUs+0x5e>
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <SPI_WIFI_DelayUs+0x98>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SPI_WIFI_DelayUs+0xa0>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	0c9a      	lsrs	r2, r3, #18
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002422:	e002      	b.n	800242a <SPI_WIFI_DelayUs+0x86>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3b01      	subs	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <SPI_WIFI_DelayUs+0x80>
  return;
 8002430:	bf00      	nop
}
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000694 	.word	0x20000694
 800243c:	2000018c 	.word	0x2000018c
 8002440:	10624dd3 	.word	0x10624dd3
 8002444:	431bde83 	.word	0x431bde83

08002448 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_SPI_RxCpltCallback+0x24>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_SPI_RxCpltCallback+0x24>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  }
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000688 	.word	0x20000688

08002470 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_SPI_TxCpltCallback+0x24>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_SPI_TxCpltCallback+0x24>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2000068c 	.word	0x2000068c

08002498 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SPI_WIFI_ISR+0x1c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d102      	bne.n	80024aa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <SPI_WIFI_ISR+0x1c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
   }
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000690 	.word	0x20000690

080024b8 <inizialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void inizialize(struct sharedValues_t *sv){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	int i;
	sv->temperature_val1=0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	sv->temperature_val2=0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
	sv->average_temerature=0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
	sv->n_elements_temp=0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]


	sv->humidity_val1=0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
	sv->humidity_val2=0;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
	sv->average_humidity=0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
	sv->n_elements_humidity=0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	649a      	str	r2, [r3, #72]	; 0x48

	sv->pressure_val1=0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	651a      	str	r2, [r3, #80]	; 0x50
	sv->pressure_val2=0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
	sv->average_pressure=0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	66da      	str	r2, [r3, #108]	; 0x6c
	sv->n_elements_pressure=0;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	671a      	str	r2, [r3, #112]	; 0x70

	sv->proximity=0;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	679a      	str	r2, [r3, #120]	; 0x78
	sv->dewpoint=0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	67da      	str	r2, [r3, #124]	; 0x7c
	sv->enableDew=0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	sv->check_mean_temp=0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
	sv->check_mean_humidity=0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	64da      	str	r2, [r3, #76]	; 0x4c
	sv->check_mean_pressure=0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	675a      	str	r2, [r3, #116]	; 0x74



	sv->mutex = osSemaphoreNew(1, 1, NULL);
 8002534:	2200      	movs	r2, #0
 8002536:	2101      	movs	r1, #1
 8002538:	2001      	movs	r0, #1
 800253a:	f00d fe15 	bl	8010168 <osSemaphoreNew>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	sv->primo = osSemaphoreNew(1, 1, NULL);
 8002546:	2200      	movs	r2, #0
 8002548:	2101      	movs	r1, #1
 800254a:	2001      	movs	r0, #1
 800254c:	f00d fe0c 	bl	8010168 <osSemaphoreNew>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	sv->secondo = osSemaphoreNew(1, 1, NULL);
 8002558:	2200      	movs	r2, #0
 800255a:	2101      	movs	r1, #1
 800255c:	2001      	movs	r0, #1
 800255e:	f00d fe03 	bl	8010168 <osSemaphoreNew>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <main>:
  * @retval int
  */


int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	   HAL_Init();
 8002578:	f007 ff0d 	bl	800a396 <HAL_Init>

	   /* Configure the system clock */
	   SystemClock_Config();
 800257c:	f000 f8d8 	bl	8002730 <SystemClock_Config>
	   /* Configure LED2 */
	   BSP_LED_Init(LED2);
 8002580:	2000      	movs	r0, #0
 8002582:	f007 f9d5 	bl	8009930 <BSP_LED_Init>

      /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002586:	2100      	movs	r1, #0
 8002588:	2000      	movs	r0, #0
 800258a:	f007 fa17 	bl	80099bc <BSP_PB_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <main+0x148>)
 8002590:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <main+0x14c>)
 8002592:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8002594:	4b49      	ldr	r3, [pc, #292]	; (80026bc <main+0x148>)
 8002596:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259a:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <main+0x148>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80025a2:	4b46      	ldr	r3, [pc, #280]	; (80026bc <main+0x148>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80025a8:	4b44      	ldr	r3, [pc, #272]	; (80026bc <main+0x148>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <main+0x148>)
 80025b0:	220c      	movs	r2, #12
 80025b2:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <main+0x148>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ba:	4b40      	ldr	r3, [pc, #256]	; (80026bc <main+0x148>)
 80025bc:	2200      	movs	r2, #0
 80025be:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <main+0x148>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <main+0x148>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 80025cc:	493b      	ldr	r1, [pc, #236]	; (80026bc <main+0x148>)
 80025ce:	2000      	movs	r0, #0
 80025d0:	f007 fa4a 	bl	8009a68 <BSP_COM_Init>
#endif /* TERMINAL_USE */

		MX_GPIO_Init();
 80025d4:	f000 facc 	bl	8002b70 <MX_GPIO_Init>
		MX_DFSDM1_Init();
 80025d8:	f000 f960 	bl	800289c <MX_DFSDM1_Init>
		MX_I2C2_Init();
 80025dc:	f000 f996 	bl	800290c <MX_I2C2_Init>
		MX_QUADSPI_Init();
 80025e0:	f000 f9d4 	bl	800298c <MX_QUADSPI_Init>
		MX_SPI3_Init();
 80025e4:	f000 f9f8 	bl	80029d8 <MX_SPI3_Init>
		MX_USART1_UART_Init();
 80025e8:	f000 fa34 	bl	8002a54 <MX_USART1_UART_Init>
		MX_USART3_UART_Init();
 80025ec:	f000 fa62 	bl	8002ab4 <MX_USART3_UART_Init>
		MX_USB_OTG_FS_PCD_Init();
 80025f0:	f000 fa90 	bl	8002b14 <MX_USB_OTG_FS_PCD_Init>
		BSP_TSENSOR_Init();
 80025f4:	f007 fc50 	bl	8009e98 <BSP_TSENSOR_Init>
		BSP_PSENSOR_Init();
 80025f8:	f007 fc20 	bl	8009e3c <BSP_PSENSOR_Init>
		BSP_HSENSOR_Init();
 80025fc:	f007 fbf0 	bl	8009de0 <BSP_HSENSOR_Init>
		VL53L0X_PROXIMITY_Init();
 8002600:	f000 fc66 	bl	8002ed0 <VL53L0X_PROXIMITY_Init>


	  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8002604:	482f      	ldr	r0, [pc, #188]	; (80026c4 <main+0x150>)
 8002606:	f010 ffe5 	bl	80135d4 <puts>
	  TERMOUT("TCP Client Instructions :\n");
 800260a:	482f      	ldr	r0, [pc, #188]	; (80026c8 <main+0x154>)
 800260c:	f010 ffe2 	bl	80135d4 <puts>
	  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8002610:	482e      	ldr	r0, [pc, #184]	; (80026cc <main+0x158>)
 8002612:	f010 ffdf 	bl	80135d4 <puts>
	  TERMOUT("   you configured using the Configuration Access Point.\n");
 8002616:	482e      	ldr	r0, [pc, #184]	; (80026d0 <main+0x15c>)
 8002618:	f010 ffdc 	bl	80135d4 <puts>
	  TERMOUT("2- Create a server by using the android application TCP Server\n");
 800261c:	482d      	ldr	r0, [pc, #180]	; (80026d4 <main+0x160>)
 800261e:	f010 ffd9 	bl	80135d4 <puts>
	  TERMOUT("   with port(8002).\n");
 8002622:	482d      	ldr	r0, [pc, #180]	; (80026d8 <main+0x164>)
 8002624:	f010 ffd6 	bl	80135d4 <puts>
	  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <main+0x168>)
 800262a:	f010 ffd3 	bl	80135d4 <puts>


		    /* Init scheduler ----------------------------------------------------------------------------*/
	  osKernelInitialize();
 800262e:	f00d fc5d 	bl	800feec <osKernelInitialize>


	  /* USER CODE BEGIN RTOS_THREADS */
	  //inizialize the structure
	  inizialize(&sharedValues);
 8002632:	482b      	ldr	r0, [pc, #172]	; (80026e0 <main+0x16c>)
 8002634:	f7ff ff40 	bl	80024b8 <inizialize>

	  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <main+0x170>)
 800263a:	2100      	movs	r1, #0
 800263c:	482a      	ldr	r0, [pc, #168]	; (80026e8 <main+0x174>)
 800263e:	f00d fcbf 	bl	800ffc0 <osThreadNew>
 8002642:	4602      	mov	r2, r0
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <main+0x178>)
 8002646:	601a      	str	r2, [r3, #0]
	  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <main+0x17c>)
 800264a:	2100      	movs	r1, #0
 800264c:	4829      	ldr	r0, [pc, #164]	; (80026f4 <main+0x180>)
 800264e:	f00d fcb7 	bl	800ffc0 <osThreadNew>
 8002652:	4602      	mov	r2, r0
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <main+0x184>)
 8002656:	601a      	str	r2, [r3, #0]
	  proximityThreadHandle = osThreadNew(Proximity_Test, NULL, &proximityThread_attributes);
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <main+0x188>)
 800265a:	2100      	movs	r1, #0
 800265c:	4828      	ldr	r0, [pc, #160]	; (8002700 <main+0x18c>)
 800265e:	f00d fcaf 	bl	800ffc0 <osThreadNew>
 8002662:	4602      	mov	r2, r0
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <main+0x190>)
 8002666:	601a      	str	r2, [r3, #0]
	  dewpointTaskHandle = osThreadNew(StartDewpointTask, NULL, &dewpointTask_attributes);
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <main+0x194>)
 800266a:	2100      	movs	r1, #0
 800266c:	4827      	ldr	r0, [pc, #156]	; (800270c <main+0x198>)
 800266e:	f00d fca7 	bl	800ffc0 <osThreadNew>
 8002672:	4602      	mov	r2, r0
 8002674:	4b26      	ldr	r3, [pc, #152]	; (8002710 <main+0x19c>)
 8002676:	601a      	str	r2, [r3, #0]
	  statisticsTaskHandle = osThreadNew(ComputeStatistics, NULL, &statisticsTask_attributes);
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <main+0x1a0>)
 800267a:	2100      	movs	r1, #0
 800267c:	4826      	ldr	r0, [pc, #152]	; (8002718 <main+0x1a4>)
 800267e:	f00d fc9f 	bl	800ffc0 <osThreadNew>
 8002682:	4602      	mov	r2, r0
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <main+0x1a8>)
 8002686:	601a      	str	r2, [r3, #0]
	  serialTaskHandle = osThreadNew(SerialPrint, NULL, &serialTask_attributes);
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <main+0x1ac>)
 800268a:	2100      	movs	r1, #0
 800268c:	4825      	ldr	r0, [pc, #148]	; (8002724 <main+0x1b0>)
 800268e:	f00d fc97 	bl	800ffc0 <osThreadNew>
 8002692:	4602      	mov	r2, r0
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <main+0x1b4>)
 8002696:	601a      	str	r2, [r3, #0]

	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	2104      	movs	r1, #4
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <main+0x1b8>)
 800269e:	f008 fc25 	bl	800aeec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);//0
 80026a2:	2201      	movs	r2, #1
 80026a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ac:	f008 fc1e 	bl	800aeec <HAL_GPIO_WritePin>
	  osKernelStart();
 80026b0:	f00d fc50 	bl	800ff54 <osKernelStart>
 80026b4:	2300      	movs	r3, #0

}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000487c 	.word	0x2000487c
 80026c0:	40013800 	.word	0x40013800
 80026c4:	0801603c 	.word	0x0801603c
 80026c8:	0801607c 	.word	0x0801607c
 80026cc:	08016098 	.word	0x08016098
 80026d0:	080160d8 	.word	0x080160d8
 80026d4:	08016110 	.word	0x08016110
 80026d8:	08016150 	.word	0x08016150
 80026dc:	08016164 	.word	0x08016164
 80026e0:	20003d74 	.word	0x20003d74
 80026e4:	08016d20 	.word	0x08016d20
 80026e8:	08003209 	.word	0x08003209
 80026ec:	2000389c 	.word	0x2000389c
 80026f0:	08016d44 	.word	0x08016d44
 80026f4:	080035e5 	.word	0x080035e5
 80026f8:	20003ef0 	.word	0x20003ef0
 80026fc:	08016d68 	.word	0x08016d68
 8002700:	08003659 	.word	0x08003659
 8002704:	20003eec 	.word	0x20003eec
 8002708:	08016cfc 	.word	0x08016cfc
 800270c:	08003801 	.word	0x08003801
 8002710:	20003ef4 	.word	0x20003ef4
 8002714:	08016cd8 	.word	0x08016cd8
 8002718:	08003959 	.word	0x08003959
 800271c:	20003898 	.word	0x20003898
 8002720:	08016cb4 	.word	0x08016cb4
 8002724:	08003cdd 	.word	0x08003cdd
 8002728:	20003e04 	.word	0x20003e04
 800272c:	48000400 	.word	0x48000400

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0b8      	sub	sp, #224	; 0xe0
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800273a:	2244      	movs	r2, #68	; 0x44
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f010 fecc 	bl	80134dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002754:	463b      	mov	r3, r7
 8002756:	2288      	movs	r2, #136	; 0x88
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f010 febe 	bl	80134dc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002760:	f009 fd4c 	bl	800c1fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <SystemClock_Config+0x140>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a41      	ldr	r2, [pc, #260]	; (8002870 <SystemClock_Config+0x140>)
 800276c:	f023 0318 	bic.w	r3, r3, #24
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002774:	2314      	movs	r3, #20
 8002776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800277a:	2301      	movs	r3, #1
 800277c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002780:	2301      	movs	r3, #1
 8002782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800278c:	2360      	movs	r3, #96	; 0x60
 800278e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002798:	2301      	movs	r3, #1
 800279a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80027a4:	2328      	movs	r3, #40	; 0x28
 80027a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027aa:	2307      	movs	r3, #7
 80027ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c0:	4618      	mov	r0, r3
 80027c2:	f009 fe5b 	bl	800c47c <HAL_RCC_OscConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80027cc:	f001 fa94 	bl	8003cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d0:	230f      	movs	r3, #15
 80027d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80027f2:	2104      	movs	r1, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f00a fa27 	bl	800cc48 <HAL_RCC_ClockConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002800:	f001 fa7a 	bl	8003cf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <SystemClock_Config+0x144>)
 8002806:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002808:	2300      	movs	r3, #0
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800280c:	2300      	movs	r3, #0
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002810:	2300      	movs	r3, #0
 8002812:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800281a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800281e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002820:	2301      	movs	r3, #1
 8002822:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002824:	2301      	movs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002828:	2318      	movs	r3, #24
 800282a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800282c:	2307      	movs	r3, #7
 800282e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002830:	2302      	movs	r3, #2
 8002832:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800283c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283e:	463b      	mov	r3, r7
 8002840:	4618      	mov	r0, r3
 8002842:	f00a fc05 	bl	800d050 <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800284c:	f001 fa54 	bl	8003cf8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002854:	f009 fcf0 	bl	800c238 <HAL_PWREx_ControlVoltageScaling>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800285e:	f001 fa4b 	bl	8003cf8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002862:	f00a fedb 	bl	800d61c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002866:	bf00      	nop
 8002868:	37e0      	adds	r7, #224	; 0xe0
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	00012085 	.word	0x00012085

08002878 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002880:	1d39      	adds	r1, r7, #4
 8002882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002886:	2201      	movs	r2, #1
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <__io_putchar+0x20>)
 800288a:	f00c fc18 	bl	800f0be <HAL_UART_Transmit>

  return ch;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000487c 	.word	0x2000487c

0800289c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028a2:	4a19      	ldr	r2, [pc, #100]	; (8002908 <MX_DFSDM1_Init+0x6c>)
 80028a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028b4:	2202      	movs	r2, #2
 80028b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028d4:	2204      	movs	r2, #4
 80028d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028f2:	f007 fef9 	bl	800a6e8 <HAL_DFSDM_ChannelInit>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80028fc:	f001 f9fc 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20003860 	.word	0x20003860
 8002908:	40016020 	.word	0x40016020

0800290c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <MX_I2C2_Init+0x74>)
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <MX_I2C2_Init+0x78>)
 8002914:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <MX_I2C2_Init+0x74>)
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <MX_I2C2_Init+0x7c>)
 800291a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <MX_I2C2_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <MX_I2C2_Init+0x74>)
 8002924:	2201      	movs	r2, #1
 8002926:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <MX_I2C2_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <MX_I2C2_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <MX_I2C2_Init+0x74>)
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MX_I2C2_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_I2C2_Init+0x74>)
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002946:	480e      	ldr	r0, [pc, #56]	; (8002980 <MX_I2C2_Init+0x74>)
 8002948:	f008 fb1a 	bl	800af80 <HAL_I2C_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002952:	f001 f9d1 	bl	8003cf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002956:	2100      	movs	r1, #0
 8002958:	4809      	ldr	r0, [pc, #36]	; (8002980 <MX_I2C2_Init+0x74>)
 800295a:	f009 fa6f 	bl	800be3c <HAL_I2CEx_ConfigAnalogFilter>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002964:	f001 f9c8 	bl	8003cf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002968:	2100      	movs	r1, #0
 800296a:	4805      	ldr	r0, [pc, #20]	; (8002980 <MX_I2C2_Init+0x74>)
 800296c:	f009 fab1 	bl	800bed2 <HAL_I2CEx_ConfigDigitalFilter>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002976:	f001 f9bf 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20003d28 	.word	0x20003d28
 8002984:	40005800 	.word	0x40005800
 8002988:	10909cec 	.word	0x10909cec

0800298c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <MX_QUADSPI_Init+0x48>)
 8002994:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 800299e:	2201      	movs	r2, #1
 80029a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029bc:	f009 fca2 	bl	800c304 <HAL_QSPI_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80029c6:	f001 f997 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20003ef8 	.word	0x20003ef8
 80029d4:	a0001000 	.word	0xa0001000

080029d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <MX_SPI3_Init+0x78>)
 80029e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a26:	2207      	movs	r2, #7
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a32:	2208      	movs	r2, #8
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a38:	f00a ffca 	bl	800d9d0 <HAL_SPI_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002a42:	f001 f959 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20003e08 	.word	0x20003e08
 8002a50:	40003c00 	.word	0x40003c00

08002a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <MX_USART1_UART_Init+0x5c>)
 8002a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a98:	f00c fac3 	bl	800f022 <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002aa2:	f001 f929 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20003e6c 	.word	0x20003e6c
 8002ab0:	40013800 	.word	0x40013800

08002ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002aba:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <MX_USART3_UART_Init+0x5c>)
 8002abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ada:	220c      	movs	r2, #12
 8002adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002af8:	f00c fa93 	bl	800f022 <HAL_UART_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b02:	f001 f8f9 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200038a0 	.word	0x200038a0
 8002b10:	40004800 	.word	0x40004800

08002b14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b22:	2206      	movs	r2, #6
 8002b24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b28:	2202      	movs	r2, #2
 8002b2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b2e:	2202      	movs	r2, #2
 8002b30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b58:	f009 fa07 	bl	800bf6a <HAL_PCD_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002b62:	f001 f8c9 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20003920 	.word	0x20003920

08002b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b86:	4bba      	ldr	r3, [pc, #744]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4ab9      	ldr	r2, [pc, #740]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b92:	4bb7      	ldr	r3, [pc, #732]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	4bb4      	ldr	r3, [pc, #720]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	4ab3      	ldr	r2, [pc, #716]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002baa:	4bb1      	ldr	r3, [pc, #708]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4bae      	ldr	r3, [pc, #696]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	4aad      	ldr	r2, [pc, #692]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc2:	4bab      	ldr	r3, [pc, #684]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	4ba8      	ldr	r3, [pc, #672]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	4aa7      	ldr	r2, [pc, #668]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bda:	4ba5      	ldr	r3, [pc, #660]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be6:	4ba2      	ldr	r3, [pc, #648]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4aa1      	ldr	r2, [pc, #644]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b9f      	ldr	r3, [pc, #636]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002c04:	489b      	ldr	r0, [pc, #620]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c06:	f008 f971 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f248 1104 	movw	r1, #33028	; 0x8104
 8002c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c14:	f008 f96a 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8002c1e:	4896      	ldr	r0, [pc, #600]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002c20:	f008 f964 	bl	800aeec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f241 0181 	movw	r1, #4225	; 0x1081
 8002c2a:	4894      	ldr	r0, [pc, #592]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002c2c:	f008 f95e 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c36:	4891      	ldr	r0, [pc, #580]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002c38:	f008 f958 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002c42:	488f      	ldr	r0, [pc, #572]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002c44:	f008 f952 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2120      	movs	r1, #32
 8002c4c:	488a      	ldr	r0, [pc, #552]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002c4e:	f008 f94d 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2101      	movs	r1, #1
 8002c56:	4887      	ldr	r0, [pc, #540]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c58:	f008 f948 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002c5c:	f240 1315 	movw	r3, #277	; 0x115
 8002c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	487f      	ldr	r0, [pc, #508]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c76:	f007 fe85 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002c7a:	236a      	movs	r3, #106	; 0x6a
 8002c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4879      	ldr	r0, [pc, #484]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c8e:	f007 fe79 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <MX_GPIO_Init+0x318>)
 8002c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4876      	ldr	r0, [pc, #472]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002ca8:	f007 fe6c 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002cac:	233f      	movs	r3, #63	; 0x3f
 8002cae:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cb0:	230b      	movs	r3, #11
 8002cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4870      	ldr	r0, [pc, #448]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002cc0:	f007 fe60 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce2:	f007 fe4f 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002ce6:	f248 1304 	movw	r3, #33028	; 0x8104
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d02:	f007 fe3f 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002d06:	2308      	movs	r3, #8
 8002d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d24:	f007 fe2e 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002d28:	2310      	movs	r3, #16
 8002d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3e:	f007 fe21 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002d42:	23e0      	movs	r3, #224	; 0xe0
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d52:	2305      	movs	r3, #5
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d60:	f007 fe10 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002d64:	2301      	movs	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4840      	ldr	r0, [pc, #256]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002d78:	f007 fe04 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d80:	230b      	movs	r3, #11
 8002d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	483a      	ldr	r0, [pc, #232]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002d90:	f007 fdf8 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002d94:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002d98:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4832      	ldr	r0, [pc, #200]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002dae:	f007 fde9 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002db2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8002db6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	482d      	ldr	r0, [pc, #180]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002dc8:	f007 fddc 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002dcc:	f243 0381 	movw	r3, #12417	; 0x3081
 8002dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	4825      	ldr	r0, [pc, #148]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002de6:	f007 fdcd 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002dea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	481f      	ldr	r0, [pc, #124]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002e04:	f007 fdbe 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002e08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4818      	ldr	r0, [pc, #96]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002e1e:	f007 fdb1 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002e22:	2302      	movs	r3, #2
 8002e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e32:	2305      	movs	r3, #5
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480f      	ldr	r0, [pc, #60]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002e3e:	f007 fda1 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002e42:	2378      	movs	r3, #120	; 0x78
 8002e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e52:	2307      	movs	r3, #7
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002e5e:	f007 fd91 	bl	800a984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e68:	2312      	movs	r3, #18
 8002e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e00d      	b.n	8002e8c <MX_GPIO_Init+0x31c>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48000400 	.word	0x48000400
 8002e7c:	48000c00 	.word	0x48000c00
 8002e80:	48000800 	.word	0x48000800
 8002e84:	10110000 	.word	0x10110000
 8002e88:	10210000 	.word	0x10210000
 8002e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e92:	2304      	movs	r3, #4
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480b      	ldr	r0, [pc, #44]	; (8002ecc <MX_GPIO_Init+0x35c>)
 8002e9e:	f007 fd71 	bl	800a984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2017      	movs	r0, #23
 8002ea8:	f007 fbe7 	bl	800a67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eac:	2017      	movs	r0, #23
 8002eae:	f007 fc00 	bl	800a6b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2028      	movs	r0, #40	; 0x28
 8002eb8:	f007 fbdf 	bl	800a67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ebc:	2028      	movs	r0, #40	; 0x28
 8002ebe:	f007 fbf8 	bl	800a6b2 <HAL_NVIC_EnableIRQ>

}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <VL53L0X_PROXIMITY_Init>:
/* USER CODE END 4 */



static void VL53L0X_PROXIMITY_Init(void)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b0f9      	sub	sp, #484	; 0x1e4
 8002ed4:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 8002edc:	f006 ff20 	bl	8009d20 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 8002ee0:	f000 f85e 	bl	8002fa0 <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2263      	movs	r2, #99	; 0x63
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f010 faf6 	bl	80134dc <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	481e      	ldr	r0, [pc, #120]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002ef6:	f001 fabd 	bl	8004474 <VL53L0X_GetDeviceInfo>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d12f      	bne.n	8002f60 <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8002f00:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8002f04:	461a      	mov	r2, r3
 8002f06:	21c0      	movs	r1, #192	; 0xc0
 8002f08:	4819      	ldr	r0, [pc, #100]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f0a:	f006 fa05 	bl	8009318 <VL53L0X_RdWord>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8002f14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002f18:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d122      	bne.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f22:	f001 facd 	bl	80044c0 <VL53L0X_DataInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 8002f34:	4c0e      	ldr	r4, [pc, #56]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f36:	4668      	mov	r0, sp
 8002f38:	f104 0310 	add.w	r3, r4, #16
 8002f3c:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8002f40:	4619      	mov	r1, r3
 8002f42:	f010 fac0 	bl	80134c6 <memcpy>
 8002f46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f4a:	f006 faeb 	bl	8009524 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 8002f4e:	e00a      	b.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8002f50:	4808      	ldr	r0, [pc, #32]	; (8002f74 <VL53L0X_PROXIMITY_Init+0xa4>)
 8002f52:	f010 fb3f 	bl	80135d4 <puts>
}
 8002f56:	e006      	b.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <VL53L0X_PROXIMITY_Init+0xa8>)
 8002f5a:	f010 fb3b 	bl	80135d4 <puts>
}
 8002f5e:	e002      	b.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8002f60:	4806      	ldr	r0, [pc, #24]	; (8002f7c <VL53L0X_PROXIMITY_Init+0xac>)
 8002f62:	f010 fb37 	bl	80135d4 <puts>
}
 8002f66:	bf00      	nop
 8002f68:	376c      	adds	r7, #108	; 0x6c
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000004 	.word	0x20000004
 8002f74:	080161ac 	.word	0x080161ac
 8002f78:	080161dc 	.word	0x080161dc
 8002f7c:	0801620c 	.word	0x0801620c

08002f80 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4804      	ldr	r0, [pc, #16]	; (8002f9c <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 8002f8c:	f002 fcfe 	bl	800598c <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 8002f90:	89bb      	ldrh	r3, [r7, #12]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <VL53L0X_PROXIMITY_MspInit>:

static void VL53L0X_PROXIMITY_MspInit(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8002fa6:	2340      	movs	r3, #64	; 0x40
 8002fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4808      	ldr	r0, [pc, #32]	; (8002fdc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 8002fbc:	f007 fce2 	bl	800a984 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 8002fc6:	f007 ff91 	bl	800aeec <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8002fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fce:	f007 fa57 	bl	800a480 <HAL_Delay>
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	48000800 	.word	0x48000800

08002fe0 <controlla_valori_telefono>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */

int controlla_valori_telefono(struct sharedValues_t *sv, int32_t Socket){
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b093      	sub	sp, #76	; 0x4c
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	uint8_t TxData[] = "STM32 : Hello!\n";
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <controlla_valori_telefono+0x200>)
 8002fec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	while(1){


		  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2d8      	uxtb	r0, r3
 8002ffa:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8002ffe:	f242 7310 	movw	r3, #10000	; 0x2710
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	f240 12f3 	movw	r2, #499	; 0x1f3
 800300a:	4976      	ldr	r1, [pc, #472]	; (80031e4 <controlla_valori_telefono+0x204>)
 800300c:	f006 fc44 	bl	8009898 <WIFI_ReceiveData>
 8003010:	4603      	mov	r3, r0
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c


		  if(ret == WIFI_STATUS_OK){
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 80cd 	bne.w	80031b6 <controlla_valori_telefono+0x1d6>

			if(Datalen > 0){
 800301c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80d4 	beq.w	80031cc <controlla_valori_telefono+0x1ec>
				osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	f04f 31ff 	mov.w	r1, #4294967295
 800302e:	4618      	mov	r0, r3
 8003030:	f00d f938 	bl	80102a4 <osSemaphoreAcquire>
				  RxData[Datalen]=0;
 8003034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003036:	461a      	mov	r2, r3
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <controlla_valori_telefono+0x204>)
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]
				  TERMOUT("Received: %s\n",RxData);
 800303e:	4969      	ldr	r1, [pc, #420]	; (80031e4 <controlla_valori_telefono+0x204>)
 8003040:	4869      	ldr	r0, [pc, #420]	; (80031e8 <controlla_valori_telefono+0x208>)
 8003042:	f010 fa53 	bl	80134ec <iprintf>
				  int ritorno = atoi(RxData);
 8003046:	4867      	ldr	r0, [pc, #412]	; (80031e4 <controlla_valori_telefono+0x204>)
 8003048:	f010 fa00 	bl	801344c <atoi>
 800304c:	63b8      	str	r0, [r7, #56]	; 0x38

				  if(ritorno==45){
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	2b2d      	cmp	r3, #45	; 0x2d
 8003052:	d10e      	bne.n	8003072 <controlla_valori_telefono+0x92>
					  ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2d8      	uxtb	r0, r3
 8003058:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800305c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003060:	f242 7310 	movw	r3, #10000	; 0x2710
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4613      	mov	r3, r2
 8003068:	2210      	movs	r2, #16
 800306a:	f006 fbf3 	bl	8009854 <WIFI_SendData>
 800306e:	4603      	mov	r3, r0
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
				  }

				  //PROXIMITY
				  if(ritorno == 0){
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d116      	bne.n	80030a6 <controlla_valori_telefono+0xc6>
	//				  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
					  snprintf(text, 30, "Proximity value: %d \n", sv->proximity); // puts string into buffer
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307c:	f107 0008 	add.w	r0, r7, #8
 8003080:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <controlla_valori_telefono+0x20c>)
 8003082:	211e      	movs	r1, #30
 8003084:	f010 faae 	bl	80135e4 <sniprintf>
					  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2d8      	uxtb	r0, r3
 800308c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003090:	f107 0108 	add.w	r1, r7, #8
 8003094:	f242 7310 	movw	r3, #10000	; 0x2710
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	221e      	movs	r2, #30
 800309e:	f006 fbd9 	bl	8009854 <WIFI_SendData>
 80030a2:	4603      	mov	r3, r0
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
					  //wifi_http_get (uint8_t * hostname, uint8_t * path, uint32_t port_number )
	//				  osSemaphoreRelease(sv->mutex);
				  }

				  //TEMPERATURE
				  if(ritorno==1){
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11a      	bne.n	80030e2 <controlla_valori_telefono+0x102>
	//				  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
					  snprintf(text,30," Temperature = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f107 0008 	add.w	r0, r7, #8
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	4613      	mov	r3, r2
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <controlla_valori_telefono+0x210>)
 80030be:	211e      	movs	r1, #30
 80030c0:	f010 fa90 	bl	80135e4 <sniprintf>
					  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2d8      	uxtb	r0, r3
 80030c8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80030cc:	f107 0108 	add.w	r1, r7, #8
 80030d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	221e      	movs	r2, #30
 80030da:	f006 fbbb 	bl	8009854 <WIFI_SendData>
 80030de:	4603      	mov	r3, r0
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	//				  osSemaphoreRelease(sv->mutex);
				  }

				  //HUMIDITY
				  if(ritorno==2){
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d11a      	bne.n	800311e <controlla_valori_telefono+0x13e>
	//				  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
					  snprintf(text,30," Humidity = %d.%02d\n\r", sv->humidity_val1, sv->humidity_val2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f107 0008 	add.w	r0, r7, #8
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	4a3e      	ldr	r2, [pc, #248]	; (80031f4 <controlla_valori_telefono+0x214>)
 80030fa:	211e      	movs	r1, #30
 80030fc:	f010 fa72 	bl	80135e4 <sniprintf>
					  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2d8      	uxtb	r0, r3
 8003104:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003108:	f107 0108 	add.w	r1, r7, #8
 800310c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	221e      	movs	r2, #30
 8003116:	f006 fb9d 	bl	8009854 <WIFI_SendData>
 800311a:	4603      	mov	r3, r0
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
	//				  osSemaphoreRelease(sv->mutex);
				  }

				  //PRESSSURE 1mBar = 1hPa (100Pa)
				  if(ritorno==3){
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b03      	cmp	r3, #3
 8003122:	d11a      	bne.n	800315a <controlla_valori_telefono+0x17a>
	//				  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
					  snprintf(text,30," Pressure = %d.%02d hPa\n\r", sv->pressure_val1, sv->pressure_val2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f107 0008 	add.w	r0, r7, #8
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <controlla_valori_telefono+0x218>)
 8003136:	211e      	movs	r1, #30
 8003138:	f010 fa54 	bl	80135e4 <sniprintf>
					  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2d8      	uxtb	r0, r3
 8003140:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003144:	f107 0108 	add.w	r1, r7, #8
 8003148:	f242 7310 	movw	r3, #10000	; 0x2710
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	221e      	movs	r2, #30
 8003152:	f006 fb7f 	bl	8009854 <WIFI_SendData>
 8003156:	4603      	mov	r3, r0
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
	//				  osSemaphoreRelease(sv->mutex);
				  }

				  if(ritorno==4){
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	2b04      	cmp	r3, #4
 800315e:	d116      	bne.n	800318e <controlla_valori_telefono+0x1ae>
	//				  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
					  snprintf(text,30," Dewpoint = %d\n\r", sv->dewpoint);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003164:	f107 0008 	add.w	r0, r7, #8
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <controlla_valori_telefono+0x21c>)
 800316a:	211e      	movs	r1, #30
 800316c:	f010 fa3a 	bl	80135e4 <sniprintf>
					  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2d8      	uxtb	r0, r3
 8003174:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003178:	f107 0108 	add.w	r1, r7, #8
 800317c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	221e      	movs	r2, #30
 8003186:	f006 fb65 	bl	8009854 <WIFI_SendData>
 800318a:	4603      	mov	r3, r0
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
	//				  osSemaphoreRelease(sv->mutex);

				  }
				  osSemaphoreRelease(sv->mutex);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	4618      	mov	r0, r3
 8003196:	f00d f8eb 	bl	8010370 <osSemaphoreRelease>
				  //if we had any problems the mutex won't be used
				  if (ret != WIFI_STATUS_OK){
 800319a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d015      	beq.n	80031cc <controlla_valori_telefono+0x1ec>
					TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 80031a0:	4817      	ldr	r0, [pc, #92]	; (8003200 <controlla_valori_telefono+0x220>)
 80031a2:	f010 fa17 	bl	80135d4 <puts>
					 HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);//0
 80031a6:	2201      	movs	r2, #1
 80031a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b0:	f007 fe9c 	bl	800aeec <HAL_GPIO_WritePin>

					break;
 80031b4:	e00f      	b.n	80031d6 <controlla_valori_telefono+0x1f6>
				  }
				}
		  }
		  else
		  {
			TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80031b6:	4813      	ldr	r0, [pc, #76]	; (8003204 <controlla_valori_telefono+0x224>)
 80031b8:	f010 fa0c 	bl	80135d4 <puts>
			 HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);//0
 80031bc:	2201      	movs	r2, #1
 80031be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c6:	f007 fe91 	bl	800aeec <HAL_GPIO_WritePin>
			 break;
 80031ca:	e004      	b.n	80031d6 <controlla_valori_telefono+0x1f6>
		  }

		  HAL_Delay(500);
 80031cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031d0:	f007 f956 	bl	800a480 <HAL_Delay>
		  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80031d4:	e70f      	b.n	8002ff6 <controlla_valori_telefono+0x16>
	}

		  return 1;
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3744      	adds	r7, #68	; 0x44
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	0801632c 	.word	0x0801632c
 80031e4:	20000698 	.word	0x20000698
 80031e8:	08016238 	.word	0x08016238
 80031ec:	08016248 	.word	0x08016248
 80031f0:	08016260 	.word	0x08016260
 80031f4:	0801627c 	.word	0x0801627c
 80031f8:	08016294 	.word	0x08016294
 80031fc:	080162b0 	.word	0x080162b0
 8003200:	080162c4 	.word	0x080162c4
 8003204:	080162f8 	.word	0x080162f8

08003208 <StartDefaultTask>:



/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *arguments)
{
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af04      	add	r7, sp, #16
 800320e:	6078      	str	r0, [r7, #4]

	while(1){
			uint8_t  MAC_Addr[6];
			uint8_t  IP_Addr[4];

			int32_t Socket = -1;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	61fb      	str	r3, [r7, #28]

			int16_t Trials = CONNECTION_TRIAL_MAX;
 8003216:	230a      	movs	r3, #10
 8003218:	837b      	strh	r3, [r7, #26]


			/*Initialize  WIFI module */
			  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800321a:	f006 fa61 	bl	80096e0 <WIFI_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 8095 	bne.w	8003350 <StartDefaultTask+0x148>
			  {
					TERMOUT("> WIFI Module Initialized.\n");
 8003226:	4859      	ldr	r0, [pc, #356]	; (800338c <StartDefaultTask+0x184>)
 8003228:	f010 f9d4 	bl	80135d4 <puts>
					if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4618      	mov	r0, r3
 8003232:	f006 faa3 	bl	800977c <WIFI_GetMAC_Address>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d112      	bne.n	8003262 <StartDefaultTask+0x5a>
					{
					  TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800323c:	7b3b      	ldrb	r3, [r7, #12]
 800323e:	4618      	mov	r0, r3
 8003240:	7b7b      	ldrb	r3, [r7, #13]
 8003242:	461c      	mov	r4, r3
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	461d      	mov	r5, r3
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	7c3a      	ldrb	r2, [r7, #16]
 800324c:	7c79      	ldrb	r1, [r7, #17]
 800324e:	9102      	str	r1, [sp, #8]
 8003250:	9201      	str	r2, [sp, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	462b      	mov	r3, r5
 8003256:	4622      	mov	r2, r4
 8003258:	4601      	mov	r1, r0
 800325a:	484d      	ldr	r0, [pc, #308]	; (8003390 <StartDefaultTask+0x188>)
 800325c:	f010 f946 	bl	80134ec <iprintf>
 8003260:	e005      	b.n	800326e <StartDefaultTask+0x66>
							   MAC_Addr[4],
							   MAC_Addr[5]);
					}
					else
					{
					  TERMOUT("> ERROR : CANNOT get MAC address\n");
 8003262:	484c      	ldr	r0, [pc, #304]	; (8003394 <StartDefaultTask+0x18c>)
 8003264:	f010 f9b6 	bl	80135d4 <puts>
					  BSP_LED_On(LED2);
 8003268:	2000      	movs	r0, #0
 800326a:	f006 fb91 	bl	8009990 <BSP_LED_On>
					}

					if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800326e:	2203      	movs	r2, #3
 8003270:	4949      	ldr	r1, [pc, #292]	; (8003398 <StartDefaultTask+0x190>)
 8003272:	484a      	ldr	r0, [pc, #296]	; (800339c <StartDefaultTask+0x194>)
 8003274:	f006 fa60 	bl	8009738 <WIFI_Connect>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d161      	bne.n	8003342 <StartDefaultTask+0x13a>
					{
					  TERMOUT("> es-wifi module connected \n");
 800327e:	4848      	ldr	r0, [pc, #288]	; (80033a0 <StartDefaultTask+0x198>)
 8003280:	f010 f9a8 	bl	80135d4 <puts>
					  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	4618      	mov	r0, r3
 800328a:	f006 fa8d 	bl	80097a8 <WIFI_GetIP_Address>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d14f      	bne.n	8003334 <StartDefaultTask+0x12c>
					  {
						TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8003294:	7a3b      	ldrb	r3, [r7, #8]
 8003296:	4619      	mov	r1, r3
 8003298:	7a7b      	ldrb	r3, [r7, #9]
 800329a:	461a      	mov	r2, r3
 800329c:	7abb      	ldrb	r3, [r7, #10]
 800329e:	4618      	mov	r0, r3
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4603      	mov	r3, r0
 80032a6:	483f      	ldr	r0, [pc, #252]	; (80033a4 <StartDefaultTask+0x19c>)
 80032a8:	f010 f920 	bl	80134ec <iprintf>
							   IP_Addr[0],
							   IP_Addr[1],
							   IP_Addr[2],
							   IP_Addr[3]);

						TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80032ac:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <StartDefaultTask+0x1a0>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <StartDefaultTask+0x1a0>)
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	4618      	mov	r0, r3
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <StartDefaultTask+0x1a0>)
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	461c      	mov	r4, r3
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <StartDefaultTask+0x1a0>)
 80032c0:	78db      	ldrb	r3, [r3, #3]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f641 7342 	movw	r3, #8002	; 0x1f42
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	9200      	str	r2, [sp, #0]
 80032cc:	4623      	mov	r3, r4
 80032ce:	4602      	mov	r2, r0
 80032d0:	4836      	ldr	r0, [pc, #216]	; (80033ac <StartDefaultTask+0x1a4>)
 80032d2:	f010 f90b 	bl	80134ec <iprintf>
							   RemoteIP[1],
							   RemoteIP[2],
							   RemoteIP[3],
											 RemotePORT);

						while (Trials--)
 80032d6:	e01a      	b.n	800330e <StartDefaultTask+0x106>
						{
						  if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80032d8:	2300      	movs	r3, #0
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	f641 7342 	movw	r3, #8002	; 0x1f42
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <StartDefaultTask+0x1a0>)
 80032e4:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <StartDefaultTask+0x1a8>)
 80032e6:	2100      	movs	r1, #0
 80032e8:	2000      	movs	r0, #0
 80032ea:	f006 fa79 	bl	80097e0 <WIFI_OpenClientConnection>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10c      	bne.n	800330e <StartDefaultTask+0x106>
						  {
							TERMOUT("> TCP Connection opened successfully.\n");
 80032f4:	482f      	ldr	r0, [pc, #188]	; (80033b4 <StartDefaultTask+0x1ac>)
 80032f6:	f010 f96d 	bl	80135d4 <puts>
							Socket = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
							 HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 80032fe:	2200      	movs	r2, #0
 8003300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003308:	f007 fdf0 	bl	800aeec <HAL_GPIO_WritePin>
							break;
 800330c:	e007      	b.n	800331e <StartDefaultTask+0x116>
						while (Trials--)
 800330e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003312:	b29a      	uxth	r2, r3
 8003314:	3a01      	subs	r2, #1
 8003316:	b292      	uxth	r2, r2
 8003318:	837a      	strh	r2, [r7, #26]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1dc      	bne.n	80032d8 <StartDefaultTask+0xd0>
						  }

						}
						if(Socket == -1)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d11a      	bne.n	800335c <StartDefaultTask+0x154>
						{
						  TERMOUT("> ERROR : Cannot open Connection\n");
 8003326:	4824      	ldr	r0, [pc, #144]	; (80033b8 <StartDefaultTask+0x1b0>)
 8003328:	f010 f954 	bl	80135d4 <puts>
						  BSP_LED_On(LED2);
 800332c:	2000      	movs	r0, #0
 800332e:	f006 fb2f 	bl	8009990 <BSP_LED_On>
 8003332:	e013      	b.n	800335c <StartDefaultTask+0x154>
						}
					  }
					  else
					  {
						TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8003334:	4821      	ldr	r0, [pc, #132]	; (80033bc <StartDefaultTask+0x1b4>)
 8003336:	f010 f94d 	bl	80135d4 <puts>
						BSP_LED_On(LED2);
 800333a:	2000      	movs	r0, #0
 800333c:	f006 fb28 	bl	8009990 <BSP_LED_On>
 8003340:	e00c      	b.n	800335c <StartDefaultTask+0x154>
					  }
					}
					else
					{
					  TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8003342:	481f      	ldr	r0, [pc, #124]	; (80033c0 <StartDefaultTask+0x1b8>)
 8003344:	f010 f946 	bl	80135d4 <puts>
					  BSP_LED_On(LED2);
 8003348:	2000      	movs	r0, #0
 800334a:	f006 fb21 	bl	8009990 <BSP_LED_On>
 800334e:	e005      	b.n	800335c <StartDefaultTask+0x154>
					}
			  }
			  else
			  {
				TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8003350:	481c      	ldr	r0, [pc, #112]	; (80033c4 <StartDefaultTask+0x1bc>)
 8003352:	f010 f93f 	bl	80135d4 <puts>
				BSP_LED_On(LED2);
 8003356:	2000      	movs	r0, #0
 8003358:	f006 fb1a 	bl	8009990 <BSP_LED_On>
			  }


		if(Socket!=-1){
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d00d      	beq.n	8003380 <StartDefaultTask+0x178>
			int error_connession=0;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
			for(;;){

				error_connession = controlla_valori_telefono(&sharedValues,Socket);
 8003368:	69f9      	ldr	r1, [r7, #28]
 800336a:	4817      	ldr	r0, [pc, #92]	; (80033c8 <StartDefaultTask+0x1c0>)
 800336c:	f7ff fe38 	bl	8002fe0 <controlla_valori_telefono>
 8003370:	6178      	str	r0, [r7, #20]

				//if we have an error after reaching the connection, we try to connect the board again
				//it will always be 1
				if(error_connession==1){
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d1f7      	bne.n	8003368 <StartDefaultTask+0x160>
					//wait 3 seconds and try to connect to the device again
					HAL_Delay(3000);
 8003378:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800337c:	f007 f880 	bl	800a480 <HAL_Delay>

			}
		}

	//wait 5 seconds and try to connect to the device again
	HAL_Delay(5000);
 8003380:	f241 3088 	movw	r0, #5000	; 0x1388
 8003384:	f007 f87c 	bl	800a480 <HAL_Delay>
	while(1){
 8003388:	e742      	b.n	8003210 <StartDefaultTask+0x8>
 800338a:	bf00      	nop
 800338c:	0801633c 	.word	0x0801633c
 8003390:	08016358 	.word	0x08016358
 8003394:	0801638c 	.word	0x0801638c
 8003398:	080163b0 	.word	0x080163b0
 800339c:	080163c0 	.word	0x080163c0
 80033a0:	080163d4 	.word	0x080163d4
 80033a4:	080163f0 	.word	0x080163f0
 80033a8:	20000000 	.word	0x20000000
 80033ac:	08016420 	.word	0x08016420
 80033b0:	08016454 	.word	0x08016454
 80033b4:	08016460 	.word	0x08016460
 80033b8:	08016488 	.word	0x08016488
 80033bc:	080164ac 	.word	0x080164ac
 80033c0:	080164dc 	.word	0x080164dc
 80033c4:	08016504 	.word	0x08016504
 80033c8:	20003d74 	.word	0x20003d74

080033cc <stampa>:
* @retval None
*/
/* USER CODE END Header_StartTask02 */

//Aggiorna i valori dei sensori così se vengono richiesti dall'app sono consistenti
void stampa(struct sharedValues_t *sv){
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	 osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033da:	f04f 31ff 	mov.w	r1, #4294967295
 80033de:	4618      	mov	r0, r3
 80033e0:	f00c ff60 	bl	80102a4 <osSemaphoreAcquire>

		float temperature,humidity,pressure;
		float separa = 0;
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
		int val1,val2;


		temperature = BSP_TSENSOR_ReadTemp();
 80033ea:	f006 fd71 	bl	8009ed0 <BSP_TSENSOR_ReadTemp>
 80033ee:	ed87 0a06 	vstr	s0, [r7, #24]
		humidity = BSP_HSENSOR_ReadHumidity();
 80033f2:	f006 fd15 	bl	8009e20 <BSP_HSENSOR_ReadHumidity>
 80033f6:	ed87 0a05 	vstr	s0, [r7, #20]
		pressure = BSP_PSENSOR_ReadPressure();
 80033fa:	f006 fd3f 	bl	8009e7c <BSP_PSENSOR_ReadPressure>
 80033fe:	ed87 0a04 	vstr	s0, [r7, #16]

		if(temperature>27){
 8003402:	edd7 7a06 	vldr	s15, [r7, #24]
 8003406:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 800340a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	dd0b      	ble.n	800342c <stampa+0x60>
			HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_SET);
 8003414:	2201      	movs	r2, #1
 8003416:	2110      	movs	r1, #16
 8003418:	4870      	ldr	r0, [pc, #448]	; (80035dc <stampa+0x210>)
 800341a:	f007 fd67 	bl	800aeec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_SET);
 800341e:	2201      	movs	r2, #1
 8003420:	2104      	movs	r1, #4
 8003422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003426:	f007 fd61 	bl	800aeec <HAL_GPIO_WritePin>
 800342a:	e00a      	b.n	8003442 <stampa+0x76>
		}
		else{
			HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	2110      	movs	r1, #16
 8003430:	486a      	ldr	r0, [pc, #424]	; (80035dc <stampa+0x210>)
 8003432:	f007 fd5b 	bl	800aeec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	2104      	movs	r1, #4
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f007 fd55 	bl	800aeec <HAL_GPIO_WritePin>
		}
//temperature
		val1 = temperature;
 8003442:	edd7 7a06 	vldr	s15, [r7, #24]
 8003446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800344a:	ee17 3a90 	vmov	r3, s15
 800344e:	60fb      	str	r3, [r7, #12]
		separa = temperature - val1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345a:	ed97 7a06 	vldr	s14, [r7, #24]
 800345e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
		val2 = trunc(separa * 100);
 8003466:	edd7 7a07 	vldr	s15, [r7, #28]
 800346a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80035e0 <stampa+0x214>
 800346e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003472:	ee17 0a90 	vmov	r0, s15
 8003476:	f7fd f867 	bl	8000548 <__aeabi_f2d>
 800347a:	4603      	mov	r3, r0
 800347c:	460c      	mov	r4, r1
 800347e:	ec44 3b10 	vmov	d0, r3, r4
 8003482:	f011 fab1 	bl	80149e8 <trunc>
 8003486:	ec54 3b10 	vmov	r3, r4, d0
 800348a:	4618      	mov	r0, r3
 800348c:	4621      	mov	r1, r4
 800348e:	f7fd fb63 	bl	8000b58 <__aeabi_d2iz>
 8003492:	4603      	mov	r3, r0
 8003494:	60bb      	str	r3, [r7, #8]
		sv->temperature_val1 = val1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]
		sv->temperature_val2 = val2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	605a      	str	r2, [r3, #4]
		if(sv->n_elements_temp<5){
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	dc0c      	bgt.n	80034c4 <stampa+0xf8>
			sv->array_temp[sv->n_elements_temp]=temperature;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	3302      	adds	r3, #2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	601a      	str	r2, [r3, #0]
			sv->n_elements_temp += 1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]

		}

//humidity
		val1 = humidity;
 80034c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034cc:	ee17 3a90 	vmov	r3, s15
 80034d0:	60fb      	str	r3, [r7, #12]
		separa = humidity - val1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80034e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e4:	edc7 7a07 	vstr	s15, [r7, #28]
		val2 = trunc(separa * 100);
 80034e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80034ec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80035e0 <stampa+0x214>
 80034f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f4:	ee17 0a90 	vmov	r0, s15
 80034f8:	f7fd f826 	bl	8000548 <__aeabi_f2d>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	ec44 3b10 	vmov	d0, r3, r4
 8003504:	f011 fa70 	bl	80149e8 <trunc>
 8003508:	ec54 3b10 	vmov	r3, r4, d0
 800350c:	4618      	mov	r0, r3
 800350e:	4621      	mov	r1, r4
 8003510:	f7fd fb22 	bl	8000b58 <__aeabi_d2iz>
 8003514:	4603      	mov	r3, r0
 8003516:	60bb      	str	r3, [r7, #8]
		sv->humidity_val1 = val1;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
		sv->humidity_val2 = val2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
		if(sv->n_elements_humidity<5){
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003528:	2b04      	cmp	r3, #4
 800352a:	dc0c      	bgt.n	8003546 <stampa+0x17a>
			sv->array_humidity[sv->n_elements_humidity]=humidity;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	330c      	adds	r3, #12
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	601a      	str	r2, [r3, #0]
			sv->n_elements_humidity +=1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	649a      	str	r2, [r3, #72]	; 0x48
		}

//pressure
		val1 = pressure;
 8003546:	edd7 7a04 	vldr	s15, [r7, #16]
 800354a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800354e:	ee17 3a90 	vmov	r3, s15
 8003552:	60fb      	str	r3, [r7, #12]
		separa = pressure - val1;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
		val2 = trunc(separa * 100);
 800356a:	edd7 7a07 	vldr	s15, [r7, #28]
 800356e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80035e0 <stampa+0x214>
 8003572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003576:	ee17 0a90 	vmov	r0, s15
 800357a:	f7fc ffe5 	bl	8000548 <__aeabi_f2d>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	ec44 3b10 	vmov	d0, r3, r4
 8003586:	f011 fa2f 	bl	80149e8 <trunc>
 800358a:	ec54 3b10 	vmov	r3, r4, d0
 800358e:	4618      	mov	r0, r3
 8003590:	4621      	mov	r1, r4
 8003592:	f7fd fae1 	bl	8000b58 <__aeabi_d2iz>
 8003596:	4603      	mov	r3, r0
 8003598:	60bb      	str	r3, [r7, #8]
		sv->pressure_val1 = val1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	651a      	str	r2, [r3, #80]	; 0x50
		sv->pressure_val2 = val2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
		if(sv->n_elements_pressure<5){
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	dc0c      	bgt.n	80035c8 <stampa+0x1fc>
			sv->array_pressure[sv->n_elements_pressure]=pressure;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	3316      	adds	r3, #22
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	601a      	str	r2, [r3, #0]
			sv->n_elements_pressure +=1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	671a      	str	r2, [r3, #112]	; 0x70
		}


	  osSemaphoreRelease(sv->mutex);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ce:	4618      	mov	r0, r3
 80035d0:	f00c fece 	bl	8010370 <osSemaphoreRelease>

}
 80035d4:	bf00      	nop
 80035d6:	3724      	adds	r7, #36	; 0x24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}
 80035dc:	48000400 	.word	0x48000400
 80035e0:	42c80000 	.word	0x42c80000

080035e4 <StartTask02>:
void StartTask02(void *arguments)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  stampa(&sharedValues);
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <StartTask02+0x18>)
 80035ee:	f7ff feed 	bl	80033cc <stampa>
	  osDelay(500);
 80035f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035f6:	f00c fd89 	bl	801010c <osDelay>
	  stampa(&sharedValues);
 80035fa:	e7f7      	b.n	80035ec <StartTask02+0x8>
 80035fc:	20003d74 	.word	0x20003d74

08003600 <aggiorna_contatore>:
  }
  /* USER CODE END StartTask02 */
}

void aggiorna_contatore(struct sharedValues_t *sv){
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
	uint16_t prox_value = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	817b      	strh	r3, [r7, #10]


	//prendo il mutex
	osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003616:	f04f 31ff 	mov.w	r1, #4294967295
 800361a:	4618      	mov	r0, r3
 800361c:	f00c fe42 	bl	80102a4 <osSemaphoreAcquire>

	prox_value = VL53L0X_PROXIMITY_GetDistance();
 8003620:	f7ff fcae 	bl	8002f80 <VL53L0X_PROXIMITY_GetDistance>
 8003624:	4603      	mov	r3, r0
 8003626:	817b      	strh	r3, [r7, #10]
	//printf("DISTANCE is = %d mm \n", prox_value);

	sv->proximity = prox_value;
 8003628:	897a      	ldrh	r2, [r7, #10]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	679a      	str	r2, [r3, #120]	; 0x78
	if(prox_value<100)
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	2b63      	cmp	r3, #99	; 0x63
 8003632:	d804      	bhi.n	800363e <aggiorna_contatore+0x3e>
		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8003634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003638:	4806      	ldr	r0, [pc, #24]	; (8003654 <aggiorna_contatore+0x54>)
 800363a:	f007 fc6f 	bl	800af1c <HAL_GPIO_TogglePin>
	osSemaphoreRelease(sv->mutex);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003644:	4618      	mov	r0, r3
 8003646:	f00c fe93 	bl	8010370 <osSemaphoreRelease>

}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	48000400 	.word	0x48000400

08003658 <Proximity_Test>:

void Proximity_Test(void *arguments)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  printf("\n*************************************************************\n");
 8003660:	4808      	ldr	r0, [pc, #32]	; (8003684 <Proximity_Test+0x2c>)
 8003662:	f00f ffb7 	bl	80135d4 <puts>
  printf("\n********************** Proximity Test ************************\n");
 8003666:	4808      	ldr	r0, [pc, #32]	; (8003688 <Proximity_Test+0x30>)
 8003668:	f00f ffb4 	bl	80135d4 <puts>
  printf("\n*************************************************************\n\n");
 800366c:	4807      	ldr	r0, [pc, #28]	; (800368c <Proximity_Test+0x34>)
 800366e:	f00f ffb1 	bl	80135d4 <puts>


  while(1)
  {
	  	  aggiorna_contatore(&sharedValues);
 8003672:	4807      	ldr	r0, [pc, #28]	; (8003690 <Proximity_Test+0x38>)
 8003674:	f7ff ffc4 	bl	8003600 <aggiorna_contatore>
	  	  HAL_Delay(1000);
 8003678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800367c:	f006 ff00 	bl	800a480 <HAL_Delay>
	  	  aggiorna_contatore(&sharedValues);
 8003680:	e7f7      	b.n	8003672 <Proximity_Test+0x1a>
 8003682:	bf00      	nop
 8003684:	08016534 	.word	0x08016534
 8003688:	08016574 	.word	0x08016574
 800368c:	080165b4 	.word	0x080165b4
 8003690:	20003d74 	.word	0x20003d74
 8003694:	00000000 	.word	0x00000000

08003698 <stampaDewpoint>:
  }

}

//acquisisce il tasto e stampa su seriale il valore di rugiada calcolato
void stampaDewpoint(struct sharedValues_t *sv){
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	b08f      	sub	sp, #60	; 0x3c
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	int dewpoint=-1;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
	char msg_d[30] = "";
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	f107 0310 	add.w	r3, r7, #16
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	611a      	str	r2, [r3, #16]
 80036ba:	615a      	str	r2, [r3, #20]
 80036bc:	831a      	strh	r2, [r3, #24]
	float hum_f,temp_f;

		osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c4:	f04f 31ff 	mov.w	r1, #4294967295
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00c fdeb 	bl	80102a4 <osSemaphoreAcquire>

		hum_f = sv->humidity_val1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		temp_f = sv->temperature_val1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		dewpoint = (pow(hum_f/100, 0.125)*(112+temp_f*0.9)+(0.1*temp_f)-112);
 80036ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036f2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80037f0 <stampaDewpoint+0x158>
 80036f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036fa:	ee16 0a90 	vmov	r0, s13
 80036fe:	f7fc ff23 	bl	8000548 <__aeabi_f2d>
 8003702:	4603      	mov	r3, r0
 8003704:	460c      	mov	r4, r1
 8003706:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80037d8 <stampaDewpoint+0x140>
 800370a:	ec44 3b10 	vmov	d0, r3, r4
 800370e:	f011 f9a5 	bl	8014a5c <pow>
 8003712:	ec56 5b10 	vmov	r5, r6, d0
 8003716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003718:	f7fc ff16 	bl	8000548 <__aeabi_f2d>
 800371c:	a330      	add	r3, pc, #192	; (adr r3, 80037e0 <stampaDewpoint+0x148>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fc ff69 	bl	80005f8 <__aeabi_dmul>
 8003726:	4603      	mov	r3, r0
 8003728:	460c      	mov	r4, r1
 800372a:	4618      	mov	r0, r3
 800372c:	4621      	mov	r1, r4
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <stampaDewpoint+0x15c>)
 8003734:	f7fc fdaa 	bl	800028c <__adddf3>
 8003738:	4603      	mov	r3, r0
 800373a:	460c      	mov	r4, r1
 800373c:	461a      	mov	r2, r3
 800373e:	4623      	mov	r3, r4
 8003740:	4628      	mov	r0, r5
 8003742:	4631      	mov	r1, r6
 8003744:	f7fc ff58 	bl	80005f8 <__aeabi_dmul>
 8003748:	4603      	mov	r3, r0
 800374a:	460c      	mov	r4, r1
 800374c:	4625      	mov	r5, r4
 800374e:	461c      	mov	r4, r3
 8003750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003752:	f7fc fef9 	bl	8000548 <__aeabi_f2d>
 8003756:	a324      	add	r3, pc, #144	; (adr r3, 80037e8 <stampaDewpoint+0x150>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc ff4c 	bl	80005f8 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4620      	mov	r0, r4
 8003766:	4629      	mov	r1, r5
 8003768:	f7fc fd90 	bl	800028c <__adddf3>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	4618      	mov	r0, r3
 8003772:	4621      	mov	r1, r4
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <stampaDewpoint+0x15c>)
 800377a:	f7fc fd85 	bl	8000288 <__aeabi_dsub>
 800377e:	4603      	mov	r3, r0
 8003780:	460c      	mov	r4, r1
 8003782:	4618      	mov	r0, r3
 8003784:	4621      	mov	r1, r4
 8003786:	f7fd f9e7 	bl	8000b58 <__aeabi_d2iz>
 800378a:	4603      	mov	r3, r0
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
		sv->dewpoint=dewpoint;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003792:	67da      	str	r2, [r3, #124]	; 0x7c

		if(sv->enableDew==1){
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379a:	2b01      	cmp	r3, #1
 800379c:	d112      	bne.n	80037c4 <stampaDewpoint+0x12c>

			snprintf(msg_d,30," DEWPOINT = %d\n\r", dewpoint);
 800379e:	f107 000c 	add.w	r0, r7, #12
 80037a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a4:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <stampaDewpoint+0x160>)
 80037a6:	211e      	movs	r1, #30
 80037a8:	f00f ff1c 	bl	80135e4 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg_d, sizeof(msg_d), 1000);
 80037ac:	f107 010c 	add.w	r1, r7, #12
 80037b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b4:	221e      	movs	r2, #30
 80037b6:	4811      	ldr	r0, [pc, #68]	; (80037fc <stampaDewpoint+0x164>)
 80037b8:	f00b fc81 	bl	800f0be <HAL_UART_Transmit>
			sv->enableDew=0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}
		osSemaphoreRelease(sv->mutex);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00c fdd0 	bl	8010370 <osSemaphoreRelease>


}
 80037d0:	bf00      	nop
 80037d2:	373c      	adds	r7, #60	; 0x3c
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d8:	00000000 	.word	0x00000000
 80037dc:	3fc00000 	.word	0x3fc00000
 80037e0:	cccccccd 	.word	0xcccccccd
 80037e4:	3feccccc 	.word	0x3feccccc
 80037e8:	9999999a 	.word	0x9999999a
 80037ec:	3fb99999 	.word	0x3fb99999
 80037f0:	42c80000 	.word	0x42c80000
 80037f4:	405c0000 	.word	0x405c0000
 80037f8:	080165f4 	.word	0x080165f4
 80037fc:	20003e6c 	.word	0x20003e6c

08003800 <StartDewpointTask>:

void StartDewpointTask(void *arguments){
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/*USER CODE BEGIN StartDewpointTask*/
	/* Infinite loop */
	for(;;)
	{
		stampaDewpoint(&sharedValues);
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <StartDewpointTask+0x18>)
 800380a:	f7ff ff45 	bl	8003698 <stampaDewpoint>
		 osDelay(1000);
 800380e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003812:	f00c fc7b 	bl	801010c <osDelay>
		stampaDewpoint(&sharedValues);
 8003816:	e7f7      	b.n	8003808 <StartDewpointTask+0x8>
 8003818:	20003d74 	.word	0x20003d74

0800381c <computeAndUpdate>:
	}
	/* USER CODE END StartDewpointTask */
}

//Faccio statistiche sui dati campionati e salvati da altri thread
void computeAndUpdate(struct sharedValues_t *sv){
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	int i;

	osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382a:	f04f 31ff 	mov.w	r1, #4294967295
 800382e:	4618      	mov	r0, r3
 8003830:	f00c fd38 	bl	80102a4 <osSemaphoreAcquire>
	if(sv->n_elements_temp==5){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d128      	bne.n	800388e <computeAndUpdate+0x72>
		sv->average_temerature=0;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
		for(i=0;i<5;i++){
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e011      	b.n	800386e <computeAndUpdate+0x52>
			sv->average_temerature = sv->average_temerature + sv->array_temp[i];
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3302      	adds	r3, #2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	edc3 7a07 	vstr	s15, [r3, #28]
		for(i=0;i<5;i++){
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b04      	cmp	r3, #4
 8003872:	ddea      	ble.n	800384a <computeAndUpdate+0x2e>
		}

		sv->average_temerature = sv->average_temerature / 5;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	ed93 7a07 	vldr	s14, [r3, #28]
 800387a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800387e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	edc3 7a07 	vstr	s15, [r3, #28]
		sv->check_mean_temp=1;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
	}


	if(sv->n_elements_pressure==5){
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	2b05      	cmp	r3, #5
 8003894:	d128      	bne.n	80038e8 <computeAndUpdate+0xcc>
		sv->average_pressure=0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	66da      	str	r2, [r3, #108]	; 0x6c
		for(i=0;i<5;i++){
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e011      	b.n	80038c8 <computeAndUpdate+0xac>
			sv->average_pressure = sv->average_pressure + sv->array_pressure[i];
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3316      	adds	r3, #22
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		for(i=0;i<5;i++){
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	ddea      	ble.n	80038a4 <computeAndUpdate+0x88>
		}
		sv->average_pressure = sv->average_pressure / 5;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80038d4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80038d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		sv->check_mean_pressure=1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	675a      	str	r2, [r3, #116]	; 0x74
	}


	if(sv->n_elements_humidity==5){
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d128      	bne.n	8003942 <computeAndUpdate+0x126>
		sv->average_humidity=0;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
		for(i=0;i<5;i++){
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e011      	b.n	8003922 <computeAndUpdate+0x106>
			sv->average_humidity = sv->average_humidity + sv->array_humidity[i];
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	330c      	adds	r3, #12
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		for(i=0;i<5;i++){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b04      	cmp	r3, #4
 8003926:	ddea      	ble.n	80038fe <computeAndUpdate+0xe2>
		}
		sv->average_humidity = sv->average_humidity / 5;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800392e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		sv->check_mean_humidity=1;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	osSemaphoreRelease(sv->mutex);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003948:	4618      	mov	r0, r3
 800394a:	f00c fd11 	bl	8010370 <osSemaphoreRelease>

}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <ComputeStatistics>:

void ComputeStatistics(void *arguments){
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

	for(;;){
		computeAndUpdate(&sharedValues);
 8003960:	4803      	ldr	r0, [pc, #12]	; (8003970 <ComputeStatistics+0x18>)
 8003962:	f7ff ff5b 	bl	800381c <computeAndUpdate>

		osDelay(1000);
 8003966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800396a:	f00c fbcf 	bl	801010c <osDelay>
		computeAndUpdate(&sharedValues);
 800396e:	e7f7      	b.n	8003960 <ComputeStatistics+0x8>
 8003970:	20003d74 	.word	0x20003d74

08003974 <checkAndPrint>:
	}
}

//stampa valori sulla seria, quando disponibili stampa anche i valori statistici
void checkAndPrint(struct sharedValues_t *sv){
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800397a:	af02      	add	r7, sp, #8
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	6018      	str	r0, [r3, #0]

	osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	4618      	mov	r0, r3
 800398e:	f00c fc89 	bl	80102a4 <osSemaphoreAcquire>

	char msg[100] = "";
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003998:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800399c:	2260      	movs	r2, #96	; 0x60
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f00f fd9b 	bl	80134dc <memset>
	char msg1[100] = "";
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80039ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80039b0:	2260      	movs	r2, #96	; 0x60
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00f fd91 	bl	80134dc <memset>
	char msg2[100] = "";
 80039ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	3304      	adds	r3, #4
 80039c4:	2260      	movs	r2, #96	; 0x60
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f00f fd87 	bl	80134dc <memset>
	char msg3[100] = "";
 80039ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	3304      	adds	r3, #4
 80039d8:	2260      	movs	r2, #96	; 0x60
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f00f fd7d 	bl	80134dc <memset>
	char msg4[100] = "";
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	3304      	adds	r3, #4
 80039ec:	2260      	movs	r2, #96	; 0x60
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f00f fd73 	bl	80134dc <memset>
	int i;
	float separa;
	int val1,val2;


	snprintf(msg1,100,"Temperature = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	4aab      	ldr	r2, [pc, #684]	; (8003cb8 <checkAndPrint+0x344>)
 8003a0c:	2164      	movs	r1, #100	; 0x64
 8003a0e:	f00f fde9 	bl	80135e4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg1, sizeof(msg1), 1000);
 8003a12:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8003a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1a:	2264      	movs	r2, #100	; 0x64
 8003a1c:	48a7      	ldr	r0, [pc, #668]	; (8003cbc <checkAndPrint+0x348>)
 8003a1e:	f00b fb4e 	bl	800f0be <HAL_UART_Transmit>


	snprintf(msg2,100,"Humidity = %d.%02d\n\r", sv->humidity_val1, sv->humidity_val2);
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	4aa2      	ldr	r2, [pc, #648]	; (8003cc0 <checkAndPrint+0x34c>)
 8003a38:	2164      	movs	r1, #100	; 0x64
 8003a3a:	f00f fdd3 	bl	80135e4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg2, sizeof(msg2), 1000);
 8003a3e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a46:	2264      	movs	r2, #100	; 0x64
 8003a48:	489c      	ldr	r0, [pc, #624]	; (8003cbc <checkAndPrint+0x348>)
 8003a4a:	f00b fb38 	bl	800f0be <HAL_UART_Transmit>


	snprintf(msg3,100,"Pressure = %d.%02d hPa\n\r", sv->pressure_val1, sv->pressure_val2);
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	4a98      	ldr	r2, [pc, #608]	; (8003cc4 <checkAndPrint+0x350>)
 8003a64:	2164      	movs	r1, #100	; 0x64
 8003a66:	f00f fdbd 	bl	80135e4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg3, sizeof(msg3), 1000);
 8003a6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a72:	2264      	movs	r2, #100	; 0x64
 8003a74:	4891      	ldr	r0, [pc, #580]	; (8003cbc <checkAndPrint+0x348>)
 8003a76:	f00b fb22 	bl	800f0be <HAL_UART_Transmit>


	snprintf(msg4,100,"Distance = %d mm\n\r", sv->proximity);
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a80:	f107 0008 	add.w	r0, r7, #8
 8003a84:	4a90      	ldr	r2, [pc, #576]	; (8003cc8 <checkAndPrint+0x354>)
 8003a86:	2164      	movs	r1, #100	; 0x64
 8003a88:	f00f fdac 	bl	80135e4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg4, sizeof(msg4), 1000);
 8003a8c:	f107 0108 	add.w	r1, r7, #8
 8003a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a94:	2264      	movs	r2, #100	; 0x64
 8003a96:	4889      	ldr	r0, [pc, #548]	; (8003cbc <checkAndPrint+0x348>)
 8003a98:	f00b fb11 	bl	800f0be <HAL_UART_Transmit>


	if(sv->n_elements_temp==5 && sv->check_mean_temp==1 ){
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d150      	bne.n	8003b48 <checkAndPrint+0x1d4>
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d14b      	bne.n	8003b48 <checkAndPrint+0x1d4>
		val1 = sv->average_temerature;
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003abc:	ee17 3a90 	vmov	r3, s15
 8003ac0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
		separa = sv->average_temerature - val1;
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	ed93 7a07 	vldr	s14, [r3, #28]
 8003acc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003adc:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
		val2 = trunc(separa * 100);
 8003ae0:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8003ae4:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003ccc <checkAndPrint+0x358>
 8003ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aec:	ee17 0a90 	vmov	r0, s15
 8003af0:	f7fc fd2a 	bl	8000548 <__aeabi_f2d>
 8003af4:	4603      	mov	r3, r0
 8003af6:	460c      	mov	r4, r1
 8003af8:	ec44 3b10 	vmov	d0, r3, r4
 8003afc:	f010 ff74 	bl	80149e8 <trunc>
 8003b00:	ec54 3b10 	vmov	r3, r4, d0
 8003b04:	4618      	mov	r0, r3
 8003b06:	4621      	mov	r1, r4
 8003b08:	f7fd f826 	bl	8000b58 <__aeabi_d2iz>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		snprintf(msg,100,"Average Temperature = %d.%02d\n\r", val1, val2);
 8003b12:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8003b16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003b20:	4a6b      	ldr	r2, [pc, #428]	; (8003cd0 <checkAndPrint+0x35c>)
 8003b22:	2164      	movs	r1, #100	; 0x64
 8003b24:	f00f fd5e 	bl	80135e4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003b28:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8003b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b30:	2264      	movs	r2, #100	; 0x64
 8003b32:	4862      	ldr	r0, [pc, #392]	; (8003cbc <checkAndPrint+0x348>)
 8003b34:	f00b fac3 	bl	800f0be <HAL_UART_Transmit>

		sv->n_elements_temp=0;
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	621a      	str	r2, [r3, #32]
		sv->check_mean_temp=0;
 8003b40:	1d3b      	adds	r3, r7, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2200      	movs	r2, #0
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(sv->n_elements_humidity==5 && sv->check_mean_humidity==1){
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d150      	bne.n	8003bf4 <checkAndPrint+0x280>
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d14b      	bne.n	8003bf4 <checkAndPrint+0x280>
		val1 = sv->average_humidity;
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b68:	ee17 3a90 	vmov	r3, s15
 8003b6c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
		separa = sv->average_humidity - val1;
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003b78:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b88:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
		val2 = trunc(separa * 100);
 8003b8c:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8003b90:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003ccc <checkAndPrint+0x358>
 8003b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b98:	ee17 0a90 	vmov	r0, s15
 8003b9c:	f7fc fcd4 	bl	8000548 <__aeabi_f2d>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	ec44 3b10 	vmov	d0, r3, r4
 8003ba8:	f010 ff1e 	bl	80149e8 <trunc>
 8003bac:	ec54 3b10 	vmov	r3, r4, d0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	f7fc ffd0 	bl	8000b58 <__aeabi_d2iz>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		snprintf(msg,100,"Average Humidity = %d.%02d\n\r", val1, val2);
 8003bbe:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8003bc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003bcc:	4a41      	ldr	r2, [pc, #260]	; (8003cd4 <checkAndPrint+0x360>)
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	f00f fd08 	bl	80135e4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003bd4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8003bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bdc:	2264      	movs	r2, #100	; 0x64
 8003bde:	4837      	ldr	r0, [pc, #220]	; (8003cbc <checkAndPrint+0x348>)
 8003be0:	f00b fa6d 	bl	800f0be <HAL_UART_Transmit>

		sv->n_elements_humidity=0;
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	649a      	str	r2, [r3, #72]	; 0x48
		sv->check_mean_humidity=0;
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(sv->n_elements_pressure==5 && sv->check_mean_pressure==1){
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d150      	bne.n	8003ca0 <checkAndPrint+0x32c>
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d14b      	bne.n	8003ca0 <checkAndPrint+0x32c>
		val1 = sv->average_pressure;
 8003c08:	1d3b      	adds	r3, r7, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c14:	ee17 3a90 	vmov	r3, s15
 8003c18:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
		separa = sv->average_pressure - val1;
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003c24:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c34:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
		val2 = trunc(separa * 100);
 8003c38:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8003c3c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003ccc <checkAndPrint+0x358>
 8003c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c44:	ee17 0a90 	vmov	r0, s15
 8003c48:	f7fc fc7e 	bl	8000548 <__aeabi_f2d>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	ec44 3b10 	vmov	d0, r3, r4
 8003c54:	f010 fec8 	bl	80149e8 <trunc>
 8003c58:	ec54 3b10 	vmov	r3, r4, d0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	4621      	mov	r1, r4
 8003c60:	f7fc ff7a 	bl	8000b58 <__aeabi_d2iz>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		snprintf(msg,100,"Average Pressure = %d.%02d\n\r", val1, val2);
 8003c6a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8003c6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <checkAndPrint+0x364>)
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	f00f fcb2 	bl	80135e4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003c80:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8003c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	480c      	ldr	r0, [pc, #48]	; (8003cbc <checkAndPrint+0x348>)
 8003c8c:	f00b fa17 	bl	800f0be <HAL_UART_Transmit>

		sv->n_elements_pressure=0;
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	671a      	str	r2, [r3, #112]	; 0x70
		sv->check_mean_pressure=0;
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	675a      	str	r2, [r3, #116]	; 0x74
	}
	osSemaphoreRelease(sv->mutex);
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f00c fb61 	bl	8010370 <osSemaphoreRelease>
}
 8003cae:	bf00      	nop
 8003cb0:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}
 8003cb8:	08016608 	.word	0x08016608
 8003cbc:	20003e6c 	.word	0x20003e6c
 8003cc0:	08016620 	.word	0x08016620
 8003cc4:	08016638 	.word	0x08016638
 8003cc8:	08016654 	.word	0x08016654
 8003ccc:	42c80000 	.word	0x42c80000
 8003cd0:	08016668 	.word	0x08016668
 8003cd4:	08016688 	.word	0x08016688
 8003cd8:	080166a8 	.word	0x080166a8

08003cdc <SerialPrint>:


void SerialPrint(void *arguments){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]


	for(;;){

		checkAndPrint(&sharedValues);
 8003ce4:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <SerialPrint+0x18>)
 8003ce6:	f7ff fe45 	bl	8003974 <checkAndPrint>
		osDelay(2000);
 8003cea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003cee:	f00c fa0d 	bl	801010c <osDelay>
		checkAndPrint(&sharedValues);
 8003cf2:	e7f7      	b.n	8003ce4 <SerialPrint+0x8>
 8003cf4:	20003d74 	.word	0x20003d74

08003cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_GPIO_EXTI_Callback>:
}
#endif /* USE_FULL_ASSERT */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_EXTI_Callback+0x18>
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_EXTI_Callback+0x1e>
    	}
    }

    default:
    {
      break;
 8003d1e:	e00e      	b.n	8003d3e <HAL_GPIO_EXTI_Callback+0x36>
      SPI_WIFI_ISR();
 8003d20:	f7fe fbba 	bl	8002498 <SPI_WIFI_ISR>
      break;
 8003d24:	e00c      	b.n	8003d40 <HAL_GPIO_EXTI_Callback+0x38>
    	if (HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) != GPIO_PIN_SET){
 8003d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d2a:	4807      	ldr	r0, [pc, #28]	; (8003d48 <HAL_GPIO_EXTI_Callback+0x40>)
 8003d2c:	f007 f8c6 	bl	800aebc <HAL_GPIO_ReadPin>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_EXTI_Callback+0x36>
    		sharedValues.enableDew=1;
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_GPIO_EXTI_Callback+0x44>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
 8003d3e:	bf00      	nop
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	48000800 	.word	0x48000800
 8003d4c:	20003d74 	.word	0x20003d74

08003d50 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <SPI3_IRQHandler+0x10>)
 8003d56:	f00a fc37 	bl	800e5c8 <HAL_SPI_IRQHandler>
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200037fc 	.word	0x200037fc

08003d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <HAL_MspInit+0x44>)
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	4a0e      	ldr	r2, [pc, #56]	; (8003da8 <HAL_MspInit+0x44>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6613      	str	r3, [r2, #96]	; 0x60
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_MspInit+0x44>)
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_MspInit+0x44>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <HAL_MspInit+0x44>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_MspInit+0x44>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003dc4:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d128      	bne.n	8003e1e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003dcc:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dea:	f043 0310 	orr.w	r3, r3, #16
 8003dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003dfc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003e0e:	2306      	movs	r3, #6
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4619      	mov	r1, r3
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003e1a:	f006 fdb3 	bl	800a984 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8003e1e:	bf00      	nop
 8003e20:	3728      	adds	r7, #40	; 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000088c 	.word	0x2000088c
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	48001000 	.word	0x48001000

08003e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_I2C_MspInit+0x7c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d128      	bne.n	8003ea8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_I2C_MspInit+0x80>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_I2C_MspInit+0x80>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <HAL_I2C_MspInit+0x80>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003e6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e74:	2312      	movs	r3, #18
 8003e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e80:	2304      	movs	r3, #4
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4619      	mov	r1, r3
 8003e8a:	480b      	ldr	r0, [pc, #44]	; (8003eb8 <HAL_I2C_MspInit+0x84>)
 8003e8c:	f006 fd7a 	bl	800a984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_I2C_MspInit+0x80>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_I2C_MspInit+0x80>)
 8003e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_I2C_MspInit+0x80>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ea8:	bf00      	nop
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40005800 	.word	0x40005800
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	48000400 	.word	0x48000400

08003ebc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_I2C_MspDeInit+0x3c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10f      	bne.n	8003eee <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_I2C_MspDeInit+0x40>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <HAL_I2C_MspDeInit+0x40>)
 8003ed4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ede:	4808      	ldr	r0, [pc, #32]	; (8003f00 <HAL_I2C_MspDeInit+0x44>)
 8003ee0:	f006 fef8 	bl	800acd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ee8:	4805      	ldr	r0, [pc, #20]	; (8003f00 <HAL_I2C_MspDeInit+0x44>)
 8003eea:	f006 fef3 	bl	800acd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40005800 	.word	0x40005800
 8003efc:	40021000 	.word	0x40021000
 8003f00:	48000400 	.word	0x48000400

08003f04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <HAL_QSPI_MspInit+0x7c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d128      	bne.n	8003f78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_QSPI_MspInit+0x80>)
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_QSPI_MspInit+0x80>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6513      	str	r3, [r2, #80]	; 0x50
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_QSPI_MspInit+0x80>)
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_QSPI_MspInit+0x80>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <HAL_QSPI_MspInit+0x80>)
 8003f44:	f043 0310 	orr.w	r3, r3, #16
 8003f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_QSPI_MspInit+0x80>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003f56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003f5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f64:	2303      	movs	r3, #3
 8003f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003f68:	230a      	movs	r3, #10
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4619      	mov	r1, r3
 8003f72:	4805      	ldr	r0, [pc, #20]	; (8003f88 <HAL_QSPI_MspInit+0x84>)
 8003f74:	f006 fd06 	bl	800a984 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003f78:	bf00      	nop
 8003f7a:	3728      	adds	r7, #40	; 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	a0001000 	.word	0xa0001000
 8003f84:	40021000 	.word	0x40021000
 8003f88:	48001000 	.word	0x48001000

08003f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a17      	ldr	r2, [pc, #92]	; (8004008 <HAL_SPI_MspInit+0x7c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d128      	bne.n	8004000 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <HAL_SPI_MspInit+0x80>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <HAL_SPI_MspInit+0x80>)
 8003fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <HAL_SPI_MspInit+0x80>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_SPI_MspInit+0x80>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <HAL_SPI_MspInit+0x80>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_SPI_MspInit+0x80>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003fde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fec:	2303      	movs	r3, #3
 8003fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4805      	ldr	r0, [pc, #20]	; (8004010 <HAL_SPI_MspInit+0x84>)
 8003ffc:	f006 fcc2 	bl	800a984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004000:	bf00      	nop
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40003c00 	.word	0x40003c00
 800400c:	40021000 	.word	0x40021000
 8004010:	48000800 	.word	0x48000800

08004014 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a08      	ldr	r2, [pc, #32]	; (8004044 <HAL_SPI_MspDeInit+0x30>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10a      	bne.n	800403c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <HAL_SPI_MspDeInit+0x34>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	4a07      	ldr	r2, [pc, #28]	; (8004048 <HAL_SPI_MspDeInit+0x34>)
 800402c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004030:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8004032:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004036:	4805      	ldr	r0, [pc, #20]	; (800404c <HAL_SPI_MspDeInit+0x38>)
 8004038:	f006 fe4c 	bl	800acd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40003c00 	.word	0x40003c00
 8004048:	40021000 	.word	0x40021000
 800404c:	48000800 	.word	0x48000800

08004050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08c      	sub	sp, #48	; 0x30
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <HAL_UART_MspInit+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d128      	bne.n	80040c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_UART_MspInit+0xdc>)
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_UART_MspInit+0xdc>)
 8004078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800407c:	6613      	str	r3, [r2, #96]	; 0x60
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_UART_MspInit+0xdc>)
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408a:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_UART_MspInit+0xdc>)
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	4a27      	ldr	r2, [pc, #156]	; (800412c <HAL_UART_MspInit+0xdc>)
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004096:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_UART_MspInit+0xdc>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80040a2:	23c0      	movs	r3, #192	; 0xc0
 80040a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040b2:	2307      	movs	r3, #7
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	f107 031c 	add.w	r3, r7, #28
 80040ba:	4619      	mov	r1, r3
 80040bc:	481c      	ldr	r0, [pc, #112]	; (8004130 <HAL_UART_MspInit+0xe0>)
 80040be:	f006 fc61 	bl	800a984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040c2:	e02d      	b.n	8004120 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_UART_MspInit+0xe4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d128      	bne.n	8004120 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_UART_MspInit+0xdc>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_UART_MspInit+0xdc>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_UART_MspInit+0xdc>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_UART_MspInit+0xdc>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	4a10      	ldr	r2, [pc, #64]	; (800412c <HAL_UART_MspInit+0xdc>)
 80040ec:	f043 0308 	orr.w	r3, r3, #8
 80040f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_UART_MspInit+0xdc>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80040fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004110:	2307      	movs	r3, #7
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004114:	f107 031c 	add.w	r3, r7, #28
 8004118:	4619      	mov	r1, r3
 800411a:	4807      	ldr	r0, [pc, #28]	; (8004138 <HAL_UART_MspInit+0xe8>)
 800411c:	f006 fc32 	bl	800a984 <HAL_GPIO_Init>
}
 8004120:	bf00      	nop
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40013800 	.word	0x40013800
 800412c:	40021000 	.word	0x40021000
 8004130:	48000400 	.word	0x48000400
 8004134:	40004800 	.word	0x40004800
 8004138:	48000c00 	.word	0x48000c00

0800413c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415c:	d154      	bne.n	8004208 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800415e:	4b2c      	ldr	r3, [pc, #176]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	4a2b      	ldr	r2, [pc, #172]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800417a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4619      	mov	r1, r3
 800418a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800418e:	f006 fbf9 	bl	800a984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8004192:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a0:	2303      	movs	r3, #3
 80041a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80041a4:	230a      	movs	r3, #10
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4619      	mov	r1, r3
 80041ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041b2:	f006 fbe7 	bl	800a984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	4a15      	ldr	r2, [pc, #84]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d114      	bne.n	8004204 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80041f2:	f008 f877 	bl	800c2e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	4a05      	ldr	r2, [pc, #20]	; (8004210 <HAL_PCD_MspInit+0xd4>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004202:	e001      	b.n	8004208 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8004204:	f008 f86e 	bl	800c2e4 <HAL_PWREx_EnableVddUSB>
}
 8004208:	bf00      	nop
 800420a:	3728      	adds	r7, #40	; 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000

08004214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004226:	e7fe      	b.n	8004226 <HardFault_Handler+0x4>

08004228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800422c:	e7fe      	b.n	800422c <MemManage_Handler+0x4>

0800422e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004232:	e7fe      	b.n	8004232 <BusFault_Handler+0x4>

08004234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004238:	e7fe      	b.n	8004238 <UsageFault_Handler+0x4>

0800423a <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424c:	f006 f8f8 	bl	800a440 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004250:	f00d ffc4 	bl	80121dc <xTaskGetSchedulerState>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d001      	beq.n	800425e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800425a:	f00e fe95 	bl	8012f88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}

08004262 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004266:	2020      	movs	r0, #32
 8004268:	f006 fe72 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800426c:	2040      	movs	r0, #64	; 0x40
 800426e:	f006 fe6f 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004272:	2080      	movs	r0, #128	; 0x80
 8004274:	f006 fe6c 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004278:	f44f 7080 	mov.w	r0, #256	; 0x100
 800427c:	f006 fe68 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}

08004284 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI1_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004288:	2002      	movs	r0, #2
 800428a:	f006 fe61 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}

08004292 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004296:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800429a:	f006 fe59 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800429e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80042a2:	f006 fe55 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80042a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042aa:	f006 fe51 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80042ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80042b2:	f006 fe4d 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80042b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042ba:	f006 fe49 	bl	800af50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e00a      	b.n	80042ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042d4:	f3af 8000 	nop.w
 80042d8:	4601      	mov	r1, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	60ba      	str	r2, [r7, #8]
 80042e0:	b2ca      	uxtb	r2, r1
 80042e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3301      	adds	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbf0      	blt.n	80042d4 <_read+0x12>
	}

return len;
 80042f2:	687b      	ldr	r3, [r7, #4]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e009      	b.n	8004322 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	60ba      	str	r2, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe faae 	bl	8002878 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3301      	adds	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	dbf1      	blt.n	800430e <_write+0x12>
	}
	return len;
 800432a:	687b      	ldr	r3, [r7, #4]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_close>:

int _close(int file)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	return -1;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800435c:	605a      	str	r2, [r3, #4]
	return 0;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <_isatty>:

int _isatty(int file)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	return 1;
 8004374:	2301      	movs	r3, #1
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004382:	b480      	push	{r7}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
	return 0;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <_sbrk+0x5c>)
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <_sbrk+0x60>)
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <_sbrk+0x64>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <_sbrk+0x64>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <_sbrk+0x68>)
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <_sbrk+0x64>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d207      	bcs.n	80043dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043cc:	f00f f842 	bl	8013454 <__errno>
 80043d0:	4602      	mov	r2, r0
 80043d2:	230c      	movs	r3, #12
 80043d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	e009      	b.n	80043f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <_sbrk+0x64>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <_sbrk+0x64>)
 80043ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20018000 	.word	0x20018000
 80043fc:	00000400 	.word	0x00000400
 8004400:	20000890 	.word	0x20000890
 8004404:	20004990 	.word	0x20004990

08004408 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800440c:	4b17      	ldr	r3, [pc, #92]	; (800446c <SystemInit+0x64>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	4a16      	ldr	r2, [pc, #88]	; (800446c <SystemInit+0x64>)
 8004414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <SystemInit+0x68>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <SystemInit+0x68>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <SystemInit+0x68>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <SystemInit+0x68>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <SystemInit+0x68>)
 8004434:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004438:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800443c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <SystemInit+0x68>)
 8004440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004444:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <SystemInit+0x68>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <SystemInit+0x68>)
 800444c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <SystemInit+0x68>)
 8004454:	2200      	movs	r2, #0
 8004456:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <SystemInit+0x64>)
 800445a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800445e:	609a      	str	r2, [r3, #8]
#endif
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000ed00 	.word	0xe000ed00
 8004470:	40021000 	.word	0x40021000

08004474 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f004 fdfb 	bl	8009080 <VL53L0X_get_device_info>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800448e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 fc6f 	bl	8005d8e <VL53L0X_get_offset_calibration_data_micro_meter>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80044b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80044c0:	b5b0      	push	{r4, r5, r7, lr}
 80044c2:	b094      	sub	sp, #80	; 0x50
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80044ce:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80044d6:	2200      	movs	r2, #0
 80044d8:	2188      	movs	r1, #136	; 0x88
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f004 ff90 	bl	8009400 <VL53L0X_WrByte>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044f4:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80044fe:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a71      	ldr	r2, [pc, #452]	; (80046cc <VL53L0X_DataInit+0x20c>)
 8004506:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a70      	ldr	r2, [pc, #448]	; (80046d0 <VL53L0X_DataInit+0x210>)
 800450e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa5a 	bl	80049d8 <VL53L0X_GetDeviceParameters>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 800452a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800452e:	2b00      	cmp	r3, #0
 8004530:	d112      	bne.n	8004558 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004532:	2300      	movs	r3, #0
 8004534:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004536:	2300      	movs	r3, #0
 8004538:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f103 0410 	add.w	r4, r3, #16
 8004540:	f107 0508 	add.w	r5, r7, #8
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800454a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800454c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800454e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004550:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2264      	movs	r2, #100	; 0x64
 800455c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004566:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004570:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800457a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004586:	2300      	movs	r3, #0
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
 800458a:	e014      	b.n	80045b6 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 800458c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d114      	bne.n	80045be <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004596:	b29b      	uxth	r3, r3
 8004598:	2201      	movs	r2, #1
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fd83 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80045b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b2:	3301      	adds	r3, #1
 80045b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	dde7      	ble.n	800458c <VL53L0X_DataInit+0xcc>
 80045bc:	e000      	b.n	80045c0 <VL53L0X_DataInit+0x100>
		else
			break;
 80045be:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80045c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045c8:	2200      	movs	r2, #0
 80045ca:	2102      	movs	r1, #2
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fd6b 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80045d8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d107      	bne.n	80045f0 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045e0:	2200      	movs	r2, #0
 80045e2:	2103      	movs	r1, #3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fd5f 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80045f0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045f8:	2200      	movs	r2, #0
 80045fa:	2104      	movs	r1, #4
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fd53 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004608:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004610:	2200      	movs	r2, #0
 8004612:	2105      	movs	r1, #5
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fd47 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004620:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004628:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800462c:	2100      	movs	r1, #0
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fdea 	bl	8005208 <VL53L0X_SetLimitCheckValue>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800463a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004646:	2101      	movs	r1, #1
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fddd 	bl	8005208 <VL53L0X_SetLimitCheckValue>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004654:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004658:	2b00      	cmp	r3, #0
 800465a:	d108      	bne.n	800466e <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800465c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004660:	2102      	movs	r1, #2
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fdd0 	bl	8005208 <VL53L0X_SetLimitCheckValue>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800466e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004676:	2200      	movs	r2, #0
 8004678:	2103      	movs	r1, #3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fdc4 	bl	8005208 <VL53L0X_SetLimitCheckValue>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004686:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	2101      	movs	r1, #1
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f004 feb0 	bl	8009400 <VL53L0X_WrByte>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80046ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80046be:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3750      	adds	r7, #80	; 0x50
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ca:	bf00      	nop
 80046cc:	00016b85 	.word	0x00016b85
 80046d0:	000970a4 	.word	0x000970a4

080046d4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80046d4:	b5b0      	push	{r4, r5, r7, lr}
 80046d6:	b09e      	sub	sp, #120	; 0x78
 80046d8:	af02      	add	r7, sp, #8
 80046da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80046e2:	f107 031c 	add.w	r3, r7, #28
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f00e fef6 	bl	80134dc <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004710:	2101      	movs	r1, #1
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f002 fa8e 	bl	8006c34 <VL53L0X_get_info_from_device>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004724:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800472c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004734:	2b01      	cmp	r3, #1
 8004736:	d80d      	bhi.n	8004754 <VL53L0X_StaticInit+0x80>
 8004738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800473c:	2b01      	cmp	r3, #1
 800473e:	d102      	bne.n	8004746 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004742:	2b20      	cmp	r3, #32
 8004744:	d806      	bhi.n	8004754 <VL53L0X_StaticInit+0x80>
 8004746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800474e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d90b      	bls.n	800476c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004754:	f107 0218 	add.w	r2, r7, #24
 8004758:	f107 0314 	add.w	r3, r7, #20
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 fd10 	bl	8006184 <VL53L0X_perform_ref_spad_management>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800476a:	e009      	b.n	8004780 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800476c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004770:	461a      	mov	r2, r3
 8004772:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 ff11 	bl	800659c <VL53L0X_set_reference_spads>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004780:	4b94      	ldr	r3, [pc, #592]	; (80049d4 <VL53L0X_StaticInit+0x300>)
 8004782:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004784:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10f      	bne.n	80047ac <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8004792:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80047a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a6:	e001      	b.n	80047ac <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80047a8:	4b8a      	ldr	r3, [pc, #552]	; (80049d4 <VL53L0X_StaticInit+0x300>)
 80047aa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80047ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80047b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f003 fde4 	bl	8008384 <VL53L0X_load_tuning_settings>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80047c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2304      	movs	r3, #4
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 f909 	bl	80059ec <VL53L0X_SetGpioConfig>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80047e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d121      	bne.n	800482c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80047e8:	2201      	movs	r2, #1
 80047ea:	21ff      	movs	r1, #255	; 0xff
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f004 fe07 	bl	8009400 <VL53L0X_WrByte>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80047f8:	f107 031a 	add.w	r3, r7, #26
 80047fc:	461a      	mov	r2, r3
 80047fe:	2184      	movs	r1, #132	; 0x84
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f004 fd89 	bl	8009318 <VL53L0X_RdWord>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800480e:	4313      	orrs	r3, r2
 8004810:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004814:	2200      	movs	r2, #0
 8004816:	21ff      	movs	r1, #255	; 0xff
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f004 fdf1 	bl	8009400 <VL53L0X_WrByte>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004826:	4313      	orrs	r3, r2
 8004828:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800482c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004834:	8b7b      	ldrh	r3, [r7, #26]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	461a      	mov	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004840:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004844:	2b00      	cmp	r3, #0
 8004846:	d108      	bne.n	800485a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004848:	f107 031c 	add.w	r3, r7, #28
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8c2 	bl	80049d8 <VL53L0X_GetDeviceParameters>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800485a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800485e:	2b00      	cmp	r3, #0
 8004860:	d110      	bne.n	8004884 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004862:	f107 0319 	add.w	r3, r7, #25
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f9a0 	bl	8004bae <VL53L0X_GetFractionEnable>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004874:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800487c:	7e7a      	ldrb	r2, [r7, #25]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004884:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10e      	bne.n	80048aa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f103 0410 	add.w	r4, r3, #16
 8004892:	f107 051c 	add.w	r5, r7, #28
 8004896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800489a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800489c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800489e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80048aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d111      	bne.n	80048d6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80048b2:	f107 0319 	add.w	r3, r7, #25
 80048b6:	461a      	mov	r2, r3
 80048b8:	2101      	movs	r1, #1
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f004 fca5 	bl	800920a <VL53L0X_RdByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80048c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80048ce:	7e7a      	ldrb	r2, [r7, #25]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80048d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80048de:	2200      	movs	r2, #0
 80048e0:	2100      	movs	r1, #0
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9d8 	bl	8004c98 <VL53L0X_SetSequenceStepEnable>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80048ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d107      	bne.n	8004906 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80048f6:	2200      	movs	r2, #0
 80048f8:	2102      	movs	r1, #2
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9cc 	bl	8004c98 <VL53L0X_SetSequenceStepEnable>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004906:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004916:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800491e:	f107 0313 	add.w	r3, r7, #19
 8004922:	461a      	mov	r2, r3
 8004924:	2100      	movs	r1, #0
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f99e 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004932:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800493a:	7cfa      	ldrb	r2, [r7, #19]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004942:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800494a:	f107 0313 	add.w	r3, r7, #19
 800494e:	461a      	mov	r2, r3
 8004950:	2101      	movs	r1, #1
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f988 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800495e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004966:	7cfa      	ldrb	r2, [r7, #19]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800496e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8004976:	f107 030c 	add.w	r3, r7, #12
 800497a:	461a      	mov	r2, r3
 800497c:	2103      	movs	r1, #3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fad6 	bl	8004f30 <VL53L0X_GetSequenceStepTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800498a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800499a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 80049a2:	f107 030c 	add.w	r3, r7, #12
 80049a6:	461a      	mov	r2, r3
 80049a8:	2104      	movs	r1, #4
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fac0 	bl	8004f30 <VL53L0X_GetSequenceStepTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80049c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3770      	adds	r7, #112	; 0x70
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000190 	.word	0x20000190

080049d8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8cc 	bl	8004b88 <VL53L0X_GetDeviceMode>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80049f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d107      	bne.n	8004a0c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fad4 	bl	8004fb0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	3310      	adds	r3, #16
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fb0a 	bl	8005042 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fd2a 	bl	800449a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d134      	bne.n	8004abc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	e02a      	b.n	8004aae <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d12a      	bne.n	8004ab6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	b299      	uxth	r1, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3308      	adds	r3, #8
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	461a      	mov	r2, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fc2a 	bl	80052cc <VL53L0X_GetLimitCheckValue>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d117      	bne.n	8004aba <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	b299      	uxth	r1, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3318      	adds	r3, #24
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	461a      	mov	r2, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb91 	bl	80051c0 <VL53L0X_GetLimitCheckEnable>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	ddd1      	ble.n	8004a58 <VL53L0X_GetDeviceParameters+0x80>
 8004ab4:	e002      	b.n	8004abc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004aba:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	333c      	adds	r3, #60	; 0x3c
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fc8c 	bl	80053e8 <VL53L0X_GetWrapAroundCheckEnable>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d107      	bne.n	8004aec <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f895 	bl	8004c12 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b15      	cmp	r3, #21
 8004b0c:	d832      	bhi.n	8004b74 <VL53L0X_SetDeviceMode+0x7c>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <VL53L0X_SetDeviceMode+0x1c>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004b75 	.word	0x08004b75
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004b75 	.word	0x08004b75
 8004b28:	08004b75 	.word	0x08004b75
 8004b2c:	08004b75 	.word	0x08004b75
 8004b30:	08004b75 	.word	0x08004b75
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b75 	.word	0x08004b75
 8004b3c:	08004b75 	.word	0x08004b75
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b75 	.word	0x08004b75
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b75 	.word	0x08004b75
 8004b64:	08004b6d 	.word	0x08004b6d
 8004b68:	08004b6d 	.word	0x08004b6d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	741a      	strb	r2, [r3, #16]
		break;
 8004b72:	e001      	b.n	8004b78 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004b74:	23f8      	movs	r3, #248	; 0xf8
 8004b76:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7c1a      	ldrb	r2, [r3, #16]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	2109      	movs	r1, #9
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f004 fb22 	bl	800920a <VL53L0X_RdByte>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f003 fa30 	bl	8008062 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f003 fafd 	bl	8008222 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
 8004c44:	4613      	mov	r3, r2
 8004c46:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8004c4c:	78ba      	ldrb	r2, [r7, #2]
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f002 ff45 	bl	8007ae2 <VL53L0X_set_vcsel_pulse_period>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	460b      	mov	r3, r1
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004c7a:	7afb      	ldrb	r3, [r7, #11]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f003 f9b7 	bl	8007ff4 <VL53L0X_get_vcsel_pulse_period>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004cb4:	f107 030f 	add.w	r3, r7, #15
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2101      	movs	r1, #1
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f004 faa4 	bl	800920a <VL53L0X_RdByte>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d15a      	bne.n	8004d88 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004cd2:	78bb      	ldrb	r3, [r7, #2]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d12b      	bne.n	8004d30 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d825      	bhi.n	8004d2a <VL53L0X_SetSequenceStepEnable+0x92>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cf9 	.word	0x08004cf9
 8004ce8:	08004d03 	.word	0x08004d03
 8004cec:	08004d0d 	.word	0x08004d0d
 8004cf0:	08004d17 	.word	0x08004d17
 8004cf4:	08004d21 	.word	0x08004d21
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004cf8:	7dbb      	ldrb	r3, [r7, #22]
 8004cfa:	f043 0310 	orr.w	r3, r3, #16
 8004cfe:	75bb      	strb	r3, [r7, #22]
				break;
 8004d00:	e043      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004d02:	7dbb      	ldrb	r3, [r7, #22]
 8004d04:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004d08:	75bb      	strb	r3, [r7, #22]
				break;
 8004d0a:	e03e      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004d0c:	7dbb      	ldrb	r3, [r7, #22]
 8004d0e:	f043 0304 	orr.w	r3, r3, #4
 8004d12:	75bb      	strb	r3, [r7, #22]
				break;
 8004d14:	e039      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004d16:	7dbb      	ldrb	r3, [r7, #22]
 8004d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1c:	75bb      	strb	r3, [r7, #22]
				break;
 8004d1e:	e034      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004d20:	7dbb      	ldrb	r3, [r7, #22]
 8004d22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d26:	75bb      	strb	r3, [r7, #22]
				break;
 8004d28:	e02f      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d2a:	23fc      	movs	r3, #252	; 0xfc
 8004d2c:	75fb      	strb	r3, [r7, #23]
 8004d2e:	e02c      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d825      	bhi.n	8004d82 <VL53L0X_SetSequenceStepEnable+0xea>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d51 	.word	0x08004d51
 8004d40:	08004d5b 	.word	0x08004d5b
 8004d44:	08004d65 	.word	0x08004d65
 8004d48:	08004d6f 	.word	0x08004d6f
 8004d4c:	08004d79 	.word	0x08004d79
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004d50:	7dbb      	ldrb	r3, [r7, #22]
 8004d52:	f023 0310 	bic.w	r3, r3, #16
 8004d56:	75bb      	strb	r3, [r7, #22]
				break;
 8004d58:	e017      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004d5a:	7dbb      	ldrb	r3, [r7, #22]
 8004d5c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004d60:	75bb      	strb	r3, [r7, #22]
				break;
 8004d62:	e012      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004d64:	7dbb      	ldrb	r3, [r7, #22]
 8004d66:	f023 0304 	bic.w	r3, r3, #4
 8004d6a:	75bb      	strb	r3, [r7, #22]
				break;
 8004d6c:	e00d      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004d6e:	7dbb      	ldrb	r3, [r7, #22]
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	75bb      	strb	r3, [r7, #22]
				break;
 8004d76:	e008      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004d78:	7dbb      	ldrb	r3, [r7, #22]
 8004d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7e:	75bb      	strb	r3, [r7, #22]
				break;
 8004d80:	e003      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d82:	23fc      	movs	r3, #252	; 0xfc
 8004d84:	75fb      	strb	r3, [r7, #23]
 8004d86:	e000      	b.n	8004d8a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004d88:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	7dba      	ldrb	r2, [r7, #22]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d01e      	beq.n	8004dd0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004d9a:	7dbb      	ldrb	r3, [r7, #22]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2101      	movs	r1, #1
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f004 fb2d 	bl	8009400 <VL53L0X_WrByte>
 8004da6:	4603      	mov	r3, r0
 8004da8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7dba      	ldrb	r2, [r7, #22]
 8004db6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004dc8:	6939      	ldr	r1, [r7, #16]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ff0e 	bl	8004bec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	72fb      	strb	r3, [r7, #11]
 8004dea:	4613      	mov	r3, r2
 8004dec:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d836      	bhi.n	8004e6c <sequence_step_enabled+0x90>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <sequence_step_enabled+0x28>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e19 	.word	0x08004e19
 8004e08:	08004e2b 	.word	0x08004e2b
 8004e0c:	08004e3d 	.word	0x08004e3d
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e61 	.word	0x08004e61
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004e18:	7abb      	ldrb	r3, [r7, #10]
 8004e1a:	111b      	asrs	r3, r3, #4
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	701a      	strb	r2, [r3, #0]
		break;
 8004e28:	e022      	b.n	8004e70 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004e2a:	7abb      	ldrb	r3, [r7, #10]
 8004e2c:	10db      	asrs	r3, r3, #3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	701a      	strb	r2, [r3, #0]
		break;
 8004e3a:	e019      	b.n	8004e70 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004e3c:	7abb      	ldrb	r3, [r7, #10]
 8004e3e:	109b      	asrs	r3, r3, #2
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	701a      	strb	r2, [r3, #0]
		break;
 8004e4c:	e010      	b.n	8004e70 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004e4e:	7abb      	ldrb	r3, [r7, #10]
 8004e50:	119b      	asrs	r3, r3, #6
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	701a      	strb	r2, [r3, #0]
		break;
 8004e5e:	e007      	b.n	8004e70 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004e60:	7abb      	ldrb	r3, [r7, #10]
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	701a      	strb	r2, [r3, #0]
		break;
 8004e6a:	e001      	b.n	8004e70 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e6c:	23fc      	movs	r3, #252	; 0xfc
 8004e6e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e92:	f107 030e 	add.w	r3, r7, #14
 8004e96:	461a      	mov	r2, r3
 8004e98:	2101      	movs	r1, #1
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f004 f9b5 	bl	800920a <VL53L0X_RdByte>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d107      	bne.n	8004ebc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004eac:	7bba      	ldrb	r2, [r7, #14]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff92 	bl	8004ddc <sequence_step_enabled>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d108      	bne.n	8004ed6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004ec4:	7bba      	ldrb	r2, [r7, #14]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	2101      	movs	r1, #1
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff85 	bl	8004ddc <sequence_step_enabled>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004ede:	7bba      	ldrb	r2, [r7, #14]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ff78 	bl	8004ddc <sequence_step_enabled>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d108      	bne.n	8004f0a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004ef8:	7bba      	ldrb	r2, [r7, #14]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	3303      	adds	r3, #3
 8004efe:	2103      	movs	r1, #3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff6b 	bl	8004ddc <sequence_step_enabled>
 8004f06:	4603      	mov	r3, r0
 8004f08:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d108      	bne.n	8004f24 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004f12:	7bba      	ldrb	r2, [r7, #14]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	3304      	adds	r3, #4
 8004f18:	2104      	movs	r1, #4
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff5e 	bl	8004ddc <sequence_step_enabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8004f4a:	f107 0210 	add.w	r2, r7, #16
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	4619      	mov	r1, r3
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f002 fbf0 	bl	8007738 <get_sequence_step_timeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8004f5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11c      	bne.n	8004f9e <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4a11      	ldr	r2, [pc, #68]	; (8004fac <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	099b      	lsrs	r3, r3, #6
 8004f6e:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4613      	mov	r3, r2
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f90:	4a06      	ldr	r2, [pc, #24]	; (8004fac <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	10624dd3 	.word	0x10624dd3

08004fb0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004fbe:	f107 030c 	add.w	r3, r7, #12
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	21f8      	movs	r1, #248	; 0xf8
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f004 f9a6 	bl	8009318 <VL53L0X_RdWord>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2104      	movs	r1, #4
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f004 f9d1 	bl	8009388 <VL53L0X_RdDWord>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10c      	bne.n	800500c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004ff2:	89bb      	ldrh	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	89ba      	ldrh	r2, [r7, #12]
 8004ffc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800500c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7f1b      	ldrb	r3, [r3, #28]
 800502a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	7bba      	ldrb	r2, [r7, #14]
 8005030:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800504c:	2300      	movs	r3, #0
 800504e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005050:	f107 030e 	add.w	r3, r7, #14
 8005054:	461a      	mov	r2, r3
 8005056:	2120      	movs	r1, #32
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f004 f95d 	bl	8009318 <VL53L0X_RdWord>
 800505e:	4603      	mov	r3, r0
 8005060:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d118      	bne.n	800509c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800506a:	89fb      	ldrh	r3, [r7, #14]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d109      	bne.n	8005084 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	771a      	strb	r2, [r3, #28]
 8005082:	e00b      	b.n	800509c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005084:	89fb      	ldrh	r3, [r7, #14]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800509c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
 80050b4:	4613      	mov	r3, r2
 80050b6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80050c8:	887b      	ldrh	r3, [r7, #2]
 80050ca:	2b05      	cmp	r3, #5
 80050cc:	d902      	bls.n	80050d4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050ce:	23fc      	movs	r3, #252	; 0xfc
 80050d0:	75fb      	strb	r3, [r7, #23]
 80050d2:	e05b      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73bb      	strb	r3, [r7, #14]
 80050e6:	e00a      	b.n	80050fe <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	330c      	adds	r3, #12
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80050fe:	887b      	ldrh	r3, [r7, #2]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d841      	bhi.n	8005188 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <VL53L0X_SetLimitCheckEnable+0x64>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005125 	.word	0x08005125
 8005110:	0800512f 	.word	0x0800512f
 8005114:	08005145 	.word	0x08005145
 8005118:	0800514f 	.word	0x0800514f
 800511c:	08005159 	.word	0x08005159
 8005120:	08005171 	.word	0x08005171

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800512c:	e02e      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005132:	b29b      	uxth	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	2144      	movs	r1, #68	; 0x44
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f004 f985 	bl	8009448 <VL53L0X_WrWord>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]

			break;
 8005142:	e023      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800514c:	e01e      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005156:	e019      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800515e:	7b7b      	ldrb	r3, [r7, #13]
 8005160:	22fe      	movs	r2, #254	; 0xfe
 8005162:	2160      	movs	r1, #96	; 0x60
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f004 f999 	bl	800949c <VL53L0X_UpdateByte>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800516e:	e00d      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005170:	7bbb      	ldrb	r3, [r7, #14]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005176:	7b7b      	ldrb	r3, [r7, #13]
 8005178:	22ef      	movs	r2, #239	; 0xef
 800517a:	2160      	movs	r1, #96	; 0x60
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f004 f98d 	bl	800949c <VL53L0X_UpdateByte>
 8005182:	4603      	mov	r3, r0
 8005184:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005186:	e001      	b.n	800518c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005188:	23fc      	movs	r3, #252	; 0xfc
 800518a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800518c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10f      	bne.n	80051b4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005194:	787b      	ldrb	r3, [r7, #1]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80051a6:	e005      	b.n	80051b4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	460b      	mov	r3, r1
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d905      	bls.n	80051e4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051d8:	23fc      	movs	r3, #252	; 0xfc
 80051da:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e008      	b.n	80051f6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051e4:	897b      	ldrh	r3, [r7, #10]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ee:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	7dba      	ldrb	r2, [r7, #22]
 80051f4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	460b      	mov	r3, r1
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005216:	2300      	movs	r3, #0
 8005218:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005224:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005226:	7dbb      	ldrb	r3, [r7, #22]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	330c      	adds	r3, #12
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	e040      	b.n	80052be <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	2b05      	cmp	r3, #5
 8005240:	d830      	bhi.n	80052a4 <VL53L0X_SetLimitCheckValue+0x9c>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <VL53L0X_SetLimitCheckValue+0x40>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	08005261 	.word	0x08005261
 800524c:	08005269 	.word	0x08005269
 8005250:	0800527f 	.word	0x0800527f
 8005254:	08005287 	.word	0x08005287
 8005258:	0800528f 	.word	0x0800528f
 800525c:	0800528f 	.word	0x0800528f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005266:	e01f      	b.n	80052a8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800526c:	b29b      	uxth	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	2144      	movs	r1, #68	; 0x44
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f004 f8e8 	bl	8009448 <VL53L0X_WrWord>
 8005278:	4603      	mov	r3, r0
 800527a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800527c:	e014      	b.n	80052a8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005284:	e010      	b.n	80052a8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800528c:	e00c      	b.n	80052a8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	2164      	movs	r1, #100	; 0x64
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f004 f8d5 	bl	8009448 <VL53L0X_WrWord>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80052a2:	e001      	b.n	80052a8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052a4:	23fc      	movs	r3, #252	; 0xfc
 80052a6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80052a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	330c      	adds	r3, #12
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80052be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop

080052cc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	460b      	mov	r3, r1
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052da:	2300      	movs	r3, #0
 80052dc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d847      	bhi.n	8005378 <VL53L0X_GetLimitCheckValue+0xac>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <VL53L0X_GetLimitCheckValue+0x24>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005309 	.word	0x08005309
 80052f4:	08005315 	.word	0x08005315
 80052f8:	0800533b 	.word	0x0800533b
 80052fc:	08005347 	.word	0x08005347
 8005300:	08005353 	.word	0x08005353
 8005304:	08005353 	.word	0x08005353

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	77bb      	strb	r3, [r7, #30]
		break;
 8005312:	e033      	b.n	800537c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005314:	f107 0316 	add.w	r3, r7, #22
 8005318:	461a      	mov	r2, r3
 800531a:	2144      	movs	r1, #68	; 0x44
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f003 fffb 	bl	8009318 <VL53L0X_RdWord>
 8005322:	4603      	mov	r3, r0
 8005324:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	025b      	lsls	r3, r3, #9
 8005332:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005334:	2301      	movs	r3, #1
 8005336:	77bb      	strb	r3, [r7, #30]
		break;
 8005338:	e020      	b.n	800537c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	77bb      	strb	r3, [r7, #30]
		break;
 8005344:	e01a      	b.n	800537c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	77bb      	strb	r3, [r7, #30]
		break;
 8005350:	e014      	b.n	800537c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005352:	f107 0316 	add.w	r3, r7, #22
 8005356:	461a      	mov	r2, r3
 8005358:	2164      	movs	r1, #100	; 0x64
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f003 ffdc 	bl	8009318 <VL53L0X_RdWord>
 8005360:	4603      	mov	r3, r0
 8005362:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005364:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800536c:	8afb      	ldrh	r3, [r7, #22]
 800536e:	025b      	lsls	r3, r3, #9
 8005370:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	77bb      	strb	r3, [r7, #30]
		break;
 8005376:	e001      	b.n	800537c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005378:	23fc      	movs	r3, #252	; 0xfc
 800537a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800537c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d12a      	bne.n	80053da <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005384:	7fbb      	ldrb	r3, [r7, #30]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d124      	bne.n	80053d4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d110      	bne.n	80053b2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005390:	897b      	ldrh	r3, [r7, #10]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	330c      	adds	r3, #12
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80053a4:	897b      	ldrh	r3, [r7, #10]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053b0:	e013      	b.n	80053da <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80053b8:	897b      	ldrh	r3, [r7, #10]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	330c      	adds	r3, #12
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80053c6:	897b      	ldrh	r3, [r7, #10]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053d2:	e002      	b.n	80053da <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053da:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop

080053e8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80053f6:	f107 030e 	add.w	r3, r7, #14
 80053fa:	461a      	mov	r2, r3
 80053fc:	2101      	movs	r1, #1
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f003 ff03 	bl	800920a <VL53L0X_RdByte>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10e      	bne.n	800542e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005410:	7bba      	ldrb	r2, [r7, #14]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	b25b      	sxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	da03      	bge.n	8005428 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e002      	b.n	800542e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800542e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005454:	2300      	movs	r3, #0
 8005456:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005458:	f107 030e 	add.w	r3, r7, #14
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fb92 	bl	8004b88 <VL53L0X_GetDeviceMode>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d107      	bne.n	8005480 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f898 	bl	80055ac <VL53L0X_StartMeasurement>
 800547c:	4603      	mov	r3, r0
 800547e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 fb09 	bl	8006aa0 <VL53L0X_measurement_poll_for_completion>
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2203      	movs	r2, #3
 80054a4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80054a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80054c4:	2301      	movs	r3, #1
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f001 faab 	bl	8006a26 <VL53L0X_perform_ref_calibration>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80054d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80054f6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80054f8:	7dbb      	ldrb	r3, [r7, #22]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d005      	beq.n	800550a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80054fe:	7dbb      	ldrb	r3, [r7, #22]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d002      	beq.n	800550a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005504:	7dbb      	ldrb	r3, [r7, #22]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d147      	bne.n	800559a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800550a:	f107 030c 	add.w	r3, r7, #12
 800550e:	f107 0210 	add.w	r2, r7, #16
 8005512:	2101      	movs	r1, #1
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb8d 	bl	8005c34 <VL53L0X_GetInterruptThresholds>
 800551a:	4603      	mov	r3, r0
 800551c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005524:	d803      	bhi.n	800552e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005526:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005528:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800552c:	d935      	bls.n	800559a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800552e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d131      	bne.n	800559a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800553c:	491a      	ldr	r1, [pc, #104]	; (80055a8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f002 ff20 	bl	8008384 <VL53L0X_load_tuning_settings>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
 8005548:	e027      	b.n	800559a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800554a:	2204      	movs	r2, #4
 800554c:	21ff      	movs	r1, #255	; 0xff
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f003 ff56 	bl	8009400 <VL53L0X_WrByte>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	4313      	orrs	r3, r2
 800555c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800555e:	2200      	movs	r2, #0
 8005560:	2170      	movs	r1, #112	; 0x70
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f003 ff4c 	bl	8009400 <VL53L0X_WrByte>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	4313      	orrs	r3, r2
 8005570:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005572:	2200      	movs	r2, #0
 8005574:	21ff      	movs	r1, #255	; 0xff
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f003 ff42 	bl	8009400 <VL53L0X_WrByte>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	4313      	orrs	r3, r2
 8005584:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005586:	2200      	movs	r2, #0
 8005588:	2180      	movs	r1, #128	; 0x80
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f003 ff38 	bl	8009400 <VL53L0X_WrByte>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	4313      	orrs	r3, r2
 8005598:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800559a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000284 	.word	0x20000284

080055ac <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80055bc:	f107 030e 	add.w	r3, r7, #14
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fae0 	bl	8004b88 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d035      	beq.n	800563a <VL53L0X_StartMeasurement+0x8e>
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d04d      	beq.n	800566e <VL53L0X_StartMeasurement+0xc2>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d165      	bne.n	80056a2 <VL53L0X_StartMeasurement+0xf6>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80055d6:	2201      	movs	r2, #1
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f003 ff10 	bl	8009400 <VL53L0X_WrByte>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80055e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d15b      	bne.n	80056a8 <VL53L0X_StartMeasurement+0xfc>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <VL53L0X_StartMeasurement+0x60>
					Status = VL53L0X_RdByte(Dev,
 80055fa:	f107 030d 	add.w	r3, r7, #13
 80055fe:	461a      	mov	r2, r3
 8005600:	2100      	movs	r1, #0
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f003 fe01 	bl	800920a <VL53L0X_RdByte>
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	3301      	adds	r3, #1
 8005610:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005612:	7b7a      	ldrb	r2, [r7, #13]
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	4013      	ands	r3, r2
 8005618:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	429a      	cmp	r2, r3
 800561e:	d106      	bne.n	800562e <VL53L0X_StartMeasurement+0x82>
				&& (Status == VL53L0X_ERROR_NONE)
 8005620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <VL53L0X_StartMeasurement+0x82>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2bc7      	cmp	r3, #199	; 0xc7
 800562c:	d9e2      	bls.n	80055f4 <VL53L0X_StartMeasurement+0x48>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2bc7      	cmp	r3, #199	; 0xc7
 8005632:	d939      	bls.n	80056a8 <VL53L0X_StartMeasurement+0xfc>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005634:	23f9      	movs	r3, #249	; 0xf9
 8005636:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005638:	e036      	b.n	80056a8 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800563a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005642:	2101      	movs	r1, #1
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff4b 	bl	80054e0 <VL53L0X_CheckAndLoadInterruptSettings>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800564e:	2202      	movs	r2, #2
 8005650:	2100      	movs	r1, #0
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f003 fed4 	bl	8009400 <VL53L0X_WrByte>
 8005658:	4603      	mov	r3, r0
 800565a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800565c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d123      	bne.n	80056ac <VL53L0X_StartMeasurement+0x100>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800566c:	e01e      	b.n	80056ac <VL53L0X_StartMeasurement+0x100>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800566e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d105      	bne.n	8005682 <VL53L0X_StartMeasurement+0xd6>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005676:	2101      	movs	r1, #1
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ff31 	bl	80054e0 <VL53L0X_CheckAndLoadInterruptSettings>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005682:	2204      	movs	r2, #4
 8005684:	2100      	movs	r1, #0
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f003 feba 	bl	8009400 <VL53L0X_WrByte>
 800568c:	4603      	mov	r3, r0
 800568e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005690:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <VL53L0X_StartMeasurement+0x104>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2204      	movs	r2, #4
 800569c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80056a0:	e006      	b.n	80056b0 <VL53L0X_StartMeasurement+0x104>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80056a2:	23f8      	movs	r3, #248	; 0xf8
 80056a4:	75fb      	strb	r3, [r7, #23]
 80056a6:	e004      	b.n	80056b2 <VL53L0X_StartMeasurement+0x106>
		break;
 80056a8:	bf00      	nop
 80056aa:	e002      	b.n	80056b2 <VL53L0X_StartMeasurement+0x106>
		break;
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <VL53L0X_StartMeasurement+0x106>
		break;
 80056b0:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80056b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80056d2:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d112      	bne.n	8005700 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80056da:	f107 0308 	add.w	r3, r7, #8
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb1d 	bl	8005d20 <VL53L0X_GetInterruptMaskStatus>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d103      	bne.n	80056f8 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	e01c      	b.n	8005732 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e018      	b.n	8005732 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005700:	f107 030d 	add.w	r3, r7, #13
 8005704:	461a      	mov	r2, r3
 8005706:	2114      	movs	r1, #20
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f003 fd7e 	bl	800920a <VL53L0X_RdByte>
 800570e:	4603      	mov	r3, r0
 8005710:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800571a:	7b7b      	ldrb	r3, [r7, #13]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e002      	b.n	8005732 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005740:	b5b0      	push	{r4, r5, r7, lr}
 8005742:	b096      	sub	sp, #88	; 0x58
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005750:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005754:	230c      	movs	r3, #12
 8005756:	2114      	movs	r1, #20
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f003 fdb1 	bl	80092c0 <VL53L0X_ReadMulti>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005764:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005768:	2b00      	cmp	r3, #0
 800576a:	f040 80d2 	bne.w	8005912 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2200      	movs	r2, #0
 8005772:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800577a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800577e:	b29b      	uxth	r3, r3
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	b29a      	uxth	r2, r3
 8005784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005788:	b29b      	uxth	r3, r3
 800578a:	4413      	add	r3, r2
 800578c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005796:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800579a:	b29b      	uxth	r3, r3
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	b29a      	uxth	r2, r3
 80057a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	025b      	lsls	r3, r3, #9
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80057b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	4413      	add	r3, r2
 80057c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80057ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057ce:	025b      	lsls	r3, r3, #9
 80057d0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80057d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80057f2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80057f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8005802:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800580a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800580e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005814:	d047      	beq.n	80058a6 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005816:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005818:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005824:	4a58      	ldr	r2, [pc, #352]	; (8005988 <VL53L0X_GetRangingMeasurementData+0x248>)
 8005826:	fb82 1203 	smull	r1, r2, r2, r3
 800582a:	1192      	asrs	r2, r2, #6
 800582c:	17db      	asrs	r3, r3, #31
 800582e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005830:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7f1b      	ldrb	r3, [r3, #28]
 800583e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005846:	2b00      	cmp	r3, #0
 8005848:	d02d      	beq.n	80058a6 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800584a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800584c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	121b      	asrs	r3, r3, #8
 8005856:	461a      	mov	r2, r3
				if ((SignalRate
 8005858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585a:	4293      	cmp	r3, r2
 800585c:	d10d      	bne.n	800587a <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800585e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8005866:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800586a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800586e:	e016      	b.n	800589e <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005870:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005874:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005878:	e011      	b.n	800589e <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800587a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800587e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005880:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005884:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005886:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800588a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800588e:	121b      	asrs	r3, r3, #8
 8005890:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005894:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800589a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800589e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80058a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80058ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80058b2:	089b      	lsrs	r3, r3, #2
 80058b4:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80058ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	75da      	strb	r2, [r3, #23]
 80058c8:	e006      	b.n	80058d8 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80058d0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2200      	movs	r2, #0
 80058d6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80058d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80058dc:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80058e0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	4613      	mov	r3, r2
 80058ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f003 f9b6 	bl	8008c60 <VL53L0X_get_pal_range_status>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005902:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800590a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005912:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005916:	2b00      	cmp	r3, #0
 8005918:	d12f      	bne.n	800597a <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f107 040c 	add.w	r4, r7, #12
 8005920:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005928:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800592c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005934:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005942:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005948:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800594e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005954:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800595a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005960:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800596a:	f107 050c 	add.w	r5, r7, #12
 800596e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800597a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800597e:	4618      	mov	r0, r3
 8005980:	3750      	adds	r7, #80	; 0x50
 8005982:	46bd      	mov	sp, r7
 8005984:	bdb0      	pop	{r4, r5, r7, pc}
 8005986:	bf00      	nop
 8005988:	10624dd3 	.word	0x10624dd3

0800598c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800599a:	2100      	movs	r1, #0
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff f8ab 	bl	8004af8 <VL53L0X_SetDeviceMode>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80059a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fd4c 	bl	800544c <VL53L0X_PerformSingleMeasurement>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80059b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff febc 	bl	8005740 <VL53L0X_GetRangingMeasurementData>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80059cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80059d4:	2100      	movs	r1, #0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f962 	bl	8005ca0 <VL53L0X_ClearInterruptMask>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80059e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	70fb      	strb	r3, [r7, #3]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70bb      	strb	r3, [r7, #2]
 8005a02:	4613      	mov	r3, r2
 8005a04:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005a10:	23f6      	movs	r3, #246	; 0xf6
 8005a12:	73fb      	strb	r3, [r7, #15]
 8005a14:	e107      	b.n	8005c26 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005a16:	78bb      	ldrb	r3, [r7, #2]
 8005a18:	2b14      	cmp	r3, #20
 8005a1a:	d110      	bne.n	8005a3e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005a1c:	7e3b      	ldrb	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005a22:	2310      	movs	r3, #16
 8005a24:	73bb      	strb	r3, [r7, #14]
 8005a26:	e001      	b.n	8005a2c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2184      	movs	r1, #132	; 0x84
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f003 fce4 	bl	8009400 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e0f3      	b.n	8005c26 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005a3e:	78bb      	ldrb	r3, [r7, #2]
 8005a40:	2b15      	cmp	r3, #21
 8005a42:	f040 8097 	bne.w	8005b74 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005a46:	2201      	movs	r2, #1
 8005a48:	21ff      	movs	r1, #255	; 0xff
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f003 fcd8 	bl	8009400 <VL53L0X_WrByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f003 fcce 	bl	8009400 <VL53L0X_WrByte>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005a6e:	2200      	movs	r2, #0
 8005a70:	21ff      	movs	r1, #255	; 0xff
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f003 fcc4 	bl	8009400 <VL53L0X_WrByte>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a82:	2201      	movs	r2, #1
 8005a84:	2180      	movs	r1, #128	; 0x80
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f003 fcba 	bl	8009400 <VL53L0X_WrByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005a96:	2202      	movs	r2, #2
 8005a98:	2185      	movs	r1, #133	; 0x85
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f003 fcb0 	bl	8009400 <VL53L0X_WrByte>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005aaa:	2204      	movs	r2, #4
 8005aac:	21ff      	movs	r1, #255	; 0xff
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f003 fca6 	bl	8009400 <VL53L0X_WrByte>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	21cd      	movs	r1, #205	; 0xcd
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f003 fc9c 	bl	8009400 <VL53L0X_WrByte>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005ad2:	2211      	movs	r2, #17
 8005ad4:	21cc      	movs	r1, #204	; 0xcc
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f003 fc92 	bl	8009400 <VL53L0X_WrByte>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	21ff      	movs	r1, #255	; 0xff
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f003 fc88 	bl	8009400 <VL53L0X_WrByte>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005afa:	2200      	movs	r2, #0
 8005afc:	21be      	movs	r1, #190	; 0xbe
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f003 fc7e 	bl	8009400 <VL53L0X_WrByte>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005b0e:	2206      	movs	r2, #6
 8005b10:	21ff      	movs	r1, #255	; 0xff
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f003 fc74 	bl	8009400 <VL53L0X_WrByte>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005b22:	2209      	movs	r2, #9
 8005b24:	21cc      	movs	r1, #204	; 0xcc
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f003 fc6a 	bl	8009400 <VL53L0X_WrByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005b36:	2200      	movs	r2, #0
 8005b38:	21ff      	movs	r1, #255	; 0xff
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f003 fc60 	bl	8009400 <VL53L0X_WrByte>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	21ff      	movs	r1, #255	; 0xff
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f003 fc56 	bl	8009400 <VL53L0X_WrByte>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f003 fc4c 	bl	8009400 <VL53L0X_WrByte>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	73fb      	strb	r3, [r7, #15]
 8005b72:	e058      	b.n	8005c26 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d121      	bne.n	8005bc0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005b7c:	787b      	ldrb	r3, [r7, #1]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d81b      	bhi.n	8005bba <VL53L0X_SetGpioConfig+0x1ce>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <VL53L0X_SetGpioConfig+0x19c>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005b9d 	.word	0x08005b9d
 8005b8c:	08005ba3 	.word	0x08005ba3
 8005b90:	08005ba9 	.word	0x08005ba9
 8005b94:	08005baf 	.word	0x08005baf
 8005b98:	08005bb5 	.word	0x08005bb5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73bb      	strb	r3, [r7, #14]
				break;
 8005ba0:	e00f      	b.n	8005bc2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73bb      	strb	r3, [r7, #14]
				break;
 8005ba6:	e00c      	b.n	8005bc2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	73bb      	strb	r3, [r7, #14]
				break;
 8005bac:	e009      	b.n	8005bc2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	73bb      	strb	r3, [r7, #14]
				break;
 8005bb2:	e006      	b.n	8005bc2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	73bb      	strb	r3, [r7, #14]
				break;
 8005bb8:	e003      	b.n	8005bc2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005bba:	23f5      	movs	r3, #245	; 0xf5
 8005bbc:	73fb      	strb	r3, [r7, #15]
 8005bbe:	e000      	b.n	8005bc2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005bc0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8005bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	210a      	movs	r1, #10
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f003 fc15 	bl	8009400 <VL53L0X_WrByte>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005be2:	7e3b      	ldrb	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73bb      	strb	r3, [r7, #14]
 8005bec:	e001      	b.n	8005bf2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8005bee:	2310      	movs	r3, #16
 8005bf0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	22ef      	movs	r2, #239	; 0xef
 8005bf6:	2184      	movs	r1, #132	; 0x84
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f003 fc4f 	bl	800949c <VL53L0X_UpdateByte>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	787a      	ldrb	r2, [r7, #1]
 8005c0e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f83f 	bl	8005ca0 <VL53L0X_ClearInterruptMask>
 8005c22:	4603      	mov	r3, r0
 8005c24:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop

08005c34 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	460b      	mov	r3, r1
 8005c42:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	210e      	movs	r1, #14
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f003 fb61 	bl	8009318 <VL53L0X_RdWord>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005c5a:	8abb      	ldrh	r3, [r7, #20]
 8005c5c:	045b      	lsls	r3, r3, #17
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <VL53L0X_GetInterruptThresholds+0x68>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	461a      	mov	r2, r3
 8005c76:	210c      	movs	r1, #12
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f003 fb4d 	bl	8009318 <VL53L0X_RdWord>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005c82:	8abb      	ldrh	r3, [r7, #20]
 8005c84:	045b      	lsls	r3, r3, #17
 8005c86:	461a      	mov	r2, r3
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <VL53L0X_GetInterruptThresholds+0x68>)
 8005c8a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	1ffe0000 	.word	0x1ffe0000

08005ca0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	210b      	movs	r1, #11
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f003 fba2 	bl	8009400 <VL53L0X_WrByte>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	210b      	movs	r1, #11
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f003 fb9b 	bl	8009400 <VL53L0X_WrByte>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005cd4:	f107 030d 	add.w	r3, r7, #13
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2113      	movs	r1, #19
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f003 fa94 	bl	800920a <VL53L0X_RdByte>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005cf2:	7b7b      	ldrb	r3, [r7, #13]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d803      	bhi.n	8005d0a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0d3      	beq.n	8005cb2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005d10:	23f4      	movs	r3, #244	; 0xf4
 8005d12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005d2e:	f107 030e 	add.w	r3, r7, #14
 8005d32:	461a      	mov	r2, r3
 8005d34:	2113      	movs	r1, #19
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f003 fa67 	bl	800920a <VL53L0X_RdByte>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	f003 0207 	and.w	r2, r3, #7
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	f003 0318 	and.w	r3, r3, #24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005d54:	23fa      	movs	r3, #250	; 0xfa
 8005d56:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa03 	bl	8006184 <VL53L0X_perform_ref_spad_management>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005d9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005da0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005da6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005da8:	f107 0308 	add.w	r3, r7, #8
 8005dac:	461a      	mov	r2, r3
 8005dae:	2128      	movs	r1, #40	; 0x28
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f003 fab1 	bl	8009318 <VL53L0X_RdWord>
 8005db6:	4603      	mov	r3, r0
 8005db8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11e      	bne.n	8005e00 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005dc2:	893b      	ldrh	r3, [r7, #8]
 8005dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005dcc:	893b      	ldrh	r3, [r7, #8]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	dd0b      	ble.n	8005df0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005dd8:	893a      	ldrh	r2, [r7, #8]
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	461a      	mov	r2, r3
					* 250;
 8005de4:	23fa      	movs	r3, #250	; 0xfa
 8005de6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e007      	b.n	8005e00 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005df0:	893b      	ldrh	r3, [r7, #8]
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	23fa      	movs	r3, #250	; 0xfa
 8005df8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b08b      	sub	sp, #44	; 0x2c
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	fb01 f202 	mul.w	r2, r1, r2
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4a:	e030      	b.n	8005eae <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	4413      	add	r3, r2
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d11e      	bne.n	8005ea0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005e62:	7ffa      	ldrb	r2, [r7, #31]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	fa42 f303 	asr.w	r3, r2, r3
 8005e6a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005e70:	e016      	b.n	8005ea0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <get_next_good_spad+0x88>
				success = 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	fb02 f203 	mul.w	r2, r2, r3
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	601a      	str	r2, [r3, #0]
				break;
 8005e92:	e009      	b.n	8005ea8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3e4      	bcc.n	8005e72 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3301      	adds	r3, #1
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d202      	bcs.n	8005ebc <get_next_good_spad+0xb0>
 8005eb6:	7fbb      	ldrb	r3, [r7, #30]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0c7      	beq.n	8005e4c <get_next_good_spad+0x40>
		}
	}
}
 8005ebc:	bf00      	nop
 8005ebe:	372c      	adds	r7, #44	; 0x2c
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	099b      	lsrs	r3, r3, #6
 8005ed8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005eda:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <is_aperture+0x30>)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <is_aperture+0x22>
		isAperture = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	2000043c 	.word	0x2000043c

08005efc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	fb01 f202 	mul.w	r2, r1, r2
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005f34:	23ce      	movs	r3, #206	; 0xce
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e010      	b.n	8005f5c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b25a      	sxtb	r2, r3
 8005f44:	2101      	movs	r1, #1
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b259      	sxtb	r1, r3
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	b2ca      	uxtb	r2, r1
 8005f5a:	701a      	strb	r2, [r3, #0]

	return status;
 8005f5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3724      	adds	r7, #36	; 0x24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005f76:	2306      	movs	r3, #6
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	21b0      	movs	r1, #176	; 0xb0
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f003 f96f 	bl	8009260 <VL53L0X_WriteMulti>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005f9c:	2306      	movs	r3, #6
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	21b0      	movs	r1, #176	; 0xb0
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f003 f98c 	bl	80092c0 <VL53L0X_ReadMulti>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08c      	sub	sp, #48	; 0x30
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	e02b      	b.n	8006034 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005fdc:	f107 031c 	add.w	r3, r7, #28
 8005fe0:	6a3a      	ldr	r2, [r7, #32]
 8005fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff11 	bl	8005e0c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d103      	bne.n	8005ffa <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005ff2:	23ce      	movs	r3, #206	; 0xce
 8005ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005ff8:	e020      	b.n	800603c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	4413      	add	r3, r2
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff ff60 	bl	8005ec8 <is_aperture>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006012:	23ce      	movs	r3, #206	; 0xce
 8006014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006018:	e010      	b.n	800603c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006022:	6838      	ldr	r0, [r7, #0]
 8006024:	f7ff ff6a 	bl	8005efc <enable_spad_bit>
		currentSpad++;
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	3301      	adds	r3, #1
 800602c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	3301      	adds	r3, #1
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
 8006034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006038:	429a      	cmp	r2, r3
 800603a:	d3cf      	bcc.n	8005fdc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800603c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006042:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff ff8d 	bl	8005f6c <set_ref_spad_map>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800605c:	2b00      	cmp	r3, #0
 800605e:	d121      	bne.n	80060a4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006060:	f107 0314 	add.w	r3, r7, #20
 8006064:	4619      	mov	r1, r3
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff ff93 	bl	8005f92 <get_ref_spad_map>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006076:	e011      	b.n	800609c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	4413      	add	r3, r2
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	f107 0114 	add.w	r1, r7, #20
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	440b      	add	r3, r1
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d003      	beq.n	8006096 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800608e:	23ce      	movs	r3, #206	; 0xce
 8006090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006094:	e006      	b.n	80060a4 <enable_ref_spads+0xec>
			}
			i++;
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	3301      	adds	r3, #1
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800609c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d3e9      	bcc.n	8006078 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80060a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80060cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80060d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80060d8:	22c0      	movs	r2, #192	; 0xc0
 80060da:	2101      	movs	r1, #1
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f003 f98f 	bl	8009400 <VL53L0X_WrByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80060e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d108      	bne.n	8006102 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80060f0:	f107 0308 	add.w	r3, r7, #8
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fc48 	bl	800598c <VL53L0X_PerformSingleRangingMeasurement>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006102:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800610a:	2201      	movs	r2, #1
 800610c:	21ff      	movs	r1, #255	; 0xff
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f003 f976 	bl	8009400 <VL53L0X_WrByte>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800611a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800611e:	2b00      	cmp	r3, #0
 8006120:	d107      	bne.n	8006132 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	21b6      	movs	r1, #182	; 0xb6
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f003 f8f6 	bl	8009318 <VL53L0X_RdWord>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006132:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800613a:	2200      	movs	r2, #0
 800613c:	21ff      	movs	r1, #255	; 0xff
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f003 f95e 	bl	8009400 <VL53L0X_WrByte>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800614a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800614e:	2b00      	cmp	r3, #0
 8006150:	d112      	bne.n	8006178 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006156:	461a      	mov	r2, r3
 8006158:	2101      	movs	r1, #1
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f003 f950 	bl	8009400 <VL53L0X_WrByte>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006166:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006174:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800617c:	4618      	mov	r0, r3
 800617e:	3728      	adds	r7, #40	; 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b09d      	sub	sp, #116	; 0x74
 8006188:	af06      	add	r7, sp, #24
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006196:	23b4      	movs	r3, #180	; 0xb4
 8006198:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800619c:	2303      	movs	r3, #3
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80061a0:	232c      	movs	r3, #44	; 0x2c
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80061b0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80061b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80061be:	2306      	movs	r3, #6
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80061e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ee:	e009      	b.n	8006204 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80061fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006200:	3301      	adds	r3, #1
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48
 8006204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	429a      	cmp	r2, r3
 800620a:	d3f1      	bcc.n	80061f0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800620c:	2201      	movs	r2, #1
 800620e:	21ff      	movs	r1, #255	; 0xff
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f003 f8f5 	bl	8009400 <VL53L0X_WrByte>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800621c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006224:	2200      	movs	r2, #0
 8006226:	214f      	movs	r1, #79	; 0x4f
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f003 f8e9 	bl	8009400 <VL53L0X_WrByte>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006234:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800623c:	222c      	movs	r2, #44	; 0x2c
 800623e:	214e      	movs	r1, #78	; 0x4e
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f003 f8dd 	bl	8009400 <VL53L0X_WrByte>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800624c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006250:	2b00      	cmp	r3, #0
 8006252:	d107      	bne.n	8006264 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006254:	2200      	movs	r2, #0
 8006256:	21ff      	movs	r1, #255	; 0xff
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f003 f8d1 	bl	8009400 <VL53L0X_WrByte>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006264:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800626c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006270:	461a      	mov	r2, r3
 8006272:	21b6      	movs	r1, #182	; 0xb6
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f003 f8c3 	bl	8009400 <VL53L0X_WrByte>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006280:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006284:	2b00      	cmp	r3, #0
 8006286:	d107      	bne.n	8006298 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006288:	2200      	movs	r2, #0
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f003 f8b7 	bl	8009400 <VL53L0X_WrByte>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006298:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80062a0:	f107 0210 	add.w	r2, r7, #16
 80062a4:	f107 0111 	add.w	r1, r7, #17
 80062a8:	2300      	movs	r3, #0
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 fbbb 	bl	8006a26 <VL53L0X_perform_ref_calibration>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80062b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d121      	bne.n	8006302 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80062da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80062de:	f107 0218 	add.w	r2, r7, #24
 80062e2:	9204      	str	r2, [sp, #16]
 80062e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e6:	9203      	str	r2, [sp, #12]
 80062e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062ea:	9202      	str	r2, [sp, #8]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	4623      	mov	r3, r4
 80062f4:	4602      	mov	r2, r0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fe5e 	bl	8005fb8 <enable_ref_spads>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006302:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006306:	2b00      	cmp	r3, #0
 8006308:	d174      	bne.n	80063f4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800630e:	f107 0312 	add.w	r3, r7, #18
 8006312:	4619      	mov	r1, r3
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fecb 	bl	80060b0 <perform_ref_signal_measurement>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006320:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006324:	2b00      	cmp	r3, #0
 8006326:	d161      	bne.n	80063ec <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006328:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800632a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800632c:	429a      	cmp	r2, r3
 800632e:	d25d      	bcs.n	80063ec <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006330:	2300      	movs	r3, #0
 8006332:	64bb      	str	r3, [r7, #72]	; 0x48
 8006334:	e009      	b.n	800634a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633a:	4413      	add	r3, r2
 800633c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006346:	3301      	adds	r3, #1
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
 800634a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	429a      	cmp	r2, r3
 8006350:	d3f1      	bcc.n	8006336 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006352:	e002      	b.n	800635a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006356:	3301      	adds	r3, #1
 8006358:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800635a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800635e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006360:	4413      	add	r3, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fdb0 	bl	8005ec8 <is_aperture>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800636e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	429a      	cmp	r2, r3
 8006374:	d3ee      	bcc.n	8006354 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006376:	2301      	movs	r3, #1
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800638a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800638e:	f107 0218 	add.w	r2, r7, #24
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006396:	9203      	str	r2, [sp, #12]
 8006398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800639a:	9202      	str	r2, [sp, #8]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	4623      	mov	r3, r4
 80063a4:	4602      	mov	r2, r0
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff fe06 	bl	8005fb8 <enable_ref_spads>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80063b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11b      	bne.n	80063f2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80063be:	f107 0312 	add.w	r3, r7, #18
 80063c2:	4619      	mov	r1, r3
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fe73 	bl	80060b0 <perform_ref_signal_measurement>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80063d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10c      	bne.n	80063f2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80063d8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80063da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063dc:	429a      	cmp	r2, r3
 80063de:	d208      	bcs.n	80063f2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80063ea:	e002      	b.n	80063f2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f0:	e000      	b.n	80063f4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80063f2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80063f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 80af 	bne.w	800655c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80063fe:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006400:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006402:	429a      	cmp	r2, r3
 8006404:	f240 80aa 	bls.w	800655c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006418:	f107 031c 	add.w	r3, r7, #28
 800641c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641e:	4618      	mov	r0, r3
 8006420:	f00d f851 	bl	80134c6 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006424:	8a7b      	ldrh	r3, [r7, #18]
 8006426:	461a      	mov	r2, r3
 8006428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfb8      	it	lt
 8006430:	425b      	neglt	r3, r3
 8006432:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800643a:	e086      	b.n	800654a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006442:	f107 0314 	add.w	r3, r7, #20
 8006446:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800644a:	f7ff fcdf 	bl	8005e0c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d103      	bne.n	800645e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006456:	23ce      	movs	r3, #206	; 0xce
 8006458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800645c:	e07e      	b.n	800655c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	3301      	adds	r3, #1
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006464:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4413      	add	r3, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fd2b 	bl	8005ec8 <is_aperture>
 8006472:	4603      	mov	r3, r0
 8006474:	461a      	mov	r2, r3
 8006476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800647c:	23ce      	movs	r3, #206	; 0xce
 800647e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006482:	e06b      	b.n	800655c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800648e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fd32 	bl	8005efc <enable_spad_bit>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800649e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10c      	bne.n	80064c0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	3301      	adds	r3, #1
 80064aa:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff fd59 	bl	8005f6c <set_ref_spad_map>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80064c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d146      	bne.n	8006556 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80064c8:	f107 0312 	add.w	r3, r7, #18
 80064cc:	4619      	mov	r1, r3
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fdee 	bl	80060b0 <perform_ref_signal_measurement>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80064da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d13b      	bne.n	800655a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80064e2:	8a7b      	ldrh	r3, [r7, #18]
 80064e4:	461a      	mov	r2, r3
 80064e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bfb8      	it	lt
 80064ee:	425b      	neglt	r3, r3
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80064f2:	8a7b      	ldrh	r3, [r7, #18]
 80064f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d21c      	bcs.n	8006534 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80064fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fe:	429a      	cmp	r2, r3
 8006500:	d914      	bls.n	800652c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006502:	f107 031c 	add.w	r3, r7, #28
 8006506:	4619      	mov	r1, r3
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff fd2f 	bl	8005f6c <set_ref_spad_map>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800651a:	f107 011c 	add.w	r1, r7, #28
 800651e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006520:	4618      	mov	r0, r3
 8006522:	f00c ffd0 	bl	80134c6 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006528:	3b01      	subs	r3, #1
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e00a      	b.n	800654a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800653e:	f107 031c 	add.w	r3, r7, #28
 8006542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006544:	4618      	mov	r0, r3
 8006546:	f00c ffbe 	bl	80134c6 <memcpy>
		while (!complete) {
 800654a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800654e:	2b00      	cmp	r3, #0
 8006550:	f43f af74 	beq.w	800643c <VL53L0X_perform_ref_spad_management+0x2b8>
 8006554:	e002      	b.n	800655c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006556:	bf00      	nop
 8006558:	e000      	b.n	800655c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800655a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800655c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006560:	2b00      	cmp	r3, #0
 8006562:	d115      	bne.n	8006590 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006568:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006570:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006590:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006594:	4618      	mov	r0, r3
 8006596:	375c      	adds	r7, #92	; 0x5c
 8006598:	46bd      	mov	sp, r7
 800659a:	bd90      	pop	{r4, r7, pc}

0800659c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800659c:	b590      	push	{r4, r7, lr}
 800659e:	b093      	sub	sp, #76	; 0x4c
 80065a0:	af06      	add	r7, sp, #24
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80065b4:	23b4      	movs	r3, #180	; 0xb4
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80065ba:	2306      	movs	r3, #6
 80065bc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80065be:	232c      	movs	r3, #44	; 0x2c
 80065c0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065c2:	2201      	movs	r2, #1
 80065c4:	21ff      	movs	r1, #255	; 0xff
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f002 ff1a 	bl	8009400 <VL53L0X_WrByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80065d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d107      	bne.n	80065ea <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80065da:	2200      	movs	r2, #0
 80065dc:	214f      	movs	r1, #79	; 0x4f
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f002 ff0e 	bl	8009400 <VL53L0X_WrByte>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80065ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d107      	bne.n	8006602 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80065f2:	222c      	movs	r2, #44	; 0x2c
 80065f4:	214e      	movs	r1, #78	; 0x4e
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f002 ff02 	bl	8009400 <VL53L0X_WrByte>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006602:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006606:	2b00      	cmp	r3, #0
 8006608:	d107      	bne.n	800661a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800660a:	2200      	movs	r2, #0
 800660c:	21ff      	movs	r1, #255	; 0xff
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f002 fef6 	bl	8009400 <VL53L0X_WrByte>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800661a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006626:	461a      	mov	r2, r3
 8006628:	21b6      	movs	r1, #182	; 0xb6
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f002 fee8 	bl	8009400 <VL53L0X_WrByte>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006636:	2300      	movs	r3, #0
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	e009      	b.n	8006650 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	4413      	add	r3, r2
 8006642:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	3301      	adds	r3, #1
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	429a      	cmp	r2, r3
 8006656:	d3f1      	bcc.n	800663c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d011      	beq.n	8006682 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800665e:	e002      	b.n	8006666 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	3301      	adds	r3, #1
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006666:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	4413      	add	r3, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fc2a 	bl	8005ec8 <is_aperture>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <VL53L0X_set_reference_spads+0xe6>
 800667a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	429a      	cmp	r2, r3
 8006680:	d3ee      	bcc.n	8006660 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800668e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006692:	79f9      	ldrb	r1, [r7, #7]
 8006694:	f107 0214 	add.w	r2, r7, #20
 8006698:	9204      	str	r2, [sp, #16]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	9203      	str	r2, [sp, #12]
 800669e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a0:	9202      	str	r2, [sp, #8]
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	4623      	mov	r3, r4
 80066aa:	4602      	mov	r2, r0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff fc83 	bl	8005fb8 <enable_ref_spads>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80066b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10c      	bne.n	80066da <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	79fa      	ldrb	r2, [r7, #7]
 80066d6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80066da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3734      	adds	r7, #52	; 0x34
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd90      	pop	{r4, r7, pc}

080066e6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80066f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f002 fe78 	bl	8009400 <VL53L0X_WrByte>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f9bf 	bl	8006aa0 <VL53L0X_measurement_poll_for_completion>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800672e:	2100      	movs	r1, #0
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fab5 	bl	8005ca0 <VL53L0X_ClearInterruptMask>
 8006736:	4603      	mov	r3, r0
 8006738:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800673a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f002 fe5a 	bl	8009400 <VL53L0X_WrByte>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	4608      	mov	r0, r1
 8006766:	4611      	mov	r1, r2
 8006768:	461a      	mov	r2, r3
 800676a:	4603      	mov	r3, r0
 800676c:	70fb      	strb	r3, [r7, #3]
 800676e:	460b      	mov	r3, r1
 8006770:	70bb      	strb	r3, [r7, #2]
 8006772:	4613      	mov	r3, r2
 8006774:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800677e:	2201      	movs	r2, #1
 8006780:	21ff      	movs	r1, #255	; 0xff
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f002 fe3c 	bl	8009400 <VL53L0X_WrByte>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	4313      	orrs	r3, r2
 8006790:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f002 fe32 	bl	8009400 <VL53L0X_WrByte>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067a6:	2200      	movs	r2, #0
 80067a8:	21ff      	movs	r1, #255	; 0xff
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f002 fe28 	bl	8009400 <VL53L0X_WrByte>
 80067b0:	4603      	mov	r3, r0
 80067b2:	461a      	mov	r2, r3
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01e      	beq.n	80067fe <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80067c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	21cb      	movs	r1, #203	; 0xcb
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fd1c 	bl	800920a <VL53L0X_RdByte>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	4313      	orrs	r3, r2
 80067da:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80067dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02a      	beq.n	800683a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80067e4:	f107 030e 	add.w	r3, r7, #14
 80067e8:	461a      	mov	r2, r3
 80067ea:	21ee      	movs	r1, #238	; 0xee
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f002 fd0c 	bl	800920a <VL53L0X_RdByte>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e01d      	b.n	800683a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80067fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006806:	78bb      	ldrb	r3, [r7, #2]
 8006808:	461a      	mov	r2, r3
 800680a:	21cb      	movs	r1, #203	; 0xcb
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f002 fdf7 	bl	8009400 <VL53L0X_WrByte>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	4313      	orrs	r3, r2
 800681a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800681c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006824:	787b      	ldrb	r3, [r7, #1]
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	21ee      	movs	r1, #238	; 0xee
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f002 fe36 	bl	800949c <VL53L0X_UpdateByte>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	4313      	orrs	r3, r2
 8006838:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800683a:	2201      	movs	r2, #1
 800683c:	21ff      	movs	r1, #255	; 0xff
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f002 fdde 	bl	8009400 <VL53L0X_WrByte>
 8006844:	4603      	mov	r3, r0
 8006846:	461a      	mov	r2, r3
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	4313      	orrs	r3, r2
 800684c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800684e:	2201      	movs	r2, #1
 8006850:	2100      	movs	r1, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f002 fdd4 	bl	8009400 <VL53L0X_WrByte>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	4313      	orrs	r3, r2
 8006860:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006862:	2200      	movs	r2, #0
 8006864:	21ff      	movs	r1, #255	; 0xff
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f002 fdca 	bl	8009400 <VL53L0X_WrByte>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	4313      	orrs	r3, r2
 8006874:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	f023 0310 	bic.w	r3, r3, #16
 800687c:	b2da      	uxtb	r2, r3
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	701a      	strb	r2, [r3, #0]

	return Status;
 8006882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b08a      	sub	sp, #40	; 0x28
 8006892:	af04      	add	r7, sp, #16
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	4611      	mov	r1, r2
 800689a:	461a      	mov	r2, r3
 800689c:	460b      	mov	r3, r1
 800689e:	71fb      	strb	r3, [r7, #7]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80068b8:	79bb      	ldrb	r3, [r7, #6]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80068c4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80068c6:	2201      	movs	r2, #1
 80068c8:	2101      	movs	r1, #1
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f002 fd98 	bl	8009400 <VL53L0X_WrByte>
 80068d0:	4603      	mov	r3, r0
 80068d2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80068d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff ff01 	bl	80066e6 <VL53L0X_perform_single_ref_calibration>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80068e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d115      	bne.n	800691c <VL53L0X_perform_vhv_calibration+0x8e>
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d112      	bne.n	800691c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80068f6:	7d39      	ldrb	r1, [r7, #20]
 80068f8:	7d7a      	ldrb	r2, [r7, #21]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	2301      	movs	r3, #1
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	f107 0313 	add.w	r3, r7, #19
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	460b      	mov	r3, r1
 800690e:	2101      	movs	r1, #1
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff ff23 	bl	800675c <VL53L0X_ref_calibration_io>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]
 800691a:	e002      	b.n	8006922 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d112      	bne.n	8006950 <VL53L0X_perform_vhv_calibration+0xc2>
 800692a:	79bb      	ldrb	r3, [r7, #6]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006930:	7dbb      	ldrb	r3, [r7, #22]
 8006932:	461a      	mov	r2, r3
 8006934:	2101      	movs	r1, #1
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f002 fd62 	bl	8009400 <VL53L0X_WrByte>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	7dba      	ldrb	r2, [r7, #22]
 800694c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af04      	add	r7, sp, #16
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	460b      	mov	r3, r1
 800696c:	71fb      	strb	r3, [r7, #7]
 800696e:	4613      	mov	r3, r2
 8006970:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006982:	79bb      	ldrb	r3, [r7, #6]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800698e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006990:	2202      	movs	r2, #2
 8006992:	2101      	movs	r1, #1
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f002 fd33 	bl	8009400 <VL53L0X_WrByte>
 800699a:	4603      	mov	r3, r0
 800699c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800699e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d105      	bne.n	80069b2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80069a6:	2100      	movs	r1, #0
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff fe9c 	bl	80066e6 <VL53L0X_perform_single_ref_calibration>
 80069ae:	4603      	mov	r3, r0
 80069b0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80069b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d115      	bne.n	80069e6 <VL53L0X_perform_phase_calibration+0x8a>
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d112      	bne.n	80069e6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80069c0:	7d39      	ldrb	r1, [r7, #20]
 80069c2:	7d7a      	ldrb	r2, [r7, #21]
 80069c4:	2301      	movs	r3, #1
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	2300      	movs	r3, #0
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f107 0313 	add.w	r3, r7, #19
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	460b      	mov	r3, r1
 80069d8:	2101      	movs	r1, #1
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff febe 	bl	800675c <VL53L0X_ref_calibration_io>
 80069e0:	4603      	mov	r3, r0
 80069e2:	75fb      	strb	r3, [r7, #23]
 80069e4:	e002      	b.n	80069ec <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80069ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d112      	bne.n	8006a1a <VL53L0X_perform_phase_calibration+0xbe>
 80069f4:	79bb      	ldrb	r3, [r7, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00f      	beq.n	8006a1a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80069fa:	7dbb      	ldrb	r3, [r7, #22]
 80069fc:	461a      	mov	r2, r3
 80069fe:	2101      	movs	r1, #1
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f002 fcfd 	bl	8009400 <VL53L0X_WrByte>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	7dba      	ldrb	r2, [r7, #22]
 8006a16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006a42:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	2300      	movs	r3, #0
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff ff1f 	bl	800688e <VL53L0X_perform_vhv_calibration>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d107      	bne.n	8006a6c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff ff7a 	bl	800695c <VL53L0X_perform_phase_calibration>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10f      	bne.n	8006a94 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a74:	7dbb      	ldrb	r3, [r7, #22]
 8006a76:	461a      	mov	r2, r3
 8006a78:	2101      	movs	r1, #1
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f002 fcc0 	bl	8009400 <VL53L0X_WrByte>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	7dba      	ldrb	r2, [r7, #22]
 8006a90:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006ab4:	f107 030f 	add.w	r3, r7, #15
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fe fdff 	bl	80056be <VL53L0X_GetMeasurementDataReady>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10f      	bne.n	8006aec <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d00e      	beq.n	8006af0 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2bc7      	cmp	r3, #199	; 0xc7
 8006adc:	d902      	bls.n	8006ae4 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006ade:	23f9      	movs	r3, #249	; 0xf9
 8006ae0:	75fb      	strb	r3, [r7, #23]
			break;
 8006ae2:	e006      	b.n	8006af2 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 fd0d 	bl	8009504 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006aea:	e7e3      	b.n	8006ab4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006aec:	bf00      	nop
 8006aee:	e000      	b.n	8006af2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8006af0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4603      	mov	r3, r0
 8006b06:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b5a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006b5c:	e002      	b.n	8006b64 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	089b      	lsrs	r3, r3, #2
 8006b62:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d8f8      	bhi.n	8006b5e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006b6c:	e017      	b.n	8006b9e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4413      	add	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d30b      	bcc.n	8006b92 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4413      	add	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e002      	b.n	8006b98 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	089b      	lsrs	r3, r3, #2
 8006b9c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e4      	bne.n	8006b6e <VL53L0X_isqrt+0x24>
	}

	return res;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2183      	movs	r1, #131	; 0x83
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 fc1c 	bl	8009400 <VL53L0X_WrByte>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11c      	bne.n	8006c14 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006bde:	f107 030f 	add.w	r3, r7, #15
 8006be2:	461a      	mov	r2, r3
 8006be4:	2183      	movs	r1, #131	; 0x83
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f002 fb0f 	bl	800920a <VL53L0X_RdByte>
 8006bec:	4603      	mov	r3, r0
 8006bee:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <VL53L0X_device_read_strobe+0x58>
 8006bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3301      	adds	r3, #1
 8006c02:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2bc7      	cmp	r3, #199	; 0xc7
 8006c08:	d9e9      	bls.n	8006bde <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2bc7      	cmp	r3, #199	; 0xc7
 8006c0e:	d901      	bls.n	8006c14 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006c10:	23f9      	movs	r3, #249	; 0xf9
 8006c12:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006c14:	2201      	movs	r2, #1
 8006c16:	2183      	movs	r1, #131	; 0x83
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f002 fbf1 	bl	8009400 <VL53L0X_WrByte>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	461a      	mov	r2, r3
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006c28:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b098      	sub	sp, #96	; 0x60
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006c64:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006c68:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006c80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	f000 8408 	beq.w	800749a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f002 fbb6 	bl	8009400 <VL53L0X_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	21ff      	movs	r1, #255	; 0xff
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f002 fbaa 	bl	8009400 <VL53L0X_WrByte>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f002 fb9e 	bl	8009400 <VL53L0X_WrByte>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006cd2:	2206      	movs	r2, #6
 8006cd4:	21ff      	movs	r1, #255	; 0xff
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f002 fb92 	bl	8009400 <VL53L0X_WrByte>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006cea:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2183      	movs	r1, #131	; 0x83
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f002 fa89 	bl	800920a <VL53L0X_RdByte>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006d06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d0a:	f043 0304 	orr.w	r3, r3, #4
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	2183      	movs	r1, #131	; 0x83
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f002 fb73 	bl	8009400 <VL53L0X_WrByte>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006d28:	2207      	movs	r2, #7
 8006d2a:	21ff      	movs	r1, #255	; 0xff
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f002 fb67 	bl	8009400 <VL53L0X_WrByte>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006d40:	2201      	movs	r2, #1
 8006d42:	2181      	movs	r1, #129	; 0x81
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 fb5b 	bl	8009400 <VL53L0X_WrByte>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f002 fbd3 	bl	8009504 <VL53L0X_PollingDelay>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	461a      	mov	r2, r3
 8006d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f002 fb45 	bl	8009400 <VL53L0X_WrByte>
 8006d76:	4603      	mov	r3, r0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 8098 	beq.w	8006ec0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006d90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d94:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 8091 	bne.w	8006ec0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006d9e:	226b      	movs	r2, #107	; 0x6b
 8006da0:	2194      	movs	r1, #148	; 0x94
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f002 fb2c 	bl	8009400 <VL53L0X_WrByte>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff fefb 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2190      	movs	r1, #144	; 0x90
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f002 fad8 	bl	8009388 <VL53L0X_RdDWord>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	0bdb      	lsrs	r3, r3, #15
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006e02:	2224      	movs	r2, #36	; 0x24
 8006e04:	2194      	movs	r1, #148	; 0x94
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f002 fafa 	bl	8009400 <VL53L0X_WrByte>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fec9 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e32:	461a      	mov	r2, r3
 8006e34:	2190      	movs	r1, #144	; 0x90
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f002 faa6 	bl	8009388 <VL53L0X_RdDWord>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	0e1b      	lsrs	r3, r3, #24
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006e68:	2225      	movs	r2, #37	; 0x25
 8006e6a:	2194      	movs	r1, #148	; 0x94
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f002 fac7 	bl	8009400 <VL53L0X_WrByte>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fe96 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8006e86:	4603      	mov	r3, r0
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2190      	movs	r1, #144	; 0x90
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f002 fa73 	bl	8009388 <VL53L0X_RdDWord>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	0e1b      	lsrs	r3, r3, #24
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8189 	beq.w	80071de <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ed0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f040 8182 	bne.w	80071de <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006eda:	2202      	movs	r2, #2
 8006edc:	2194      	movs	r1, #148	; 0x94
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f002 fa8e 	bl	8009400 <VL53L0X_WrByte>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fe5d 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	461a      	mov	r2, r3
 8006efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006f06:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2190      	movs	r1, #144	; 0x90
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f002 f97b 	bl	800920a <VL53L0X_RdByte>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006f22:	227b      	movs	r2, #123	; 0x7b
 8006f24:	2194      	movs	r1, #148	; 0x94
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f002 fa6a 	bl	8009400 <VL53L0X_WrByte>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fe39 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8006f40:	4603      	mov	r3, r0
 8006f42:	461a      	mov	r2, r3
 8006f44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006f4e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006f52:	461a      	mov	r2, r3
 8006f54:	2190      	movs	r1, #144	; 0x90
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f002 f957 	bl	800920a <VL53L0X_RdByte>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006f6a:	2277      	movs	r2, #119	; 0x77
 8006f6c:	2194      	movs	r1, #148	; 0x94
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f002 fa46 	bl	8009400 <VL53L0X_WrByte>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff fe15 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2190      	movs	r1, #144	; 0x90
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f002 f9f2 	bl	8009388 <VL53L0X_RdDWord>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	0e5b      	lsrs	r3, r3, #25
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	0c9b      	lsrs	r3, r3, #18
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	0adb      	lsrs	r3, r3, #11
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006ffc:	2278      	movs	r2, #120	; 0x78
 8006ffe:	2194      	movs	r1, #148	; 0x94
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f002 f9fd 	bl	8009400 <VL53L0X_WrByte>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800700e:	4313      	orrs	r3, r2
 8007010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fdcc 	bl	8006bb2 <VL53L0X_device_read_strobe>
 800701a:	4603      	mov	r3, r0
 800701c:	461a      	mov	r2, r3
 800701e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007022:	4313      	orrs	r3, r2
 8007024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800702c:	461a      	mov	r2, r3
 800702e:	2190      	movs	r1, #144	; 0x90
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f002 f9a9 	bl	8009388 <VL53L0X_RdDWord>
 8007036:	4603      	mov	r3, r0
 8007038:	461a      	mov	r2, r3
 800703a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800703e:	4313      	orrs	r3, r2
 8007040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	0f5b      	lsrs	r3, r3, #29
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007054:	4413      	add	r3, r2
 8007056:	b2db      	uxtb	r3, r3
 8007058:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	0d9b      	lsrs	r3, r3, #22
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007064:	b2db      	uxtb	r3, r3
 8007066:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	0bdb      	lsrs	r3, r3, #15
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007072:	b2db      	uxtb	r3, r3
 8007074:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007080:	b2db      	uxtb	r3, r3
 8007082:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708e:	b2db      	uxtb	r3, r3
 8007090:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	b2db      	uxtb	r3, r3
 8007096:	019b      	lsls	r3, r3, #6
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80070a4:	2279      	movs	r2, #121	; 0x79
 80070a6:	2194      	movs	r1, #148	; 0x94
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 f9a9 	bl	8009400 <VL53L0X_WrByte>
 80070ae:	4603      	mov	r3, r0
 80070b0:	461a      	mov	r2, r3
 80070b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fd78 	bl	8006bb2 <VL53L0X_device_read_strobe>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070d4:	461a      	mov	r2, r3
 80070d6:	2190      	movs	r1, #144	; 0x90
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 f955 	bl	8009388 <VL53L0X_RdDWord>
 80070de:	4603      	mov	r3, r0
 80070e0:	461a      	mov	r2, r3
 80070e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	0e9b      	lsrs	r3, r3, #26
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80070f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070fc:	4413      	add	r3, r2
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	0cdb      	lsrs	r3, r3, #19
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710c:	b2db      	uxtb	r3, r3
 800710e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	0b1b      	lsrs	r3, r3, #12
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	b2db      	uxtb	r3, r3
 800711c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007128:	b2db      	uxtb	r3, r3
 800712a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	b2db      	uxtb	r3, r3
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800713e:	227a      	movs	r2, #122	; 0x7a
 8007140:	2194      	movs	r1, #148	; 0x94
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f002 f95c 	bl	8009400 <VL53L0X_WrByte>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007150:	4313      	orrs	r3, r2
 8007152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fd2b 	bl	8006bb2 <VL53L0X_device_read_strobe>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007164:	4313      	orrs	r3, r2
 8007166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800716a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800716e:	461a      	mov	r2, r3
 8007170:	2190      	movs	r1, #144	; 0x90
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f002 f908 	bl	8009388 <VL53L0X_RdDWord>
 8007178:	4603      	mov	r3, r0
 800717a:	461a      	mov	r2, r3
 800717c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007180:	4313      	orrs	r3, r2
 8007182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	0f9b      	lsrs	r3, r3, #30
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007190:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007196:	4413      	add	r3, r2
 8007198:	b2db      	uxtb	r3, r3
 800719a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	0ddb      	lsrs	r3, r3, #23
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	0c1b      	lsrs	r3, r3, #16
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	0a5b      	lsrs	r3, r3, #9
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	089b      	lsrs	r3, r3, #2
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80f1 	beq.w	80073cc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80071ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071ee:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 80ea 	bne.w	80073cc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80071f8:	227b      	movs	r2, #123	; 0x7b
 80071fa:	2194      	movs	r1, #148	; 0x94
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f002 f8ff 	bl	8009400 <VL53L0X_WrByte>
 8007202:	4603      	mov	r3, r0
 8007204:	461a      	mov	r2, r3
 8007206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800720a:	4313      	orrs	r3, r2
 800720c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fcce 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800721e:	4313      	orrs	r3, r2
 8007220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007228:	461a      	mov	r2, r3
 800722a:	2190      	movs	r1, #144	; 0x90
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f002 f8ab 	bl	8009388 <VL53L0X_RdDWord>
 8007232:	4603      	mov	r3, r0
 8007234:	461a      	mov	r2, r3
 8007236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800723a:	4313      	orrs	r3, r2
 800723c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007240:	227c      	movs	r2, #124	; 0x7c
 8007242:	2194      	movs	r1, #148	; 0x94
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f002 f8db 	bl	8009400 <VL53L0X_WrByte>
 800724a:	4603      	mov	r3, r0
 800724c:	461a      	mov	r2, r3
 800724e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007252:	4313      	orrs	r3, r2
 8007254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fcaa 	bl	8006bb2 <VL53L0X_device_read_strobe>
 800725e:	4603      	mov	r3, r0
 8007260:	461a      	mov	r2, r3
 8007262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007266:	4313      	orrs	r3, r2
 8007268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800726c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007270:	461a      	mov	r2, r3
 8007272:	2190      	movs	r1, #144	; 0x90
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f002 f887 	bl	8009388 <VL53L0X_RdDWord>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007282:	4313      	orrs	r3, r2
 8007284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007288:	2273      	movs	r2, #115	; 0x73
 800728a:	2194      	movs	r1, #148	; 0x94
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f002 f8b7 	bl	8009400 <VL53L0X_WrByte>
 8007292:	4603      	mov	r3, r0
 8007294:	461a      	mov	r2, r3
 8007296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800729a:	4313      	orrs	r3, r2
 800729c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fc86 	bl	8006bb2 <VL53L0X_device_read_strobe>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80072b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072b8:	461a      	mov	r2, r3
 80072ba:	2190      	movs	r1, #144	; 0x90
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f002 f863 	bl	8009388 <VL53L0X_RdDWord>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461a      	mov	r2, r3
 80072c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80072d8:	2274      	movs	r2, #116	; 0x74
 80072da:	2194      	movs	r1, #148	; 0x94
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 f88f 	bl	8009400 <VL53L0X_WrByte>
 80072e2:	4603      	mov	r3, r0
 80072e4:	461a      	mov	r2, r3
 80072e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fc5e 	bl	8006bb2 <VL53L0X_device_read_strobe>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072fe:	4313      	orrs	r3, r2
 8007300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007308:	461a      	mov	r2, r3
 800730a:	2190      	movs	r1, #144	; 0x90
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f002 f83b 	bl	8009388 <VL53L0X_RdDWord>
 8007312:	4603      	mov	r3, r0
 8007314:	461a      	mov	r2, r3
 8007316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800731a:	4313      	orrs	r3, r2
 800731c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007324:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007326:	4313      	orrs	r3, r2
 8007328:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800732a:	2275      	movs	r2, #117	; 0x75
 800732c:	2194      	movs	r1, #148	; 0x94
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f002 f866 	bl	8009400 <VL53L0X_WrByte>
 8007334:	4603      	mov	r3, r0
 8007336:	461a      	mov	r2, r3
 8007338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733c:	4313      	orrs	r3, r2
 800733e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fc35 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007350:	4313      	orrs	r3, r2
 8007352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800735a:	461a      	mov	r2, r3
 800735c:	2190      	movs	r1, #144	; 0x90
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f002 f812 	bl	8009388 <VL53L0X_RdDWord>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736c:	4313      	orrs	r3, r2
 800736e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8007376:	b29b      	uxth	r3, r3
 8007378:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800737a:	2276      	movs	r2, #118	; 0x76
 800737c:	2194      	movs	r1, #148	; 0x94
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f002 f83e 	bl	8009400 <VL53L0X_WrByte>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800738c:	4313      	orrs	r3, r2
 800738e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fc0d 	bl	8006bb2 <VL53L0X_device_read_strobe>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80073a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073aa:	461a      	mov	r2, r3
 80073ac:	2190      	movs	r1, #144	; 0x90
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 ffea 	bl	8009388 <VL53L0X_RdDWord>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073bc:	4313      	orrs	r3, r2
 80073be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80073c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073c8:	4313      	orrs	r3, r2
 80073ca:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80073cc:	2200      	movs	r2, #0
 80073ce:	2181      	movs	r1, #129	; 0x81
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f002 f815 	bl	8009400 <VL53L0X_WrByte>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461a      	mov	r2, r3
 80073da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073de:	4313      	orrs	r3, r2
 80073e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80073e4:	2206      	movs	r2, #6
 80073e6:	21ff      	movs	r1, #255	; 0xff
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f002 f809 	bl	8009400 <VL53L0X_WrByte>
 80073ee:	4603      	mov	r3, r0
 80073f0:	461a      	mov	r2, r3
 80073f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80073fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007400:	461a      	mov	r2, r3
 8007402:	2183      	movs	r1, #131	; 0x83
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 ff00 	bl	800920a <VL53L0X_RdByte>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007412:	4313      	orrs	r3, r2
 8007414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	b2db      	uxtb	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	2183      	movs	r1, #131	; 0x83
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 ffea 	bl	8009400 <VL53L0X_WrByte>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007434:	4313      	orrs	r3, r2
 8007436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800743a:	2201      	movs	r2, #1
 800743c:	21ff      	movs	r1, #255	; 0xff
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 ffde 	bl	8009400 <VL53L0X_WrByte>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800744c:	4313      	orrs	r3, r2
 800744e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007452:	2201      	movs	r2, #1
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 ffd2 	bl	8009400 <VL53L0X_WrByte>
 800745c:	4603      	mov	r3, r0
 800745e:	461a      	mov	r2, r3
 8007460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007464:	4313      	orrs	r3, r2
 8007466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800746a:	2200      	movs	r2, #0
 800746c:	21ff      	movs	r1, #255	; 0xff
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 ffc6 	bl	8009400 <VL53L0X_WrByte>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800747c:	4313      	orrs	r3, r2
 800747e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 ffba 	bl	8009400 <VL53L0X_WrByte>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007494:	4313      	orrs	r3, r2
 8007496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800749a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 808f 	bne.w	80075c2 <VL53L0X_get_info_from_device+0x98e>
 80074a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074a8:	2b07      	cmp	r3, #7
 80074aa:	f000 808a 	beq.w	80075c2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d024      	beq.n	8007502 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80074b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074bc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11e      	bne.n	8007502 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80074ca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80074d4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80074d8:	2300      	movs	r3, #0
 80074da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074dc:	e00e      	b.n	80074fc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80074de:	f107 0208 	add.w	r2, r7, #8
 80074e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e4:	4413      	add	r3, r2
 80074e6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80074f2:	460a      	mov	r2, r1
 80074f4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80074f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f8:	3301      	adds	r3, #1
 80074fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fe:	2b05      	cmp	r3, #5
 8007500:	dded      	ble.n	80074de <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d018      	beq.n	800753e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800750c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007510:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007514:	2b00      	cmp	r3, #0
 8007516:	d112      	bne.n	800753e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007518:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007522:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	33f3      	adds	r3, #243	; 0xf3
 8007530:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007532:	f107 0310 	add.w	r3, r7, #16
 8007536:	4619      	mov	r1, r3
 8007538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800753a:	f00c f8a7 	bl	801368c <strcpy>

		}

		if (((option & 4) == 4) &&
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d030      	beq.n	80075aa <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007548:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800754c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007550:	2b00      	cmp	r3, #0
 8007552:	d12a      	bne.n	80075aa <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007566:	025b      	lsls	r3, r3, #9
 8007568:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800756e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800757a:	2b00      	cmp	r3, #0
 800757c:	d011      	beq.n	80075a2 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800757e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007592:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007596:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800759a:	425b      	negs	r3, r3
 800759c:	b29b      	uxth	r3, r3
 800759e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80075a2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80075aa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80075b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075c2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3760      	adds	r7, #96	; 0x60
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80075ce:	b490      	push	{r4, r7}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80075da:	f240 6377 	movw	r3, #1655	; 0x677
 80075de:	f04f 0400 	mov.w	r4, #0
 80075e2:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 80075e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80075ea:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80075fc:	68bb      	ldr	r3, [r7, #8]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bc90      	pop	{r4, r7}
 8007606:	4770      	bx	lr

08007608 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d017      	beq.n	8007652 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007628:	e005      	b.n	8007636 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007630:	89fb      	ldrh	r3, [r7, #14]
 8007632:	3301      	adds	r3, #1
 8007634:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f4      	bne.n	800762a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	b29b      	uxth	r3, r3
 800764a:	b2db      	uxtb	r3, r3
 800764c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800764e:	4413      	add	r3, r2
 8007650:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007652:	8afb      	ldrh	r3, [r7, #22]

}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	0a12      	lsrs	r2, r2, #8
 8007676:	b292      	uxth	r2, r2
 8007678:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800767e:	68fb      	ldr	r3, [r7, #12]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	4619      	mov	r1, r3
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff ff93 	bl	80075ce <VL53L0X_calc_macro_period_ps>
 80076a8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <VL53L0X_calc_timeout_mclks+0x50>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076c0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	441a      	add	r2, r3
	timeout_period_mclks =
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 80076d2:	69fb      	ldr	r3, [r7, #28]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	10624dd3 	.word	0x10624dd3

080076e0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	807b      	strh	r3, [r7, #2]
 80076ec:	4613      	mov	r3, r2
 80076ee:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80076f4:	787b      	ldrb	r3, [r7, #1]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff68 	bl	80075ce <VL53L0X_calc_macro_period_ps>
 80076fe:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007706:	4a0b      	ldr	r2, [pc, #44]	; (8007734 <VL53L0X_calc_timeout_us+0x54>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	099b      	lsrs	r3, r3, #6
 800770e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	4413      	add	r3, r2
	actual_timeout_period_us =
 800771e:	4a05      	ldr	r2, [pc, #20]	; (8007734 <VL53L0X_calc_timeout_us+0x54>)
 8007720:	fba2 2303 	umull	r2, r3, r2, r3
 8007724:	099b      	lsrs	r3, r3, #6
 8007726:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007728:	697b      	ldr	r3, [r7, #20]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	10624dd3 	.word	0x10624dd3

08007738 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	; 0x30
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	460b      	mov	r3, r1
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007746:	2300      	movs	r3, #0
 8007748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <get_sequence_step_timeout+0x38>
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d002      	beq.n	8007770 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d128      	bne.n	80077c2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007770:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007774:	461a      	mov	r2, r3
 8007776:	2100      	movs	r1, #0
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7fd fa75 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 800777e:	4603      	mov	r3, r0
 8007780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007784:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800778c:	f107 0320 	add.w	r3, r7, #32
 8007790:	461a      	mov	r2, r3
 8007792:	2146      	movs	r1, #70	; 0x46
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f001 fd38 	bl	800920a <VL53L0X_RdByte>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80077a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff ff5a 	bl	8007660 <VL53L0X_decode_timeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80077b0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80077b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077b6:	4619      	mov	r1, r3
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7ff ff91 	bl	80076e0 <VL53L0X_calc_timeout_us>
 80077be:	62b8      	str	r0, [r7, #40]	; 0x28
 80077c0:	e092      	b.n	80078e8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d135      	bne.n	8007834 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80077c8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80077cc:	461a      	mov	r2, r3
 80077ce:	2100      	movs	r1, #0
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7fd fa49 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80077dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8081 	bne.w	80078e8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80077e6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80077ea:	461a      	mov	r2, r3
 80077ec:	2100      	movs	r1, #0
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7fd fa3a 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80077fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007802:	f107 031e 	add.w	r3, r7, #30
 8007806:	461a      	mov	r2, r3
 8007808:	2151      	movs	r1, #81	; 0x51
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f001 fd84 	bl	8009318 <VL53L0X_RdWord>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007816:	8bfb      	ldrh	r3, [r7, #30]
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff ff21 	bl	8007660 <VL53L0X_decode_timeout>
 800781e:	4603      	mov	r3, r0
 8007820:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007822:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7ff ff58 	bl	80076e0 <VL53L0X_calc_timeout_us>
 8007830:	62b8      	str	r0, [r7, #40]	; 0x28
 8007832:	e059      	b.n	80078e8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d156      	bne.n	80078e8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800783a:	f107 0314 	add.w	r3, r7, #20
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7fd fb1d 	bl	8004e80 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01d      	beq.n	800788c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007850:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007854:	461a      	mov	r2, r3
 8007856:	2100      	movs	r1, #0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7fd fa05 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007864:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10f      	bne.n	800788c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800786c:	f107 031e 	add.w	r3, r7, #30
 8007870:	461a      	mov	r2, r3
 8007872:	2151      	movs	r1, #81	; 0x51
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 fd4f 	bl	8009318 <VL53L0X_RdWord>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007880:	8bfb      	ldrh	r3, [r7, #30]
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff feec 	bl	8007660 <VL53L0X_decode_timeout>
 8007888:	4603      	mov	r3, r0
 800788a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800788c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007894:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007898:	461a      	mov	r2, r3
 800789a:	2101      	movs	r1, #1
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7fd f9e3 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80078a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10f      	bne.n	80078d0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80078b0:	f107 031c 	add.w	r3, r7, #28
 80078b4:	461a      	mov	r2, r3
 80078b6:	2171      	movs	r1, #113	; 0x71
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fd2d 	bl	8009318 <VL53L0X_RdWord>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80078c4:	8bbb      	ldrh	r3, [r7, #28]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff feca 	bl	8007660 <VL53L0X_decode_timeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80078d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80078d8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80078dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff fefd 	bl	80076e0 <VL53L0X_calc_timeout_us>
 80078e6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ec:	601a      	str	r2, [r3, #0]

	return Status;
 80078ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3730      	adds	r7, #48	; 0x30
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b08a      	sub	sp, #40	; 0x28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	460b      	mov	r3, r1
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <set_sequence_step_timeout+0x26>
 8007914:	7afb      	ldrb	r3, [r7, #11]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d002      	beq.n	8007920 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d138      	bne.n	8007992 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007920:	f107 031d 	add.w	r3, r7, #29
 8007924:	461a      	mov	r2, r3
 8007926:	2100      	movs	r1, #0
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7fd f99d 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11a      	bne.n	8007972 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800793c:	7f7b      	ldrb	r3, [r7, #29]
 800793e:	461a      	mov	r2, r3
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fea2 	bl	800768c <VL53L0X_calc_timeout_mclks>
 8007948:	4603      	mov	r3, r0
 800794a:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800794c:	8bfb      	ldrh	r3, [r7, #30]
 800794e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007952:	d903      	bls.n	800795c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007954:	23ff      	movs	r3, #255	; 0xff
 8007956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800795a:	e004      	b.n	8007966 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800795c:	8bfb      	ldrh	r3, [r7, #30]
 800795e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007960:	3b01      	subs	r3, #1
 8007962:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007972:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007976:	2b00      	cmp	r3, #0
 8007978:	f040 80ad 	bne.w	8007ad6 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800797c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007980:	461a      	mov	r2, r3
 8007982:	2146      	movs	r1, #70	; 0x46
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 fd3b 	bl	8009400 <VL53L0X_WrByte>
 800798a:	4603      	mov	r3, r0
 800798c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007990:	e0a1      	b.n	8007ad6 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d135      	bne.n	8007a04 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11b      	bne.n	80079d8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80079a0:	f107 031d 	add.w	r3, r7, #29
 80079a4:	461a      	mov	r2, r3
 80079a6:	2100      	movs	r1, #0
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7fd f95d 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80079b4:	7f7b      	ldrb	r3, [r7, #29]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff fe66 	bl	800768c <VL53L0X_calc_timeout_mclks>
 80079c0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80079c2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80079c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fe1e 	bl	8007608 <VL53L0X_encode_timeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079d0:	8b7a      	ldrh	r2, [r7, #26]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80079d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d108      	bne.n	80079f2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80079e0:	8b7b      	ldrh	r3, [r7, #26]
 80079e2:	461a      	mov	r2, r3
 80079e4:	2151      	movs	r1, #81	; 0x51
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f001 fd2e 	bl	8009448 <VL53L0X_WrWord>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80079f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d16d      	bne.n	8007ad6 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007a02:	e068      	b.n	8007ad6 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d162      	bne.n	8007ad0 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007a0a:	f107 0314 	add.w	r3, r7, #20
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7fd fa35 	bl	8004e80 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01d      	beq.n	8007a5c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007a20:	f107 031d 	add.w	r3, r7, #29
 8007a24:	461a      	mov	r2, r3
 8007a26:	2100      	movs	r1, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7fd f91d 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007a34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10f      	bne.n	8007a5c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007a3c:	f107 031a 	add.w	r3, r7, #26
 8007a40:	461a      	mov	r2, r3
 8007a42:	2151      	movs	r1, #81	; 0x51
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f001 fc67 	bl	8009318 <VL53L0X_RdWord>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007a50:	8b7b      	ldrh	r3, [r7, #26]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff fe04 	bl	8007660 <VL53L0X_decode_timeout>
 8007a58:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007a5a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007a64:	f107 031d 	add.w	r3, r7, #29
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7fd f8fb 	bl	8004c68 <VL53L0X_GetVcselPulsePeriod>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d12a      	bne.n	8007ad6 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007a80:	7f7b      	ldrb	r3, [r7, #29]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fe00 	bl	800768c <VL53L0X_calc_timeout_mclks>
 8007a8c:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8007a8e:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007a90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a94:	4413      	add	r3, r2
 8007a96:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				FinalRangeEncodedTimeOut =
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff fdb4 	bl	8007608 <VL53L0X_encode_timeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8007aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007aac:	8c3b      	ldrh	r3, [r7, #32]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2171      	movs	r1, #113	; 0x71
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f001 fcc8 	bl	8009448 <VL53L0X_WrWord>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007abe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d107      	bne.n	8007ad6 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007ace:	e002      	b.n	8007ad6 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ad0:	23fc      	movs	r3, #252	; 0xfc
 8007ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3728      	adds	r7, #40	; 0x28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b08a      	sub	sp, #40	; 0x28
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
 8007aee:	4613      	mov	r3, r2
 8007af0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007af8:	230c      	movs	r3, #12
 8007afa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8007afe:	2312      	movs	r3, #18
 8007b00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007b04:	2308      	movs	r3, #8
 8007b06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007b0a:	230e      	movs	r3, #14
 8007b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007b14:	78bb      	ldrb	r3, [r7, #2]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b20:	23fc      	movs	r3, #252	; 0xfc
 8007b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b26:	e020      	b.n	8007b6a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <VL53L0X_set_vcsel_pulse_period+0x68>
 8007b2e:	78ba      	ldrb	r2, [r7, #2]
 8007b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d304      	bcc.n	8007b42 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007b38:	78ba      	ldrb	r2, [r7, #2]
 8007b3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d903      	bls.n	8007b4a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b42:	23fc      	movs	r3, #252	; 0xfc
 8007b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b48:	e00f      	b.n	8007b6a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10c      	bne.n	8007b6a <VL53L0X_set_vcsel_pulse_period+0x88>
 8007b50:	78ba      	ldrb	r2, [r7, #2]
 8007b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d304      	bcc.n	8007b64 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8007b5a:	78ba      	ldrb	r2, [r7, #2]
 8007b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d902      	bls.n	8007b6a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b64:	23fc      	movs	r3, #252	; 0xfc
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8007b6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8007b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b76:	e239      	b.n	8007fec <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d150      	bne.n	8007c20 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007b7e:	78bb      	ldrb	r3, [r7, #2]
 8007b80:	2b0c      	cmp	r3, #12
 8007b82:	d110      	bne.n	8007ba6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007b84:	2218      	movs	r2, #24
 8007b86:	2157      	movs	r1, #87	; 0x57
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fc39 	bl	8009400 <VL53L0X_WrByte>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007b94:	2208      	movs	r2, #8
 8007b96:	2156      	movs	r1, #86	; 0x56
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fc31 	bl	8009400 <VL53L0X_WrByte>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ba4:	e17f      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007ba6:	78bb      	ldrb	r3, [r7, #2]
 8007ba8:	2b0e      	cmp	r3, #14
 8007baa:	d110      	bne.n	8007bce <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8007bac:	2230      	movs	r2, #48	; 0x30
 8007bae:	2157      	movs	r1, #87	; 0x57
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fc25 	bl	8009400 <VL53L0X_WrByte>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	2156      	movs	r1, #86	; 0x56
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fc1d 	bl	8009400 <VL53L0X_WrByte>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bcc:	e16b      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8007bce:	78bb      	ldrb	r3, [r7, #2]
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d110      	bne.n	8007bf6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007bd4:	2240      	movs	r2, #64	; 0x40
 8007bd6:	2157      	movs	r1, #87	; 0x57
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fc11 	bl	8009400 <VL53L0X_WrByte>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007be4:	2208      	movs	r2, #8
 8007be6:	2156      	movs	r1, #86	; 0x56
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fc09 	bl	8009400 <VL53L0X_WrByte>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bf4:	e157      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007bf6:	78bb      	ldrb	r3, [r7, #2]
 8007bf8:	2b12      	cmp	r3, #18
 8007bfa:	f040 8154 	bne.w	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007bfe:	2250      	movs	r2, #80	; 0x50
 8007c00:	2157      	movs	r1, #87	; 0x57
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 fbfc 	bl	8009400 <VL53L0X_WrByte>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007c0e:	2208      	movs	r2, #8
 8007c10:	2156      	movs	r1, #86	; 0x56
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fbf4 	bl	8009400 <VL53L0X_WrByte>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c1e:	e142      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	f040 813f 	bne.w	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007c28:	78bb      	ldrb	r3, [r7, #2]
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d14c      	bne.n	8007cc8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007c2e:	2210      	movs	r2, #16
 8007c30:	2148      	movs	r1, #72	; 0x48
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fbe4 	bl	8009400 <VL53L0X_WrByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007c3e:	2208      	movs	r2, #8
 8007c40:	2147      	movs	r1, #71	; 0x47
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fbdc 	bl	8009400 <VL53L0X_WrByte>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007c4e:	2202      	movs	r2, #2
 8007c50:	2132      	movs	r1, #50	; 0x32
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fbd4 	bl	8009400 <VL53L0X_WrByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007c66:	220c      	movs	r2, #12
 8007c68:	2130      	movs	r1, #48	; 0x30
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fbc8 	bl	8009400 <VL53L0X_WrByte>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007c7e:	2201      	movs	r2, #1
 8007c80:	21ff      	movs	r1, #255	; 0xff
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fbbc 	bl	8009400 <VL53L0X_WrByte>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007c96:	2230      	movs	r2, #48	; 0x30
 8007c98:	2130      	movs	r1, #48	; 0x30
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fbb0 	bl	8009400 <VL53L0X_WrByte>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007cae:	2200      	movs	r2, #0
 8007cb0:	21ff      	movs	r1, #255	; 0xff
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fba4 	bl	8009400 <VL53L0X_WrByte>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007cc6:	e0ee      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007cc8:	78bb      	ldrb	r3, [r7, #2]
 8007cca:	2b0a      	cmp	r3, #10
 8007ccc:	d14c      	bne.n	8007d68 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8007cce:	2228      	movs	r2, #40	; 0x28
 8007cd0:	2148      	movs	r1, #72	; 0x48
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fb94 	bl	8009400 <VL53L0X_WrByte>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8007cde:	2208      	movs	r2, #8
 8007ce0:	2147      	movs	r1, #71	; 0x47
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fb8c 	bl	8009400 <VL53L0X_WrByte>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007cee:	2203      	movs	r2, #3
 8007cf0:	2132      	movs	r1, #50	; 0x32
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fb84 	bl	8009400 <VL53L0X_WrByte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007d06:	2209      	movs	r2, #9
 8007d08:	2130      	movs	r1, #48	; 0x30
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 fb78 	bl	8009400 <VL53L0X_WrByte>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007d1e:	2201      	movs	r2, #1
 8007d20:	21ff      	movs	r1, #255	; 0xff
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fb6c 	bl	8009400 <VL53L0X_WrByte>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007d36:	2220      	movs	r2, #32
 8007d38:	2130      	movs	r1, #48	; 0x30
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 fb60 	bl	8009400 <VL53L0X_WrByte>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	21ff      	movs	r1, #255	; 0xff
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fb54 	bl	8009400 <VL53L0X_WrByte>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d66:	e09e      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007d68:	78bb      	ldrb	r3, [r7, #2]
 8007d6a:	2b0c      	cmp	r3, #12
 8007d6c:	d14c      	bne.n	8007e08 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007d6e:	2238      	movs	r2, #56	; 0x38
 8007d70:	2148      	movs	r1, #72	; 0x48
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fb44 	bl	8009400 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007d7e:	2208      	movs	r2, #8
 8007d80:	2147      	movs	r1, #71	; 0x47
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fb3c 	bl	8009400 <VL53L0X_WrByte>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007d8e:	2203      	movs	r2, #3
 8007d90:	2132      	movs	r1, #50	; 0x32
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fb34 	bl	8009400 <VL53L0X_WrByte>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007da6:	2208      	movs	r2, #8
 8007da8:	2130      	movs	r1, #48	; 0x30
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fb28 	bl	8009400 <VL53L0X_WrByte>
 8007db0:	4603      	mov	r3, r0
 8007db2:	461a      	mov	r2, r3
 8007db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	21ff      	movs	r1, #255	; 0xff
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fb1c 	bl	8009400 <VL53L0X_WrByte>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	2130      	movs	r1, #48	; 0x30
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 fb10 	bl	8009400 <VL53L0X_WrByte>
 8007de0:	4603      	mov	r3, r0
 8007de2:	461a      	mov	r2, r3
 8007de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007dee:	2200      	movs	r2, #0
 8007df0:	21ff      	movs	r1, #255	; 0xff
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fb04 	bl	8009400 <VL53L0X_WrByte>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e06:	e04e      	b.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007e08:	78bb      	ldrb	r3, [r7, #2]
 8007e0a:	2b0e      	cmp	r3, #14
 8007e0c:	d14b      	bne.n	8007ea6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007e0e:	2248      	movs	r2, #72	; 0x48
 8007e10:	2148      	movs	r1, #72	; 0x48
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 faf4 	bl	8009400 <VL53L0X_WrByte>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007e1e:	2208      	movs	r2, #8
 8007e20:	2147      	movs	r1, #71	; 0x47
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 faec 	bl	8009400 <VL53L0X_WrByte>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007e2e:	2203      	movs	r2, #3
 8007e30:	2132      	movs	r1, #50	; 0x32
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fae4 	bl	8009400 <VL53L0X_WrByte>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e40:	4313      	orrs	r3, r2
 8007e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007e46:	2207      	movs	r2, #7
 8007e48:	2130      	movs	r1, #48	; 0x30
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fad8 	bl	8009400 <VL53L0X_WrByte>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007e5e:	2201      	movs	r2, #1
 8007e60:	21ff      	movs	r1, #255	; 0xff
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 facc 	bl	8009400 <VL53L0X_WrByte>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007e76:	2220      	movs	r2, #32
 8007e78:	2130      	movs	r1, #48	; 0x30
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fac0 	bl	8009400 <VL53L0X_WrByte>
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	21ff      	movs	r1, #255	; 0xff
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fab4 	bl	8009400 <VL53L0X_WrByte>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007ea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d17f      	bne.n	8007fae <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007eae:	78bb      	ldrb	r3, [r7, #2]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fe37 	bl	8006b24 <VL53L0X_encode_vcsel_period>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d045      	beq.n	8007f52 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007ec6:	e06e      	b.n	8007fa6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007ec8:	f107 0314 	add.w	r3, r7, #20
 8007ecc:	461a      	mov	r2, r3
 8007ece:	2103      	movs	r1, #3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7ff fc31 	bl	8007738 <get_sequence_step_timeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007edc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007ee4:	f107 0310 	add.w	r3, r7, #16
 8007ee8:	461a      	mov	r2, r3
 8007eea:	2102      	movs	r1, #2
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff fc23 	bl	8007738 <get_sequence_step_timeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f04:	461a      	mov	r2, r3
 8007f06:	2150      	movs	r1, #80	; 0x50
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fa79 	bl	8009400 <VL53L0X_WrByte>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2103      	movs	r1, #3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fce9 	bl	80078fa <set_sequence_step_timeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007f2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d108      	bne.n	8007f48 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fcdc 	bl	80078fa <set_sequence_step_timeout>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	78ba      	ldrb	r2, [r7, #2]
 8007f4c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007f50:	e02e      	b.n	8007fb0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007f52:	f107 0318 	add.w	r3, r7, #24
 8007f56:	461a      	mov	r2, r3
 8007f58:	2104      	movs	r1, #4
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fbec 	bl	8007738 <get_sequence_step_timeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007f66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007f6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f72:	461a      	mov	r2, r3
 8007f74:	2170      	movs	r1, #112	; 0x70
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 fa42 	bl	8009400 <VL53L0X_WrByte>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007f82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d108      	bne.n	8007f9c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2104      	movs	r1, #4
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fcb2 	bl	80078fa <set_sequence_step_timeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	78ba      	ldrb	r2, [r7, #2]
 8007fa0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007fa4:	e004      	b.n	8007fb0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fa6:	23fc      	movs	r3, #252	; 0xfc
 8007fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fac:	e000      	b.n	8007fb0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8007fae:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007fbe:	69f9      	ldr	r1, [r7, #28]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fc fe13 	bl	8004bec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007fd4:	f107 010f 	add.w	r1, r7, #15
 8007fd8:	2301      	movs	r3, #1
 8007fda:	2200      	movs	r2, #0
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fe fcbd 	bl	800695c <VL53L0X_perform_phase_calibration>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3728      	adds	r7, #40	; 0x28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800800c:	2b01      	cmp	r3, #1
 800800e:	d00a      	beq.n	8008026 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008010:	e013      	b.n	800803a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008012:	f107 0316 	add.w	r3, r7, #22
 8008016:	461a      	mov	r2, r3
 8008018:	2150      	movs	r1, #80	; 0x50
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 f8f5 	bl	800920a <VL53L0X_RdByte>
 8008020:	4603      	mov	r3, r0
 8008022:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008024:	e00b      	b.n	800803e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008026:	f107 0316 	add.w	r3, r7, #22
 800802a:	461a      	mov	r2, r3
 800802c:	2170      	movs	r1, #112	; 0x70
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f001 f8eb 	bl	800920a <VL53L0X_RdByte>
 8008034:	4603      	mov	r3, r0
 8008036:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008038:	e001      	b.n	800803e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800803a:	23fc      	movs	r3, #252	; 0xfc
 800803c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800803e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d107      	bne.n	8008056 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008046:	7dbb      	ldrb	r3, [r7, #22]
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fd58 	bl	8006afe <VL53L0X_decode_vcsel_period>
 800804e:	4603      	mov	r3, r0
 8008050:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	701a      	strb	r2, [r3, #0]

	return Status;
 8008056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b092      	sub	sp, #72	; 0x48
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008072:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008076:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8008078:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800807e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008084:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008088:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800808a:	f240 234e 	movw	r3, #590	; 0x24e
 800808e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008090:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008096:	f44f 7325 	mov.w	r3, #660	; 0x294
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800809c:	f240 2326 	movw	r3, #550	; 0x226
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80080a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80080aa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d205      	bcs.n	80080c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080b8:	23fc      	movs	r3, #252	; 0xfc
 80080ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80080be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080c2:	e0aa      	b.n	800821a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80080c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80080d0:	f107 0314 	add.w	r3, r7, #20
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fc fed2 	bl	8004e80 <VL53L0X_GetSequenceStepEnables>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80080e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d15b      	bne.n	80081a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80080ea:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d105      	bne.n	80080fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80080f0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d102      	bne.n	80080fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80080f6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d052      	beq.n	80081a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	461a      	mov	r2, r3
 8008102:	2102      	movs	r1, #2
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fb17 	bl	8007738 <get_sequence_step_timeout>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008110:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008118:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800811c:	e07d      	b.n	800821a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800811e:	7d3b      	ldrb	r3, [r7, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00f      	beq.n	8008144 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008124:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008128:	4413      	add	r3, r2
 800812a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008130:	429a      	cmp	r2, r3
 8008132:	d204      	bcs.n	800813e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	643b      	str	r3, [r7, #64]	; 0x40
 800813c:	e002      	b.n	8008144 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800813e:	23fc      	movs	r3, #252	; 0xfc
 8008140:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008144:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800814c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008150:	e063      	b.n	800821a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008152:	7dbb      	ldrb	r3, [r7, #22]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d011      	beq.n	800817c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	4413      	add	r3, r2
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008166:	429a      	cmp	r2, r3
 8008168:	d204      	bcs.n	8008174 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800816a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
 8008172:	e016      	b.n	80081a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008174:	23fc      	movs	r3, #252	; 0xfc
 8008176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800817a:	e012      	b.n	80081a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800817c:	7d7b      	ldrb	r3, [r7, #21]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00f      	beq.n	80081a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008186:	4413      	add	r3, r2
 8008188:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818e:	429a      	cmp	r2, r3
 8008190:	d204      	bcs.n	800819c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	643b      	str	r3, [r7, #64]	; 0x40
 800819a:	e002      	b.n	80081a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800819c:	23fc      	movs	r3, #252	; 0xfc
 800819e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80081a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80081aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081ae:	e034      	b.n	800821a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d019      	beq.n	80081ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80081b6:	f107 030c 	add.w	r3, r7, #12
 80081ba:	461a      	mov	r2, r3
 80081bc:	2103      	movs	r1, #3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff faba 	bl	8007738 <get_sequence_step_timeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ce:	4413      	add	r3, r2
 80081d0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d204      	bcs.n	80081e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80081da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
 80081e2:	e002      	b.n	80081ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081e4:	23fc      	movs	r3, #252	; 0xfc
 80081e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80081ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d111      	bne.n	8008216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80081f2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00e      	beq.n	8008216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80081f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8008200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008202:	2104      	movs	r1, #4
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fb78 	bl	80078fa <set_sequence_step_timeout>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008216:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800821a:	4618      	mov	r0, r3
 800821c:	3748      	adds	r7, #72	; 0x48
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b090      	sub	sp, #64	; 0x40
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800822c:	2300      	movs	r3, #0
 800822e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008232:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008236:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008238:	f240 7376 	movw	r3, #1910	; 0x776
 800823c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800823e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008242:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008244:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008248:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800824a:	f240 234e 	movw	r3, #590	; 0x24e
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008250:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008256:	f44f 7325 	mov.w	r3, #660	; 0x294
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800825c:	f240 2326 	movw	r3, #550	; 0x226
 8008260:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826a:	441a      	add	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008270:	f107 0318 	add.w	r3, r7, #24
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7fc fe02 	bl	8004e80 <VL53L0X_GetSequenceStepEnables>
 800827c:	4603      	mov	r3, r0
 800827e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008282:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800828a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800828e:	e075      	b.n	800837c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008290:	7e3b      	ldrb	r3, [r7, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008296:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800829c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d030      	beq.n	8008304 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80082a2:	f107 0310 	add.w	r3, r7, #16
 80082a6:	461a      	mov	r2, r3
 80082a8:	2102      	movs	r1, #2
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fa44 	bl	8007738 <get_sequence_step_timeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80082b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d122      	bne.n	8008304 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80082be:	7e3b      	ldrb	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80082c8:	6939      	ldr	r1, [r7, #16]
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082ce:	441a      	add	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80082d4:	7ebb      	ldrb	r3, [r7, #26]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d009      	beq.n	80082ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80082de:	6939      	ldr	r1, [r7, #16]
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	440b      	add	r3, r1
 80082e4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082e6:	441a      	add	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	e00a      	b.n	8008304 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80082ee:	7e7b      	ldrb	r3, [r7, #25]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80082f8:	6939      	ldr	r1, [r7, #16]
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082fe:	441a      	add	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008304:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008308:	2b00      	cmp	r3, #0
 800830a:	d114      	bne.n	8008336 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800830c:	7efb      	ldrb	r3, [r7, #27]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d011      	beq.n	8008336 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	461a      	mov	r2, r3
 8008318:	2103      	movs	r1, #3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fa0c 	bl	8007738 <get_sequence_step_timeout>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008330:	441a      	add	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008336:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800833a:	2b00      	cmp	r3, #0
 800833c:	d114      	bne.n	8008368 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800833e:	7f3b      	ldrb	r3, [r7, #28]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d011      	beq.n	8008368 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	461a      	mov	r2, r3
 800834a:	2104      	movs	r1, #4
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff f9f3 	bl	8007738 <get_sequence_step_timeout>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800835c:	6979      	ldr	r1, [r7, #20]
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008362:	441a      	add	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008368:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800836c:	2b00      	cmp	r3, #0
 800836e:	d103      	bne.n	8008378 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008378:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800837c:	4618      	mov	r0, r3
 800837e:	3740      	adds	r7, #64	; 0x40
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800838e:	2300      	movs	r3, #0
 8008390:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008396:	e0c6      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4413      	add	r3, r2
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	3301      	adds	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80083a8:	7cfb      	ldrb	r3, [r7, #19]
 80083aa:	2bff      	cmp	r3, #255	; 0xff
 80083ac:	f040 808d 	bne.w	80084ca <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	4413      	add	r3, r2
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	747b      	strb	r3, [r7, #17]
			Index++;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	3301      	adds	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80083c0:	7c7b      	ldrb	r3, [r7, #17]
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d87e      	bhi.n	80084c4 <VL53L0X_load_tuning_settings+0x140>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <VL53L0X_load_tuning_settings+0x48>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	08008417 	.word	0x08008417
 80083d4:	08008451 	.word	0x08008451
 80083d8:	0800848b 	.word	0x0800848b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	4413      	add	r3, r2
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	743b      	strb	r3, [r7, #16]
				Index++;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	3301      	adds	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	4413      	add	r3, r2
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	3301      	adds	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80083fc:	7c3b      	ldrb	r3, [r7, #16]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	b29a      	uxth	r2, r3
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	b29b      	uxth	r3, r3
 8008408:	4413      	add	r3, r2
 800840a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	89ba      	ldrh	r2, [r7, #12]
 8008410:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008414:	e087      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	4413      	add	r3, r2
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	3301      	adds	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	4413      	add	r3, r2
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3301      	adds	r3, #1
 8008434:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008436:	7c3b      	ldrb	r3, [r7, #16]
 8008438:	b29b      	uxth	r3, r3
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	b29a      	uxth	r2, r3
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	b29b      	uxth	r3, r3
 8008442:	4413      	add	r3, r2
 8008444:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	89ba      	ldrh	r2, [r7, #12]
 800844a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800844e:	e06a      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4413      	add	r3, r2
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	743b      	strb	r3, [r7, #16]
				Index++;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	3301      	adds	r3, #1
 800845e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4413      	add	r3, r2
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	73fb      	strb	r3, [r7, #15]
				Index++;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	3301      	adds	r3, #1
 800846e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008470:	7c3b      	ldrb	r3, [r7, #16]
 8008472:	b29b      	uxth	r3, r3
 8008474:	021b      	lsls	r3, r3, #8
 8008476:	b29a      	uxth	r2, r3
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	b29b      	uxth	r3, r3
 800847c:	4413      	add	r3, r2
 800847e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	89ba      	ldrh	r2, [r7, #12]
 8008484:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008488:	e04d      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	4413      	add	r3, r2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	743b      	strb	r3, [r7, #16]
				Index++;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3301      	adds	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	4413      	add	r3, r2
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	3301      	adds	r3, #1
 80084a8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80084aa:	7c3b      	ldrb	r3, [r7, #16]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	4413      	add	r3, r2
 80084b8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	89ba      	ldrh	r2, [r7, #12]
 80084be:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 80084c2:	e030      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084c4:	23fc      	movs	r3, #252	; 0xfc
 80084c6:	77fb      	strb	r3, [r7, #31]
 80084c8:	e02d      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80084ca:	7cfb      	ldrb	r3, [r7, #19]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d828      	bhi.n	8008522 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	3301      	adds	r3, #1
 80084de:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80084e0:	2300      	movs	r3, #0
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	e00f      	b.n	8008506 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	4413      	add	r3, r2
 80084ec:	7819      	ldrb	r1, [r3, #0]
 80084ee:	f107 0208 	add.w	r2, r7, #8
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	4413      	add	r3, r2
 80084f6:	460a      	mov	r2, r1
 80084f8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	3301      	adds	r3, #1
 8008504:	61bb      	str	r3, [r7, #24]
 8008506:	7cfb      	ldrb	r3, [r7, #19]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	429a      	cmp	r2, r3
 800850c:	dbeb      	blt.n	80084e6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800850e:	7cfb      	ldrb	r3, [r7, #19]
 8008510:	f107 0208 	add.w	r2, r7, #8
 8008514:	7cb9      	ldrb	r1, [r7, #18]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fea2 	bl	8009260 <VL53L0X_WriteMulti>
 800851c:	4603      	mov	r3, r0
 800851e:	77fb      	strb	r3, [r7, #31]
 8008520:	e001      	b.n	8008526 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008522:	23fc      	movs	r3, #252	; 0xfc
 8008524:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <VL53L0X_load_tuning_settings+0x1b8>
 8008532:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f43f af2e 	beq.w	8008398 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800853c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3720      	adds	r7, #32
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008554:	2300      	movs	r3, #0
 8008556:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800855e:	f107 0313 	add.w	r3, r7, #19
 8008562:	4619      	mov	r1, r3
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7fc fd57 	bl	8005018 <VL53L0X_GetXTalkCompensationEnable>
 800856a:	4603      	mov	r3, r0
 800856c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800856e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d111      	bne.n	800859a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008576:	7cfb      	ldrb	r3, [r7, #19]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00e      	beq.n	800859a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	8a9b      	ldrh	r3, [r3, #20]
 8008586:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	fb02 f303 	mul.w	r3, r2, r3
 800858e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	3380      	adds	r3, #128	; 0x80
 8008594:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800859a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80085be:	f107 0310 	add.w	r3, r7, #16
 80085c2:	461a      	mov	r2, r3
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff ffbe 	bl	8008548 <VL53L0X_get_total_xtalk_rate>
 80085cc:	4603      	mov	r3, r0
 80085ce:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80085d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d105      	bne.n	80085e4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	441a      	add	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	601a      	str	r2, [r3, #0]

	return Status;
 80085e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b09a      	sub	sp, #104	; 0x68
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80085fe:	2312      	movs	r3, #18
 8008600:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008606:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008608:	2342      	movs	r3, #66	; 0x42
 800860a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800860c:	2306      	movs	r3, #6
 800860e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008610:	2307      	movs	r3, #7
 8008612:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800862e:	fb02 f303 	mul.w	r3, r2, r3
 8008632:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	3380      	adds	r3, #128	; 0x80
 8008638:	0a1b      	lsrs	r3, r3, #8
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008640:	fb02 f303 	mul.w	r3, r2, r3
 8008644:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	029b      	lsls	r3, r3, #10
 8008654:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800865a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865c:	4413      	add	r3, r2
 800865e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008660:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800866a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800866c:	4613      	mov	r3, r2
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	4413      	add	r3, r2
 8008672:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008676:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008678:	fb02 f303 	mul.w	r3, r2, r3
 800867c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800867e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008680:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008684:	0c1b      	lsrs	r3, r3, #16
 8008686:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800868c:	fb02 f303 	mul.w	r3, r2, r3
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a0:	fb02 f303 	mul.w	r3, r2, r3
 80086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80086a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80086ac:	0c1b      	lsrs	r3, r3, #16
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80086b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b2:	085a      	lsrs	r2, r3, #1
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	441a      	add	r2, r3
 80086b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80086be:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d302      	bcc.n	80086d8 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 80086d2:	4b55      	ldr	r3, [pc, #340]	; (8008828 <VL53L0X_calc_dmax+0x238>)
 80086d4:	663b      	str	r3, [r7, #96]	; 0x60
 80086d6:	e016      	b.n	8008706 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80086d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086da:	085a      	lsrs	r2, r3, #1
 80086dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086de:	441a      	add	r2, r3
 80086e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80086e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
 80086f0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80086f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80086fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008700:	fb02 f303 	mul.w	r3, r2, r3
 8008704:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008708:	039b      	lsls	r3, r3, #14
 800870a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800870e:	4a47      	ldr	r2, [pc, #284]	; (800882c <VL53L0X_calc_dmax+0x23c>)
 8008710:	fba2 2303 	umull	r2, r3, r2, r3
 8008714:	099b      	lsrs	r3, r3, #6
 8008716:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008726:	fb02 f303 	mul.w	r3, r2, r3
 800872a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	3308      	adds	r3, #8
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	4613      	mov	r3, r2
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	4413      	add	r3, r2
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800874e:	0b9b      	lsrs	r3, r3, #14
 8008750:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008756:	4413      	add	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800875a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	4413      	add	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008768:	fbb2 f3f3 	udiv	r3, r2, r3
 800876c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	039b      	lsls	r3, r3, #14
 8008772:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	4413      	add	r3, r2
 800877c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008798:	4a24      	ldr	r2, [pc, #144]	; (800882c <VL53L0X_calc_dmax+0x23c>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	099b      	lsrs	r3, r3, #6
 80087a0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80087ae:	4a1f      	ldr	r2, [pc, #124]	; (800882c <VL53L0X_calc_dmax+0x23c>)
 80087b0:	fba2 2303 	umull	r2, r3, r2, r3
 80087b4:	099b      	lsrs	r3, r3, #6
 80087b6:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80087b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ba:	3380      	adds	r3, #128	; 0x80
 80087bc:	0a1b      	lsrs	r3, r3, #8
 80087be:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d008      	beq.n	80087d8 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	085a      	lsrs	r2, r3, #1
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	441a      	add	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80087d6:	e001      	b.n	80087dc <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80087dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80087de:	f7fe f9b4 	bl	8006b4a <VL53L0X_isqrt>
 80087e2:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	085a      	lsrs	r2, r3, #1
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	441a      	add	r2, r3
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087fa:	e001      	b.n	8008800 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008800:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008802:	f7fe f9a2 	bl	8006b4a <VL53L0X_isqrt>
 8008806:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008812:	429a      	cmp	r2, r3
 8008814:	d902      	bls.n	800881c <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8008816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800881a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800881c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008820:	4618      	mov	r0, r3
 8008822:	3768      	adds	r7, #104	; 0x68
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	fff00000 	.word	0xfff00000
 800882c:	10624dd3 	.word	0x10624dd3

08008830 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b0b2      	sub	sp, #200	; 0xc8
 8008834:	af04      	add	r7, sp, #16
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800883e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008846:	f44f 7316 	mov.w	r3, #600	; 0x258
 800884a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800884e:	2342      	movs	r3, #66	; 0x42
 8008850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008854:	f241 235c 	movw	r3, #4700	; 0x125c
 8008858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800885c:	4b6b      	ldr	r3, [pc, #428]	; (8008a0c <VL53L0X_calc_sigma_estimate+0x1dc>)
 800885e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008862:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800886a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800886e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008872:	fbb2 f3f3 	udiv	r3, r2, r3
 8008876:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008878:	4b65      	ldr	r3, [pc, #404]	; (8008a10 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800887a:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800887c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008880:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008882:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008886:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8008888:	f240 6377 	movw	r3, #1655	; 0x677
 800888c:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
 8008890:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088a2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80088a6:	0c1b      	lsrs	r3, r3, #16
 80088a8:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80088b0:	f107 0310 	add.w	r3, r7, #16
 80088b4:	461a      	mov	r2, r3
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fe74 	bl	80085a6 <VL53L0X_get_total_signal_rate>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80088c4:	f107 0314 	add.w	r3, r7, #20
 80088c8:	461a      	mov	r2, r3
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f7ff fe3b 	bl	8008548 <VL53L0X_get_total_xtalk_rate>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80088e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80088ea:	0c1b      	lsrs	r3, r3, #16
 80088ec:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80088fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008902:	429a      	cmp	r2, r3
 8008904:	d902      	bls.n	800890c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800890c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d164      	bne.n	80089de <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800891a:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008922:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008926:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800892a:	461a      	mov	r2, r3
 800892c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7fe feac 	bl	800768c <VL53L0X_calc_timeout_mclks>
 8008934:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800893c:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008944:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008948:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800894c:	461a      	mov	r2, r3
 800894e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7fe fe9b 	bl	800768c <VL53L0X_calc_timeout_mclks>
 8008956:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008958:	2303      	movs	r3, #3
 800895a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800895e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008962:	2b08      	cmp	r3, #8
 8008964:	d102      	bne.n	800896c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8008966:	2302      	movs	r3, #2
 8008968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800896c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800896e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008970:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008972:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008976:	fb02 f303 	mul.w	r3, r2, r3
 800897a:	02db      	lsls	r3, r3, #11
 800897c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008984:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008988:	4a22      	ldr	r2, [pc, #136]	; (8008a14 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	099b      	lsrs	r3, r3, #6
 8008990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8008994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800899a:	fb02 f303 	mul.w	r3, r2, r3
 800899e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80089a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80089aa:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <VL53L0X_calc_sigma_estimate+0x1e4>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	099b      	lsrs	r3, r3, #6
 80089b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	3380      	adds	r3, #128	; 0x80
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80089cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089d0:	3380      	adds	r3, #128	; 0x80
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80089de:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 80089e6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80089ea:	e12e      	b.n	8008c4a <VL53L0X_calc_sigma_estimate+0x41a>
	}

	if (peakSignalRate_kcps == 0) {
 80089ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d112      	bne.n	8008a18 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80089f8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a00:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e11c      	b.n	8008c46 <VL53L0X_calc_sigma_estimate+0x416>
 8008a0c:	028f87ae 	.word	0x028f87ae
 8008a10:	0006999a 	.word	0x0006999a
 8008a14:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8008a18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a2a:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a2e:	041a      	lsls	r2, r3, #16
 8008a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d902      	bls.n	8008a4a <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008a4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a4e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008a52:	fb02 f303 	mul.w	r3, r2, r3
 8008a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f86f 	bl	8006b4a <VL53L0X_isqrt>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	891b      	ldrh	r3, [r3, #8]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a7a:	fb02 f303 	mul.w	r3, r2, r3
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a82:	041a      	lsls	r2, r3, #16
 8008a84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a88:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8008a8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a8e:	4a71      	ldr	r2, [pc, #452]	; (8008c54 <VL53L0X_calc_sigma_estimate+0x424>)
 8008a90:	fba2 2303 	umull	r2, r3, r2, r3
 8008a94:	099b      	lsrs	r3, r3, #6
 8008a96:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8008a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a9a:	041a      	lsls	r2, r3, #16
 8008a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aa0:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8008aa2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8008aa6:	4a6b      	ldr	r2, [pc, #428]	; (8008c54 <VL53L0X_calc_sigma_estimate+0x424>)
 8008aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aac:	099b      	lsrs	r3, r3, #6
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	021b      	lsls	r3, r3, #8
 8008ab4:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfb8      	it	lt
 8008ac2:	425b      	neglt	r3, r3
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	fb02 f303 	mul.w	r3, r2, r3
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aea:	4413      	add	r3, r2
 8008aec:	0c1b      	lsrs	r3, r3, #16
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8008afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	0b9b      	lsrs	r3, r3, #14
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 8008b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008b38:	0c1b      	lsrs	r3, r3, #16
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b40:	fb02 f303 	mul.w	r3, r2, r3
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	4413      	add	r3, r2
 8008b4c:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008b4e:	6a38      	ldr	r0, [r7, #32]
 8008b50:	f7fd fffb 	bl	8006b4a <VL53L0X_isqrt>
 8008b54:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	041b      	lsls	r3, r3, #16
 8008b5a:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	3332      	adds	r3, #50	; 0x32
 8008b60:	4a3d      	ldr	r2, [pc, #244]	; (8008c58 <VL53L0X_calc_sigma_estimate+0x428>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	095a      	lsrs	r2, r3, #5
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b76:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
 8008b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b86:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8008b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b94:	4a31      	ldr	r2, [pc, #196]	; (8008c5c <VL53L0X_calc_sigma_estimate+0x42c>)
 8008b96:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9a:	0b5b      	lsrs	r3, r3, #13
 8008b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d903      	bls.n	8008bb4 <VL53L0X_calc_sigma_estimate+0x384>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8008bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bc6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008bca:	fb02 f303 	mul.w	r3, r2, r3
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fd ffb7 	bl	8006b4a <VL53L0X_isqrt>
 8008bdc:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <VL53L0X_calc_sigma_estimate+0x3d6>
 8008bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <VL53L0X_calc_sigma_estimate+0x3d6>
 8008bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d903      	bls.n	8008c0e <VL53L0X_calc_sigma_estimate+0x3de>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c14:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8008c20:	6939      	ldr	r1, [r7, #16]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	9303      	str	r3, [sp, #12]
 8008c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff fcd8 	bl	80085f0 <VL53L0X_calc_dmax>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c46:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	37b8      	adds	r7, #184	; 0xb8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	10624dd3 	.word	0x10624dd3
 8008c58:	51eb851f 	.word	0x51eb851f
 8008c5c:	d1b71759 	.word	0xd1b71759

08008c60 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b090      	sub	sp, #64	; 0x40
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	607a      	str	r2, [r7, #4]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	72fb      	strb	r3, [r7, #11]
 8008c70:	4613      	mov	r3, r2
 8008c72:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
 8008cb4:	10db      	asrs	r3, r3, #3
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008cc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <VL53L0X_get_pal_range_status+0x98>
 8008cc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d013      	beq.n	8008cf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008cd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cd4:	2b07      	cmp	r3, #7
 8008cd6:	d00f      	beq.n	8008cf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008cd8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d00b      	beq.n	8008cf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008ce0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ce4:	2b0d      	cmp	r3, #13
 8008ce6:	d007      	beq.n	8008cf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008ce8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cec:	2b0e      	cmp	r3, #14
 8008cee:	d003      	beq.n	8008cf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008cf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cf4:	2b0f      	cmp	r3, #15
 8008cf6:	d103      	bne.n	8008d00 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008cfe:	e002      	b.n	8008d06 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8008d06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d107      	bne.n	8008d1e <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d0e:	2201      	movs	r2, #1
 8008d10:	21ff      	movs	r1, #255	; 0xff
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fb74 	bl	8009400 <VL53L0X_WrByte>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8008d1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8008d26:	f107 0316 	add.w	r3, r7, #22
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	21b6      	movs	r1, #182	; 0xb6
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 faf2 	bl	8009318 <VL53L0X_RdWord>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008d3a:	8afb      	ldrh	r3, [r7, #22]
 8008d3c:	025b      	lsls	r3, r3, #9
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8008d40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d107      	bne.n	8008d58 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	21ff      	movs	r1, #255	; 0xff
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fb57 	bl	8009400 <VL53L0X_WrByte>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008d60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008d68:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	2100      	movs	r1, #0
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7fc fa25 	bl	80051c0 <VL53L0X_GetLimitCheckEnable>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d02e      	beq.n	8008de2 <VL53L0X_get_pal_range_status+0x182>
 8008d84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d12a      	bne.n	8008de2 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008d8c:	f107 0310 	add.w	r3, r7, #16
 8008d90:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008d94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f7ff fd4a 	bl	8008830 <VL53L0X_calc_sigma_estimate>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008da2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db0:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008db2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d113      	bne.n	8008de2 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008dba:	f107 0320 	add.w	r3, r7, #32
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7fc fa82 	bl	80052cc <VL53L0X_GetLimitCheckValue>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d006      	beq.n	8008de2 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8008dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d902      	bls.n	8008de2 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008de2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008dea:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008dee:	461a      	mov	r2, r3
 8008df0:	2102      	movs	r1, #2
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7fc f9e4 	bl	80051c0 <VL53L0X_GetLimitCheckEnable>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008dfe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d017      	beq.n	8008e36 <VL53L0X_get_pal_range_status+0x1d6>
 8008e06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d113      	bne.n	8008e36 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008e0e:	f107 031c 	add.w	r3, r7, #28
 8008e12:	461a      	mov	r2, r3
 8008e14:	2102      	movs	r1, #2
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7fc fa58 	bl	80052cc <VL53L0X_GetLimitCheckValue>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008e28:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d902      	bls.n	8008e36 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008e30:	2301      	movs	r3, #1
 8008e32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e42:	461a      	mov	r2, r3
 8008e44:	2103      	movs	r1, #3
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7fc f9ba 	bl	80051c0 <VL53L0X_GetLimitCheckEnable>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008e52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d023      	beq.n	8008ea2 <VL53L0X_get_pal_range_status+0x242>
 8008e5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d11f      	bne.n	8008ea2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008e62:	893b      	ldrh	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6c:	e005      	b.n	8008e7a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	021a      	lsls	r2, r3, #8
 8008e72:	893b      	ldrh	r3, [r7, #8]
 8008e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008e7a:	f107 0318 	add.w	r3, r7, #24
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2103      	movs	r1, #3
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7fc fa22 	bl	80052cc <VL53L0X_GetLimitCheckValue>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008e94:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d202      	bcs.n	8008ea2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ea2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d14a      	bne.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008eaa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d103      	bne.n	8008eba <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	701a      	strb	r2, [r3, #0]
 8008eb8:	e042      	b.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008eba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d007      	beq.n	8008ed2 <VL53L0X_get_pal_range_status+0x272>
 8008ec2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d003      	beq.n	8008ed2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008eca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d103      	bne.n	8008eda <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e032      	b.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008eda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d003      	beq.n	8008eea <VL53L0X_get_pal_range_status+0x28a>
 8008ee2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d103      	bne.n	8008ef2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eec:	2204      	movs	r2, #4
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	e026      	b.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008ef2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d007      	beq.n	8008f0a <VL53L0X_get_pal_range_status+0x2aa>
 8008efa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008efe:	2b0a      	cmp	r3, #10
 8008f00:	d003      	beq.n	8008f0a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008f02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d103      	bne.n	8008f12 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	e016      	b.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008f12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d003      	beq.n	8008f22 <VL53L0X_get_pal_range_status+0x2c2>
 8008f1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d103      	bne.n	8008f2a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f24:	2202      	movs	r2, #2
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e00a      	b.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008f2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d103      	bne.n	8008f3a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f34:	2201      	movs	r2, #1
 8008f36:	701a      	strb	r2, [r3, #0]
 8008f38:	e002      	b.n	8008f40 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f4e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008f52:	461a      	mov	r2, r3
 8008f54:	2101      	movs	r1, #1
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7fc f932 	bl	80051c0 <VL53L0X_GetLimitCheckEnable>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d14f      	bne.n	800900a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <VL53L0X_get_pal_range_status+0x31a>
 8008f72:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d103      	bne.n	8008f82 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f80:	e002      	b.n	8008f88 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008f8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008f92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d003      	beq.n	8008fa2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008f9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d103      	bne.n	8008faa <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa8:	e002      	b.n	8008fb0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008fb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008fba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <VL53L0X_get_pal_range_status+0x36a>
 8008fc2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d103      	bne.n	8008fd2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd0:	e002      	b.n	8008fd8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <VL53L0X_get_pal_range_status+0x392>
 8008fea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d103      	bne.n	8008ffa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff8:	e002      	b.n	8009000 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009006:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800900a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800900e:	4618      	mov	r0, r3
 8009010:	3740      	adds	r7, #64	; 0x40
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b086      	sub	sp, #24
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8009026:	2102      	movs	r1, #2
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7fd fe03 	bl	8006c34 <VL53L0X_get_info_from_device>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 8009032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d11c      	bne.n	8009074 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8009040:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 8009042:	7dbb      	ldrb	r3, [r7, #22]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d107      	bne.n	8009058 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3340      	adds	r3, #64	; 0x40
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e00d      	b.n	8009074 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	33f3      	adds	r3, #243	; 0xf3
 8009066:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3340      	adds	r3, #64	; 0x40
 800906c:	6939      	ldr	r1, [r7, #16]
 800906e:	4618      	mov	r0, r3
 8009070:	f00a fb0c 	bl	801368c <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800908e:	f107 030d 	add.w	r3, r7, #13
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff ffbd 	bl	8009016 <VL53L0X_check_part_used>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 80090a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d13b      	bne.n	8009120 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 80090a8:	7b7b      	ldrb	r3, [r7, #13]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d108      	bne.n	80090c0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	4a30      	ldr	r2, [pc, #192]	; (8009174 <VL53L0X_get_device_info+0xf4>)
 80090b2:	461c      	mov	r4, r3
 80090b4:	4613      	mov	r3, r2
 80090b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090b8:	6020      	str	r0, [r4, #0]
 80090ba:	6061      	str	r1, [r4, #4]
 80090bc:	60a2      	str	r2, [r4, #8]
 80090be:	e027      	b.n	8009110 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 80090c0:	7b7b      	ldrb	r3, [r7, #13]
 80090c2:	2b22      	cmp	r3, #34	; 0x22
 80090c4:	d80b      	bhi.n	80090de <VL53L0X_get_device_info+0x5e>
 80090c6:	7b7b      	ldrb	r3, [r7, #13]
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d008      	beq.n	80090de <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	4a2a      	ldr	r2, [pc, #168]	; (8009178 <VL53L0X_get_device_info+0xf8>)
 80090d0:	461c      	mov	r4, r3
 80090d2:	4613      	mov	r3, r2
 80090d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090d6:	6020      	str	r0, [r4, #0]
 80090d8:	6061      	str	r1, [r4, #4]
 80090da:	60a2      	str	r2, [r4, #8]
 80090dc:	e018      	b.n	8009110 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 80090de:	7b7b      	ldrb	r3, [r7, #13]
 80090e0:	2b26      	cmp	r3, #38	; 0x26
 80090e2:	d808      	bhi.n	80090f6 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	4a25      	ldr	r2, [pc, #148]	; (800917c <VL53L0X_get_device_info+0xfc>)
 80090e8:	461c      	mov	r4, r3
 80090ea:	4613      	mov	r3, r2
 80090ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090ee:	6020      	str	r0, [r4, #0]
 80090f0:	6061      	str	r1, [r4, #4]
 80090f2:	60a2      	str	r2, [r4, #8]
 80090f4:	e00c      	b.n	8009110 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	4a21      	ldr	r2, [pc, #132]	; (8009180 <VL53L0X_get_device_info+0x100>)
 80090fa:	461d      	mov	r5, r3
 80090fc:	4614      	mov	r4, r2
 80090fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009100:	6028      	str	r0, [r5, #0]
 8009102:	6069      	str	r1, [r5, #4]
 8009104:	60aa      	str	r2, [r5, #8]
 8009106:	60eb      	str	r3, [r5, #12]
 8009108:	6820      	ldr	r0, [r4, #0]
 800910a:	6128      	str	r0, [r5, #16]
 800910c:	7923      	ldrb	r3, [r4, #4]
 800910e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	3320      	adds	r3, #32
 8009114:	491b      	ldr	r1, [pc, #108]	; (8009184 <VL53L0X_get_device_info+0x104>)
 8009116:	461a      	mov	r2, r3
 8009118:	460b      	mov	r3, r1
 800911a:	cb03      	ldmia	r3!, {r0, r1}
 800911c:	6010      	str	r0, [r2, #0]
 800911e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d108      	bne.n	800913a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	3360      	adds	r3, #96	; 0x60
 800912c:	461a      	mov	r2, r3
 800912e:	21c0      	movs	r1, #192	; 0xc0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f86a 	bl	800920a <VL53L0X_RdByte>
 8009136:	4603      	mov	r3, r0
 8009138:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800913a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d112      	bne.n	8009168 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 8009142:	f107 030e 	add.w	r3, r7, #14
 8009146:	461a      	mov	r2, r3
 8009148:	21c2      	movs	r1, #194	; 0xc2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f85d 	bl	800920a <VL53L0X_RdByte>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	091b      	lsrs	r3, r3, #4
 8009160:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 8009168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bdb0      	pop	{r4, r5, r7, pc}
 8009174:	080166c8 	.word	0x080166c8
 8009178:	080166d4 	.word	0x080166d4
 800917c:	080166e0 	.word	0x080166e0
 8009180:	080166ec 	.word	0x080166ec
 8009184:	08016704 	.word	0x08016704

08009188 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af02      	add	r7, sp, #8
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	330a      	adds	r3, #10
 8009198:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80091a6:	b299      	uxth	r1, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	f001 ffa2 	bl	800b0fc <HAL_I2C_Master_Transmit>
 80091b8:	4603      	mov	r3, r0
 80091ba:	613b      	str	r3, [r7, #16]
    
    return status;
 80091bc:	693b      	ldr	r3, [r7, #16]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b088      	sub	sp, #32
 80091ca:	af02      	add	r7, sp, #8
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	330a      	adds	r3, #10
 80091d6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80091e4:	f043 0301 	orr.w	r3, r3, #1
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	b299      	uxth	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	4613      	mov	r3, r2
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	f002 f874 	bl	800b2e4 <HAL_I2C_Master_Receive>
 80091fc:	4603      	mov	r3, r0
 80091fe:	613b      	str	r3, [r7, #16]
    
    return status;
 8009200:	693b      	ldr	r3, [r7, #16]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800920a:	b580      	push	{r7, lr}
 800920c:	b086      	sub	sp, #24
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	460b      	mov	r3, r1
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009218:	2300      	movs	r3, #0
 800921a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800921c:	f107 030b 	add.w	r3, r7, #11
 8009220:	2201      	movs	r2, #1
 8009222:	4619      	mov	r1, r3
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7ff ffaf 	bl	8009188 <_I2CWrite>
 800922a:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009232:	23ec      	movs	r3, #236	; 0xec
 8009234:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009236:	e00c      	b.n	8009252 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8009238:	2201      	movs	r2, #1
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7ff ffc2 	bl	80091c6 <_I2CRead>
 8009242:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800924a:	23ec      	movs	r3, #236	; 0xec
 800924c:	75fb      	strb	r3, [r7, #23]
 800924e:	e000      	b.n	8009252 <VL53L0X_RdByte+0x48>
    }
done:
 8009250:	bf00      	nop
    return Status;
 8009252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	607a      	str	r2, [r7, #4]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	460b      	mov	r3, r1
 800926e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009270:	2300      	movs	r3, #0
 8009272:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b3f      	cmp	r3, #63	; 0x3f
 8009278:	d902      	bls.n	8009280 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800927a:	f06f 0303 	mvn.w	r3, #3
 800927e:	e016      	b.n	80092ae <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 8009280:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <VL53L0X_WriteMulti+0x58>)
 8009282:	7afb      	ldrb	r3, [r7, #11]
 8009284:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	480c      	ldr	r0, [pc, #48]	; (80092bc <VL53L0X_WriteMulti+0x5c>)
 800928c:	f00a f91b 	bl	80134c6 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	461a      	mov	r2, r3
 8009296:	4908      	ldr	r1, [pc, #32]	; (80092b8 <VL53L0X_WriteMulti+0x58>)
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff ff75 	bl	8009188 <_I2CWrite>
 800929e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80092a6:	23ec      	movs	r3, #236	; 0xec
 80092a8:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 80092aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20003f3c 	.word	0x20003f3c
 80092bc:	20003f3d 	.word	0x20003f3d

080092c0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	460b      	mov	r3, r1
 80092ce:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 80092d4:	f107 030b 	add.w	r3, r7, #11
 80092d8:	2201      	movs	r2, #1
 80092da:	4619      	mov	r1, r3
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7ff ff53 	bl	8009188 <_I2CWrite>
 80092e2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80092ea:	23ec      	movs	r3, #236	; 0xec
 80092ec:	75fb      	strb	r3, [r7, #23]
        goto done;
 80092ee:	e00c      	b.n	800930a <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7ff ff66 	bl	80091c6 <_I2CRead>
 80092fa:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009302:	23ec      	movs	r3, #236	; 0xec
 8009304:	75fb      	strb	r3, [r7, #23]
 8009306:	e000      	b.n	800930a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009308:	bf00      	nop
    return Status;
 800930a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
 8009328:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800932a:	f107 030b 	add.w	r3, r7, #11
 800932e:	2201      	movs	r2, #1
 8009330:	4619      	mov	r1, r3
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff ff28 	bl	8009188 <_I2CWrite>
 8009338:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009340:	23ec      	movs	r3, #236	; 0xec
 8009342:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009344:	e017      	b.n	8009376 <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009346:	2202      	movs	r2, #2
 8009348:	490e      	ldr	r1, [pc, #56]	; (8009384 <VL53L0X_RdWord+0x6c>)
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff ff3b 	bl	80091c6 <_I2CRead>
 8009350:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009358:	23ec      	movs	r3, #236	; 0xec
 800935a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800935c:	e00b      	b.n	8009376 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <VL53L0X_RdWord+0x6c>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	021b      	lsls	r3, r3, #8
 8009366:	b29a      	uxth	r2, r3
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <VL53L0X_RdWord+0x6c>)
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	b29b      	uxth	r3, r3
 800936e:	4413      	add	r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8009376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20003f3c 	.word	0x20003f3c

08009388 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	460b      	mov	r3, r1
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800939a:	f107 030b 	add.w	r3, r7, #11
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fef0 	bl	8009188 <_I2CWrite>
 80093a8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80093b0:	23ec      	movs	r3, #236	; 0xec
 80093b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80093b4:	e01b      	b.n	80093ee <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80093b6:	2204      	movs	r2, #4
 80093b8:	4910      	ldr	r1, [pc, #64]	; (80093fc <VL53L0X_RdDWord+0x74>)
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7ff ff03 	bl	80091c6 <_I2CRead>
 80093c0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80093c8:	23ec      	movs	r3, #236	; 0xec
 80093ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80093cc:	e00f      	b.n	80093ee <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <VL53L0X_RdDWord+0x74>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	061a      	lsls	r2, r3, #24
 80093d4:	4b09      	ldr	r3, [pc, #36]	; (80093fc <VL53L0X_RdDWord+0x74>)
 80093d6:	785b      	ldrb	r3, [r3, #1]
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	441a      	add	r2, r3
 80093dc:	4b07      	ldr	r3, [pc, #28]	; (80093fc <VL53L0X_RdDWord+0x74>)
 80093de:	789b      	ldrb	r3, [r3, #2]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	4413      	add	r3, r2
 80093e4:	4a05      	ldr	r2, [pc, #20]	; (80093fc <VL53L0X_RdDWord+0x74>)
 80093e6:	78d2      	ldrb	r2, [r2, #3]
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]

done:
    return Status;
 80093ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20003f3c 	.word	0x20003f3c

08009400 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
 800940c:	4613      	mov	r3, r2
 800940e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009414:	4a0b      	ldr	r2, [pc, #44]	; (8009444 <VL53L0X_WrByte+0x44>)
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800941a:	4a0a      	ldr	r2, [pc, #40]	; (8009444 <VL53L0X_WrByte+0x44>)
 800941c:	78bb      	ldrb	r3, [r7, #2]
 800941e:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009420:	2202      	movs	r2, #2
 8009422:	4908      	ldr	r1, [pc, #32]	; (8009444 <VL53L0X_WrByte+0x44>)
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff feaf 	bl	8009188 <_I2CWrite>
 800942a:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009432:	23ec      	movs	r3, #236	; 0xec
 8009434:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8009436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20003f3c 	.word	0x20003f3c

08009448 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
 8009454:	4613      	mov	r3, r2
 8009456:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800945c:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <VL53L0X_WrWord+0x50>)
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009462:	883b      	ldrh	r3, [r7, #0]
 8009464:	0a1b      	lsrs	r3, r3, #8
 8009466:	b29b      	uxth	r3, r3
 8009468:	b2da      	uxtb	r2, r3
 800946a:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <VL53L0X_WrWord+0x50>)
 800946c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800946e:	883b      	ldrh	r3, [r7, #0]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <VL53L0X_WrWord+0x50>)
 8009474:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009476:	2203      	movs	r2, #3
 8009478:	4907      	ldr	r1, [pc, #28]	; (8009498 <VL53L0X_WrWord+0x50>)
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff fe84 	bl	8009188 <_I2CWrite>
 8009480:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009488:	23ec      	movs	r3, #236	; 0xec
 800948a:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800948c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20003f3c 	.word	0x20003f3c

0800949c <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	4608      	mov	r0, r1
 80094a6:	4611      	mov	r1, r2
 80094a8:	461a      	mov	r2, r3
 80094aa:	4603      	mov	r3, r0
 80094ac:	70fb      	strb	r3, [r7, #3]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70bb      	strb	r3, [r7, #2]
 80094b2:	4613      	mov	r3, r2
 80094b4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80094ba:	f107 020e 	add.w	r2, r7, #14
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fea1 	bl	800920a <VL53L0X_RdByte>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 80094cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d110      	bne.n	80094f6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 80094d4:	7bba      	ldrb	r2, [r7, #14]
 80094d6:	78bb      	ldrb	r3, [r7, #2]
 80094d8:	4013      	ands	r3, r2
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	787b      	ldrb	r3, [r7, #1]
 80094de:	4313      	orrs	r3, r2
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80094e4:	7bba      	ldrb	r2, [r7, #14]
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff ff88 	bl	8009400 <VL53L0X_WrByte>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	e000      	b.n	80094f8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80094f6:	bf00      	nop
done:
    return Status;
 80094f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009510:	2002      	movs	r0, #2
 8009512:	f000 ffb5 	bl	800a480 <HAL_Delay>
    return status;
 8009516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8009524:	b084      	sub	sp, #16
 8009526:	b580      	push	{r7, lr}
 8009528:	b088      	sub	sp, #32
 800952a:	af00      	add	r7, sp, #0
 800952c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8009530:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8009534:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009538:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800953a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800953e:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 8009540:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8009544:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 8009546:	230e      	movs	r3, #14
 8009548:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 800954a:	230a      	movs	r3, #10
 800954c:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 800954e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 80ac 	beq.w	80096b0 <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 8009558:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800955c:	f7fb f8ba 	bl	80046d4 <VL53L0X_StaticInit>
 8009560:	4603      	mov	r3, r0
 8009562:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 800956a:	4855      	ldr	r0, [pc, #340]	; (80096c0 <SetupSingleShot+0x19c>)
 800956c:	f00a f832 	bl	80135d4 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 8009570:	f107 020a 	add.w	r2, r7, #10
 8009574:	f107 030b 	add.w	r3, r7, #11
 8009578:	4619      	mov	r1, r3
 800957a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800957e:	f7fb ff99 	bl	80054b4 <VL53L0X_PerformRefCalibration>
 8009582:	4603      	mov	r3, r0
 8009584:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 800958c:	484d      	ldr	r0, [pc, #308]	; (80096c4 <SetupSingleShot+0x1a0>)
 800958e:	f00a f821 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 8009592:	1cfa      	adds	r2, r7, #3
 8009594:	1d3b      	adds	r3, r7, #4
 8009596:	4619      	mov	r1, r3
 8009598:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800959c:	f7fc fbe2 	bl	8005d64 <VL53L0X_PerformRefSpadManagement>
 80095a0:	4603      	mov	r3, r0
 80095a2:	60fb      	str	r3, [r7, #12]
    if( status ){
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 80095aa:	4847      	ldr	r0, [pc, #284]	; (80096c8 <SetupSingleShot+0x1a4>)
 80095ac:	f00a f812 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 80095b0:	2100      	movs	r1, #0
 80095b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80095b6:	f7fb fa9f 	bl	8004af8 <VL53L0X_SetDeviceMode>
 80095ba:	4603      	mov	r3, r0
 80095bc:	60fb      	str	r3, [r7, #12]
    if( status ){
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 80095c4:	4841      	ldr	r0, [pc, #260]	; (80096cc <SetupSingleShot+0x1a8>)
 80095c6:	f00a f805 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 80095ca:	2201      	movs	r2, #1
 80095cc:	2100      	movs	r1, #0
 80095ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80095d2:	f7fb fd69 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 80095d6:	4603      	mov	r3, r0
 80095d8:	60fb      	str	r3, [r7, #12]
    if( status ){
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80095e0:	483b      	ldr	r0, [pc, #236]	; (80096d0 <SetupSingleShot+0x1ac>)
 80095e2:	f009 fff7 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 80095e6:	2201      	movs	r2, #1
 80095e8:	2101      	movs	r1, #1
 80095ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80095ee:	f7fb fd5b 	bl	80050a8 <VL53L0X_SetLimitCheckEnable>
 80095f2:	4603      	mov	r3, r0
 80095f4:	60fb      	str	r3, [r7, #12]
    if( status ){
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80095fc:	4834      	ldr	r0, [pc, #208]	; (80096d0 <SetupSingleShot+0x1ac>)
 80095fe:	f009 ffe9 	bl	80135d4 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 8009602:	f641 1399 	movw	r3, #6553	; 0x1999
 8009606:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 8009608:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800960c:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 800960e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8009612:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 8009614:	2312      	movs	r3, #18
 8009616:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 8009618:	230e      	movs	r3, #14
 800961a:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800961c:	69fa      	ldr	r2, [r7, #28]
 800961e:	2101      	movs	r1, #1
 8009620:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009624:	f7fb fdf0 	bl	8005208 <VL53L0X_SetLimitCheckValue>
 8009628:	4603      	mov	r3, r0
 800962a:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8009632:	4828      	ldr	r0, [pc, #160]	; (80096d4 <SetupSingleShot+0x1b0>)
 8009634:	f009 ffce 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	2100      	movs	r1, #0
 800963c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009640:	f7fb fde2 	bl	8005208 <VL53L0X_SetLimitCheckValue>
 8009644:	4603      	mov	r3, r0
 8009646:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800964e:	4821      	ldr	r0, [pc, #132]	; (80096d4 <SetupSingleShot+0x1b0>)
 8009650:	f009 ffc0 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8009654:	6979      	ldr	r1, [r7, #20]
 8009656:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800965a:	f7fb fac7 	bl	8004bec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800965e:	4603      	mov	r3, r0
 8009660:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8009668:	481b      	ldr	r0, [pc, #108]	; (80096d8 <SetupSingleShot+0x1b4>)
 800966a:	f009 ffb3 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800966e:	7cfb      	ldrb	r3, [r7, #19]
 8009670:	461a      	mov	r2, r3
 8009672:	2100      	movs	r1, #0
 8009674:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009678:	f7fb fade 	bl	8004c38 <VL53L0X_SetVcselPulsePeriod>
 800967c:	4603      	mov	r3, r0
 800967e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8009686:	4815      	ldr	r0, [pc, #84]	; (80096dc <SetupSingleShot+0x1b8>)
 8009688:	f009 ffa4 	bl	80135d4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800968c:	7cbb      	ldrb	r3, [r7, #18]
 800968e:	461a      	mov	r2, r3
 8009690:	2101      	movs	r1, #1
 8009692:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009696:	f7fb facf 	bl	8004c38 <VL53L0X_SetVcselPulsePeriod>
 800969a:	4603      	mov	r3, r0
 800969c:	60fb      	str	r3, [r7, #12]
    if( status ){
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80096a4:	480d      	ldr	r0, [pc, #52]	; (80096dc <SetupSingleShot+0x1b8>)
 80096a6:	f009 ff95 	bl	80135d4 <puts>
    }
    
    Dev.LeakyFirst=1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 80096b0:	bf00      	nop
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096ba:	b004      	add	sp, #16
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	08016b6c 	.word	0x08016b6c
 80096c4:	08016b88 	.word	0x08016b88
 80096c8:	08016bb0 	.word	0x08016bb0
 80096cc:	08016bd8 	.word	0x08016bd8
 80096d0:	08016bf8 	.word	0x08016bf8
 80096d4:	08016c1c 	.word	0x08016c1c
 80096d8:	08016c40 	.word	0x08016c40
 80096dc:	08016c78 	.word	0x08016c78

080096e0 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <WIFI_Init+0x40>)
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <WIFI_Init+0x44>)
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <WIFI_Init+0x48>)
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <WIFI_Init+0x4c>)
 80096f6:	490e      	ldr	r1, [pc, #56]	; (8009730 <WIFI_Init+0x50>)
 80096f8:	480e      	ldr	r0, [pc, #56]	; (8009734 <WIFI_Init+0x54>)
 80096fa:	f7f7 ffb3 	bl	8001664 <ES_WIFI_RegisterBusIO>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d107      	bne.n	8009714 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009704:	480b      	ldr	r0, [pc, #44]	; (8009734 <WIFI_Init+0x54>)
 8009706:	f7f7 ff7f 	bl	8001608 <ES_WIFI_Init>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009714:	79fb      	ldrb	r3, [r7, #7]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	080021bd 	.word	0x080021bd
 8009724:	080022b1 	.word	0x080022b1
 8009728:	0800238d 	.word	0x0800238d
 800972c:	080020a5 	.word	0x080020a5
 8009730:	08001f09 	.word	0x08001f09
 8009734:	20003f7c 	.word	0x20003f7c

08009738 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4613      	mov	r3, r2
 8009744:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	68f9      	ldr	r1, [r7, #12]
 8009750:	4809      	ldr	r0, [pc, #36]	; (8009778 <WIFI_Connect+0x40>)
 8009752:	f7f7 ffbb 	bl	80016cc <ES_WIFI_Connect>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800975c:	4806      	ldr	r0, [pc, #24]	; (8009778 <WIFI_Connect+0x40>)
 800975e:	f7f8 f857 	bl	8001810 <ES_WIFI_GetNetworkSettings>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20003f7c 	.word	0x20003f7c

0800977c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	4806      	ldr	r0, [pc, #24]	; (80097a4 <WIFI_GetMAC_Address+0x28>)
 800978c:	f7f8 f86a 	bl	8001864 <ES_WIFI_GetMACAddress>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20003f7c 	.word	0x20003f7c

080097a8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80097b4:	4809      	ldr	r0, [pc, #36]	; (80097dc <WIFI_GetIP_Address+0x34>)
 80097b6:	f7f7 ffff 	bl	80017b8 <ES_WIFI_IsConnected>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d107      	bne.n	80097d0 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <WIFI_GetIP_Address+0x34>)
 80097c2:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80097c6:	461a      	mov	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20003f7c 	.word	0x20003f7c

080097e0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	460b      	mov	r3, r1
 80097ee:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80097fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097fe:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8009800:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009802:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	2b00      	cmp	r3, #0
 8009808:	bf14      	ite	ne
 800980a:	2301      	movne	r3, #1
 800980c:	2300      	moveq	r3, #0
 800980e:	b2db      	uxtb	r3, r3
 8009810:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	789b      	ldrb	r3, [r3, #2]
 8009822:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	78db      	ldrb	r3, [r3, #3]
 8009828:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800982a:	f107 0310 	add.w	r3, r7, #16
 800982e:	4619      	mov	r1, r3
 8009830:	4807      	ldr	r0, [pc, #28]	; (8009850 <WIFI_OpenClientConnection+0x70>)
 8009832:	f7f8 f847 	bl	80018c4 <ES_WIFI_StartClientConnection>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009846:	4618      	mov	r0, r3
 8009848:	3728      	adds	r7, #40	; 0x28
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20003f7c 	.word	0x20003f7c

08009854 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af02      	add	r7, sp, #8
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]
 8009862:	4613      	mov	r3, r2
 8009864:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800986a:	89ba      	ldrh	r2, [r7, #12]
 800986c:	7bf9      	ldrb	r1, [r7, #15]
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	4613      	mov	r3, r2
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	4806      	ldr	r0, [pc, #24]	; (8009894 <WIFI_SendData+0x40>)
 800987c:	f7f8 f90e 	bl	8001a9c <ES_WIFI_SendData>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20003f7c 	.word	0x20003f7c

08009898 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af02      	add	r7, sp, #8
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607b      	str	r3, [r7, #4]
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	4613      	mov	r3, r2
 80098a8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80098ae:	89ba      	ldrh	r2, [r7, #12]
 80098b0:	7bf9      	ldrb	r1, [r7, #15]
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	4613      	mov	r3, r2
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	4806      	ldr	r0, [pc, #24]	; (80098d8 <WIFI_ReceiveData+0x40>)
 80098c0:	f7f8 f9a8 	bl	8001c14 <ES_WIFI_ReceiveData>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20003f7c 	.word	0x20003f7c

080098dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80098dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80098e0:	f7fa fd92 	bl	8004408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80098e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80098e6:	e003      	b.n	80098f0 <LoopCopyDataInit>

080098e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80098e8:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80098ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80098ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80098ee:	3104      	adds	r1, #4

080098f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80098f0:	480a      	ldr	r0, [pc, #40]	; (800991c <LoopForever+0xa>)
	ldr	r3, =_edata
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <LoopForever+0xe>)
	adds	r2, r0, r1
 80098f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80098f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80098f8:	d3f6      	bcc.n	80098e8 <CopyDataInit>
	ldr	r2, =_sbss
 80098fa:	4a0a      	ldr	r2, [pc, #40]	; (8009924 <LoopForever+0x12>)
	b	LoopFillZerobss
 80098fc:	e002      	b.n	8009904 <LoopFillZerobss>

080098fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80098fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009900:	f842 3b04 	str.w	r3, [r2], #4

08009904 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009904:	4b08      	ldr	r3, [pc, #32]	; (8009928 <LoopForever+0x16>)
	cmp	r2, r3
 8009906:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009908:	d3f9      	bcc.n	80098fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800990a:	f009 fda9 	bl	8013460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800990e:	f7f8 fe31 	bl	8002574 <main>

08009912 <LoopForever>:

LoopForever:
    b LoopForever
 8009912:	e7fe      	b.n	8009912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009914:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8009918:	08016fd0 	.word	0x08016fd0
	ldr	r0, =_sdata
 800991c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009920:	20000668 	.word	0x20000668
	ldr	r2, =_sbss
 8009924:	20000668 	.word	0x20000668
	ldr	r3, = _ebss
 8009928:	20004990 	.word	0x20004990

0800992c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800992c:	e7fe      	b.n	800992c <ADC1_2_IRQHandler>
	...

08009930 <BSP_LED_Init>:
  * @param  Led  LED to be initialized.
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  LEDx_GPIO_CLK_ENABLE(Led);
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <BSP_LED_Init+0x28>
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <BSP_LED_Init+0x58>)
 8009942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009944:	4a10      	ldr	r2, [pc, #64]	; (8009988 <BSP_LED_Init+0x58>)
 8009946:	f043 0302 	orr.w	r3, r3, #2
 800994a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800994c:	4b0e      	ldr	r3, [pc, #56]	; (8009988 <BSP_LED_Init+0x58>)
 800994e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	60bb      	str	r3, [r7, #8]
 8009956:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8009958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800995c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800995e:	2301      	movs	r3, #1
 8009960:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8009962:	2300      	movs	r3, #0
 8009964:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8009966:	2302      	movs	r3, #2
 8009968:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	4a07      	ldr	r2, [pc, #28]	; (800998c <BSP_LED_Init+0x5c>)
 800996e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009972:	f107 020c 	add.w	r2, r7, #12
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f001 f803 	bl	800a984 <HAL_GPIO_Init>
}
 800997e:	bf00      	nop
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40021000 	.word	0x40021000
 800998c:	2000044c 	.word	0x2000044c

08009990 <BSP_LED_On>:
  * @param  Led  LED to be set on
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	4a06      	ldr	r2, [pc, #24]	; (80099b8 <BSP_LED_On+0x28>)
 800999e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099a6:	b291      	uxth	r1, r2
 80099a8:	2201      	movs	r2, #1
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 fa9e 	bl	800aeec <HAL_GPIO_WritePin>
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	2000044c 	.word	0x2000044c

080099bc <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line
  *                                              with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	460a      	mov	r2, r1
 80099c6:	71fb      	strb	r3, [r7, #7]
 80099c8:	4613      	mov	r3, r2
 80099ca:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80099cc:	4b23      	ldr	r3, [pc, #140]	; (8009a5c <BSP_PB_Init+0xa0>)
 80099ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d0:	4a22      	ldr	r2, [pc, #136]	; (8009a5c <BSP_PB_Init+0xa0>)
 80099d2:	f043 0304 	orr.w	r3, r3, #4
 80099d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099d8:	4b20      	ldr	r3, [pc, #128]	; (8009a5c <BSP_PB_Init+0xa0>)
 80099da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80099e4:	79bb      	ldrb	r3, [r7, #6]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d112      	bne.n	8009a10 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80099ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ee:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80099f4:	2301      	movs	r3, #1
 80099f6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80099f8:	2302      	movs	r3, #2
 80099fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	4a18      	ldr	r2, [pc, #96]	; (8009a60 <BSP_PB_Init+0xa4>)
 8009a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a04:	f107 020c 	add.w	r2, r7, #12
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 ffba 	bl	800a984 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 8009a10:	79bb      	ldrb	r3, [r7, #6]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d11e      	bne.n	8009a54 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8009a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a1a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a20:	2303      	movs	r3, #3
 8009a22:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <BSP_PB_Init+0xa8>)
 8009a26:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	4a0d      	ldr	r2, [pc, #52]	; (8009a60 <BSP_PB_Init+0xa4>)
 8009a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a30:	f107 020c 	add.w	r2, r7, #12
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 ffa4 	bl	800a984 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8009a3c:	2328      	movs	r3, #40	; 0x28
 8009a3e:	b25b      	sxtb	r3, r3
 8009a40:	2200      	movs	r2, #0
 8009a42:	210f      	movs	r1, #15
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fe18 	bl	800a67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8009a4a:	2328      	movs	r3, #40	; 0x28
 8009a4c:	b25b      	sxtb	r3, r3
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fe2f 	bl	800a6b2 <HAL_NVIC_EnableIRQ>
  }
}
 8009a54:	bf00      	nop
 8009a56:	3720      	adds	r7, #32
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40021000 	.word	0x40021000
 8009a60:	20000450 	.word	0x20000450
 8009a64:	10110000 	.word	0x10110000

08009a68 <BSP_COM_Init>:
  *                @arg  COM1
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <BSP_COM_Init+0x2a>
 8009a7a:	4b2d      	ldr	r3, [pc, #180]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	4a2c      	ldr	r2, [pc, #176]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009a80:	f043 0302 	orr.w	r3, r3, #2
 8009a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a86:	4b2a      	ldr	r3, [pc, #168]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	613b      	str	r3, [r7, #16]
 8009a90:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <BSP_COM_Init+0x48>
 8009a98:	4b25      	ldr	r3, [pc, #148]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9c:	4a24      	ldr	r2, [pc, #144]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009a9e:	f043 0302 	orr.w	r3, r3, #2
 8009aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009aa4:	4b22      	ldr	r3, [pc, #136]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <BSP_COM_Init+0x66>
 8009ab6:	4b1e      	ldr	r3, [pc, #120]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aba:	4a1d      	ldr	r2, [pc, #116]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8009ac2:	4b1b      	ldr	r3, [pc, #108]	; (8009b30 <BSP_COM_Init+0xc8>)
 8009ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aca:	60bb      	str	r3, [r7, #8]
 8009acc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8009ace:	2340      	movs	r3, #64	; 0x40
 8009ad0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8009ade:	2307      	movs	r3, #7
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	4a13      	ldr	r2, [pc, #76]	; (8009b34 <BSP_COM_Init+0xcc>)
 8009ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aea:	f107 0214 	add.w	r2, r7, #20
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 ff47 	bl	800a984 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8009af6:	2380      	movs	r3, #128	; 0x80
 8009af8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8009afa:	2302      	movs	r3, #2
 8009afc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8009afe:	2307      	movs	r3, #7
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	4a0c      	ldr	r2, [pc, #48]	; (8009b38 <BSP_COM_Init+0xd0>)
 8009b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0a:	f107 0214 	add.w	r2, r7, #20
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 ff37 	bl	800a984 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	4a08      	ldr	r2, [pc, #32]	; (8009b3c <BSP_COM_Init+0xd4>)
 8009b1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8009b22:	6838      	ldr	r0, [r7, #0]
 8009b24:	f005 fa7d 	bl	800f022 <HAL_UART_Init>
}
 8009b28:	bf00      	nop
 8009b2a:	3728      	adds	r7, #40	; 0x28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40021000 	.word	0x40021000
 8009b34:	20000458 	.word	0x20000458
 8009b38:	2000045c 	.word	0x2000045c
 8009b3c:	20000454 	.word	0x20000454

08009b40 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009b48:	4b27      	ldr	r3, [pc, #156]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4c:	4a26      	ldr	r2, [pc, #152]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009b4e:	f043 0302 	orr.w	r3, r3, #2
 8009b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b54:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009b60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009b64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009b66:	2312      	movs	r3, #18
 8009b68:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009b72:	2304      	movs	r3, #4
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009b76:	f107 0314 	add.w	r3, r7, #20
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	481b      	ldr	r0, [pc, #108]	; (8009bec <I2Cx_MspInit+0xac>)
 8009b7e:	f000 ff01 	bl	800a984 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009b82:	f107 0314 	add.w	r3, r7, #20
 8009b86:	4619      	mov	r1, r3
 8009b88:	4818      	ldr	r0, [pc, #96]	; (8009bec <I2Cx_MspInit+0xac>)
 8009b8a:	f000 fefb 	bl	800a984 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009b8e:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b98:	6593      	str	r3, [r2, #88]	; 0x58
 8009b9a:	4b13      	ldr	r3, [pc, #76]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8009ba6:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	4a0f      	ldr	r2, [pc, #60]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009bb0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	4a0c      	ldr	r2, [pc, #48]	; (8009be8 <I2Cx_MspInit+0xa8>)
 8009bb8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009bbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	210f      	movs	r1, #15
 8009bc2:	2021      	movs	r0, #33	; 0x21
 8009bc4:	f000 fd59 	bl	800a67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009bc8:	2021      	movs	r0, #33	; 0x21
 8009bca:	f000 fd72 	bl	800a6b2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009bce:	2200      	movs	r2, #0
 8009bd0:	210f      	movs	r1, #15
 8009bd2:	2022      	movs	r0, #34	; 0x22
 8009bd4:	f000 fd51 	bl	800a67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009bd8:	2022      	movs	r0, #34	; 0x22
 8009bda:	f000 fd6a 	bl	800a6b2 <HAL_NVIC_EnableIRQ>
}
 8009bde:	bf00      	nop
 8009be0:	3728      	adds	r7, #40	; 0x28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	40021000 	.word	0x40021000
 8009bec:	48000400 	.word	0x48000400

08009bf0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a12      	ldr	r2, [pc, #72]	; (8009c44 <I2Cx_Init+0x54>)
 8009bfc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a11      	ldr	r2, [pc, #68]	; (8009c48 <I2Cx_Init+0x58>)
 8009c02:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff ff89 	bl	8009b40 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 f9a6 	bl	800af80 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8009c34:	2100      	movs	r1, #0
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f002 f900 	bl	800be3c <HAL_I2CEx_ConfigAnalogFilter>
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40005800 	.word	0x40005800
 8009c48:	00702681 	.word	0x00702681

08009c4c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08a      	sub	sp, #40	; 0x28
 8009c50:	af04      	add	r7, sp, #16
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	4608      	mov	r0, r1
 8009c56:	4611      	mov	r1, r2
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	72fb      	strb	r3, [r7, #11]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	813b      	strh	r3, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	b299      	uxth	r1, r3
 8009c6e:	88f8      	ldrh	r0, [r7, #6]
 8009c70:	893a      	ldrh	r2, [r7, #8]
 8009c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	4603      	mov	r3, r0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f001 fd38 	bl	800b6f8 <HAL_I2C_Mem_Read>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8009c92:	7afb      	ldrb	r3, [r7, #11]
 8009c94:	4619      	mov	r1, r3
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f832 	bl	8009d00 <I2Cx_Error>
  }
  return status;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b08a      	sub	sp, #40	; 0x28
 8009caa:	af04      	add	r7, sp, #16
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	72fb      	strb	r3, [r7, #11]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	813b      	strh	r3, [r7, #8]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	b299      	uxth	r1, r3
 8009cc8:	88f8      	ldrh	r0, [r7, #6]
 8009cca:	893a      	ldrh	r2, [r7, #8]
 8009ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cd0:	9302      	str	r3, [sp, #8]
 8009cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4603      	mov	r3, r0
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f001 fbf7 	bl	800b4d0 <HAL_I2C_Mem_Write>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d004      	beq.n	8009cf6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009cec:	7afb      	ldrb	r3, [r7, #11]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f805 	bl	8009d00 <I2Cx_Error>
  }
  return status;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 f9c6 	bl	800b09e <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ff6c 	bl	8009bf0 <I2Cx_Init>
}
 8009d18:	bf00      	nop
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009d24:	4802      	ldr	r0, [pc, #8]	; (8009d30 <SENSOR_IO_Init+0x10>)
 8009d26:	f7ff ff63 	bl	8009bf0 <I2Cx_Init>
}
 8009d2a:	bf00      	nop
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200048fc 	.word	0x200048fc

08009d34 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af02      	add	r7, sp, #8
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	71fb      	strb	r3, [r7, #7]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	71bb      	strb	r3, [r7, #6]
 8009d42:	4613      	mov	r3, r2
 8009d44:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009d46:	79bb      	ldrb	r3, [r7, #6]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	79f9      	ldrb	r1, [r7, #7]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	1d7b      	adds	r3, r7, #5
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	2301      	movs	r3, #1
 8009d56:	4803      	ldr	r0, [pc, #12]	; (8009d64 <SENSOR_IO_Write+0x30>)
 8009d58:	f7ff ffa5 	bl	8009ca6 <I2Cx_WriteMultiple>
}
 8009d5c:	bf00      	nop
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	200048fc 	.word	0x200048fc

08009d68 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af02      	add	r7, sp, #8
 8009d6e:	4603      	mov	r3, r0
 8009d70:	460a      	mov	r2, r1
 8009d72:	71fb      	strb	r3, [r7, #7]
 8009d74:	4613      	mov	r3, r2
 8009d76:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009d7c:	79bb      	ldrb	r3, [r7, #6]
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	79f9      	ldrb	r1, [r7, #7]
 8009d82:	2301      	movs	r3, #1
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	f107 030f 	add.w	r3, r7, #15
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4804      	ldr	r0, [pc, #16]	; (8009da0 <SENSOR_IO_Read+0x38>)
 8009d90:	f7ff ff5c 	bl	8009c4c <I2Cx_ReadMultiple>

  return read_value;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	200048fc 	.word	0x200048fc

08009da4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af02      	add	r7, sp, #8
 8009daa:	603a      	str	r2, [r7, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	71fb      	strb	r3, [r7, #7]
 8009db2:	460b      	mov	r3, r1
 8009db4:	71bb      	strb	r3, [r7, #6]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009dba:	79bb      	ldrb	r3, [r7, #6]
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	79f9      	ldrb	r1, [r7, #7]
 8009dc0:	88bb      	ldrh	r3, [r7, #4]
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4804      	ldr	r0, [pc, #16]	; (8009ddc <SENSOR_IO_ReadMultiple+0x38>)
 8009dcc:	f7ff ff3e 	bl	8009c4c <I2Cx_ReadMultiple>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	b29b      	uxth	r3, r3
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200048fc 	.word	0x200048fc

08009de0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8009de6:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <BSP_HSENSOR_Init+0x38>)
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	20be      	movs	r0, #190	; 0xbe
 8009dec:	4798      	blx	r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	2bbc      	cmp	r3, #188	; 0xbc
 8009df2:	d002      	beq.n	8009dfa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	e009      	b.n	8009e0e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8009dfa:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <BSP_HSENSOR_Init+0x3c>)
 8009dfc:	4a06      	ldr	r2, [pc, #24]	; (8009e18 <BSP_HSENSOR_Init+0x38>)
 8009dfe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <BSP_HSENSOR_Init+0x3c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	20be      	movs	r0, #190	; 0xbe
 8009e08:	4798      	blx	r3
    ret = HSENSOR_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8009e0e:	687b      	ldr	r3, [r7, #4]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000460 	.word	0x20000460
 8009e1c:	20000894 	.word	0x20000894

08009e20 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8009e24:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <BSP_HSENSOR_ReadHumidity+0x18>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	20be      	movs	r0, #190	; 0xbe
 8009e2c:	4798      	blx	r3
 8009e2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8009e32:	eeb0 0a67 	vmov.f32	s0, s15
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000894 	.word	0x20000894

08009e3c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8009e42:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <BSP_PSENSOR_Init+0x38>)
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	20ba      	movs	r0, #186	; 0xba
 8009e48:	4798      	blx	r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2bb1      	cmp	r3, #177	; 0xb1
 8009e4e:	d002      	beq.n	8009e56 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	607b      	str	r3, [r7, #4]
 8009e54:	e009      	b.n	8009e6a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8009e56:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <BSP_PSENSOR_Init+0x3c>)
 8009e58:	4a06      	ldr	r2, [pc, #24]	; (8009e74 <BSP_PSENSOR_Init+0x38>)
 8009e5a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <BSP_PSENSOR_Init+0x3c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	20ba      	movs	r0, #186	; 0xba
 8009e64:	4798      	blx	r3
    ret = PSENSOR_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8009e6a:	687b      	ldr	r3, [r7, #4]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	2000047c 	.word	0x2000047c
 8009e78:	20000898 	.word	0x20000898

08009e7c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8009e80:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <BSP_PSENSOR_ReadPressure+0x18>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	20ba      	movs	r0, #186	; 0xba
 8009e88:	4798      	blx	r3
 8009e8a:	eef0 7a40 	vmov.f32	s15, s0
}
 8009e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000898 	.word	0x20000898

08009e98 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <BSP_TSENSOR_Init+0x30>)
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <BSP_TSENSOR_Init+0x34>)
 8009ea6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8009ea8:	f7ff ff3a 	bl	8009d20 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <BSP_TSENSOR_Init+0x30>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	20be      	movs	r0, #190	; 0xbe
 8009eb6:	4798      	blx	r3

  ret = TSENSOR_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	2000089c 	.word	0x2000089c
 8009ecc:	2000046c 	.word	0x2000046c

08009ed0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8009ed4:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <BSP_TSENSOR_ReadTemp+0x18>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	20be      	movs	r0, #190	; 0xbe
 8009edc:	4798      	blx	r3
 8009ede:	eef0 7a40 	vmov.f32	s15, s0
}
 8009ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	2000089c 	.word	0x2000089c

08009eec <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009ef6:	88fb      	ldrh	r3, [r7, #6]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2120      	movs	r1, #32
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff ff33 	bl	8009d68 <SENSOR_IO_Read>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	f023 0304 	bic.w	r3, r3, #4
 8009f0c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	f043 0304 	orr.w	r3, r3, #4
 8009f14:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	f023 0303 	bic.w	r3, r3, #3
 8009f1c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	f043 0301 	orr.w	r3, r3, #1
 8009f24:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f2c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	7bfa      	ldrb	r2, [r7, #15]
 8009f34:	2120      	movs	r1, #32
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff fefc 	bl	8009d34 <SENSOR_IO_Write>
}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8009f52:	f7ff fee5 	bl	8009d20 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8009f56:	88fb      	ldrh	r3, [r7, #6]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	210f      	movs	r1, #15
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff ff03 	bl	8009d68 <SENSOR_IO_Read>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	b2d8      	uxtb	r0, r3
 8009f7e:	f107 020c 	add.w	r2, r7, #12
 8009f82:	2302      	movs	r3, #2
 8009f84:	21b0      	movs	r1, #176	; 0xb0
 8009f86:	f7ff ff0d 	bl	8009da4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8009f8a:	7b3b      	ldrb	r3, [r7, #12]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8009f92:	7b7b      	ldrb	r3, [r7, #13]
 8009f94:	085b      	lsrs	r3, r3, #1
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	b2d8      	uxtb	r0, r3
 8009f9e:	f107 020c 	add.w	r2, r7, #12
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	21b6      	movs	r1, #182	; 0xb6
 8009fa6:	f7ff fefd 	bl	8009da4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009faa:	7b7b      	ldrb	r3, [r7, #13]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	b21a      	sxth	r2, r3
 8009fb0:	7b3b      	ldrb	r3, [r7, #12]
 8009fb2:	b21b      	sxth	r3, r3
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	b2d8      	uxtb	r0, r3
 8009fbc:	f107 020c 	add.w	r2, r7, #12
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	21ba      	movs	r1, #186	; 0xba
 8009fc4:	f7ff feee 	bl	8009da4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009fc8:	7b7b      	ldrb	r3, [r7, #13]
 8009fca:	021b      	lsls	r3, r3, #8
 8009fcc:	b21a      	sxth	r2, r3
 8009fce:	7b3b      	ldrb	r3, [r7, #12]
 8009fd0:	b21b      	sxth	r3, r3
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8009fd6:	88fb      	ldrh	r3, [r7, #6]
 8009fd8:	b2d8      	uxtb	r0, r3
 8009fda:	f107 020c 	add.w	r2, r7, #12
 8009fde:	2302      	movs	r3, #2
 8009fe0:	21a8      	movs	r1, #168	; 0xa8
 8009fe2:	f7ff fedf 	bl	8009da4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009fe6:	7b7b      	ldrb	r3, [r7, #13]
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	b21a      	sxth	r2, r3
 8009fec:	7b3b      	ldrb	r3, [r7, #12]
 8009fee:	b21b      	sxth	r3, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8009ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009ff8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a006:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a00a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a018:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a01c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a020:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a032:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a03e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a042:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800a046:	edd7 7a04 	vldr	s15, [r7, #16]
 800a04a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a04e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a052:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800a056:	edd7 7a04 	vldr	s15, [r7, #16]
 800a05a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a0a0 <HTS221_H_ReadHumidity+0x130>
 800a05e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a066:	dd01      	ble.n	800a06c <HTS221_H_ReadHumidity+0xfc>
 800a068:	4b0e      	ldr	r3, [pc, #56]	; (800a0a4 <HTS221_H_ReadHumidity+0x134>)
 800a06a:	e00a      	b.n	800a082 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800a06c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a078:	d502      	bpl.n	800a080 <HTS221_H_ReadHumidity+0x110>
 800a07a:	f04f 0300 	mov.w	r3, #0
 800a07e:	e000      	b.n	800a082 <HTS221_H_ReadHumidity+0x112>
 800a080:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800a082:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800a084:	edd7 7a04 	vldr	s15, [r7, #16]
 800a088:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a08c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a090:	eef0 7a66 	vmov.f32	s15, s13
}
 800a094:	eeb0 0a67 	vmov.f32	s0, s15
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	447a0000 	.word	0x447a0000
 800a0a4:	447a0000 	.word	0x447a0000

0800a0a8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2120      	movs	r1, #32
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff fe54 	bl	8009d68 <SENSOR_IO_Read>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	f023 0304 	bic.w	r3, r3, #4
 800a0ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	f043 0304 	orr.w	r3, r3, #4
 800a0d2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0ea:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	7bfa      	ldrb	r2, [r7, #15]
 800a0f2:	2120      	movs	r1, #32
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff fe1d 	bl	8009d34 <SENSOR_IO_Write>
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b088      	sub	sp, #32
 800a106:	af00      	add	r7, sp, #0
 800a108:	4603      	mov	r3, r0
 800a10a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800a10c:	88fb      	ldrh	r3, [r7, #6]
 800a10e:	b2d8      	uxtb	r0, r3
 800a110:	f107 0208 	add.w	r2, r7, #8
 800a114:	2302      	movs	r3, #2
 800a116:	21b2      	movs	r1, #178	; 0xb2
 800a118:	f7ff fe44 	bl	8009da4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800a11c:	88fb      	ldrh	r3, [r7, #6]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2135      	movs	r1, #53	; 0x35
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff fe20 	bl	8009d68 <SENSOR_IO_Read>
 800a128:	4603      	mov	r3, r0
 800a12a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800a12c:	7ffb      	ldrb	r3, [r7, #31]
 800a12e:	021b      	lsls	r3, r3, #8
 800a130:	b21b      	sxth	r3, r3
 800a132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a136:	b21a      	sxth	r2, r3
 800a138:	7a3b      	ldrb	r3, [r7, #8]
 800a13a:	b21b      	sxth	r3, r3
 800a13c:	4313      	orrs	r3, r2
 800a13e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800a140:	7ffb      	ldrb	r3, [r7, #31]
 800a142:	019b      	lsls	r3, r3, #6
 800a144:	b21b      	sxth	r3, r3
 800a146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14a:	b21a      	sxth	r2, r3
 800a14c:	7a7b      	ldrb	r3, [r7, #9]
 800a14e:	b21b      	sxth	r3, r3
 800a150:	4313      	orrs	r3, r2
 800a152:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800a154:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a158:	10db      	asrs	r3, r3, #3
 800a15a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800a15c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a160:	10db      	asrs	r3, r3, #3
 800a162:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800a164:	88fb      	ldrh	r3, [r7, #6]
 800a166:	b2d8      	uxtb	r0, r3
 800a168:	f107 0208 	add.w	r2, r7, #8
 800a16c:	2304      	movs	r3, #4
 800a16e:	21bc      	movs	r1, #188	; 0xbc
 800a170:	f7ff fe18 	bl	8009da4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800a174:	7a7b      	ldrb	r3, [r7, #9]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	b21a      	sxth	r2, r3
 800a17a:	7a3b      	ldrb	r3, [r7, #8]
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b21a      	sxth	r2, r3
 800a188:	7abb      	ldrb	r3, [r7, #10]
 800a18a:	b21b      	sxth	r3, r3
 800a18c:	4313      	orrs	r3, r2
 800a18e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	b2d8      	uxtb	r0, r3
 800a194:	f107 0208 	add.w	r2, r7, #8
 800a198:	2302      	movs	r3, #2
 800a19a:	21aa      	movs	r1, #170	; 0xaa
 800a19c:	f7ff fe02 	bl	8009da4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800a1a0:	7a7b      	ldrb	r3, [r7, #9]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	b21a      	sxth	r2, r3
 800a1a6:	7a3b      	ldrb	r3, [r7, #8]
 800a1a8:	b21b      	sxth	r3, r3
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800a1ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a1b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	ee07 3a90 	vmov	s15, r3
 800a1bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a1da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1fc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	ee07 3a90 	vmov	s15, r3
}
 800a206:	eeb0 0a67 	vmov.f32	s0, s15
 800a20a:	3720      	adds	r7, #32
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800a21a:	88fb      	ldrh	r3, [r7, #6]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 f87b 	bl	800a318 <LPS22HB_Init>
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	4603      	mov	r3, r0
 800a232:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800a238:	f7ff fd72 	bl	8009d20 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800a23c:	88fb      	ldrh	r3, [r7, #6]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	210f      	movs	r1, #15
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fd90 	bl	8009d68 <SENSOR_IO_Read>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800a266:	2300      	movs	r3, #0
 800a268:	74fb      	strb	r3, [r7, #19]
 800a26a:	e013      	b.n	800a294 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	7cfb      	ldrb	r3, [r7, #19]
 800a272:	3328      	adds	r3, #40	; 0x28
 800a274:	b2db      	uxtb	r3, r3
 800a276:	7cfc      	ldrb	r4, [r7, #19]
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f7ff fd74 	bl	8009d68 <SENSOR_IO_Read>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	f107 0318 	add.w	r3, r7, #24
 800a288:	4423      	add	r3, r4
 800a28a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800a28e:	7cfb      	ldrb	r3, [r7, #19]
 800a290:	3301      	adds	r3, #1
 800a292:	74fb      	strb	r3, [r7, #19]
 800a294:	7cfb      	ldrb	r3, [r7, #19]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d9e8      	bls.n	800a26c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800a29a:	2300      	movs	r3, #0
 800a29c:	74fb      	strb	r3, [r7, #19]
 800a29e:	e010      	b.n	800a2c2 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800a2a0:	7cfb      	ldrb	r3, [r7, #19]
 800a2a2:	f107 0218 	add.w	r2, r7, #24
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	7cfb      	ldrb	r3, [r7, #19]
 800a2b0:	00db      	lsls	r3, r3, #3
 800a2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800a2bc:	7cfb      	ldrb	r3, [r7, #19]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	74fb      	strb	r3, [r7, #19]
 800a2c2:	7cfb      	ldrb	r3, [r7, #19]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d9eb      	bls.n	800a2a0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d8:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2264      	movs	r2, #100	; 0x64
 800a2e2:	fb02 f303 	mul.w	r3, r2, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	da01      	bge.n	800a2ee <LPS22HB_P_ReadPressure+0x96>
 800a2ea:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800a2ee:	131b      	asrs	r3, r3, #12
 800a2f0:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2fc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a314 <LPS22HB_P_ReadPressure+0xbc>
 800a300:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a304:	eef0 7a66 	vmov.f32	s15, s13
}
 800a308:	eeb0 0a67 	vmov.f32	s0, s15
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd90      	pop	{r4, r7, pc}
 800a312:	bf00      	nop
 800a314:	42c80000 	.word	0x42c80000

0800a318 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	211a      	movs	r1, #26
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fd1d 	bl	8009d68 <SENSOR_IO_Read>
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	f023 0301 	bic.w	r3, r3, #1
 800a338:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	f043 0301 	orr.w	r3, r3, #1
 800a340:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800a342:	88fb      	ldrh	r3, [r7, #6]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	7bfa      	ldrb	r2, [r7, #15]
 800a348:	211a      	movs	r1, #26
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fcf2 	bl	8009d34 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2110      	movs	r1, #16
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fd06 	bl	8009d68 <SENSOR_IO_Read>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a366:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a36e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	f023 0302 	bic.w	r3, r3, #2
 800a376:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	f043 0302 	orr.w	r3, r3, #2
 800a37e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	7bfa      	ldrb	r2, [r7, #15]
 800a386:	2110      	movs	r1, #16
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fcd3 	bl	8009d34 <SENSOR_IO_Write>
}  
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a3a0:	2003      	movs	r0, #3
 800a3a2:	f000 f95f 	bl	800a664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f000 f80e 	bl	800a3c8 <HAL_InitTick>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	71fb      	strb	r3, [r7, #7]
 800a3b6:	e001      	b.n	800a3bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a3b8:	f7f9 fcd4 	bl	8003d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <HAL_InitTick+0x6c>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d023      	beq.n	800a424 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a3dc:	4b16      	ldr	r3, [pc, #88]	; (800a438 <HAL_InitTick+0x70>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	4b14      	ldr	r3, [pc, #80]	; (800a434 <HAL_InitTick+0x6c>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 f96b 	bl	800a6ce <HAL_SYSTICK_Config>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10f      	bne.n	800a41e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b0f      	cmp	r3, #15
 800a402:	d809      	bhi.n	800a418 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a404:	2200      	movs	r2, #0
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	f000 f935 	bl	800a67a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a410:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <HAL_InitTick+0x74>)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	e007      	b.n	800a428 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	73fb      	strb	r3, [r7, #15]
 800a41c:	e004      	b.n	800a428 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	73fb      	strb	r3, [r7, #15]
 800a422:	e001      	b.n	800a428 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	2000048c 	.word	0x2000048c
 800a438:	2000018c 	.word	0x2000018c
 800a43c:	20000488 	.word	0x20000488

0800a440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a444:	4b06      	ldr	r3, [pc, #24]	; (800a460 <HAL_IncTick+0x20>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	461a      	mov	r2, r3
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <HAL_IncTick+0x24>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4413      	add	r3, r2
 800a450:	4a04      	ldr	r2, [pc, #16]	; (800a464 <HAL_IncTick+0x24>)
 800a452:	6013      	str	r3, [r2, #0]
}
 800a454:	bf00      	nop
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	2000048c 	.word	0x2000048c
 800a464:	20004948 	.word	0x20004948

0800a468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
  return uwTick;
 800a46c:	4b03      	ldr	r3, [pc, #12]	; (800a47c <HAL_GetTick+0x14>)
 800a46e:	681b      	ldr	r3, [r3, #0]
}
 800a470:	4618      	mov	r0, r3
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	20004948 	.word	0x20004948

0800a480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a488:	f7ff ffee 	bl	800a468 <HAL_GetTick>
 800a48c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d005      	beq.n	800a4a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <HAL_Delay+0x40>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a4a6:	bf00      	nop
 800a4a8:	f7ff ffde 	bl	800a468 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d8f7      	bhi.n	800a4a8 <HAL_Delay+0x28>
  {
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	2000048c 	.word	0x2000048c

0800a4c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <__NVIC_SetPriorityGrouping+0x44>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a4ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4f6:	4a04      	ldr	r2, [pc, #16]	; (800a508 <__NVIC_SetPriorityGrouping+0x44>)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	60d3      	str	r3, [r2, #12]
}
 800a4fc:	bf00      	nop
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	e000ed00 	.word	0xe000ed00

0800a50c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a510:	4b04      	ldr	r3, [pc, #16]	; (800a524 <__NVIC_GetPriorityGrouping+0x18>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	0a1b      	lsrs	r3, r3, #8
 800a516:	f003 0307 	and.w	r3, r3, #7
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	e000ed00 	.word	0xe000ed00

0800a528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a536:	2b00      	cmp	r3, #0
 800a538:	db0b      	blt.n	800a552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	f003 021f 	and.w	r2, r3, #31
 800a540:	4907      	ldr	r1, [pc, #28]	; (800a560 <__NVIC_EnableIRQ+0x38>)
 800a542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a546:	095b      	lsrs	r3, r3, #5
 800a548:	2001      	movs	r0, #1
 800a54a:	fa00 f202 	lsl.w	r2, r0, r2
 800a54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	e000e100 	.word	0xe000e100

0800a564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a574:	2b00      	cmp	r3, #0
 800a576:	db0a      	blt.n	800a58e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	490c      	ldr	r1, [pc, #48]	; (800a5b0 <__NVIC_SetPriority+0x4c>)
 800a57e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a582:	0112      	lsls	r2, r2, #4
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	440b      	add	r3, r1
 800a588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a58c:	e00a      	b.n	800a5a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	b2da      	uxtb	r2, r3
 800a592:	4908      	ldr	r1, [pc, #32]	; (800a5b4 <__NVIC_SetPriority+0x50>)
 800a594:	79fb      	ldrb	r3, [r7, #7]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	3b04      	subs	r3, #4
 800a59c:	0112      	lsls	r2, r2, #4
 800a59e:	b2d2      	uxtb	r2, r2
 800a5a0:	440b      	add	r3, r1
 800a5a2:	761a      	strb	r2, [r3, #24]
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	e000e100 	.word	0xe000e100
 800a5b4:	e000ed00 	.word	0xe000ed00

0800a5b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b089      	sub	sp, #36	; 0x24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	f1c3 0307 	rsb	r3, r3, #7
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	bf28      	it	cs
 800a5d6:	2304      	movcs	r3, #4
 800a5d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	2b06      	cmp	r3, #6
 800a5e0:	d902      	bls.n	800a5e8 <NVIC_EncodePriority+0x30>
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	3b03      	subs	r3, #3
 800a5e6:	e000      	b.n	800a5ea <NVIC_EncodePriority+0x32>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f6:	43da      	mvns	r2, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	401a      	ands	r2, r3
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a600:	f04f 31ff 	mov.w	r1, #4294967295
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	fa01 f303 	lsl.w	r3, r1, r3
 800a60a:	43d9      	mvns	r1, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a610:	4313      	orrs	r3, r2
         );
}
 800a612:	4618      	mov	r0, r3
 800a614:	3724      	adds	r7, #36	; 0x24
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a630:	d301      	bcc.n	800a636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a632:	2301      	movs	r3, #1
 800a634:	e00f      	b.n	800a656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a636:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <SysTick_Config+0x40>)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a63e:	210f      	movs	r1, #15
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	f7ff ff8e 	bl	800a564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <SysTick_Config+0x40>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a64e:	4b04      	ldr	r3, [pc, #16]	; (800a660 <SysTick_Config+0x40>)
 800a650:	2207      	movs	r2, #7
 800a652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	e000e010 	.word	0xe000e010

0800a664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ff29 	bl	800a4c4 <__NVIC_SetPriorityGrouping>
}
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b086      	sub	sp, #24
 800a67e:	af00      	add	r7, sp, #0
 800a680:	4603      	mov	r3, r0
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
 800a686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a68c:	f7ff ff3e 	bl	800a50c <__NVIC_GetPriorityGrouping>
 800a690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	68b9      	ldr	r1, [r7, #8]
 800a696:	6978      	ldr	r0, [r7, #20]
 800a698:	f7ff ff8e 	bl	800a5b8 <NVIC_EncodePriority>
 800a69c:	4602      	mov	r2, r0
 800a69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff ff5d 	bl	800a564 <__NVIC_SetPriority>
}
 800a6aa:	bf00      	nop
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7ff ff31 	bl	800a528 <__NVIC_EnableIRQ>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff ffa2 	bl	800a620 <SysTick_Config>
 800a6dc:	4603      	mov	r3, r0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e0ac      	b.n	800a854 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 f8b2 	bl	800a868 <DFSDM_GetChannelFromInstance>
 800a704:	4602      	mov	r2, r0
 800a706:	4b55      	ldr	r3, [pc, #340]	; (800a85c <HAL_DFSDM_ChannelInit+0x174>)
 800a708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e09f      	b.n	800a854 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7f9 fb49 	bl	8003dac <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800a71a:	4b51      	ldr	r3, [pc, #324]	; (800a860 <HAL_DFSDM_ChannelInit+0x178>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	4a4f      	ldr	r2, [pc, #316]	; (800a860 <HAL_DFSDM_ChannelInit+0x178>)
 800a722:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800a724:	4b4e      	ldr	r3, [pc, #312]	; (800a860 <HAL_DFSDM_ChannelInit+0x178>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d125      	bne.n	800a778 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800a72c:	4b4d      	ldr	r3, [pc, #308]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a4c      	ldr	r2, [pc, #304]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a736:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800a738:	4b4a      	ldr	r3, [pc, #296]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	4948      	ldr	r1, [pc, #288]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a742:	4313      	orrs	r3, r2
 800a744:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800a746:	4b47      	ldr	r3, [pc, #284]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a46      	ldr	r2, [pc, #280]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a74c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800a750:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	791b      	ldrb	r3, [r3, #4]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d108      	bne.n	800a76c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800a75a:	4b42      	ldr	r3, [pc, #264]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	3b01      	subs	r3, #1
 800a764:	041b      	lsls	r3, r3, #16
 800a766:	493f      	ldr	r1, [pc, #252]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800a76c:	4b3d      	ldr	r3, [pc, #244]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a3c      	ldr	r2, [pc, #240]	; (800a864 <HAL_DFSDM_ChannelInit+0x17c>)
 800a772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a776:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800a786:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a796:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800a79c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 020f 	bic.w	r2, r2, #15
 800a7b4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6819      	ldr	r1, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800a7dc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6899      	ldr	r1, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f002 0207 	and.w	r2, r2, #7
 800a808:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6859      	ldr	r1, [r3, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800a81c:	431a      	orrs	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a834:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f000 f810 	bl	800a868 <DFSDM_GetChannelFromInstance>
 800a848:	4601      	mov	r1, r0
 800a84a:	4a04      	ldr	r2, [pc, #16]	; (800a85c <HAL_DFSDM_ChannelInit+0x174>)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	200008a4 	.word	0x200008a4
 800a860:	200008a0 	.word	0x200008a0
 800a864:	40016000 	.word	0x40016000

0800a868 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a1c      	ldr	r2, [pc, #112]	; (800a8e4 <DFSDM_GetChannelFromInstance+0x7c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d102      	bne.n	800a87e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	e02b      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a19      	ldr	r2, [pc, #100]	; (800a8e8 <DFSDM_GetChannelFromInstance+0x80>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d102      	bne.n	800a88c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800a886:	2301      	movs	r3, #1
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e024      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a17      	ldr	r2, [pc, #92]	; (800a8ec <DFSDM_GetChannelFromInstance+0x84>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d102      	bne.n	800a89a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800a894:	2302      	movs	r3, #2
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e01d      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a14      	ldr	r2, [pc, #80]	; (800a8f0 <DFSDM_GetChannelFromInstance+0x88>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d102      	bne.n	800a8a8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800a8a2:	2304      	movs	r3, #4
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	e016      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a12      	ldr	r2, [pc, #72]	; (800a8f4 <DFSDM_GetChannelFromInstance+0x8c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d102      	bne.n	800a8b6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800a8b0:	2305      	movs	r3, #5
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	e00f      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a0f      	ldr	r2, [pc, #60]	; (800a8f8 <DFSDM_GetChannelFromInstance+0x90>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d102      	bne.n	800a8c4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800a8be:	2306      	movs	r3, #6
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	e008      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <DFSDM_GetChannelFromInstance+0x94>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d102      	bne.n	800a8d2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800a8cc:	2307      	movs	r3, #7
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	e001      	b.n	800a8d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	40016000 	.word	0x40016000
 800a8e8:	40016020 	.word	0x40016020
 800a8ec:	40016040 	.word	0x40016040
 800a8f0:	40016080 	.word	0x40016080
 800a8f4:	400160a0 	.word	0x400160a0
 800a8f8:	400160c0 	.word	0x400160c0
 800a8fc:	400160e0 	.word	0x400160e0

0800a900 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b02      	cmp	r3, #2
 800a916:	d005      	beq.n	800a924 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2204      	movs	r2, #4
 800a91c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	73fb      	strb	r3, [r7, #15]
 800a922:	e029      	b.n	800a978 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 020e 	bic.w	r2, r2, #14
 800a932:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f022 0201 	bic.w	r2, r2, #1
 800a942:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a948:	f003 021c 	and.w	r2, r3, #28
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a950:	2101      	movs	r1, #1
 800a952:	fa01 f202 	lsl.w	r2, r1, r2
 800a956:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	4798      	blx	r3
    }
  }
  return status;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a992:	e17f      	b.n	800ac94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	2101      	movs	r1, #1
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8171 	beq.w	800ac8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d00b      	beq.n	800a9cc <HAL_GPIO_Init+0x48>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d007      	beq.n	800a9cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9c0:	2b11      	cmp	r3, #17
 800a9c2:	d003      	beq.n	800a9cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	2b12      	cmp	r3, #18
 800a9ca:	d130      	bne.n	800aa2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	2203      	movs	r2, #3
 800a9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9dc:	43db      	mvns	r3, r3
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aa02:	2201      	movs	r2, #1
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0a:	43db      	mvns	r3, r3
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4013      	ands	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 0201 	and.w	r2, r3, #1
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d118      	bne.n	800aa6c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800aa40:	2201      	movs	r2, #1
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	08db      	lsrs	r3, r3, #3
 800aa56:	f003 0201 	and.w	r2, r3, #1
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	2203      	movs	r2, #3
 800aa78:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7c:	43db      	mvns	r3, r3
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	4013      	ands	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d003      	beq.n	800aaac <HAL_GPIO_Init+0x128>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2b12      	cmp	r3, #18
 800aaaa:	d123      	bne.n	800aaf4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	08da      	lsrs	r2, r3, #3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3208      	adds	r2, #8
 800aab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	220f      	movs	r2, #15
 800aac4:	fa02 f303 	lsl.w	r3, r2, r3
 800aac8:	43db      	mvns	r3, r3
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	4013      	ands	r3, r2
 800aace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	691a      	ldr	r2, [r3, #16]
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	fa02 f303 	lsl.w	r3, r2, r3
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	08da      	lsrs	r2, r3, #3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3208      	adds	r2, #8
 800aaee:	6939      	ldr	r1, [r7, #16]
 800aaf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	2203      	movs	r2, #3
 800ab00:	fa02 f303 	lsl.w	r3, r2, r3
 800ab04:	43db      	mvns	r3, r3
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4013      	ands	r3, r2
 800ab0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f003 0203 	and.w	r2, r3, #3
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	005b      	lsls	r3, r3, #1
 800ab18:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 80ac 	beq.w	800ac8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab36:	4b5e      	ldr	r3, [pc, #376]	; (800acb0 <HAL_GPIO_Init+0x32c>)
 800ab38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab3a:	4a5d      	ldr	r2, [pc, #372]	; (800acb0 <HAL_GPIO_Init+0x32c>)
 800ab3c:	f043 0301 	orr.w	r3, r3, #1
 800ab40:	6613      	str	r3, [r2, #96]	; 0x60
 800ab42:	4b5b      	ldr	r3, [pc, #364]	; (800acb0 <HAL_GPIO_Init+0x32c>)
 800ab44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	60bb      	str	r3, [r7, #8]
 800ab4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ab4e:	4a59      	ldr	r2, [pc, #356]	; (800acb4 <HAL_GPIO_Init+0x330>)
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	089b      	lsrs	r3, r3, #2
 800ab54:	3302      	adds	r3, #2
 800ab56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	220f      	movs	r2, #15
 800ab66:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6a:	43db      	mvns	r3, r3
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ab78:	d025      	beq.n	800abc6 <HAL_GPIO_Init+0x242>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a4e      	ldr	r2, [pc, #312]	; (800acb8 <HAL_GPIO_Init+0x334>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d01f      	beq.n	800abc2 <HAL_GPIO_Init+0x23e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a4d      	ldr	r2, [pc, #308]	; (800acbc <HAL_GPIO_Init+0x338>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d019      	beq.n	800abbe <HAL_GPIO_Init+0x23a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a4c      	ldr	r2, [pc, #304]	; (800acc0 <HAL_GPIO_Init+0x33c>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d013      	beq.n	800abba <HAL_GPIO_Init+0x236>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a4b      	ldr	r2, [pc, #300]	; (800acc4 <HAL_GPIO_Init+0x340>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d00d      	beq.n	800abb6 <HAL_GPIO_Init+0x232>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a4a      	ldr	r2, [pc, #296]	; (800acc8 <HAL_GPIO_Init+0x344>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d007      	beq.n	800abb2 <HAL_GPIO_Init+0x22e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a49      	ldr	r2, [pc, #292]	; (800accc <HAL_GPIO_Init+0x348>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d101      	bne.n	800abae <HAL_GPIO_Init+0x22a>
 800abaa:	2306      	movs	r3, #6
 800abac:	e00c      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abae:	2307      	movs	r3, #7
 800abb0:	e00a      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abb2:	2305      	movs	r3, #5
 800abb4:	e008      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abb6:	2304      	movs	r3, #4
 800abb8:	e006      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abba:	2303      	movs	r3, #3
 800abbc:	e004      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abbe:	2302      	movs	r3, #2
 800abc0:	e002      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <HAL_GPIO_Init+0x244>
 800abc6:	2300      	movs	r3, #0
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	f002 0203 	and.w	r2, r2, #3
 800abce:	0092      	lsls	r2, r2, #2
 800abd0:	4093      	lsls	r3, r2
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800abd8:	4936      	ldr	r1, [pc, #216]	; (800acb4 <HAL_GPIO_Init+0x330>)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	089b      	lsrs	r3, r3, #2
 800abde:	3302      	adds	r3, #2
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800abe6:	4b3a      	ldr	r3, [pc, #232]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	43db      	mvns	r3, r3
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4013      	ands	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ac0a:	4a31      	ldr	r2, [pc, #196]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800ac10:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ac34:	4a26      	ldr	r2, [pc, #152]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ac3a:	4b25      	ldr	r3, [pc, #148]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	43db      	mvns	r3, r3
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4013      	ands	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ac5e:	4a1c      	ldr	r2, [pc, #112]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ac64:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	43db      	mvns	r3, r3
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	4013      	ands	r3, r2
 800ac72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ac88:	4a11      	ldr	r2, [pc, #68]	; (800acd0 <HAL_GPIO_Init+0x34c>)
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	3301      	adds	r3, #1
 800ac92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f47f ae78 	bne.w	800a994 <HAL_GPIO_Init+0x10>
  }
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	40021000 	.word	0x40021000
 800acb4:	40010000 	.word	0x40010000
 800acb8:	48000400 	.word	0x48000400
 800acbc:	48000800 	.word	0x48000800
 800acc0:	48000c00 	.word	0x48000c00
 800acc4:	48001000 	.word	0x48001000
 800acc8:	48001400 	.word	0x48001400
 800accc:	48001800 	.word	0x48001800
 800acd0:	40010400 	.word	0x40010400

0800acd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800acde:	2300      	movs	r3, #0
 800ace0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ace2:	e0cd      	b.n	800ae80 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ace4:	2201      	movs	r2, #1
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4013      	ands	r3, r2
 800acf0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 80c0 	beq.w	800ae7a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800acfa:	4a68      	ldr	r2, [pc, #416]	; (800ae9c <HAL_GPIO_DeInit+0x1c8>)
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	089b      	lsrs	r3, r3, #2
 800ad00:	3302      	adds	r3, #2
 800ad02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad06:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	220f      	movs	r2, #15
 800ad12:	fa02 f303 	lsl.w	r3, r2, r3
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad22:	d025      	beq.n	800ad70 <HAL_GPIO_DeInit+0x9c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a5e      	ldr	r2, [pc, #376]	; (800aea0 <HAL_GPIO_DeInit+0x1cc>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d01f      	beq.n	800ad6c <HAL_GPIO_DeInit+0x98>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a5d      	ldr	r2, [pc, #372]	; (800aea4 <HAL_GPIO_DeInit+0x1d0>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d019      	beq.n	800ad68 <HAL_GPIO_DeInit+0x94>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a5c      	ldr	r2, [pc, #368]	; (800aea8 <HAL_GPIO_DeInit+0x1d4>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d013      	beq.n	800ad64 <HAL_GPIO_DeInit+0x90>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a5b      	ldr	r2, [pc, #364]	; (800aeac <HAL_GPIO_DeInit+0x1d8>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00d      	beq.n	800ad60 <HAL_GPIO_DeInit+0x8c>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a5a      	ldr	r2, [pc, #360]	; (800aeb0 <HAL_GPIO_DeInit+0x1dc>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d007      	beq.n	800ad5c <HAL_GPIO_DeInit+0x88>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a59      	ldr	r2, [pc, #356]	; (800aeb4 <HAL_GPIO_DeInit+0x1e0>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d101      	bne.n	800ad58 <HAL_GPIO_DeInit+0x84>
 800ad54:	2306      	movs	r3, #6
 800ad56:	e00c      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad58:	2307      	movs	r3, #7
 800ad5a:	e00a      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad5c:	2305      	movs	r3, #5
 800ad5e:	e008      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad60:	2304      	movs	r3, #4
 800ad62:	e006      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad64:	2303      	movs	r3, #3
 800ad66:	e004      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e002      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <HAL_GPIO_DeInit+0x9e>
 800ad70:	2300      	movs	r3, #0
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	f002 0203 	and.w	r2, r2, #3
 800ad78:	0092      	lsls	r2, r2, #2
 800ad7a:	4093      	lsls	r3, r2
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d132      	bne.n	800ade8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800ad82:	4b4d      	ldr	r3, [pc, #308]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	43db      	mvns	r3, r3
 800ad8a:	494b      	ldr	r1, [pc, #300]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800ad90:	4b49      	ldr	r3, [pc, #292]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	43db      	mvns	r3, r3
 800ad98:	4947      	ldr	r1, [pc, #284]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ad9e:	4b46      	ldr	r3, [pc, #280]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	43db      	mvns	r3, r3
 800ada6:	4944      	ldr	r1, [pc, #272]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800adac:	4b42      	ldr	r3, [pc, #264]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	43db      	mvns	r3, r3
 800adb4:	4940      	ldr	r1, [pc, #256]	; (800aeb8 <HAL_GPIO_DeInit+0x1e4>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f003 0303 	and.w	r3, r3, #3
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	220f      	movs	r2, #15
 800adc4:	fa02 f303 	lsl.w	r3, r2, r3
 800adc8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800adca:	4a34      	ldr	r2, [pc, #208]	; (800ae9c <HAL_GPIO_DeInit+0x1c8>)
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	089b      	lsrs	r3, r3, #2
 800add0:	3302      	adds	r3, #2
 800add2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	43da      	mvns	r2, r3
 800adda:	4830      	ldr	r0, [pc, #192]	; (800ae9c <HAL_GPIO_DeInit+0x1c8>)
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	089b      	lsrs	r3, r3, #2
 800ade0:	400a      	ands	r2, r1
 800ade2:	3302      	adds	r3, #2
 800ade4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	2103      	movs	r1, #3
 800adf2:	fa01 f303 	lsl.w	r3, r1, r3
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	08da      	lsrs	r2, r3, #3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3208      	adds	r2, #8
 800ae04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	220f      	movs	r2, #15
 800ae12:	fa02 f303 	lsl.w	r3, r2, r3
 800ae16:	43db      	mvns	r3, r3
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	08d2      	lsrs	r2, r2, #3
 800ae1c:	4019      	ands	r1, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3208      	adds	r2, #8
 800ae22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	2103      	movs	r1, #3
 800ae30:	fa01 f303 	lsl.w	r3, r1, r3
 800ae34:	43db      	mvns	r3, r3
 800ae36:	401a      	ands	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	2101      	movs	r1, #1
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	fa01 f303 	lsl.w	r3, r1, r3
 800ae48:	43db      	mvns	r3, r3
 800ae4a:	401a      	ands	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	2103      	movs	r1, #3
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	43db      	mvns	r3, r3
 800ae60:	401a      	ands	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae72:	43db      	mvns	r3, r3
 800ae74:	401a      	ands	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	fa22 f303 	lsr.w	r3, r2, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f47f af2b 	bne.w	800ace4 <HAL_GPIO_DeInit+0x10>
  }
}
 800ae8e:	bf00      	nop
 800ae90:	371c      	adds	r7, #28
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	40010000 	.word	0x40010000
 800aea0:	48000400 	.word	0x48000400
 800aea4:	48000800 	.word	0x48000800
 800aea8:	48000c00 	.word	0x48000c00
 800aeac:	48001000 	.word	0x48001000
 800aeb0:	48001400 	.word	0x48001400
 800aeb4:	48001800 	.word	0x48001800
 800aeb8:	40010400 	.word	0x40010400

0800aebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	887b      	ldrh	r3, [r7, #2]
 800aece:	4013      	ands	r3, r2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aed4:	2301      	movs	r3, #1
 800aed6:	73fb      	strb	r3, [r7, #15]
 800aed8:	e001      	b.n	800aede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
 800aef8:	4613      	mov	r3, r2
 800aefa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aefc:	787b      	ldrb	r3, [r7, #1]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800af02:	887a      	ldrh	r2, [r7, #2]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800af08:	e002      	b.n	800af10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800af0a:	887a      	ldrh	r2, [r7, #2]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af2e:	887a      	ldrh	r2, [r7, #2]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4013      	ands	r3, r2
 800af34:	041a      	lsls	r2, r3, #16
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	43d9      	mvns	r1, r3
 800af3a:	887b      	ldrh	r3, [r7, #2]
 800af3c:	400b      	ands	r3, r1
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	619a      	str	r2, [r3, #24]
}
 800af44:	bf00      	nop
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800af5a:	4b08      	ldr	r3, [pc, #32]	; (800af7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af5c:	695a      	ldr	r2, [r3, #20]
 800af5e:	88fb      	ldrh	r3, [r7, #6]
 800af60:	4013      	ands	r3, r2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d006      	beq.n	800af74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af66:	4a05      	ldr	r2, [pc, #20]	; (800af7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af68:	88fb      	ldrh	r3, [r7, #6]
 800af6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7f8 feca 	bl	8003d08 <HAL_GPIO_EXTI_Callback>
  }
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	40010400 	.word	0x40010400

0800af80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e081      	b.n	800b096 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7f8 ff44 	bl	8003e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2224      	movs	r2, #36	; 0x24
 800afb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0201 	bic.w	r2, r2, #1
 800afc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800afd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afe0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d107      	bne.n	800affa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aff6:	609a      	str	r2, [r3, #8]
 800aff8:	e006      	b.n	800b008 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b006:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d104      	bne.n	800b01a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b018:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6812      	ldr	r2, [r2, #0]
 800b024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b02c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b03c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	ea42 0103 	orr.w	r1, r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	021a      	lsls	r2, r3, #8
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	69d9      	ldr	r1, [r3, #28]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1a      	ldr	r2, [r3, #32]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2220      	movs	r2, #32
 800b082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e021      	b.n	800b0f4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2224      	movs	r2, #36	; 0x24
 800b0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0201 	bic.w	r2, r2, #1
 800b0c6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7f8 fef7 	bl	8003ebc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af02      	add	r7, sp, #8
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	607a      	str	r2, [r7, #4]
 800b106:	461a      	mov	r2, r3
 800b108:	460b      	mov	r3, r1
 800b10a:	817b      	strh	r3, [r7, #10]
 800b10c:	4613      	mov	r3, r2
 800b10e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b20      	cmp	r3, #32
 800b11a:	f040 80da 	bne.w	800b2d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_I2C_Master_Transmit+0x30>
 800b128:	2302      	movs	r3, #2
 800b12a:	e0d3      	b.n	800b2d4 <HAL_I2C_Master_Transmit+0x1d8>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b134:	f7ff f998 	bl	800a468 <HAL_GetTick>
 800b138:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	2319      	movs	r3, #25
 800b140:	2201      	movs	r2, #1
 800b142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fcbc 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e0be      	b.n	800b2d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2221      	movs	r2, #33	; 0x21
 800b15a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2210      	movs	r2, #16
 800b162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	893a      	ldrh	r2, [r7, #8]
 800b176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b182:	b29b      	uxth	r3, r3
 800b184:	2bff      	cmp	r3, #255	; 0xff
 800b186:	d90e      	bls.n	800b1a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	22ff      	movs	r2, #255	; 0xff
 800b18c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b192:	b2da      	uxtb	r2, r3
 800b194:	8979      	ldrh	r1, [r7, #10]
 800b196:	4b51      	ldr	r3, [pc, #324]	; (800b2dc <HAL_I2C_Master_Transmit+0x1e0>)
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 fe1e 	bl	800bde0 <I2C_TransferConfig>
 800b1a4:	e06c      	b.n	800b280 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	8979      	ldrh	r1, [r7, #10]
 800b1b8:	4b48      	ldr	r3, [pc, #288]	; (800b2dc <HAL_I2C_Master_Transmit+0x1e0>)
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fe0d 	bl	800bde0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b1c6:	e05b      	b.n	800b280 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	6a39      	ldr	r1, [r7, #32]
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 fcb9 	bl	800bb44 <I2C_WaitOnTXISFlagUntilTimeout>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e07b      	b.n	800b2d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d034      	beq.n	800b280 <HAL_I2C_Master_Transmit+0x184>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d130      	bne.n	800b280 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	2200      	movs	r2, #0
 800b226:	2180      	movs	r1, #128	; 0x80
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 fc4b 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e04d      	b.n	800b2d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	2bff      	cmp	r3, #255	; 0xff
 800b240:	d90e      	bls.n	800b260 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	22ff      	movs	r2, #255	; 0xff
 800b246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	8979      	ldrh	r1, [r7, #10]
 800b250:	2300      	movs	r3, #0
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 fdc1 	bl	800bde0 <I2C_TransferConfig>
 800b25e:	e00f      	b.n	800b280 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b264:	b29a      	uxth	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	8979      	ldrh	r1, [r7, #10]
 800b272:	2300      	movs	r3, #0
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fdb0 	bl	800bde0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b284:	b29b      	uxth	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d19e      	bne.n	800b1c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	6a39      	ldr	r1, [r7, #32]
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fc98 	bl	800bbc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e01a      	b.n	800b2d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6859      	ldr	r1, [r3, #4]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b0b      	ldr	r3, [pc, #44]	; (800b2e0 <HAL_I2C_Master_Transmit+0x1e4>)
 800b2b2:	400b      	ands	r3, r1
 800b2b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e000      	b.n	800b2d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b2d2:	2302      	movs	r3, #2
  }
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	80002000 	.word	0x80002000
 800b2e0:	fe00e800 	.word	0xfe00e800

0800b2e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	817b      	strh	r3, [r7, #10]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b20      	cmp	r3, #32
 800b302:	f040 80db 	bne.w	800b4bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d101      	bne.n	800b314 <HAL_I2C_Master_Receive+0x30>
 800b310:	2302      	movs	r3, #2
 800b312:	e0d4      	b.n	800b4be <HAL_I2C_Master_Receive+0x1da>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b31c:	f7ff f8a4 	bl	800a468 <HAL_GetTick>
 800b320:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	2319      	movs	r3, #25
 800b328:	2201      	movs	r2, #1
 800b32a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f000 fbc8 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e0bf      	b.n	800b4be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2222      	movs	r2, #34	; 0x22
 800b342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2210      	movs	r2, #16
 800b34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	893a      	ldrh	r2, [r7, #8]
 800b35e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2bff      	cmp	r3, #255	; 0xff
 800b36e:	d90e      	bls.n	800b38e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	22ff      	movs	r2, #255	; 0xff
 800b374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	8979      	ldrh	r1, [r7, #10]
 800b37e:	4b52      	ldr	r3, [pc, #328]	; (800b4c8 <HAL_I2C_Master_Receive+0x1e4>)
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 fd2a 	bl	800bde0 <I2C_TransferConfig>
 800b38c:	e06d      	b.n	800b46a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b392:	b29a      	uxth	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	8979      	ldrh	r1, [r7, #10]
 800b3a0:	4b49      	ldr	r3, [pc, #292]	; (800b4c8 <HAL_I2C_Master_Receive+0x1e4>)
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 fd19 	bl	800bde0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b3ae:	e05c      	b.n	800b46a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	6a39      	ldr	r1, [r7, #32]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f000 fc41 	bl	800bc3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e07c      	b.n	800b4be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d034      	beq.n	800b46a <HAL_I2C_Master_Receive+0x186>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b404:	2b00      	cmp	r3, #0
 800b406:	d130      	bne.n	800b46a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	2200      	movs	r2, #0
 800b410:	2180      	movs	r1, #128	; 0x80
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 fb56 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e04d      	b.n	800b4be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b426:	b29b      	uxth	r3, r3
 800b428:	2bff      	cmp	r3, #255	; 0xff
 800b42a:	d90e      	bls.n	800b44a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	22ff      	movs	r2, #255	; 0xff
 800b430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b436:	b2da      	uxtb	r2, r3
 800b438:	8979      	ldrh	r1, [r7, #10]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 fccc 	bl	800bde0 <I2C_TransferConfig>
 800b448:	e00f      	b.n	800b46a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	8979      	ldrh	r1, [r7, #10]
 800b45c:	2300      	movs	r3, #0
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 fcbb 	bl	800bde0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b46e:	b29b      	uxth	r3, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d19d      	bne.n	800b3b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	6a39      	ldr	r1, [r7, #32]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 fba3 	bl	800bbc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e01a      	b.n	800b4be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2220      	movs	r2, #32
 800b48e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6859      	ldr	r1, [r3, #4]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <HAL_I2C_Master_Receive+0x1e8>)
 800b49c:	400b      	ands	r3, r1
 800b49e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2220      	movs	r2, #32
 800b4a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b4bc:	2302      	movs	r3, #2
  }
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	80002400 	.word	0x80002400
 800b4cc:	fe00e800 	.word	0xfe00e800

0800b4d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af02      	add	r7, sp, #8
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	4608      	mov	r0, r1
 800b4da:	4611      	mov	r1, r2
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	817b      	strh	r3, [r7, #10]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	813b      	strh	r3, [r7, #8]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	f040 80f9 	bne.w	800b6ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <HAL_I2C_Mem_Write+0x34>
 800b4fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b500:	2b00      	cmp	r3, #0
 800b502:	d105      	bne.n	800b510 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b50a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e0ed      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b516:	2b01      	cmp	r3, #1
 800b518:	d101      	bne.n	800b51e <HAL_I2C_Mem_Write+0x4e>
 800b51a:	2302      	movs	r3, #2
 800b51c:	e0e6      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b526:	f7fe ff9f 	bl	800a468 <HAL_GetTick>
 800b52a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	2319      	movs	r3, #25
 800b532:	2201      	movs	r2, #1
 800b534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 fac3 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e0d1      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2221      	movs	r2, #33	; 0x21
 800b54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2240      	movs	r2, #64	; 0x40
 800b554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6a3a      	ldr	r2, [r7, #32]
 800b562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b570:	88f8      	ldrh	r0, [r7, #6]
 800b572:	893a      	ldrh	r2, [r7, #8]
 800b574:	8979      	ldrh	r1, [r7, #10]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	4603      	mov	r3, r0
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f9d3 	bl	800b92c <I2C_RequestMemoryWrite>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e0a9      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2bff      	cmp	r3, #255	; 0xff
 800b5a0:	d90e      	bls.n	800b5c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	22ff      	movs	r2, #255	; 0xff
 800b5a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	8979      	ldrh	r1, [r7, #10]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 fc11 	bl	800bde0 <I2C_TransferConfig>
 800b5be:	e00f      	b.n	800b5e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ce:	b2da      	uxtb	r2, r3
 800b5d0:	8979      	ldrh	r1, [r7, #10]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 fc00 	bl	800bde0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 faad 	bl	800bb44 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e07b      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	781a      	ldrb	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	1c5a      	adds	r2, r3, #1
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b60e:	b29b      	uxth	r3, r3
 800b610:	3b01      	subs	r3, #1
 800b612:	b29a      	uxth	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29a      	uxth	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d034      	beq.n	800b698 <HAL_I2C_Mem_Write+0x1c8>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b632:	2b00      	cmp	r3, #0
 800b634:	d130      	bne.n	800b698 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	2200      	movs	r2, #0
 800b63e:	2180      	movs	r1, #128	; 0x80
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 fa3f 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e04d      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b654:	b29b      	uxth	r3, r3
 800b656:	2bff      	cmp	r3, #255	; 0xff
 800b658:	d90e      	bls.n	800b678 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	22ff      	movs	r2, #255	; 0xff
 800b65e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b664:	b2da      	uxtb	r2, r3
 800b666:	8979      	ldrh	r1, [r7, #10]
 800b668:	2300      	movs	r3, #0
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 fbb5 	bl	800bde0 <I2C_TransferConfig>
 800b676:	e00f      	b.n	800b698 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b686:	b2da      	uxtb	r2, r3
 800b688:	8979      	ldrh	r1, [r7, #10]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 fba4 	bl	800bde0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d19e      	bne.n	800b5e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f000 fa8c 	bl	800bbc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e01a      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2220      	movs	r2, #32
 800b6bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6859      	ldr	r1, [r3, #4]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	4b0a      	ldr	r3, [pc, #40]	; (800b6f4 <HAL_I2C_Mem_Write+0x224>)
 800b6ca:	400b      	ands	r3, r1
 800b6cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e000      	b.n	800b6ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b6ea:	2302      	movs	r3, #2
  }
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	fe00e800 	.word	0xfe00e800

0800b6f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	4608      	mov	r0, r1
 800b702:	4611      	mov	r1, r2
 800b704:	461a      	mov	r2, r3
 800b706:	4603      	mov	r3, r0
 800b708:	817b      	strh	r3, [r7, #10]
 800b70a:	460b      	mov	r3, r1
 800b70c:	813b      	strh	r3, [r7, #8]
 800b70e:	4613      	mov	r3, r2
 800b710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b20      	cmp	r3, #32
 800b71c:	f040 80fd 	bne.w	800b91a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <HAL_I2C_Mem_Read+0x34>
 800b726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d105      	bne.n	800b738 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b732:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e0f1      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d101      	bne.n	800b746 <HAL_I2C_Mem_Read+0x4e>
 800b742:	2302      	movs	r3, #2
 800b744:	e0ea      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b74e:	f7fe fe8b 	bl	800a468 <HAL_GetTick>
 800b752:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2319      	movs	r3, #25
 800b75a:	2201      	movs	r2, #1
 800b75c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 f9af 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e0d5      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2222      	movs	r2, #34	; 0x22
 800b774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2240      	movs	r2, #64	; 0x40
 800b77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a3a      	ldr	r2, [r7, #32]
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b798:	88f8      	ldrh	r0, [r7, #6]
 800b79a:	893a      	ldrh	r2, [r7, #8]
 800b79c:	8979      	ldrh	r1, [r7, #10]
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 f913 	bl	800b9d4 <I2C_RequestMemoryRead>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e0ad      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	2bff      	cmp	r3, #255	; 0xff
 800b7c8:	d90e      	bls.n	800b7e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	22ff      	movs	r2, #255	; 0xff
 800b7ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	8979      	ldrh	r1, [r7, #10]
 800b7d8:	4b52      	ldr	r3, [pc, #328]	; (800b924 <HAL_I2C_Mem_Read+0x22c>)
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 fafd 	bl	800bde0 <I2C_TransferConfig>
 800b7e6:	e00f      	b.n	800b808 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	8979      	ldrh	r1, [r7, #10]
 800b7fa:	4b4a      	ldr	r3, [pc, #296]	; (800b924 <HAL_I2C_Mem_Read+0x22c>)
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 faec 	bl	800bde0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	2200      	movs	r2, #0
 800b810:	2104      	movs	r1, #4
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 f956 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e07c      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83e:	3b01      	subs	r3, #1
 800b840:	b29a      	uxth	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d034      	beq.n	800b8c8 <HAL_I2C_Mem_Read+0x1d0>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	d130      	bne.n	800b8c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	2200      	movs	r2, #0
 800b86e:	2180      	movs	r1, #128	; 0x80
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 f927 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e04d      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b884:	b29b      	uxth	r3, r3
 800b886:	2bff      	cmp	r3, #255	; 0xff
 800b888:	d90e      	bls.n	800b8a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	22ff      	movs	r2, #255	; 0xff
 800b88e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b894:	b2da      	uxtb	r2, r3
 800b896:	8979      	ldrh	r1, [r7, #10]
 800b898:	2300      	movs	r3, #0
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 fa9d 	bl	800bde0 <I2C_TransferConfig>
 800b8a6:	e00f      	b.n	800b8c8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	8979      	ldrh	r1, [r7, #10]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 fa8c 	bl	800bde0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d19a      	bne.n	800b808 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f000 f974 	bl	800bbc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e01a      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2220      	movs	r2, #32
 800b8ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6859      	ldr	r1, [r3, #4]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <HAL_I2C_Mem_Read+0x230>)
 800b8fa:	400b      	ands	r3, r1
 800b8fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2220      	movs	r2, #32
 800b902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	e000      	b.n	800b91c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b91a:	2302      	movs	r3, #2
  }
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	80002400 	.word	0x80002400
 800b928:	fe00e800 	.word	0xfe00e800

0800b92c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af02      	add	r7, sp, #8
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	4608      	mov	r0, r1
 800b936:	4611      	mov	r1, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	4603      	mov	r3, r0
 800b93c:	817b      	strh	r3, [r7, #10]
 800b93e:	460b      	mov	r3, r1
 800b940:	813b      	strh	r3, [r7, #8]
 800b942:	4613      	mov	r3, r2
 800b944:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b946:	88fb      	ldrh	r3, [r7, #6]
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	8979      	ldrh	r1, [r7, #10]
 800b94c:	4b20      	ldr	r3, [pc, #128]	; (800b9d0 <I2C_RequestMemoryWrite+0xa4>)
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 fa43 	bl	800bde0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	69b9      	ldr	r1, [r7, #24]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 f8f0 	bl	800bb44 <I2C_WaitOnTXISFlagUntilTimeout>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e02c      	b.n	800b9c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b96e:	88fb      	ldrh	r3, [r7, #6]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d105      	bne.n	800b980 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b974:	893b      	ldrh	r3, [r7, #8]
 800b976:	b2da      	uxtb	r2, r3
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	629a      	str	r2, [r3, #40]	; 0x28
 800b97e:	e015      	b.n	800b9ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b980:	893b      	ldrh	r3, [r7, #8]
 800b982:	0a1b      	lsrs	r3, r3, #8
 800b984:	b29b      	uxth	r3, r3
 800b986:	b2da      	uxtb	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	69b9      	ldr	r1, [r7, #24]
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f000 f8d6 	bl	800bb44 <I2C_WaitOnTXISFlagUntilTimeout>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e012      	b.n	800b9c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9a2:	893b      	ldrh	r3, [r7, #8]
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2180      	movs	r1, #128	; 0x80
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 f884 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	80002000 	.word	0x80002000

0800b9d4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	4608      	mov	r0, r1
 800b9de:	4611      	mov	r1, r2
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	817b      	strh	r3, [r7, #10]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	813b      	strh	r3, [r7, #8]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b9ee:	88fb      	ldrh	r3, [r7, #6]
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	8979      	ldrh	r1, [r7, #10]
 800b9f4:	4b20      	ldr	r3, [pc, #128]	; (800ba78 <I2C_RequestMemoryRead+0xa4>)
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 f9f0 	bl	800bde0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba00:	69fa      	ldr	r2, [r7, #28]
 800ba02:	69b9      	ldr	r1, [r7, #24]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f89d 	bl	800bb44 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e02c      	b.n	800ba6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba14:	88fb      	ldrh	r3, [r7, #6]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d105      	bne.n	800ba26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba1a:	893b      	ldrh	r3, [r7, #8]
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	629a      	str	r2, [r3, #40]	; 0x28
 800ba24:	e015      	b.n	800ba52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba26:	893b      	ldrh	r3, [r7, #8]
 800ba28:	0a1b      	lsrs	r3, r3, #8
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba34:	69fa      	ldr	r2, [r7, #28]
 800ba36:	69b9      	ldr	r1, [r7, #24]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 f883 	bl	800bb44 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e012      	b.n	800ba6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba48:	893b      	ldrh	r3, [r7, #8]
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2140      	movs	r1, #64	; 0x40
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 f831 	bl	800bac4 <I2C_WaitOnFlagUntilTimeout>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	80002000 	.word	0x80002000

0800ba7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d103      	bne.n	800ba9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2200      	movs	r2, #0
 800ba98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d007      	beq.n	800bab8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	699a      	ldr	r2, [r3, #24]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f042 0201 	orr.w	r2, r2, #1
 800bab6:	619a      	str	r2, [r3, #24]
  }
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	4613      	mov	r3, r2
 800bad2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bad4:	e022      	b.n	800bb1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800badc:	d01e      	beq.n	800bb1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bade:	f7fe fcc3 	bl	800a468 <HAL_GetTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d302      	bcc.n	800baf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d113      	bne.n	800bb1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf8:	f043 0220 	orr.w	r2, r3, #32
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2220      	movs	r2, #32
 800bb04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e00f      	b.n	800bb3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699a      	ldr	r2, [r3, #24]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	4013      	ands	r3, r2
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	bf0c      	ite	eq
 800bb2c:	2301      	moveq	r3, #1
 800bb2e:	2300      	movne	r3, #0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d0cd      	beq.n	800bad6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb50:	e02c      	b.n	800bbac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	68b9      	ldr	r1, [r7, #8]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 f8dc 	bl	800bd14 <I2C_IsAcknowledgeFailed>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e02a      	b.n	800bbbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6c:	d01e      	beq.n	800bbac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6e:	f7fe fc7b 	bl	800a468 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d302      	bcc.n	800bb84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d113      	bne.n	800bbac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb88:	f043 0220 	orr.w	r2, r3, #32
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e007      	b.n	800bbbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d1cb      	bne.n	800bb52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbd0:	e028      	b.n	800bc24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	68b9      	ldr	r1, [r7, #8]
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 f89c 	bl	800bd14 <I2C_IsAcknowledgeFailed>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e026      	b.n	800bc34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbe6:	f7fe fc3f 	bl	800a468 <HAL_GetTick>
 800bbea:	4602      	mov	r2, r0
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d302      	bcc.n	800bbfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d113      	bne.n	800bc24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc00:	f043 0220 	orr.w	r2, r3, #32
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e007      	b.n	800bc34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	d1cf      	bne.n	800bbd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc48:	e055      	b.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	68b9      	ldr	r1, [r7, #8]
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 f860 	bl	800bd14 <I2C_IsAcknowledgeFailed>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e053      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	f003 0320 	and.w	r3, r3, #32
 800bc68:	2b20      	cmp	r3, #32
 800bc6a:	d129      	bne.n	800bcc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d105      	bne.n	800bc86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e03f      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6859      	ldr	r1, [r3, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	4b1d      	ldr	r3, [pc, #116]	; (800bd10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bc9a:	400b      	ands	r3, r1
 800bc9c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2220      	movs	r2, #32
 800bca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e022      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcc0:	f7fe fbd2 	bl	800a468 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d302      	bcc.n	800bcd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10f      	bne.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcda:	f043 0220 	orr.w	r2, r3, #32
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2220      	movs	r2, #32
 800bce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e007      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d1a2      	bne.n	800bc4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	fe00e800 	.word	0xfe00e800

0800bd14 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	f003 0310 	and.w	r3, r3, #16
 800bd2a:	2b10      	cmp	r3, #16
 800bd2c:	d151      	bne.n	800bdd2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd2e:	e022      	b.n	800bd76 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd36:	d01e      	beq.n	800bd76 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd38:	f7fe fb96 	bl	800a468 <HAL_GetTick>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d302      	bcc.n	800bd4e <I2C_IsAcknowledgeFailed+0x3a>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d113      	bne.n	800bd76 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd52:	f043 0220 	orr.w	r2, r3, #32
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2220      	movs	r2, #32
 800bd5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e02e      	b.n	800bdd4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	f003 0320 	and.w	r3, r3, #32
 800bd80:	2b20      	cmp	r3, #32
 800bd82:	d1d5      	bne.n	800bd30 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2210      	movs	r2, #16
 800bd8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2220      	movs	r2, #32
 800bd92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff fe71 	bl	800ba7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6859      	ldr	r1, [r3, #4]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <I2C_IsAcknowledgeFailed+0xc8>)
 800bda6:	400b      	ands	r3, r1
 800bda8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdae:	f043 0204 	orr.w	r2, r3, #4
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e000      	b.n	800bdd4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	fe00e800 	.word	0xfe00e800

0800bde0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	607b      	str	r3, [r7, #4]
 800bdea:	460b      	mov	r3, r1
 800bdec:	817b      	strh	r3, [r7, #10]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	0d5b      	lsrs	r3, r3, #21
 800bdfc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800be00:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <I2C_TransferConfig+0x58>)
 800be02:	430b      	orrs	r3, r1
 800be04:	43db      	mvns	r3, r3
 800be06:	ea02 0103 	and.w	r1, r2, r3
 800be0a:	897b      	ldrh	r3, [r7, #10]
 800be0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be10:	7a7b      	ldrb	r3, [r7, #9]
 800be12:	041b      	lsls	r3, r3, #16
 800be14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be18:	431a      	orrs	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	431a      	orrs	r2, r3
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	431a      	orrs	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	03ff63ff 	.word	0x03ff63ff

0800be3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b20      	cmp	r3, #32
 800be50:	d138      	bne.n	800bec4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d101      	bne.n	800be60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800be5c:	2302      	movs	r3, #2
 800be5e:	e032      	b.n	800bec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2224      	movs	r2, #36	; 0x24
 800be6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f022 0201 	bic.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6819      	ldr	r1, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	430a      	orrs	r2, r1
 800be9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f042 0201 	orr.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2220      	movs	r2, #32
 800beb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	e000      	b.n	800bec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bec4:	2302      	movs	r3, #2
  }
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b085      	sub	sp, #20
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	d139      	bne.n	800bf5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d101      	bne.n	800bef6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bef2:	2302      	movs	r3, #2
 800bef4:	e033      	b.n	800bf5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2224      	movs	r2, #36	; 0x24
 800bf02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f022 0201 	bic.w	r2, r2, #1
 800bf14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bf24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f042 0201 	orr.w	r2, r2, #1
 800bf46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2220      	movs	r2, #32
 800bf4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	e000      	b.n	800bf5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bf5c:	2302      	movs	r3, #2
  }
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bf6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf6c:	b08f      	sub	sp, #60	; 0x3c
 800bf6e:	af0a      	add	r7, sp, #40	; 0x28
 800bf70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e116      	b.n	800c1aa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7f8 f8d0 	bl	800413c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2203      	movs	r2, #3
 800bfa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f003 fd50 	bl	800fa60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	603b      	str	r3, [r7, #0]
 800bfc6:	687e      	ldr	r6, [r7, #4]
 800bfc8:	466d      	mov	r5, sp
 800bfca:	f106 0410 	add.w	r4, r6, #16
 800bfce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bfda:	e885 0003 	stmia.w	r5, {r0, r1}
 800bfde:	1d33      	adds	r3, r6, #4
 800bfe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfe2:	6838      	ldr	r0, [r7, #0]
 800bfe4:	f003 fcea 	bl	800f9bc <USB_CoreInit>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2202      	movs	r2, #2
 800bff2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e0d7      	b.n	800c1aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2100      	movs	r1, #0
 800c000:	4618      	mov	r0, r3
 800c002:	f003 fd3e 	bl	800fa82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c006:	2300      	movs	r3, #0
 800c008:	73fb      	strb	r3, [r7, #15]
 800c00a:	e04a      	b.n	800c0a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c00c:	7bfa      	ldrb	r2, [r7, #15]
 800c00e:	6879      	ldr	r1, [r7, #4]
 800c010:	4613      	mov	r3, r2
 800c012:	00db      	lsls	r3, r3, #3
 800c014:	1a9b      	subs	r3, r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	440b      	add	r3, r1
 800c01a:	333d      	adds	r3, #61	; 0x3d
 800c01c:	2201      	movs	r2, #1
 800c01e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c020:	7bfa      	ldrb	r2, [r7, #15]
 800c022:	6879      	ldr	r1, [r7, #4]
 800c024:	4613      	mov	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	1a9b      	subs	r3, r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	440b      	add	r3, r1
 800c02e:	333c      	adds	r3, #60	; 0x3c
 800c030:	7bfa      	ldrb	r2, [r7, #15]
 800c032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c034:	7bfa      	ldrb	r2, [r7, #15]
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	b298      	uxth	r0, r3
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	4613      	mov	r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	1a9b      	subs	r3, r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	3342      	adds	r3, #66	; 0x42
 800c048:	4602      	mov	r2, r0
 800c04a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c04c:	7bfa      	ldrb	r2, [r7, #15]
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	4613      	mov	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	333f      	adds	r3, #63	; 0x3f
 800c05c:	2200      	movs	r2, #0
 800c05e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c060:	7bfa      	ldrb	r2, [r7, #15]
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	4613      	mov	r3, r2
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	1a9b      	subs	r3, r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	3344      	adds	r3, #68	; 0x44
 800c070:	2200      	movs	r2, #0
 800c072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c074:	7bfa      	ldrb	r2, [r7, #15]
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	4613      	mov	r3, r2
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	1a9b      	subs	r3, r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	3348      	adds	r3, #72	; 0x48
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c088:	7bfa      	ldrb	r2, [r7, #15]
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	4613      	mov	r3, r2
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	3350      	adds	r3, #80	; 0x50
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	73fb      	strb	r3, [r7, #15]
 800c0a2:	7bfa      	ldrb	r2, [r7, #15]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d3af      	bcc.n	800c00c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	73fb      	strb	r3, [r7, #15]
 800c0b0:	e044      	b.n	800c13c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c0b2:	7bfa      	ldrb	r2, [r7, #15]
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	1a9b      	subs	r3, r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	440b      	add	r3, r1
 800c0c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c0c8:	7bfa      	ldrb	r2, [r7, #15]
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	1a9b      	subs	r3, r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	440b      	add	r3, r1
 800c0d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c0da:	7bfa      	ldrb	r2, [r7, #15]
 800c0dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c0de:	7bfa      	ldrb	r2, [r7, #15]
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	1a9b      	subs	r3, r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c0f4:	7bfa      	ldrb	r2, [r7, #15]
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	1a9b      	subs	r3, r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	440b      	add	r3, r1
 800c102:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c106:	2200      	movs	r2, #0
 800c108:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c10a:	7bfa      	ldrb	r2, [r7, #15]
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4613      	mov	r3, r2
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	440b      	add	r3, r1
 800c118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c120:	7bfa      	ldrb	r2, [r7, #15]
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	4613      	mov	r3, r2
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	440b      	add	r3, r1
 800c12e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	3301      	adds	r3, #1
 800c13a:	73fb      	strb	r3, [r7, #15]
 800c13c:	7bfa      	ldrb	r2, [r7, #15]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	429a      	cmp	r2, r3
 800c144:	d3b5      	bcc.n	800c0b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	687e      	ldr	r6, [r7, #4]
 800c14e:	466d      	mov	r5, sp
 800c150:	f106 0410 	add.w	r4, r6, #16
 800c154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c15a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c15c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c160:	e885 0003 	stmia.w	r5, {r0, r1}
 800c164:	1d33      	adds	r3, r6, #4
 800c166:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c168:	6838      	ldr	r0, [r7, #0]
 800c16a:	f003 fcb5 	bl	800fad8 <USB_DevInit>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d005      	beq.n	800c180 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	e014      	b.n	800c1aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	2b01      	cmp	r3, #1
 800c196:	d102      	bne.n	800c19e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f80a 	bl	800c1b2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f003 fe45 	bl	800fe32 <USB_DevDisconnect>

  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c1b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b085      	sub	sp, #20
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1e4:	f043 0303 	orr.w	r3, r3, #3
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
	...

0800c1fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c200:	4b05      	ldr	r3, [pc, #20]	; (800c218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a04      	ldr	r2, [pc, #16]	; (800c218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c20a:	6013      	str	r3, [r2, #0]
}
 800c20c:	bf00      	nop
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	40007000 	.word	0x40007000

0800c21c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c220:	4b04      	ldr	r3, [pc, #16]	; (800c234 <HAL_PWREx_GetVoltageRange+0x18>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800c228:	4618      	mov	r0, r3
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	40007000 	.word	0x40007000

0800c238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c246:	d130      	bne.n	800c2aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c248:	4b23      	ldr	r3, [pc, #140]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c254:	d038      	beq.n	800c2c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c256:	4b20      	ldr	r3, [pc, #128]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c25e:	4a1e      	ldr	r2, [pc, #120]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c264:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c266:	4b1d      	ldr	r3, [pc, #116]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2232      	movs	r2, #50	; 0x32
 800c26c:	fb02 f303 	mul.w	r3, r2, r3
 800c270:	4a1b      	ldr	r2, [pc, #108]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	0c9b      	lsrs	r3, r3, #18
 800c278:	3301      	adds	r3, #1
 800c27a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c27c:	e002      	b.n	800c284 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3b01      	subs	r3, #1
 800c282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c284:	4b14      	ldr	r3, [pc, #80]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c28c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c290:	d102      	bne.n	800c298 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1f2      	bne.n	800c27e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c298:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a4:	d110      	bne.n	800c2c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	e00f      	b.n	800c2ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c2aa:	4b0b      	ldr	r3, [pc, #44]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c2b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2b6:	d007      	beq.n	800c2c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c2b8:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c2c0:	4a05      	ldr	r2, [pc, #20]	; (800c2d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c2c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	40007000 	.word	0x40007000
 800c2dc:	2000018c 	.word	0x2000018c
 800c2e0:	431bde83 	.word	0x431bde83

0800c2e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c2e8:	4b05      	ldr	r3, [pc, #20]	; (800c300 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	4a04      	ldr	r2, [pc, #16]	; (800c300 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c2ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2f2:	6053      	str	r3, [r2, #4]
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	40007000 	.word	0x40007000

0800c304 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af02      	add	r7, sp, #8
 800c30a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c30c:	f7fe f8ac 	bl	800a468 <HAL_GetTick>
 800c310:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e063      	b.n	800c3e4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10b      	bne.n	800c340 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7f7 fde7 	bl	8003f04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c336:	f241 3188 	movw	r1, #5000	; 0x1388
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f858 	bl	800c3f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	3b01      	subs	r3, #1
 800c350:	021a      	lsls	r2, r3, #8
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	430a      	orrs	r2, r1
 800c358:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	2120      	movs	r1, #32
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f850 	bl	800c40c <QSPI_WaitFlagStateUntilTimeout>
 800c36c:	4603      	mov	r3, r0
 800c36e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c370:	7afb      	ldrb	r3, [r7, #11]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d131      	bne.n	800c3da <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c380:	f023 0310 	bic.w	r3, r3, #16
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6852      	ldr	r2, [r2, #4]
 800c388:	0611      	lsls	r1, r2, #24
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	68d2      	ldr	r2, [r2, #12]
 800c38e:	4311      	orrs	r1, r2
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	430b      	orrs	r3, r1
 800c396:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	4b13      	ldr	r3, [pc, #76]	; (800c3ec <HAL_QSPI_Init+0xe8>)
 800c3a0:	4013      	ands	r3, r2
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	6912      	ldr	r2, [r2, #16]
 800c3a6:	0411      	lsls	r1, r2, #16
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	6952      	ldr	r2, [r2, #20]
 800c3ac:	4311      	orrs	r1, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	6992      	ldr	r2, [r2, #24]
 800c3b2:	4311      	orrs	r1, r2
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	6812      	ldr	r2, [r2, #0]
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0201 	orr.w	r2, r2, #1
 800c3ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800c3e2:	7afb      	ldrb	r3, [r7, #11]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	ffe0f8fe 	.word	0xffe0f8fe

0800c3f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	4613      	mov	r3, r2
 800c41a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c41c:	e01a      	b.n	800c454 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c424:	d016      	beq.n	800c454 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c426:	f7fe f81f 	bl	800a468 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	429a      	cmp	r2, r3
 800c434:	d302      	bcc.n	800c43c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10b      	bne.n	800c454 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2204      	movs	r2, #4
 800c440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c448:	f043 0201 	orr.w	r2, r3, #1
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e00e      	b.n	800c472 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	689a      	ldr	r2, [r3, #8]
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	4013      	ands	r3, r2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	bf14      	ite	ne
 800c462:	2301      	movne	r3, #1
 800c464:	2300      	moveq	r3, #0
 800c466:	b2db      	uxtb	r3, r3
 800c468:	461a      	mov	r2, r3
 800c46a:	79fb      	ldrb	r3, [r7, #7]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d1d6      	bne.n	800c41e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e3d4      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c48e:	4ba1      	ldr	r3, [pc, #644]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f003 030c 	and.w	r3, r3, #12
 800c496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c498:	4b9e      	ldr	r3, [pc, #632]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0310 	and.w	r3, r3, #16
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 80e4 	beq.w	800c678 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d007      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x4a>
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	2b0c      	cmp	r3, #12
 800c4ba:	f040 808b 	bne.w	800c5d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	f040 8087 	bne.w	800c5d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c4c6:	4b93      	ldr	r3, [pc, #588]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <HAL_RCC_OscConfig+0x62>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e3ac      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a1a      	ldr	r2, [r3, #32]
 800c4e2:	4b8c      	ldr	r3, [pc, #560]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f003 0308 	and.w	r3, r3, #8
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d004      	beq.n	800c4f8 <HAL_RCC_OscConfig+0x7c>
 800c4ee:	4b89      	ldr	r3, [pc, #548]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4f6:	e005      	b.n	800c504 <HAL_RCC_OscConfig+0x88>
 800c4f8:	4b86      	ldr	r3, [pc, #536]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c4fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4fe:	091b      	lsrs	r3, r3, #4
 800c500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c504:	4293      	cmp	r3, r2
 800c506:	d223      	bcs.n	800c550 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a1b      	ldr	r3, [r3, #32]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fd3f 	bl	800cf90 <RCC_SetFlashLatencyFromMSIRange>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	e38d      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c51c:	4b7d      	ldr	r3, [pc, #500]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a7c      	ldr	r2, [pc, #496]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c522:	f043 0308 	orr.w	r3, r3, #8
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	4b7a      	ldr	r3, [pc, #488]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6a1b      	ldr	r3, [r3, #32]
 800c534:	4977      	ldr	r1, [pc, #476]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c536:	4313      	orrs	r3, r2
 800c538:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c53a:	4b76      	ldr	r3, [pc, #472]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	021b      	lsls	r3, r3, #8
 800c548:	4972      	ldr	r1, [pc, #456]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	604b      	str	r3, [r1, #4]
 800c54e:	e025      	b.n	800c59c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c550:	4b70      	ldr	r3, [pc, #448]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a6f      	ldr	r2, [pc, #444]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c556:	f043 0308 	orr.w	r3, r3, #8
 800c55a:	6013      	str	r3, [r2, #0]
 800c55c:	4b6d      	ldr	r3, [pc, #436]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	496a      	ldr	r1, [pc, #424]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c56e:	4b69      	ldr	r3, [pc, #420]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	4965      	ldr	r1, [pc, #404]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d109      	bne.n	800c59c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fcff 	bl	800cf90 <RCC_SetFlashLatencyFromMSIRange>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e34d      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c59c:	f000 fc36 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	4b5c      	ldr	r3, [pc, #368]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	091b      	lsrs	r3, r3, #4
 800c5a8:	f003 030f 	and.w	r3, r3, #15
 800c5ac:	4a5a      	ldr	r2, [pc, #360]	; (800c718 <HAL_RCC_OscConfig+0x29c>)
 800c5ae:	5cd3      	ldrb	r3, [r2, r3]
 800c5b0:	f003 031f 	and.w	r3, r3, #31
 800c5b4:	fa21 f303 	lsr.w	r3, r1, r3
 800c5b8:	4a58      	ldr	r2, [pc, #352]	; (800c71c <HAL_RCC_OscConfig+0x2a0>)
 800c5ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c5bc:	4b58      	ldr	r3, [pc, #352]	; (800c720 <HAL_RCC_OscConfig+0x2a4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fd ff01 	bl	800a3c8 <HAL_InitTick>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d052      	beq.n	800c676 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
 800c5d2:	e331      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d032      	beq.n	800c642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c5dc:	4b4d      	ldr	r3, [pc, #308]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a4c      	ldr	r2, [pc, #304]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c5e2:	f043 0301 	orr.w	r3, r3, #1
 800c5e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c5e8:	f7fd ff3e 	bl	800a468 <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c5f0:	f7fd ff3a 	bl	800a468 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e31a      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c602:	4b44      	ldr	r3, [pc, #272]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0f0      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c60e:	4b41      	ldr	r3, [pc, #260]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a40      	ldr	r2, [pc, #256]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c614:	f043 0308 	orr.w	r3, r3, #8
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	4b3e      	ldr	r3, [pc, #248]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	493b      	ldr	r1, [pc, #236]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c628:	4313      	orrs	r3, r2
 800c62a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c62c:	4b39      	ldr	r3, [pc, #228]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	4936      	ldr	r1, [pc, #216]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	604b      	str	r3, [r1, #4]
 800c640:	e01a      	b.n	800c678 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c642:	4b34      	ldr	r3, [pc, #208]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a33      	ldr	r2, [pc, #204]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c648:	f023 0301 	bic.w	r3, r3, #1
 800c64c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c64e:	f7fd ff0b 	bl	800a468 <HAL_GetTick>
 800c652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c654:	e008      	b.n	800c668 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c656:	f7fd ff07 	bl	800a468 <HAL_GetTick>
 800c65a:	4602      	mov	r2, r0
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	2b02      	cmp	r3, #2
 800c662:	d901      	bls.n	800c668 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e2e7      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c668:	4b2a      	ldr	r3, [pc, #168]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 0302 	and.w	r3, r3, #2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1f0      	bne.n	800c656 <HAL_RCC_OscConfig+0x1da>
 800c674:	e000      	b.n	800c678 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c676:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b00      	cmp	r3, #0
 800c682:	d074      	beq.n	800c76e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	2b08      	cmp	r3, #8
 800c688:	d005      	beq.n	800c696 <HAL_RCC_OscConfig+0x21a>
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	2b0c      	cmp	r3, #12
 800c68e:	d10e      	bne.n	800c6ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	2b03      	cmp	r3, #3
 800c694:	d10b      	bne.n	800c6ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c696:	4b1f      	ldr	r3, [pc, #124]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d064      	beq.n	800c76c <HAL_RCC_OscConfig+0x2f0>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d160      	bne.n	800c76c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e2c4      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6b6:	d106      	bne.n	800c6c6 <HAL_RCC_OscConfig+0x24a>
 800c6b8:	4b16      	ldr	r3, [pc, #88]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a15      	ldr	r2, [pc, #84]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	e01d      	b.n	800c702 <HAL_RCC_OscConfig+0x286>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6ce:	d10c      	bne.n	800c6ea <HAL_RCC_OscConfig+0x26e>
 800c6d0:	4b10      	ldr	r3, [pc, #64]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a0f      	ldr	r2, [pc, #60]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a0c      	ldr	r2, [pc, #48]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	e00b      	b.n	800c702 <HAL_RCC_OscConfig+0x286>
 800c6ea:	4b0a      	ldr	r3, [pc, #40]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a09      	ldr	r2, [pc, #36]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6f4:	6013      	str	r3, [r2, #0]
 800c6f6:	4b07      	ldr	r3, [pc, #28]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a06      	ldr	r2, [pc, #24]	; (800c714 <HAL_RCC_OscConfig+0x298>)
 800c6fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d01c      	beq.n	800c744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c70a:	f7fd fead 	bl	800a468 <HAL_GetTick>
 800c70e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c710:	e011      	b.n	800c736 <HAL_RCC_OscConfig+0x2ba>
 800c712:	bf00      	nop
 800c714:	40021000 	.word	0x40021000
 800c718:	08016d8c 	.word	0x08016d8c
 800c71c:	2000018c 	.word	0x2000018c
 800c720:	20000488 	.word	0x20000488
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c724:	f7fd fea0 	bl	800a468 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b64      	cmp	r3, #100	; 0x64
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e280      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c736:	4baf      	ldr	r3, [pc, #700]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d0f0      	beq.n	800c724 <HAL_RCC_OscConfig+0x2a8>
 800c742:	e014      	b.n	800c76e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c744:	f7fd fe90 	bl	800a468 <HAL_GetTick>
 800c748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c74a:	e008      	b.n	800c75e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c74c:	f7fd fe8c 	bl	800a468 <HAL_GetTick>
 800c750:	4602      	mov	r2, r0
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	2b64      	cmp	r3, #100	; 0x64
 800c758:	d901      	bls.n	800c75e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e26c      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c75e:	4ba5      	ldr	r3, [pc, #660]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f0      	bne.n	800c74c <HAL_RCC_OscConfig+0x2d0>
 800c76a:	e000      	b.n	800c76e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c76c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 0302 	and.w	r3, r3, #2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d060      	beq.n	800c83c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d005      	beq.n	800c78c <HAL_RCC_OscConfig+0x310>
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	2b0c      	cmp	r3, #12
 800c784:	d119      	bne.n	800c7ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d116      	bne.n	800c7ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c78c:	4b99      	ldr	r3, [pc, #612]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <HAL_RCC_OscConfig+0x328>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e249      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7a4:	4b93      	ldr	r3, [pc, #588]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	061b      	lsls	r3, r3, #24
 800c7b2:	4990      	ldr	r1, [pc, #576]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c7b8:	e040      	b.n	800c83c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d023      	beq.n	800c80a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7c2:	4b8c      	ldr	r3, [pc, #560]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a8b      	ldr	r2, [pc, #556]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c7c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ce:	f7fd fe4b 	bl	800a468 <HAL_GetTick>
 800c7d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7d4:	e008      	b.n	800c7e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7d6:	f7fd fe47 	bl	800a468 <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d901      	bls.n	800c7e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e227      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7e8:	4b82      	ldr	r3, [pc, #520]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0f0      	beq.n	800c7d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7f4:	4b7f      	ldr	r3, [pc, #508]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	061b      	lsls	r3, r3, #24
 800c802:	497c      	ldr	r1, [pc, #496]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c804:	4313      	orrs	r3, r2
 800c806:	604b      	str	r3, [r1, #4]
 800c808:	e018      	b.n	800c83c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c80a:	4b7a      	ldr	r3, [pc, #488]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a79      	ldr	r2, [pc, #484]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c816:	f7fd fe27 	bl	800a468 <HAL_GetTick>
 800c81a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c81c:	e008      	b.n	800c830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c81e:	f7fd fe23 	bl	800a468 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d901      	bls.n	800c830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e203      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c830:	4b70      	ldr	r3, [pc, #448]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1f0      	bne.n	800c81e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0308 	and.w	r3, r3, #8
 800c844:	2b00      	cmp	r3, #0
 800c846:	d03c      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01c      	beq.n	800c88a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c850:	4b68      	ldr	r3, [pc, #416]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c856:	4a67      	ldr	r2, [pc, #412]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c858:	f043 0301 	orr.w	r3, r3, #1
 800c85c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c860:	f7fd fe02 	bl	800a468 <HAL_GetTick>
 800c864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c866:	e008      	b.n	800c87a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c868:	f7fd fdfe 	bl	800a468 <HAL_GetTick>
 800c86c:	4602      	mov	r2, r0
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	2b02      	cmp	r3, #2
 800c874:	d901      	bls.n	800c87a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c876:	2303      	movs	r3, #3
 800c878:	e1de      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c87a:	4b5e      	ldr	r3, [pc, #376]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c880:	f003 0302 	and.w	r3, r3, #2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0ef      	beq.n	800c868 <HAL_RCC_OscConfig+0x3ec>
 800c888:	e01b      	b.n	800c8c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c88a:	4b5a      	ldr	r3, [pc, #360]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c88c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c890:	4a58      	ldr	r2, [pc, #352]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c892:	f023 0301 	bic.w	r3, r3, #1
 800c896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c89a:	f7fd fde5 	bl	800a468 <HAL_GetTick>
 800c89e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c8a0:	e008      	b.n	800c8b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c8a2:	f7fd fde1 	bl	800a468 <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d901      	bls.n	800c8b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e1c1      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c8b4:	4b4f      	ldr	r3, [pc, #316]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c8b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8ba:	f003 0302 	and.w	r3, r3, #2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1ef      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 0304 	and.w	r3, r3, #4
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f000 80a6 	beq.w	800ca1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c8d4:	4b47      	ldr	r3, [pc, #284]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10d      	bne.n	800c8fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8e0:	4b44      	ldr	r3, [pc, #272]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c8e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e4:	4a43      	ldr	r2, [pc, #268]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c8e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8ea:	6593      	str	r3, [r2, #88]	; 0x58
 800c8ec:	4b41      	ldr	r3, [pc, #260]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8f4:	60bb      	str	r3, [r7, #8]
 800c8f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8fc:	4b3e      	ldr	r3, [pc, #248]	; (800c9f8 <HAL_RCC_OscConfig+0x57c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c904:	2b00      	cmp	r3, #0
 800c906:	d118      	bne.n	800c93a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c908:	4b3b      	ldr	r3, [pc, #236]	; (800c9f8 <HAL_RCC_OscConfig+0x57c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a3a      	ldr	r2, [pc, #232]	; (800c9f8 <HAL_RCC_OscConfig+0x57c>)
 800c90e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c914:	f7fd fda8 	bl	800a468 <HAL_GetTick>
 800c918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c91a:	e008      	b.n	800c92e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c91c:	f7fd fda4 	bl	800a468 <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b02      	cmp	r3, #2
 800c928:	d901      	bls.n	800c92e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e184      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c92e:	4b32      	ldr	r3, [pc, #200]	; (800c9f8 <HAL_RCC_OscConfig+0x57c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0f0      	beq.n	800c91c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d108      	bne.n	800c954 <HAL_RCC_OscConfig+0x4d8>
 800c942:	4b2c      	ldr	r3, [pc, #176]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c948:	4a2a      	ldr	r2, [pc, #168]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c952:	e024      	b.n	800c99e <HAL_RCC_OscConfig+0x522>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	2b05      	cmp	r3, #5
 800c95a:	d110      	bne.n	800c97e <HAL_RCC_OscConfig+0x502>
 800c95c:	4b25      	ldr	r3, [pc, #148]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c962:	4a24      	ldr	r2, [pc, #144]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c964:	f043 0304 	orr.w	r3, r3, #4
 800c968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c96c:	4b21      	ldr	r3, [pc, #132]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c972:	4a20      	ldr	r2, [pc, #128]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c974:	f043 0301 	orr.w	r3, r3, #1
 800c978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c97c:	e00f      	b.n	800c99e <HAL_RCC_OscConfig+0x522>
 800c97e:	4b1d      	ldr	r3, [pc, #116]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c984:	4a1b      	ldr	r2, [pc, #108]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c986:	f023 0301 	bic.w	r3, r3, #1
 800c98a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c98e:	4b19      	ldr	r3, [pc, #100]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c994:	4a17      	ldr	r2, [pc, #92]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c996:	f023 0304 	bic.w	r3, r3, #4
 800c99a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d016      	beq.n	800c9d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9a6:	f7fd fd5f 	bl	800a468 <HAL_GetTick>
 800c9aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c9ac:	e00a      	b.n	800c9c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9ae:	f7fd fd5b 	bl	800a468 <HAL_GetTick>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d901      	bls.n	800c9c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e139      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c9c4:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <HAL_RCC_OscConfig+0x578>)
 800c9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0ed      	beq.n	800c9ae <HAL_RCC_OscConfig+0x532>
 800c9d2:	e01a      	b.n	800ca0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9d4:	f7fd fd48 	bl	800a468 <HAL_GetTick>
 800c9d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c9da:	e00f      	b.n	800c9fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9dc:	f7fd fd44 	bl	800a468 <HAL_GetTick>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d906      	bls.n	800c9fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e122      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
 800c9f2:	bf00      	nop
 800c9f4:	40021000 	.word	0x40021000
 800c9f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c9fc:	4b90      	ldr	r3, [pc, #576]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800c9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e8      	bne.n	800c9dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca0a:	7ffb      	ldrb	r3, [r7, #31]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d105      	bne.n	800ca1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca10:	4b8b      	ldr	r3, [pc, #556]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800ca12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca14:	4a8a      	ldr	r2, [pc, #552]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800ca16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 8108 	beq.w	800cc36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	f040 80d0 	bne.w	800cbd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ca30:	4b83      	ldr	r3, [pc, #524]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f003 0203 	and.w	r2, r3, #3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d130      	bne.n	800caa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d127      	bne.n	800caa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d11f      	bne.n	800caa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ca70:	2a07      	cmp	r2, #7
 800ca72:	bf14      	ite	ne
 800ca74:	2201      	movne	r2, #1
 800ca76:	2200      	moveq	r2, #0
 800ca78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d113      	bne.n	800caa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca88:	085b      	lsrs	r3, r3, #1
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d109      	bne.n	800caa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9c:	085b      	lsrs	r3, r3, #1
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d06e      	beq.n	800cb84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	2b0c      	cmp	r3, #12
 800caaa:	d069      	beq.n	800cb80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800caac:	4b64      	ldr	r3, [pc, #400]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d105      	bne.n	800cac4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800cab8:	4b61      	ldr	r3, [pc, #388]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e0b7      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cac8:	4b5d      	ldr	r3, [pc, #372]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a5c      	ldr	r2, [pc, #368]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cad2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cad4:	f7fd fcc8 	bl	800a468 <HAL_GetTick>
 800cad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cada:	e008      	b.n	800caee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cadc:	f7fd fcc4 	bl	800a468 <HAL_GetTick>
 800cae0:	4602      	mov	r2, r0
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d901      	bls.n	800caee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800caea:	2303      	movs	r3, #3
 800caec:	e0a4      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800caee:	4b54      	ldr	r3, [pc, #336]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f0      	bne.n	800cadc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cafa:	4b51      	ldr	r3, [pc, #324]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cafc:	68da      	ldr	r2, [r3, #12]
 800cafe:	4b51      	ldr	r3, [pc, #324]	; (800cc44 <HAL_RCC_OscConfig+0x7c8>)
 800cb00:	4013      	ands	r3, r2
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cb0a:	3a01      	subs	r2, #1
 800cb0c:	0112      	lsls	r2, r2, #4
 800cb0e:	4311      	orrs	r1, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb14:	0212      	lsls	r2, r2, #8
 800cb16:	4311      	orrs	r1, r2
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cb1c:	0852      	lsrs	r2, r2, #1
 800cb1e:	3a01      	subs	r2, #1
 800cb20:	0552      	lsls	r2, r2, #21
 800cb22:	4311      	orrs	r1, r2
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cb28:	0852      	lsrs	r2, r2, #1
 800cb2a:	3a01      	subs	r2, #1
 800cb2c:	0652      	lsls	r2, r2, #25
 800cb2e:	4311      	orrs	r1, r2
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb34:	0912      	lsrs	r2, r2, #4
 800cb36:	0452      	lsls	r2, r2, #17
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	4941      	ldr	r1, [pc, #260]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cb40:	4b3f      	ldr	r3, [pc, #252]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a3e      	ldr	r2, [pc, #248]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb4c:	4b3c      	ldr	r3, [pc, #240]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	4a3b      	ldr	r2, [pc, #236]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cb58:	f7fd fc86 	bl	800a468 <HAL_GetTick>
 800cb5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb5e:	e008      	b.n	800cb72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb60:	f7fd fc82 	bl	800a468 <HAL_GetTick>
 800cb64:	4602      	mov	r2, r0
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d901      	bls.n	800cb72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e062      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb72:	4b33      	ldr	r3, [pc, #204]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d0f0      	beq.n	800cb60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cb7e:	e05a      	b.n	800cc36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e059      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb84:	4b2e      	ldr	r3, [pc, #184]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d152      	bne.n	800cc36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cb90:	4b2b      	ldr	r3, [pc, #172]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a2a      	ldr	r2, [pc, #168]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb9c:	4b28      	ldr	r3, [pc, #160]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	4a27      	ldr	r2, [pc, #156]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cba8:	f7fd fc5e 	bl	800a468 <HAL_GetTick>
 800cbac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbae:	e008      	b.n	800cbc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbb0:	f7fd fc5a 	bl	800a468 <HAL_GetTick>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d901      	bls.n	800cbc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	e03a      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0f0      	beq.n	800cbb0 <HAL_RCC_OscConfig+0x734>
 800cbce:	e032      	b.n	800cc36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	2b0c      	cmp	r3, #12
 800cbd4:	d02d      	beq.n	800cc32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbd6:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a19      	ldr	r2, [pc, #100]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbe0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800cbe2:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cbee:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4a13      	ldr	r2, [pc, #76]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbf4:	f023 0303 	bic.w	r3, r3, #3
 800cbf8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800cbfa:	4b11      	ldr	r3, [pc, #68]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	4a10      	ldr	r2, [pc, #64]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cc00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cc04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc0a:	f7fd fc2d 	bl	800a468 <HAL_GetTick>
 800cc0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc10:	e008      	b.n	800cc24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc12:	f7fd fc29 	bl	800a468 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d901      	bls.n	800cc24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e009      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc24:	4b06      	ldr	r3, [pc, #24]	; (800cc40 <HAL_RCC_OscConfig+0x7c4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1f0      	bne.n	800cc12 <HAL_RCC_OscConfig+0x796>
 800cc30:	e001      	b.n	800cc36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e000      	b.n	800cc38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3720      	adds	r7, #32
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	40021000 	.word	0x40021000
 800cc44:	f99d808c 	.word	0xf99d808c

0800cc48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e0c8      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc5c:	4b66      	ldr	r3, [pc, #408]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 0307 	and.w	r3, r3, #7
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d910      	bls.n	800cc8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc6a:	4b63      	ldr	r3, [pc, #396]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f023 0207 	bic.w	r2, r3, #7
 800cc72:	4961      	ldr	r1, [pc, #388]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc7a:	4b5f      	ldr	r3, [pc, #380]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d001      	beq.n	800cc8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e0b0      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d04c      	beq.n	800cd32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	d107      	bne.n	800ccb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cca0:	4b56      	ldr	r3, [pc, #344]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d121      	bne.n	800ccf0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e09e      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d107      	bne.n	800ccc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ccb8:	4b50      	ldr	r3, [pc, #320]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d115      	bne.n	800ccf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e092      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d107      	bne.n	800cce0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ccd0:	4b4a      	ldr	r3, [pc, #296]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0302 	and.w	r3, r3, #2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d109      	bne.n	800ccf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e086      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cce0:	4b46      	ldr	r3, [pc, #280]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e07e      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ccf0:	4b42      	ldr	r3, [pc, #264]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f023 0203 	bic.w	r2, r3, #3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	493f      	ldr	r1, [pc, #252]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd02:	f7fd fbb1 	bl	800a468 <HAL_GetTick>
 800cd06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd08:	e00a      	b.n	800cd20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd0a:	f7fd fbad 	bl	800a468 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d901      	bls.n	800cd20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e066      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd20:	4b36      	ldr	r3, [pc, #216]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f003 020c 	and.w	r2, r3, #12
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d1eb      	bne.n	800cd0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0302 	and.w	r3, r3, #2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd3e:	4b2f      	ldr	r3, [pc, #188]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	492c      	ldr	r1, [pc, #176]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd50:	4b29      	ldr	r3, [pc, #164]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0307 	and.w	r3, r3, #7
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d210      	bcs.n	800cd80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd5e:	4b26      	ldr	r3, [pc, #152]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f023 0207 	bic.w	r2, r3, #7
 800cd66:	4924      	ldr	r1, [pc, #144]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd6e:	4b22      	ldr	r3, [pc, #136]	; (800cdf8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d001      	beq.n	800cd80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e036      	b.n	800cdee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d008      	beq.n	800cd9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd8c:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	4918      	ldr	r1, [pc, #96]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f003 0308 	and.w	r3, r3, #8
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d009      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cdaa:	4b14      	ldr	r3, [pc, #80]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	4910      	ldr	r1, [pc, #64]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cdbe:	f000 f825 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <HAL_RCC_ClockConfig+0x1b4>)
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	091b      	lsrs	r3, r3, #4
 800cdca:	f003 030f 	and.w	r3, r3, #15
 800cdce:	4a0c      	ldr	r2, [pc, #48]	; (800ce00 <HAL_RCC_ClockConfig+0x1b8>)
 800cdd0:	5cd3      	ldrb	r3, [r2, r3]
 800cdd2:	f003 031f 	and.w	r3, r3, #31
 800cdd6:	fa21 f303 	lsr.w	r3, r1, r3
 800cdda:	4a0a      	ldr	r2, [pc, #40]	; (800ce04 <HAL_RCC_ClockConfig+0x1bc>)
 800cddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cdde:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <HAL_RCC_ClockConfig+0x1c0>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fd faf0 	bl	800a3c8 <HAL_InitTick>
 800cde8:	4603      	mov	r3, r0
 800cdea:	72fb      	strb	r3, [r7, #11]

  return status;
 800cdec:	7afb      	ldrb	r3, [r7, #11]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	40022000 	.word	0x40022000
 800cdfc:	40021000 	.word	0x40021000
 800ce00:	08016d8c 	.word	0x08016d8c
 800ce04:	2000018c 	.word	0x2000018c
 800ce08:	20000488 	.word	0x20000488

0800ce0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b089      	sub	sp, #36	; 0x24
 800ce10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ce12:	2300      	movs	r3, #0
 800ce14:	61fb      	str	r3, [r7, #28]
 800ce16:	2300      	movs	r3, #0
 800ce18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce1a:	4b3d      	ldr	r3, [pc, #244]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	f003 030c 	and.w	r3, r3, #12
 800ce22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce24:	4b3a      	ldr	r3, [pc, #232]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	f003 0303 	and.w	r3, r3, #3
 800ce2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d005      	beq.n	800ce40 <HAL_RCC_GetSysClockFreq+0x34>
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	2b0c      	cmp	r3, #12
 800ce38:	d121      	bne.n	800ce7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d11e      	bne.n	800ce7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ce40:	4b33      	ldr	r3, [pc, #204]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 0308 	and.w	r3, r3, #8
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d107      	bne.n	800ce5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ce4c:	4b30      	ldr	r3, [pc, #192]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce52:	0a1b      	lsrs	r3, r3, #8
 800ce54:	f003 030f 	and.w	r3, r3, #15
 800ce58:	61fb      	str	r3, [r7, #28]
 800ce5a:	e005      	b.n	800ce68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ce5c:	4b2c      	ldr	r3, [pc, #176]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	091b      	lsrs	r3, r3, #4
 800ce62:	f003 030f 	and.w	r3, r3, #15
 800ce66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ce68:	4a2a      	ldr	r2, [pc, #168]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10d      	bne.n	800ce94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ce7c:	e00a      	b.n	800ce94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d102      	bne.n	800ce8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce84:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ce86:	61bb      	str	r3, [r7, #24]
 800ce88:	e004      	b.n	800ce94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2b08      	cmp	r3, #8
 800ce8e:	d101      	bne.n	800ce94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce90:	4b22      	ldr	r3, [pc, #136]	; (800cf1c <HAL_RCC_GetSysClockFreq+0x110>)
 800ce92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	2b0c      	cmp	r3, #12
 800ce98:	d133      	bne.n	800cf02 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce9a:	4b1d      	ldr	r3, [pc, #116]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f003 0303 	and.w	r3, r3, #3
 800cea2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d002      	beq.n	800ceb0 <HAL_RCC_GetSysClockFreq+0xa4>
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d003      	beq.n	800ceb6 <HAL_RCC_GetSysClockFreq+0xaa>
 800ceae:	e005      	b.n	800cebc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ceb0:	4b19      	ldr	r3, [pc, #100]	; (800cf18 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ceb2:	617b      	str	r3, [r7, #20]
      break;
 800ceb4:	e005      	b.n	800cec2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ceb6:	4b19      	ldr	r3, [pc, #100]	; (800cf1c <HAL_RCC_GetSysClockFreq+0x110>)
 800ceb8:	617b      	str	r3, [r7, #20]
      break;
 800ceba:	e002      	b.n	800cec2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	617b      	str	r3, [r7, #20]
      break;
 800cec0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cec2:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	091b      	lsrs	r3, r3, #4
 800cec8:	f003 0307 	and.w	r3, r3, #7
 800cecc:	3301      	adds	r3, #1
 800cece:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ced0:	4b0f      	ldr	r3, [pc, #60]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	0a1b      	lsrs	r3, r3, #8
 800ced6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	fb02 f203 	mul.w	r2, r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cee8:	4b09      	ldr	r3, [pc, #36]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x104>)
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	0e5b      	lsrs	r3, r3, #25
 800ceee:	f003 0303 	and.w	r3, r3, #3
 800cef2:	3301      	adds	r3, #1
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf00:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cf02:	69bb      	ldr	r3, [r7, #24]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3724      	adds	r7, #36	; 0x24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	40021000 	.word	0x40021000
 800cf14:	08016da4 	.word	0x08016da4
 800cf18:	00f42400 	.word	0x00f42400
 800cf1c:	007a1200 	.word	0x007a1200

0800cf20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf20:	b480      	push	{r7}
 800cf22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf24:	4b03      	ldr	r3, [pc, #12]	; (800cf34 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf26:	681b      	ldr	r3, [r3, #0]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	2000018c 	.word	0x2000018c

0800cf38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cf3c:	f7ff fff0 	bl	800cf20 <HAL_RCC_GetHCLKFreq>
 800cf40:	4601      	mov	r1, r0
 800cf42:	4b06      	ldr	r3, [pc, #24]	; (800cf5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	0a1b      	lsrs	r3, r3, #8
 800cf48:	f003 0307 	and.w	r3, r3, #7
 800cf4c:	4a04      	ldr	r2, [pc, #16]	; (800cf60 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf4e:	5cd3      	ldrb	r3, [r2, r3]
 800cf50:	f003 031f 	and.w	r3, r3, #31
 800cf54:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	40021000 	.word	0x40021000
 800cf60:	08016d9c 	.word	0x08016d9c

0800cf64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cf68:	f7ff ffda 	bl	800cf20 <HAL_RCC_GetHCLKFreq>
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	0adb      	lsrs	r3, r3, #11
 800cf74:	f003 0307 	and.w	r3, r3, #7
 800cf78:	4a04      	ldr	r2, [pc, #16]	; (800cf8c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cf7a:	5cd3      	ldrb	r3, [r2, r3]
 800cf7c:	f003 031f 	and.w	r3, r3, #31
 800cf80:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	40021000 	.word	0x40021000
 800cf8c:	08016d9c 	.word	0x08016d9c

0800cf90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cf98:	2300      	movs	r3, #0
 800cf9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cf9c:	4b2a      	ldr	r3, [pc, #168]	; (800d048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d003      	beq.n	800cfb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cfa8:	f7ff f938 	bl	800c21c <HAL_PWREx_GetVoltageRange>
 800cfac:	6178      	str	r0, [r7, #20]
 800cfae:	e014      	b.n	800cfda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cfb0:	4b25      	ldr	r3, [pc, #148]	; (800d048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb4:	4a24      	ldr	r2, [pc, #144]	; (800d048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfba:	6593      	str	r3, [r2, #88]	; 0x58
 800cfbc:	4b22      	ldr	r3, [pc, #136]	; (800d048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfc4:	60fb      	str	r3, [r7, #12]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cfc8:	f7ff f928 	bl	800c21c <HAL_PWREx_GetVoltageRange>
 800cfcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cfce:	4b1e      	ldr	r3, [pc, #120]	; (800d048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfd2:	4a1d      	ldr	r2, [pc, #116]	; (800d048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfe0:	d10b      	bne.n	800cffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b80      	cmp	r3, #128	; 0x80
 800cfe6:	d919      	bls.n	800d01c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2ba0      	cmp	r3, #160	; 0xa0
 800cfec:	d902      	bls.n	800cff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cfee:	2302      	movs	r3, #2
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e013      	b.n	800d01c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cff4:	2301      	movs	r3, #1
 800cff6:	613b      	str	r3, [r7, #16]
 800cff8:	e010      	b.n	800d01c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b80      	cmp	r3, #128	; 0x80
 800cffe:	d902      	bls.n	800d006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d000:	2303      	movs	r3, #3
 800d002:	613b      	str	r3, [r7, #16]
 800d004:	e00a      	b.n	800d01c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b80      	cmp	r3, #128	; 0x80
 800d00a:	d102      	bne.n	800d012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d00c:	2302      	movs	r3, #2
 800d00e:	613b      	str	r3, [r7, #16]
 800d010:	e004      	b.n	800d01c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2b70      	cmp	r3, #112	; 0x70
 800d016:	d101      	bne.n	800d01c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d018:	2301      	movs	r3, #1
 800d01a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d01c:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f023 0207 	bic.w	r2, r3, #7
 800d024:	4909      	ldr	r1, [pc, #36]	; (800d04c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	4313      	orrs	r3, r2
 800d02a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d02c:	4b07      	ldr	r3, [pc, #28]	; (800d04c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 0307 	and.w	r3, r3, #7
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	429a      	cmp	r2, r3
 800d038:	d001      	beq.n	800d03e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e000      	b.n	800d040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	40021000 	.word	0x40021000
 800d04c:	40022000 	.word	0x40022000

0800d050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d058:	2300      	movs	r3, #0
 800d05a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d05c:	2300      	movs	r3, #0
 800d05e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d03f      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d074:	d01c      	beq.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800d076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d07a:	d802      	bhi.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00e      	beq.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800d080:	e01f      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d086:	d003      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800d088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d08c:	d01c      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800d08e:	e018      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d090:	4b85      	ldr	r3, [pc, #532]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	4a84      	ldr	r2, [pc, #528]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d09a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d09c:	e015      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f000 fac9 	bl	800d63c <RCCEx_PLLSAI1_Config>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d0ae:	e00c      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3320      	adds	r3, #32
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f000 fbb0 	bl	800d81c <RCCEx_PLLSAI2_Config>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d0c0:	e003      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	74fb      	strb	r3, [r7, #19]
      break;
 800d0c6:	e000      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800d0c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0ca:	7cfb      	ldrb	r3, [r7, #19]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10b      	bne.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d0d0:	4b75      	ldr	r3, [pc, #468]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0de:	4972      	ldr	r1, [pc, #456]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d0e6:	e001      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0e8:	7cfb      	ldrb	r3, [r7, #19]
 800d0ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d03f      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d100:	d01c      	beq.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800d102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d106:	d802      	bhi.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00e      	beq.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800d10c:	e01f      	b.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d10e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d112:	d003      	beq.n	800d11c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800d114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d118:	d01c      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800d11a:	e018      	b.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d11c:	4b62      	ldr	r3, [pc, #392]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	4a61      	ldr	r2, [pc, #388]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d126:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d128:	e015      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3304      	adds	r3, #4
 800d12e:	2100      	movs	r1, #0
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fa83 	bl	800d63c <RCCEx_PLLSAI1_Config>
 800d136:	4603      	mov	r3, r0
 800d138:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d13a:	e00c      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3320      	adds	r3, #32
 800d140:	2100      	movs	r1, #0
 800d142:	4618      	mov	r0, r3
 800d144:	f000 fb6a 	bl	800d81c <RCCEx_PLLSAI2_Config>
 800d148:	4603      	mov	r3, r0
 800d14a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d14c:	e003      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	74fb      	strb	r3, [r7, #19]
      break;
 800d152:	e000      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800d154:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d156:	7cfb      	ldrb	r3, [r7, #19]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10b      	bne.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d15c:	4b52      	ldr	r3, [pc, #328]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d162:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d16a:	494f      	ldr	r1, [pc, #316]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d16c:	4313      	orrs	r3, r2
 800d16e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d172:	e001      	b.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d174:	7cfb      	ldrb	r3, [r7, #19]
 800d176:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 80a0 	beq.w	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d186:	2300      	movs	r3, #0
 800d188:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d18a:	4b47      	ldr	r3, [pc, #284]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00d      	beq.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1a0:	4b41      	ldr	r3, [pc, #260]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a4:	4a40      	ldr	r2, [pc, #256]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1aa:	6593      	str	r3, [r2, #88]	; 0x58
 800d1ac:	4b3e      	ldr	r3, [pc, #248]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1b4:	60bb      	str	r3, [r7, #8]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d1bc:	4b3b      	ldr	r3, [pc, #236]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a3a      	ldr	r2, [pc, #232]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d1c8:	f7fd f94e 	bl	800a468 <HAL_GetTick>
 800d1cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d1ce:	e009      	b.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1d0:	f7fd f94a 	bl	800a468 <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d902      	bls.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	74fb      	strb	r3, [r7, #19]
        break;
 800d1e2:	e005      	b.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d1e4:	4b31      	ldr	r3, [pc, #196]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d0ef      	beq.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800d1f0:	7cfb      	ldrb	r3, [r7, #19]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d15c      	bne.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d1f6:	4b2c      	ldr	r3, [pc, #176]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d200:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d01f      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	429a      	cmp	r2, r3
 800d212:	d019      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d214:	4b24      	ldr	r3, [pc, #144]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d21a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d21e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d220:	4b21      	ldr	r3, [pc, #132]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d226:	4a20      	ldr	r2, [pc, #128]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d22c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d230:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d236:	4a1c      	ldr	r2, [pc, #112]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d23c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d240:	4a19      	ldr	r2, [pc, #100]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f003 0301 	and.w	r3, r3, #1
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d016      	beq.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d252:	f7fd f909 	bl	800a468 <HAL_GetTick>
 800d256:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d258:	e00b      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d25a:	f7fd f905 	bl	800a468 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	f241 3288 	movw	r2, #5000	; 0x1388
 800d268:	4293      	cmp	r3, r2
 800d26a:	d902      	bls.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	74fb      	strb	r3, [r7, #19]
            break;
 800d270:	e006      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d272:	4b0d      	ldr	r3, [pc, #52]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d278:	f003 0302 	and.w	r3, r3, #2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d0ec      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800d280:	7cfb      	ldrb	r3, [r7, #19]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10c      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d286:	4b08      	ldr	r3, [pc, #32]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d28c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d296:	4904      	ldr	r1, [pc, #16]	; (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d298:	4313      	orrs	r3, r2
 800d29a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d29e:	e009      	b.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d2a0:	7cfb      	ldrb	r3, [r7, #19]
 800d2a2:	74bb      	strb	r3, [r7, #18]
 800d2a4:	e006      	b.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800d2a6:	bf00      	nop
 800d2a8:	40021000 	.word	0x40021000
 800d2ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b0:	7cfb      	ldrb	r3, [r7, #19]
 800d2b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d2b4:	7c7b      	ldrb	r3, [r7, #17]
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d105      	bne.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2ba:	4b9e      	ldr	r3, [pc, #632]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2be:	4a9d      	ldr	r2, [pc, #628]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00a      	beq.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d2d2:	4b98      	ldr	r3, [pc, #608]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2d8:	f023 0203 	bic.w	r2, r3, #3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	4994      	ldr	r1, [pc, #592]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00a      	beq.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d2f4:	4b8f      	ldr	r3, [pc, #572]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2fa:	f023 020c 	bic.w	r2, r3, #12
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d302:	498c      	ldr	r1, [pc, #560]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d304:	4313      	orrs	r3, r2
 800d306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0304 	and.w	r3, r3, #4
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d316:	4b87      	ldr	r3, [pc, #540]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d31c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d324:	4983      	ldr	r1, [pc, #524]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d326:	4313      	orrs	r3, r2
 800d328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0308 	and.w	r3, r3, #8
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00a      	beq.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d338:	4b7e      	ldr	r3, [pc, #504]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d33e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d346:	497b      	ldr	r1, [pc, #492]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d348:	4313      	orrs	r3, r2
 800d34a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0310 	and.w	r3, r3, #16
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00a      	beq.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d35a:	4b76      	ldr	r3, [pc, #472]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d368:	4972      	ldr	r1, [pc, #456]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d36a:	4313      	orrs	r3, r2
 800d36c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00a      	beq.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d37c:	4b6d      	ldr	r3, [pc, #436]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d38a:	496a      	ldr	r1, [pc, #424]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d38c:	4313      	orrs	r3, r2
 800d38e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00a      	beq.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d39e:	4b65      	ldr	r3, [pc, #404]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ac:	4961      	ldr	r1, [pc, #388]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00a      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d3c0:	4b5c      	ldr	r3, [pc, #368]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3ce:	4959      	ldr	r1, [pc, #356]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00a      	beq.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d3e2:	4b54      	ldr	r3, [pc, #336]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f0:	4950      	ldr	r1, [pc, #320]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00a      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d404:	4b4b      	ldr	r3, [pc, #300]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d40a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d412:	4948      	ldr	r1, [pc, #288]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d414:	4313      	orrs	r3, r2
 800d416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00a      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d426:	4b43      	ldr	r3, [pc, #268]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d42c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d434:	493f      	ldr	r1, [pc, #252]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d436:	4313      	orrs	r3, r2
 800d438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d028      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d448:	4b3a      	ldr	r3, [pc, #232]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d44e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d456:	4937      	ldr	r1, [pc, #220]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d458:	4313      	orrs	r3, r2
 800d45a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d466:	d106      	bne.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d468:	4b32      	ldr	r3, [pc, #200]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	4a31      	ldr	r2, [pc, #196]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d472:	60d3      	str	r3, [r2, #12]
 800d474:	e011      	b.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d47a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d47e:	d10c      	bne.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3304      	adds	r3, #4
 800d484:	2101      	movs	r1, #1
 800d486:	4618      	mov	r0, r3
 800d488:	f000 f8d8 	bl	800d63c <RCCEx_PLLSAI1_Config>
 800d48c:	4603      	mov	r3, r0
 800d48e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d490:	7cfb      	ldrb	r3, [r7, #19]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800d496:	7cfb      	ldrb	r3, [r7, #19]
 800d498:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d028      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d4a6:	4b23      	ldr	r3, [pc, #140]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b4:	491f      	ldr	r1, [pc, #124]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4c4:	d106      	bne.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4c6:	4b1b      	ldr	r3, [pc, #108]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	4a1a      	ldr	r2, [pc, #104]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4d0:	60d3      	str	r3, [r2, #12]
 800d4d2:	e011      	b.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d4dc:	d10c      	bne.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 f8a9 	bl	800d63c <RCCEx_PLLSAI1_Config>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d4ee:	7cfb      	ldrb	r3, [r7, #19]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800d4f4:	7cfb      	ldrb	r3, [r7, #19]
 800d4f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d500:	2b00      	cmp	r3, #0
 800d502:	d02b      	beq.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d504:	4b0b      	ldr	r3, [pc, #44]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d50a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d512:	4908      	ldr	r1, [pc, #32]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d514:	4313      	orrs	r3, r2
 800d516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d51e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d522:	d109      	bne.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d524:	4b03      	ldr	r3, [pc, #12]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	4a02      	ldr	r2, [pc, #8]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d52a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d52e:	60d3      	str	r3, [r2, #12]
 800d530:	e014      	b.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800d532:	bf00      	nop
 800d534:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d53c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d540:	d10c      	bne.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3304      	adds	r3, #4
 800d546:	2101      	movs	r1, #1
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 f877 	bl	800d63c <RCCEx_PLLSAI1_Config>
 800d54e:	4603      	mov	r3, r0
 800d550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d552:	7cfb      	ldrb	r3, [r7, #19]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d001      	beq.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800d558:	7cfb      	ldrb	r3, [r7, #19]
 800d55a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d02f      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d568:	4b2b      	ldr	r3, [pc, #172]	; (800d618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d56e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d576:	4928      	ldr	r1, [pc, #160]	; (800d618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d578:	4313      	orrs	r3, r2
 800d57a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d586:	d10d      	bne.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3304      	adds	r3, #4
 800d58c:	2102      	movs	r1, #2
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 f854 	bl	800d63c <RCCEx_PLLSAI1_Config>
 800d594:	4603      	mov	r3, r0
 800d596:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d598:	7cfb      	ldrb	r3, [r7, #19]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d014      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800d59e:	7cfb      	ldrb	r3, [r7, #19]
 800d5a0:	74bb      	strb	r3, [r7, #18]
 800d5a2:	e011      	b.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5ac:	d10c      	bne.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3320      	adds	r3, #32
 800d5b2:	2102      	movs	r1, #2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f931 	bl	800d81c <RCCEx_PLLSAI2_Config>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d5be:	7cfb      	ldrb	r3, [r7, #19]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800d5c4:	7cfb      	ldrb	r3, [r7, #19]
 800d5c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00a      	beq.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d5d4:	4b10      	ldr	r3, [pc, #64]	; (800d618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5e2:	490d      	ldr	r1, [pc, #52]	; (800d618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00b      	beq.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d5f6:	4b08      	ldr	r3, [pc, #32]	; (800d618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d606:	4904      	ldr	r1, [pc, #16]	; (800d618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d608:	4313      	orrs	r3, r2
 800d60a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d60e:	7cbb      	ldrb	r3, [r7, #18]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	40021000 	.word	0x40021000

0800d61c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a04      	ldr	r2, [pc, #16]	; (800d638 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800d626:	f043 0304 	orr.w	r3, r3, #4
 800d62a:	6013      	str	r3, [r2, #0]
}
 800d62c:	bf00      	nop
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	40021000 	.word	0x40021000

0800d63c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d64a:	4b73      	ldr	r3, [pc, #460]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	f003 0303 	and.w	r3, r3, #3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d018      	beq.n	800d688 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d656:	4b70      	ldr	r3, [pc, #448]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	f003 0203 	and.w	r2, r3, #3
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d10d      	bne.n	800d682 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
       ||
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d66e:	4b6a      	ldr	r3, [pc, #424]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	091b      	lsrs	r3, r3, #4
 800d674:	f003 0307 	and.w	r3, r3, #7
 800d678:	1c5a      	adds	r2, r3, #1
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	685b      	ldr	r3, [r3, #4]
       ||
 800d67e:	429a      	cmp	r2, r3
 800d680:	d044      	beq.n	800d70c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800d682:	2301      	movs	r3, #1
 800d684:	73fb      	strb	r3, [r7, #15]
 800d686:	e041      	b.n	800d70c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d00c      	beq.n	800d6aa <RCCEx_PLLSAI1_Config+0x6e>
 800d690:	2b03      	cmp	r3, #3
 800d692:	d013      	beq.n	800d6bc <RCCEx_PLLSAI1_Config+0x80>
 800d694:	2b01      	cmp	r3, #1
 800d696:	d120      	bne.n	800d6da <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d698:	4b5f      	ldr	r3, [pc, #380]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 0302 	and.w	r3, r3, #2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d11d      	bne.n	800d6e0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d6a8:	e01a      	b.n	800d6e0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d6aa:	4b5b      	ldr	r3, [pc, #364]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d116      	bne.n	800d6e4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d6ba:	e013      	b.n	800d6e4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d6bc:	4b56      	ldr	r3, [pc, #344]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10f      	bne.n	800d6e8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d6c8:	4b53      	ldr	r3, [pc, #332]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d6d8:	e006      	b.n	800d6e8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800d6de:	e004      	b.n	800d6ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 800d6e0:	bf00      	nop
 800d6e2:	e002      	b.n	800d6ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 800d6e4:	bf00      	nop
 800d6e6:	e000      	b.n	800d6ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 800d6e8:	bf00      	nop
    }

    if(status == HAL_OK)
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10d      	bne.n	800d70c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d6f0:	4b49      	ldr	r3, [pc, #292]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6819      	ldr	r1, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	3b01      	subs	r3, #1
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	430b      	orrs	r3, r1
 800d706:	4944      	ldr	r1, [pc, #272]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d708:	4313      	orrs	r3, r2
 800d70a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d17d      	bne.n	800d80e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d712:	4b41      	ldr	r3, [pc, #260]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a40      	ldr	r2, [pc, #256]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d718:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d71c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d71e:	f7fc fea3 	bl	800a468 <HAL_GetTick>
 800d722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d724:	e009      	b.n	800d73a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d726:	f7fc fe9f 	bl	800a468 <HAL_GetTick>
 800d72a:	4602      	mov	r2, r0
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	2b02      	cmp	r3, #2
 800d732:	d902      	bls.n	800d73a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	73fb      	strb	r3, [r7, #15]
        break;
 800d738:	e005      	b.n	800d746 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d73a:	4b37      	ldr	r3, [pc, #220]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1ef      	bne.n	800d726 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d160      	bne.n	800d80e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d111      	bne.n	800d776 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d752:	4b31      	ldr	r3, [pc, #196]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800d75a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	6892      	ldr	r2, [r2, #8]
 800d762:	0211      	lsls	r1, r2, #8
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	68d2      	ldr	r2, [r2, #12]
 800d768:	0912      	lsrs	r2, r2, #4
 800d76a:	0452      	lsls	r2, r2, #17
 800d76c:	430a      	orrs	r2, r1
 800d76e:	492a      	ldr	r1, [pc, #168]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d770:	4313      	orrs	r3, r2
 800d772:	610b      	str	r3, [r1, #16]
 800d774:	e027      	b.n	800d7c6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d112      	bne.n	800d7a2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d77c:	4b26      	ldr	r3, [pc, #152]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	6892      	ldr	r2, [r2, #8]
 800d78c:	0211      	lsls	r1, r2, #8
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6912      	ldr	r2, [r2, #16]
 800d792:	0852      	lsrs	r2, r2, #1
 800d794:	3a01      	subs	r2, #1
 800d796:	0552      	lsls	r2, r2, #21
 800d798:	430a      	orrs	r2, r1
 800d79a:	491f      	ldr	r1, [pc, #124]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d79c:	4313      	orrs	r3, r2
 800d79e:	610b      	str	r3, [r1, #16]
 800d7a0:	e011      	b.n	800d7c6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d7a2:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d7aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	6892      	ldr	r2, [r2, #8]
 800d7b2:	0211      	lsls	r1, r2, #8
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6952      	ldr	r2, [r2, #20]
 800d7b8:	0852      	lsrs	r2, r2, #1
 800d7ba:	3a01      	subs	r2, #1
 800d7bc:	0652      	lsls	r2, r2, #25
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	4915      	ldr	r1, [pc, #84]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d7c6:	4b14      	ldr	r3, [pc, #80]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a13      	ldr	r2, [pc, #76]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7d2:	f7fc fe49 	bl	800a468 <HAL_GetTick>
 800d7d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d7d8:	e009      	b.n	800d7ee <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d7da:	f7fc fe45 	bl	800a468 <HAL_GetTick>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d902      	bls.n	800d7ee <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	73fb      	strb	r3, [r7, #15]
          break;
 800d7ec:	e005      	b.n	800d7fa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d7ee:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0ef      	beq.n	800d7da <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d106      	bne.n	800d80e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d800:	4b05      	ldr	r3, [pc, #20]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d802:	691a      	ldr	r2, [r3, #16]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	4903      	ldr	r1, [pc, #12]	; (800d818 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	40021000 	.word	0x40021000

0800d81c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d82a:	4b68      	ldr	r3, [pc, #416]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	f003 0303 	and.w	r3, r3, #3
 800d832:	2b00      	cmp	r3, #0
 800d834:	d018      	beq.n	800d868 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d836:	4b65      	ldr	r3, [pc, #404]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f003 0203 	and.w	r2, r3, #3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d10d      	bne.n	800d862 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
       ||
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d009      	beq.n	800d862 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d84e:	4b5f      	ldr	r3, [pc, #380]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	091b      	lsrs	r3, r3, #4
 800d854:	f003 0307 	and.w	r3, r3, #7
 800d858:	1c5a      	adds	r2, r3, #1
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
       ||
 800d85e:	429a      	cmp	r2, r3
 800d860:	d044      	beq.n	800d8ec <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
 800d866:	e041      	b.n	800d8ec <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d00c      	beq.n	800d88a <RCCEx_PLLSAI2_Config+0x6e>
 800d870:	2b03      	cmp	r3, #3
 800d872:	d013      	beq.n	800d89c <RCCEx_PLLSAI2_Config+0x80>
 800d874:	2b01      	cmp	r3, #1
 800d876:	d120      	bne.n	800d8ba <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d878:	4b54      	ldr	r3, [pc, #336]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f003 0302 	and.w	r3, r3, #2
 800d880:	2b00      	cmp	r3, #0
 800d882:	d11d      	bne.n	800d8c0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d888:	e01a      	b.n	800d8c0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d88a:	4b50      	ldr	r3, [pc, #320]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d892:	2b00      	cmp	r3, #0
 800d894:	d116      	bne.n	800d8c4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d89a:	e013      	b.n	800d8c4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d89c:	4b4b      	ldr	r3, [pc, #300]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10f      	bne.n	800d8c8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d8a8:	4b48      	ldr	r3, [pc, #288]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d109      	bne.n	800d8c8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d8b8:	e006      	b.n	800d8c8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d8be:	e004      	b.n	800d8ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 800d8c0:	bf00      	nop
 800d8c2:	e002      	b.n	800d8ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 800d8c4:	bf00      	nop
 800d8c6:	e000      	b.n	800d8ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 800d8c8:	bf00      	nop
    }

    if(status == HAL_OK)
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d10d      	bne.n	800d8ec <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d8d0:	4b3e      	ldr	r3, [pc, #248]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6819      	ldr	r1, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	4939      	ldr	r1, [pc, #228]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d167      	bne.n	800d9c2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d8f2:	4b36      	ldr	r3, [pc, #216]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a35      	ldr	r2, [pc, #212]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8fe:	f7fc fdb3 	bl	800a468 <HAL_GetTick>
 800d902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d904:	e009      	b.n	800d91a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d906:	f7fc fdaf 	bl	800a468 <HAL_GetTick>
 800d90a:	4602      	mov	r2, r0
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	2b02      	cmp	r3, #2
 800d912:	d902      	bls.n	800d91a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800d914:	2303      	movs	r3, #3
 800d916:	73fb      	strb	r3, [r7, #15]
        break;
 800d918:	e005      	b.n	800d926 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d91a:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1ef      	bne.n	800d906 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d14a      	bne.n	800d9c2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d111      	bne.n	800d956 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d932:	4b26      	ldr	r3, [pc, #152]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800d93a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	6892      	ldr	r2, [r2, #8]
 800d942:	0211      	lsls	r1, r2, #8
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	68d2      	ldr	r2, [r2, #12]
 800d948:	0912      	lsrs	r2, r2, #4
 800d94a:	0452      	lsls	r2, r2, #17
 800d94c:	430a      	orrs	r2, r1
 800d94e:	491f      	ldr	r1, [pc, #124]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d950:	4313      	orrs	r3, r2
 800d952:	614b      	str	r3, [r1, #20]
 800d954:	e011      	b.n	800d97a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d956:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d958:	695b      	ldr	r3, [r3, #20]
 800d95a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d95e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	6892      	ldr	r2, [r2, #8]
 800d966:	0211      	lsls	r1, r2, #8
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	6912      	ldr	r2, [r2, #16]
 800d96c:	0852      	lsrs	r2, r2, #1
 800d96e:	3a01      	subs	r2, #1
 800d970:	0652      	lsls	r2, r2, #25
 800d972:	430a      	orrs	r2, r1
 800d974:	4915      	ldr	r1, [pc, #84]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d976:	4313      	orrs	r3, r2
 800d978:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d97a:	4b14      	ldr	r3, [pc, #80]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a13      	ldr	r2, [pc, #76]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d984:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d986:	f7fc fd6f 	bl	800a468 <HAL_GetTick>
 800d98a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d98c:	e009      	b.n	800d9a2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d98e:	f7fc fd6b 	bl	800a468 <HAL_GetTick>
 800d992:	4602      	mov	r2, r0
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d902      	bls.n	800d9a2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800d99c:	2303      	movs	r3, #3
 800d99e:	73fb      	strb	r3, [r7, #15]
          break;
 800d9a0:	e005      	b.n	800d9ae <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d0ef      	beq.n	800d98e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d106      	bne.n	800d9c2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d9b4:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d9b6:	695a      	ldr	r2, [r3, #20]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	695b      	ldr	r3, [r3, #20]
 800d9bc:	4903      	ldr	r1, [pc, #12]	; (800d9cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	40021000 	.word	0x40021000

0800d9d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e095      	b.n	800db0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d108      	bne.n	800d9fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9f2:	d009      	beq.n	800da08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	61da      	str	r2, [r3, #28]
 800d9fa:	e005      	b.n	800da08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7f6 fab2 	bl	8003f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da48:	d902      	bls.n	800da50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60fb      	str	r3, [r7, #12]
 800da4e:	e002      	b.n	800da56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800da5e:	d007      	beq.n	800da70 <HAL_SPI_Init+0xa0>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da68:	d002      	beq.n	800da70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800da80:	431a      	orrs	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	f003 0302 	and.w	r3, r3, #2
 800da8a:	431a      	orrs	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	695b      	ldr	r3, [r3, #20]
 800da90:	f003 0301 	and.w	r3, r3, #1
 800da94:	431a      	orrs	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	699b      	ldr	r3, [r3, #24]
 800da9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da9e:	431a      	orrs	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	69db      	ldr	r3, [r3, #28]
 800daa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800daa8:	431a      	orrs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dab2:	ea42 0103 	orr.w	r1, r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	430a      	orrs	r2, r1
 800dac4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	0c1b      	lsrs	r3, r3, #16
 800dacc:	f003 0204 	and.w	r2, r3, #4
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad4:	f003 0310 	and.w	r3, r3, #16
 800dad8:	431a      	orrs	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dade:	f003 0308 	and.w	r3, r3, #8
 800dae2:	431a      	orrs	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800daec:	ea42 0103 	orr.w	r1, r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	430a      	orrs	r2, r1
 800dafc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b082      	sub	sp, #8
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e01a      	b.n	800db5e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7f6 fa67 	bl	8004014 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b088      	sub	sp, #32
 800db6a:	af02      	add	r7, sp, #8
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	603b      	str	r3, [r7, #0]
 800db72:	4613      	mov	r3, r2
 800db74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db82:	d112      	bne.n	800dbaa <HAL_SPI_Receive+0x44>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10e      	bne.n	800dbaa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2204      	movs	r2, #4
 800db90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800db94:	88fa      	ldrh	r2, [r7, #6]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	4613      	mov	r3, r2
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	68b9      	ldr	r1, [r7, #8]
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f000 f910 	bl	800ddc6 <HAL_SPI_TransmitReceive>
 800dba6:	4603      	mov	r3, r0
 800dba8:	e109      	b.n	800ddbe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d101      	bne.n	800dbb8 <HAL_SPI_Receive+0x52>
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	e102      	b.n	800ddbe <HAL_SPI_Receive+0x258>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dbc0:	f7fc fc52 	bl	800a468 <HAL_GetTick>
 800dbc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d002      	beq.n	800dbd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dbd6:	e0e9      	b.n	800ddac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <HAL_SPI_Receive+0x7e>
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d102      	bne.n	800dbea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dbe8:	e0e0      	b.n	800ddac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2204      	movs	r2, #4
 800dbee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	88fa      	ldrh	r2, [r7, #6]
 800dc02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	88fa      	ldrh	r2, [r7, #6]
 800dc0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc34:	d908      	bls.n	800dc48 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc44:	605a      	str	r2, [r3, #4]
 800dc46:	e007      	b.n	800dc58 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc60:	d10f      	bne.n	800dc82 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dc80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc8c:	2b40      	cmp	r3, #64	; 0x40
 800dc8e:	d007      	beq.n	800dca0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dca8:	d867      	bhi.n	800dd7a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dcaa:	e030      	b.n	800dd0e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	f003 0301 	and.w	r3, r3, #1
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d117      	bne.n	800dcea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f103 020c 	add.w	r2, r3, #12
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	7812      	ldrb	r2, [r2, #0]
 800dcc8:	b2d2      	uxtb	r2, r2
 800dcca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	3b01      	subs	r3, #1
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dce8:	e011      	b.n	800dd0e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcea:	f7fc fbbd 	bl	800a468 <HAL_GetTick>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d803      	bhi.n	800dd02 <HAL_SPI_Receive+0x19c>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd00:	d102      	bne.n	800dd08 <HAL_SPI_Receive+0x1a2>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dd0c:	e04e      	b.n	800ddac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1c8      	bne.n	800dcac <HAL_SPI_Receive+0x146>
 800dd1a:	e034      	b.n	800dd86 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d115      	bne.n	800dd56 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68da      	ldr	r2, [r3, #12]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd34:	b292      	uxth	r2, r2
 800dd36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3c:	1c9a      	adds	r2, r3, #2
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dd54:	e011      	b.n	800dd7a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd56:	f7fc fb87 	bl	800a468 <HAL_GetTick>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d803      	bhi.n	800dd6e <HAL_SPI_Receive+0x208>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6c:	d102      	bne.n	800dd74 <HAL_SPI_Receive+0x20e>
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dd78:	e018      	b.n	800ddac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1ca      	bne.n	800dd1c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd86:	693a      	ldr	r2, [r7, #16]
 800dd88:	6839      	ldr	r1, [r7, #0]
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f000 fffa 	bl	800ed84 <SPI_EndRxTransaction>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2220      	movs	r2, #32
 800dd9a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	75fb      	strb	r3, [r7, #23]
 800dda8:	e000      	b.n	800ddac <HAL_SPI_Receive+0x246>
  }

error :
 800ddaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ddbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3718      	adds	r7, #24
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b08a      	sub	sp, #40	; 0x28
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	60f8      	str	r0, [r7, #12]
 800ddce:	60b9      	str	r1, [r7, #8]
 800ddd0:	607a      	str	r2, [r7, #4]
 800ddd2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d101      	bne.n	800ddec <HAL_SPI_TransmitReceive+0x26>
 800dde8:	2302      	movs	r3, #2
 800ddea:	e1fb      	b.n	800e1e4 <HAL_SPI_TransmitReceive+0x41e>
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddf4:	f7fc fb38 	bl	800a468 <HAL_GetTick>
 800ddf8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800de08:	887b      	ldrh	r3, [r7, #2]
 800de0a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800de0c:	887b      	ldrh	r3, [r7, #2]
 800de0e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800de10:	7efb      	ldrb	r3, [r7, #27]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d00e      	beq.n	800de34 <HAL_SPI_TransmitReceive+0x6e>
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de1c:	d106      	bne.n	800de2c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <HAL_SPI_TransmitReceive+0x66>
 800de26:	7efb      	ldrb	r3, [r7, #27]
 800de28:	2b04      	cmp	r3, #4
 800de2a:	d003      	beq.n	800de34 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800de2c:	2302      	movs	r3, #2
 800de2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800de32:	e1cd      	b.n	800e1d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <HAL_SPI_TransmitReceive+0x80>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <HAL_SPI_TransmitReceive+0x80>
 800de40:	887b      	ldrh	r3, [r7, #2]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d103      	bne.n	800de4e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800de4c:	e1c0      	b.n	800e1d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b04      	cmp	r3, #4
 800de58:	d003      	beq.n	800de62 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2205      	movs	r2, #5
 800de5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	887a      	ldrh	r2, [r7, #2]
 800de72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	887a      	ldrh	r2, [r7, #2]
 800de7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	887a      	ldrh	r2, [r7, #2]
 800de88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	887a      	ldrh	r2, [r7, #2]
 800de8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dea4:	d802      	bhi.n	800deac <HAL_SPI_TransmitReceive+0xe6>
 800dea6:	8a3b      	ldrh	r3, [r7, #16]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d908      	bls.n	800debe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	685a      	ldr	r2, [r3, #4]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800deba:	605a      	str	r2, [r3, #4]
 800debc:	e007      	b.n	800dece <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800decc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded8:	2b40      	cmp	r3, #64	; 0x40
 800deda:	d007      	beq.n	800deec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800deea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800def4:	d97c      	bls.n	800dff0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <HAL_SPI_TransmitReceive+0x13e>
 800defe:	8a7b      	ldrh	r3, [r7, #18]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d169      	bne.n	800dfd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df08:	881a      	ldrh	r2, [r3, #0]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df14:	1c9a      	adds	r2, r3, #2
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df1e:	b29b      	uxth	r3, r3
 800df20:	3b01      	subs	r3, #1
 800df22:	b29a      	uxth	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df28:	e056      	b.n	800dfd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	f003 0302 	and.w	r3, r3, #2
 800df34:	2b02      	cmp	r3, #2
 800df36:	d11b      	bne.n	800df70 <HAL_SPI_TransmitReceive+0x1aa>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d016      	beq.n	800df70 <HAL_SPI_TransmitReceive+0x1aa>
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	2b01      	cmp	r3, #1
 800df46:	d113      	bne.n	800df70 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4c:	881a      	ldrh	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df58:	1c9a      	adds	r2, r3, #2
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df62:	b29b      	uxth	r3, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	b29a      	uxth	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800df6c:	2300      	movs	r3, #0
 800df6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d11c      	bne.n	800dfb8 <HAL_SPI_TransmitReceive+0x1f2>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df84:	b29b      	uxth	r3, r3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d016      	beq.n	800dfb8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	68da      	ldr	r2, [r3, #12]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df94:	b292      	uxth	r2, r2
 800df96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df9c:	1c9a      	adds	r2, r3, #2
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dfb8:	f7fc fa56 	bl	800a468 <HAL_GetTick>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d807      	bhi.n	800dfd8 <HAL_SPI_TransmitReceive+0x212>
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfce:	d003      	beq.n	800dfd8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dfd6:	e0fb      	b.n	800e1d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1a3      	bne.n	800df2a <HAL_SPI_TransmitReceive+0x164>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d19d      	bne.n	800df2a <HAL_SPI_TransmitReceive+0x164>
 800dfee:	e0df      	b.n	800e1b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d003      	beq.n	800e000 <HAL_SPI_TransmitReceive+0x23a>
 800dff8:	8a7b      	ldrh	r3, [r7, #18]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	f040 80cb 	bne.w	800e196 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e004:	b29b      	uxth	r3, r3
 800e006:	2b01      	cmp	r3, #1
 800e008:	d912      	bls.n	800e030 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00e:	881a      	ldrh	r2, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e01a:	1c9a      	adds	r2, r3, #2
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e024:	b29b      	uxth	r3, r3
 800e026:	3b02      	subs	r3, #2
 800e028:	b29a      	uxth	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e02e:	e0b2      	b.n	800e196 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	330c      	adds	r3, #12
 800e03a:	7812      	ldrb	r2, [r2, #0]
 800e03c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e042:	1c5a      	adds	r2, r3, #1
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	3b01      	subs	r3, #1
 800e050:	b29a      	uxth	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e056:	e09e      	b.n	800e196 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	f003 0302 	and.w	r3, r3, #2
 800e062:	2b02      	cmp	r3, #2
 800e064:	d134      	bne.n	800e0d0 <HAL_SPI_TransmitReceive+0x30a>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d02f      	beq.n	800e0d0 <HAL_SPI_TransmitReceive+0x30a>
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	2b01      	cmp	r3, #1
 800e074:	d12c      	bne.n	800e0d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d912      	bls.n	800e0a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e084:	881a      	ldrh	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e090:	1c9a      	adds	r2, r3, #2
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	3b02      	subs	r3, #2
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0a4:	e012      	b.n	800e0cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	330c      	adds	r3, #12
 800e0b0:	7812      	ldrb	r2, [r2, #0]
 800e0b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d148      	bne.n	800e170 <HAL_SPI_TransmitReceive+0x3aa>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d042      	beq.n	800e170 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d923      	bls.n	800e13e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68da      	ldr	r2, [r3, #12]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e100:	b292      	uxth	r2, r2
 800e102:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e108:	1c9a      	adds	r2, r3, #2
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e114:	b29b      	uxth	r3, r3
 800e116:	3b02      	subs	r3, #2
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e126:	b29b      	uxth	r3, r3
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d81f      	bhi.n	800e16c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e13a:	605a      	str	r2, [r3, #4]
 800e13c:	e016      	b.n	800e16c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f103 020c 	add.w	r2, r3, #12
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	7812      	ldrb	r2, [r2, #0]
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e160:	b29b      	uxth	r3, r3
 800e162:	3b01      	subs	r3, #1
 800e164:	b29a      	uxth	r2, r3
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e16c:	2301      	movs	r3, #1
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e170:	f7fc f97a 	bl	800a468 <HAL_GetTick>
 800e174:	4602      	mov	r2, r0
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d803      	bhi.n	800e188 <HAL_SPI_TransmitReceive+0x3c2>
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e186:	d102      	bne.n	800e18e <HAL_SPI_TransmitReceive+0x3c8>
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d103      	bne.n	800e196 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e18e:	2303      	movs	r3, #3
 800e190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e194:	e01c      	b.n	800e1d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f47f af5b 	bne.w	800e058 <HAL_SPI_TransmitReceive+0x292>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f47f af54 	bne.w	800e058 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e1b0:	69fa      	ldr	r2, [r7, #28]
 800e1b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f000 fe3d 	bl	800ee34 <SPI_EndRxTxTransaction>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d006      	beq.n	800e1ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2220      	movs	r2, #32
 800e1ca:	661a      	str	r2, [r3, #96]	; 0x60
 800e1cc:	e000      	b.n	800e1d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e1ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e1e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3728      	adds	r7, #40	; 0x28
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e204:	2b01      	cmp	r3, #1
 800e206:	d101      	bne.n	800e20c <HAL_SPI_Transmit_IT+0x20>
 800e208:	2302      	movs	r3, #2
 800e20a:	e072      	b.n	800e2f2 <HAL_SPI_Transmit_IT+0x106>
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2201      	movs	r2, #1
 800e210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d002      	beq.n	800e220 <HAL_SPI_Transmit_IT+0x34>
 800e21a:	88fb      	ldrh	r3, [r7, #6]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e224:	e060      	b.n	800e2e8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d002      	beq.n	800e238 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800e232:	2302      	movs	r3, #2
 800e234:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e236:	e057      	b.n	800e2e8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2203      	movs	r2, #3
 800e23c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	88fa      	ldrh	r2, [r7, #6]
 800e250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	88fa      	ldrh	r2, [r7, #6]
 800e256:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e27c:	d903      	bls.n	800e286 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	4a1f      	ldr	r2, [pc, #124]	; (800e300 <HAL_SPI_Transmit_IT+0x114>)
 800e282:	651a      	str	r2, [r3, #80]	; 0x50
 800e284:	e002      	b.n	800e28c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4a1e      	ldr	r2, [pc, #120]	; (800e304 <HAL_SPI_Transmit_IT+0x118>)
 800e28a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e294:	d10f      	bne.n	800e2b6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800e2c4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d0:	2b40      	cmp	r3, #64	; 0x40
 800e2d2:	d008      	beq.n	800e2e6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	e000      	b.n	800e2e8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800e2e6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	371c      	adds	r7, #28
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	0800eb13 	.word	0x0800eb13
 800e304:	0800eacd 	.word	0x0800eacd

0800e308 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	4613      	mov	r3, r2
 800e314:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d110      	bne.n	800e344 <HAL_SPI_Receive_IT+0x3c>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e32a:	d10b      	bne.n	800e344 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2204      	movs	r2, #4
 800e330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800e334:	88fb      	ldrh	r3, [r7, #6]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	68b9      	ldr	r1, [r7, #8]
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 f894 	bl	800e468 <HAL_SPI_TransmitReceive_IT>
 800e340:	4603      	mov	r3, r0
 800e342:	e089      	b.n	800e458 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d101      	bne.n	800e352 <HAL_SPI_Receive_IT+0x4a>
 800e34e:	2302      	movs	r3, #2
 800e350:	e082      	b.n	800e458 <HAL_SPI_Receive_IT+0x150>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2201      	movs	r2, #1
 800e356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b01      	cmp	r3, #1
 800e364:	d002      	beq.n	800e36c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800e366:	2302      	movs	r3, #2
 800e368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e36a:	e070      	b.n	800e44e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <HAL_SPI_Receive_IT+0x70>
 800e372:	88fb      	ldrh	r3, [r7, #6]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d102      	bne.n	800e37e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e37c:	e067      	b.n	800e44e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2204      	movs	r2, #4
 800e382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	88fa      	ldrh	r2, [r7, #6]
 800e396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	88fa      	ldrh	r2, [r7, #6]
 800e39e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e3c2:	d90b      	bls.n	800e3dc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	685a      	ldr	r2, [r3, #4]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e3d2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	4a22      	ldr	r2, [pc, #136]	; (800e460 <HAL_SPI_Receive_IT+0x158>)
 800e3d8:	64da      	str	r2, [r3, #76]	; 0x4c
 800e3da:	e00a      	b.n	800e3f2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e3ea:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4a1d      	ldr	r2, [pc, #116]	; (800e464 <HAL_SPI_Receive_IT+0x15c>)
 800e3f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3fa:	d10f      	bne.n	800e41c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e40a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e41a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e42a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e436:	2b40      	cmp	r3, #64	; 0x40
 800e438:	d008      	beq.n	800e44c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	e000      	b.n	800e44e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800e44c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e456:	7dfb      	ldrb	r3, [r7, #23]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	0800ea81 	.word	0x0800ea81
 800e464:	0800ea31 	.word	0x0800ea31

0800e468 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800e468:	b480      	push	{r7}
 800e46a:	b087      	sub	sp, #28
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e476:	2300      	movs	r3, #0
 800e478:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e480:	2b01      	cmp	r3, #1
 800e482:	d101      	bne.n	800e488 <HAL_SPI_TransmitReceive_IT+0x20>
 800e484:	2302      	movs	r3, #2
 800e486:	e091      	b.n	800e5ac <HAL_SPI_TransmitReceive_IT+0x144>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e496:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e49e:	7dbb      	ldrb	r3, [r7, #22]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d00d      	beq.n	800e4c0 <HAL_SPI_TransmitReceive_IT+0x58>
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4aa:	d106      	bne.n	800e4ba <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d102      	bne.n	800e4ba <HAL_SPI_TransmitReceive_IT+0x52>
 800e4b4:	7dbb      	ldrb	r3, [r7, #22]
 800e4b6:	2b04      	cmp	r3, #4
 800e4b8:	d002      	beq.n	800e4c0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800e4ba:	2302      	movs	r3, #2
 800e4bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4be:	e070      	b.n	800e5a2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800e4cc:	887b      	ldrh	r3, [r7, #2]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4d6:	e064      	b.n	800e5a2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	d003      	beq.n	800e4ec <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2205      	movs	r2, #5
 800e4e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	68ba      	ldr	r2, [r7, #8]
 800e4f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	887a      	ldrh	r2, [r7, #2]
 800e4fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	887a      	ldrh	r2, [r7, #2]
 800e502:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	887a      	ldrh	r2, [r7, #2]
 800e50e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	887a      	ldrh	r2, [r7, #2]
 800e516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e522:	d906      	bls.n	800e532 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4a24      	ldr	r2, [pc, #144]	; (800e5b8 <HAL_SPI_TransmitReceive_IT+0x150>)
 800e528:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	4a23      	ldr	r2, [pc, #140]	; (800e5bc <HAL_SPI_TransmitReceive_IT+0x154>)
 800e52e:	651a      	str	r2, [r3, #80]	; 0x50
 800e530:	e005      	b.n	800e53e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4a22      	ldr	r2, [pc, #136]	; (800e5c0 <HAL_SPI_TransmitReceive_IT+0x158>)
 800e536:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	4a22      	ldr	r2, [pc, #136]	; (800e5c4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800e53c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e546:	d802      	bhi.n	800e54e <HAL_SPI_TransmitReceive_IT+0xe6>
 800e548:	887b      	ldrh	r3, [r7, #2]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d908      	bls.n	800e560 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e55c:	605a      	str	r2, [r3, #4]
 800e55e:	e007      	b.n	800e570 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e56e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	685a      	ldr	r2, [r3, #4]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800e57e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e58a:	2b40      	cmp	r3, #64	; 0x40
 800e58c:	d008      	beq.n	800e5a0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	e000      	b.n	800e5a2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800e5a0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	371c      	adds	r7, #28
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr
 800e5b8:	0800e96b 	.word	0x0800e96b
 800e5bc:	0800e9d1 	.word	0x0800e9d1
 800e5c0:	0800e81b 	.word	0x0800e81b
 800e5c4:	0800e8d9 	.word	0x0800e8d9

0800e5c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	099b      	lsrs	r3, r3, #6
 800e5e4:	f003 0301 	and.w	r3, r3, #1
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10f      	bne.n	800e60c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00a      	beq.n	800e60c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	099b      	lsrs	r3, r3, #6
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	4798      	blx	r3
    return;
 800e60a:	e0d8      	b.n	800e7be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	085b      	lsrs	r3, r3, #1
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00a      	beq.n	800e62e <HAL_SPI_IRQHandler+0x66>
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	09db      	lsrs	r3, r3, #7
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	d004      	beq.n	800e62e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	4798      	blx	r3
    return;
 800e62c:	e0c7      	b.n	800e7be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	095b      	lsrs	r3, r3, #5
 800e632:	f003 0301 	and.w	r3, r3, #1
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10c      	bne.n	800e654 <HAL_SPI_IRQHandler+0x8c>
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	099b      	lsrs	r3, r3, #6
 800e63e:	f003 0301 	and.w	r3, r3, #1
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	0a1b      	lsrs	r3, r3, #8
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 80b5 	beq.w	800e7be <HAL_SPI_IRQHandler+0x1f6>
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	095b      	lsrs	r3, r3, #5
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 80ae 	beq.w	800e7be <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	099b      	lsrs	r3, r3, #6
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d023      	beq.n	800e6b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b03      	cmp	r3, #3
 800e678:	d011      	beq.n	800e69e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e67e:	f043 0204 	orr.w	r2, r3, #4
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	617b      	str	r3, [r7, #20]
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	e00b      	b.n	800e6b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e69e:	2300      	movs	r3, #0
 800e6a0:	613b      	str	r3, [r7, #16]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	613b      	str	r3, [r7, #16]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	613b      	str	r3, [r7, #16]
 800e6b2:	693b      	ldr	r3, [r7, #16]
        return;
 800e6b4:	e083      	b.n	800e7be <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	095b      	lsrs	r3, r3, #5
 800e6ba:	f003 0301 	and.w	r3, r3, #1
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d014      	beq.n	800e6ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6c6:	f043 0201 	orr.w	r2, r3, #1
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	0a1b      	lsrs	r3, r3, #8
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00c      	beq.n	800e712 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6fc:	f043 0208 	orr.w	r2, r3, #8
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e704:	2300      	movs	r3, #0
 800e706:	60bb      	str	r3, [r7, #8]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	60bb      	str	r3, [r7, #8]
 800e710:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e716:	2b00      	cmp	r3, #0
 800e718:	d050      	beq.n	800e7bc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e728:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2201      	movs	r2, #1
 800e72e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	f003 0302 	and.w	r3, r3, #2
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d104      	bne.n	800e746 <HAL_SPI_IRQHandler+0x17e>
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	f003 0301 	and.w	r3, r3, #1
 800e742:	2b00      	cmp	r3, #0
 800e744:	d034      	beq.n	800e7b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	685a      	ldr	r2, [r3, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f022 0203 	bic.w	r2, r2, #3
 800e754:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d011      	beq.n	800e782 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e762:	4a18      	ldr	r2, [pc, #96]	; (800e7c4 <HAL_SPI_IRQHandler+0x1fc>)
 800e764:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fc f8c8 	bl	800a900 <HAL_DMA_Abort_IT>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d005      	beq.n	800e782 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e77a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e786:	2b00      	cmp	r3, #0
 800e788:	d016      	beq.n	800e7b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78e:	4a0d      	ldr	r2, [pc, #52]	; (800e7c4 <HAL_SPI_IRQHandler+0x1fc>)
 800e790:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e796:	4618      	mov	r0, r3
 800e798:	f7fc f8b2 	bl	800a900 <HAL_DMA_Abort_IT>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800e7ae:	e003      	b.n	800e7b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f813 	bl	800e7dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e7b6:	e000      	b.n	800e7ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e7b8:	bf00      	nop
    return;
 800e7ba:	bf00      	nop
 800e7bc:	bf00      	nop
  }
}
 800e7be:	3720      	adds	r7, #32
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	0800e7f1 	.word	0x0800e7f1

0800e7c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2200      	movs	r2, #0
 800e80a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7ff ffe5 	bl	800e7dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e812:	bf00      	nop
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e828:	b29b      	uxth	r3, r3
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d923      	bls.n	800e876 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68da      	ldr	r2, [r3, #12]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e838:	b292      	uxth	r2, r2
 800e83a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e840:	1c9a      	adds	r2, r3, #2
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	3b02      	subs	r3, #2
 800e850:	b29a      	uxth	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e85e:	b29b      	uxth	r3, r3
 800e860:	2b01      	cmp	r3, #1
 800e862:	d11f      	bne.n	800e8a4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	685a      	ldr	r2, [r3, #4]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e872:	605a      	str	r2, [r3, #4]
 800e874:	e016      	b.n	800e8a4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f103 020c 	add.w	r2, r3, #12
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	7812      	ldrb	r2, [r2, #0]
 800e884:	b2d2      	uxtb	r2, r2
 800e886:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88c:	1c5a      	adds	r2, r3, #1
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e898:	b29b      	uxth	r3, r3
 800e89a:	3b01      	subs	r3, #1
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d10f      	bne.n	800e8d0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	685a      	ldr	r2, [r3, #4]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e8be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d102      	bne.n	800e8d0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 faf8 	bl	800eec0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d912      	bls.n	800e910 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ee:	881a      	ldrh	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8fa:	1c9a      	adds	r2, r3, #2
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e904:	b29b      	uxth	r3, r3
 800e906:	3b02      	subs	r3, #2
 800e908:	b29a      	uxth	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e90e:	e012      	b.n	800e936 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	330c      	adds	r3, #12
 800e91a:	7812      	ldrb	r2, [r2, #0]
 800e91c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	3b01      	subs	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d110      	bne.n	800e962 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e94e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e956:	b29b      	uxth	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d102      	bne.n	800e962 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 faaf 	bl	800eec0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e962:	bf00      	nop
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b082      	sub	sp, #8
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97c:	b292      	uxth	r2, r2
 800e97e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e984:	1c9a      	adds	r2, r3, #2
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e990:	b29b      	uxth	r3, r3
 800e992:	3b01      	subs	r3, #1
 800e994:	b29a      	uxth	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d10f      	bne.n	800e9c8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685a      	ldr	r2, [r3, #4]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d102      	bne.n	800e9c8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 fa7c 	bl	800eec0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e9c8:	bf00      	nop
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9dc:	881a      	ldrh	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9e8:	1c9a      	adds	r2, r3, #2
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d110      	bne.n	800ea28 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea14:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d102      	bne.n	800ea28 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fa4c 	bl	800eec0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f103 020c 	add.w	r2, r3, #12
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea44:	7812      	ldrb	r2, [r2, #0]
 800ea46:	b2d2      	uxtb	r2, r2
 800ea48:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea4e:	1c5a      	adds	r2, r3, #1
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d102      	bne.n	800ea78 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fa66 	bl	800ef44 <SPI_CloseRx_ISR>
  }
}
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68da      	ldr	r2, [r3, #12]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea92:	b292      	uxth	r2, r2
 800ea94:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea9a:	1c9a      	adds	r2, r3, #2
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d102      	bne.n	800eac4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 fa40 	bl	800ef44 <SPI_CloseRx_ISR>
  }
}
 800eac4:	bf00      	nop
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	330c      	adds	r3, #12
 800eade:	7812      	ldrb	r2, [r2, #0]
 800eae0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d102      	bne.n	800eb0a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fa4d 	bl	800efa4 <SPI_CloseTx_ISR>
  }
}
 800eb0a:	bf00      	nop
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b082      	sub	sp, #8
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1e:	881a      	ldrh	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2a:	1c9a      	adds	r2, r3, #2
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	3b01      	subs	r3, #1
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d102      	bne.n	800eb4e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fa2b 	bl	800efa4 <SPI_CloseTx_ISR>
  }
}
 800eb4e:	bf00      	nop
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
	...

0800eb58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b088      	sub	sp, #32
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	603b      	str	r3, [r7, #0]
 800eb64:	4613      	mov	r3, r2
 800eb66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eb68:	f7fb fc7e 	bl	800a468 <HAL_GetTick>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb70:	1a9b      	subs	r3, r3, r2
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	4413      	add	r3, r2
 800eb76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eb78:	f7fb fc76 	bl	800a468 <HAL_GetTick>
 800eb7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eb7e:	4b39      	ldr	r3, [pc, #228]	; (800ec64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	015b      	lsls	r3, r3, #5
 800eb84:	0d1b      	lsrs	r3, r3, #20
 800eb86:	69fa      	ldr	r2, [r7, #28]
 800eb88:	fb02 f303 	mul.w	r3, r2, r3
 800eb8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb8e:	e054      	b.n	800ec3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb96:	d050      	beq.n	800ec3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb98:	f7fb fc66 	bl	800a468 <HAL_GetTick>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	69fa      	ldr	r2, [r7, #28]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d902      	bls.n	800ebae <SPI_WaitFlagStateUntilTimeout+0x56>
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d13d      	bne.n	800ec2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ebbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebc6:	d111      	bne.n	800ebec <SPI_WaitFlagStateUntilTimeout+0x94>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebd0:	d004      	beq.n	800ebdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebda:	d107      	bne.n	800ebec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebf4:	d10f      	bne.n	800ec16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	e017      	b.n	800ec5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ec30:	2300      	movs	r3, #0
 800ec32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	3b01      	subs	r3, #1
 800ec38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	4013      	ands	r3, r2
 800ec44:	68ba      	ldr	r2, [r7, #8]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	bf0c      	ite	eq
 800ec4a:	2301      	moveq	r3, #1
 800ec4c:	2300      	movne	r3, #0
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	461a      	mov	r2, r3
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d19b      	bne.n	800eb90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3720      	adds	r7, #32
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	2000018c 	.word	0x2000018c

0800ec68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
 800ec74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ec76:	f7fb fbf7 	bl	800a468 <HAL_GetTick>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	1a9b      	subs	r3, r3, r2
 800ec80:	683a      	ldr	r2, [r7, #0]
 800ec82:	4413      	add	r3, r2
 800ec84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ec86:	f7fb fbef 	bl	800a468 <HAL_GetTick>
 800ec8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ec8c:	4b3c      	ldr	r3, [pc, #240]	; (800ed80 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	4613      	mov	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4413      	add	r3, r2
 800ec96:	00da      	lsls	r2, r3, #3
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	0d1b      	lsrs	r3, r3, #20
 800ec9c:	69fa      	ldr	r2, [r7, #28]
 800ec9e:	fb02 f303 	mul.w	r3, r2, r3
 800eca2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800eca4:	e05f      	b.n	800ed66 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ecac:	d106      	bne.n	800ecbc <SPI_WaitFifoStateUntilTimeout+0x54>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d103      	bne.n	800ecbc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	330c      	adds	r3, #12
 800ecba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc2:	d050      	beq.n	800ed66 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ecc4:	f7fb fbd0 	bl	800a468 <HAL_GetTick>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	69fa      	ldr	r2, [r7, #28]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d902      	bls.n	800ecda <SPI_WaitFifoStateUntilTimeout+0x72>
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d13d      	bne.n	800ed56 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ece8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecf2:	d111      	bne.n	800ed18 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecfc:	d004      	beq.n	800ed08 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed06:	d107      	bne.n	800ed18 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed20:	d10f      	bne.n	800ed42 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed30:	601a      	str	r2, [r3, #0]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2201      	movs	r2, #1
 800ed46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ed52:	2303      	movs	r3, #3
 800ed54:	e010      	b.n	800ed78 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	3b01      	subs	r3, #1
 800ed64:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	4013      	ands	r3, r2
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d197      	bne.n	800eca6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3720      	adds	r7, #32
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	2000018c 	.word	0x2000018c

0800ed84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af02      	add	r7, sp, #8
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed98:	d111      	bne.n	800edbe <SPI_EndRxTransaction+0x3a>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eda2:	d004      	beq.n	800edae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edac:	d107      	bne.n	800edbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edbc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	9300      	str	r3, [sp, #0]
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	2200      	movs	r2, #0
 800edc6:	2180      	movs	r1, #128	; 0x80
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f7ff fec5 	bl	800eb58 <SPI_WaitFlagStateUntilTimeout>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d007      	beq.n	800ede4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edd8:	f043 0220 	orr.w	r2, r3, #32
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e023      	b.n	800ee2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edec:	d11d      	bne.n	800ee2a <SPI_EndRxTransaction+0xa6>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf6:	d004      	beq.n	800ee02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee00:	d113      	bne.n	800ee2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7ff ff2a 	bl	800ec68 <SPI_WaitFifoStateUntilTimeout>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d007      	beq.n	800ee2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee1e:	f043 0220 	orr.w	r2, r3, #32
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e000      	b.n	800ee2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af02      	add	r7, sp, #8
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f7ff ff0b 	bl	800ec68 <SPI_WaitFifoStateUntilTimeout>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee5c:	f043 0220 	orr.w	r2, r3, #32
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee64:	2303      	movs	r3, #3
 800ee66:	e027      	b.n	800eeb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	2180      	movs	r1, #128	; 0x80
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f7ff fe70 	bl	800eb58 <SPI_WaitFlagStateUntilTimeout>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d007      	beq.n	800ee8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee82:	f043 0220 	orr.w	r2, r3, #32
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee8a:	2303      	movs	r3, #3
 800ee8c:	e014      	b.n	800eeb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f7ff fee4 	bl	800ec68 <SPI_WaitFifoStateUntilTimeout>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d007      	beq.n	800eeb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eeaa:	f043 0220 	orr.w	r2, r3, #32
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	e000      	b.n	800eeb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eec8:	f7fb face 	bl	800a468 <HAL_GetTick>
 800eecc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0220 	bic.w	r2, r2, #32
 800eedc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	2164      	movs	r1, #100	; 0x64
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff ffa6 	bl	800ee34 <SPI_EndRxTxTransaction>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d005      	beq.n	800eefa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eef2:	f043 0220 	orr.w	r2, r3, #32
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d115      	bne.n	800ef2e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b04      	cmp	r3, #4
 800ef0c:	d107      	bne.n	800ef1e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7f3 fa96 	bl	8002448 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ef1c:	e00e      	b.n	800ef3c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2201      	movs	r2, #1
 800ef22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7ff fc4e 	bl	800e7c8 <HAL_SPI_TxRxCpltCallback>
}
 800ef2c:	e006      	b.n	800ef3c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2201      	movs	r2, #1
 800ef32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7ff fc50 	bl	800e7dc <HAL_SPI_ErrorCallback>
}
 800ef3c:	bf00      	nop
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	685a      	ldr	r2, [r3, #4]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ef5a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ef5c:	f7fb fa84 	bl	800a468 <HAL_GetTick>
 800ef60:	4603      	mov	r3, r0
 800ef62:	461a      	mov	r2, r3
 800ef64:	2164      	movs	r1, #100	; 0x64
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7ff ff0c 	bl	800ed84 <SPI_EndRxTransaction>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d005      	beq.n	800ef7e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef76:	f043 0220 	orr.w	r2, r3, #32
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2201      	movs	r2, #1
 800ef82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d103      	bne.n	800ef96 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7f3 fa5a 	bl	8002448 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ef94:	e002      	b.n	800ef9c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7ff fc20 	bl	800e7dc <HAL_SPI_ErrorCallback>
}
 800ef9c:	bf00      	nop
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efac:	f7fb fa5c 	bl	800a468 <HAL_GetTick>
 800efb0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	685a      	ldr	r2, [r3, #4]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800efc0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	2164      	movs	r1, #100	; 0x64
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7ff ff34 	bl	800ee34 <SPI_EndRxTxTransaction>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d005      	beq.n	800efde <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efd6:	f043 0220 	orr.w	r2, r3, #32
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10a      	bne.n	800effc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efe6:	2300      	movs	r3, #0
 800efe8:	60bb      	str	r3, [r7, #8]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	60bb      	str	r3, [r7, #8]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	60bb      	str	r3, [r7, #8]
 800effa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d003      	beq.n	800f014 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7ff fbe5 	bl	800e7dc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800f012:	e002      	b.n	800f01a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7f3 fa2b 	bl	8002470 <HAL_SPI_TxCpltCallback>
}
 800f01a:	bf00      	nop
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b082      	sub	sp, #8
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	e040      	b.n	800f0b6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d106      	bne.n	800f04a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7f5 f803 	bl	8004050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2224      	movs	r2, #36	; 0x24
 800f04e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 0201 	bic.w	r2, r2, #1
 800f05e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f8bf 	bl	800f1e4 <UART_SetConfig>
 800f066:	4603      	mov	r3, r0
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d101      	bne.n	800f070 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e022      	b.n	800f0b6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	d002      	beq.n	800f07e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fb3d 	bl	800f6f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f08c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	689a      	ldr	r2, [r3, #8]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f09c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f042 0201 	orr.w	r2, r2, #1
 800f0ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 fbc4 	bl	800f83c <UART_CheckIdleState>
 800f0b4:	4603      	mov	r3, r0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b08a      	sub	sp, #40	; 0x28
 800f0c2:	af02      	add	r7, sp, #8
 800f0c4:	60f8      	str	r0, [r7, #12]
 800f0c6:	60b9      	str	r1, [r7, #8]
 800f0c8:	603b      	str	r3, [r7, #0]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d2:	2b20      	cmp	r3, #32
 800f0d4:	f040 8081 	bne.w	800f1da <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <HAL_UART_Transmit+0x26>
 800f0de:	88fb      	ldrh	r3, [r7, #6]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d101      	bne.n	800f0e8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e079      	b.n	800f1dc <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d101      	bne.n	800f0f6 <HAL_UART_Transmit+0x38>
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	e072      	b.n	800f1dc <HAL_UART_Transmit+0x11e>
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2221      	movs	r2, #33	; 0x21
 800f108:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f10a:	f7fb f9ad 	bl	800a468 <HAL_GetTick>
 800f10e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	88fa      	ldrh	r2, [r7, #6]
 800f114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	88fa      	ldrh	r2, [r7, #6]
 800f11c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f128:	d108      	bne.n	800f13c <HAL_UART_Transmit+0x7e>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d104      	bne.n	800f13c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	61bb      	str	r3, [r7, #24]
 800f13a:	e003      	b.n	800f144 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f14c:	e02d      	b.n	800f1aa <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2200      	movs	r2, #0
 800f156:	2180      	movs	r1, #128	; 0x80
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 fbb4 	bl	800f8c6 <UART_WaitOnFlagUntilTimeout>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800f164:	2303      	movs	r3, #3
 800f166:	e039      	b.n	800f1dc <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10b      	bne.n	800f186 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	881a      	ldrh	r2, [r3, #0]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f17a:	b292      	uxth	r2, r2
 800f17c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	3302      	adds	r3, #2
 800f182:	61bb      	str	r3, [r7, #24]
 800f184:	e008      	b.n	800f198 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	781a      	ldrb	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	b292      	uxth	r2, r2
 800f190:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	3301      	adds	r3, #1
 800f196:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1cb      	bne.n	800f14e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	2140      	movs	r1, #64	; 0x40
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f000 fb80 	bl	800f8c6 <UART_WaitOnFlagUntilTimeout>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d001      	beq.n	800f1d0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	e005      	b.n	800f1dc <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2220      	movs	r2, #32
 800f1d4:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e000      	b.n	800f1dc <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800f1da:	2302      	movs	r3, #2
  }
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3720      	adds	r7, #32
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f1e8:	b088      	sub	sp, #32
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	689a      	ldr	r2, [r3, #8]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	691b      	ldr	r3, [r3, #16]
 800f1fa:	431a      	orrs	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	431a      	orrs	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	69db      	ldr	r3, [r3, #28]
 800f206:	4313      	orrs	r3, r2
 800f208:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	4bac      	ldr	r3, [pc, #688]	; (800f4c4 <UART_SetConfig+0x2e0>)
 800f212:	4013      	ands	r3, r2
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	6812      	ldr	r2, [r2, #0]
 800f218:	69f9      	ldr	r1, [r7, #28]
 800f21a:	430b      	orrs	r3, r1
 800f21c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68da      	ldr	r2, [r3, #12]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	430a      	orrs	r2, r1
 800f232:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	699b      	ldr	r3, [r3, #24]
 800f238:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4aa2      	ldr	r2, [pc, #648]	; (800f4c8 <UART_SetConfig+0x2e4>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d004      	beq.n	800f24e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6a1b      	ldr	r3, [r3, #32]
 800f248:	69fa      	ldr	r2, [r7, #28]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	69fa      	ldr	r2, [r7, #28]
 800f25e:	430a      	orrs	r2, r1
 800f260:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a99      	ldr	r2, [pc, #612]	; (800f4cc <UART_SetConfig+0x2e8>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d121      	bne.n	800f2b0 <UART_SetConfig+0xcc>
 800f26c:	4b98      	ldr	r3, [pc, #608]	; (800f4d0 <UART_SetConfig+0x2ec>)
 800f26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f272:	f003 0303 	and.w	r3, r3, #3
 800f276:	2b03      	cmp	r3, #3
 800f278:	d816      	bhi.n	800f2a8 <UART_SetConfig+0xc4>
 800f27a:	a201      	add	r2, pc, #4	; (adr r2, 800f280 <UART_SetConfig+0x9c>)
 800f27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f280:	0800f291 	.word	0x0800f291
 800f284:	0800f29d 	.word	0x0800f29d
 800f288:	0800f297 	.word	0x0800f297
 800f28c:	0800f2a3 	.word	0x0800f2a3
 800f290:	2301      	movs	r3, #1
 800f292:	76fb      	strb	r3, [r7, #27]
 800f294:	e0e8      	b.n	800f468 <UART_SetConfig+0x284>
 800f296:	2302      	movs	r3, #2
 800f298:	76fb      	strb	r3, [r7, #27]
 800f29a:	e0e5      	b.n	800f468 <UART_SetConfig+0x284>
 800f29c:	2304      	movs	r3, #4
 800f29e:	76fb      	strb	r3, [r7, #27]
 800f2a0:	e0e2      	b.n	800f468 <UART_SetConfig+0x284>
 800f2a2:	2308      	movs	r3, #8
 800f2a4:	76fb      	strb	r3, [r7, #27]
 800f2a6:	e0df      	b.n	800f468 <UART_SetConfig+0x284>
 800f2a8:	2310      	movs	r3, #16
 800f2aa:	76fb      	strb	r3, [r7, #27]
 800f2ac:	bf00      	nop
 800f2ae:	e0db      	b.n	800f468 <UART_SetConfig+0x284>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a87      	ldr	r2, [pc, #540]	; (800f4d4 <UART_SetConfig+0x2f0>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d134      	bne.n	800f324 <UART_SetConfig+0x140>
 800f2ba:	4b85      	ldr	r3, [pc, #532]	; (800f4d0 <UART_SetConfig+0x2ec>)
 800f2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2c0:	f003 030c 	and.w	r3, r3, #12
 800f2c4:	2b0c      	cmp	r3, #12
 800f2c6:	d829      	bhi.n	800f31c <UART_SetConfig+0x138>
 800f2c8:	a201      	add	r2, pc, #4	; (adr r2, 800f2d0 <UART_SetConfig+0xec>)
 800f2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ce:	bf00      	nop
 800f2d0:	0800f305 	.word	0x0800f305
 800f2d4:	0800f31d 	.word	0x0800f31d
 800f2d8:	0800f31d 	.word	0x0800f31d
 800f2dc:	0800f31d 	.word	0x0800f31d
 800f2e0:	0800f311 	.word	0x0800f311
 800f2e4:	0800f31d 	.word	0x0800f31d
 800f2e8:	0800f31d 	.word	0x0800f31d
 800f2ec:	0800f31d 	.word	0x0800f31d
 800f2f0:	0800f30b 	.word	0x0800f30b
 800f2f4:	0800f31d 	.word	0x0800f31d
 800f2f8:	0800f31d 	.word	0x0800f31d
 800f2fc:	0800f31d 	.word	0x0800f31d
 800f300:	0800f317 	.word	0x0800f317
 800f304:	2300      	movs	r3, #0
 800f306:	76fb      	strb	r3, [r7, #27]
 800f308:	e0ae      	b.n	800f468 <UART_SetConfig+0x284>
 800f30a:	2302      	movs	r3, #2
 800f30c:	76fb      	strb	r3, [r7, #27]
 800f30e:	e0ab      	b.n	800f468 <UART_SetConfig+0x284>
 800f310:	2304      	movs	r3, #4
 800f312:	76fb      	strb	r3, [r7, #27]
 800f314:	e0a8      	b.n	800f468 <UART_SetConfig+0x284>
 800f316:	2308      	movs	r3, #8
 800f318:	76fb      	strb	r3, [r7, #27]
 800f31a:	e0a5      	b.n	800f468 <UART_SetConfig+0x284>
 800f31c:	2310      	movs	r3, #16
 800f31e:	76fb      	strb	r3, [r7, #27]
 800f320:	bf00      	nop
 800f322:	e0a1      	b.n	800f468 <UART_SetConfig+0x284>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a6b      	ldr	r2, [pc, #428]	; (800f4d8 <UART_SetConfig+0x2f4>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d120      	bne.n	800f370 <UART_SetConfig+0x18c>
 800f32e:	4b68      	ldr	r3, [pc, #416]	; (800f4d0 <UART_SetConfig+0x2ec>)
 800f330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f334:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f338:	2b10      	cmp	r3, #16
 800f33a:	d00f      	beq.n	800f35c <UART_SetConfig+0x178>
 800f33c:	2b10      	cmp	r3, #16
 800f33e:	d802      	bhi.n	800f346 <UART_SetConfig+0x162>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d005      	beq.n	800f350 <UART_SetConfig+0x16c>
 800f344:	e010      	b.n	800f368 <UART_SetConfig+0x184>
 800f346:	2b20      	cmp	r3, #32
 800f348:	d005      	beq.n	800f356 <UART_SetConfig+0x172>
 800f34a:	2b30      	cmp	r3, #48	; 0x30
 800f34c:	d009      	beq.n	800f362 <UART_SetConfig+0x17e>
 800f34e:	e00b      	b.n	800f368 <UART_SetConfig+0x184>
 800f350:	2300      	movs	r3, #0
 800f352:	76fb      	strb	r3, [r7, #27]
 800f354:	e088      	b.n	800f468 <UART_SetConfig+0x284>
 800f356:	2302      	movs	r3, #2
 800f358:	76fb      	strb	r3, [r7, #27]
 800f35a:	e085      	b.n	800f468 <UART_SetConfig+0x284>
 800f35c:	2304      	movs	r3, #4
 800f35e:	76fb      	strb	r3, [r7, #27]
 800f360:	e082      	b.n	800f468 <UART_SetConfig+0x284>
 800f362:	2308      	movs	r3, #8
 800f364:	76fb      	strb	r3, [r7, #27]
 800f366:	e07f      	b.n	800f468 <UART_SetConfig+0x284>
 800f368:	2310      	movs	r3, #16
 800f36a:	76fb      	strb	r3, [r7, #27]
 800f36c:	bf00      	nop
 800f36e:	e07b      	b.n	800f468 <UART_SetConfig+0x284>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a59      	ldr	r2, [pc, #356]	; (800f4dc <UART_SetConfig+0x2f8>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d120      	bne.n	800f3bc <UART_SetConfig+0x1d8>
 800f37a:	4b55      	ldr	r3, [pc, #340]	; (800f4d0 <UART_SetConfig+0x2ec>)
 800f37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f380:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f384:	2b40      	cmp	r3, #64	; 0x40
 800f386:	d00f      	beq.n	800f3a8 <UART_SetConfig+0x1c4>
 800f388:	2b40      	cmp	r3, #64	; 0x40
 800f38a:	d802      	bhi.n	800f392 <UART_SetConfig+0x1ae>
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d005      	beq.n	800f39c <UART_SetConfig+0x1b8>
 800f390:	e010      	b.n	800f3b4 <UART_SetConfig+0x1d0>
 800f392:	2b80      	cmp	r3, #128	; 0x80
 800f394:	d005      	beq.n	800f3a2 <UART_SetConfig+0x1be>
 800f396:	2bc0      	cmp	r3, #192	; 0xc0
 800f398:	d009      	beq.n	800f3ae <UART_SetConfig+0x1ca>
 800f39a:	e00b      	b.n	800f3b4 <UART_SetConfig+0x1d0>
 800f39c:	2300      	movs	r3, #0
 800f39e:	76fb      	strb	r3, [r7, #27]
 800f3a0:	e062      	b.n	800f468 <UART_SetConfig+0x284>
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	76fb      	strb	r3, [r7, #27]
 800f3a6:	e05f      	b.n	800f468 <UART_SetConfig+0x284>
 800f3a8:	2304      	movs	r3, #4
 800f3aa:	76fb      	strb	r3, [r7, #27]
 800f3ac:	e05c      	b.n	800f468 <UART_SetConfig+0x284>
 800f3ae:	2308      	movs	r3, #8
 800f3b0:	76fb      	strb	r3, [r7, #27]
 800f3b2:	e059      	b.n	800f468 <UART_SetConfig+0x284>
 800f3b4:	2310      	movs	r3, #16
 800f3b6:	76fb      	strb	r3, [r7, #27]
 800f3b8:	bf00      	nop
 800f3ba:	e055      	b.n	800f468 <UART_SetConfig+0x284>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a47      	ldr	r2, [pc, #284]	; (800f4e0 <UART_SetConfig+0x2fc>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d124      	bne.n	800f410 <UART_SetConfig+0x22c>
 800f3c6:	4b42      	ldr	r3, [pc, #264]	; (800f4d0 <UART_SetConfig+0x2ec>)
 800f3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3d4:	d012      	beq.n	800f3fc <UART_SetConfig+0x218>
 800f3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3da:	d802      	bhi.n	800f3e2 <UART_SetConfig+0x1fe>
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d007      	beq.n	800f3f0 <UART_SetConfig+0x20c>
 800f3e0:	e012      	b.n	800f408 <UART_SetConfig+0x224>
 800f3e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3e6:	d006      	beq.n	800f3f6 <UART_SetConfig+0x212>
 800f3e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3ec:	d009      	beq.n	800f402 <UART_SetConfig+0x21e>
 800f3ee:	e00b      	b.n	800f408 <UART_SetConfig+0x224>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	76fb      	strb	r3, [r7, #27]
 800f3f4:	e038      	b.n	800f468 <UART_SetConfig+0x284>
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	76fb      	strb	r3, [r7, #27]
 800f3fa:	e035      	b.n	800f468 <UART_SetConfig+0x284>
 800f3fc:	2304      	movs	r3, #4
 800f3fe:	76fb      	strb	r3, [r7, #27]
 800f400:	e032      	b.n	800f468 <UART_SetConfig+0x284>
 800f402:	2308      	movs	r3, #8
 800f404:	76fb      	strb	r3, [r7, #27]
 800f406:	e02f      	b.n	800f468 <UART_SetConfig+0x284>
 800f408:	2310      	movs	r3, #16
 800f40a:	76fb      	strb	r3, [r7, #27]
 800f40c:	bf00      	nop
 800f40e:	e02b      	b.n	800f468 <UART_SetConfig+0x284>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a2c      	ldr	r2, [pc, #176]	; (800f4c8 <UART_SetConfig+0x2e4>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d124      	bne.n	800f464 <UART_SetConfig+0x280>
 800f41a:	4b2d      	ldr	r3, [pc, #180]	; (800f4d0 <UART_SetConfig+0x2ec>)
 800f41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f428:	d012      	beq.n	800f450 <UART_SetConfig+0x26c>
 800f42a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f42e:	d802      	bhi.n	800f436 <UART_SetConfig+0x252>
 800f430:	2b00      	cmp	r3, #0
 800f432:	d007      	beq.n	800f444 <UART_SetConfig+0x260>
 800f434:	e012      	b.n	800f45c <UART_SetConfig+0x278>
 800f436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f43a:	d006      	beq.n	800f44a <UART_SetConfig+0x266>
 800f43c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f440:	d009      	beq.n	800f456 <UART_SetConfig+0x272>
 800f442:	e00b      	b.n	800f45c <UART_SetConfig+0x278>
 800f444:	2300      	movs	r3, #0
 800f446:	76fb      	strb	r3, [r7, #27]
 800f448:	e00e      	b.n	800f468 <UART_SetConfig+0x284>
 800f44a:	2302      	movs	r3, #2
 800f44c:	76fb      	strb	r3, [r7, #27]
 800f44e:	e00b      	b.n	800f468 <UART_SetConfig+0x284>
 800f450:	2304      	movs	r3, #4
 800f452:	76fb      	strb	r3, [r7, #27]
 800f454:	e008      	b.n	800f468 <UART_SetConfig+0x284>
 800f456:	2308      	movs	r3, #8
 800f458:	76fb      	strb	r3, [r7, #27]
 800f45a:	e005      	b.n	800f468 <UART_SetConfig+0x284>
 800f45c:	2310      	movs	r3, #16
 800f45e:	76fb      	strb	r3, [r7, #27]
 800f460:	bf00      	nop
 800f462:	e001      	b.n	800f468 <UART_SetConfig+0x284>
 800f464:	2310      	movs	r3, #16
 800f466:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a16      	ldr	r2, [pc, #88]	; (800f4c8 <UART_SetConfig+0x2e4>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	f040 8087 	bne.w	800f582 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f474:	7efb      	ldrb	r3, [r7, #27]
 800f476:	2b08      	cmp	r3, #8
 800f478:	d836      	bhi.n	800f4e8 <UART_SetConfig+0x304>
 800f47a:	a201      	add	r2, pc, #4	; (adr r2, 800f480 <UART_SetConfig+0x29c>)
 800f47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f480:	0800f4a5 	.word	0x0800f4a5
 800f484:	0800f4e9 	.word	0x0800f4e9
 800f488:	0800f4ad 	.word	0x0800f4ad
 800f48c:	0800f4e9 	.word	0x0800f4e9
 800f490:	0800f4b3 	.word	0x0800f4b3
 800f494:	0800f4e9 	.word	0x0800f4e9
 800f498:	0800f4e9 	.word	0x0800f4e9
 800f49c:	0800f4e9 	.word	0x0800f4e9
 800f4a0:	0800f4bb 	.word	0x0800f4bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4a4:	f7fd fd48 	bl	800cf38 <HAL_RCC_GetPCLK1Freq>
 800f4a8:	6178      	str	r0, [r7, #20]
        break;
 800f4aa:	e022      	b.n	800f4f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f4ac:	4b0d      	ldr	r3, [pc, #52]	; (800f4e4 <UART_SetConfig+0x300>)
 800f4ae:	617b      	str	r3, [r7, #20]
        break;
 800f4b0:	e01f      	b.n	800f4f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f4b2:	f7fd fcab 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800f4b6:	6178      	str	r0, [r7, #20]
        break;
 800f4b8:	e01b      	b.n	800f4f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4be:	617b      	str	r3, [r7, #20]
        break;
 800f4c0:	e017      	b.n	800f4f2 <UART_SetConfig+0x30e>
 800f4c2:	bf00      	nop
 800f4c4:	efff69f3 	.word	0xefff69f3
 800f4c8:	40008000 	.word	0x40008000
 800f4cc:	40013800 	.word	0x40013800
 800f4d0:	40021000 	.word	0x40021000
 800f4d4:	40004400 	.word	0x40004400
 800f4d8:	40004800 	.word	0x40004800
 800f4dc:	40004c00 	.word	0x40004c00
 800f4e0:	40005000 	.word	0x40005000
 800f4e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	76bb      	strb	r3, [r7, #26]
        break;
 800f4f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f000 80f1 	beq.w	800f6dc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	685a      	ldr	r2, [r3, #4]
 800f4fe:	4613      	mov	r3, r2
 800f500:	005b      	lsls	r3, r3, #1
 800f502:	4413      	add	r3, r2
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	429a      	cmp	r2, r3
 800f508:	d305      	bcc.n	800f516 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	429a      	cmp	r2, r3
 800f514:	d902      	bls.n	800f51c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	76bb      	strb	r3, [r7, #26]
 800f51a:	e0df      	b.n	800f6dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	4619      	mov	r1, r3
 800f520:	f04f 0200 	mov.w	r2, #0
 800f524:	f04f 0300 	mov.w	r3, #0
 800f528:	f04f 0400 	mov.w	r4, #0
 800f52c:	0214      	lsls	r4, r2, #8
 800f52e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f532:	020b      	lsls	r3, r1, #8
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	6852      	ldr	r2, [r2, #4]
 800f538:	0852      	lsrs	r2, r2, #1
 800f53a:	4611      	mov	r1, r2
 800f53c:	f04f 0200 	mov.w	r2, #0
 800f540:	eb13 0b01 	adds.w	fp, r3, r1
 800f544:	eb44 0c02 	adc.w	ip, r4, r2
 800f548:	4658      	mov	r0, fp
 800f54a:	4661      	mov	r1, ip
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	f04f 0400 	mov.w	r4, #0
 800f554:	461a      	mov	r2, r3
 800f556:	4623      	mov	r3, r4
 800f558:	f7f1 fb26 	bl	8000ba8 <__aeabi_uldivmod>
 800f55c:	4603      	mov	r3, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f568:	d308      	bcc.n	800f57c <UART_SetConfig+0x398>
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f570:	d204      	bcs.n	800f57c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	60da      	str	r2, [r3, #12]
 800f57a:	e0af      	b.n	800f6dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	76bb      	strb	r3, [r7, #26]
 800f580:	e0ac      	b.n	800f6dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	69db      	ldr	r3, [r3, #28]
 800f586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f58a:	d15b      	bne.n	800f644 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800f58c:	7efb      	ldrb	r3, [r7, #27]
 800f58e:	2b08      	cmp	r3, #8
 800f590:	d827      	bhi.n	800f5e2 <UART_SetConfig+0x3fe>
 800f592:	a201      	add	r2, pc, #4	; (adr r2, 800f598 <UART_SetConfig+0x3b4>)
 800f594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f598:	0800f5bd 	.word	0x0800f5bd
 800f59c:	0800f5c5 	.word	0x0800f5c5
 800f5a0:	0800f5cd 	.word	0x0800f5cd
 800f5a4:	0800f5e3 	.word	0x0800f5e3
 800f5a8:	0800f5d3 	.word	0x0800f5d3
 800f5ac:	0800f5e3 	.word	0x0800f5e3
 800f5b0:	0800f5e3 	.word	0x0800f5e3
 800f5b4:	0800f5e3 	.word	0x0800f5e3
 800f5b8:	0800f5db 	.word	0x0800f5db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5bc:	f7fd fcbc 	bl	800cf38 <HAL_RCC_GetPCLK1Freq>
 800f5c0:	6178      	str	r0, [r7, #20]
        break;
 800f5c2:	e013      	b.n	800f5ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5c4:	f7fd fcce 	bl	800cf64 <HAL_RCC_GetPCLK2Freq>
 800f5c8:	6178      	str	r0, [r7, #20]
        break;
 800f5ca:	e00f      	b.n	800f5ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5cc:	4b49      	ldr	r3, [pc, #292]	; (800f6f4 <UART_SetConfig+0x510>)
 800f5ce:	617b      	str	r3, [r7, #20]
        break;
 800f5d0:	e00c      	b.n	800f5ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5d2:	f7fd fc1b 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800f5d6:	6178      	str	r0, [r7, #20]
        break;
 800f5d8:	e008      	b.n	800f5ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5de:	617b      	str	r3, [r7, #20]
        break;
 800f5e0:	e004      	b.n	800f5ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	76bb      	strb	r3, [r7, #26]
        break;
 800f5ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d074      	beq.n	800f6dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	005a      	lsls	r2, r3, #1
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	085b      	lsrs	r3, r3, #1
 800f5fc:	441a      	add	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	fbb2 f3f3 	udiv	r3, r2, r3
 800f606:	b29b      	uxth	r3, r3
 800f608:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	2b0f      	cmp	r3, #15
 800f60e:	d916      	bls.n	800f63e <UART_SetConfig+0x45a>
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f616:	d212      	bcs.n	800f63e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	f023 030f 	bic.w	r3, r3, #15
 800f620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	085b      	lsrs	r3, r3, #1
 800f626:	b29b      	uxth	r3, r3
 800f628:	f003 0307 	and.w	r3, r3, #7
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	89fb      	ldrh	r3, [r7, #14]
 800f630:	4313      	orrs	r3, r2
 800f632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	89fa      	ldrh	r2, [r7, #14]
 800f63a:	60da      	str	r2, [r3, #12]
 800f63c:	e04e      	b.n	800f6dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	76bb      	strb	r3, [r7, #26]
 800f642:	e04b      	b.n	800f6dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f644:	7efb      	ldrb	r3, [r7, #27]
 800f646:	2b08      	cmp	r3, #8
 800f648:	d827      	bhi.n	800f69a <UART_SetConfig+0x4b6>
 800f64a:	a201      	add	r2, pc, #4	; (adr r2, 800f650 <UART_SetConfig+0x46c>)
 800f64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f650:	0800f675 	.word	0x0800f675
 800f654:	0800f67d 	.word	0x0800f67d
 800f658:	0800f685 	.word	0x0800f685
 800f65c:	0800f69b 	.word	0x0800f69b
 800f660:	0800f68b 	.word	0x0800f68b
 800f664:	0800f69b 	.word	0x0800f69b
 800f668:	0800f69b 	.word	0x0800f69b
 800f66c:	0800f69b 	.word	0x0800f69b
 800f670:	0800f693 	.word	0x0800f693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f674:	f7fd fc60 	bl	800cf38 <HAL_RCC_GetPCLK1Freq>
 800f678:	6178      	str	r0, [r7, #20]
        break;
 800f67a:	e013      	b.n	800f6a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f67c:	f7fd fc72 	bl	800cf64 <HAL_RCC_GetPCLK2Freq>
 800f680:	6178      	str	r0, [r7, #20]
        break;
 800f682:	e00f      	b.n	800f6a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f684:	4b1b      	ldr	r3, [pc, #108]	; (800f6f4 <UART_SetConfig+0x510>)
 800f686:	617b      	str	r3, [r7, #20]
        break;
 800f688:	e00c      	b.n	800f6a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f68a:	f7fd fbbf 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800f68e:	6178      	str	r0, [r7, #20]
        break;
 800f690:	e008      	b.n	800f6a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f696:	617b      	str	r3, [r7, #20]
        break;
 800f698:	e004      	b.n	800f6a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800f69a:	2300      	movs	r3, #0
 800f69c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	76bb      	strb	r3, [r7, #26]
        break;
 800f6a2:	bf00      	nop
    }

    if (pclk != 0U)
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d018      	beq.n	800f6dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	085a      	lsrs	r2, r3, #1
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	441a      	add	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b0f      	cmp	r3, #15
 800f6c4:	d908      	bls.n	800f6d8 <UART_SetConfig+0x4f4>
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6cc:	d204      	bcs.n	800f6d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	693a      	ldr	r2, [r7, #16]
 800f6d4:	60da      	str	r2, [r3, #12]
 800f6d6:	e001      	b.n	800f6dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f6e8:	7ebb      	ldrb	r3, [r7, #26]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3720      	adds	r7, #32
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f6f4:	00f42400 	.word	0x00f42400

0800f6f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00a      	beq.n	800f722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	430a      	orrs	r2, r1
 800f720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00a      	beq.n	800f744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	430a      	orrs	r2, r1
 800f742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f748:	f003 0304 	and.w	r3, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00a      	beq.n	800f766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	430a      	orrs	r2, r1
 800f764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76a:	f003 0308 	and.w	r3, r3, #8
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00a      	beq.n	800f788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	430a      	orrs	r2, r1
 800f786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78c:	f003 0310 	and.w	r3, r3, #16
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00a      	beq.n	800f7aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ae:	f003 0320 	and.w	r3, r3, #32
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00a      	beq.n	800f7cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d01a      	beq.n	800f80e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	430a      	orrs	r2, r1
 800f7ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7f6:	d10a      	bne.n	800f80e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	430a      	orrs	r2, r1
 800f80c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00a      	beq.n	800f830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	430a      	orrs	r2, r1
 800f82e:	605a      	str	r2, [r3, #4]
  }
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af02      	add	r7, sp, #8
 800f842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f84a:	f7fa fe0d 	bl	800a468 <HAL_GetTick>
 800f84e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f003 0308 	and.w	r3, r3, #8
 800f85a:	2b08      	cmp	r3, #8
 800f85c:	d10e      	bne.n	800f87c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f85e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2200      	movs	r2, #0
 800f868:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f82a 	bl	800f8c6 <UART_WaitOnFlagUntilTimeout>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f878:	2303      	movs	r3, #3
 800f87a:	e020      	b.n	800f8be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f003 0304 	and.w	r3, r3, #4
 800f886:	2b04      	cmp	r3, #4
 800f888:	d10e      	bne.n	800f8a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f88a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f814 	bl	800f8c6 <UART_WaitOnFlagUntilTimeout>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8a4:	2303      	movs	r3, #3
 800f8a6:	e00a      	b.n	800f8be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2220      	movs	r2, #32
 800f8ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8c6:	b580      	push	{r7, lr}
 800f8c8:	b084      	sub	sp, #16
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	60f8      	str	r0, [r7, #12]
 800f8ce:	60b9      	str	r1, [r7, #8]
 800f8d0:	603b      	str	r3, [r7, #0]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8d6:	e05d      	b.n	800f994 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8d8:	69bb      	ldr	r3, [r7, #24]
 800f8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8de:	d059      	beq.n	800f994 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8e0:	f7fa fdc2 	bl	800a468 <HAL_GetTick>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	69ba      	ldr	r2, [r7, #24]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d302      	bcc.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d11b      	bne.n	800f92e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f904:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	689a      	ldr	r2, [r3, #8]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f022 0201 	bic.w	r2, r2, #1
 800f914:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2220      	movs	r2, #32
 800f91a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2220      	movs	r2, #32
 800f920:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2200      	movs	r2, #0
 800f926:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f92a:	2303      	movs	r3, #3
 800f92c:	e042      	b.n	800f9b4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f003 0304 	and.w	r3, r3, #4
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d02b      	beq.n	800f994 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f94a:	d123      	bne.n	800f994 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f954:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f964:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	689a      	ldr	r2, [r3, #8]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f022 0201 	bic.w	r2, r2, #1
 800f974:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2220      	movs	r2, #32
 800f97a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2220      	movs	r2, #32
 800f980:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2220      	movs	r2, #32
 800f986:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800f990:	2303      	movs	r3, #3
 800f992:	e00f      	b.n	800f9b4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	69da      	ldr	r2, [r3, #28]
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	4013      	ands	r3, r2
 800f99e:	68ba      	ldr	r2, [r7, #8]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	bf0c      	ite	eq
 800f9a4:	2301      	moveq	r3, #1
 800f9a6:	2300      	movne	r3, #0
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	79fb      	ldrb	r3, [r7, #7]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d092      	beq.n	800f8d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9bc:	b084      	sub	sp, #16
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	f107 001c 	add.w	r0, r7, #28
 800f9ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d122      	bne.n	800fa1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f9e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d105      	bne.n	800fa0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 fa30 	bl	800fe74 <USB_CoreReset>
 800fa14:	4603      	mov	r3, r0
 800fa16:	73fb      	strb	r3, [r7, #15]
 800fa18:	e01a      	b.n	800fa50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fa24 	bl	800fe74 <USB_CoreReset>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fa30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d106      	bne.n	800fa44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	639a      	str	r2, [r3, #56]	; 0x38
 800fa42:	e005      	b.n	800fa50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa5c:	b004      	add	sp, #16
 800fa5e:	4770      	bx	lr

0800fa60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	f023 0201 	bic.w	r2, r3, #1
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b082      	sub	sp, #8
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d106      	bne.n	800faae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	60da      	str	r2, [r3, #12]
 800faac:	e00b      	b.n	800fac6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800faae:	78fb      	ldrb	r3, [r7, #3]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d106      	bne.n	800fac2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	60da      	str	r2, [r3, #12]
 800fac0:	e001      	b.n	800fac6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	e003      	b.n	800face <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fac6:	2032      	movs	r0, #50	; 0x32
 800fac8:	f7fa fcda 	bl	800a480 <HAL_Delay>

  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fad8:	b084      	sub	sp, #16
 800fada:	b580      	push	{r7, lr}
 800fadc:	b086      	sub	sp, #24
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
 800fae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800faf2:	2300      	movs	r3, #0
 800faf4:	613b      	str	r3, [r7, #16]
 800faf6:	e009      	b.n	800fb0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	3340      	adds	r3, #64	; 0x40
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	4413      	add	r3, r2
 800fb02:	2200      	movs	r2, #0
 800fb04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	613b      	str	r3, [r7, #16]
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	2b0e      	cmp	r3, #14
 800fb10:	d9f2      	bls.n	800faf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d11c      	bne.n	800fb52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb26:	f043 0302 	orr.w	r3, r3, #2
 800fb2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	e005      	b.n	800fb5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb64:	461a      	mov	r2, r3
 800fb66:	2300      	movs	r3, #0
 800fb68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb70:	4619      	mov	r1, r3
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb78:	461a      	mov	r2, r3
 800fb7a:	680b      	ldr	r3, [r1, #0]
 800fb7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fb7e:	2103      	movs	r1, #3
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 f93d 	bl	800fe00 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fb86:	2110      	movs	r1, #16
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 f8f1 	bl	800fd70 <USB_FlushTxFifo>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800fb94:	2301      	movs	r3, #1
 800fb96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f90f 	bl	800fdbc <USB_FlushRxFifo>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800fba4:	2301      	movs	r3, #1
 800fba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbae:	461a      	mov	r2, r3
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbba:	461a      	mov	r2, r3
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	2300      	movs	r3, #0
 800fbca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbcc:	2300      	movs	r3, #0
 800fbce:	613b      	str	r3, [r7, #16]
 800fbd0:	e043      	b.n	800fc5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	015a      	lsls	r2, r3, #5
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	4413      	add	r3, r2
 800fbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbe8:	d118      	bne.n	800fc1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10a      	bne.n	800fc06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	015a      	lsls	r2, r3, #5
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc02:	6013      	str	r3, [r2, #0]
 800fc04:	e013      	b.n	800fc2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	015a      	lsls	r2, r3, #5
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc12:	461a      	mov	r2, r3
 800fc14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc18:	6013      	str	r3, [r2, #0]
 800fc1a:	e008      	b.n	800fc2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	015a      	lsls	r2, r3, #5
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	4413      	add	r3, r2
 800fc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc28:	461a      	mov	r2, r3
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	015a      	lsls	r2, r3, #5
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4413      	add	r3, r2
 800fc36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	015a      	lsls	r2, r3, #5
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4413      	add	r3, r2
 800fc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	3301      	adds	r3, #1
 800fc58:	613b      	str	r3, [r7, #16]
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d3b7      	bcc.n	800fbd2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc62:	2300      	movs	r3, #0
 800fc64:	613b      	str	r3, [r7, #16]
 800fc66:	e043      	b.n	800fcf0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	015a      	lsls	r2, r3, #5
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4413      	add	r3, r2
 800fc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc7e:	d118      	bne.n	800fcb2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d10a      	bne.n	800fc9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	015a      	lsls	r2, r3, #5
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc92:	461a      	mov	r2, r3
 800fc94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	e013      	b.n	800fcc4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca8:	461a      	mov	r2, r3
 800fcaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	e008      	b.n	800fcc4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	015a      	lsls	r2, r3, #5
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	4413      	add	r3, r2
 800fcba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	015a      	lsls	r2, r3, #5
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	4413      	add	r3, r2
 800fcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce2:	461a      	mov	r2, r3
 800fce4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fce8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	3301      	adds	r3, #1
 800fcee:	613b      	str	r3, [r7, #16]
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	693a      	ldr	r2, [r7, #16]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d3b7      	bcc.n	800fc68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfe:	691b      	ldr	r3, [r3, #16]
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fd18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	f043 0210 	orr.w	r2, r3, #16
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	699a      	ldr	r2, [r3, #24]
 800fd2a:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <USB_DevInit+0x294>)
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d005      	beq.n	800fd44 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	f043 0208 	orr.w	r2, r3, #8
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fd44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d107      	bne.n	800fd5a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	699b      	ldr	r3, [r3, #24]
 800fd4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd52:	f043 0304 	orr.w	r3, r3, #4
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd66:	b004      	add	sp, #16
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	803c3800 	.word	0x803c3800

0800fd70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	019b      	lsls	r3, r3, #6
 800fd82:	f043 0220 	orr.w	r2, r3, #32
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	60fb      	str	r3, [r7, #12]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	4a09      	ldr	r2, [pc, #36]	; (800fdb8 <USB_FlushTxFifo+0x48>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d901      	bls.n	800fd9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fd98:	2303      	movs	r3, #3
 800fd9a:	e006      	b.n	800fdaa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	f003 0320 	and.w	r3, r3, #32
 800fda4:	2b20      	cmp	r3, #32
 800fda6:	d0f0      	beq.n	800fd8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	00030d40 	.word	0x00030d40

0800fdbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2210      	movs	r2, #16
 800fdcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	60fb      	str	r3, [r7, #12]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	4a09      	ldr	r2, [pc, #36]	; (800fdfc <USB_FlushRxFifo+0x40>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d901      	bls.n	800fde0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fddc:	2303      	movs	r3, #3
 800fdde:	e006      	b.n	800fdee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	f003 0310 	and.w	r3, r3, #16
 800fde8:	2b10      	cmp	r3, #16
 800fdea:	d0f0      	beq.n	800fdce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3714      	adds	r7, #20
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	00030d40 	.word	0x00030d40

0800fe00 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b085      	sub	sp, #20
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	78fb      	ldrb	r3, [r7, #3]
 800fe1a:	68f9      	ldr	r1, [r7, #12]
 800fe1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe20:	4313      	orrs	r3, r2
 800fe22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b085      	sub	sp, #20
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe4c:	f023 0303 	bic.w	r3, r3, #3
 800fe50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	68fa      	ldr	r2, [r7, #12]
 800fe5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe60:	f043 0302 	orr.w	r3, r3, #2
 800fe64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3714      	adds	r7, #20
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	3301      	adds	r3, #1
 800fe84:	60fb      	str	r3, [r7, #12]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	4a13      	ldr	r2, [pc, #76]	; (800fed8 <USB_CoreReset+0x64>)
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d901      	bls.n	800fe92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	e01b      	b.n	800feca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	691b      	ldr	r3, [r3, #16]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	daf2      	bge.n	800fe80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	f043 0201 	orr.w	r2, r3, #1
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	3301      	adds	r3, #1
 800feae:	60fb      	str	r3, [r7, #12]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4a09      	ldr	r2, [pc, #36]	; (800fed8 <USB_CoreReset+0x64>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d901      	bls.n	800febc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800feb8:	2303      	movs	r3, #3
 800feba:	e006      	b.n	800feca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d0f0      	beq.n	800feaa <USB_CoreReset+0x36>

  return HAL_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3714      	adds	r7, #20
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	00030d40 	.word	0x00030d40

0800fedc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fedc:	b480      	push	{r7}
 800fede:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fee0:	bf00      	nop
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
	...

0800feec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fef2:	f3ef 8305 	mrs	r3, IPSR
 800fef6:	60bb      	str	r3, [r7, #8]
  return(result);
 800fef8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10f      	bne.n	800ff1e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fefe:	f3ef 8310 	mrs	r3, PRIMASK
 800ff02:	607b      	str	r3, [r7, #4]
  return(result);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d105      	bne.n	800ff16 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff0a:	f3ef 8311 	mrs	r3, BASEPRI
 800ff0e:	603b      	str	r3, [r7, #0]
  return(result);
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d007      	beq.n	800ff26 <osKernelInitialize+0x3a>
 800ff16:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <osKernelInitialize+0x64>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d103      	bne.n	800ff26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ff1e:	f06f 0305 	mvn.w	r3, #5
 800ff22:	60fb      	str	r3, [r7, #12]
 800ff24:	e00c      	b.n	800ff40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ff26:	4b0a      	ldr	r3, [pc, #40]	; (800ff50 <osKernelInitialize+0x64>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d105      	bne.n	800ff3a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ff2e:	4b08      	ldr	r3, [pc, #32]	; (800ff50 <osKernelInitialize+0x64>)
 800ff30:	2201      	movs	r2, #1
 800ff32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ff34:	2300      	movs	r3, #0
 800ff36:	60fb      	str	r3, [r7, #12]
 800ff38:	e002      	b.n	800ff40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ff3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ff40:	68fb      	ldr	r3, [r7, #12]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3714      	adds	r7, #20
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	200008c4 	.word	0x200008c4

0800ff54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff5a:	f3ef 8305 	mrs	r3, IPSR
 800ff5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10f      	bne.n	800ff86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff66:	f3ef 8310 	mrs	r3, PRIMASK
 800ff6a:	607b      	str	r3, [r7, #4]
  return(result);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d105      	bne.n	800ff7e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff72:	f3ef 8311 	mrs	r3, BASEPRI
 800ff76:	603b      	str	r3, [r7, #0]
  return(result);
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d007      	beq.n	800ff8e <osKernelStart+0x3a>
 800ff7e:	4b0f      	ldr	r3, [pc, #60]	; (800ffbc <osKernelStart+0x68>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b02      	cmp	r3, #2
 800ff84:	d103      	bne.n	800ff8e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ff86:	f06f 0305 	mvn.w	r3, #5
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	e010      	b.n	800ffb0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <osKernelStart+0x68>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d109      	bne.n	800ffaa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff96:	f7ff ffa1 	bl	800fedc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff9a:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <osKernelStart+0x68>)
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ffa0:	f001 fce6 	bl	8011970 <vTaskStartScheduler>
      stat = osOK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	60fb      	str	r3, [r7, #12]
 800ffa8:	e002      	b.n	800ffb0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ffaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ffae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	200008c4 	.word	0x200008c4

0800ffc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b090      	sub	sp, #64	; 0x40
 800ffc4:	af04      	add	r7, sp, #16
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffd0:	f3ef 8305 	mrs	r3, IPSR
 800ffd4:	61fb      	str	r3, [r7, #28]
  return(result);
 800ffd6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f040 808f 	bne.w	80100fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffde:	f3ef 8310 	mrs	r3, PRIMASK
 800ffe2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d105      	bne.n	800fff6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffea:	f3ef 8311 	mrs	r3, BASEPRI
 800ffee:	617b      	str	r3, [r7, #20]
  return(result);
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d003      	beq.n	800fffe <osThreadNew+0x3e>
 800fff6:	4b44      	ldr	r3, [pc, #272]	; (8010108 <osThreadNew+0x148>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	d07e      	beq.n	80100fc <osThreadNew+0x13c>
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d07b      	beq.n	80100fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010004:	2340      	movs	r3, #64	; 0x40
 8010006:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010008:	2318      	movs	r3, #24
 801000a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801000c:	2300      	movs	r3, #0
 801000e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010010:	f04f 33ff 	mov.w	r3, #4294967295
 8010014:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d045      	beq.n	80100a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d002      	beq.n	801002a <osThreadNew+0x6a>
        name = attr->name;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	699b      	ldr	r3, [r3, #24]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	699b      	ldr	r3, [r3, #24]
 8010036:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	2b00      	cmp	r3, #0
 801003c:	d008      	beq.n	8010050 <osThreadNew+0x90>
 801003e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010040:	2b38      	cmp	r3, #56	; 0x38
 8010042:	d805      	bhi.n	8010050 <osThreadNew+0x90>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <osThreadNew+0x94>
        return (NULL);
 8010050:	2300      	movs	r3, #0
 8010052:	e054      	b.n	80100fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d003      	beq.n	8010064 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	695b      	ldr	r3, [r3, #20]
 8010060:	089b      	lsrs	r3, r3, #2
 8010062:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00e      	beq.n	801008a <osThreadNew+0xca>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	2b5b      	cmp	r3, #91	; 0x5b
 8010072:	d90a      	bls.n	801008a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010078:	2b00      	cmp	r3, #0
 801007a:	d006      	beq.n	801008a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	695b      	ldr	r3, [r3, #20]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d002      	beq.n	801008a <osThreadNew+0xca>
        mem = 1;
 8010084:	2301      	movs	r3, #1
 8010086:	623b      	str	r3, [r7, #32]
 8010088:	e010      	b.n	80100ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d10c      	bne.n	80100ac <osThreadNew+0xec>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d108      	bne.n	80100ac <osThreadNew+0xec>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d104      	bne.n	80100ac <osThreadNew+0xec>
          mem = 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	623b      	str	r3, [r7, #32]
 80100a6:	e001      	b.n	80100ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d110      	bne.n	80100d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80100ba:	9202      	str	r2, [sp, #8]
 80100bc:	9301      	str	r3, [sp, #4]
 80100be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f001 fa7f 	bl	80115cc <xTaskCreateStatic>
 80100ce:	4603      	mov	r3, r0
 80100d0:	613b      	str	r3, [r7, #16]
 80100d2:	e013      	b.n	80100fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80100d4:	6a3b      	ldr	r3, [r7, #32]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d110      	bne.n	80100fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80100da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100dc:	b29a      	uxth	r2, r3
 80100de:	f107 0310 	add.w	r3, r7, #16
 80100e2:	9301      	str	r3, [sp, #4]
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f001 fac7 	bl	8011680 <xTaskCreate>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	d001      	beq.n	80100fc <osThreadNew+0x13c>
          hTask = NULL;
 80100f8:	2300      	movs	r3, #0
 80100fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80100fc:	693b      	ldr	r3, [r7, #16]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3730      	adds	r7, #48	; 0x30
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	200008c4 	.word	0x200008c4

0801010c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010114:	f3ef 8305 	mrs	r3, IPSR
 8010118:	613b      	str	r3, [r7, #16]
  return(result);
 801011a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10f      	bne.n	8010140 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010120:	f3ef 8310 	mrs	r3, PRIMASK
 8010124:	60fb      	str	r3, [r7, #12]
  return(result);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d105      	bne.n	8010138 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801012c:	f3ef 8311 	mrs	r3, BASEPRI
 8010130:	60bb      	str	r3, [r7, #8]
  return(result);
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d007      	beq.n	8010148 <osDelay+0x3c>
 8010138:	4b0a      	ldr	r3, [pc, #40]	; (8010164 <osDelay+0x58>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b02      	cmp	r3, #2
 801013e:	d103      	bne.n	8010148 <osDelay+0x3c>
    stat = osErrorISR;
 8010140:	f06f 0305 	mvn.w	r3, #5
 8010144:	617b      	str	r3, [r7, #20]
 8010146:	e007      	b.n	8010158 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010148:	2300      	movs	r3, #0
 801014a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d002      	beq.n	8010158 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f001 fbd8 	bl	8011908 <vTaskDelay>
    }
  }

  return (stat);
 8010158:	697b      	ldr	r3, [r7, #20]
}
 801015a:	4618      	mov	r0, r3
 801015c:	3718      	adds	r7, #24
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	200008c4 	.word	0x200008c4

08010168 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010168:	b580      	push	{r7, lr}
 801016a:	b08c      	sub	sp, #48	; 0x30
 801016c:	af02      	add	r7, sp, #8
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010178:	f3ef 8305 	mrs	r3, IPSR
 801017c:	61bb      	str	r3, [r7, #24]
  return(result);
 801017e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010180:	2b00      	cmp	r3, #0
 8010182:	f040 8087 	bne.w	8010294 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010186:	f3ef 8310 	mrs	r3, PRIMASK
 801018a:	617b      	str	r3, [r7, #20]
  return(result);
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d105      	bne.n	801019e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010192:	f3ef 8311 	mrs	r3, BASEPRI
 8010196:	613b      	str	r3, [r7, #16]
  return(result);
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d003      	beq.n	80101a6 <osSemaphoreNew+0x3e>
 801019e:	4b40      	ldr	r3, [pc, #256]	; (80102a0 <osSemaphoreNew+0x138>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d076      	beq.n	8010294 <osSemaphoreNew+0x12c>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d073      	beq.n	8010294 <osSemaphoreNew+0x12c>
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d86f      	bhi.n	8010294 <osSemaphoreNew+0x12c>
    mem = -1;
 80101b4:	f04f 33ff 	mov.w	r3, #4294967295
 80101b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d015      	beq.n	80101ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d006      	beq.n	80101d6 <osSemaphoreNew+0x6e>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	2b4f      	cmp	r3, #79	; 0x4f
 80101ce:	d902      	bls.n	80101d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80101d0:	2301      	movs	r3, #1
 80101d2:	623b      	str	r3, [r7, #32]
 80101d4:	e00c      	b.n	80101f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d108      	bne.n	80101f0 <osSemaphoreNew+0x88>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d104      	bne.n	80101f0 <osSemaphoreNew+0x88>
          mem = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	623b      	str	r3, [r7, #32]
 80101ea:	e001      	b.n	80101f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80101ec:	2300      	movs	r3, #0
 80101ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f6:	d04d      	beq.n	8010294 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d129      	bne.n	8010252 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80101fe:	6a3b      	ldr	r3, [r7, #32]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d10b      	bne.n	801021c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	689a      	ldr	r2, [r3, #8]
 8010208:	2303      	movs	r3, #3
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	4613      	mov	r3, r2
 801020e:	2200      	movs	r2, #0
 8010210:	2100      	movs	r1, #0
 8010212:	2001      	movs	r0, #1
 8010214:	f000 fa54 	bl	80106c0 <xQueueGenericCreateStatic>
 8010218:	6278      	str	r0, [r7, #36]	; 0x24
 801021a:	e005      	b.n	8010228 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801021c:	2203      	movs	r2, #3
 801021e:	2100      	movs	r1, #0
 8010220:	2001      	movs	r0, #1
 8010222:	f000 fac0 	bl	80107a6 <xQueueGenericCreate>
 8010226:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022a:	2b00      	cmp	r3, #0
 801022c:	d022      	beq.n	8010274 <osSemaphoreNew+0x10c>
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d01f      	beq.n	8010274 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010234:	2300      	movs	r3, #0
 8010236:	2200      	movs	r2, #0
 8010238:	2100      	movs	r1, #0
 801023a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801023c:	f000 fb7c 	bl	8010938 <xQueueGenericSend>
 8010240:	4603      	mov	r3, r0
 8010242:	2b01      	cmp	r3, #1
 8010244:	d016      	beq.n	8010274 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010248:	f000 ffef 	bl	801122a <vQueueDelete>
            hSemaphore = NULL;
 801024c:	2300      	movs	r3, #0
 801024e:	627b      	str	r3, [r7, #36]	; 0x24
 8010250:	e010      	b.n	8010274 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	2b01      	cmp	r3, #1
 8010256:	d108      	bne.n	801026a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	689b      	ldr	r3, [r3, #8]
 801025c:	461a      	mov	r2, r3
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f000 fb02 	bl	801086a <xQueueCreateCountingSemaphoreStatic>
 8010266:	6278      	str	r0, [r7, #36]	; 0x24
 8010268:	e004      	b.n	8010274 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801026a:	68b9      	ldr	r1, [r7, #8]
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 fb31 	bl	80108d4 <xQueueCreateCountingSemaphore>
 8010272:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00c      	beq.n	8010294 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d003      	beq.n	8010288 <osSemaphoreNew+0x120>
          name = attr->name;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	61fb      	str	r3, [r7, #28]
 8010286:	e001      	b.n	801028c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010288:	2300      	movs	r3, #0
 801028a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801028c:	69f9      	ldr	r1, [r7, #28]
 801028e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010290:	f001 f916 	bl	80114c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010296:	4618      	mov	r0, r3
 8010298:	3728      	adds	r7, #40	; 0x28
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	200008c4 	.word	0x200008c4

080102a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80102b2:	2300      	movs	r3, #0
 80102b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d103      	bne.n	80102c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80102bc:	f06f 0303 	mvn.w	r3, #3
 80102c0:	61fb      	str	r3, [r7, #28]
 80102c2:	e04b      	b.n	801035c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102c4:	f3ef 8305 	mrs	r3, IPSR
 80102c8:	617b      	str	r3, [r7, #20]
  return(result);
 80102ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d10f      	bne.n	80102f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102d0:	f3ef 8310 	mrs	r3, PRIMASK
 80102d4:	613b      	str	r3, [r7, #16]
  return(result);
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d105      	bne.n	80102e8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102dc:	f3ef 8311 	mrs	r3, BASEPRI
 80102e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d026      	beq.n	8010336 <osSemaphoreAcquire+0x92>
 80102e8:	4b1f      	ldr	r3, [pc, #124]	; (8010368 <osSemaphoreAcquire+0xc4>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d122      	bne.n	8010336 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d003      	beq.n	80102fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80102f6:	f06f 0303 	mvn.w	r3, #3
 80102fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80102fc:	e02d      	b.n	801035a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80102fe:	2300      	movs	r3, #0
 8010300:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010302:	f107 0308 	add.w	r3, r7, #8
 8010306:	461a      	mov	r2, r3
 8010308:	2100      	movs	r1, #0
 801030a:	69b8      	ldr	r0, [r7, #24]
 801030c:	f000 ff10 	bl	8011130 <xQueueReceiveFromISR>
 8010310:	4603      	mov	r3, r0
 8010312:	2b01      	cmp	r3, #1
 8010314:	d003      	beq.n	801031e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010316:	f06f 0302 	mvn.w	r3, #2
 801031a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801031c:	e01d      	b.n	801035a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d01a      	beq.n	801035a <osSemaphoreAcquire+0xb6>
 8010324:	4b11      	ldr	r3, [pc, #68]	; (801036c <osSemaphoreAcquire+0xc8>)
 8010326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801032a:	601a      	str	r2, [r3, #0]
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010334:	e011      	b.n	801035a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	69b8      	ldr	r0, [r7, #24]
 801033a:	f000 fdf1 	bl	8010f20 <xQueueSemaphoreTake>
 801033e:	4603      	mov	r3, r0
 8010340:	2b01      	cmp	r3, #1
 8010342:	d00b      	beq.n	801035c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d003      	beq.n	8010352 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801034a:	f06f 0301 	mvn.w	r3, #1
 801034e:	61fb      	str	r3, [r7, #28]
 8010350:	e004      	b.n	801035c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010352:	f06f 0302 	mvn.w	r3, #2
 8010356:	61fb      	str	r3, [r7, #28]
 8010358:	e000      	b.n	801035c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801035a:	bf00      	nop
      }
    }
  }

  return (stat);
 801035c:	69fb      	ldr	r3, [r7, #28]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3720      	adds	r7, #32
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	200008c4 	.word	0x200008c4
 801036c:	e000ed04 	.word	0xe000ed04

08010370 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010370:	b580      	push	{r7, lr}
 8010372:	b088      	sub	sp, #32
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801037c:	2300      	movs	r3, #0
 801037e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d103      	bne.n	801038e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010386:	f06f 0303 	mvn.w	r3, #3
 801038a:	61fb      	str	r3, [r7, #28]
 801038c:	e03e      	b.n	801040c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801038e:	f3ef 8305 	mrs	r3, IPSR
 8010392:	617b      	str	r3, [r7, #20]
  return(result);
 8010394:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010396:	2b00      	cmp	r3, #0
 8010398:	d10f      	bne.n	80103ba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801039a:	f3ef 8310 	mrs	r3, PRIMASK
 801039e:	613b      	str	r3, [r7, #16]
  return(result);
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d105      	bne.n	80103b2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103a6:	f3ef 8311 	mrs	r3, BASEPRI
 80103aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d01e      	beq.n	80103f0 <osSemaphoreRelease+0x80>
 80103b2:	4b19      	ldr	r3, [pc, #100]	; (8010418 <osSemaphoreRelease+0xa8>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b02      	cmp	r3, #2
 80103b8:	d11a      	bne.n	80103f0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80103ba:	2300      	movs	r3, #0
 80103bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80103be:	f107 0308 	add.w	r3, r7, #8
 80103c2:	4619      	mov	r1, r3
 80103c4:	69b8      	ldr	r0, [r7, #24]
 80103c6:	f000 fc45 	bl	8010c54 <xQueueGiveFromISR>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d003      	beq.n	80103d8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80103d0:	f06f 0302 	mvn.w	r3, #2
 80103d4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80103d6:	e018      	b.n	801040a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d015      	beq.n	801040a <osSemaphoreRelease+0x9a>
 80103de:	4b0f      	ldr	r3, [pc, #60]	; (801041c <osSemaphoreRelease+0xac>)
 80103e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80103ee:	e00c      	b.n	801040a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80103f0:	2300      	movs	r3, #0
 80103f2:	2200      	movs	r2, #0
 80103f4:	2100      	movs	r1, #0
 80103f6:	69b8      	ldr	r0, [r7, #24]
 80103f8:	f000 fa9e 	bl	8010938 <xQueueGenericSend>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d004      	beq.n	801040c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010402:	f06f 0302 	mvn.w	r3, #2
 8010406:	61fb      	str	r3, [r7, #28]
 8010408:	e000      	b.n	801040c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801040a:	bf00      	nop
    }
  }

  return (stat);
 801040c:	69fb      	ldr	r3, [r7, #28]
}
 801040e:	4618      	mov	r0, r3
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	200008c4 	.word	0x200008c4
 801041c:	e000ed04 	.word	0xe000ed04

08010420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	4a07      	ldr	r2, [pc, #28]	; (801044c <vApplicationGetIdleTaskMemory+0x2c>)
 8010430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	4a06      	ldr	r2, [pc, #24]	; (8010450 <vApplicationGetIdleTaskMemory+0x30>)
 8010436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2240      	movs	r2, #64	; 0x40
 801043c:	601a      	str	r2, [r3, #0]
}
 801043e:	bf00      	nop
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	200008c8 	.word	0x200008c8
 8010450:	20000924 	.word	0x20000924

08010454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4a07      	ldr	r2, [pc, #28]	; (8010480 <vApplicationGetTimerTaskMemory+0x2c>)
 8010464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	4a06      	ldr	r2, [pc, #24]	; (8010484 <vApplicationGetTimerTaskMemory+0x30>)
 801046a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010472:	601a      	str	r2, [r3, #0]
}
 8010474:	bf00      	nop
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	20000a24 	.word	0x20000a24
 8010484:	20000a80 	.word	0x20000a80

08010488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f103 0208 	add.w	r2, r3, #8
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f04f 32ff 	mov.w	r2, #4294967295
 80104a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f103 0208 	add.w	r2, r3, #8
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f103 0208 	add.w	r2, r3, #8
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2200      	movs	r2, #0
 80104ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80104bc:	bf00      	nop
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80104d6:	bf00      	nop
 80104d8:	370c      	adds	r7, #12
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80104e2:	b480      	push	{r7}
 80104e4:	b085      	sub	sp, #20
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	689a      	ldr	r2, [r3, #8]
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	683a      	ldr	r2, [r7, #0]
 8010506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	683a      	ldr	r2, [r7, #0]
 801050c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	1c5a      	adds	r2, r3, #1
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	601a      	str	r2, [r3, #0]
}
 801051e:	bf00      	nop
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010540:	d103      	bne.n	801054a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	60fb      	str	r3, [r7, #12]
 8010548:	e00c      	b.n	8010564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	3308      	adds	r3, #8
 801054e:	60fb      	str	r3, [r7, #12]
 8010550:	e002      	b.n	8010558 <vListInsert+0x2e>
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	429a      	cmp	r2, r3
 8010562:	d2f6      	bcs.n	8010552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	685a      	ldr	r2, [r3, #4]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	68fa      	ldr	r2, [r7, #12]
 8010578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	683a      	ldr	r2, [r7, #0]
 801057e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	687a      	ldr	r2, [r7, #4]
 8010584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	601a      	str	r2, [r3, #0]
}
 8010590:	bf00      	nop
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	6892      	ldr	r2, [r2, #8]
 80105b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	6852      	ldr	r2, [r2, #4]
 80105bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d103      	bne.n	80105d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	689a      	ldr	r2, [r3, #8]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	1e5a      	subs	r2, r3, #1
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d109      	bne.n	8010618 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010608:	f383 8811 	msr	BASEPRI, r3
 801060c:	f3bf 8f6f 	isb	sy
 8010610:	f3bf 8f4f 	dsb	sy
 8010614:	60bb      	str	r3, [r7, #8]
 8010616:	e7fe      	b.n	8010616 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010618:	f002 fc28 	bl	8012e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010624:	68f9      	ldr	r1, [r7, #12]
 8010626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010628:	fb01 f303 	mul.w	r3, r1, r3
 801062c:	441a      	add	r2, r3
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2200      	movs	r2, #0
 8010636:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010648:	3b01      	subs	r3, #1
 801064a:	68f9      	ldr	r1, [r7, #12]
 801064c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801064e:	fb01 f303 	mul.w	r3, r1, r3
 8010652:	441a      	add	r2, r3
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	22ff      	movs	r2, #255	; 0xff
 801065c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	22ff      	movs	r2, #255	; 0xff
 8010664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d114      	bne.n	8010698 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d01a      	beq.n	80106ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3310      	adds	r3, #16
 801067a:	4618      	mov	r0, r3
 801067c:	f001 fbf8 	bl	8011e70 <xTaskRemoveFromEventList>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d012      	beq.n	80106ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010686:	4b0d      	ldr	r3, [pc, #52]	; (80106bc <xQueueGenericReset+0xcc>)
 8010688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	f3bf 8f4f 	dsb	sy
 8010692:	f3bf 8f6f 	isb	sy
 8010696:	e009      	b.n	80106ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	3310      	adds	r3, #16
 801069c:	4618      	mov	r0, r3
 801069e:	f7ff fef3 	bl	8010488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	3324      	adds	r3, #36	; 0x24
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff feee 	bl	8010488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80106ac:	f002 fc0c 	bl	8012ec8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80106b0:	2301      	movs	r3, #1
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	e000ed04 	.word	0xe000ed04

080106c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b08e      	sub	sp, #56	; 0x38
 80106c4:	af02      	add	r7, sp, #8
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
 80106cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d109      	bne.n	80106e8 <xQueueGenericCreateStatic+0x28>
 80106d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80106e6:	e7fe      	b.n	80106e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d109      	bne.n	8010702 <xQueueGenericCreateStatic+0x42>
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010700:	e7fe      	b.n	8010700 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d002      	beq.n	801070e <xQueueGenericCreateStatic+0x4e>
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d001      	beq.n	8010712 <xQueueGenericCreateStatic+0x52>
 801070e:	2301      	movs	r3, #1
 8010710:	e000      	b.n	8010714 <xQueueGenericCreateStatic+0x54>
 8010712:	2300      	movs	r3, #0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d109      	bne.n	801072c <xQueueGenericCreateStatic+0x6c>
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	623b      	str	r3, [r7, #32]
 801072a:	e7fe      	b.n	801072a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d102      	bne.n	8010738 <xQueueGenericCreateStatic+0x78>
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <xQueueGenericCreateStatic+0x7c>
 8010738:	2301      	movs	r3, #1
 801073a:	e000      	b.n	801073e <xQueueGenericCreateStatic+0x7e>
 801073c:	2300      	movs	r3, #0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d109      	bne.n	8010756 <xQueueGenericCreateStatic+0x96>
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	61fb      	str	r3, [r7, #28]
 8010754:	e7fe      	b.n	8010754 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010756:	2350      	movs	r3, #80	; 0x50
 8010758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	2b50      	cmp	r3, #80	; 0x50
 801075e:	d009      	beq.n	8010774 <xQueueGenericCreateStatic+0xb4>
 8010760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010764:	f383 8811 	msr	BASEPRI, r3
 8010768:	f3bf 8f6f 	isb	sy
 801076c:	f3bf 8f4f 	dsb	sy
 8010770:	61bb      	str	r3, [r7, #24]
 8010772:	e7fe      	b.n	8010772 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010774:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00d      	beq.n	801079c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010782:	2201      	movs	r2, #1
 8010784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010788:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	4613      	mov	r3, r2
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	68b9      	ldr	r1, [r7, #8]
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f000 f844 	bl	8010824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801079e:	4618      	mov	r0, r3
 80107a0:	3730      	adds	r7, #48	; 0x30
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b08a      	sub	sp, #40	; 0x28
 80107aa:	af02      	add	r7, sp, #8
 80107ac:	60f8      	str	r0, [r7, #12]
 80107ae:	60b9      	str	r1, [r7, #8]
 80107b0:	4613      	mov	r3, r2
 80107b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d109      	bne.n	80107ce <xQueueGenericCreate+0x28>
 80107ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107be:	f383 8811 	msr	BASEPRI, r3
 80107c2:	f3bf 8f6f 	isb	sy
 80107c6:	f3bf 8f4f 	dsb	sy
 80107ca:	613b      	str	r3, [r7, #16]
 80107cc:	e7fe      	b.n	80107cc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d102      	bne.n	80107da <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80107d4:	2300      	movs	r3, #0
 80107d6:	61fb      	str	r3, [r7, #28]
 80107d8:	e004      	b.n	80107e4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	fb02 f303 	mul.w	r3, r2, r3
 80107e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	3350      	adds	r3, #80	; 0x50
 80107e8:	4618      	mov	r0, r3
 80107ea:	f002 fc59 	bl	80130a0 <pvPortMalloc>
 80107ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d011      	beq.n	801081a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	3350      	adds	r3, #80	; 0x50
 80107fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010800:	69bb      	ldr	r3, [r7, #24]
 8010802:	2200      	movs	r2, #0
 8010804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010808:	79fa      	ldrb	r2, [r7, #7]
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	9300      	str	r3, [sp, #0]
 801080e:	4613      	mov	r3, r2
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	68b9      	ldr	r1, [r7, #8]
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f000 f805 	bl	8010824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801081a:	69bb      	ldr	r3, [r7, #24]
	}
 801081c:	4618      	mov	r0, r3
 801081e:	3720      	adds	r7, #32
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	69ba      	ldr	r2, [r7, #24]
 801083c:	601a      	str	r2, [r3, #0]
 801083e:	e002      	b.n	8010846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010852:	2101      	movs	r1, #1
 8010854:	69b8      	ldr	r0, [r7, #24]
 8010856:	f7ff fecb 	bl	80105f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	78fa      	ldrb	r2, [r7, #3]
 801085e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010862:	bf00      	nop
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801086a:	b580      	push	{r7, lr}
 801086c:	b08a      	sub	sp, #40	; 0x28
 801086e:	af02      	add	r7, sp, #8
 8010870:	60f8      	str	r0, [r7, #12]
 8010872:	60b9      	str	r1, [r7, #8]
 8010874:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d109      	bne.n	8010890 <xQueueCreateCountingSemaphoreStatic+0x26>
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	61bb      	str	r3, [r7, #24]
 801088e:	e7fe      	b.n	801088e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	429a      	cmp	r2, r3
 8010896:	d909      	bls.n	80108ac <xQueueCreateCountingSemaphoreStatic+0x42>
 8010898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089c:	f383 8811 	msr	BASEPRI, r3
 80108a0:	f3bf 8f6f 	isb	sy
 80108a4:	f3bf 8f4f 	dsb	sy
 80108a8:	617b      	str	r3, [r7, #20]
 80108aa:	e7fe      	b.n	80108aa <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80108ac:	2302      	movs	r3, #2
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	2100      	movs	r1, #0
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f7ff ff02 	bl	80106c0 <xQueueGenericCreateStatic>
 80108bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108ca:	69fb      	ldr	r3, [r7, #28]
	}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3720      	adds	r7, #32
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b086      	sub	sp, #24
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d109      	bne.n	80108f8 <xQueueCreateCountingSemaphore+0x24>
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	613b      	str	r3, [r7, #16]
 80108f6:	e7fe      	b.n	80108f6 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80108f8:	683a      	ldr	r2, [r7, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d909      	bls.n	8010914 <xQueueCreateCountingSemaphore+0x40>
 8010900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	60fb      	str	r3, [r7, #12]
 8010912:	e7fe      	b.n	8010912 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010914:	2202      	movs	r2, #2
 8010916:	2100      	movs	r1, #0
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7ff ff44 	bl	80107a6 <xQueueGenericCreate>
 801091e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d002      	beq.n	801092c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	683a      	ldr	r2, [r7, #0]
 801092a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801092c:	697b      	ldr	r3, [r7, #20]
	}
 801092e:	4618      	mov	r0, r3
 8010930:	3718      	adds	r7, #24
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b08e      	sub	sp, #56	; 0x38
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010946:	2300      	movs	r3, #0
 8010948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	2b00      	cmp	r3, #0
 8010952:	d109      	bne.n	8010968 <xQueueGenericSend+0x30>
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	62bb      	str	r3, [r7, #40]	; 0x28
 8010966:	e7fe      	b.n	8010966 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d103      	bne.n	8010976 <xQueueGenericSend+0x3e>
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010972:	2b00      	cmp	r3, #0
 8010974:	d101      	bne.n	801097a <xQueueGenericSend+0x42>
 8010976:	2301      	movs	r3, #1
 8010978:	e000      	b.n	801097c <xQueueGenericSend+0x44>
 801097a:	2300      	movs	r3, #0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d109      	bne.n	8010994 <xQueueGenericSend+0x5c>
 8010980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	627b      	str	r3, [r7, #36]	; 0x24
 8010992:	e7fe      	b.n	8010992 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b02      	cmp	r3, #2
 8010998:	d103      	bne.n	80109a2 <xQueueGenericSend+0x6a>
 801099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d101      	bne.n	80109a6 <xQueueGenericSend+0x6e>
 80109a2:	2301      	movs	r3, #1
 80109a4:	e000      	b.n	80109a8 <xQueueGenericSend+0x70>
 80109a6:	2300      	movs	r3, #0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d109      	bne.n	80109c0 <xQueueGenericSend+0x88>
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	f383 8811 	msr	BASEPRI, r3
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	623b      	str	r3, [r7, #32]
 80109be:	e7fe      	b.n	80109be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109c0:	f001 fc0c 	bl	80121dc <xTaskGetSchedulerState>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d102      	bne.n	80109d0 <xQueueGenericSend+0x98>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <xQueueGenericSend+0x9c>
 80109d0:	2301      	movs	r3, #1
 80109d2:	e000      	b.n	80109d6 <xQueueGenericSend+0x9e>
 80109d4:	2300      	movs	r3, #0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d109      	bne.n	80109ee <xQueueGenericSend+0xb6>
 80109da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109de:	f383 8811 	msr	BASEPRI, r3
 80109e2:	f3bf 8f6f 	isb	sy
 80109e6:	f3bf 8f4f 	dsb	sy
 80109ea:	61fb      	str	r3, [r7, #28]
 80109ec:	e7fe      	b.n	80109ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109ee:	f002 fa3d 	bl	8012e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d302      	bcc.n	8010a04 <xQueueGenericSend+0xcc>
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	d129      	bne.n	8010a58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a04:	683a      	ldr	r2, [r7, #0]
 8010a06:	68b9      	ldr	r1, [r7, #8]
 8010a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a0a:	f000 fc48 	bl	801129e <prvCopyDataToQueue>
 8010a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d010      	beq.n	8010a3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	3324      	adds	r3, #36	; 0x24
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f001 fa27 	bl	8011e70 <xTaskRemoveFromEventList>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d013      	beq.n	8010a50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a28:	4b3f      	ldr	r3, [pc, #252]	; (8010b28 <xQueueGenericSend+0x1f0>)
 8010a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a2e:	601a      	str	r2, [r3, #0]
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	e00a      	b.n	8010a50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d007      	beq.n	8010a50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a40:	4b39      	ldr	r3, [pc, #228]	; (8010b28 <xQueueGenericSend+0x1f0>)
 8010a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	f3bf 8f4f 	dsb	sy
 8010a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a50:	f002 fa3a 	bl	8012ec8 <vPortExitCritical>
				return pdPASS;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e063      	b.n	8010b20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d103      	bne.n	8010a66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a5e:	f002 fa33 	bl	8012ec8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a62:	2300      	movs	r3, #0
 8010a64:	e05c      	b.n	8010b20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d106      	bne.n	8010a7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a6c:	f107 0314 	add.w	r3, r7, #20
 8010a70:	4618      	mov	r0, r3
 8010a72:	f001 fa5f 	bl	8011f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a76:	2301      	movs	r3, #1
 8010a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a7a:	f002 fa25 	bl	8012ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a7e:	f000 ffdb 	bl	8011a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a82:	f002 f9f3 	bl	8012e6c <vPortEnterCritical>
 8010a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a8c:	b25b      	sxtb	r3, r3
 8010a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a92:	d103      	bne.n	8010a9c <xQueueGenericSend+0x164>
 8010a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a96:	2200      	movs	r2, #0
 8010a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010aa2:	b25b      	sxtb	r3, r3
 8010aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa8:	d103      	bne.n	8010ab2 <xQueueGenericSend+0x17a>
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aac:	2200      	movs	r2, #0
 8010aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ab2:	f002 fa09 	bl	8012ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ab6:	1d3a      	adds	r2, r7, #4
 8010ab8:	f107 0314 	add.w	r3, r7, #20
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f001 fa4e 	bl	8011f60 <xTaskCheckForTimeOut>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d124      	bne.n	8010b14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010acc:	f000 fcdf 	bl	801148e <prvIsQueueFull>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d018      	beq.n	8010b08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad8:	3310      	adds	r3, #16
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	4611      	mov	r1, r2
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f001 f978 	bl	8011dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ae6:	f000 fc6a 	bl	80113be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010aea:	f000 ffb3 	bl	8011a54 <xTaskResumeAll>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f47f af7c 	bne.w	80109ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010af6:	4b0c      	ldr	r3, [pc, #48]	; (8010b28 <xQueueGenericSend+0x1f0>)
 8010af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	f3bf 8f4f 	dsb	sy
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	e772      	b.n	80109ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b0a:	f000 fc58 	bl	80113be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b0e:	f000 ffa1 	bl	8011a54 <xTaskResumeAll>
 8010b12:	e76c      	b.n	80109ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b16:	f000 fc52 	bl	80113be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b1a:	f000 ff9b 	bl	8011a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3738      	adds	r7, #56	; 0x38
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	e000ed04 	.word	0xe000ed04

08010b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b08e      	sub	sp, #56	; 0x38
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
 8010b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d109      	bne.n	8010b58 <xQueueGenericSendFromISR+0x2c>
 8010b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	627b      	str	r3, [r7, #36]	; 0x24
 8010b56:	e7fe      	b.n	8010b56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <xQueueGenericSendFromISR+0x3a>
 8010b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d101      	bne.n	8010b6a <xQueueGenericSendFromISR+0x3e>
 8010b66:	2301      	movs	r3, #1
 8010b68:	e000      	b.n	8010b6c <xQueueGenericSendFromISR+0x40>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d109      	bne.n	8010b84 <xQueueGenericSendFromISR+0x58>
 8010b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b74:	f383 8811 	msr	BASEPRI, r3
 8010b78:	f3bf 8f6f 	isb	sy
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	623b      	str	r3, [r7, #32]
 8010b82:	e7fe      	b.n	8010b82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d103      	bne.n	8010b92 <xQueueGenericSendFromISR+0x66>
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d101      	bne.n	8010b96 <xQueueGenericSendFromISR+0x6a>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e000      	b.n	8010b98 <xQueueGenericSendFromISR+0x6c>
 8010b96:	2300      	movs	r3, #0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <xQueueGenericSendFromISR+0x84>
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	f383 8811 	msr	BASEPRI, r3
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	61fb      	str	r3, [r7, #28]
 8010bae:	e7fe      	b.n	8010bae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bb0:	f002 fa38 	bl	8013024 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8010bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bbc:	f383 8811 	msr	BASEPRI, r3
 8010bc0:	f3bf 8f6f 	isb	sy
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	61ba      	str	r2, [r7, #24]
 8010bca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010bcc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d302      	bcc.n	8010be2 <xQueueGenericSendFromISR+0xb6>
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d12c      	bne.n	8010c3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bec:	683a      	ldr	r2, [r7, #0]
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bf2:	f000 fb54 	bl	801129e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfe:	d112      	bne.n	8010c26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d016      	beq.n	8010c36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0a:	3324      	adds	r3, #36	; 0x24
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f001 f92f 	bl	8011e70 <xTaskRemoveFromEventList>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d00e      	beq.n	8010c36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d00b      	beq.n	8010c36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	e007      	b.n	8010c36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	b25a      	sxtb	r2, r3
 8010c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c36:	2301      	movs	r3, #1
 8010c38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010c3a:	e001      	b.n	8010c40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3738      	adds	r7, #56	; 0x38
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b08e      	sub	sp, #56	; 0x38
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d109      	bne.n	8010c7c <xQueueGiveFromISR+0x28>
	__asm volatile
 8010c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6c:	f383 8811 	msr	BASEPRI, r3
 8010c70:	f3bf 8f6f 	isb	sy
 8010c74:	f3bf 8f4f 	dsb	sy
 8010c78:	623b      	str	r3, [r7, #32]
 8010c7a:	e7fe      	b.n	8010c7a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d009      	beq.n	8010c98 <xQueueGiveFromISR+0x44>
 8010c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c88:	f383 8811 	msr	BASEPRI, r3
 8010c8c:	f3bf 8f6f 	isb	sy
 8010c90:	f3bf 8f4f 	dsb	sy
 8010c94:	61fb      	str	r3, [r7, #28]
 8010c96:	e7fe      	b.n	8010c96 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d103      	bne.n	8010ca8 <xQueueGiveFromISR+0x54>
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	689b      	ldr	r3, [r3, #8]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <xQueueGiveFromISR+0x58>
 8010ca8:	2301      	movs	r3, #1
 8010caa:	e000      	b.n	8010cae <xQueueGiveFromISR+0x5a>
 8010cac:	2300      	movs	r3, #0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d109      	bne.n	8010cc6 <xQueueGiveFromISR+0x72>
 8010cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb6:	f383 8811 	msr	BASEPRI, r3
 8010cba:	f3bf 8f6f 	isb	sy
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	61bb      	str	r3, [r7, #24]
 8010cc4:	e7fe      	b.n	8010cc4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cc6:	f002 f9ad 	bl	8013024 <vPortValidateInterruptPriority>
	__asm volatile
 8010cca:	f3ef 8211 	mrs	r2, BASEPRI
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	617a      	str	r2, [r7, #20]
 8010ce0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010ce2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d22b      	bcs.n	8010d4e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d10:	d112      	bne.n	8010d38 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d016      	beq.n	8010d48 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1c:	3324      	adds	r3, #36	; 0x24
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f001 f8a6 	bl	8011e70 <xTaskRemoveFromEventList>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00e      	beq.n	8010d48 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	2201      	movs	r2, #1
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	e007      	b.n	8010d48 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	b25a      	sxtb	r2, r3
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4c:	e001      	b.n	8010d52 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	637b      	str	r3, [r7, #52]	; 0x34
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3738      	adds	r7, #56	; 0x38
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
	...

08010d68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08c      	sub	sp, #48	; 0x30
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d74:	2300      	movs	r3, #0
 8010d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d109      	bne.n	8010d96 <xQueueReceive+0x2e>
	__asm volatile
 8010d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d86:	f383 8811 	msr	BASEPRI, r3
 8010d8a:	f3bf 8f6f 	isb	sy
 8010d8e:	f3bf 8f4f 	dsb	sy
 8010d92:	623b      	str	r3, [r7, #32]
 8010d94:	e7fe      	b.n	8010d94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d103      	bne.n	8010da4 <xQueueReceive+0x3c>
 8010d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d101      	bne.n	8010da8 <xQueueReceive+0x40>
 8010da4:	2301      	movs	r3, #1
 8010da6:	e000      	b.n	8010daa <xQueueReceive+0x42>
 8010da8:	2300      	movs	r3, #0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d109      	bne.n	8010dc2 <xQueueReceive+0x5a>
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	61fb      	str	r3, [r7, #28]
 8010dc0:	e7fe      	b.n	8010dc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dc2:	f001 fa0b 	bl	80121dc <xTaskGetSchedulerState>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d102      	bne.n	8010dd2 <xQueueReceive+0x6a>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d101      	bne.n	8010dd6 <xQueueReceive+0x6e>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e000      	b.n	8010dd8 <xQueueReceive+0x70>
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d109      	bne.n	8010df0 <xQueueReceive+0x88>
 8010ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de0:	f383 8811 	msr	BASEPRI, r3
 8010de4:	f3bf 8f6f 	isb	sy
 8010de8:	f3bf 8f4f 	dsb	sy
 8010dec:	61bb      	str	r3, [r7, #24]
 8010dee:	e7fe      	b.n	8010dee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010df0:	f002 f83c 	bl	8012e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d01f      	beq.n	8010e40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e00:	68b9      	ldr	r1, [r7, #8]
 8010e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e04:	f000 fab5 	bl	8011372 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0a:	1e5a      	subs	r2, r3, #1
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	691b      	ldr	r3, [r3, #16]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00f      	beq.n	8010e38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	3310      	adds	r3, #16
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f001 f827 	bl	8011e70 <xTaskRemoveFromEventList>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d007      	beq.n	8010e38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e28:	4b3c      	ldr	r3, [pc, #240]	; (8010f1c <xQueueReceive+0x1b4>)
 8010e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	f3bf 8f4f 	dsb	sy
 8010e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e38:	f002 f846 	bl	8012ec8 <vPortExitCritical>
				return pdPASS;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e069      	b.n	8010f14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d103      	bne.n	8010e4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e46:	f002 f83f 	bl	8012ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	e062      	b.n	8010f14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d106      	bne.n	8010e62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e54:	f107 0310 	add.w	r3, r7, #16
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f001 f86b 	bl	8011f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e62:	f002 f831 	bl	8012ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e66:	f000 fde7 	bl	8011a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e6a:	f001 ffff 	bl	8012e6c <vPortEnterCritical>
 8010e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e74:	b25b      	sxtb	r3, r3
 8010e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e7a:	d103      	bne.n	8010e84 <xQueueReceive+0x11c>
 8010e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e8a:	b25b      	sxtb	r3, r3
 8010e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e90:	d103      	bne.n	8010e9a <xQueueReceive+0x132>
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	2200      	movs	r2, #0
 8010e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e9a:	f002 f815 	bl	8012ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e9e:	1d3a      	adds	r2, r7, #4
 8010ea0:	f107 0310 	add.w	r3, r7, #16
 8010ea4:	4611      	mov	r1, r2
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f001 f85a 	bl	8011f60 <xTaskCheckForTimeOut>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d123      	bne.n	8010efa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eb4:	f000 fad5 	bl	8011462 <prvIsQueueEmpty>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d017      	beq.n	8010eee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec0:	3324      	adds	r3, #36	; 0x24
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 ff84 	bl	8011dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ece:	f000 fa76 	bl	80113be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ed2:	f000 fdbf 	bl	8011a54 <xTaskResumeAll>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d189      	bne.n	8010df0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010edc:	4b0f      	ldr	r3, [pc, #60]	; (8010f1c <xQueueReceive+0x1b4>)
 8010ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	e780      	b.n	8010df0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ef0:	f000 fa65 	bl	80113be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ef4:	f000 fdae 	bl	8011a54 <xTaskResumeAll>
 8010ef8:	e77a      	b.n	8010df0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010efc:	f000 fa5f 	bl	80113be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f00:	f000 fda8 	bl	8011a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f06:	f000 faac 	bl	8011462 <prvIsQueueEmpty>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f43f af6f 	beq.w	8010df0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3730      	adds	r7, #48	; 0x30
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	e000ed04 	.word	0xe000ed04

08010f20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b08e      	sub	sp, #56	; 0x38
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010f32:	2300      	movs	r3, #0
 8010f34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d109      	bne.n	8010f50 <xQueueSemaphoreTake+0x30>
 8010f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	623b      	str	r3, [r7, #32]
 8010f4e:	e7fe      	b.n	8010f4e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d009      	beq.n	8010f6c <xQueueSemaphoreTake+0x4c>
 8010f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	61fb      	str	r3, [r7, #28]
 8010f6a:	e7fe      	b.n	8010f6a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f6c:	f001 f936 	bl	80121dc <xTaskGetSchedulerState>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <xQueueSemaphoreTake+0x5c>
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d101      	bne.n	8010f80 <xQueueSemaphoreTake+0x60>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	e000      	b.n	8010f82 <xQueueSemaphoreTake+0x62>
 8010f80:	2300      	movs	r3, #0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d109      	bne.n	8010f9a <xQueueSemaphoreTake+0x7a>
 8010f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8a:	f383 8811 	msr	BASEPRI, r3
 8010f8e:	f3bf 8f6f 	isb	sy
 8010f92:	f3bf 8f4f 	dsb	sy
 8010f96:	61bb      	str	r3, [r7, #24]
 8010f98:	e7fe      	b.n	8010f98 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f9a:	f001 ff67 	bl	8012e6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d024      	beq.n	8010ff4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	1e5a      	subs	r2, r3, #1
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d104      	bne.n	8010fc4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010fba:	f001 fa81 	bl	80124c0 <pvTaskIncrementMutexHeldCount>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc6:	691b      	ldr	r3, [r3, #16]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d00f      	beq.n	8010fec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	3310      	adds	r3, #16
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f000 ff4d 	bl	8011e70 <xTaskRemoveFromEventList>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d007      	beq.n	8010fec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fdc:	4b53      	ldr	r3, [pc, #332]	; (801112c <xQueueSemaphoreTake+0x20c>)
 8010fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010fec:	f001 ff6c 	bl	8012ec8 <vPortExitCritical>
				return pdPASS;
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e096      	b.n	8011122 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d110      	bne.n	801101c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d009      	beq.n	8011014 <xQueueSemaphoreTake+0xf4>
 8011000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011004:	f383 8811 	msr	BASEPRI, r3
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	f3bf 8f4f 	dsb	sy
 8011010:	617b      	str	r3, [r7, #20]
 8011012:	e7fe      	b.n	8011012 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011014:	f001 ff58 	bl	8012ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011018:	2300      	movs	r3, #0
 801101a:	e082      	b.n	8011122 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801101c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801101e:	2b00      	cmp	r3, #0
 8011020:	d106      	bne.n	8011030 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011022:	f107 030c 	add.w	r3, r7, #12
 8011026:	4618      	mov	r0, r3
 8011028:	f000 ff84 	bl	8011f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801102c:	2301      	movs	r3, #1
 801102e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011030:	f001 ff4a 	bl	8012ec8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011034:	f000 fd00 	bl	8011a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011038:	f001 ff18 	bl	8012e6c <vPortEnterCritical>
 801103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011042:	b25b      	sxtb	r3, r3
 8011044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011048:	d103      	bne.n	8011052 <xQueueSemaphoreTake+0x132>
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104c:	2200      	movs	r2, #0
 801104e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011058:	b25b      	sxtb	r3, r3
 801105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801105e:	d103      	bne.n	8011068 <xQueueSemaphoreTake+0x148>
 8011060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011062:	2200      	movs	r2, #0
 8011064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011068:	f001 ff2e 	bl	8012ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801106c:	463a      	mov	r2, r7
 801106e:	f107 030c 	add.w	r3, r7, #12
 8011072:	4611      	mov	r1, r2
 8011074:	4618      	mov	r0, r3
 8011076:	f000 ff73 	bl	8011f60 <xTaskCheckForTimeOut>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d132      	bne.n	80110e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011082:	f000 f9ee 	bl	8011462 <prvIsQueueEmpty>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d026      	beq.n	80110da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d109      	bne.n	80110a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011094:	f001 feea 	bl	8012e6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	4618      	mov	r0, r3
 801109e:	f001 f8bb 	bl	8012218 <xTaskPriorityInherit>
 80110a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80110a4:	f001 ff10 	bl	8012ec8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	3324      	adds	r3, #36	; 0x24
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	4611      	mov	r1, r2
 80110b0:	4618      	mov	r0, r3
 80110b2:	f000 fe8f 	bl	8011dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110b8:	f000 f981 	bl	80113be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110bc:	f000 fcca 	bl	8011a54 <xTaskResumeAll>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f47f af69 	bne.w	8010f9a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80110c8:	4b18      	ldr	r3, [pc, #96]	; (801112c <xQueueSemaphoreTake+0x20c>)
 80110ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	f3bf 8f6f 	isb	sy
 80110d8:	e75f      	b.n	8010f9a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80110da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110dc:	f000 f96f 	bl	80113be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110e0:	f000 fcb8 	bl	8011a54 <xTaskResumeAll>
 80110e4:	e759      	b.n	8010f9a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80110e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110e8:	f000 f969 	bl	80113be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110ec:	f000 fcb2 	bl	8011a54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110f2:	f000 f9b6 	bl	8011462 <prvIsQueueEmpty>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f43f af4e 	beq.w	8010f9a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00d      	beq.n	8011120 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011104:	f001 feb2 	bl	8012e6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801110a:	f000 f8b0 	bl	801126e <prvGetDisinheritPriorityAfterTimeout>
 801110e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	689b      	ldr	r3, [r3, #8]
 8011114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011116:	4618      	mov	r0, r3
 8011118:	f001 f952 	bl	80123c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801111c:	f001 fed4 	bl	8012ec8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011122:	4618      	mov	r0, r3
 8011124:	3738      	adds	r7, #56	; 0x38
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	e000ed04 	.word	0xe000ed04

08011130 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b08e      	sub	sp, #56	; 0x38
 8011134:	af00      	add	r7, sp, #0
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	60b9      	str	r1, [r7, #8]
 801113a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011142:	2b00      	cmp	r3, #0
 8011144:	d109      	bne.n	801115a <xQueueReceiveFromISR+0x2a>
 8011146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801114a:	f383 8811 	msr	BASEPRI, r3
 801114e:	f3bf 8f6f 	isb	sy
 8011152:	f3bf 8f4f 	dsb	sy
 8011156:	623b      	str	r3, [r7, #32]
 8011158:	e7fe      	b.n	8011158 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d103      	bne.n	8011168 <xQueueReceiveFromISR+0x38>
 8011160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011164:	2b00      	cmp	r3, #0
 8011166:	d101      	bne.n	801116c <xQueueReceiveFromISR+0x3c>
 8011168:	2301      	movs	r3, #1
 801116a:	e000      	b.n	801116e <xQueueReceiveFromISR+0x3e>
 801116c:	2300      	movs	r3, #0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d109      	bne.n	8011186 <xQueueReceiveFromISR+0x56>
 8011172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011176:	f383 8811 	msr	BASEPRI, r3
 801117a:	f3bf 8f6f 	isb	sy
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	61fb      	str	r3, [r7, #28]
 8011184:	e7fe      	b.n	8011184 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011186:	f001 ff4d 	bl	8013024 <vPortValidateInterruptPriority>
	__asm volatile
 801118a:	f3ef 8211 	mrs	r2, BASEPRI
 801118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011192:	f383 8811 	msr	BASEPRI, r3
 8011196:	f3bf 8f6f 	isb	sy
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	61ba      	str	r2, [r7, #24]
 80111a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80111a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d02f      	beq.n	8011212 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111bc:	68b9      	ldr	r1, [r7, #8]
 80111be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111c0:	f000 f8d7 	bl	8011372 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c6:	1e5a      	subs	r2, r3, #1
 80111c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d4:	d112      	bne.n	80111fc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d8:	691b      	ldr	r3, [r3, #16]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d016      	beq.n	801120c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	3310      	adds	r3, #16
 80111e2:	4618      	mov	r0, r3
 80111e4:	f000 fe44 	bl	8011e70 <xTaskRemoveFromEventList>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00e      	beq.n	801120c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00b      	beq.n	801120c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2201      	movs	r2, #1
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	e007      	b.n	801120c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80111fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011200:	3301      	adds	r3, #1
 8011202:	b2db      	uxtb	r3, r3
 8011204:	b25a      	sxtb	r2, r3
 8011206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801120c:	2301      	movs	r3, #1
 801120e:	637b      	str	r3, [r7, #52]	; 0x34
 8011210:	e001      	b.n	8011216 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011212:	2300      	movs	r3, #0
 8011214:	637b      	str	r3, [r7, #52]	; 0x34
 8011216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011218:	613b      	str	r3, [r7, #16]
	__asm volatile
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011222:	4618      	mov	r0, r3
 8011224:	3738      	adds	r7, #56	; 0x38
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}

0801122a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801122a:	b580      	push	{r7, lr}
 801122c:	b084      	sub	sp, #16
 801122e:	af00      	add	r7, sp, #0
 8011230:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d109      	bne.n	8011250 <vQueueDelete+0x26>
	__asm volatile
 801123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011240:	f383 8811 	msr	BASEPRI, r3
 8011244:	f3bf 8f6f 	isb	sy
 8011248:	f3bf 8f4f 	dsb	sy
 801124c:	60bb      	str	r3, [r7, #8]
 801124e:	e7fe      	b.n	801124e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f000 f95d 	bl	8011510 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f001 ffdf 	bl	8013224 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011266:	bf00      	nop
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801126e:	b480      	push	{r7}
 8011270:	b085      	sub	sp, #20
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127a:	2b00      	cmp	r3, #0
 801127c:	d006      	beq.n	801128c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011288:	60fb      	str	r3, [r7, #12]
 801128a:	e001      	b.n	8011290 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801128c:	2300      	movs	r3, #0
 801128e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011290:	68fb      	ldr	r3, [r7, #12]
	}
 8011292:	4618      	mov	r0, r3
 8011294:	3714      	adds	r7, #20
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b086      	sub	sp, #24
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	60f8      	str	r0, [r7, #12]
 80112a6:	60b9      	str	r1, [r7, #8]
 80112a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80112aa:	2300      	movs	r3, #0
 80112ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d10d      	bne.n	80112d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d14d      	bne.n	8011360 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f001 f80d 	bl	80122e8 <xTaskPriorityDisinherit>
 80112ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2200      	movs	r2, #0
 80112d4:	609a      	str	r2, [r3, #8]
 80112d6:	e043      	b.n	8011360 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d119      	bne.n	8011312 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6858      	ldr	r0, [r3, #4]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e6:	461a      	mov	r2, r3
 80112e8:	68b9      	ldr	r1, [r7, #8]
 80112ea:	f002 f8ec 	bl	80134c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	685a      	ldr	r2, [r3, #4]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f6:	441a      	add	r2, r3
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	685a      	ldr	r2, [r3, #4]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	429a      	cmp	r2, r3
 8011306:	d32b      	bcc.n	8011360 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	605a      	str	r2, [r3, #4]
 8011310:	e026      	b.n	8011360 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	68d8      	ldr	r0, [r3, #12]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131a:	461a      	mov	r2, r3
 801131c:	68b9      	ldr	r1, [r7, #8]
 801131e:	f002 f8d2 	bl	80134c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	68da      	ldr	r2, [r3, #12]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132a:	425b      	negs	r3, r3
 801132c:	441a      	add	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	68da      	ldr	r2, [r3, #12]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d207      	bcs.n	801134e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	689a      	ldr	r2, [r3, #8]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011346:	425b      	negs	r3, r3
 8011348:	441a      	add	r2, r3
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b02      	cmp	r3, #2
 8011352:	d105      	bne.n	8011360 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d002      	beq.n	8011360 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	3b01      	subs	r3, #1
 801135e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	1c5a      	adds	r2, r3, #1
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011368:	697b      	ldr	r3, [r7, #20]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3718      	adds	r7, #24
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b082      	sub	sp, #8
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011380:	2b00      	cmp	r3, #0
 8011382:	d018      	beq.n	80113b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	68da      	ldr	r2, [r3, #12]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801138c:	441a      	add	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	68da      	ldr	r2, [r3, #12]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	429a      	cmp	r2, r3
 801139c:	d303      	bcc.n	80113a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	68d9      	ldr	r1, [r3, #12]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ae:	461a      	mov	r2, r3
 80113b0:	6838      	ldr	r0, [r7, #0]
 80113b2:	f002 f888 	bl	80134c6 <memcpy>
	}
}
 80113b6:	bf00      	nop
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}

080113be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	b084      	sub	sp, #16
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80113c6:	f001 fd51 	bl	8012e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113d2:	e011      	b.n	80113f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d012      	beq.n	8011402 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3324      	adds	r3, #36	; 0x24
 80113e0:	4618      	mov	r0, r3
 80113e2:	f000 fd45 	bl	8011e70 <xTaskRemoveFromEventList>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80113ec:	f000 fe18 	bl	8012020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	3b01      	subs	r3, #1
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	dce9      	bgt.n	80113d4 <prvUnlockQueue+0x16>
 8011400:	e000      	b.n	8011404 <prvUnlockQueue+0x46>
					break;
 8011402:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	22ff      	movs	r2, #255	; 0xff
 8011408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801140c:	f001 fd5c 	bl	8012ec8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011410:	f001 fd2c 	bl	8012e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801141a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801141c:	e011      	b.n	8011442 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	691b      	ldr	r3, [r3, #16]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d012      	beq.n	801144c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	3310      	adds	r3, #16
 801142a:	4618      	mov	r0, r3
 801142c:	f000 fd20 	bl	8011e70 <xTaskRemoveFromEventList>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d001      	beq.n	801143a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011436:	f000 fdf3 	bl	8012020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801143a:	7bbb      	ldrb	r3, [r7, #14]
 801143c:	3b01      	subs	r3, #1
 801143e:	b2db      	uxtb	r3, r3
 8011440:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011446:	2b00      	cmp	r3, #0
 8011448:	dce9      	bgt.n	801141e <prvUnlockQueue+0x60>
 801144a:	e000      	b.n	801144e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801144c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	22ff      	movs	r2, #255	; 0xff
 8011452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011456:	f001 fd37 	bl	8012ec8 <vPortExitCritical>
}
 801145a:	bf00      	nop
 801145c:	3710      	adds	r7, #16
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011462:	b580      	push	{r7, lr}
 8011464:	b084      	sub	sp, #16
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801146a:	f001 fcff 	bl	8012e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011472:	2b00      	cmp	r3, #0
 8011474:	d102      	bne.n	801147c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011476:	2301      	movs	r3, #1
 8011478:	60fb      	str	r3, [r7, #12]
 801147a:	e001      	b.n	8011480 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801147c:	2300      	movs	r3, #0
 801147e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011480:	f001 fd22 	bl	8012ec8 <vPortExitCritical>

	return xReturn;
 8011484:	68fb      	ldr	r3, [r7, #12]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b084      	sub	sp, #16
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011496:	f001 fce9 	bl	8012e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d102      	bne.n	80114ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80114a6:	2301      	movs	r3, #1
 80114a8:	60fb      	str	r3, [r7, #12]
 80114aa:	e001      	b.n	80114b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80114ac:	2300      	movs	r3, #0
 80114ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114b0:	f001 fd0a 	bl	8012ec8 <vPortExitCritical>

	return xReturn;
 80114b4:	68fb      	ldr	r3, [r7, #12]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
	...

080114c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114ca:	2300      	movs	r3, #0
 80114cc:	60fb      	str	r3, [r7, #12]
 80114ce:	e014      	b.n	80114fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80114d0:	4a0e      	ldr	r2, [pc, #56]	; (801150c <vQueueAddToRegistry+0x4c>)
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10b      	bne.n	80114f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80114dc:	490b      	ldr	r1, [pc, #44]	; (801150c <vQueueAddToRegistry+0x4c>)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	683a      	ldr	r2, [r7, #0]
 80114e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80114e6:	4a09      	ldr	r2, [pc, #36]	; (801150c <vQueueAddToRegistry+0x4c>)
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	00db      	lsls	r3, r3, #3
 80114ec:	4413      	add	r3, r2
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80114f2:	e005      	b.n	8011500 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	3301      	adds	r3, #1
 80114f8:	60fb      	str	r3, [r7, #12]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2b07      	cmp	r3, #7
 80114fe:	d9e7      	bls.n	80114d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011500:	bf00      	nop
 8011502:	3714      	adds	r7, #20
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	2000494c 	.word	0x2000494c

08011510 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011510:	b480      	push	{r7}
 8011512:	b085      	sub	sp, #20
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011518:	2300      	movs	r3, #0
 801151a:	60fb      	str	r3, [r7, #12]
 801151c:	e016      	b.n	801154c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801151e:	4a10      	ldr	r2, [pc, #64]	; (8011560 <vQueueUnregisterQueue+0x50>)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	00db      	lsls	r3, r3, #3
 8011524:	4413      	add	r3, r2
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	429a      	cmp	r2, r3
 801152c:	d10b      	bne.n	8011546 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801152e:	4a0c      	ldr	r2, [pc, #48]	; (8011560 <vQueueUnregisterQueue+0x50>)
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2100      	movs	r1, #0
 8011534:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011538:	4a09      	ldr	r2, [pc, #36]	; (8011560 <vQueueUnregisterQueue+0x50>)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	00db      	lsls	r3, r3, #3
 801153e:	4413      	add	r3, r2
 8011540:	2200      	movs	r2, #0
 8011542:	605a      	str	r2, [r3, #4]
				break;
 8011544:	e005      	b.n	8011552 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	3301      	adds	r3, #1
 801154a:	60fb      	str	r3, [r7, #12]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b07      	cmp	r3, #7
 8011550:	d9e5      	bls.n	801151e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011552:	bf00      	nop
 8011554:	3714      	adds	r7, #20
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop
 8011560:	2000494c 	.word	0x2000494c

08011564 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011564:	b580      	push	{r7, lr}
 8011566:	b086      	sub	sp, #24
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011574:	f001 fc7a 	bl	8012e6c <vPortEnterCritical>
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801157e:	b25b      	sxtb	r3, r3
 8011580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011584:	d103      	bne.n	801158e <vQueueWaitForMessageRestricted+0x2a>
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2200      	movs	r2, #0
 801158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011594:	b25b      	sxtb	r3, r3
 8011596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159a:	d103      	bne.n	80115a4 <vQueueWaitForMessageRestricted+0x40>
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	2200      	movs	r2, #0
 80115a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115a4:	f001 fc90 	bl	8012ec8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d106      	bne.n	80115be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	3324      	adds	r3, #36	; 0x24
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	68b9      	ldr	r1, [r7, #8]
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 fc2f 	bl	8011e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80115be:	6978      	ldr	r0, [r7, #20]
 80115c0:	f7ff fefd 	bl	80113be <prvUnlockQueue>
	}
 80115c4:	bf00      	nop
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08e      	sub	sp, #56	; 0x38
 80115d0:	af04      	add	r7, sp, #16
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
 80115d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80115da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d109      	bne.n	80115f4 <xTaskCreateStatic+0x28>
 80115e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	623b      	str	r3, [r7, #32]
 80115f2:	e7fe      	b.n	80115f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80115f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d109      	bne.n	801160e <xTaskCreateStatic+0x42>
 80115fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fe:	f383 8811 	msr	BASEPRI, r3
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	61fb      	str	r3, [r7, #28]
 801160c:	e7fe      	b.n	801160c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801160e:	235c      	movs	r3, #92	; 0x5c
 8011610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	2b5c      	cmp	r3, #92	; 0x5c
 8011616:	d009      	beq.n	801162c <xTaskCreateStatic+0x60>
 8011618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	61bb      	str	r3, [r7, #24]
 801162a:	e7fe      	b.n	801162a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801162c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011630:	2b00      	cmp	r3, #0
 8011632:	d01e      	beq.n	8011672 <xTaskCreateStatic+0xa6>
 8011634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011636:	2b00      	cmp	r3, #0
 8011638:	d01b      	beq.n	8011672 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011642:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011646:	2202      	movs	r2, #2
 8011648:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801164c:	2300      	movs	r3, #0
 801164e:	9303      	str	r3, [sp, #12]
 8011650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011652:	9302      	str	r3, [sp, #8]
 8011654:	f107 0314 	add.w	r3, r7, #20
 8011658:	9301      	str	r3, [sp, #4]
 801165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165c:	9300      	str	r3, [sp, #0]
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	68b9      	ldr	r1, [r7, #8]
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f000 f850 	bl	801170a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801166a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801166c:	f000 f8dc 	bl	8011828 <prvAddNewTaskToReadyList>
 8011670:	e001      	b.n	8011676 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011672:	2300      	movs	r3, #0
 8011674:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011676:	697b      	ldr	r3, [r7, #20]
	}
 8011678:	4618      	mov	r0, r3
 801167a:	3728      	adds	r7, #40	; 0x28
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011680:	b580      	push	{r7, lr}
 8011682:	b08c      	sub	sp, #48	; 0x30
 8011684:	af04      	add	r7, sp, #16
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	603b      	str	r3, [r7, #0]
 801168c:	4613      	mov	r3, r2
 801168e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011690:	88fb      	ldrh	r3, [r7, #6]
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4618      	mov	r0, r3
 8011696:	f001 fd03 	bl	80130a0 <pvPortMalloc>
 801169a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00e      	beq.n	80116c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80116a2:	205c      	movs	r0, #92	; 0x5c
 80116a4:	f001 fcfc 	bl	80130a0 <pvPortMalloc>
 80116a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d003      	beq.n	80116b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	631a      	str	r2, [r3, #48]	; 0x30
 80116b6:	e005      	b.n	80116c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116b8:	6978      	ldr	r0, [r7, #20]
 80116ba:	f001 fdb3 	bl	8013224 <vPortFree>
 80116be:	e001      	b.n	80116c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116c0:	2300      	movs	r3, #0
 80116c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d017      	beq.n	80116fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80116ca:	69fb      	ldr	r3, [r7, #28]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80116d2:	88fa      	ldrh	r2, [r7, #6]
 80116d4:	2300      	movs	r3, #0
 80116d6:	9303      	str	r3, [sp, #12]
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	9302      	str	r3, [sp, #8]
 80116dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116de:	9301      	str	r3, [sp, #4]
 80116e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	68b9      	ldr	r1, [r7, #8]
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f000 f80e 	bl	801170a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116ee:	69f8      	ldr	r0, [r7, #28]
 80116f0:	f000 f89a 	bl	8011828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116f4:	2301      	movs	r3, #1
 80116f6:	61bb      	str	r3, [r7, #24]
 80116f8:	e002      	b.n	8011700 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116fa:	f04f 33ff 	mov.w	r3, #4294967295
 80116fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011700:	69bb      	ldr	r3, [r7, #24]
	}
 8011702:	4618      	mov	r0, r3
 8011704:	3720      	adds	r7, #32
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}

0801170a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801170a:	b580      	push	{r7, lr}
 801170c:	b088      	sub	sp, #32
 801170e:	af00      	add	r7, sp, #0
 8011710:	60f8      	str	r0, [r7, #12]
 8011712:	60b9      	str	r1, [r7, #8]
 8011714:	607a      	str	r2, [r7, #4]
 8011716:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	461a      	mov	r2, r3
 8011722:	21a5      	movs	r1, #165	; 0xa5
 8011724:	f001 feda 	bl	80134dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011732:	3b01      	subs	r3, #1
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	4413      	add	r3, r2
 8011738:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	f023 0307 	bic.w	r3, r3, #7
 8011740:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	f003 0307 	and.w	r3, r3, #7
 8011748:	2b00      	cmp	r3, #0
 801174a:	d009      	beq.n	8011760 <prvInitialiseNewTask+0x56>
 801174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	617b      	str	r3, [r7, #20]
 801175e:	e7fe      	b.n	801175e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d01f      	beq.n	80117a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011766:	2300      	movs	r3, #0
 8011768:	61fb      	str	r3, [r7, #28]
 801176a:	e012      	b.n	8011792 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801176c:	68ba      	ldr	r2, [r7, #8]
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	4413      	add	r3, r2
 8011772:	7819      	ldrb	r1, [r3, #0]
 8011774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	4413      	add	r3, r2
 801177a:	3334      	adds	r3, #52	; 0x34
 801177c:	460a      	mov	r2, r1
 801177e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	4413      	add	r3, r2
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d006      	beq.n	801179a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	3301      	adds	r3, #1
 8011790:	61fb      	str	r3, [r7, #28]
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	2b0f      	cmp	r3, #15
 8011796:	d9e9      	bls.n	801176c <prvInitialiseNewTask+0x62>
 8011798:	e000      	b.n	801179c <prvInitialiseNewTask+0x92>
			{
				break;
 801179a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179e:	2200      	movs	r2, #0
 80117a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80117a4:	e003      	b.n	80117ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80117a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a8:	2200      	movs	r2, #0
 80117aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b0:	2b37      	cmp	r3, #55	; 0x37
 80117b2:	d901      	bls.n	80117b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117b4:	2337      	movs	r3, #55	; 0x37
 80117b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80117b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80117c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c6:	2200      	movs	r2, #0
 80117c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80117ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117cc:	3304      	adds	r3, #4
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7fe fe7a 	bl	80104c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80117d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d6:	3318      	adds	r3, #24
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fe fe75 	bl	80104c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80117de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80117ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f6:	2200      	movs	r2, #0
 80117f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011802:	683a      	ldr	r2, [r7, #0]
 8011804:	68f9      	ldr	r1, [r7, #12]
 8011806:	69b8      	ldr	r0, [r7, #24]
 8011808:	f001 fa08 	bl	8012c1c <pxPortInitialiseStack>
 801180c:	4602      	mov	r2, r0
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d002      	beq.n	801181e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801181c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801181e:	bf00      	nop
 8011820:	3720      	adds	r7, #32
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
	...

08011828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011830:	f001 fb1c 	bl	8012e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011834:	4b2d      	ldr	r3, [pc, #180]	; (80118ec <prvAddNewTaskToReadyList+0xc4>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	3301      	adds	r3, #1
 801183a:	4a2c      	ldr	r2, [pc, #176]	; (80118ec <prvAddNewTaskToReadyList+0xc4>)
 801183c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801183e:	4b2c      	ldr	r3, [pc, #176]	; (80118f0 <prvAddNewTaskToReadyList+0xc8>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d109      	bne.n	801185a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011846:	4a2a      	ldr	r2, [pc, #168]	; (80118f0 <prvAddNewTaskToReadyList+0xc8>)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801184c:	4b27      	ldr	r3, [pc, #156]	; (80118ec <prvAddNewTaskToReadyList+0xc4>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d110      	bne.n	8011876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011854:	f000 fc08 	bl	8012068 <prvInitialiseTaskLists>
 8011858:	e00d      	b.n	8011876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801185a:	4b26      	ldr	r3, [pc, #152]	; (80118f4 <prvAddNewTaskToReadyList+0xcc>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d109      	bne.n	8011876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011862:	4b23      	ldr	r3, [pc, #140]	; (80118f0 <prvAddNewTaskToReadyList+0xc8>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186c:	429a      	cmp	r2, r3
 801186e:	d802      	bhi.n	8011876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011870:	4a1f      	ldr	r2, [pc, #124]	; (80118f0 <prvAddNewTaskToReadyList+0xc8>)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011876:	4b20      	ldr	r3, [pc, #128]	; (80118f8 <prvAddNewTaskToReadyList+0xd0>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3301      	adds	r3, #1
 801187c:	4a1e      	ldr	r2, [pc, #120]	; (80118f8 <prvAddNewTaskToReadyList+0xd0>)
 801187e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011880:	4b1d      	ldr	r3, [pc, #116]	; (80118f8 <prvAddNewTaskToReadyList+0xd0>)
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801188c:	4b1b      	ldr	r3, [pc, #108]	; (80118fc <prvAddNewTaskToReadyList+0xd4>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	429a      	cmp	r2, r3
 8011892:	d903      	bls.n	801189c <prvAddNewTaskToReadyList+0x74>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011898:	4a18      	ldr	r2, [pc, #96]	; (80118fc <prvAddNewTaskToReadyList+0xd4>)
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a0:	4613      	mov	r3, r2
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	4413      	add	r3, r2
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4a15      	ldr	r2, [pc, #84]	; (8011900 <prvAddNewTaskToReadyList+0xd8>)
 80118aa:	441a      	add	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	3304      	adds	r3, #4
 80118b0:	4619      	mov	r1, r3
 80118b2:	4610      	mov	r0, r2
 80118b4:	f7fe fe15 	bl	80104e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80118b8:	f001 fb06 	bl	8012ec8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80118bc:	4b0d      	ldr	r3, [pc, #52]	; (80118f4 <prvAddNewTaskToReadyList+0xcc>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00e      	beq.n	80118e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118c4:	4b0a      	ldr	r3, [pc, #40]	; (80118f0 <prvAddNewTaskToReadyList+0xc8>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d207      	bcs.n	80118e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80118d2:	4b0c      	ldr	r3, [pc, #48]	; (8011904 <prvAddNewTaskToReadyList+0xdc>)
 80118d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118e2:	bf00      	nop
 80118e4:	3708      	adds	r7, #8
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	20001354 	.word	0x20001354
 80118f0:	20000e80 	.word	0x20000e80
 80118f4:	20001360 	.word	0x20001360
 80118f8:	20001370 	.word	0x20001370
 80118fc:	2000135c 	.word	0x2000135c
 8011900:	20000e84 	.word	0x20000e84
 8011904:	e000ed04 	.word	0xe000ed04

08011908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011910:	2300      	movs	r3, #0
 8011912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d016      	beq.n	8011948 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801191a:	4b13      	ldr	r3, [pc, #76]	; (8011968 <vTaskDelay+0x60>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d009      	beq.n	8011936 <vTaskDelay+0x2e>
 8011922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011926:	f383 8811 	msr	BASEPRI, r3
 801192a:	f3bf 8f6f 	isb	sy
 801192e:	f3bf 8f4f 	dsb	sy
 8011932:	60bb      	str	r3, [r7, #8]
 8011934:	e7fe      	b.n	8011934 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011936:	f000 f87f 	bl	8011a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801193a:	2100      	movs	r1, #0
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 fdd3 	bl	80124e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011942:	f000 f887 	bl	8011a54 <xTaskResumeAll>
 8011946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801194e:	4b07      	ldr	r3, [pc, #28]	; (801196c <vTaskDelay+0x64>)
 8011950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011954:	601a      	str	r2, [r3, #0]
 8011956:	f3bf 8f4f 	dsb	sy
 801195a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801195e:	bf00      	nop
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	2000137c 	.word	0x2000137c
 801196c:	e000ed04 	.word	0xe000ed04

08011970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08a      	sub	sp, #40	; 0x28
 8011974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011976:	2300      	movs	r3, #0
 8011978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801197a:	2300      	movs	r3, #0
 801197c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801197e:	463a      	mov	r2, r7
 8011980:	1d39      	adds	r1, r7, #4
 8011982:	f107 0308 	add.w	r3, r7, #8
 8011986:	4618      	mov	r0, r3
 8011988:	f7fe fd4a 	bl	8010420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	68ba      	ldr	r2, [r7, #8]
 8011992:	9202      	str	r2, [sp, #8]
 8011994:	9301      	str	r3, [sp, #4]
 8011996:	2300      	movs	r3, #0
 8011998:	9300      	str	r3, [sp, #0]
 801199a:	2300      	movs	r3, #0
 801199c:	460a      	mov	r2, r1
 801199e:	4920      	ldr	r1, [pc, #128]	; (8011a20 <vTaskStartScheduler+0xb0>)
 80119a0:	4820      	ldr	r0, [pc, #128]	; (8011a24 <vTaskStartScheduler+0xb4>)
 80119a2:	f7ff fe13 	bl	80115cc <xTaskCreateStatic>
 80119a6:	4602      	mov	r2, r0
 80119a8:	4b1f      	ldr	r3, [pc, #124]	; (8011a28 <vTaskStartScheduler+0xb8>)
 80119aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80119ac:	4b1e      	ldr	r3, [pc, #120]	; (8011a28 <vTaskStartScheduler+0xb8>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80119b4:	2301      	movs	r3, #1
 80119b6:	617b      	str	r3, [r7, #20]
 80119b8:	e001      	b.n	80119be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80119ba:	2300      	movs	r3, #0
 80119bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d102      	bne.n	80119ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80119c4:	f000 fde4 	bl	8012590 <xTimerCreateTimerTask>
 80119c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d115      	bne.n	80119fc <vTaskStartScheduler+0x8c>
 80119d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d4:	f383 8811 	msr	BASEPRI, r3
 80119d8:	f3bf 8f6f 	isb	sy
 80119dc:	f3bf 8f4f 	dsb	sy
 80119e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80119e2:	4b12      	ldr	r3, [pc, #72]	; (8011a2c <vTaskStartScheduler+0xbc>)
 80119e4:	f04f 32ff 	mov.w	r2, #4294967295
 80119e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80119ea:	4b11      	ldr	r3, [pc, #68]	; (8011a30 <vTaskStartScheduler+0xc0>)
 80119ec:	2201      	movs	r2, #1
 80119ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80119f0:	4b10      	ldr	r3, [pc, #64]	; (8011a34 <vTaskStartScheduler+0xc4>)
 80119f2:	2200      	movs	r2, #0
 80119f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80119f6:	f001 f99b 	bl	8012d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80119fa:	e00d      	b.n	8011a18 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a02:	d109      	bne.n	8011a18 <vTaskStartScheduler+0xa8>
 8011a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	e7fe      	b.n	8011a16 <vTaskStartScheduler+0xa6>
}
 8011a18:	bf00      	nop
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	08016c9c 	.word	0x08016c9c
 8011a24:	08012039 	.word	0x08012039
 8011a28:	20001378 	.word	0x20001378
 8011a2c:	20001374 	.word	0x20001374
 8011a30:	20001360 	.word	0x20001360
 8011a34:	20001358 	.word	0x20001358

08011a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011a38:	b480      	push	{r7}
 8011a3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011a3c:	4b04      	ldr	r3, [pc, #16]	; (8011a50 <vTaskSuspendAll+0x18>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	3301      	adds	r3, #1
 8011a42:	4a03      	ldr	r2, [pc, #12]	; (8011a50 <vTaskSuspendAll+0x18>)
 8011a44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011a46:	bf00      	nop
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr
 8011a50:	2000137c 	.word	0x2000137c

08011a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a62:	4b41      	ldr	r3, [pc, #260]	; (8011b68 <xTaskResumeAll+0x114>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d109      	bne.n	8011a7e <xTaskResumeAll+0x2a>
 8011a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6e:	f383 8811 	msr	BASEPRI, r3
 8011a72:	f3bf 8f6f 	isb	sy
 8011a76:	f3bf 8f4f 	dsb	sy
 8011a7a:	603b      	str	r3, [r7, #0]
 8011a7c:	e7fe      	b.n	8011a7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a7e:	f001 f9f5 	bl	8012e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a82:	4b39      	ldr	r3, [pc, #228]	; (8011b68 <xTaskResumeAll+0x114>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	4a37      	ldr	r2, [pc, #220]	; (8011b68 <xTaskResumeAll+0x114>)
 8011a8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a8c:	4b36      	ldr	r3, [pc, #216]	; (8011b68 <xTaskResumeAll+0x114>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d162      	bne.n	8011b5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a94:	4b35      	ldr	r3, [pc, #212]	; (8011b6c <xTaskResumeAll+0x118>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d05e      	beq.n	8011b5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a9c:	e02f      	b.n	8011afe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a9e:	4b34      	ldr	r3, [pc, #208]	; (8011b70 <xTaskResumeAll+0x11c>)
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3318      	adds	r3, #24
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fe fd76 	bl	801059c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	3304      	adds	r3, #4
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fe fd71 	bl	801059c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011abe:	4b2d      	ldr	r3, [pc, #180]	; (8011b74 <xTaskResumeAll+0x120>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d903      	bls.n	8011ace <xTaskResumeAll+0x7a>
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aca:	4a2a      	ldr	r2, [pc, #168]	; (8011b74 <xTaskResumeAll+0x120>)
 8011acc:	6013      	str	r3, [r2, #0]
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	4a27      	ldr	r2, [pc, #156]	; (8011b78 <xTaskResumeAll+0x124>)
 8011adc:	441a      	add	r2, r3
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	3304      	adds	r3, #4
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	f7fe fcfc 	bl	80104e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aee:	4b23      	ldr	r3, [pc, #140]	; (8011b7c <xTaskResumeAll+0x128>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d302      	bcc.n	8011afe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011af8:	4b21      	ldr	r3, [pc, #132]	; (8011b80 <xTaskResumeAll+0x12c>)
 8011afa:	2201      	movs	r2, #1
 8011afc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011afe:	4b1c      	ldr	r3, [pc, #112]	; (8011b70 <xTaskResumeAll+0x11c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d1cb      	bne.n	8011a9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d001      	beq.n	8011b10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b0c:	f000 fb46 	bl	801219c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011b10:	4b1c      	ldr	r3, [pc, #112]	; (8011b84 <xTaskResumeAll+0x130>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d010      	beq.n	8011b3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011b1c:	f000 f846 	bl	8011bac <xTaskIncrementTick>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d002      	beq.n	8011b2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011b26:	4b16      	ldr	r3, [pc, #88]	; (8011b80 <xTaskResumeAll+0x12c>)
 8011b28:	2201      	movs	r2, #1
 8011b2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1f1      	bne.n	8011b1c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011b38:	4b12      	ldr	r3, [pc, #72]	; (8011b84 <xTaskResumeAll+0x130>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011b3e:	4b10      	ldr	r3, [pc, #64]	; (8011b80 <xTaskResumeAll+0x12c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d009      	beq.n	8011b5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b46:	2301      	movs	r3, #1
 8011b48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b4a:	4b0f      	ldr	r3, [pc, #60]	; (8011b88 <xTaskResumeAll+0x134>)
 8011b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b5a:	f001 f9b5 	bl	8012ec8 <vPortExitCritical>

	return xAlreadyYielded;
 8011b5e:	68bb      	ldr	r3, [r7, #8]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	2000137c 	.word	0x2000137c
 8011b6c:	20001354 	.word	0x20001354
 8011b70:	20001314 	.word	0x20001314
 8011b74:	2000135c 	.word	0x2000135c
 8011b78:	20000e84 	.word	0x20000e84
 8011b7c:	20000e80 	.word	0x20000e80
 8011b80:	20001368 	.word	0x20001368
 8011b84:	20001364 	.word	0x20001364
 8011b88:	e000ed04 	.word	0xe000ed04

08011b8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011b92:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <xTaskGetTickCount+0x1c>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b98:	687b      	ldr	r3, [r7, #4]
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	370c      	adds	r7, #12
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop
 8011ba8:	20001358 	.word	0x20001358

08011bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bb6:	4b4e      	ldr	r3, [pc, #312]	; (8011cf0 <xTaskIncrementTick+0x144>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f040 8088 	bne.w	8011cd0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011bc0:	4b4c      	ldr	r3, [pc, #304]	; (8011cf4 <xTaskIncrementTick+0x148>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011bc8:	4a4a      	ldr	r2, [pc, #296]	; (8011cf4 <xTaskIncrementTick+0x148>)
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d11f      	bne.n	8011c14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011bd4:	4b48      	ldr	r3, [pc, #288]	; (8011cf8 <xTaskIncrementTick+0x14c>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d009      	beq.n	8011bf2 <xTaskIncrementTick+0x46>
 8011bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	603b      	str	r3, [r7, #0]
 8011bf0:	e7fe      	b.n	8011bf0 <xTaskIncrementTick+0x44>
 8011bf2:	4b41      	ldr	r3, [pc, #260]	; (8011cf8 <xTaskIncrementTick+0x14c>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	4b40      	ldr	r3, [pc, #256]	; (8011cfc <xTaskIncrementTick+0x150>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a3e      	ldr	r2, [pc, #248]	; (8011cf8 <xTaskIncrementTick+0x14c>)
 8011bfe:	6013      	str	r3, [r2, #0]
 8011c00:	4a3e      	ldr	r2, [pc, #248]	; (8011cfc <xTaskIncrementTick+0x150>)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	6013      	str	r3, [r2, #0]
 8011c06:	4b3e      	ldr	r3, [pc, #248]	; (8011d00 <xTaskIncrementTick+0x154>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	4a3c      	ldr	r2, [pc, #240]	; (8011d00 <xTaskIncrementTick+0x154>)
 8011c0e:	6013      	str	r3, [r2, #0]
 8011c10:	f000 fac4 	bl	801219c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011c14:	4b3b      	ldr	r3, [pc, #236]	; (8011d04 <xTaskIncrementTick+0x158>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	693a      	ldr	r2, [r7, #16]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d349      	bcc.n	8011cb2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c1e:	4b36      	ldr	r3, [pc, #216]	; (8011cf8 <xTaskIncrementTick+0x14c>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d104      	bne.n	8011c32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c28:	4b36      	ldr	r3, [pc, #216]	; (8011d04 <xTaskIncrementTick+0x158>)
 8011c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c2e:	601a      	str	r2, [r3, #0]
					break;
 8011c30:	e03f      	b.n	8011cb2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c32:	4b31      	ldr	r3, [pc, #196]	; (8011cf8 <xTaskIncrementTick+0x14c>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011c42:	693a      	ldr	r2, [r7, #16]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d203      	bcs.n	8011c52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011c4a:	4a2e      	ldr	r2, [pc, #184]	; (8011d04 <xTaskIncrementTick+0x158>)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011c50:	e02f      	b.n	8011cb2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	3304      	adds	r3, #4
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fe fca0 	bl	801059c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d004      	beq.n	8011c6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	3318      	adds	r3, #24
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fe fc97 	bl	801059c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c72:	4b25      	ldr	r3, [pc, #148]	; (8011d08 <xTaskIncrementTick+0x15c>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d903      	bls.n	8011c82 <xTaskIncrementTick+0xd6>
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7e:	4a22      	ldr	r2, [pc, #136]	; (8011d08 <xTaskIncrementTick+0x15c>)
 8011c80:	6013      	str	r3, [r2, #0]
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c86:	4613      	mov	r3, r2
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	4413      	add	r3, r2
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	4a1f      	ldr	r2, [pc, #124]	; (8011d0c <xTaskIncrementTick+0x160>)
 8011c90:	441a      	add	r2, r3
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	3304      	adds	r3, #4
 8011c96:	4619      	mov	r1, r3
 8011c98:	4610      	mov	r0, r2
 8011c9a:	f7fe fc22 	bl	80104e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca2:	4b1b      	ldr	r3, [pc, #108]	; (8011d10 <xTaskIncrementTick+0x164>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d3b8      	bcc.n	8011c1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011cac:	2301      	movs	r3, #1
 8011cae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011cb0:	e7b5      	b.n	8011c1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011cb2:	4b17      	ldr	r3, [pc, #92]	; (8011d10 <xTaskIncrementTick+0x164>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb8:	4914      	ldr	r1, [pc, #80]	; (8011d0c <xTaskIncrementTick+0x160>)
 8011cba:	4613      	mov	r3, r2
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	440b      	add	r3, r1
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d907      	bls.n	8011cda <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	617b      	str	r3, [r7, #20]
 8011cce:	e004      	b.n	8011cda <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011cd0:	4b10      	ldr	r3, [pc, #64]	; (8011d14 <xTaskIncrementTick+0x168>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	4a0f      	ldr	r2, [pc, #60]	; (8011d14 <xTaskIncrementTick+0x168>)
 8011cd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011cda:	4b0f      	ldr	r3, [pc, #60]	; (8011d18 <xTaskIncrementTick+0x16c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d001      	beq.n	8011ce6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011ce6:	697b      	ldr	r3, [r7, #20]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3718      	adds	r7, #24
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	2000137c 	.word	0x2000137c
 8011cf4:	20001358 	.word	0x20001358
 8011cf8:	2000130c 	.word	0x2000130c
 8011cfc:	20001310 	.word	0x20001310
 8011d00:	2000136c 	.word	0x2000136c
 8011d04:	20001374 	.word	0x20001374
 8011d08:	2000135c 	.word	0x2000135c
 8011d0c:	20000e84 	.word	0x20000e84
 8011d10:	20000e80 	.word	0x20000e80
 8011d14:	20001364 	.word	0x20001364
 8011d18:	20001368 	.word	0x20001368

08011d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d22:	4b27      	ldr	r3, [pc, #156]	; (8011dc0 <vTaskSwitchContext+0xa4>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d003      	beq.n	8011d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011d2a:	4b26      	ldr	r3, [pc, #152]	; (8011dc4 <vTaskSwitchContext+0xa8>)
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d30:	e040      	b.n	8011db4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011d32:	4b24      	ldr	r3, [pc, #144]	; (8011dc4 <vTaskSwitchContext+0xa8>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d38:	4b23      	ldr	r3, [pc, #140]	; (8011dc8 <vTaskSwitchContext+0xac>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	60fb      	str	r3, [r7, #12]
 8011d3e:	e00f      	b.n	8011d60 <vTaskSwitchContext+0x44>
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d109      	bne.n	8011d5a <vTaskSwitchContext+0x3e>
 8011d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4a:	f383 8811 	msr	BASEPRI, r3
 8011d4e:	f3bf 8f6f 	isb	sy
 8011d52:	f3bf 8f4f 	dsb	sy
 8011d56:	607b      	str	r3, [r7, #4]
 8011d58:	e7fe      	b.n	8011d58 <vTaskSwitchContext+0x3c>
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	3b01      	subs	r3, #1
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	491a      	ldr	r1, [pc, #104]	; (8011dcc <vTaskSwitchContext+0xb0>)
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	4613      	mov	r3, r2
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	4413      	add	r3, r2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	440b      	add	r3, r1
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d0e5      	beq.n	8011d40 <vTaskSwitchContext+0x24>
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	4613      	mov	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4413      	add	r3, r2
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	4a13      	ldr	r2, [pc, #76]	; (8011dcc <vTaskSwitchContext+0xb0>)
 8011d80:	4413      	add	r3, r2
 8011d82:	60bb      	str	r3, [r7, #8]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	685a      	ldr	r2, [r3, #4]
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	605a      	str	r2, [r3, #4]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	3308      	adds	r3, #8
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d104      	bne.n	8011da4 <vTaskSwitchContext+0x88>
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	685a      	ldr	r2, [r3, #4]
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	605a      	str	r2, [r3, #4]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	4a09      	ldr	r2, [pc, #36]	; (8011dd0 <vTaskSwitchContext+0xb4>)
 8011dac:	6013      	str	r3, [r2, #0]
 8011dae:	4a06      	ldr	r2, [pc, #24]	; (8011dc8 <vTaskSwitchContext+0xac>)
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6013      	str	r3, [r2, #0]
}
 8011db4:	bf00      	nop
 8011db6:	3714      	adds	r7, #20
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr
 8011dc0:	2000137c 	.word	0x2000137c
 8011dc4:	20001368 	.word	0x20001368
 8011dc8:	2000135c 	.word	0x2000135c
 8011dcc:	20000e84 	.word	0x20000e84
 8011dd0:	20000e80 	.word	0x20000e80

08011dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d109      	bne.n	8011df8 <vTaskPlaceOnEventList+0x24>
 8011de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de8:	f383 8811 	msr	BASEPRI, r3
 8011dec:	f3bf 8f6f 	isb	sy
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	60fb      	str	r3, [r7, #12]
 8011df6:	e7fe      	b.n	8011df6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011df8:	4b07      	ldr	r3, [pc, #28]	; (8011e18 <vTaskPlaceOnEventList+0x44>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	3318      	adds	r3, #24
 8011dfe:	4619      	mov	r1, r3
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7fe fb92 	bl	801052a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e06:	2101      	movs	r1, #1
 8011e08:	6838      	ldr	r0, [r7, #0]
 8011e0a:	f000 fb6d 	bl	80124e8 <prvAddCurrentTaskToDelayedList>
}
 8011e0e:	bf00      	nop
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	20000e80 	.word	0x20000e80

08011e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b086      	sub	sp, #24
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d109      	bne.n	8011e42 <vTaskPlaceOnEventListRestricted+0x26>
 8011e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e32:	f383 8811 	msr	BASEPRI, r3
 8011e36:	f3bf 8f6f 	isb	sy
 8011e3a:	f3bf 8f4f 	dsb	sy
 8011e3e:	617b      	str	r3, [r7, #20]
 8011e40:	e7fe      	b.n	8011e40 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e42:	4b0a      	ldr	r3, [pc, #40]	; (8011e6c <vTaskPlaceOnEventListRestricted+0x50>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	3318      	adds	r3, #24
 8011e48:	4619      	mov	r1, r3
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7fe fb49 	bl	80104e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011e56:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011e5c:	6879      	ldr	r1, [r7, #4]
 8011e5e:	68b8      	ldr	r0, [r7, #8]
 8011e60:	f000 fb42 	bl	80124e8 <prvAddCurrentTaskToDelayedList>
	}
 8011e64:	bf00      	nop
 8011e66:	3718      	adds	r7, #24
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	20000e80 	.word	0x20000e80

08011e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b086      	sub	sp, #24
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d109      	bne.n	8011e9a <xTaskRemoveFromEventList+0x2a>
 8011e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8a:	f383 8811 	msr	BASEPRI, r3
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f3bf 8f4f 	dsb	sy
 8011e96:	60fb      	str	r3, [r7, #12]
 8011e98:	e7fe      	b.n	8011e98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	3318      	adds	r3, #24
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fe fb7c 	bl	801059c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ea4:	4b1d      	ldr	r3, [pc, #116]	; (8011f1c <xTaskRemoveFromEventList+0xac>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d11d      	bne.n	8011ee8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	3304      	adds	r3, #4
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fe fb73 	bl	801059c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eba:	4b19      	ldr	r3, [pc, #100]	; (8011f20 <xTaskRemoveFromEventList+0xb0>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d903      	bls.n	8011eca <xTaskRemoveFromEventList+0x5a>
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec6:	4a16      	ldr	r2, [pc, #88]	; (8011f20 <xTaskRemoveFromEventList+0xb0>)
 8011ec8:	6013      	str	r3, [r2, #0]
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ece:	4613      	mov	r3, r2
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	4413      	add	r3, r2
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	4a13      	ldr	r2, [pc, #76]	; (8011f24 <xTaskRemoveFromEventList+0xb4>)
 8011ed8:	441a      	add	r2, r3
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	3304      	adds	r3, #4
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	f7fe fafe 	bl	80104e2 <vListInsertEnd>
 8011ee6:	e005      	b.n	8011ef4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	3318      	adds	r3, #24
 8011eec:	4619      	mov	r1, r3
 8011eee:	480e      	ldr	r0, [pc, #56]	; (8011f28 <xTaskRemoveFromEventList+0xb8>)
 8011ef0:	f7fe faf7 	bl	80104e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef8:	4b0c      	ldr	r3, [pc, #48]	; (8011f2c <xTaskRemoveFromEventList+0xbc>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d905      	bls.n	8011f0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f02:	2301      	movs	r3, #1
 8011f04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f06:	4b0a      	ldr	r3, [pc, #40]	; (8011f30 <xTaskRemoveFromEventList+0xc0>)
 8011f08:	2201      	movs	r2, #1
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	e001      	b.n	8011f12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f12:	697b      	ldr	r3, [r7, #20]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3718      	adds	r7, #24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	2000137c 	.word	0x2000137c
 8011f20:	2000135c 	.word	0x2000135c
 8011f24:	20000e84 	.word	0x20000e84
 8011f28:	20001314 	.word	0x20001314
 8011f2c:	20000e80 	.word	0x20000e80
 8011f30:	20001368 	.word	0x20001368

08011f34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f3c:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <vTaskInternalSetTimeOutState+0x24>)
 8011f3e:	681a      	ldr	r2, [r3, #0]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f44:	4b05      	ldr	r3, [pc, #20]	; (8011f5c <vTaskInternalSetTimeOutState+0x28>)
 8011f46:	681a      	ldr	r2, [r3, #0]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	605a      	str	r2, [r3, #4]
}
 8011f4c:	bf00      	nop
 8011f4e:	370c      	adds	r7, #12
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr
 8011f58:	2000136c 	.word	0x2000136c
 8011f5c:	20001358 	.word	0x20001358

08011f60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d109      	bne.n	8011f84 <xTaskCheckForTimeOut+0x24>
 8011f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f74:	f383 8811 	msr	BASEPRI, r3
 8011f78:	f3bf 8f6f 	isb	sy
 8011f7c:	f3bf 8f4f 	dsb	sy
 8011f80:	613b      	str	r3, [r7, #16]
 8011f82:	e7fe      	b.n	8011f82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d109      	bne.n	8011f9e <xTaskCheckForTimeOut+0x3e>
 8011f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8e:	f383 8811 	msr	BASEPRI, r3
 8011f92:	f3bf 8f6f 	isb	sy
 8011f96:	f3bf 8f4f 	dsb	sy
 8011f9a:	60fb      	str	r3, [r7, #12]
 8011f9c:	e7fe      	b.n	8011f9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011f9e:	f000 ff65 	bl	8012e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011fa2:	4b1d      	ldr	r3, [pc, #116]	; (8012018 <xTaskCheckForTimeOut+0xb8>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	69ba      	ldr	r2, [r7, #24]
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fba:	d102      	bne.n	8011fc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	61fb      	str	r3, [r7, #28]
 8011fc0:	e023      	b.n	801200a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	4b15      	ldr	r3, [pc, #84]	; (801201c <xTaskCheckForTimeOut+0xbc>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d007      	beq.n	8011fde <xTaskCheckForTimeOut+0x7e>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	69ba      	ldr	r2, [r7, #24]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d302      	bcc.n	8011fde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011fd8:	2301      	movs	r3, #1
 8011fda:	61fb      	str	r3, [r7, #28]
 8011fdc:	e015      	b.n	801200a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	697a      	ldr	r2, [r7, #20]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d20b      	bcs.n	8012000 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	1ad2      	subs	r2, r2, r3
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7ff ff9d 	bl	8011f34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	61fb      	str	r3, [r7, #28]
 8011ffe:	e004      	b.n	801200a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	2200      	movs	r2, #0
 8012004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012006:	2301      	movs	r3, #1
 8012008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801200a:	f000 ff5d 	bl	8012ec8 <vPortExitCritical>

	return xReturn;
 801200e:	69fb      	ldr	r3, [r7, #28]
}
 8012010:	4618      	mov	r0, r3
 8012012:	3720      	adds	r7, #32
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}
 8012018:	20001358 	.word	0x20001358
 801201c:	2000136c 	.word	0x2000136c

08012020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012020:	b480      	push	{r7}
 8012022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012024:	4b03      	ldr	r3, [pc, #12]	; (8012034 <vTaskMissedYield+0x14>)
 8012026:	2201      	movs	r2, #1
 8012028:	601a      	str	r2, [r3, #0]
}
 801202a:	bf00      	nop
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr
 8012034:	20001368 	.word	0x20001368

08012038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012040:	f000 f852 	bl	80120e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012044:	4b06      	ldr	r3, [pc, #24]	; (8012060 <prvIdleTask+0x28>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	2b01      	cmp	r3, #1
 801204a:	d9f9      	bls.n	8012040 <prvIdleTask+0x8>
			{
				taskYIELD();
 801204c:	4b05      	ldr	r3, [pc, #20]	; (8012064 <prvIdleTask+0x2c>)
 801204e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012052:	601a      	str	r2, [r3, #0]
 8012054:	f3bf 8f4f 	dsb	sy
 8012058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801205c:	e7f0      	b.n	8012040 <prvIdleTask+0x8>
 801205e:	bf00      	nop
 8012060:	20000e84 	.word	0x20000e84
 8012064:	e000ed04 	.word	0xe000ed04

08012068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801206e:	2300      	movs	r3, #0
 8012070:	607b      	str	r3, [r7, #4]
 8012072:	e00c      	b.n	801208e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012074:	687a      	ldr	r2, [r7, #4]
 8012076:	4613      	mov	r3, r2
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4413      	add	r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	4a12      	ldr	r2, [pc, #72]	; (80120c8 <prvInitialiseTaskLists+0x60>)
 8012080:	4413      	add	r3, r2
 8012082:	4618      	mov	r0, r3
 8012084:	f7fe fa00 	bl	8010488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	3301      	adds	r3, #1
 801208c:	607b      	str	r3, [r7, #4]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2b37      	cmp	r3, #55	; 0x37
 8012092:	d9ef      	bls.n	8012074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012094:	480d      	ldr	r0, [pc, #52]	; (80120cc <prvInitialiseTaskLists+0x64>)
 8012096:	f7fe f9f7 	bl	8010488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801209a:	480d      	ldr	r0, [pc, #52]	; (80120d0 <prvInitialiseTaskLists+0x68>)
 801209c:	f7fe f9f4 	bl	8010488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80120a0:	480c      	ldr	r0, [pc, #48]	; (80120d4 <prvInitialiseTaskLists+0x6c>)
 80120a2:	f7fe f9f1 	bl	8010488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80120a6:	480c      	ldr	r0, [pc, #48]	; (80120d8 <prvInitialiseTaskLists+0x70>)
 80120a8:	f7fe f9ee 	bl	8010488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80120ac:	480b      	ldr	r0, [pc, #44]	; (80120dc <prvInitialiseTaskLists+0x74>)
 80120ae:	f7fe f9eb 	bl	8010488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80120b2:	4b0b      	ldr	r3, [pc, #44]	; (80120e0 <prvInitialiseTaskLists+0x78>)
 80120b4:	4a05      	ldr	r2, [pc, #20]	; (80120cc <prvInitialiseTaskLists+0x64>)
 80120b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80120b8:	4b0a      	ldr	r3, [pc, #40]	; (80120e4 <prvInitialiseTaskLists+0x7c>)
 80120ba:	4a05      	ldr	r2, [pc, #20]	; (80120d0 <prvInitialiseTaskLists+0x68>)
 80120bc:	601a      	str	r2, [r3, #0]
}
 80120be:	bf00      	nop
 80120c0:	3708      	adds	r7, #8
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	20000e84 	.word	0x20000e84
 80120cc:	200012e4 	.word	0x200012e4
 80120d0:	200012f8 	.word	0x200012f8
 80120d4:	20001314 	.word	0x20001314
 80120d8:	20001328 	.word	0x20001328
 80120dc:	20001340 	.word	0x20001340
 80120e0:	2000130c 	.word	0x2000130c
 80120e4:	20001310 	.word	0x20001310

080120e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120ee:	e019      	b.n	8012124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80120f0:	f000 febc 	bl	8012e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120f4:	4b0f      	ldr	r3, [pc, #60]	; (8012134 <prvCheckTasksWaitingTermination+0x4c>)
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	3304      	adds	r3, #4
 8012100:	4618      	mov	r0, r3
 8012102:	f7fe fa4b 	bl	801059c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012106:	4b0c      	ldr	r3, [pc, #48]	; (8012138 <prvCheckTasksWaitingTermination+0x50>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	3b01      	subs	r3, #1
 801210c:	4a0a      	ldr	r2, [pc, #40]	; (8012138 <prvCheckTasksWaitingTermination+0x50>)
 801210e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012110:	4b0a      	ldr	r3, [pc, #40]	; (801213c <prvCheckTasksWaitingTermination+0x54>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	3b01      	subs	r3, #1
 8012116:	4a09      	ldr	r2, [pc, #36]	; (801213c <prvCheckTasksWaitingTermination+0x54>)
 8012118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801211a:	f000 fed5 	bl	8012ec8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 f80e 	bl	8012140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012124:	4b05      	ldr	r3, [pc, #20]	; (801213c <prvCheckTasksWaitingTermination+0x54>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1e1      	bne.n	80120f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801212c:	bf00      	nop
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	20001328 	.word	0x20001328
 8012138:	20001354 	.word	0x20001354
 801213c:	2000133c 	.word	0x2000133c

08012140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801214e:	2b00      	cmp	r3, #0
 8012150:	d108      	bne.n	8012164 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012156:	4618      	mov	r0, r3
 8012158:	f001 f864 	bl	8013224 <vPortFree>
				vPortFree( pxTCB );
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f001 f861 	bl	8013224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012162:	e017      	b.n	8012194 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801216a:	2b01      	cmp	r3, #1
 801216c:	d103      	bne.n	8012176 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f001 f858 	bl	8013224 <vPortFree>
	}
 8012174:	e00e      	b.n	8012194 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801217c:	2b02      	cmp	r3, #2
 801217e:	d009      	beq.n	8012194 <prvDeleteTCB+0x54>
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	60fb      	str	r3, [r7, #12]
 8012192:	e7fe      	b.n	8012192 <prvDeleteTCB+0x52>
	}
 8012194:	bf00      	nop
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121a2:	4b0c      	ldr	r3, [pc, #48]	; (80121d4 <prvResetNextTaskUnblockTime+0x38>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d104      	bne.n	80121b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80121ac:	4b0a      	ldr	r3, [pc, #40]	; (80121d8 <prvResetNextTaskUnblockTime+0x3c>)
 80121ae:	f04f 32ff 	mov.w	r2, #4294967295
 80121b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80121b4:	e008      	b.n	80121c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121b6:	4b07      	ldr	r3, [pc, #28]	; (80121d4 <prvResetNextTaskUnblockTime+0x38>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	4a04      	ldr	r2, [pc, #16]	; (80121d8 <prvResetNextTaskUnblockTime+0x3c>)
 80121c6:	6013      	str	r3, [r2, #0]
}
 80121c8:	bf00      	nop
 80121ca:	370c      	adds	r7, #12
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr
 80121d4:	2000130c 	.word	0x2000130c
 80121d8:	20001374 	.word	0x20001374

080121dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80121e2:	4b0b      	ldr	r3, [pc, #44]	; (8012210 <xTaskGetSchedulerState+0x34>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d102      	bne.n	80121f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80121ea:	2301      	movs	r3, #1
 80121ec:	607b      	str	r3, [r7, #4]
 80121ee:	e008      	b.n	8012202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121f0:	4b08      	ldr	r3, [pc, #32]	; (8012214 <xTaskGetSchedulerState+0x38>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d102      	bne.n	80121fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80121f8:	2302      	movs	r3, #2
 80121fa:	607b      	str	r3, [r7, #4]
 80121fc:	e001      	b.n	8012202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80121fe:	2300      	movs	r3, #0
 8012200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012202:	687b      	ldr	r3, [r7, #4]
	}
 8012204:	4618      	mov	r0, r3
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	20001360 	.word	0x20001360
 8012214:	2000137c 	.word	0x2000137c

08012218 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012224:	2300      	movs	r3, #0
 8012226:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d051      	beq.n	80122d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012232:	4b2a      	ldr	r3, [pc, #168]	; (80122dc <xTaskPriorityInherit+0xc4>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012238:	429a      	cmp	r2, r3
 801223a:	d241      	bcs.n	80122c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	699b      	ldr	r3, [r3, #24]
 8012240:	2b00      	cmp	r3, #0
 8012242:	db06      	blt.n	8012252 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012244:	4b25      	ldr	r3, [pc, #148]	; (80122dc <xTaskPriorityInherit+0xc4>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	6959      	ldr	r1, [r3, #20]
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801225a:	4613      	mov	r3, r2
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	4413      	add	r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	4a1f      	ldr	r2, [pc, #124]	; (80122e0 <xTaskPriorityInherit+0xc8>)
 8012264:	4413      	add	r3, r2
 8012266:	4299      	cmp	r1, r3
 8012268:	d122      	bne.n	80122b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	3304      	adds	r3, #4
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe f994 	bl	801059c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012274:	4b19      	ldr	r3, [pc, #100]	; (80122dc <xTaskPriorityInherit+0xc4>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012282:	4b18      	ldr	r3, [pc, #96]	; (80122e4 <xTaskPriorityInherit+0xcc>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	429a      	cmp	r2, r3
 8012288:	d903      	bls.n	8012292 <xTaskPriorityInherit+0x7a>
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801228e:	4a15      	ldr	r2, [pc, #84]	; (80122e4 <xTaskPriorityInherit+0xcc>)
 8012290:	6013      	str	r3, [r2, #0]
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012296:	4613      	mov	r3, r2
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	4413      	add	r3, r2
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	4a10      	ldr	r2, [pc, #64]	; (80122e0 <xTaskPriorityInherit+0xc8>)
 80122a0:	441a      	add	r2, r3
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	3304      	adds	r3, #4
 80122a6:	4619      	mov	r1, r3
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7fe f91a 	bl	80104e2 <vListInsertEnd>
 80122ae:	e004      	b.n	80122ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <xTaskPriorityInherit+0xc4>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80122ba:	2301      	movs	r3, #1
 80122bc:	60fb      	str	r3, [r7, #12]
 80122be:	e008      	b.n	80122d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80122c4:	4b05      	ldr	r3, [pc, #20]	; (80122dc <xTaskPriorityInherit+0xc4>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d201      	bcs.n	80122d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80122ce:	2301      	movs	r3, #1
 80122d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80122d2:	68fb      	ldr	r3, [r7, #12]
	}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3710      	adds	r7, #16
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	20000e80 	.word	0x20000e80
 80122e0:	20000e84 	.word	0x20000e84
 80122e4:	2000135c 	.word	0x2000135c

080122e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b086      	sub	sp, #24
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80122f4:	2300      	movs	r3, #0
 80122f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d054      	beq.n	80123a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122fe:	4b2d      	ldr	r3, [pc, #180]	; (80123b4 <xTaskPriorityDisinherit+0xcc>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	693a      	ldr	r2, [r7, #16]
 8012304:	429a      	cmp	r2, r3
 8012306:	d009      	beq.n	801231c <xTaskPriorityDisinherit+0x34>
 8012308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230c:	f383 8811 	msr	BASEPRI, r3
 8012310:	f3bf 8f6f 	isb	sy
 8012314:	f3bf 8f4f 	dsb	sy
 8012318:	60fb      	str	r3, [r7, #12]
 801231a:	e7fe      	b.n	801231a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012320:	2b00      	cmp	r3, #0
 8012322:	d109      	bne.n	8012338 <xTaskPriorityDisinherit+0x50>
 8012324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012328:	f383 8811 	msr	BASEPRI, r3
 801232c:	f3bf 8f6f 	isb	sy
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	60bb      	str	r3, [r7, #8]
 8012336:	e7fe      	b.n	8012336 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801233c:	1e5a      	subs	r2, r3, #1
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801234a:	429a      	cmp	r2, r3
 801234c:	d02c      	beq.n	80123a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012352:	2b00      	cmp	r3, #0
 8012354:	d128      	bne.n	80123a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	3304      	adds	r3, #4
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe f91e 	bl	801059c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012378:	4b0f      	ldr	r3, [pc, #60]	; (80123b8 <xTaskPriorityDisinherit+0xd0>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	429a      	cmp	r2, r3
 801237e:	d903      	bls.n	8012388 <xTaskPriorityDisinherit+0xa0>
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012384:	4a0c      	ldr	r2, [pc, #48]	; (80123b8 <xTaskPriorityDisinherit+0xd0>)
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801238c:	4613      	mov	r3, r2
 801238e:	009b      	lsls	r3, r3, #2
 8012390:	4413      	add	r3, r2
 8012392:	009b      	lsls	r3, r3, #2
 8012394:	4a09      	ldr	r2, [pc, #36]	; (80123bc <xTaskPriorityDisinherit+0xd4>)
 8012396:	441a      	add	r2, r3
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	3304      	adds	r3, #4
 801239c:	4619      	mov	r1, r3
 801239e:	4610      	mov	r0, r2
 80123a0:	f7fe f89f 	bl	80104e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80123a4:	2301      	movs	r3, #1
 80123a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123a8:	697b      	ldr	r3, [r7, #20]
	}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3718      	adds	r7, #24
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	20000e80 	.word	0x20000e80
 80123b8:	2000135c 	.word	0x2000135c
 80123bc:	20000e84 	.word	0x20000e84

080123c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80123ce:	2301      	movs	r3, #1
 80123d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d068      	beq.n	80124aa <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d109      	bne.n	80123f4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80123e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e4:	f383 8811 	msr	BASEPRI, r3
 80123e8:	f3bf 8f6f 	isb	sy
 80123ec:	f3bf 8f4f 	dsb	sy
 80123f0:	60fb      	str	r3, [r7, #12]
 80123f2:	e7fe      	b.n	80123f2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d902      	bls.n	8012404 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	61fb      	str	r3, [r7, #28]
 8012402:	e002      	b.n	801240a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012408:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240e:	69fa      	ldr	r2, [r7, #28]
 8012410:	429a      	cmp	r2, r3
 8012412:	d04a      	beq.n	80124aa <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012418:	697a      	ldr	r2, [r7, #20]
 801241a:	429a      	cmp	r2, r3
 801241c:	d145      	bne.n	80124aa <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801241e:	4b25      	ldr	r3, [pc, #148]	; (80124b4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	69ba      	ldr	r2, [r7, #24]
 8012424:	429a      	cmp	r2, r3
 8012426:	d109      	bne.n	801243c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242c:	f383 8811 	msr	BASEPRI, r3
 8012430:	f3bf 8f6f 	isb	sy
 8012434:	f3bf 8f4f 	dsb	sy
 8012438:	60bb      	str	r3, [r7, #8]
 801243a:	e7fe      	b.n	801243a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012440:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	69fa      	ldr	r2, [r7, #28]
 8012446:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	2b00      	cmp	r3, #0
 801244e:	db04      	blt.n	801245a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012456:	69bb      	ldr	r3, [r7, #24]
 8012458:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	6959      	ldr	r1, [r3, #20]
 801245e:	693a      	ldr	r2, [r7, #16]
 8012460:	4613      	mov	r3, r2
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	4413      	add	r3, r2
 8012466:	009b      	lsls	r3, r3, #2
 8012468:	4a13      	ldr	r2, [pc, #76]	; (80124b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801246a:	4413      	add	r3, r2
 801246c:	4299      	cmp	r1, r3
 801246e:	d11c      	bne.n	80124aa <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	3304      	adds	r3, #4
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe f891 	bl	801059c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801247e:	4b0f      	ldr	r3, [pc, #60]	; (80124bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	429a      	cmp	r2, r3
 8012484:	d903      	bls.n	801248e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801248a:	4a0c      	ldr	r2, [pc, #48]	; (80124bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801248c:	6013      	str	r3, [r2, #0]
 801248e:	69bb      	ldr	r3, [r7, #24]
 8012490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012492:	4613      	mov	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4a07      	ldr	r2, [pc, #28]	; (80124b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801249c:	441a      	add	r2, r3
 801249e:	69bb      	ldr	r3, [r7, #24]
 80124a0:	3304      	adds	r3, #4
 80124a2:	4619      	mov	r1, r3
 80124a4:	4610      	mov	r0, r2
 80124a6:	f7fe f81c 	bl	80104e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124aa:	bf00      	nop
 80124ac:	3720      	adds	r7, #32
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	20000e80 	.word	0x20000e80
 80124b8:	20000e84 	.word	0x20000e84
 80124bc:	2000135c 	.word	0x2000135c

080124c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80124c0:	b480      	push	{r7}
 80124c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80124c4:	4b07      	ldr	r3, [pc, #28]	; (80124e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d004      	beq.n	80124d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80124cc:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124d2:	3201      	adds	r2, #1
 80124d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80124d6:	4b03      	ldr	r3, [pc, #12]	; (80124e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80124d8:	681b      	ldr	r3, [r3, #0]
	}
 80124da:	4618      	mov	r0, r3
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr
 80124e4:	20000e80 	.word	0x20000e80

080124e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80124f2:	4b21      	ldr	r3, [pc, #132]	; (8012578 <prvAddCurrentTaskToDelayedList+0x90>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124f8:	4b20      	ldr	r3, [pc, #128]	; (801257c <prvAddCurrentTaskToDelayedList+0x94>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	3304      	adds	r3, #4
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fe f84c 	bl	801059c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250a:	d10a      	bne.n	8012522 <prvAddCurrentTaskToDelayedList+0x3a>
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d007      	beq.n	8012522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012512:	4b1a      	ldr	r3, [pc, #104]	; (801257c <prvAddCurrentTaskToDelayedList+0x94>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	3304      	adds	r3, #4
 8012518:	4619      	mov	r1, r3
 801251a:	4819      	ldr	r0, [pc, #100]	; (8012580 <prvAddCurrentTaskToDelayedList+0x98>)
 801251c:	f7fd ffe1 	bl	80104e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012520:	e026      	b.n	8012570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4413      	add	r3, r2
 8012528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801252a:	4b14      	ldr	r3, [pc, #80]	; (801257c <prvAddCurrentTaskToDelayedList+0x94>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	68ba      	ldr	r2, [r7, #8]
 8012530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012532:	68ba      	ldr	r2, [r7, #8]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	429a      	cmp	r2, r3
 8012538:	d209      	bcs.n	801254e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801253a:	4b12      	ldr	r3, [pc, #72]	; (8012584 <prvAddCurrentTaskToDelayedList+0x9c>)
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	4b0f      	ldr	r3, [pc, #60]	; (801257c <prvAddCurrentTaskToDelayedList+0x94>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	3304      	adds	r3, #4
 8012544:	4619      	mov	r1, r3
 8012546:	4610      	mov	r0, r2
 8012548:	f7fd ffef 	bl	801052a <vListInsert>
}
 801254c:	e010      	b.n	8012570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801254e:	4b0e      	ldr	r3, [pc, #56]	; (8012588 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	4b0a      	ldr	r3, [pc, #40]	; (801257c <prvAddCurrentTaskToDelayedList+0x94>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	3304      	adds	r3, #4
 8012558:	4619      	mov	r1, r3
 801255a:	4610      	mov	r0, r2
 801255c:	f7fd ffe5 	bl	801052a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012560:	4b0a      	ldr	r3, [pc, #40]	; (801258c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	68ba      	ldr	r2, [r7, #8]
 8012566:	429a      	cmp	r2, r3
 8012568:	d202      	bcs.n	8012570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801256a:	4a08      	ldr	r2, [pc, #32]	; (801258c <prvAddCurrentTaskToDelayedList+0xa4>)
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	6013      	str	r3, [r2, #0]
}
 8012570:	bf00      	nop
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	20001358 	.word	0x20001358
 801257c:	20000e80 	.word	0x20000e80
 8012580:	20001340 	.word	0x20001340
 8012584:	20001310 	.word	0x20001310
 8012588:	2000130c 	.word	0x2000130c
 801258c:	20001374 	.word	0x20001374

08012590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b08a      	sub	sp, #40	; 0x28
 8012594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012596:	2300      	movs	r3, #0
 8012598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801259a:	f000 faff 	bl	8012b9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801259e:	4b1c      	ldr	r3, [pc, #112]	; (8012610 <xTimerCreateTimerTask+0x80>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d021      	beq.n	80125ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80125a6:	2300      	movs	r3, #0
 80125a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80125aa:	2300      	movs	r3, #0
 80125ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80125ae:	1d3a      	adds	r2, r7, #4
 80125b0:	f107 0108 	add.w	r1, r7, #8
 80125b4:	f107 030c 	add.w	r3, r7, #12
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fd ff4b 	bl	8010454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80125be:	6879      	ldr	r1, [r7, #4]
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	9202      	str	r2, [sp, #8]
 80125c6:	9301      	str	r3, [sp, #4]
 80125c8:	2302      	movs	r3, #2
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	2300      	movs	r3, #0
 80125ce:	460a      	mov	r2, r1
 80125d0:	4910      	ldr	r1, [pc, #64]	; (8012614 <xTimerCreateTimerTask+0x84>)
 80125d2:	4811      	ldr	r0, [pc, #68]	; (8012618 <xTimerCreateTimerTask+0x88>)
 80125d4:	f7fe fffa 	bl	80115cc <xTaskCreateStatic>
 80125d8:	4602      	mov	r2, r0
 80125da:	4b10      	ldr	r3, [pc, #64]	; (801261c <xTimerCreateTimerTask+0x8c>)
 80125dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80125de:	4b0f      	ldr	r3, [pc, #60]	; (801261c <xTimerCreateTimerTask+0x8c>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d001      	beq.n	80125ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80125e6:	2301      	movs	r3, #1
 80125e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d109      	bne.n	8012604 <xTimerCreateTimerTask+0x74>
 80125f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	613b      	str	r3, [r7, #16]
 8012602:	e7fe      	b.n	8012602 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012604:	697b      	ldr	r3, [r7, #20]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3718      	adds	r7, #24
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	200013b0 	.word	0x200013b0
 8012614:	08016ca4 	.word	0x08016ca4
 8012618:	08012751 	.word	0x08012751
 801261c:	200013b4 	.word	0x200013b4

08012620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b08a      	sub	sp, #40	; 0x28
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
 801262c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801262e:	2300      	movs	r3, #0
 8012630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d109      	bne.n	801264c <xTimerGenericCommand+0x2c>
 8012638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263c:	f383 8811 	msr	BASEPRI, r3
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	f3bf 8f4f 	dsb	sy
 8012648:	623b      	str	r3, [r7, #32]
 801264a:	e7fe      	b.n	801264a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801264c:	4b19      	ldr	r3, [pc, #100]	; (80126b4 <xTimerGenericCommand+0x94>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d02a      	beq.n	80126aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	2b05      	cmp	r3, #5
 8012664:	dc18      	bgt.n	8012698 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012666:	f7ff fdb9 	bl	80121dc <xTaskGetSchedulerState>
 801266a:	4603      	mov	r3, r0
 801266c:	2b02      	cmp	r3, #2
 801266e:	d109      	bne.n	8012684 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012670:	4b10      	ldr	r3, [pc, #64]	; (80126b4 <xTimerGenericCommand+0x94>)
 8012672:	6818      	ldr	r0, [r3, #0]
 8012674:	f107 0110 	add.w	r1, r7, #16
 8012678:	2300      	movs	r3, #0
 801267a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801267c:	f7fe f95c 	bl	8010938 <xQueueGenericSend>
 8012680:	6278      	str	r0, [r7, #36]	; 0x24
 8012682:	e012      	b.n	80126aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012684:	4b0b      	ldr	r3, [pc, #44]	; (80126b4 <xTimerGenericCommand+0x94>)
 8012686:	6818      	ldr	r0, [r3, #0]
 8012688:	f107 0110 	add.w	r1, r7, #16
 801268c:	2300      	movs	r3, #0
 801268e:	2200      	movs	r2, #0
 8012690:	f7fe f952 	bl	8010938 <xQueueGenericSend>
 8012694:	6278      	str	r0, [r7, #36]	; 0x24
 8012696:	e008      	b.n	80126aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012698:	4b06      	ldr	r3, [pc, #24]	; (80126b4 <xTimerGenericCommand+0x94>)
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	f107 0110 	add.w	r1, r7, #16
 80126a0:	2300      	movs	r3, #0
 80126a2:	683a      	ldr	r2, [r7, #0]
 80126a4:	f7fe fa42 	bl	8010b2c <xQueueGenericSendFromISR>
 80126a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3728      	adds	r7, #40	; 0x28
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	200013b0 	.word	0x200013b0

080126b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b088      	sub	sp, #32
 80126bc:	af02      	add	r7, sp, #8
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126c2:	4b22      	ldr	r3, [pc, #136]	; (801274c <prvProcessExpiredTimer+0x94>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	3304      	adds	r3, #4
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fd ff63 	bl	801059c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126dc:	f003 0304 	and.w	r3, r3, #4
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d021      	beq.n	8012728 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	699a      	ldr	r2, [r3, #24]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	18d1      	adds	r1, r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	683a      	ldr	r2, [r7, #0]
 80126f0:	6978      	ldr	r0, [r7, #20]
 80126f2:	f000 f8d1 	bl	8012898 <prvInsertTimerInActiveList>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d01e      	beq.n	801273a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80126fc:	2300      	movs	r3, #0
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	2300      	movs	r3, #0
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	2100      	movs	r1, #0
 8012706:	6978      	ldr	r0, [r7, #20]
 8012708:	f7ff ff8a 	bl	8012620 <xTimerGenericCommand>
 801270c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d112      	bne.n	801273a <prvProcessExpiredTimer+0x82>
 8012714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012718:	f383 8811 	msr	BASEPRI, r3
 801271c:	f3bf 8f6f 	isb	sy
 8012720:	f3bf 8f4f 	dsb	sy
 8012724:	60fb      	str	r3, [r7, #12]
 8012726:	e7fe      	b.n	8012726 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801272e:	f023 0301 	bic.w	r3, r3, #1
 8012732:	b2da      	uxtb	r2, r3
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	6a1b      	ldr	r3, [r3, #32]
 801273e:	6978      	ldr	r0, [r7, #20]
 8012740:	4798      	blx	r3
}
 8012742:	bf00      	nop
 8012744:	3718      	adds	r7, #24
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	200013a8 	.word	0x200013a8

08012750 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012758:	f107 0308 	add.w	r3, r7, #8
 801275c:	4618      	mov	r0, r3
 801275e:	f000 f857 	bl	8012810 <prvGetNextExpireTime>
 8012762:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	4619      	mov	r1, r3
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f000 f803 	bl	8012774 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801276e:	f000 f8d5 	bl	801291c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012772:	e7f1      	b.n	8012758 <prvTimerTask+0x8>

08012774 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b084      	sub	sp, #16
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801277e:	f7ff f95b 	bl	8011a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012782:	f107 0308 	add.w	r3, r7, #8
 8012786:	4618      	mov	r0, r3
 8012788:	f000 f866 	bl	8012858 <prvSampleTimeNow>
 801278c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d130      	bne.n	80127f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d10a      	bne.n	80127b0 <prvProcessTimerOrBlockTask+0x3c>
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	429a      	cmp	r2, r3
 80127a0:	d806      	bhi.n	80127b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80127a2:	f7ff f957 	bl	8011a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80127a6:	68f9      	ldr	r1, [r7, #12]
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f7ff ff85 	bl	80126b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80127ae:	e024      	b.n	80127fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d008      	beq.n	80127c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80127b6:	4b13      	ldr	r3, [pc, #76]	; (8012804 <prvProcessTimerOrBlockTask+0x90>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d101      	bne.n	80127c4 <prvProcessTimerOrBlockTask+0x50>
 80127c0:	2301      	movs	r3, #1
 80127c2:	e000      	b.n	80127c6 <prvProcessTimerOrBlockTask+0x52>
 80127c4:	2300      	movs	r3, #0
 80127c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80127c8:	4b0f      	ldr	r3, [pc, #60]	; (8012808 <prvProcessTimerOrBlockTask+0x94>)
 80127ca:	6818      	ldr	r0, [r3, #0]
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	683a      	ldr	r2, [r7, #0]
 80127d4:	4619      	mov	r1, r3
 80127d6:	f7fe fec5 	bl	8011564 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80127da:	f7ff f93b 	bl	8011a54 <xTaskResumeAll>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10a      	bne.n	80127fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80127e4:	4b09      	ldr	r3, [pc, #36]	; (801280c <prvProcessTimerOrBlockTask+0x98>)
 80127e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ea:	601a      	str	r2, [r3, #0]
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	f3bf 8f6f 	isb	sy
}
 80127f4:	e001      	b.n	80127fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80127f6:	f7ff f92d 	bl	8011a54 <xTaskResumeAll>
}
 80127fa:	bf00      	nop
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	200013ac 	.word	0x200013ac
 8012808:	200013b0 	.word	0x200013b0
 801280c:	e000ed04 	.word	0xe000ed04

08012810 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012810:	b480      	push	{r7}
 8012812:	b085      	sub	sp, #20
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012818:	4b0e      	ldr	r3, [pc, #56]	; (8012854 <prvGetNextExpireTime+0x44>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <prvGetNextExpireTime+0x16>
 8012822:	2201      	movs	r2, #1
 8012824:	e000      	b.n	8012828 <prvGetNextExpireTime+0x18>
 8012826:	2200      	movs	r2, #0
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d105      	bne.n	8012840 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012834:	4b07      	ldr	r3, [pc, #28]	; (8012854 <prvGetNextExpireTime+0x44>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	60fb      	str	r3, [r7, #12]
 801283e:	e001      	b.n	8012844 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012840:	2300      	movs	r3, #0
 8012842:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012844:	68fb      	ldr	r3, [r7, #12]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3714      	adds	r7, #20
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr
 8012852:	bf00      	nop
 8012854:	200013a8 	.word	0x200013a8

08012858 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012860:	f7ff f994 	bl	8011b8c <xTaskGetTickCount>
 8012864:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012866:	4b0b      	ldr	r3, [pc, #44]	; (8012894 <prvSampleTimeNow+0x3c>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	429a      	cmp	r2, r3
 801286e:	d205      	bcs.n	801287c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012870:	f000 f930 	bl	8012ad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2201      	movs	r2, #1
 8012878:	601a      	str	r2, [r3, #0]
 801287a:	e002      	b.n	8012882 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2200      	movs	r2, #0
 8012880:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012882:	4a04      	ldr	r2, [pc, #16]	; (8012894 <prvSampleTimeNow+0x3c>)
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012888:	68fb      	ldr	r3, [r7, #12]
}
 801288a:	4618      	mov	r0, r3
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	200013b8 	.word	0x200013b8

08012898 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b086      	sub	sp, #24
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
 80128a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80128a6:	2300      	movs	r3, #0
 80128a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	68ba      	ldr	r2, [r7, #8]
 80128ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80128b6:	68ba      	ldr	r2, [r7, #8]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d812      	bhi.n	80128e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	1ad2      	subs	r2, r2, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	699b      	ldr	r3, [r3, #24]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d302      	bcc.n	80128d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80128cc:	2301      	movs	r3, #1
 80128ce:	617b      	str	r3, [r7, #20]
 80128d0:	e01b      	b.n	801290a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80128d2:	4b10      	ldr	r3, [pc, #64]	; (8012914 <prvInsertTimerInActiveList+0x7c>)
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	3304      	adds	r3, #4
 80128da:	4619      	mov	r1, r3
 80128dc:	4610      	mov	r0, r2
 80128de:	f7fd fe24 	bl	801052a <vListInsert>
 80128e2:	e012      	b.n	801290a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d206      	bcs.n	80128fa <prvInsertTimerInActiveList+0x62>
 80128ec:	68ba      	ldr	r2, [r7, #8]
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d302      	bcc.n	80128fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80128f4:	2301      	movs	r3, #1
 80128f6:	617b      	str	r3, [r7, #20]
 80128f8:	e007      	b.n	801290a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80128fa:	4b07      	ldr	r3, [pc, #28]	; (8012918 <prvInsertTimerInActiveList+0x80>)
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	3304      	adds	r3, #4
 8012902:	4619      	mov	r1, r3
 8012904:	4610      	mov	r0, r2
 8012906:	f7fd fe10 	bl	801052a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801290a:	697b      	ldr	r3, [r7, #20]
}
 801290c:	4618      	mov	r0, r3
 801290e:	3718      	adds	r7, #24
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	200013ac 	.word	0x200013ac
 8012918:	200013a8 	.word	0x200013a8

0801291c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b08e      	sub	sp, #56	; 0x38
 8012920:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012922:	e0c6      	b.n	8012ab2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2b00      	cmp	r3, #0
 8012928:	da17      	bge.n	801295a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801292a:	1d3b      	adds	r3, r7, #4
 801292c:	3304      	adds	r3, #4
 801292e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012932:	2b00      	cmp	r3, #0
 8012934:	d109      	bne.n	801294a <prvProcessReceivedCommands+0x2e>
 8012936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293a:	f383 8811 	msr	BASEPRI, r3
 801293e:	f3bf 8f6f 	isb	sy
 8012942:	f3bf 8f4f 	dsb	sy
 8012946:	61fb      	str	r3, [r7, #28]
 8012948:	e7fe      	b.n	8012948 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012950:	6850      	ldr	r0, [r2, #4]
 8012952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012954:	6892      	ldr	r2, [r2, #8]
 8012956:	4611      	mov	r1, r2
 8012958:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	f2c0 80a7 	blt.w	8012ab0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	695b      	ldr	r3, [r3, #20]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d004      	beq.n	8012978 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012970:	3304      	adds	r3, #4
 8012972:	4618      	mov	r0, r3
 8012974:	f7fd fe12 	bl	801059c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012978:	463b      	mov	r3, r7
 801297a:	4618      	mov	r0, r3
 801297c:	f7ff ff6c 	bl	8012858 <prvSampleTimeNow>
 8012980:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b09      	cmp	r3, #9
 8012986:	f200 8094 	bhi.w	8012ab2 <prvProcessReceivedCommands+0x196>
 801298a:	a201      	add	r2, pc, #4	; (adr r2, 8012990 <prvProcessReceivedCommands+0x74>)
 801298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012990:	080129b9 	.word	0x080129b9
 8012994:	080129b9 	.word	0x080129b9
 8012998:	080129b9 	.word	0x080129b9
 801299c:	08012a2b 	.word	0x08012a2b
 80129a0:	08012a3f 	.word	0x08012a3f
 80129a4:	08012a87 	.word	0x08012a87
 80129a8:	080129b9 	.word	0x080129b9
 80129ac:	080129b9 	.word	0x080129b9
 80129b0:	08012a2b 	.word	0x08012a2b
 80129b4:	08012a3f 	.word	0x08012a3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80129b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129be:	f043 0301 	orr.w	r3, r3, #1
 80129c2:	b2da      	uxtb	r2, r3
 80129c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80129ca:	68ba      	ldr	r2, [r7, #8]
 80129cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ce:	699b      	ldr	r3, [r3, #24]
 80129d0:	18d1      	adds	r1, r2, r3
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129d8:	f7ff ff5e 	bl	8012898 <prvInsertTimerInActiveList>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d067      	beq.n	8012ab2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80129e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e4:	6a1b      	ldr	r3, [r3, #32]
 80129e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129f0:	f003 0304 	and.w	r3, r3, #4
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d05c      	beq.n	8012ab2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fc:	699b      	ldr	r3, [r3, #24]
 80129fe:	441a      	add	r2, r3
 8012a00:	2300      	movs	r3, #0
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	2300      	movs	r3, #0
 8012a06:	2100      	movs	r1, #0
 8012a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a0a:	f7ff fe09 	bl	8012620 <xTimerGenericCommand>
 8012a0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012a10:	6a3b      	ldr	r3, [r7, #32]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d14d      	bne.n	8012ab2 <prvProcessReceivedCommands+0x196>
 8012a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a1a:	f383 8811 	msr	BASEPRI, r3
 8012a1e:	f3bf 8f6f 	isb	sy
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	61bb      	str	r3, [r7, #24]
 8012a28:	e7fe      	b.n	8012a28 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a30:	f023 0301 	bic.w	r3, r3, #1
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012a3c:	e039      	b.n	8012ab2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a44:	f043 0301 	orr.w	r3, r3, #1
 8012a48:	b2da      	uxtb	r2, r3
 8012a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012a50:	68ba      	ldr	r2, [r7, #8]
 8012a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a58:	699b      	ldr	r3, [r3, #24]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d109      	bne.n	8012a72 <prvProcessReceivedCommands+0x156>
 8012a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	617b      	str	r3, [r7, #20]
 8012a70:	e7fe      	b.n	8012a70 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a74:	699a      	ldr	r2, [r3, #24]
 8012a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a78:	18d1      	adds	r1, r2, r3
 8012a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a80:	f7ff ff0a 	bl	8012898 <prvInsertTimerInActiveList>
					break;
 8012a84:	e015      	b.n	8012ab2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a8c:	f003 0302 	and.w	r3, r3, #2
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d103      	bne.n	8012a9c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8012a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a96:	f000 fbc5 	bl	8013224 <vPortFree>
 8012a9a:	e00a      	b.n	8012ab2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012aa2:	f023 0301 	bic.w	r3, r3, #1
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012aae:	e000      	b.n	8012ab2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012ab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012ab2:	4b07      	ldr	r3, [pc, #28]	; (8012ad0 <prvProcessReceivedCommands+0x1b4>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	1d39      	adds	r1, r7, #4
 8012ab8:	2200      	movs	r2, #0
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fe f954 	bl	8010d68 <xQueueReceive>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f47f af2e 	bne.w	8012924 <prvProcessReceivedCommands+0x8>
	}
}
 8012ac8:	bf00      	nop
 8012aca:	3730      	adds	r7, #48	; 0x30
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	200013b0 	.word	0x200013b0

08012ad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ada:	e047      	b.n	8012b6c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012adc:	4b2d      	ldr	r3, [pc, #180]	; (8012b94 <prvSwitchTimerLists+0xc0>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ae6:	4b2b      	ldr	r3, [pc, #172]	; (8012b94 <prvSwitchTimerLists+0xc0>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	3304      	adds	r3, #4
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7fd fd51 	bl	801059c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6a1b      	ldr	r3, [r3, #32]
 8012afe:	68f8      	ldr	r0, [r7, #12]
 8012b00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b08:	f003 0304 	and.w	r3, r3, #4
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d02d      	beq.n	8012b6c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	699b      	ldr	r3, [r3, #24]
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	4413      	add	r3, r2
 8012b18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d90e      	bls.n	8012b40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	68ba      	ldr	r2, [r7, #8]
 8012b26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	68fa      	ldr	r2, [r7, #12]
 8012b2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012b2e:	4b19      	ldr	r3, [pc, #100]	; (8012b94 <prvSwitchTimerLists+0xc0>)
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	3304      	adds	r3, #4
 8012b36:	4619      	mov	r1, r3
 8012b38:	4610      	mov	r0, r2
 8012b3a:	f7fd fcf6 	bl	801052a <vListInsert>
 8012b3e:	e015      	b.n	8012b6c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012b40:	2300      	movs	r3, #0
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	2300      	movs	r3, #0
 8012b46:	693a      	ldr	r2, [r7, #16]
 8012b48:	2100      	movs	r1, #0
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f7ff fd68 	bl	8012620 <xTimerGenericCommand>
 8012b50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d109      	bne.n	8012b6c <prvSwitchTimerLists+0x98>
 8012b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b5c:	f383 8811 	msr	BASEPRI, r3
 8012b60:	f3bf 8f6f 	isb	sy
 8012b64:	f3bf 8f4f 	dsb	sy
 8012b68:	603b      	str	r3, [r7, #0]
 8012b6a:	e7fe      	b.n	8012b6a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b6c:	4b09      	ldr	r3, [pc, #36]	; (8012b94 <prvSwitchTimerLists+0xc0>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d1b2      	bne.n	8012adc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012b76:	4b07      	ldr	r3, [pc, #28]	; (8012b94 <prvSwitchTimerLists+0xc0>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012b7c:	4b06      	ldr	r3, [pc, #24]	; (8012b98 <prvSwitchTimerLists+0xc4>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	4a04      	ldr	r2, [pc, #16]	; (8012b94 <prvSwitchTimerLists+0xc0>)
 8012b82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012b84:	4a04      	ldr	r2, [pc, #16]	; (8012b98 <prvSwitchTimerLists+0xc4>)
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	6013      	str	r3, [r2, #0]
}
 8012b8a:	bf00      	nop
 8012b8c:	3718      	adds	r7, #24
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	200013a8 	.word	0x200013a8
 8012b98:	200013ac 	.word	0x200013ac

08012b9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012ba2:	f000 f963 	bl	8012e6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012ba6:	4b15      	ldr	r3, [pc, #84]	; (8012bfc <prvCheckForValidListAndQueue+0x60>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d120      	bne.n	8012bf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012bae:	4814      	ldr	r0, [pc, #80]	; (8012c00 <prvCheckForValidListAndQueue+0x64>)
 8012bb0:	f7fd fc6a 	bl	8010488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012bb4:	4813      	ldr	r0, [pc, #76]	; (8012c04 <prvCheckForValidListAndQueue+0x68>)
 8012bb6:	f7fd fc67 	bl	8010488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012bba:	4b13      	ldr	r3, [pc, #76]	; (8012c08 <prvCheckForValidListAndQueue+0x6c>)
 8012bbc:	4a10      	ldr	r2, [pc, #64]	; (8012c00 <prvCheckForValidListAndQueue+0x64>)
 8012bbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012bc0:	4b12      	ldr	r3, [pc, #72]	; (8012c0c <prvCheckForValidListAndQueue+0x70>)
 8012bc2:	4a10      	ldr	r2, [pc, #64]	; (8012c04 <prvCheckForValidListAndQueue+0x68>)
 8012bc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	4b11      	ldr	r3, [pc, #68]	; (8012c10 <prvCheckForValidListAndQueue+0x74>)
 8012bcc:	4a11      	ldr	r2, [pc, #68]	; (8012c14 <prvCheckForValidListAndQueue+0x78>)
 8012bce:	2110      	movs	r1, #16
 8012bd0:	200a      	movs	r0, #10
 8012bd2:	f7fd fd75 	bl	80106c0 <xQueueGenericCreateStatic>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	4b08      	ldr	r3, [pc, #32]	; (8012bfc <prvCheckForValidListAndQueue+0x60>)
 8012bda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012bdc:	4b07      	ldr	r3, [pc, #28]	; (8012bfc <prvCheckForValidListAndQueue+0x60>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d005      	beq.n	8012bf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012be4:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <prvCheckForValidListAndQueue+0x60>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	490b      	ldr	r1, [pc, #44]	; (8012c18 <prvCheckForValidListAndQueue+0x7c>)
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe fc68 	bl	80114c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012bf0:	f000 f96a 	bl	8012ec8 <vPortExitCritical>
}
 8012bf4:	bf00      	nop
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	200013b0 	.word	0x200013b0
 8012c00:	20001380 	.word	0x20001380
 8012c04:	20001394 	.word	0x20001394
 8012c08:	200013a8 	.word	0x200013a8
 8012c0c:	200013ac 	.word	0x200013ac
 8012c10:	2000145c 	.word	0x2000145c
 8012c14:	200013bc 	.word	0x200013bc
 8012c18:	08016cac 	.word	0x08016cac

08012c1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	3b04      	subs	r3, #4
 8012c2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	3b04      	subs	r3, #4
 8012c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	f023 0201 	bic.w	r2, r3, #1
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	3b04      	subs	r3, #4
 8012c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c4c:	4a0c      	ldr	r2, [pc, #48]	; (8012c80 <pxPortInitialiseStack+0x64>)
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	3b14      	subs	r3, #20
 8012c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	3b04      	subs	r3, #4
 8012c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	f06f 0202 	mvn.w	r2, #2
 8012c6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	3b20      	subs	r3, #32
 8012c70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c72:	68fb      	ldr	r3, [r7, #12]
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	08012c85 	.word	0x08012c85

08012c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c84:	b480      	push	{r7}
 8012c86:	b085      	sub	sp, #20
 8012c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c8e:	4b11      	ldr	r3, [pc, #68]	; (8012cd4 <prvTaskExitError+0x50>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c96:	d009      	beq.n	8012cac <prvTaskExitError+0x28>
 8012c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9c:	f383 8811 	msr	BASEPRI, r3
 8012ca0:	f3bf 8f6f 	isb	sy
 8012ca4:	f3bf 8f4f 	dsb	sy
 8012ca8:	60fb      	str	r3, [r7, #12]
 8012caa:	e7fe      	b.n	8012caa <prvTaskExitError+0x26>
 8012cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb0:	f383 8811 	msr	BASEPRI, r3
 8012cb4:	f3bf 8f6f 	isb	sy
 8012cb8:	f3bf 8f4f 	dsb	sy
 8012cbc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012cbe:	bf00      	nop
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d0fc      	beq.n	8012cc0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012cc6:	bf00      	nop
 8012cc8:	3714      	adds	r7, #20
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	20000490 	.word	0x20000490
	...

08012ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012ce0:	4b07      	ldr	r3, [pc, #28]	; (8012d00 <pxCurrentTCBConst2>)
 8012ce2:	6819      	ldr	r1, [r3, #0]
 8012ce4:	6808      	ldr	r0, [r1, #0]
 8012ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cea:	f380 8809 	msr	PSP, r0
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	f04f 0000 	mov.w	r0, #0
 8012cf6:	f380 8811 	msr	BASEPRI, r0
 8012cfa:	4770      	bx	lr
 8012cfc:	f3af 8000 	nop.w

08012d00 <pxCurrentTCBConst2>:
 8012d00:	20000e80 	.word	0x20000e80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d04:	bf00      	nop
 8012d06:	bf00      	nop

08012d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d08:	4808      	ldr	r0, [pc, #32]	; (8012d2c <prvPortStartFirstTask+0x24>)
 8012d0a:	6800      	ldr	r0, [r0, #0]
 8012d0c:	6800      	ldr	r0, [r0, #0]
 8012d0e:	f380 8808 	msr	MSP, r0
 8012d12:	f04f 0000 	mov.w	r0, #0
 8012d16:	f380 8814 	msr	CONTROL, r0
 8012d1a:	b662      	cpsie	i
 8012d1c:	b661      	cpsie	f
 8012d1e:	f3bf 8f4f 	dsb	sy
 8012d22:	f3bf 8f6f 	isb	sy
 8012d26:	df00      	svc	0
 8012d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d2a:	bf00      	nop
 8012d2c:	e000ed08 	.word	0xe000ed08

08012d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012d36:	4b44      	ldr	r3, [pc, #272]	; (8012e48 <xPortStartScheduler+0x118>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a44      	ldr	r2, [pc, #272]	; (8012e4c <xPortStartScheduler+0x11c>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d109      	bne.n	8012d54 <xPortStartScheduler+0x24>
 8012d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d44:	f383 8811 	msr	BASEPRI, r3
 8012d48:	f3bf 8f6f 	isb	sy
 8012d4c:	f3bf 8f4f 	dsb	sy
 8012d50:	613b      	str	r3, [r7, #16]
 8012d52:	e7fe      	b.n	8012d52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012d54:	4b3c      	ldr	r3, [pc, #240]	; (8012e48 <xPortStartScheduler+0x118>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4a3d      	ldr	r2, [pc, #244]	; (8012e50 <xPortStartScheduler+0x120>)
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	d109      	bne.n	8012d72 <xPortStartScheduler+0x42>
 8012d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d62:	f383 8811 	msr	BASEPRI, r3
 8012d66:	f3bf 8f6f 	isb	sy
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	60fb      	str	r3, [r7, #12]
 8012d70:	e7fe      	b.n	8012d70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d72:	4b38      	ldr	r3, [pc, #224]	; (8012e54 <xPortStartScheduler+0x124>)
 8012d74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	22ff      	movs	r2, #255	; 0xff
 8012d82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d8c:	78fb      	ldrb	r3, [r7, #3]
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	4b30      	ldr	r3, [pc, #192]	; (8012e58 <xPortStartScheduler+0x128>)
 8012d98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d9a:	4b30      	ldr	r3, [pc, #192]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012d9c:	2207      	movs	r2, #7
 8012d9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012da0:	e009      	b.n	8012db6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012da2:	4b2e      	ldr	r3, [pc, #184]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	3b01      	subs	r3, #1
 8012da8:	4a2c      	ldr	r2, [pc, #176]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012daa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012dac:	78fb      	ldrb	r3, [r7, #3]
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012db6:	78fb      	ldrb	r3, [r7, #3]
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dbe:	2b80      	cmp	r3, #128	; 0x80
 8012dc0:	d0ef      	beq.n	8012da2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012dc2:	4b26      	ldr	r3, [pc, #152]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f1c3 0307 	rsb	r3, r3, #7
 8012dca:	2b04      	cmp	r3, #4
 8012dcc:	d009      	beq.n	8012de2 <xPortStartScheduler+0xb2>
 8012dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd2:	f383 8811 	msr	BASEPRI, r3
 8012dd6:	f3bf 8f6f 	isb	sy
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	60bb      	str	r3, [r7, #8]
 8012de0:	e7fe      	b.n	8012de0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012de2:	4b1e      	ldr	r3, [pc, #120]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	4a1c      	ldr	r2, [pc, #112]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012dea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012dec:	4b1b      	ldr	r3, [pc, #108]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012df4:	4a19      	ldr	r2, [pc, #100]	; (8012e5c <xPortStartScheduler+0x12c>)
 8012df6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e00:	4b17      	ldr	r3, [pc, #92]	; (8012e60 <xPortStartScheduler+0x130>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4a16      	ldr	r2, [pc, #88]	; (8012e60 <xPortStartScheduler+0x130>)
 8012e06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e0c:	4b14      	ldr	r3, [pc, #80]	; (8012e60 <xPortStartScheduler+0x130>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a13      	ldr	r2, [pc, #76]	; (8012e60 <xPortStartScheduler+0x130>)
 8012e12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e18:	f000 f8d6 	bl	8012fc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e1c:	4b11      	ldr	r3, [pc, #68]	; (8012e64 <xPortStartScheduler+0x134>)
 8012e1e:	2200      	movs	r2, #0
 8012e20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e22:	f000 f8f5 	bl	8013010 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e26:	4b10      	ldr	r3, [pc, #64]	; (8012e68 <xPortStartScheduler+0x138>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	4a0f      	ldr	r2, [pc, #60]	; (8012e68 <xPortStartScheduler+0x138>)
 8012e2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e32:	f7ff ff69 	bl	8012d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e36:	f7fe ff71 	bl	8011d1c <vTaskSwitchContext>
	prvTaskExitError();
 8012e3a:	f7ff ff23 	bl	8012c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3718      	adds	r7, #24
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	e000ed00 	.word	0xe000ed00
 8012e4c:	410fc271 	.word	0x410fc271
 8012e50:	410fc270 	.word	0x410fc270
 8012e54:	e000e400 	.word	0xe000e400
 8012e58:	200014ac 	.word	0x200014ac
 8012e5c:	200014b0 	.word	0x200014b0
 8012e60:	e000ed20 	.word	0xe000ed20
 8012e64:	20000490 	.word	0x20000490
 8012e68:	e000ef34 	.word	0xe000ef34

08012e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e76:	f383 8811 	msr	BASEPRI, r3
 8012e7a:	f3bf 8f6f 	isb	sy
 8012e7e:	f3bf 8f4f 	dsb	sy
 8012e82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e84:	4b0e      	ldr	r3, [pc, #56]	; (8012ec0 <vPortEnterCritical+0x54>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	4a0d      	ldr	r2, [pc, #52]	; (8012ec0 <vPortEnterCritical+0x54>)
 8012e8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e8e:	4b0c      	ldr	r3, [pc, #48]	; (8012ec0 <vPortEnterCritical+0x54>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d10e      	bne.n	8012eb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e96:	4b0b      	ldr	r3, [pc, #44]	; (8012ec4 <vPortEnterCritical+0x58>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d009      	beq.n	8012eb4 <vPortEnterCritical+0x48>
 8012ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea4:	f383 8811 	msr	BASEPRI, r3
 8012ea8:	f3bf 8f6f 	isb	sy
 8012eac:	f3bf 8f4f 	dsb	sy
 8012eb0:	603b      	str	r3, [r7, #0]
 8012eb2:	e7fe      	b.n	8012eb2 <vPortEnterCritical+0x46>
	}
}
 8012eb4:	bf00      	nop
 8012eb6:	370c      	adds	r7, #12
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr
 8012ec0:	20000490 	.word	0x20000490
 8012ec4:	e000ed04 	.word	0xe000ed04

08012ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012ece:	4b11      	ldr	r3, [pc, #68]	; (8012f14 <vPortExitCritical+0x4c>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d109      	bne.n	8012eea <vPortExitCritical+0x22>
 8012ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eda:	f383 8811 	msr	BASEPRI, r3
 8012ede:	f3bf 8f6f 	isb	sy
 8012ee2:	f3bf 8f4f 	dsb	sy
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	e7fe      	b.n	8012ee8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8012eea:	4b0a      	ldr	r3, [pc, #40]	; (8012f14 <vPortExitCritical+0x4c>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	4a08      	ldr	r2, [pc, #32]	; (8012f14 <vPortExitCritical+0x4c>)
 8012ef2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ef4:	4b07      	ldr	r3, [pc, #28]	; (8012f14 <vPortExitCritical+0x4c>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d104      	bne.n	8012f06 <vPortExitCritical+0x3e>
 8012efc:	2300      	movs	r3, #0
 8012efe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012f06:	bf00      	nop
 8012f08:	370c      	adds	r7, #12
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	20000490 	.word	0x20000490
	...

08012f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f20:	f3ef 8009 	mrs	r0, PSP
 8012f24:	f3bf 8f6f 	isb	sy
 8012f28:	4b15      	ldr	r3, [pc, #84]	; (8012f80 <pxCurrentTCBConst>)
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	f01e 0f10 	tst.w	lr, #16
 8012f30:	bf08      	it	eq
 8012f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3a:	6010      	str	r0, [r2, #0]
 8012f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f44:	f380 8811 	msr	BASEPRI, r0
 8012f48:	f3bf 8f4f 	dsb	sy
 8012f4c:	f3bf 8f6f 	isb	sy
 8012f50:	f7fe fee4 	bl	8011d1c <vTaskSwitchContext>
 8012f54:	f04f 0000 	mov.w	r0, #0
 8012f58:	f380 8811 	msr	BASEPRI, r0
 8012f5c:	bc09      	pop	{r0, r3}
 8012f5e:	6819      	ldr	r1, [r3, #0]
 8012f60:	6808      	ldr	r0, [r1, #0]
 8012f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f66:	f01e 0f10 	tst.w	lr, #16
 8012f6a:	bf08      	it	eq
 8012f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f70:	f380 8809 	msr	PSP, r0
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop
 8012f7c:	f3af 8000 	nop.w

08012f80 <pxCurrentTCBConst>:
 8012f80:	20000e80 	.word	0x20000e80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f84:	bf00      	nop
 8012f86:	bf00      	nop

08012f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f92:	f383 8811 	msr	BASEPRI, r3
 8012f96:	f3bf 8f6f 	isb	sy
 8012f9a:	f3bf 8f4f 	dsb	sy
 8012f9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012fa0:	f7fe fe04 	bl	8011bac <xTaskIncrementTick>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d003      	beq.n	8012fb2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012faa:	4b06      	ldr	r3, [pc, #24]	; (8012fc4 <xPortSysTickHandler+0x3c>)
 8012fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fb0:	601a      	str	r2, [r3, #0]
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012fbc:	bf00      	nop
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	e000ed04 	.word	0xe000ed04

08012fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012fc8:	b480      	push	{r7}
 8012fca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012fcc:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <vPortSetupTimerInterrupt+0x34>)
 8012fce:	2200      	movs	r2, #0
 8012fd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012fd2:	4b0b      	ldr	r3, [pc, #44]	; (8013000 <vPortSetupTimerInterrupt+0x38>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012fd8:	4b0a      	ldr	r3, [pc, #40]	; (8013004 <vPortSetupTimerInterrupt+0x3c>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	4a0a      	ldr	r2, [pc, #40]	; (8013008 <vPortSetupTimerInterrupt+0x40>)
 8012fde:	fba2 2303 	umull	r2, r3, r2, r3
 8012fe2:	099b      	lsrs	r3, r3, #6
 8012fe4:	4a09      	ldr	r2, [pc, #36]	; (801300c <vPortSetupTimerInterrupt+0x44>)
 8012fe6:	3b01      	subs	r3, #1
 8012fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fea:	4b04      	ldr	r3, [pc, #16]	; (8012ffc <vPortSetupTimerInterrupt+0x34>)
 8012fec:	2207      	movs	r2, #7
 8012fee:	601a      	str	r2, [r3, #0]
}
 8012ff0:	bf00      	nop
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	e000e010 	.word	0xe000e010
 8013000:	e000e018 	.word	0xe000e018
 8013004:	2000018c 	.word	0x2000018c
 8013008:	10624dd3 	.word	0x10624dd3
 801300c:	e000e014 	.word	0xe000e014

08013010 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013020 <vPortEnableVFP+0x10>
 8013014:	6801      	ldr	r1, [r0, #0]
 8013016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801301a:	6001      	str	r1, [r0, #0]
 801301c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801301e:	bf00      	nop
 8013020:	e000ed88 	.word	0xe000ed88

08013024 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013024:	b480      	push	{r7}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801302a:	f3ef 8305 	mrs	r3, IPSR
 801302e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2b0f      	cmp	r3, #15
 8013034:	d913      	bls.n	801305e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013036:	4a16      	ldr	r2, [pc, #88]	; (8013090 <vPortValidateInterruptPriority+0x6c>)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	4413      	add	r3, r2
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013040:	4b14      	ldr	r3, [pc, #80]	; (8013094 <vPortValidateInterruptPriority+0x70>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	7afa      	ldrb	r2, [r7, #11]
 8013046:	429a      	cmp	r2, r3
 8013048:	d209      	bcs.n	801305e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304e:	f383 8811 	msr	BASEPRI, r3
 8013052:	f3bf 8f6f 	isb	sy
 8013056:	f3bf 8f4f 	dsb	sy
 801305a:	607b      	str	r3, [r7, #4]
 801305c:	e7fe      	b.n	801305c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801305e:	4b0e      	ldr	r3, [pc, #56]	; (8013098 <vPortValidateInterruptPriority+0x74>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013066:	4b0d      	ldr	r3, [pc, #52]	; (801309c <vPortValidateInterruptPriority+0x78>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	429a      	cmp	r2, r3
 801306c:	d909      	bls.n	8013082 <vPortValidateInterruptPriority+0x5e>
 801306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	603b      	str	r3, [r7, #0]
 8013080:	e7fe      	b.n	8013080 <vPortValidateInterruptPriority+0x5c>
	}
 8013082:	bf00      	nop
 8013084:	3714      	adds	r7, #20
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop
 8013090:	e000e3f0 	.word	0xe000e3f0
 8013094:	200014ac 	.word	0x200014ac
 8013098:	e000ed0c 	.word	0xe000ed0c
 801309c:	200014b0 	.word	0x200014b0

080130a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b08a      	sub	sp, #40	; 0x28
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80130a8:	2300      	movs	r3, #0
 80130aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80130ac:	f7fe fcc4 	bl	8011a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80130b0:	4b57      	ldr	r3, [pc, #348]	; (8013210 <pvPortMalloc+0x170>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d101      	bne.n	80130bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80130b8:	f000 f90c 	bl	80132d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80130bc:	4b55      	ldr	r3, [pc, #340]	; (8013214 <pvPortMalloc+0x174>)
 80130be:	681a      	ldr	r2, [r3, #0]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	4013      	ands	r3, r2
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	f040 808c 	bne.w	80131e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d01c      	beq.n	801310a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80130d0:	2208      	movs	r2, #8
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	4413      	add	r3, r2
 80130d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f003 0307 	and.w	r3, r3, #7
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d013      	beq.n	801310a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f023 0307 	bic.w	r3, r3, #7
 80130e8:	3308      	adds	r3, #8
 80130ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f003 0307 	and.w	r3, r3, #7
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d009      	beq.n	801310a <pvPortMalloc+0x6a>
 80130f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fa:	f383 8811 	msr	BASEPRI, r3
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	f3bf 8f4f 	dsb	sy
 8013106:	617b      	str	r3, [r7, #20]
 8013108:	e7fe      	b.n	8013108 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d068      	beq.n	80131e2 <pvPortMalloc+0x142>
 8013110:	4b41      	ldr	r3, [pc, #260]	; (8013218 <pvPortMalloc+0x178>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	429a      	cmp	r2, r3
 8013118:	d863      	bhi.n	80131e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801311a:	4b40      	ldr	r3, [pc, #256]	; (801321c <pvPortMalloc+0x17c>)
 801311c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801311e:	4b3f      	ldr	r3, [pc, #252]	; (801321c <pvPortMalloc+0x17c>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013124:	e004      	b.n	8013130 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	429a      	cmp	r2, r3
 8013138:	d903      	bls.n	8013142 <pvPortMalloc+0xa2>
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1f1      	bne.n	8013126 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013142:	4b33      	ldr	r3, [pc, #204]	; (8013210 <pvPortMalloc+0x170>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013148:	429a      	cmp	r2, r3
 801314a:	d04a      	beq.n	80131e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	2208      	movs	r2, #8
 8013152:	4413      	add	r3, r2
 8013154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	6a3b      	ldr	r3, [r7, #32]
 801315c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	685a      	ldr	r2, [r3, #4]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	1ad2      	subs	r2, r2, r3
 8013166:	2308      	movs	r3, #8
 8013168:	005b      	lsls	r3, r3, #1
 801316a:	429a      	cmp	r2, r3
 801316c:	d91e      	bls.n	80131ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	4413      	add	r3, r2
 8013174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	f003 0307 	and.w	r3, r3, #7
 801317c:	2b00      	cmp	r3, #0
 801317e:	d009      	beq.n	8013194 <pvPortMalloc+0xf4>
 8013180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	613b      	str	r3, [r7, #16]
 8013192:	e7fe      	b.n	8013192 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013196:	685a      	ldr	r2, [r3, #4]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	1ad2      	subs	r2, r2, r3
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80131a6:	69b8      	ldr	r0, [r7, #24]
 80131a8:	f000 f8f6 	bl	8013398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80131ac:	4b1a      	ldr	r3, [pc, #104]	; (8013218 <pvPortMalloc+0x178>)
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	4a18      	ldr	r2, [pc, #96]	; (8013218 <pvPortMalloc+0x178>)
 80131b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80131ba:	4b17      	ldr	r3, [pc, #92]	; (8013218 <pvPortMalloc+0x178>)
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	4b18      	ldr	r3, [pc, #96]	; (8013220 <pvPortMalloc+0x180>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d203      	bcs.n	80131ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80131c6:	4b14      	ldr	r3, [pc, #80]	; (8013218 <pvPortMalloc+0x178>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	4a15      	ldr	r2, [pc, #84]	; (8013220 <pvPortMalloc+0x180>)
 80131cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80131ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d0:	685a      	ldr	r2, [r3, #4]
 80131d2:	4b10      	ldr	r3, [pc, #64]	; (8013214 <pvPortMalloc+0x174>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	431a      	orrs	r2, r3
 80131d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80131dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131de:	2200      	movs	r2, #0
 80131e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80131e2:	f7fe fc37 	bl	8011a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	f003 0307 	and.w	r3, r3, #7
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d009      	beq.n	8013204 <pvPortMalloc+0x164>
 80131f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f4:	f383 8811 	msr	BASEPRI, r3
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	f3bf 8f4f 	dsb	sy
 8013200:	60fb      	str	r3, [r7, #12]
 8013202:	e7fe      	b.n	8013202 <pvPortMalloc+0x162>
	return pvReturn;
 8013204:	69fb      	ldr	r3, [r7, #28]
}
 8013206:	4618      	mov	r0, r3
 8013208:	3728      	adds	r7, #40	; 0x28
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	200037e4 	.word	0x200037e4
 8013214:	200037f0 	.word	0x200037f0
 8013218:	200037e8 	.word	0x200037e8
 801321c:	200037dc 	.word	0x200037dc
 8013220:	200037ec 	.word	0x200037ec

08013224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b086      	sub	sp, #24
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d046      	beq.n	80132c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013236:	2308      	movs	r3, #8
 8013238:	425b      	negs	r3, r3
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	4413      	add	r3, r2
 801323e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	685a      	ldr	r2, [r3, #4]
 8013248:	4b20      	ldr	r3, [pc, #128]	; (80132cc <vPortFree+0xa8>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4013      	ands	r3, r2
 801324e:	2b00      	cmp	r3, #0
 8013250:	d109      	bne.n	8013266 <vPortFree+0x42>
 8013252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013256:	f383 8811 	msr	BASEPRI, r3
 801325a:	f3bf 8f6f 	isb	sy
 801325e:	f3bf 8f4f 	dsb	sy
 8013262:	60fb      	str	r3, [r7, #12]
 8013264:	e7fe      	b.n	8013264 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d009      	beq.n	8013282 <vPortFree+0x5e>
 801326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013272:	f383 8811 	msr	BASEPRI, r3
 8013276:	f3bf 8f6f 	isb	sy
 801327a:	f3bf 8f4f 	dsb	sy
 801327e:	60bb      	str	r3, [r7, #8]
 8013280:	e7fe      	b.n	8013280 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	685a      	ldr	r2, [r3, #4]
 8013286:	4b11      	ldr	r3, [pc, #68]	; (80132cc <vPortFree+0xa8>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4013      	ands	r3, r2
 801328c:	2b00      	cmp	r3, #0
 801328e:	d019      	beq.n	80132c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d115      	bne.n	80132c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	685a      	ldr	r2, [r3, #4]
 801329c:	4b0b      	ldr	r3, [pc, #44]	; (80132cc <vPortFree+0xa8>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	43db      	mvns	r3, r3
 80132a2:	401a      	ands	r2, r3
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80132a8:	f7fe fbc6 	bl	8011a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	685a      	ldr	r2, [r3, #4]
 80132b0:	4b07      	ldr	r3, [pc, #28]	; (80132d0 <vPortFree+0xac>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	4413      	add	r3, r2
 80132b6:	4a06      	ldr	r2, [pc, #24]	; (80132d0 <vPortFree+0xac>)
 80132b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80132ba:	6938      	ldr	r0, [r7, #16]
 80132bc:	f000 f86c 	bl	8013398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80132c0:	f7fe fbc8 	bl	8011a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80132c4:	bf00      	nop
 80132c6:	3718      	adds	r7, #24
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	200037f0 	.word	0x200037f0
 80132d0:	200037e8 	.word	0x200037e8

080132d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80132d4:	b480      	push	{r7}
 80132d6:	b085      	sub	sp, #20
 80132d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80132da:	f242 3328 	movw	r3, #9000	; 0x2328
 80132de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132e0:	4b27      	ldr	r3, [pc, #156]	; (8013380 <prvHeapInit+0xac>)
 80132e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f003 0307 	and.w	r3, r3, #7
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00c      	beq.n	8013308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	3307      	adds	r3, #7
 80132f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f023 0307 	bic.w	r3, r3, #7
 80132fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	4a1f      	ldr	r2, [pc, #124]	; (8013380 <prvHeapInit+0xac>)
 8013304:	4413      	add	r3, r2
 8013306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801330c:	4a1d      	ldr	r2, [pc, #116]	; (8013384 <prvHeapInit+0xb0>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013312:	4b1c      	ldr	r3, [pc, #112]	; (8013384 <prvHeapInit+0xb0>)
 8013314:	2200      	movs	r2, #0
 8013316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	4413      	add	r3, r2
 801331e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013320:	2208      	movs	r2, #8
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	1a9b      	subs	r3, r3, r2
 8013326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f023 0307 	bic.w	r3, r3, #7
 801332e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	4a15      	ldr	r2, [pc, #84]	; (8013388 <prvHeapInit+0xb4>)
 8013334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013336:	4b14      	ldr	r3, [pc, #80]	; (8013388 <prvHeapInit+0xb4>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2200      	movs	r2, #0
 801333c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801333e:	4b12      	ldr	r3, [pc, #72]	; (8013388 <prvHeapInit+0xb4>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2200      	movs	r2, #0
 8013344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	68fa      	ldr	r2, [r7, #12]
 801334e:	1ad2      	subs	r2, r2, r3
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013354:	4b0c      	ldr	r3, [pc, #48]	; (8013388 <prvHeapInit+0xb4>)
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	4a0a      	ldr	r2, [pc, #40]	; (801338c <prvHeapInit+0xb8>)
 8013362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	4a09      	ldr	r2, [pc, #36]	; (8013390 <prvHeapInit+0xbc>)
 801336a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801336c:	4b09      	ldr	r3, [pc, #36]	; (8013394 <prvHeapInit+0xc0>)
 801336e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013372:	601a      	str	r2, [r3, #0]
}
 8013374:	bf00      	nop
 8013376:	3714      	adds	r7, #20
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr
 8013380:	200014b4 	.word	0x200014b4
 8013384:	200037dc 	.word	0x200037dc
 8013388:	200037e4 	.word	0x200037e4
 801338c:	200037ec 	.word	0x200037ec
 8013390:	200037e8 	.word	0x200037e8
 8013394:	200037f0 	.word	0x200037f0

08013398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80133a0:	4b28      	ldr	r3, [pc, #160]	; (8013444 <prvInsertBlockIntoFreeList+0xac>)
 80133a2:	60fb      	str	r3, [r7, #12]
 80133a4:	e002      	b.n	80133ac <prvInsertBlockIntoFreeList+0x14>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	60fb      	str	r3, [r7, #12]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d8f7      	bhi.n	80133a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	4413      	add	r3, r2
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d108      	bne.n	80133da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	685a      	ldr	r2, [r3, #4]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	441a      	add	r2, r3
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	68ba      	ldr	r2, [r7, #8]
 80133e4:	441a      	add	r2, r3
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d118      	bne.n	8013420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681a      	ldr	r2, [r3, #0]
 80133f2:	4b15      	ldr	r3, [pc, #84]	; (8013448 <prvInsertBlockIntoFreeList+0xb0>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d00d      	beq.n	8013416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685a      	ldr	r2, [r3, #4]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	441a      	add	r2, r3
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	681a      	ldr	r2, [r3, #0]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	601a      	str	r2, [r3, #0]
 8013414:	e008      	b.n	8013428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013416:	4b0c      	ldr	r3, [pc, #48]	; (8013448 <prvInsertBlockIntoFreeList+0xb0>)
 8013418:	681a      	ldr	r2, [r3, #0]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	601a      	str	r2, [r3, #0]
 801341e:	e003      	b.n	8013428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013428:	68fa      	ldr	r2, [r7, #12]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	429a      	cmp	r2, r3
 801342e:	d002      	beq.n	8013436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013436:	bf00      	nop
 8013438:	3714      	adds	r7, #20
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	200037dc 	.word	0x200037dc
 8013448:	200037e4 	.word	0x200037e4

0801344c <atoi>:
 801344c:	220a      	movs	r2, #10
 801344e:	2100      	movs	r1, #0
 8013450:	f000 ba24 	b.w	801389c <strtol>

08013454 <__errno>:
 8013454:	4b01      	ldr	r3, [pc, #4]	; (801345c <__errno+0x8>)
 8013456:	6818      	ldr	r0, [r3, #0]
 8013458:	4770      	bx	lr
 801345a:	bf00      	nop
 801345c:	20000494 	.word	0x20000494

08013460 <__libc_init_array>:
 8013460:	b570      	push	{r4, r5, r6, lr}
 8013462:	4e0d      	ldr	r6, [pc, #52]	; (8013498 <__libc_init_array+0x38>)
 8013464:	4c0d      	ldr	r4, [pc, #52]	; (801349c <__libc_init_array+0x3c>)
 8013466:	1ba4      	subs	r4, r4, r6
 8013468:	10a4      	asrs	r4, r4, #2
 801346a:	2500      	movs	r5, #0
 801346c:	42a5      	cmp	r5, r4
 801346e:	d109      	bne.n	8013484 <__libc_init_array+0x24>
 8013470:	4e0b      	ldr	r6, [pc, #44]	; (80134a0 <__libc_init_array+0x40>)
 8013472:	4c0c      	ldr	r4, [pc, #48]	; (80134a4 <__libc_init_array+0x44>)
 8013474:	f002 fb4a 	bl	8015b0c <_init>
 8013478:	1ba4      	subs	r4, r4, r6
 801347a:	10a4      	asrs	r4, r4, #2
 801347c:	2500      	movs	r5, #0
 801347e:	42a5      	cmp	r5, r4
 8013480:	d105      	bne.n	801348e <__libc_init_array+0x2e>
 8013482:	bd70      	pop	{r4, r5, r6, pc}
 8013484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013488:	4798      	blx	r3
 801348a:	3501      	adds	r5, #1
 801348c:	e7ee      	b.n	801346c <__libc_init_array+0xc>
 801348e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013492:	4798      	blx	r3
 8013494:	3501      	adds	r5, #1
 8013496:	e7f2      	b.n	801347e <__libc_init_array+0x1e>
 8013498:	08016fc8 	.word	0x08016fc8
 801349c:	08016fc8 	.word	0x08016fc8
 80134a0:	08016fc8 	.word	0x08016fc8
 80134a4:	08016fcc 	.word	0x08016fcc

080134a8 <memcmp>:
 80134a8:	b530      	push	{r4, r5, lr}
 80134aa:	2400      	movs	r4, #0
 80134ac:	42a2      	cmp	r2, r4
 80134ae:	d101      	bne.n	80134b4 <memcmp+0xc>
 80134b0:	2000      	movs	r0, #0
 80134b2:	e007      	b.n	80134c4 <memcmp+0x1c>
 80134b4:	5d03      	ldrb	r3, [r0, r4]
 80134b6:	3401      	adds	r4, #1
 80134b8:	190d      	adds	r5, r1, r4
 80134ba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80134be:	42ab      	cmp	r3, r5
 80134c0:	d0f4      	beq.n	80134ac <memcmp+0x4>
 80134c2:	1b58      	subs	r0, r3, r5
 80134c4:	bd30      	pop	{r4, r5, pc}

080134c6 <memcpy>:
 80134c6:	b510      	push	{r4, lr}
 80134c8:	1e43      	subs	r3, r0, #1
 80134ca:	440a      	add	r2, r1
 80134cc:	4291      	cmp	r1, r2
 80134ce:	d100      	bne.n	80134d2 <memcpy+0xc>
 80134d0:	bd10      	pop	{r4, pc}
 80134d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134da:	e7f7      	b.n	80134cc <memcpy+0x6>

080134dc <memset>:
 80134dc:	4402      	add	r2, r0
 80134de:	4603      	mov	r3, r0
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d100      	bne.n	80134e6 <memset+0xa>
 80134e4:	4770      	bx	lr
 80134e6:	f803 1b01 	strb.w	r1, [r3], #1
 80134ea:	e7f9      	b.n	80134e0 <memset+0x4>

080134ec <iprintf>:
 80134ec:	b40f      	push	{r0, r1, r2, r3}
 80134ee:	4b0a      	ldr	r3, [pc, #40]	; (8013518 <iprintf+0x2c>)
 80134f0:	b513      	push	{r0, r1, r4, lr}
 80134f2:	681c      	ldr	r4, [r3, #0]
 80134f4:	b124      	cbz	r4, 8013500 <iprintf+0x14>
 80134f6:	69a3      	ldr	r3, [r4, #24]
 80134f8:	b913      	cbnz	r3, 8013500 <iprintf+0x14>
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 fb94 	bl	8013c28 <__sinit>
 8013500:	ab05      	add	r3, sp, #20
 8013502:	9a04      	ldr	r2, [sp, #16]
 8013504:	68a1      	ldr	r1, [r4, #8]
 8013506:	9301      	str	r3, [sp, #4]
 8013508:	4620      	mov	r0, r4
 801350a:	f000 febd 	bl	8014288 <_vfiprintf_r>
 801350e:	b002      	add	sp, #8
 8013510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013514:	b004      	add	sp, #16
 8013516:	4770      	bx	lr
 8013518:	20000494 	.word	0x20000494

0801351c <_puts_r>:
 801351c:	b570      	push	{r4, r5, r6, lr}
 801351e:	460e      	mov	r6, r1
 8013520:	4605      	mov	r5, r0
 8013522:	b118      	cbz	r0, 801352c <_puts_r+0x10>
 8013524:	6983      	ldr	r3, [r0, #24]
 8013526:	b90b      	cbnz	r3, 801352c <_puts_r+0x10>
 8013528:	f000 fb7e 	bl	8013c28 <__sinit>
 801352c:	69ab      	ldr	r3, [r5, #24]
 801352e:	68ac      	ldr	r4, [r5, #8]
 8013530:	b913      	cbnz	r3, 8013538 <_puts_r+0x1c>
 8013532:	4628      	mov	r0, r5
 8013534:	f000 fb78 	bl	8013c28 <__sinit>
 8013538:	4b23      	ldr	r3, [pc, #140]	; (80135c8 <_puts_r+0xac>)
 801353a:	429c      	cmp	r4, r3
 801353c:	d117      	bne.n	801356e <_puts_r+0x52>
 801353e:	686c      	ldr	r4, [r5, #4]
 8013540:	89a3      	ldrh	r3, [r4, #12]
 8013542:	071b      	lsls	r3, r3, #28
 8013544:	d51d      	bpl.n	8013582 <_puts_r+0x66>
 8013546:	6923      	ldr	r3, [r4, #16]
 8013548:	b1db      	cbz	r3, 8013582 <_puts_r+0x66>
 801354a:	3e01      	subs	r6, #1
 801354c:	68a3      	ldr	r3, [r4, #8]
 801354e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013552:	3b01      	subs	r3, #1
 8013554:	60a3      	str	r3, [r4, #8]
 8013556:	b9e9      	cbnz	r1, 8013594 <_puts_r+0x78>
 8013558:	2b00      	cmp	r3, #0
 801355a:	da2e      	bge.n	80135ba <_puts_r+0x9e>
 801355c:	4622      	mov	r2, r4
 801355e:	210a      	movs	r1, #10
 8013560:	4628      	mov	r0, r5
 8013562:	f000 f9b1 	bl	80138c8 <__swbuf_r>
 8013566:	3001      	adds	r0, #1
 8013568:	d011      	beq.n	801358e <_puts_r+0x72>
 801356a:	200a      	movs	r0, #10
 801356c:	e011      	b.n	8013592 <_puts_r+0x76>
 801356e:	4b17      	ldr	r3, [pc, #92]	; (80135cc <_puts_r+0xb0>)
 8013570:	429c      	cmp	r4, r3
 8013572:	d101      	bne.n	8013578 <_puts_r+0x5c>
 8013574:	68ac      	ldr	r4, [r5, #8]
 8013576:	e7e3      	b.n	8013540 <_puts_r+0x24>
 8013578:	4b15      	ldr	r3, [pc, #84]	; (80135d0 <_puts_r+0xb4>)
 801357a:	429c      	cmp	r4, r3
 801357c:	bf08      	it	eq
 801357e:	68ec      	ldreq	r4, [r5, #12]
 8013580:	e7de      	b.n	8013540 <_puts_r+0x24>
 8013582:	4621      	mov	r1, r4
 8013584:	4628      	mov	r0, r5
 8013586:	f000 f9f1 	bl	801396c <__swsetup_r>
 801358a:	2800      	cmp	r0, #0
 801358c:	d0dd      	beq.n	801354a <_puts_r+0x2e>
 801358e:	f04f 30ff 	mov.w	r0, #4294967295
 8013592:	bd70      	pop	{r4, r5, r6, pc}
 8013594:	2b00      	cmp	r3, #0
 8013596:	da04      	bge.n	80135a2 <_puts_r+0x86>
 8013598:	69a2      	ldr	r2, [r4, #24]
 801359a:	429a      	cmp	r2, r3
 801359c:	dc06      	bgt.n	80135ac <_puts_r+0x90>
 801359e:	290a      	cmp	r1, #10
 80135a0:	d004      	beq.n	80135ac <_puts_r+0x90>
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	1c5a      	adds	r2, r3, #1
 80135a6:	6022      	str	r2, [r4, #0]
 80135a8:	7019      	strb	r1, [r3, #0]
 80135aa:	e7cf      	b.n	801354c <_puts_r+0x30>
 80135ac:	4622      	mov	r2, r4
 80135ae:	4628      	mov	r0, r5
 80135b0:	f000 f98a 	bl	80138c8 <__swbuf_r>
 80135b4:	3001      	adds	r0, #1
 80135b6:	d1c9      	bne.n	801354c <_puts_r+0x30>
 80135b8:	e7e9      	b.n	801358e <_puts_r+0x72>
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	200a      	movs	r0, #10
 80135be:	1c5a      	adds	r2, r3, #1
 80135c0:	6022      	str	r2, [r4, #0]
 80135c2:	7018      	strb	r0, [r3, #0]
 80135c4:	e7e5      	b.n	8013592 <_puts_r+0x76>
 80135c6:	bf00      	nop
 80135c8:	08016df8 	.word	0x08016df8
 80135cc:	08016e18 	.word	0x08016e18
 80135d0:	08016dd8 	.word	0x08016dd8

080135d4 <puts>:
 80135d4:	4b02      	ldr	r3, [pc, #8]	; (80135e0 <puts+0xc>)
 80135d6:	4601      	mov	r1, r0
 80135d8:	6818      	ldr	r0, [r3, #0]
 80135da:	f7ff bf9f 	b.w	801351c <_puts_r>
 80135de:	bf00      	nop
 80135e0:	20000494 	.word	0x20000494

080135e4 <sniprintf>:
 80135e4:	b40c      	push	{r2, r3}
 80135e6:	b530      	push	{r4, r5, lr}
 80135e8:	4b17      	ldr	r3, [pc, #92]	; (8013648 <sniprintf+0x64>)
 80135ea:	1e0c      	subs	r4, r1, #0
 80135ec:	b09d      	sub	sp, #116	; 0x74
 80135ee:	681d      	ldr	r5, [r3, #0]
 80135f0:	da08      	bge.n	8013604 <sniprintf+0x20>
 80135f2:	238b      	movs	r3, #139	; 0x8b
 80135f4:	602b      	str	r3, [r5, #0]
 80135f6:	f04f 30ff 	mov.w	r0, #4294967295
 80135fa:	b01d      	add	sp, #116	; 0x74
 80135fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013600:	b002      	add	sp, #8
 8013602:	4770      	bx	lr
 8013604:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013608:	f8ad 3014 	strh.w	r3, [sp, #20]
 801360c:	bf14      	ite	ne
 801360e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013612:	4623      	moveq	r3, r4
 8013614:	9304      	str	r3, [sp, #16]
 8013616:	9307      	str	r3, [sp, #28]
 8013618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801361c:	9002      	str	r0, [sp, #8]
 801361e:	9006      	str	r0, [sp, #24]
 8013620:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013624:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013626:	ab21      	add	r3, sp, #132	; 0x84
 8013628:	a902      	add	r1, sp, #8
 801362a:	4628      	mov	r0, r5
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	f000 fd09 	bl	8014044 <_svfiprintf_r>
 8013632:	1c43      	adds	r3, r0, #1
 8013634:	bfbc      	itt	lt
 8013636:	238b      	movlt	r3, #139	; 0x8b
 8013638:	602b      	strlt	r3, [r5, #0]
 801363a:	2c00      	cmp	r4, #0
 801363c:	d0dd      	beq.n	80135fa <sniprintf+0x16>
 801363e:	9b02      	ldr	r3, [sp, #8]
 8013640:	2200      	movs	r2, #0
 8013642:	701a      	strb	r2, [r3, #0]
 8013644:	e7d9      	b.n	80135fa <sniprintf+0x16>
 8013646:	bf00      	nop
 8013648:	20000494 	.word	0x20000494

0801364c <siprintf>:
 801364c:	b40e      	push	{r1, r2, r3}
 801364e:	b500      	push	{lr}
 8013650:	b09c      	sub	sp, #112	; 0x70
 8013652:	ab1d      	add	r3, sp, #116	; 0x74
 8013654:	9002      	str	r0, [sp, #8]
 8013656:	9006      	str	r0, [sp, #24]
 8013658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801365c:	4809      	ldr	r0, [pc, #36]	; (8013684 <siprintf+0x38>)
 801365e:	9107      	str	r1, [sp, #28]
 8013660:	9104      	str	r1, [sp, #16]
 8013662:	4909      	ldr	r1, [pc, #36]	; (8013688 <siprintf+0x3c>)
 8013664:	f853 2b04 	ldr.w	r2, [r3], #4
 8013668:	9105      	str	r1, [sp, #20]
 801366a:	6800      	ldr	r0, [r0, #0]
 801366c:	9301      	str	r3, [sp, #4]
 801366e:	a902      	add	r1, sp, #8
 8013670:	f000 fce8 	bl	8014044 <_svfiprintf_r>
 8013674:	9b02      	ldr	r3, [sp, #8]
 8013676:	2200      	movs	r2, #0
 8013678:	701a      	strb	r2, [r3, #0]
 801367a:	b01c      	add	sp, #112	; 0x70
 801367c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013680:	b003      	add	sp, #12
 8013682:	4770      	bx	lr
 8013684:	20000494 	.word	0x20000494
 8013688:	ffff0208 	.word	0xffff0208

0801368c <strcpy>:
 801368c:	4603      	mov	r3, r0
 801368e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013692:	f803 2b01 	strb.w	r2, [r3], #1
 8013696:	2a00      	cmp	r2, #0
 8013698:	d1f9      	bne.n	801368e <strcpy+0x2>
 801369a:	4770      	bx	lr

0801369c <strncpy>:
 801369c:	b570      	push	{r4, r5, r6, lr}
 801369e:	3901      	subs	r1, #1
 80136a0:	4604      	mov	r4, r0
 80136a2:	b902      	cbnz	r2, 80136a6 <strncpy+0xa>
 80136a4:	bd70      	pop	{r4, r5, r6, pc}
 80136a6:	4623      	mov	r3, r4
 80136a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80136ac:	f803 5b01 	strb.w	r5, [r3], #1
 80136b0:	1e56      	subs	r6, r2, #1
 80136b2:	b92d      	cbnz	r5, 80136c0 <strncpy+0x24>
 80136b4:	4414      	add	r4, r2
 80136b6:	42a3      	cmp	r3, r4
 80136b8:	d0f4      	beq.n	80136a4 <strncpy+0x8>
 80136ba:	f803 5b01 	strb.w	r5, [r3], #1
 80136be:	e7fa      	b.n	80136b6 <strncpy+0x1a>
 80136c0:	461c      	mov	r4, r3
 80136c2:	4632      	mov	r2, r6
 80136c4:	e7ed      	b.n	80136a2 <strncpy+0x6>

080136c6 <strstr>:
 80136c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136c8:	7803      	ldrb	r3, [r0, #0]
 80136ca:	b17b      	cbz	r3, 80136ec <strstr+0x26>
 80136cc:	4604      	mov	r4, r0
 80136ce:	7823      	ldrb	r3, [r4, #0]
 80136d0:	4620      	mov	r0, r4
 80136d2:	1c66      	adds	r6, r4, #1
 80136d4:	b17b      	cbz	r3, 80136f6 <strstr+0x30>
 80136d6:	1e4a      	subs	r2, r1, #1
 80136d8:	1e63      	subs	r3, r4, #1
 80136da:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80136de:	b14d      	cbz	r5, 80136f4 <strstr+0x2e>
 80136e0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80136e4:	42af      	cmp	r7, r5
 80136e6:	4634      	mov	r4, r6
 80136e8:	d0f7      	beq.n	80136da <strstr+0x14>
 80136ea:	e7f0      	b.n	80136ce <strstr+0x8>
 80136ec:	780b      	ldrb	r3, [r1, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	bf18      	it	ne
 80136f2:	2000      	movne	r0, #0
 80136f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136f6:	4618      	mov	r0, r3
 80136f8:	e7fc      	b.n	80136f4 <strstr+0x2e>
	...

080136fc <strtok>:
 80136fc:	4b13      	ldr	r3, [pc, #76]	; (801374c <strtok+0x50>)
 80136fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013702:	681d      	ldr	r5, [r3, #0]
 8013704:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8013706:	4606      	mov	r6, r0
 8013708:	460f      	mov	r7, r1
 801370a:	b9b4      	cbnz	r4, 801373a <strtok+0x3e>
 801370c:	2050      	movs	r0, #80	; 0x50
 801370e:	f000 fb7d 	bl	8013e0c <malloc>
 8013712:	65a8      	str	r0, [r5, #88]	; 0x58
 8013714:	e9c0 4400 	strd	r4, r4, [r0]
 8013718:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801371c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013720:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013724:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013728:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801372c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013730:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013734:	6184      	str	r4, [r0, #24]
 8013736:	7704      	strb	r4, [r0, #28]
 8013738:	6244      	str	r4, [r0, #36]	; 0x24
 801373a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801373c:	4639      	mov	r1, r7
 801373e:	4630      	mov	r0, r6
 8013740:	2301      	movs	r3, #1
 8013742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013746:	f000 b803 	b.w	8013750 <__strtok_r>
 801374a:	bf00      	nop
 801374c:	20000494 	.word	0x20000494

08013750 <__strtok_r>:
 8013750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013752:	b918      	cbnz	r0, 801375c <__strtok_r+0xc>
 8013754:	6810      	ldr	r0, [r2, #0]
 8013756:	b908      	cbnz	r0, 801375c <__strtok_r+0xc>
 8013758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801375a:	4620      	mov	r0, r4
 801375c:	4604      	mov	r4, r0
 801375e:	460f      	mov	r7, r1
 8013760:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013764:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013768:	b91e      	cbnz	r6, 8013772 <__strtok_r+0x22>
 801376a:	b96d      	cbnz	r5, 8013788 <__strtok_r+0x38>
 801376c:	6015      	str	r5, [r2, #0]
 801376e:	4628      	mov	r0, r5
 8013770:	e7f2      	b.n	8013758 <__strtok_r+0x8>
 8013772:	42b5      	cmp	r5, r6
 8013774:	d1f6      	bne.n	8013764 <__strtok_r+0x14>
 8013776:	2b00      	cmp	r3, #0
 8013778:	d1ef      	bne.n	801375a <__strtok_r+0xa>
 801377a:	6014      	str	r4, [r2, #0]
 801377c:	7003      	strb	r3, [r0, #0]
 801377e:	e7eb      	b.n	8013758 <__strtok_r+0x8>
 8013780:	462b      	mov	r3, r5
 8013782:	e00d      	b.n	80137a0 <__strtok_r+0x50>
 8013784:	b926      	cbnz	r6, 8013790 <__strtok_r+0x40>
 8013786:	461c      	mov	r4, r3
 8013788:	4623      	mov	r3, r4
 801378a:	460f      	mov	r7, r1
 801378c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013790:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013794:	42b5      	cmp	r5, r6
 8013796:	d1f5      	bne.n	8013784 <__strtok_r+0x34>
 8013798:	2d00      	cmp	r5, #0
 801379a:	d0f1      	beq.n	8013780 <__strtok_r+0x30>
 801379c:	2100      	movs	r1, #0
 801379e:	7021      	strb	r1, [r4, #0]
 80137a0:	6013      	str	r3, [r2, #0]
 80137a2:	e7d9      	b.n	8013758 <__strtok_r+0x8>

080137a4 <_strtol_l.isra.0>:
 80137a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137a8:	4680      	mov	r8, r0
 80137aa:	4689      	mov	r9, r1
 80137ac:	4692      	mov	sl, r2
 80137ae:	461e      	mov	r6, r3
 80137b0:	460f      	mov	r7, r1
 80137b2:	463d      	mov	r5, r7
 80137b4:	9808      	ldr	r0, [sp, #32]
 80137b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137ba:	f000 fabf 	bl	8013d3c <__locale_ctype_ptr_l>
 80137be:	4420      	add	r0, r4
 80137c0:	7843      	ldrb	r3, [r0, #1]
 80137c2:	f013 0308 	ands.w	r3, r3, #8
 80137c6:	d132      	bne.n	801382e <_strtol_l.isra.0+0x8a>
 80137c8:	2c2d      	cmp	r4, #45	; 0x2d
 80137ca:	d132      	bne.n	8013832 <_strtol_l.isra.0+0x8e>
 80137cc:	787c      	ldrb	r4, [r7, #1]
 80137ce:	1cbd      	adds	r5, r7, #2
 80137d0:	2201      	movs	r2, #1
 80137d2:	2e00      	cmp	r6, #0
 80137d4:	d05d      	beq.n	8013892 <_strtol_l.isra.0+0xee>
 80137d6:	2e10      	cmp	r6, #16
 80137d8:	d109      	bne.n	80137ee <_strtol_l.isra.0+0x4a>
 80137da:	2c30      	cmp	r4, #48	; 0x30
 80137dc:	d107      	bne.n	80137ee <_strtol_l.isra.0+0x4a>
 80137de:	782b      	ldrb	r3, [r5, #0]
 80137e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80137e4:	2b58      	cmp	r3, #88	; 0x58
 80137e6:	d14f      	bne.n	8013888 <_strtol_l.isra.0+0xe4>
 80137e8:	786c      	ldrb	r4, [r5, #1]
 80137ea:	2610      	movs	r6, #16
 80137ec:	3502      	adds	r5, #2
 80137ee:	2a00      	cmp	r2, #0
 80137f0:	bf14      	ite	ne
 80137f2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80137f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80137fa:	2700      	movs	r7, #0
 80137fc:	fbb1 fcf6 	udiv	ip, r1, r6
 8013800:	4638      	mov	r0, r7
 8013802:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013806:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801380a:	2b09      	cmp	r3, #9
 801380c:	d817      	bhi.n	801383e <_strtol_l.isra.0+0x9a>
 801380e:	461c      	mov	r4, r3
 8013810:	42a6      	cmp	r6, r4
 8013812:	dd23      	ble.n	801385c <_strtol_l.isra.0+0xb8>
 8013814:	1c7b      	adds	r3, r7, #1
 8013816:	d007      	beq.n	8013828 <_strtol_l.isra.0+0x84>
 8013818:	4584      	cmp	ip, r0
 801381a:	d31c      	bcc.n	8013856 <_strtol_l.isra.0+0xb2>
 801381c:	d101      	bne.n	8013822 <_strtol_l.isra.0+0x7e>
 801381e:	45a6      	cmp	lr, r4
 8013820:	db19      	blt.n	8013856 <_strtol_l.isra.0+0xb2>
 8013822:	fb00 4006 	mla	r0, r0, r6, r4
 8013826:	2701      	movs	r7, #1
 8013828:	f815 4b01 	ldrb.w	r4, [r5], #1
 801382c:	e7eb      	b.n	8013806 <_strtol_l.isra.0+0x62>
 801382e:	462f      	mov	r7, r5
 8013830:	e7bf      	b.n	80137b2 <_strtol_l.isra.0+0xe>
 8013832:	2c2b      	cmp	r4, #43	; 0x2b
 8013834:	bf04      	itt	eq
 8013836:	1cbd      	addeq	r5, r7, #2
 8013838:	787c      	ldrbeq	r4, [r7, #1]
 801383a:	461a      	mov	r2, r3
 801383c:	e7c9      	b.n	80137d2 <_strtol_l.isra.0+0x2e>
 801383e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013842:	2b19      	cmp	r3, #25
 8013844:	d801      	bhi.n	801384a <_strtol_l.isra.0+0xa6>
 8013846:	3c37      	subs	r4, #55	; 0x37
 8013848:	e7e2      	b.n	8013810 <_strtol_l.isra.0+0x6c>
 801384a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801384e:	2b19      	cmp	r3, #25
 8013850:	d804      	bhi.n	801385c <_strtol_l.isra.0+0xb8>
 8013852:	3c57      	subs	r4, #87	; 0x57
 8013854:	e7dc      	b.n	8013810 <_strtol_l.isra.0+0x6c>
 8013856:	f04f 37ff 	mov.w	r7, #4294967295
 801385a:	e7e5      	b.n	8013828 <_strtol_l.isra.0+0x84>
 801385c:	1c7b      	adds	r3, r7, #1
 801385e:	d108      	bne.n	8013872 <_strtol_l.isra.0+0xce>
 8013860:	2322      	movs	r3, #34	; 0x22
 8013862:	f8c8 3000 	str.w	r3, [r8]
 8013866:	4608      	mov	r0, r1
 8013868:	f1ba 0f00 	cmp.w	sl, #0
 801386c:	d107      	bne.n	801387e <_strtol_l.isra.0+0xda>
 801386e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013872:	b102      	cbz	r2, 8013876 <_strtol_l.isra.0+0xd2>
 8013874:	4240      	negs	r0, r0
 8013876:	f1ba 0f00 	cmp.w	sl, #0
 801387a:	d0f8      	beq.n	801386e <_strtol_l.isra.0+0xca>
 801387c:	b10f      	cbz	r7, 8013882 <_strtol_l.isra.0+0xde>
 801387e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013882:	f8ca 9000 	str.w	r9, [sl]
 8013886:	e7f2      	b.n	801386e <_strtol_l.isra.0+0xca>
 8013888:	2430      	movs	r4, #48	; 0x30
 801388a:	2e00      	cmp	r6, #0
 801388c:	d1af      	bne.n	80137ee <_strtol_l.isra.0+0x4a>
 801388e:	2608      	movs	r6, #8
 8013890:	e7ad      	b.n	80137ee <_strtol_l.isra.0+0x4a>
 8013892:	2c30      	cmp	r4, #48	; 0x30
 8013894:	d0a3      	beq.n	80137de <_strtol_l.isra.0+0x3a>
 8013896:	260a      	movs	r6, #10
 8013898:	e7a9      	b.n	80137ee <_strtol_l.isra.0+0x4a>
	...

0801389c <strtol>:
 801389c:	4b08      	ldr	r3, [pc, #32]	; (80138c0 <strtol+0x24>)
 801389e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138a0:	681c      	ldr	r4, [r3, #0]
 80138a2:	4d08      	ldr	r5, [pc, #32]	; (80138c4 <strtol+0x28>)
 80138a4:	6a23      	ldr	r3, [r4, #32]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	bf08      	it	eq
 80138aa:	462b      	moveq	r3, r5
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	4613      	mov	r3, r2
 80138b0:	460a      	mov	r2, r1
 80138b2:	4601      	mov	r1, r0
 80138b4:	4620      	mov	r0, r4
 80138b6:	f7ff ff75 	bl	80137a4 <_strtol_l.isra.0>
 80138ba:	b003      	add	sp, #12
 80138bc:	bd30      	pop	{r4, r5, pc}
 80138be:	bf00      	nop
 80138c0:	20000494 	.word	0x20000494
 80138c4:	200004f8 	.word	0x200004f8

080138c8 <__swbuf_r>:
 80138c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ca:	460e      	mov	r6, r1
 80138cc:	4614      	mov	r4, r2
 80138ce:	4605      	mov	r5, r0
 80138d0:	b118      	cbz	r0, 80138da <__swbuf_r+0x12>
 80138d2:	6983      	ldr	r3, [r0, #24]
 80138d4:	b90b      	cbnz	r3, 80138da <__swbuf_r+0x12>
 80138d6:	f000 f9a7 	bl	8013c28 <__sinit>
 80138da:	4b21      	ldr	r3, [pc, #132]	; (8013960 <__swbuf_r+0x98>)
 80138dc:	429c      	cmp	r4, r3
 80138de:	d12a      	bne.n	8013936 <__swbuf_r+0x6e>
 80138e0:	686c      	ldr	r4, [r5, #4]
 80138e2:	69a3      	ldr	r3, [r4, #24]
 80138e4:	60a3      	str	r3, [r4, #8]
 80138e6:	89a3      	ldrh	r3, [r4, #12]
 80138e8:	071a      	lsls	r2, r3, #28
 80138ea:	d52e      	bpl.n	801394a <__swbuf_r+0x82>
 80138ec:	6923      	ldr	r3, [r4, #16]
 80138ee:	b363      	cbz	r3, 801394a <__swbuf_r+0x82>
 80138f0:	6923      	ldr	r3, [r4, #16]
 80138f2:	6820      	ldr	r0, [r4, #0]
 80138f4:	1ac0      	subs	r0, r0, r3
 80138f6:	6963      	ldr	r3, [r4, #20]
 80138f8:	b2f6      	uxtb	r6, r6
 80138fa:	4283      	cmp	r3, r0
 80138fc:	4637      	mov	r7, r6
 80138fe:	dc04      	bgt.n	801390a <__swbuf_r+0x42>
 8013900:	4621      	mov	r1, r4
 8013902:	4628      	mov	r0, r5
 8013904:	f000 f926 	bl	8013b54 <_fflush_r>
 8013908:	bb28      	cbnz	r0, 8013956 <__swbuf_r+0x8e>
 801390a:	68a3      	ldr	r3, [r4, #8]
 801390c:	3b01      	subs	r3, #1
 801390e:	60a3      	str	r3, [r4, #8]
 8013910:	6823      	ldr	r3, [r4, #0]
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	6022      	str	r2, [r4, #0]
 8013916:	701e      	strb	r6, [r3, #0]
 8013918:	6963      	ldr	r3, [r4, #20]
 801391a:	3001      	adds	r0, #1
 801391c:	4283      	cmp	r3, r0
 801391e:	d004      	beq.n	801392a <__swbuf_r+0x62>
 8013920:	89a3      	ldrh	r3, [r4, #12]
 8013922:	07db      	lsls	r3, r3, #31
 8013924:	d519      	bpl.n	801395a <__swbuf_r+0x92>
 8013926:	2e0a      	cmp	r6, #10
 8013928:	d117      	bne.n	801395a <__swbuf_r+0x92>
 801392a:	4621      	mov	r1, r4
 801392c:	4628      	mov	r0, r5
 801392e:	f000 f911 	bl	8013b54 <_fflush_r>
 8013932:	b190      	cbz	r0, 801395a <__swbuf_r+0x92>
 8013934:	e00f      	b.n	8013956 <__swbuf_r+0x8e>
 8013936:	4b0b      	ldr	r3, [pc, #44]	; (8013964 <__swbuf_r+0x9c>)
 8013938:	429c      	cmp	r4, r3
 801393a:	d101      	bne.n	8013940 <__swbuf_r+0x78>
 801393c:	68ac      	ldr	r4, [r5, #8]
 801393e:	e7d0      	b.n	80138e2 <__swbuf_r+0x1a>
 8013940:	4b09      	ldr	r3, [pc, #36]	; (8013968 <__swbuf_r+0xa0>)
 8013942:	429c      	cmp	r4, r3
 8013944:	bf08      	it	eq
 8013946:	68ec      	ldreq	r4, [r5, #12]
 8013948:	e7cb      	b.n	80138e2 <__swbuf_r+0x1a>
 801394a:	4621      	mov	r1, r4
 801394c:	4628      	mov	r0, r5
 801394e:	f000 f80d 	bl	801396c <__swsetup_r>
 8013952:	2800      	cmp	r0, #0
 8013954:	d0cc      	beq.n	80138f0 <__swbuf_r+0x28>
 8013956:	f04f 37ff 	mov.w	r7, #4294967295
 801395a:	4638      	mov	r0, r7
 801395c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801395e:	bf00      	nop
 8013960:	08016df8 	.word	0x08016df8
 8013964:	08016e18 	.word	0x08016e18
 8013968:	08016dd8 	.word	0x08016dd8

0801396c <__swsetup_r>:
 801396c:	4b32      	ldr	r3, [pc, #200]	; (8013a38 <__swsetup_r+0xcc>)
 801396e:	b570      	push	{r4, r5, r6, lr}
 8013970:	681d      	ldr	r5, [r3, #0]
 8013972:	4606      	mov	r6, r0
 8013974:	460c      	mov	r4, r1
 8013976:	b125      	cbz	r5, 8013982 <__swsetup_r+0x16>
 8013978:	69ab      	ldr	r3, [r5, #24]
 801397a:	b913      	cbnz	r3, 8013982 <__swsetup_r+0x16>
 801397c:	4628      	mov	r0, r5
 801397e:	f000 f953 	bl	8013c28 <__sinit>
 8013982:	4b2e      	ldr	r3, [pc, #184]	; (8013a3c <__swsetup_r+0xd0>)
 8013984:	429c      	cmp	r4, r3
 8013986:	d10f      	bne.n	80139a8 <__swsetup_r+0x3c>
 8013988:	686c      	ldr	r4, [r5, #4]
 801398a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801398e:	b29a      	uxth	r2, r3
 8013990:	0715      	lsls	r5, r2, #28
 8013992:	d42c      	bmi.n	80139ee <__swsetup_r+0x82>
 8013994:	06d0      	lsls	r0, r2, #27
 8013996:	d411      	bmi.n	80139bc <__swsetup_r+0x50>
 8013998:	2209      	movs	r2, #9
 801399a:	6032      	str	r2, [r6, #0]
 801399c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139a0:	81a3      	strh	r3, [r4, #12]
 80139a2:	f04f 30ff 	mov.w	r0, #4294967295
 80139a6:	e03e      	b.n	8013a26 <__swsetup_r+0xba>
 80139a8:	4b25      	ldr	r3, [pc, #148]	; (8013a40 <__swsetup_r+0xd4>)
 80139aa:	429c      	cmp	r4, r3
 80139ac:	d101      	bne.n	80139b2 <__swsetup_r+0x46>
 80139ae:	68ac      	ldr	r4, [r5, #8]
 80139b0:	e7eb      	b.n	801398a <__swsetup_r+0x1e>
 80139b2:	4b24      	ldr	r3, [pc, #144]	; (8013a44 <__swsetup_r+0xd8>)
 80139b4:	429c      	cmp	r4, r3
 80139b6:	bf08      	it	eq
 80139b8:	68ec      	ldreq	r4, [r5, #12]
 80139ba:	e7e6      	b.n	801398a <__swsetup_r+0x1e>
 80139bc:	0751      	lsls	r1, r2, #29
 80139be:	d512      	bpl.n	80139e6 <__swsetup_r+0x7a>
 80139c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139c2:	b141      	cbz	r1, 80139d6 <__swsetup_r+0x6a>
 80139c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139c8:	4299      	cmp	r1, r3
 80139ca:	d002      	beq.n	80139d2 <__swsetup_r+0x66>
 80139cc:	4630      	mov	r0, r6
 80139ce:	f000 fa37 	bl	8013e40 <_free_r>
 80139d2:	2300      	movs	r3, #0
 80139d4:	6363      	str	r3, [r4, #52]	; 0x34
 80139d6:	89a3      	ldrh	r3, [r4, #12]
 80139d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80139dc:	81a3      	strh	r3, [r4, #12]
 80139de:	2300      	movs	r3, #0
 80139e0:	6063      	str	r3, [r4, #4]
 80139e2:	6923      	ldr	r3, [r4, #16]
 80139e4:	6023      	str	r3, [r4, #0]
 80139e6:	89a3      	ldrh	r3, [r4, #12]
 80139e8:	f043 0308 	orr.w	r3, r3, #8
 80139ec:	81a3      	strh	r3, [r4, #12]
 80139ee:	6923      	ldr	r3, [r4, #16]
 80139f0:	b94b      	cbnz	r3, 8013a06 <__swsetup_r+0x9a>
 80139f2:	89a3      	ldrh	r3, [r4, #12]
 80139f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139fc:	d003      	beq.n	8013a06 <__swsetup_r+0x9a>
 80139fe:	4621      	mov	r1, r4
 8013a00:	4630      	mov	r0, r6
 8013a02:	f000 f9c3 	bl	8013d8c <__smakebuf_r>
 8013a06:	89a2      	ldrh	r2, [r4, #12]
 8013a08:	f012 0301 	ands.w	r3, r2, #1
 8013a0c:	d00c      	beq.n	8013a28 <__swsetup_r+0xbc>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	60a3      	str	r3, [r4, #8]
 8013a12:	6963      	ldr	r3, [r4, #20]
 8013a14:	425b      	negs	r3, r3
 8013a16:	61a3      	str	r3, [r4, #24]
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	b953      	cbnz	r3, 8013a32 <__swsetup_r+0xc6>
 8013a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013a24:	d1ba      	bne.n	801399c <__swsetup_r+0x30>
 8013a26:	bd70      	pop	{r4, r5, r6, pc}
 8013a28:	0792      	lsls	r2, r2, #30
 8013a2a:	bf58      	it	pl
 8013a2c:	6963      	ldrpl	r3, [r4, #20]
 8013a2e:	60a3      	str	r3, [r4, #8]
 8013a30:	e7f2      	b.n	8013a18 <__swsetup_r+0xac>
 8013a32:	2000      	movs	r0, #0
 8013a34:	e7f7      	b.n	8013a26 <__swsetup_r+0xba>
 8013a36:	bf00      	nop
 8013a38:	20000494 	.word	0x20000494
 8013a3c:	08016df8 	.word	0x08016df8
 8013a40:	08016e18 	.word	0x08016e18
 8013a44:	08016dd8 	.word	0x08016dd8

08013a48 <__sflush_r>:
 8013a48:	898a      	ldrh	r2, [r1, #12]
 8013a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a4e:	4605      	mov	r5, r0
 8013a50:	0710      	lsls	r0, r2, #28
 8013a52:	460c      	mov	r4, r1
 8013a54:	d458      	bmi.n	8013b08 <__sflush_r+0xc0>
 8013a56:	684b      	ldr	r3, [r1, #4]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	dc05      	bgt.n	8013a68 <__sflush_r+0x20>
 8013a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	dc02      	bgt.n	8013a68 <__sflush_r+0x20>
 8013a62:	2000      	movs	r0, #0
 8013a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a6a:	2e00      	cmp	r6, #0
 8013a6c:	d0f9      	beq.n	8013a62 <__sflush_r+0x1a>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a74:	682f      	ldr	r7, [r5, #0]
 8013a76:	6a21      	ldr	r1, [r4, #32]
 8013a78:	602b      	str	r3, [r5, #0]
 8013a7a:	d032      	beq.n	8013ae2 <__sflush_r+0x9a>
 8013a7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	075a      	lsls	r2, r3, #29
 8013a82:	d505      	bpl.n	8013a90 <__sflush_r+0x48>
 8013a84:	6863      	ldr	r3, [r4, #4]
 8013a86:	1ac0      	subs	r0, r0, r3
 8013a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a8a:	b10b      	cbz	r3, 8013a90 <__sflush_r+0x48>
 8013a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a8e:	1ac0      	subs	r0, r0, r3
 8013a90:	2300      	movs	r3, #0
 8013a92:	4602      	mov	r2, r0
 8013a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a96:	6a21      	ldr	r1, [r4, #32]
 8013a98:	4628      	mov	r0, r5
 8013a9a:	47b0      	blx	r6
 8013a9c:	1c43      	adds	r3, r0, #1
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	d106      	bne.n	8013ab0 <__sflush_r+0x68>
 8013aa2:	6829      	ldr	r1, [r5, #0]
 8013aa4:	291d      	cmp	r1, #29
 8013aa6:	d848      	bhi.n	8013b3a <__sflush_r+0xf2>
 8013aa8:	4a29      	ldr	r2, [pc, #164]	; (8013b50 <__sflush_r+0x108>)
 8013aaa:	40ca      	lsrs	r2, r1
 8013aac:	07d6      	lsls	r6, r2, #31
 8013aae:	d544      	bpl.n	8013b3a <__sflush_r+0xf2>
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	6062      	str	r2, [r4, #4]
 8013ab4:	04d9      	lsls	r1, r3, #19
 8013ab6:	6922      	ldr	r2, [r4, #16]
 8013ab8:	6022      	str	r2, [r4, #0]
 8013aba:	d504      	bpl.n	8013ac6 <__sflush_r+0x7e>
 8013abc:	1c42      	adds	r2, r0, #1
 8013abe:	d101      	bne.n	8013ac4 <__sflush_r+0x7c>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	b903      	cbnz	r3, 8013ac6 <__sflush_r+0x7e>
 8013ac4:	6560      	str	r0, [r4, #84]	; 0x54
 8013ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ac8:	602f      	str	r7, [r5, #0]
 8013aca:	2900      	cmp	r1, #0
 8013acc:	d0c9      	beq.n	8013a62 <__sflush_r+0x1a>
 8013ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ad2:	4299      	cmp	r1, r3
 8013ad4:	d002      	beq.n	8013adc <__sflush_r+0x94>
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f000 f9b2 	bl	8013e40 <_free_r>
 8013adc:	2000      	movs	r0, #0
 8013ade:	6360      	str	r0, [r4, #52]	; 0x34
 8013ae0:	e7c0      	b.n	8013a64 <__sflush_r+0x1c>
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	47b0      	blx	r6
 8013ae8:	1c41      	adds	r1, r0, #1
 8013aea:	d1c8      	bne.n	8013a7e <__sflush_r+0x36>
 8013aec:	682b      	ldr	r3, [r5, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d0c5      	beq.n	8013a7e <__sflush_r+0x36>
 8013af2:	2b1d      	cmp	r3, #29
 8013af4:	d001      	beq.n	8013afa <__sflush_r+0xb2>
 8013af6:	2b16      	cmp	r3, #22
 8013af8:	d101      	bne.n	8013afe <__sflush_r+0xb6>
 8013afa:	602f      	str	r7, [r5, #0]
 8013afc:	e7b1      	b.n	8013a62 <__sflush_r+0x1a>
 8013afe:	89a3      	ldrh	r3, [r4, #12]
 8013b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b04:	81a3      	strh	r3, [r4, #12]
 8013b06:	e7ad      	b.n	8013a64 <__sflush_r+0x1c>
 8013b08:	690f      	ldr	r7, [r1, #16]
 8013b0a:	2f00      	cmp	r7, #0
 8013b0c:	d0a9      	beq.n	8013a62 <__sflush_r+0x1a>
 8013b0e:	0793      	lsls	r3, r2, #30
 8013b10:	680e      	ldr	r6, [r1, #0]
 8013b12:	bf08      	it	eq
 8013b14:	694b      	ldreq	r3, [r1, #20]
 8013b16:	600f      	str	r7, [r1, #0]
 8013b18:	bf18      	it	ne
 8013b1a:	2300      	movne	r3, #0
 8013b1c:	eba6 0807 	sub.w	r8, r6, r7
 8013b20:	608b      	str	r3, [r1, #8]
 8013b22:	f1b8 0f00 	cmp.w	r8, #0
 8013b26:	dd9c      	ble.n	8013a62 <__sflush_r+0x1a>
 8013b28:	4643      	mov	r3, r8
 8013b2a:	463a      	mov	r2, r7
 8013b2c:	6a21      	ldr	r1, [r4, #32]
 8013b2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b30:	4628      	mov	r0, r5
 8013b32:	47b0      	blx	r6
 8013b34:	2800      	cmp	r0, #0
 8013b36:	dc06      	bgt.n	8013b46 <__sflush_r+0xfe>
 8013b38:	89a3      	ldrh	r3, [r4, #12]
 8013b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b3e:	81a3      	strh	r3, [r4, #12]
 8013b40:	f04f 30ff 	mov.w	r0, #4294967295
 8013b44:	e78e      	b.n	8013a64 <__sflush_r+0x1c>
 8013b46:	4407      	add	r7, r0
 8013b48:	eba8 0800 	sub.w	r8, r8, r0
 8013b4c:	e7e9      	b.n	8013b22 <__sflush_r+0xda>
 8013b4e:	bf00      	nop
 8013b50:	20400001 	.word	0x20400001

08013b54 <_fflush_r>:
 8013b54:	b538      	push	{r3, r4, r5, lr}
 8013b56:	690b      	ldr	r3, [r1, #16]
 8013b58:	4605      	mov	r5, r0
 8013b5a:	460c      	mov	r4, r1
 8013b5c:	b1db      	cbz	r3, 8013b96 <_fflush_r+0x42>
 8013b5e:	b118      	cbz	r0, 8013b68 <_fflush_r+0x14>
 8013b60:	6983      	ldr	r3, [r0, #24]
 8013b62:	b90b      	cbnz	r3, 8013b68 <_fflush_r+0x14>
 8013b64:	f000 f860 	bl	8013c28 <__sinit>
 8013b68:	4b0c      	ldr	r3, [pc, #48]	; (8013b9c <_fflush_r+0x48>)
 8013b6a:	429c      	cmp	r4, r3
 8013b6c:	d109      	bne.n	8013b82 <_fflush_r+0x2e>
 8013b6e:	686c      	ldr	r4, [r5, #4]
 8013b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b74:	b17b      	cbz	r3, 8013b96 <_fflush_r+0x42>
 8013b76:	4621      	mov	r1, r4
 8013b78:	4628      	mov	r0, r5
 8013b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b7e:	f7ff bf63 	b.w	8013a48 <__sflush_r>
 8013b82:	4b07      	ldr	r3, [pc, #28]	; (8013ba0 <_fflush_r+0x4c>)
 8013b84:	429c      	cmp	r4, r3
 8013b86:	d101      	bne.n	8013b8c <_fflush_r+0x38>
 8013b88:	68ac      	ldr	r4, [r5, #8]
 8013b8a:	e7f1      	b.n	8013b70 <_fflush_r+0x1c>
 8013b8c:	4b05      	ldr	r3, [pc, #20]	; (8013ba4 <_fflush_r+0x50>)
 8013b8e:	429c      	cmp	r4, r3
 8013b90:	bf08      	it	eq
 8013b92:	68ec      	ldreq	r4, [r5, #12]
 8013b94:	e7ec      	b.n	8013b70 <_fflush_r+0x1c>
 8013b96:	2000      	movs	r0, #0
 8013b98:	bd38      	pop	{r3, r4, r5, pc}
 8013b9a:	bf00      	nop
 8013b9c:	08016df8 	.word	0x08016df8
 8013ba0:	08016e18 	.word	0x08016e18
 8013ba4:	08016dd8 	.word	0x08016dd8

08013ba8 <std>:
 8013ba8:	2300      	movs	r3, #0
 8013baa:	b510      	push	{r4, lr}
 8013bac:	4604      	mov	r4, r0
 8013bae:	e9c0 3300 	strd	r3, r3, [r0]
 8013bb2:	6083      	str	r3, [r0, #8]
 8013bb4:	8181      	strh	r1, [r0, #12]
 8013bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8013bb8:	81c2      	strh	r2, [r0, #14]
 8013bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013bbe:	6183      	str	r3, [r0, #24]
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	2208      	movs	r2, #8
 8013bc4:	305c      	adds	r0, #92	; 0x5c
 8013bc6:	f7ff fc89 	bl	80134dc <memset>
 8013bca:	4b05      	ldr	r3, [pc, #20]	; (8013be0 <std+0x38>)
 8013bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8013bce:	4b05      	ldr	r3, [pc, #20]	; (8013be4 <std+0x3c>)
 8013bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8013bd2:	4b05      	ldr	r3, [pc, #20]	; (8013be8 <std+0x40>)
 8013bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bd6:	4b05      	ldr	r3, [pc, #20]	; (8013bec <std+0x44>)
 8013bd8:	6224      	str	r4, [r4, #32]
 8013bda:	6323      	str	r3, [r4, #48]	; 0x30
 8013bdc:	bd10      	pop	{r4, pc}
 8013bde:	bf00      	nop
 8013be0:	080147e5 	.word	0x080147e5
 8013be4:	08014807 	.word	0x08014807
 8013be8:	0801483f 	.word	0x0801483f
 8013bec:	08014863 	.word	0x08014863

08013bf0 <_cleanup_r>:
 8013bf0:	4901      	ldr	r1, [pc, #4]	; (8013bf8 <_cleanup_r+0x8>)
 8013bf2:	f000 b885 	b.w	8013d00 <_fwalk_reent>
 8013bf6:	bf00      	nop
 8013bf8:	08013b55 	.word	0x08013b55

08013bfc <__sfmoreglue>:
 8013bfc:	b570      	push	{r4, r5, r6, lr}
 8013bfe:	1e4a      	subs	r2, r1, #1
 8013c00:	2568      	movs	r5, #104	; 0x68
 8013c02:	4355      	muls	r5, r2
 8013c04:	460e      	mov	r6, r1
 8013c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013c0a:	f000 f967 	bl	8013edc <_malloc_r>
 8013c0e:	4604      	mov	r4, r0
 8013c10:	b140      	cbz	r0, 8013c24 <__sfmoreglue+0x28>
 8013c12:	2100      	movs	r1, #0
 8013c14:	e9c0 1600 	strd	r1, r6, [r0]
 8013c18:	300c      	adds	r0, #12
 8013c1a:	60a0      	str	r0, [r4, #8]
 8013c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c20:	f7ff fc5c 	bl	80134dc <memset>
 8013c24:	4620      	mov	r0, r4
 8013c26:	bd70      	pop	{r4, r5, r6, pc}

08013c28 <__sinit>:
 8013c28:	6983      	ldr	r3, [r0, #24]
 8013c2a:	b510      	push	{r4, lr}
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	bb33      	cbnz	r3, 8013c7e <__sinit+0x56>
 8013c30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013c34:	6503      	str	r3, [r0, #80]	; 0x50
 8013c36:	4b12      	ldr	r3, [pc, #72]	; (8013c80 <__sinit+0x58>)
 8013c38:	4a12      	ldr	r2, [pc, #72]	; (8013c84 <__sinit+0x5c>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	6282      	str	r2, [r0, #40]	; 0x28
 8013c3e:	4298      	cmp	r0, r3
 8013c40:	bf04      	itt	eq
 8013c42:	2301      	moveq	r3, #1
 8013c44:	6183      	streq	r3, [r0, #24]
 8013c46:	f000 f81f 	bl	8013c88 <__sfp>
 8013c4a:	6060      	str	r0, [r4, #4]
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f000 f81b 	bl	8013c88 <__sfp>
 8013c52:	60a0      	str	r0, [r4, #8]
 8013c54:	4620      	mov	r0, r4
 8013c56:	f000 f817 	bl	8013c88 <__sfp>
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	60e0      	str	r0, [r4, #12]
 8013c5e:	2104      	movs	r1, #4
 8013c60:	6860      	ldr	r0, [r4, #4]
 8013c62:	f7ff ffa1 	bl	8013ba8 <std>
 8013c66:	2201      	movs	r2, #1
 8013c68:	2109      	movs	r1, #9
 8013c6a:	68a0      	ldr	r0, [r4, #8]
 8013c6c:	f7ff ff9c 	bl	8013ba8 <std>
 8013c70:	2202      	movs	r2, #2
 8013c72:	2112      	movs	r1, #18
 8013c74:	68e0      	ldr	r0, [r4, #12]
 8013c76:	f7ff ff97 	bl	8013ba8 <std>
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	61a3      	str	r3, [r4, #24]
 8013c7e:	bd10      	pop	{r4, pc}
 8013c80:	08016dd4 	.word	0x08016dd4
 8013c84:	08013bf1 	.word	0x08013bf1

08013c88 <__sfp>:
 8013c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c8a:	4b1b      	ldr	r3, [pc, #108]	; (8013cf8 <__sfp+0x70>)
 8013c8c:	681e      	ldr	r6, [r3, #0]
 8013c8e:	69b3      	ldr	r3, [r6, #24]
 8013c90:	4607      	mov	r7, r0
 8013c92:	b913      	cbnz	r3, 8013c9a <__sfp+0x12>
 8013c94:	4630      	mov	r0, r6
 8013c96:	f7ff ffc7 	bl	8013c28 <__sinit>
 8013c9a:	3648      	adds	r6, #72	; 0x48
 8013c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	d503      	bpl.n	8013cac <__sfp+0x24>
 8013ca4:	6833      	ldr	r3, [r6, #0]
 8013ca6:	b133      	cbz	r3, 8013cb6 <__sfp+0x2e>
 8013ca8:	6836      	ldr	r6, [r6, #0]
 8013caa:	e7f7      	b.n	8013c9c <__sfp+0x14>
 8013cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013cb0:	b16d      	cbz	r5, 8013cce <__sfp+0x46>
 8013cb2:	3468      	adds	r4, #104	; 0x68
 8013cb4:	e7f4      	b.n	8013ca0 <__sfp+0x18>
 8013cb6:	2104      	movs	r1, #4
 8013cb8:	4638      	mov	r0, r7
 8013cba:	f7ff ff9f 	bl	8013bfc <__sfmoreglue>
 8013cbe:	6030      	str	r0, [r6, #0]
 8013cc0:	2800      	cmp	r0, #0
 8013cc2:	d1f1      	bne.n	8013ca8 <__sfp+0x20>
 8013cc4:	230c      	movs	r3, #12
 8013cc6:	603b      	str	r3, [r7, #0]
 8013cc8:	4604      	mov	r4, r0
 8013cca:	4620      	mov	r0, r4
 8013ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cce:	4b0b      	ldr	r3, [pc, #44]	; (8013cfc <__sfp+0x74>)
 8013cd0:	6665      	str	r5, [r4, #100]	; 0x64
 8013cd2:	e9c4 5500 	strd	r5, r5, [r4]
 8013cd6:	60a5      	str	r5, [r4, #8]
 8013cd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013cdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013ce0:	2208      	movs	r2, #8
 8013ce2:	4629      	mov	r1, r5
 8013ce4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ce8:	f7ff fbf8 	bl	80134dc <memset>
 8013cec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013cf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013cf4:	e7e9      	b.n	8013cca <__sfp+0x42>
 8013cf6:	bf00      	nop
 8013cf8:	08016dd4 	.word	0x08016dd4
 8013cfc:	ffff0001 	.word	0xffff0001

08013d00 <_fwalk_reent>:
 8013d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d04:	4680      	mov	r8, r0
 8013d06:	4689      	mov	r9, r1
 8013d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d0c:	2600      	movs	r6, #0
 8013d0e:	b914      	cbnz	r4, 8013d16 <_fwalk_reent+0x16>
 8013d10:	4630      	mov	r0, r6
 8013d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013d1a:	3f01      	subs	r7, #1
 8013d1c:	d501      	bpl.n	8013d22 <_fwalk_reent+0x22>
 8013d1e:	6824      	ldr	r4, [r4, #0]
 8013d20:	e7f5      	b.n	8013d0e <_fwalk_reent+0xe>
 8013d22:	89ab      	ldrh	r3, [r5, #12]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d907      	bls.n	8013d38 <_fwalk_reent+0x38>
 8013d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	d003      	beq.n	8013d38 <_fwalk_reent+0x38>
 8013d30:	4629      	mov	r1, r5
 8013d32:	4640      	mov	r0, r8
 8013d34:	47c8      	blx	r9
 8013d36:	4306      	orrs	r6, r0
 8013d38:	3568      	adds	r5, #104	; 0x68
 8013d3a:	e7ee      	b.n	8013d1a <_fwalk_reent+0x1a>

08013d3c <__locale_ctype_ptr_l>:
 8013d3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013d40:	4770      	bx	lr

08013d42 <__swhatbuf_r>:
 8013d42:	b570      	push	{r4, r5, r6, lr}
 8013d44:	460e      	mov	r6, r1
 8013d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4a:	2900      	cmp	r1, #0
 8013d4c:	b096      	sub	sp, #88	; 0x58
 8013d4e:	4614      	mov	r4, r2
 8013d50:	461d      	mov	r5, r3
 8013d52:	da07      	bge.n	8013d64 <__swhatbuf_r+0x22>
 8013d54:	2300      	movs	r3, #0
 8013d56:	602b      	str	r3, [r5, #0]
 8013d58:	89b3      	ldrh	r3, [r6, #12]
 8013d5a:	061a      	lsls	r2, r3, #24
 8013d5c:	d410      	bmi.n	8013d80 <__swhatbuf_r+0x3e>
 8013d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d62:	e00e      	b.n	8013d82 <__swhatbuf_r+0x40>
 8013d64:	466a      	mov	r2, sp
 8013d66:	f000 fdaf 	bl	80148c8 <_fstat_r>
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	dbf2      	blt.n	8013d54 <__swhatbuf_r+0x12>
 8013d6e:	9a01      	ldr	r2, [sp, #4]
 8013d70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d78:	425a      	negs	r2, r3
 8013d7a:	415a      	adcs	r2, r3
 8013d7c:	602a      	str	r2, [r5, #0]
 8013d7e:	e7ee      	b.n	8013d5e <__swhatbuf_r+0x1c>
 8013d80:	2340      	movs	r3, #64	; 0x40
 8013d82:	2000      	movs	r0, #0
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	b016      	add	sp, #88	; 0x58
 8013d88:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d8c <__smakebuf_r>:
 8013d8c:	898b      	ldrh	r3, [r1, #12]
 8013d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d90:	079d      	lsls	r5, r3, #30
 8013d92:	4606      	mov	r6, r0
 8013d94:	460c      	mov	r4, r1
 8013d96:	d507      	bpl.n	8013da8 <__smakebuf_r+0x1c>
 8013d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d9c:	6023      	str	r3, [r4, #0]
 8013d9e:	6123      	str	r3, [r4, #16]
 8013da0:	2301      	movs	r3, #1
 8013da2:	6163      	str	r3, [r4, #20]
 8013da4:	b002      	add	sp, #8
 8013da6:	bd70      	pop	{r4, r5, r6, pc}
 8013da8:	ab01      	add	r3, sp, #4
 8013daa:	466a      	mov	r2, sp
 8013dac:	f7ff ffc9 	bl	8013d42 <__swhatbuf_r>
 8013db0:	9900      	ldr	r1, [sp, #0]
 8013db2:	4605      	mov	r5, r0
 8013db4:	4630      	mov	r0, r6
 8013db6:	f000 f891 	bl	8013edc <_malloc_r>
 8013dba:	b948      	cbnz	r0, 8013dd0 <__smakebuf_r+0x44>
 8013dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dc0:	059a      	lsls	r2, r3, #22
 8013dc2:	d4ef      	bmi.n	8013da4 <__smakebuf_r+0x18>
 8013dc4:	f023 0303 	bic.w	r3, r3, #3
 8013dc8:	f043 0302 	orr.w	r3, r3, #2
 8013dcc:	81a3      	strh	r3, [r4, #12]
 8013dce:	e7e3      	b.n	8013d98 <__smakebuf_r+0xc>
 8013dd0:	4b0d      	ldr	r3, [pc, #52]	; (8013e08 <__smakebuf_r+0x7c>)
 8013dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8013dd4:	89a3      	ldrh	r3, [r4, #12]
 8013dd6:	6020      	str	r0, [r4, #0]
 8013dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ddc:	81a3      	strh	r3, [r4, #12]
 8013dde:	9b00      	ldr	r3, [sp, #0]
 8013de0:	6163      	str	r3, [r4, #20]
 8013de2:	9b01      	ldr	r3, [sp, #4]
 8013de4:	6120      	str	r0, [r4, #16]
 8013de6:	b15b      	cbz	r3, 8013e00 <__smakebuf_r+0x74>
 8013de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dec:	4630      	mov	r0, r6
 8013dee:	f000 fd7d 	bl	80148ec <_isatty_r>
 8013df2:	b128      	cbz	r0, 8013e00 <__smakebuf_r+0x74>
 8013df4:	89a3      	ldrh	r3, [r4, #12]
 8013df6:	f023 0303 	bic.w	r3, r3, #3
 8013dfa:	f043 0301 	orr.w	r3, r3, #1
 8013dfe:	81a3      	strh	r3, [r4, #12]
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	431d      	orrs	r5, r3
 8013e04:	81a5      	strh	r5, [r4, #12]
 8013e06:	e7cd      	b.n	8013da4 <__smakebuf_r+0x18>
 8013e08:	08013bf1 	.word	0x08013bf1

08013e0c <malloc>:
 8013e0c:	4b02      	ldr	r3, [pc, #8]	; (8013e18 <malloc+0xc>)
 8013e0e:	4601      	mov	r1, r0
 8013e10:	6818      	ldr	r0, [r3, #0]
 8013e12:	f000 b863 	b.w	8013edc <_malloc_r>
 8013e16:	bf00      	nop
 8013e18:	20000494 	.word	0x20000494

08013e1c <__ascii_mbtowc>:
 8013e1c:	b082      	sub	sp, #8
 8013e1e:	b901      	cbnz	r1, 8013e22 <__ascii_mbtowc+0x6>
 8013e20:	a901      	add	r1, sp, #4
 8013e22:	b142      	cbz	r2, 8013e36 <__ascii_mbtowc+0x1a>
 8013e24:	b14b      	cbz	r3, 8013e3a <__ascii_mbtowc+0x1e>
 8013e26:	7813      	ldrb	r3, [r2, #0]
 8013e28:	600b      	str	r3, [r1, #0]
 8013e2a:	7812      	ldrb	r2, [r2, #0]
 8013e2c:	1c10      	adds	r0, r2, #0
 8013e2e:	bf18      	it	ne
 8013e30:	2001      	movne	r0, #1
 8013e32:	b002      	add	sp, #8
 8013e34:	4770      	bx	lr
 8013e36:	4610      	mov	r0, r2
 8013e38:	e7fb      	b.n	8013e32 <__ascii_mbtowc+0x16>
 8013e3a:	f06f 0001 	mvn.w	r0, #1
 8013e3e:	e7f8      	b.n	8013e32 <__ascii_mbtowc+0x16>

08013e40 <_free_r>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4605      	mov	r5, r0
 8013e44:	2900      	cmp	r1, #0
 8013e46:	d045      	beq.n	8013ed4 <_free_r+0x94>
 8013e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e4c:	1f0c      	subs	r4, r1, #4
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	bfb8      	it	lt
 8013e52:	18e4      	addlt	r4, r4, r3
 8013e54:	f000 fd85 	bl	8014962 <__malloc_lock>
 8013e58:	4a1f      	ldr	r2, [pc, #124]	; (8013ed8 <_free_r+0x98>)
 8013e5a:	6813      	ldr	r3, [r2, #0]
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	b933      	cbnz	r3, 8013e6e <_free_r+0x2e>
 8013e60:	6063      	str	r3, [r4, #4]
 8013e62:	6014      	str	r4, [r2, #0]
 8013e64:	4628      	mov	r0, r5
 8013e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e6a:	f000 bd7b 	b.w	8014964 <__malloc_unlock>
 8013e6e:	42a3      	cmp	r3, r4
 8013e70:	d90c      	bls.n	8013e8c <_free_r+0x4c>
 8013e72:	6821      	ldr	r1, [r4, #0]
 8013e74:	1862      	adds	r2, r4, r1
 8013e76:	4293      	cmp	r3, r2
 8013e78:	bf04      	itt	eq
 8013e7a:	681a      	ldreq	r2, [r3, #0]
 8013e7c:	685b      	ldreq	r3, [r3, #4]
 8013e7e:	6063      	str	r3, [r4, #4]
 8013e80:	bf04      	itt	eq
 8013e82:	1852      	addeq	r2, r2, r1
 8013e84:	6022      	streq	r2, [r4, #0]
 8013e86:	6004      	str	r4, [r0, #0]
 8013e88:	e7ec      	b.n	8013e64 <_free_r+0x24>
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	685a      	ldr	r2, [r3, #4]
 8013e8e:	b10a      	cbz	r2, 8013e94 <_free_r+0x54>
 8013e90:	42a2      	cmp	r2, r4
 8013e92:	d9fa      	bls.n	8013e8a <_free_r+0x4a>
 8013e94:	6819      	ldr	r1, [r3, #0]
 8013e96:	1858      	adds	r0, r3, r1
 8013e98:	42a0      	cmp	r0, r4
 8013e9a:	d10b      	bne.n	8013eb4 <_free_r+0x74>
 8013e9c:	6820      	ldr	r0, [r4, #0]
 8013e9e:	4401      	add	r1, r0
 8013ea0:	1858      	adds	r0, r3, r1
 8013ea2:	4282      	cmp	r2, r0
 8013ea4:	6019      	str	r1, [r3, #0]
 8013ea6:	d1dd      	bne.n	8013e64 <_free_r+0x24>
 8013ea8:	6810      	ldr	r0, [r2, #0]
 8013eaa:	6852      	ldr	r2, [r2, #4]
 8013eac:	605a      	str	r2, [r3, #4]
 8013eae:	4401      	add	r1, r0
 8013eb0:	6019      	str	r1, [r3, #0]
 8013eb2:	e7d7      	b.n	8013e64 <_free_r+0x24>
 8013eb4:	d902      	bls.n	8013ebc <_free_r+0x7c>
 8013eb6:	230c      	movs	r3, #12
 8013eb8:	602b      	str	r3, [r5, #0]
 8013eba:	e7d3      	b.n	8013e64 <_free_r+0x24>
 8013ebc:	6820      	ldr	r0, [r4, #0]
 8013ebe:	1821      	adds	r1, r4, r0
 8013ec0:	428a      	cmp	r2, r1
 8013ec2:	bf04      	itt	eq
 8013ec4:	6811      	ldreq	r1, [r2, #0]
 8013ec6:	6852      	ldreq	r2, [r2, #4]
 8013ec8:	6062      	str	r2, [r4, #4]
 8013eca:	bf04      	itt	eq
 8013ecc:	1809      	addeq	r1, r1, r0
 8013ece:	6021      	streq	r1, [r4, #0]
 8013ed0:	605c      	str	r4, [r3, #4]
 8013ed2:	e7c7      	b.n	8013e64 <_free_r+0x24>
 8013ed4:	bd38      	pop	{r3, r4, r5, pc}
 8013ed6:	bf00      	nop
 8013ed8:	200037f4 	.word	0x200037f4

08013edc <_malloc_r>:
 8013edc:	b570      	push	{r4, r5, r6, lr}
 8013ede:	1ccd      	adds	r5, r1, #3
 8013ee0:	f025 0503 	bic.w	r5, r5, #3
 8013ee4:	3508      	adds	r5, #8
 8013ee6:	2d0c      	cmp	r5, #12
 8013ee8:	bf38      	it	cc
 8013eea:	250c      	movcc	r5, #12
 8013eec:	2d00      	cmp	r5, #0
 8013eee:	4606      	mov	r6, r0
 8013ef0:	db01      	blt.n	8013ef6 <_malloc_r+0x1a>
 8013ef2:	42a9      	cmp	r1, r5
 8013ef4:	d903      	bls.n	8013efe <_malloc_r+0x22>
 8013ef6:	230c      	movs	r3, #12
 8013ef8:	6033      	str	r3, [r6, #0]
 8013efa:	2000      	movs	r0, #0
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
 8013efe:	f000 fd30 	bl	8014962 <__malloc_lock>
 8013f02:	4a21      	ldr	r2, [pc, #132]	; (8013f88 <_malloc_r+0xac>)
 8013f04:	6814      	ldr	r4, [r2, #0]
 8013f06:	4621      	mov	r1, r4
 8013f08:	b991      	cbnz	r1, 8013f30 <_malloc_r+0x54>
 8013f0a:	4c20      	ldr	r4, [pc, #128]	; (8013f8c <_malloc_r+0xb0>)
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	b91b      	cbnz	r3, 8013f18 <_malloc_r+0x3c>
 8013f10:	4630      	mov	r0, r6
 8013f12:	f000 fc57 	bl	80147c4 <_sbrk_r>
 8013f16:	6020      	str	r0, [r4, #0]
 8013f18:	4629      	mov	r1, r5
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f000 fc52 	bl	80147c4 <_sbrk_r>
 8013f20:	1c43      	adds	r3, r0, #1
 8013f22:	d124      	bne.n	8013f6e <_malloc_r+0x92>
 8013f24:	230c      	movs	r3, #12
 8013f26:	6033      	str	r3, [r6, #0]
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f000 fd1b 	bl	8014964 <__malloc_unlock>
 8013f2e:	e7e4      	b.n	8013efa <_malloc_r+0x1e>
 8013f30:	680b      	ldr	r3, [r1, #0]
 8013f32:	1b5b      	subs	r3, r3, r5
 8013f34:	d418      	bmi.n	8013f68 <_malloc_r+0x8c>
 8013f36:	2b0b      	cmp	r3, #11
 8013f38:	d90f      	bls.n	8013f5a <_malloc_r+0x7e>
 8013f3a:	600b      	str	r3, [r1, #0]
 8013f3c:	50cd      	str	r5, [r1, r3]
 8013f3e:	18cc      	adds	r4, r1, r3
 8013f40:	4630      	mov	r0, r6
 8013f42:	f000 fd0f 	bl	8014964 <__malloc_unlock>
 8013f46:	f104 000b 	add.w	r0, r4, #11
 8013f4a:	1d23      	adds	r3, r4, #4
 8013f4c:	f020 0007 	bic.w	r0, r0, #7
 8013f50:	1ac3      	subs	r3, r0, r3
 8013f52:	d0d3      	beq.n	8013efc <_malloc_r+0x20>
 8013f54:	425a      	negs	r2, r3
 8013f56:	50e2      	str	r2, [r4, r3]
 8013f58:	e7d0      	b.n	8013efc <_malloc_r+0x20>
 8013f5a:	428c      	cmp	r4, r1
 8013f5c:	684b      	ldr	r3, [r1, #4]
 8013f5e:	bf16      	itet	ne
 8013f60:	6063      	strne	r3, [r4, #4]
 8013f62:	6013      	streq	r3, [r2, #0]
 8013f64:	460c      	movne	r4, r1
 8013f66:	e7eb      	b.n	8013f40 <_malloc_r+0x64>
 8013f68:	460c      	mov	r4, r1
 8013f6a:	6849      	ldr	r1, [r1, #4]
 8013f6c:	e7cc      	b.n	8013f08 <_malloc_r+0x2c>
 8013f6e:	1cc4      	adds	r4, r0, #3
 8013f70:	f024 0403 	bic.w	r4, r4, #3
 8013f74:	42a0      	cmp	r0, r4
 8013f76:	d005      	beq.n	8013f84 <_malloc_r+0xa8>
 8013f78:	1a21      	subs	r1, r4, r0
 8013f7a:	4630      	mov	r0, r6
 8013f7c:	f000 fc22 	bl	80147c4 <_sbrk_r>
 8013f80:	3001      	adds	r0, #1
 8013f82:	d0cf      	beq.n	8013f24 <_malloc_r+0x48>
 8013f84:	6025      	str	r5, [r4, #0]
 8013f86:	e7db      	b.n	8013f40 <_malloc_r+0x64>
 8013f88:	200037f4 	.word	0x200037f4
 8013f8c:	200037f8 	.word	0x200037f8

08013f90 <__ssputs_r>:
 8013f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f94:	688e      	ldr	r6, [r1, #8]
 8013f96:	429e      	cmp	r6, r3
 8013f98:	4682      	mov	sl, r0
 8013f9a:	460c      	mov	r4, r1
 8013f9c:	4690      	mov	r8, r2
 8013f9e:	4699      	mov	r9, r3
 8013fa0:	d837      	bhi.n	8014012 <__ssputs_r+0x82>
 8013fa2:	898a      	ldrh	r2, [r1, #12]
 8013fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013fa8:	d031      	beq.n	801400e <__ssputs_r+0x7e>
 8013faa:	6825      	ldr	r5, [r4, #0]
 8013fac:	6909      	ldr	r1, [r1, #16]
 8013fae:	1a6f      	subs	r7, r5, r1
 8013fb0:	6965      	ldr	r5, [r4, #20]
 8013fb2:	2302      	movs	r3, #2
 8013fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8013fbc:	f109 0301 	add.w	r3, r9, #1
 8013fc0:	443b      	add	r3, r7
 8013fc2:	429d      	cmp	r5, r3
 8013fc4:	bf38      	it	cc
 8013fc6:	461d      	movcc	r5, r3
 8013fc8:	0553      	lsls	r3, r2, #21
 8013fca:	d530      	bpl.n	801402e <__ssputs_r+0x9e>
 8013fcc:	4629      	mov	r1, r5
 8013fce:	f7ff ff85 	bl	8013edc <_malloc_r>
 8013fd2:	4606      	mov	r6, r0
 8013fd4:	b950      	cbnz	r0, 8013fec <__ssputs_r+0x5c>
 8013fd6:	230c      	movs	r3, #12
 8013fd8:	f8ca 3000 	str.w	r3, [sl]
 8013fdc:	89a3      	ldrh	r3, [r4, #12]
 8013fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fe2:	81a3      	strh	r3, [r4, #12]
 8013fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fec:	463a      	mov	r2, r7
 8013fee:	6921      	ldr	r1, [r4, #16]
 8013ff0:	f7ff fa69 	bl	80134c6 <memcpy>
 8013ff4:	89a3      	ldrh	r3, [r4, #12]
 8013ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ffe:	81a3      	strh	r3, [r4, #12]
 8014000:	6126      	str	r6, [r4, #16]
 8014002:	6165      	str	r5, [r4, #20]
 8014004:	443e      	add	r6, r7
 8014006:	1bed      	subs	r5, r5, r7
 8014008:	6026      	str	r6, [r4, #0]
 801400a:	60a5      	str	r5, [r4, #8]
 801400c:	464e      	mov	r6, r9
 801400e:	454e      	cmp	r6, r9
 8014010:	d900      	bls.n	8014014 <__ssputs_r+0x84>
 8014012:	464e      	mov	r6, r9
 8014014:	4632      	mov	r2, r6
 8014016:	4641      	mov	r1, r8
 8014018:	6820      	ldr	r0, [r4, #0]
 801401a:	f000 fc89 	bl	8014930 <memmove>
 801401e:	68a3      	ldr	r3, [r4, #8]
 8014020:	1b9b      	subs	r3, r3, r6
 8014022:	60a3      	str	r3, [r4, #8]
 8014024:	6823      	ldr	r3, [r4, #0]
 8014026:	441e      	add	r6, r3
 8014028:	6026      	str	r6, [r4, #0]
 801402a:	2000      	movs	r0, #0
 801402c:	e7dc      	b.n	8013fe8 <__ssputs_r+0x58>
 801402e:	462a      	mov	r2, r5
 8014030:	f000 fc99 	bl	8014966 <_realloc_r>
 8014034:	4606      	mov	r6, r0
 8014036:	2800      	cmp	r0, #0
 8014038:	d1e2      	bne.n	8014000 <__ssputs_r+0x70>
 801403a:	6921      	ldr	r1, [r4, #16]
 801403c:	4650      	mov	r0, sl
 801403e:	f7ff feff 	bl	8013e40 <_free_r>
 8014042:	e7c8      	b.n	8013fd6 <__ssputs_r+0x46>

08014044 <_svfiprintf_r>:
 8014044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014048:	461d      	mov	r5, r3
 801404a:	898b      	ldrh	r3, [r1, #12]
 801404c:	061f      	lsls	r7, r3, #24
 801404e:	b09d      	sub	sp, #116	; 0x74
 8014050:	4680      	mov	r8, r0
 8014052:	460c      	mov	r4, r1
 8014054:	4616      	mov	r6, r2
 8014056:	d50f      	bpl.n	8014078 <_svfiprintf_r+0x34>
 8014058:	690b      	ldr	r3, [r1, #16]
 801405a:	b96b      	cbnz	r3, 8014078 <_svfiprintf_r+0x34>
 801405c:	2140      	movs	r1, #64	; 0x40
 801405e:	f7ff ff3d 	bl	8013edc <_malloc_r>
 8014062:	6020      	str	r0, [r4, #0]
 8014064:	6120      	str	r0, [r4, #16]
 8014066:	b928      	cbnz	r0, 8014074 <_svfiprintf_r+0x30>
 8014068:	230c      	movs	r3, #12
 801406a:	f8c8 3000 	str.w	r3, [r8]
 801406e:	f04f 30ff 	mov.w	r0, #4294967295
 8014072:	e0c8      	b.n	8014206 <_svfiprintf_r+0x1c2>
 8014074:	2340      	movs	r3, #64	; 0x40
 8014076:	6163      	str	r3, [r4, #20]
 8014078:	2300      	movs	r3, #0
 801407a:	9309      	str	r3, [sp, #36]	; 0x24
 801407c:	2320      	movs	r3, #32
 801407e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014082:	2330      	movs	r3, #48	; 0x30
 8014084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014088:	9503      	str	r5, [sp, #12]
 801408a:	f04f 0b01 	mov.w	fp, #1
 801408e:	4637      	mov	r7, r6
 8014090:	463d      	mov	r5, r7
 8014092:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014096:	b10b      	cbz	r3, 801409c <_svfiprintf_r+0x58>
 8014098:	2b25      	cmp	r3, #37	; 0x25
 801409a:	d13e      	bne.n	801411a <_svfiprintf_r+0xd6>
 801409c:	ebb7 0a06 	subs.w	sl, r7, r6
 80140a0:	d00b      	beq.n	80140ba <_svfiprintf_r+0x76>
 80140a2:	4653      	mov	r3, sl
 80140a4:	4632      	mov	r2, r6
 80140a6:	4621      	mov	r1, r4
 80140a8:	4640      	mov	r0, r8
 80140aa:	f7ff ff71 	bl	8013f90 <__ssputs_r>
 80140ae:	3001      	adds	r0, #1
 80140b0:	f000 80a4 	beq.w	80141fc <_svfiprintf_r+0x1b8>
 80140b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b6:	4453      	add	r3, sl
 80140b8:	9309      	str	r3, [sp, #36]	; 0x24
 80140ba:	783b      	ldrb	r3, [r7, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	f000 809d 	beq.w	80141fc <_svfiprintf_r+0x1b8>
 80140c2:	2300      	movs	r3, #0
 80140c4:	f04f 32ff 	mov.w	r2, #4294967295
 80140c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140cc:	9304      	str	r3, [sp, #16]
 80140ce:	9307      	str	r3, [sp, #28]
 80140d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140d4:	931a      	str	r3, [sp, #104]	; 0x68
 80140d6:	462f      	mov	r7, r5
 80140d8:	2205      	movs	r2, #5
 80140da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80140de:	4850      	ldr	r0, [pc, #320]	; (8014220 <_svfiprintf_r+0x1dc>)
 80140e0:	f7ec f87e 	bl	80001e0 <memchr>
 80140e4:	9b04      	ldr	r3, [sp, #16]
 80140e6:	b9d0      	cbnz	r0, 801411e <_svfiprintf_r+0xda>
 80140e8:	06d9      	lsls	r1, r3, #27
 80140ea:	bf44      	itt	mi
 80140ec:	2220      	movmi	r2, #32
 80140ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140f2:	071a      	lsls	r2, r3, #28
 80140f4:	bf44      	itt	mi
 80140f6:	222b      	movmi	r2, #43	; 0x2b
 80140f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140fc:	782a      	ldrb	r2, [r5, #0]
 80140fe:	2a2a      	cmp	r2, #42	; 0x2a
 8014100:	d015      	beq.n	801412e <_svfiprintf_r+0xea>
 8014102:	9a07      	ldr	r2, [sp, #28]
 8014104:	462f      	mov	r7, r5
 8014106:	2000      	movs	r0, #0
 8014108:	250a      	movs	r5, #10
 801410a:	4639      	mov	r1, r7
 801410c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014110:	3b30      	subs	r3, #48	; 0x30
 8014112:	2b09      	cmp	r3, #9
 8014114:	d94d      	bls.n	80141b2 <_svfiprintf_r+0x16e>
 8014116:	b1b8      	cbz	r0, 8014148 <_svfiprintf_r+0x104>
 8014118:	e00f      	b.n	801413a <_svfiprintf_r+0xf6>
 801411a:	462f      	mov	r7, r5
 801411c:	e7b8      	b.n	8014090 <_svfiprintf_r+0x4c>
 801411e:	4a40      	ldr	r2, [pc, #256]	; (8014220 <_svfiprintf_r+0x1dc>)
 8014120:	1a80      	subs	r0, r0, r2
 8014122:	fa0b f000 	lsl.w	r0, fp, r0
 8014126:	4318      	orrs	r0, r3
 8014128:	9004      	str	r0, [sp, #16]
 801412a:	463d      	mov	r5, r7
 801412c:	e7d3      	b.n	80140d6 <_svfiprintf_r+0x92>
 801412e:	9a03      	ldr	r2, [sp, #12]
 8014130:	1d11      	adds	r1, r2, #4
 8014132:	6812      	ldr	r2, [r2, #0]
 8014134:	9103      	str	r1, [sp, #12]
 8014136:	2a00      	cmp	r2, #0
 8014138:	db01      	blt.n	801413e <_svfiprintf_r+0xfa>
 801413a:	9207      	str	r2, [sp, #28]
 801413c:	e004      	b.n	8014148 <_svfiprintf_r+0x104>
 801413e:	4252      	negs	r2, r2
 8014140:	f043 0302 	orr.w	r3, r3, #2
 8014144:	9207      	str	r2, [sp, #28]
 8014146:	9304      	str	r3, [sp, #16]
 8014148:	783b      	ldrb	r3, [r7, #0]
 801414a:	2b2e      	cmp	r3, #46	; 0x2e
 801414c:	d10c      	bne.n	8014168 <_svfiprintf_r+0x124>
 801414e:	787b      	ldrb	r3, [r7, #1]
 8014150:	2b2a      	cmp	r3, #42	; 0x2a
 8014152:	d133      	bne.n	80141bc <_svfiprintf_r+0x178>
 8014154:	9b03      	ldr	r3, [sp, #12]
 8014156:	1d1a      	adds	r2, r3, #4
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	9203      	str	r2, [sp, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	bfb8      	it	lt
 8014160:	f04f 33ff 	movlt.w	r3, #4294967295
 8014164:	3702      	adds	r7, #2
 8014166:	9305      	str	r3, [sp, #20]
 8014168:	4d2e      	ldr	r5, [pc, #184]	; (8014224 <_svfiprintf_r+0x1e0>)
 801416a:	7839      	ldrb	r1, [r7, #0]
 801416c:	2203      	movs	r2, #3
 801416e:	4628      	mov	r0, r5
 8014170:	f7ec f836 	bl	80001e0 <memchr>
 8014174:	b138      	cbz	r0, 8014186 <_svfiprintf_r+0x142>
 8014176:	2340      	movs	r3, #64	; 0x40
 8014178:	1b40      	subs	r0, r0, r5
 801417a:	fa03 f000 	lsl.w	r0, r3, r0
 801417e:	9b04      	ldr	r3, [sp, #16]
 8014180:	4303      	orrs	r3, r0
 8014182:	3701      	adds	r7, #1
 8014184:	9304      	str	r3, [sp, #16]
 8014186:	7839      	ldrb	r1, [r7, #0]
 8014188:	4827      	ldr	r0, [pc, #156]	; (8014228 <_svfiprintf_r+0x1e4>)
 801418a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801418e:	2206      	movs	r2, #6
 8014190:	1c7e      	adds	r6, r7, #1
 8014192:	f7ec f825 	bl	80001e0 <memchr>
 8014196:	2800      	cmp	r0, #0
 8014198:	d038      	beq.n	801420c <_svfiprintf_r+0x1c8>
 801419a:	4b24      	ldr	r3, [pc, #144]	; (801422c <_svfiprintf_r+0x1e8>)
 801419c:	bb13      	cbnz	r3, 80141e4 <_svfiprintf_r+0x1a0>
 801419e:	9b03      	ldr	r3, [sp, #12]
 80141a0:	3307      	adds	r3, #7
 80141a2:	f023 0307 	bic.w	r3, r3, #7
 80141a6:	3308      	adds	r3, #8
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ac:	444b      	add	r3, r9
 80141ae:	9309      	str	r3, [sp, #36]	; 0x24
 80141b0:	e76d      	b.n	801408e <_svfiprintf_r+0x4a>
 80141b2:	fb05 3202 	mla	r2, r5, r2, r3
 80141b6:	2001      	movs	r0, #1
 80141b8:	460f      	mov	r7, r1
 80141ba:	e7a6      	b.n	801410a <_svfiprintf_r+0xc6>
 80141bc:	2300      	movs	r3, #0
 80141be:	3701      	adds	r7, #1
 80141c0:	9305      	str	r3, [sp, #20]
 80141c2:	4619      	mov	r1, r3
 80141c4:	250a      	movs	r5, #10
 80141c6:	4638      	mov	r0, r7
 80141c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141cc:	3a30      	subs	r2, #48	; 0x30
 80141ce:	2a09      	cmp	r2, #9
 80141d0:	d903      	bls.n	80141da <_svfiprintf_r+0x196>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d0c8      	beq.n	8014168 <_svfiprintf_r+0x124>
 80141d6:	9105      	str	r1, [sp, #20]
 80141d8:	e7c6      	b.n	8014168 <_svfiprintf_r+0x124>
 80141da:	fb05 2101 	mla	r1, r5, r1, r2
 80141de:	2301      	movs	r3, #1
 80141e0:	4607      	mov	r7, r0
 80141e2:	e7f0      	b.n	80141c6 <_svfiprintf_r+0x182>
 80141e4:	ab03      	add	r3, sp, #12
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	4622      	mov	r2, r4
 80141ea:	4b11      	ldr	r3, [pc, #68]	; (8014230 <_svfiprintf_r+0x1ec>)
 80141ec:	a904      	add	r1, sp, #16
 80141ee:	4640      	mov	r0, r8
 80141f0:	f3af 8000 	nop.w
 80141f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80141f8:	4681      	mov	r9, r0
 80141fa:	d1d6      	bne.n	80141aa <_svfiprintf_r+0x166>
 80141fc:	89a3      	ldrh	r3, [r4, #12]
 80141fe:	065b      	lsls	r3, r3, #25
 8014200:	f53f af35 	bmi.w	801406e <_svfiprintf_r+0x2a>
 8014204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014206:	b01d      	add	sp, #116	; 0x74
 8014208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420c:	ab03      	add	r3, sp, #12
 801420e:	9300      	str	r3, [sp, #0]
 8014210:	4622      	mov	r2, r4
 8014212:	4b07      	ldr	r3, [pc, #28]	; (8014230 <_svfiprintf_r+0x1ec>)
 8014214:	a904      	add	r1, sp, #16
 8014216:	4640      	mov	r0, r8
 8014218:	f000 f9c2 	bl	80145a0 <_printf_i>
 801421c:	e7ea      	b.n	80141f4 <_svfiprintf_r+0x1b0>
 801421e:	bf00      	nop
 8014220:	08016e42 	.word	0x08016e42
 8014224:	08016e48 	.word	0x08016e48
 8014228:	08016e4c 	.word	0x08016e4c
 801422c:	00000000 	.word	0x00000000
 8014230:	08013f91 	.word	0x08013f91

08014234 <__sfputc_r>:
 8014234:	6893      	ldr	r3, [r2, #8]
 8014236:	3b01      	subs	r3, #1
 8014238:	2b00      	cmp	r3, #0
 801423a:	b410      	push	{r4}
 801423c:	6093      	str	r3, [r2, #8]
 801423e:	da08      	bge.n	8014252 <__sfputc_r+0x1e>
 8014240:	6994      	ldr	r4, [r2, #24]
 8014242:	42a3      	cmp	r3, r4
 8014244:	db01      	blt.n	801424a <__sfputc_r+0x16>
 8014246:	290a      	cmp	r1, #10
 8014248:	d103      	bne.n	8014252 <__sfputc_r+0x1e>
 801424a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801424e:	f7ff bb3b 	b.w	80138c8 <__swbuf_r>
 8014252:	6813      	ldr	r3, [r2, #0]
 8014254:	1c58      	adds	r0, r3, #1
 8014256:	6010      	str	r0, [r2, #0]
 8014258:	7019      	strb	r1, [r3, #0]
 801425a:	4608      	mov	r0, r1
 801425c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014260:	4770      	bx	lr

08014262 <__sfputs_r>:
 8014262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014264:	4606      	mov	r6, r0
 8014266:	460f      	mov	r7, r1
 8014268:	4614      	mov	r4, r2
 801426a:	18d5      	adds	r5, r2, r3
 801426c:	42ac      	cmp	r4, r5
 801426e:	d101      	bne.n	8014274 <__sfputs_r+0x12>
 8014270:	2000      	movs	r0, #0
 8014272:	e007      	b.n	8014284 <__sfputs_r+0x22>
 8014274:	463a      	mov	r2, r7
 8014276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801427a:	4630      	mov	r0, r6
 801427c:	f7ff ffda 	bl	8014234 <__sfputc_r>
 8014280:	1c43      	adds	r3, r0, #1
 8014282:	d1f3      	bne.n	801426c <__sfputs_r+0xa>
 8014284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014288 <_vfiprintf_r>:
 8014288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428c:	460c      	mov	r4, r1
 801428e:	b09d      	sub	sp, #116	; 0x74
 8014290:	4617      	mov	r7, r2
 8014292:	461d      	mov	r5, r3
 8014294:	4606      	mov	r6, r0
 8014296:	b118      	cbz	r0, 80142a0 <_vfiprintf_r+0x18>
 8014298:	6983      	ldr	r3, [r0, #24]
 801429a:	b90b      	cbnz	r3, 80142a0 <_vfiprintf_r+0x18>
 801429c:	f7ff fcc4 	bl	8013c28 <__sinit>
 80142a0:	4b7c      	ldr	r3, [pc, #496]	; (8014494 <_vfiprintf_r+0x20c>)
 80142a2:	429c      	cmp	r4, r3
 80142a4:	d158      	bne.n	8014358 <_vfiprintf_r+0xd0>
 80142a6:	6874      	ldr	r4, [r6, #4]
 80142a8:	89a3      	ldrh	r3, [r4, #12]
 80142aa:	0718      	lsls	r0, r3, #28
 80142ac:	d55e      	bpl.n	801436c <_vfiprintf_r+0xe4>
 80142ae:	6923      	ldr	r3, [r4, #16]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d05b      	beq.n	801436c <_vfiprintf_r+0xe4>
 80142b4:	2300      	movs	r3, #0
 80142b6:	9309      	str	r3, [sp, #36]	; 0x24
 80142b8:	2320      	movs	r3, #32
 80142ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142be:	2330      	movs	r3, #48	; 0x30
 80142c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142c4:	9503      	str	r5, [sp, #12]
 80142c6:	f04f 0b01 	mov.w	fp, #1
 80142ca:	46b8      	mov	r8, r7
 80142cc:	4645      	mov	r5, r8
 80142ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80142d2:	b10b      	cbz	r3, 80142d8 <_vfiprintf_r+0x50>
 80142d4:	2b25      	cmp	r3, #37	; 0x25
 80142d6:	d154      	bne.n	8014382 <_vfiprintf_r+0xfa>
 80142d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80142dc:	d00b      	beq.n	80142f6 <_vfiprintf_r+0x6e>
 80142de:	4653      	mov	r3, sl
 80142e0:	463a      	mov	r2, r7
 80142e2:	4621      	mov	r1, r4
 80142e4:	4630      	mov	r0, r6
 80142e6:	f7ff ffbc 	bl	8014262 <__sfputs_r>
 80142ea:	3001      	adds	r0, #1
 80142ec:	f000 80c2 	beq.w	8014474 <_vfiprintf_r+0x1ec>
 80142f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f2:	4453      	add	r3, sl
 80142f4:	9309      	str	r3, [sp, #36]	; 0x24
 80142f6:	f898 3000 	ldrb.w	r3, [r8]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f000 80ba 	beq.w	8014474 <_vfiprintf_r+0x1ec>
 8014300:	2300      	movs	r3, #0
 8014302:	f04f 32ff 	mov.w	r2, #4294967295
 8014306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801430a:	9304      	str	r3, [sp, #16]
 801430c:	9307      	str	r3, [sp, #28]
 801430e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014312:	931a      	str	r3, [sp, #104]	; 0x68
 8014314:	46a8      	mov	r8, r5
 8014316:	2205      	movs	r2, #5
 8014318:	f818 1b01 	ldrb.w	r1, [r8], #1
 801431c:	485e      	ldr	r0, [pc, #376]	; (8014498 <_vfiprintf_r+0x210>)
 801431e:	f7eb ff5f 	bl	80001e0 <memchr>
 8014322:	9b04      	ldr	r3, [sp, #16]
 8014324:	bb78      	cbnz	r0, 8014386 <_vfiprintf_r+0xfe>
 8014326:	06d9      	lsls	r1, r3, #27
 8014328:	bf44      	itt	mi
 801432a:	2220      	movmi	r2, #32
 801432c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014330:	071a      	lsls	r2, r3, #28
 8014332:	bf44      	itt	mi
 8014334:	222b      	movmi	r2, #43	; 0x2b
 8014336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801433a:	782a      	ldrb	r2, [r5, #0]
 801433c:	2a2a      	cmp	r2, #42	; 0x2a
 801433e:	d02a      	beq.n	8014396 <_vfiprintf_r+0x10e>
 8014340:	9a07      	ldr	r2, [sp, #28]
 8014342:	46a8      	mov	r8, r5
 8014344:	2000      	movs	r0, #0
 8014346:	250a      	movs	r5, #10
 8014348:	4641      	mov	r1, r8
 801434a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801434e:	3b30      	subs	r3, #48	; 0x30
 8014350:	2b09      	cmp	r3, #9
 8014352:	d969      	bls.n	8014428 <_vfiprintf_r+0x1a0>
 8014354:	b360      	cbz	r0, 80143b0 <_vfiprintf_r+0x128>
 8014356:	e024      	b.n	80143a2 <_vfiprintf_r+0x11a>
 8014358:	4b50      	ldr	r3, [pc, #320]	; (801449c <_vfiprintf_r+0x214>)
 801435a:	429c      	cmp	r4, r3
 801435c:	d101      	bne.n	8014362 <_vfiprintf_r+0xda>
 801435e:	68b4      	ldr	r4, [r6, #8]
 8014360:	e7a2      	b.n	80142a8 <_vfiprintf_r+0x20>
 8014362:	4b4f      	ldr	r3, [pc, #316]	; (80144a0 <_vfiprintf_r+0x218>)
 8014364:	429c      	cmp	r4, r3
 8014366:	bf08      	it	eq
 8014368:	68f4      	ldreq	r4, [r6, #12]
 801436a:	e79d      	b.n	80142a8 <_vfiprintf_r+0x20>
 801436c:	4621      	mov	r1, r4
 801436e:	4630      	mov	r0, r6
 8014370:	f7ff fafc 	bl	801396c <__swsetup_r>
 8014374:	2800      	cmp	r0, #0
 8014376:	d09d      	beq.n	80142b4 <_vfiprintf_r+0x2c>
 8014378:	f04f 30ff 	mov.w	r0, #4294967295
 801437c:	b01d      	add	sp, #116	; 0x74
 801437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014382:	46a8      	mov	r8, r5
 8014384:	e7a2      	b.n	80142cc <_vfiprintf_r+0x44>
 8014386:	4a44      	ldr	r2, [pc, #272]	; (8014498 <_vfiprintf_r+0x210>)
 8014388:	1a80      	subs	r0, r0, r2
 801438a:	fa0b f000 	lsl.w	r0, fp, r0
 801438e:	4318      	orrs	r0, r3
 8014390:	9004      	str	r0, [sp, #16]
 8014392:	4645      	mov	r5, r8
 8014394:	e7be      	b.n	8014314 <_vfiprintf_r+0x8c>
 8014396:	9a03      	ldr	r2, [sp, #12]
 8014398:	1d11      	adds	r1, r2, #4
 801439a:	6812      	ldr	r2, [r2, #0]
 801439c:	9103      	str	r1, [sp, #12]
 801439e:	2a00      	cmp	r2, #0
 80143a0:	db01      	blt.n	80143a6 <_vfiprintf_r+0x11e>
 80143a2:	9207      	str	r2, [sp, #28]
 80143a4:	e004      	b.n	80143b0 <_vfiprintf_r+0x128>
 80143a6:	4252      	negs	r2, r2
 80143a8:	f043 0302 	orr.w	r3, r3, #2
 80143ac:	9207      	str	r2, [sp, #28]
 80143ae:	9304      	str	r3, [sp, #16]
 80143b0:	f898 3000 	ldrb.w	r3, [r8]
 80143b4:	2b2e      	cmp	r3, #46	; 0x2e
 80143b6:	d10e      	bne.n	80143d6 <_vfiprintf_r+0x14e>
 80143b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80143bc:	2b2a      	cmp	r3, #42	; 0x2a
 80143be:	d138      	bne.n	8014432 <_vfiprintf_r+0x1aa>
 80143c0:	9b03      	ldr	r3, [sp, #12]
 80143c2:	1d1a      	adds	r2, r3, #4
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	9203      	str	r2, [sp, #12]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	bfb8      	it	lt
 80143cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80143d0:	f108 0802 	add.w	r8, r8, #2
 80143d4:	9305      	str	r3, [sp, #20]
 80143d6:	4d33      	ldr	r5, [pc, #204]	; (80144a4 <_vfiprintf_r+0x21c>)
 80143d8:	f898 1000 	ldrb.w	r1, [r8]
 80143dc:	2203      	movs	r2, #3
 80143de:	4628      	mov	r0, r5
 80143e0:	f7eb fefe 	bl	80001e0 <memchr>
 80143e4:	b140      	cbz	r0, 80143f8 <_vfiprintf_r+0x170>
 80143e6:	2340      	movs	r3, #64	; 0x40
 80143e8:	1b40      	subs	r0, r0, r5
 80143ea:	fa03 f000 	lsl.w	r0, r3, r0
 80143ee:	9b04      	ldr	r3, [sp, #16]
 80143f0:	4303      	orrs	r3, r0
 80143f2:	f108 0801 	add.w	r8, r8, #1
 80143f6:	9304      	str	r3, [sp, #16]
 80143f8:	f898 1000 	ldrb.w	r1, [r8]
 80143fc:	482a      	ldr	r0, [pc, #168]	; (80144a8 <_vfiprintf_r+0x220>)
 80143fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014402:	2206      	movs	r2, #6
 8014404:	f108 0701 	add.w	r7, r8, #1
 8014408:	f7eb feea 	bl	80001e0 <memchr>
 801440c:	2800      	cmp	r0, #0
 801440e:	d037      	beq.n	8014480 <_vfiprintf_r+0x1f8>
 8014410:	4b26      	ldr	r3, [pc, #152]	; (80144ac <_vfiprintf_r+0x224>)
 8014412:	bb1b      	cbnz	r3, 801445c <_vfiprintf_r+0x1d4>
 8014414:	9b03      	ldr	r3, [sp, #12]
 8014416:	3307      	adds	r3, #7
 8014418:	f023 0307 	bic.w	r3, r3, #7
 801441c:	3308      	adds	r3, #8
 801441e:	9303      	str	r3, [sp, #12]
 8014420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014422:	444b      	add	r3, r9
 8014424:	9309      	str	r3, [sp, #36]	; 0x24
 8014426:	e750      	b.n	80142ca <_vfiprintf_r+0x42>
 8014428:	fb05 3202 	mla	r2, r5, r2, r3
 801442c:	2001      	movs	r0, #1
 801442e:	4688      	mov	r8, r1
 8014430:	e78a      	b.n	8014348 <_vfiprintf_r+0xc0>
 8014432:	2300      	movs	r3, #0
 8014434:	f108 0801 	add.w	r8, r8, #1
 8014438:	9305      	str	r3, [sp, #20]
 801443a:	4619      	mov	r1, r3
 801443c:	250a      	movs	r5, #10
 801443e:	4640      	mov	r0, r8
 8014440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014444:	3a30      	subs	r2, #48	; 0x30
 8014446:	2a09      	cmp	r2, #9
 8014448:	d903      	bls.n	8014452 <_vfiprintf_r+0x1ca>
 801444a:	2b00      	cmp	r3, #0
 801444c:	d0c3      	beq.n	80143d6 <_vfiprintf_r+0x14e>
 801444e:	9105      	str	r1, [sp, #20]
 8014450:	e7c1      	b.n	80143d6 <_vfiprintf_r+0x14e>
 8014452:	fb05 2101 	mla	r1, r5, r1, r2
 8014456:	2301      	movs	r3, #1
 8014458:	4680      	mov	r8, r0
 801445a:	e7f0      	b.n	801443e <_vfiprintf_r+0x1b6>
 801445c:	ab03      	add	r3, sp, #12
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	4622      	mov	r2, r4
 8014462:	4b13      	ldr	r3, [pc, #76]	; (80144b0 <_vfiprintf_r+0x228>)
 8014464:	a904      	add	r1, sp, #16
 8014466:	4630      	mov	r0, r6
 8014468:	f3af 8000 	nop.w
 801446c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014470:	4681      	mov	r9, r0
 8014472:	d1d5      	bne.n	8014420 <_vfiprintf_r+0x198>
 8014474:	89a3      	ldrh	r3, [r4, #12]
 8014476:	065b      	lsls	r3, r3, #25
 8014478:	f53f af7e 	bmi.w	8014378 <_vfiprintf_r+0xf0>
 801447c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801447e:	e77d      	b.n	801437c <_vfiprintf_r+0xf4>
 8014480:	ab03      	add	r3, sp, #12
 8014482:	9300      	str	r3, [sp, #0]
 8014484:	4622      	mov	r2, r4
 8014486:	4b0a      	ldr	r3, [pc, #40]	; (80144b0 <_vfiprintf_r+0x228>)
 8014488:	a904      	add	r1, sp, #16
 801448a:	4630      	mov	r0, r6
 801448c:	f000 f888 	bl	80145a0 <_printf_i>
 8014490:	e7ec      	b.n	801446c <_vfiprintf_r+0x1e4>
 8014492:	bf00      	nop
 8014494:	08016df8 	.word	0x08016df8
 8014498:	08016e42 	.word	0x08016e42
 801449c:	08016e18 	.word	0x08016e18
 80144a0:	08016dd8 	.word	0x08016dd8
 80144a4:	08016e48 	.word	0x08016e48
 80144a8:	08016e4c 	.word	0x08016e4c
 80144ac:	00000000 	.word	0x00000000
 80144b0:	08014263 	.word	0x08014263

080144b4 <_printf_common>:
 80144b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144b8:	4691      	mov	r9, r2
 80144ba:	461f      	mov	r7, r3
 80144bc:	688a      	ldr	r2, [r1, #8]
 80144be:	690b      	ldr	r3, [r1, #16]
 80144c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80144c4:	4293      	cmp	r3, r2
 80144c6:	bfb8      	it	lt
 80144c8:	4613      	movlt	r3, r2
 80144ca:	f8c9 3000 	str.w	r3, [r9]
 80144ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80144d2:	4606      	mov	r6, r0
 80144d4:	460c      	mov	r4, r1
 80144d6:	b112      	cbz	r2, 80144de <_printf_common+0x2a>
 80144d8:	3301      	adds	r3, #1
 80144da:	f8c9 3000 	str.w	r3, [r9]
 80144de:	6823      	ldr	r3, [r4, #0]
 80144e0:	0699      	lsls	r1, r3, #26
 80144e2:	bf42      	ittt	mi
 80144e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80144e8:	3302      	addmi	r3, #2
 80144ea:	f8c9 3000 	strmi.w	r3, [r9]
 80144ee:	6825      	ldr	r5, [r4, #0]
 80144f0:	f015 0506 	ands.w	r5, r5, #6
 80144f4:	d107      	bne.n	8014506 <_printf_common+0x52>
 80144f6:	f104 0a19 	add.w	sl, r4, #25
 80144fa:	68e3      	ldr	r3, [r4, #12]
 80144fc:	f8d9 2000 	ldr.w	r2, [r9]
 8014500:	1a9b      	subs	r3, r3, r2
 8014502:	42ab      	cmp	r3, r5
 8014504:	dc28      	bgt.n	8014558 <_printf_common+0xa4>
 8014506:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801450a:	6822      	ldr	r2, [r4, #0]
 801450c:	3300      	adds	r3, #0
 801450e:	bf18      	it	ne
 8014510:	2301      	movne	r3, #1
 8014512:	0692      	lsls	r2, r2, #26
 8014514:	d42d      	bmi.n	8014572 <_printf_common+0xbe>
 8014516:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801451a:	4639      	mov	r1, r7
 801451c:	4630      	mov	r0, r6
 801451e:	47c0      	blx	r8
 8014520:	3001      	adds	r0, #1
 8014522:	d020      	beq.n	8014566 <_printf_common+0xb2>
 8014524:	6823      	ldr	r3, [r4, #0]
 8014526:	68e5      	ldr	r5, [r4, #12]
 8014528:	f8d9 2000 	ldr.w	r2, [r9]
 801452c:	f003 0306 	and.w	r3, r3, #6
 8014530:	2b04      	cmp	r3, #4
 8014532:	bf08      	it	eq
 8014534:	1aad      	subeq	r5, r5, r2
 8014536:	68a3      	ldr	r3, [r4, #8]
 8014538:	6922      	ldr	r2, [r4, #16]
 801453a:	bf0c      	ite	eq
 801453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014540:	2500      	movne	r5, #0
 8014542:	4293      	cmp	r3, r2
 8014544:	bfc4      	itt	gt
 8014546:	1a9b      	subgt	r3, r3, r2
 8014548:	18ed      	addgt	r5, r5, r3
 801454a:	f04f 0900 	mov.w	r9, #0
 801454e:	341a      	adds	r4, #26
 8014550:	454d      	cmp	r5, r9
 8014552:	d11a      	bne.n	801458a <_printf_common+0xd6>
 8014554:	2000      	movs	r0, #0
 8014556:	e008      	b.n	801456a <_printf_common+0xb6>
 8014558:	2301      	movs	r3, #1
 801455a:	4652      	mov	r2, sl
 801455c:	4639      	mov	r1, r7
 801455e:	4630      	mov	r0, r6
 8014560:	47c0      	blx	r8
 8014562:	3001      	adds	r0, #1
 8014564:	d103      	bne.n	801456e <_printf_common+0xba>
 8014566:	f04f 30ff 	mov.w	r0, #4294967295
 801456a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801456e:	3501      	adds	r5, #1
 8014570:	e7c3      	b.n	80144fa <_printf_common+0x46>
 8014572:	18e1      	adds	r1, r4, r3
 8014574:	1c5a      	adds	r2, r3, #1
 8014576:	2030      	movs	r0, #48	; 0x30
 8014578:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801457c:	4422      	add	r2, r4
 801457e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014586:	3302      	adds	r3, #2
 8014588:	e7c5      	b.n	8014516 <_printf_common+0x62>
 801458a:	2301      	movs	r3, #1
 801458c:	4622      	mov	r2, r4
 801458e:	4639      	mov	r1, r7
 8014590:	4630      	mov	r0, r6
 8014592:	47c0      	blx	r8
 8014594:	3001      	adds	r0, #1
 8014596:	d0e6      	beq.n	8014566 <_printf_common+0xb2>
 8014598:	f109 0901 	add.w	r9, r9, #1
 801459c:	e7d8      	b.n	8014550 <_printf_common+0x9c>
	...

080145a0 <_printf_i>:
 80145a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80145a8:	460c      	mov	r4, r1
 80145aa:	7e09      	ldrb	r1, [r1, #24]
 80145ac:	b085      	sub	sp, #20
 80145ae:	296e      	cmp	r1, #110	; 0x6e
 80145b0:	4617      	mov	r7, r2
 80145b2:	4606      	mov	r6, r0
 80145b4:	4698      	mov	r8, r3
 80145b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145b8:	f000 80b3 	beq.w	8014722 <_printf_i+0x182>
 80145bc:	d822      	bhi.n	8014604 <_printf_i+0x64>
 80145be:	2963      	cmp	r1, #99	; 0x63
 80145c0:	d036      	beq.n	8014630 <_printf_i+0x90>
 80145c2:	d80a      	bhi.n	80145da <_printf_i+0x3a>
 80145c4:	2900      	cmp	r1, #0
 80145c6:	f000 80b9 	beq.w	801473c <_printf_i+0x19c>
 80145ca:	2958      	cmp	r1, #88	; 0x58
 80145cc:	f000 8083 	beq.w	80146d6 <_printf_i+0x136>
 80145d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80145d8:	e032      	b.n	8014640 <_printf_i+0xa0>
 80145da:	2964      	cmp	r1, #100	; 0x64
 80145dc:	d001      	beq.n	80145e2 <_printf_i+0x42>
 80145de:	2969      	cmp	r1, #105	; 0x69
 80145e0:	d1f6      	bne.n	80145d0 <_printf_i+0x30>
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	6813      	ldr	r3, [r2, #0]
 80145e6:	0605      	lsls	r5, r0, #24
 80145e8:	f103 0104 	add.w	r1, r3, #4
 80145ec:	d52a      	bpl.n	8014644 <_printf_i+0xa4>
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	6011      	str	r1, [r2, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	da03      	bge.n	80145fe <_printf_i+0x5e>
 80145f6:	222d      	movs	r2, #45	; 0x2d
 80145f8:	425b      	negs	r3, r3
 80145fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80145fe:	486f      	ldr	r0, [pc, #444]	; (80147bc <_printf_i+0x21c>)
 8014600:	220a      	movs	r2, #10
 8014602:	e039      	b.n	8014678 <_printf_i+0xd8>
 8014604:	2973      	cmp	r1, #115	; 0x73
 8014606:	f000 809d 	beq.w	8014744 <_printf_i+0x1a4>
 801460a:	d808      	bhi.n	801461e <_printf_i+0x7e>
 801460c:	296f      	cmp	r1, #111	; 0x6f
 801460e:	d020      	beq.n	8014652 <_printf_i+0xb2>
 8014610:	2970      	cmp	r1, #112	; 0x70
 8014612:	d1dd      	bne.n	80145d0 <_printf_i+0x30>
 8014614:	6823      	ldr	r3, [r4, #0]
 8014616:	f043 0320 	orr.w	r3, r3, #32
 801461a:	6023      	str	r3, [r4, #0]
 801461c:	e003      	b.n	8014626 <_printf_i+0x86>
 801461e:	2975      	cmp	r1, #117	; 0x75
 8014620:	d017      	beq.n	8014652 <_printf_i+0xb2>
 8014622:	2978      	cmp	r1, #120	; 0x78
 8014624:	d1d4      	bne.n	80145d0 <_printf_i+0x30>
 8014626:	2378      	movs	r3, #120	; 0x78
 8014628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801462c:	4864      	ldr	r0, [pc, #400]	; (80147c0 <_printf_i+0x220>)
 801462e:	e055      	b.n	80146dc <_printf_i+0x13c>
 8014630:	6813      	ldr	r3, [r2, #0]
 8014632:	1d19      	adds	r1, r3, #4
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	6011      	str	r1, [r2, #0]
 8014638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801463c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014640:	2301      	movs	r3, #1
 8014642:	e08c      	b.n	801475e <_printf_i+0x1be>
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	6011      	str	r1, [r2, #0]
 8014648:	f010 0f40 	tst.w	r0, #64	; 0x40
 801464c:	bf18      	it	ne
 801464e:	b21b      	sxthne	r3, r3
 8014650:	e7cf      	b.n	80145f2 <_printf_i+0x52>
 8014652:	6813      	ldr	r3, [r2, #0]
 8014654:	6825      	ldr	r5, [r4, #0]
 8014656:	1d18      	adds	r0, r3, #4
 8014658:	6010      	str	r0, [r2, #0]
 801465a:	0628      	lsls	r0, r5, #24
 801465c:	d501      	bpl.n	8014662 <_printf_i+0xc2>
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	e002      	b.n	8014668 <_printf_i+0xc8>
 8014662:	0668      	lsls	r0, r5, #25
 8014664:	d5fb      	bpl.n	801465e <_printf_i+0xbe>
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	4854      	ldr	r0, [pc, #336]	; (80147bc <_printf_i+0x21c>)
 801466a:	296f      	cmp	r1, #111	; 0x6f
 801466c:	bf14      	ite	ne
 801466e:	220a      	movne	r2, #10
 8014670:	2208      	moveq	r2, #8
 8014672:	2100      	movs	r1, #0
 8014674:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014678:	6865      	ldr	r5, [r4, #4]
 801467a:	60a5      	str	r5, [r4, #8]
 801467c:	2d00      	cmp	r5, #0
 801467e:	f2c0 8095 	blt.w	80147ac <_printf_i+0x20c>
 8014682:	6821      	ldr	r1, [r4, #0]
 8014684:	f021 0104 	bic.w	r1, r1, #4
 8014688:	6021      	str	r1, [r4, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d13d      	bne.n	801470a <_printf_i+0x16a>
 801468e:	2d00      	cmp	r5, #0
 8014690:	f040 808e 	bne.w	80147b0 <_printf_i+0x210>
 8014694:	4665      	mov	r5, ip
 8014696:	2a08      	cmp	r2, #8
 8014698:	d10b      	bne.n	80146b2 <_printf_i+0x112>
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	07db      	lsls	r3, r3, #31
 801469e:	d508      	bpl.n	80146b2 <_printf_i+0x112>
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	6862      	ldr	r2, [r4, #4]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	bfde      	ittt	le
 80146a8:	2330      	movle	r3, #48	; 0x30
 80146aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80146ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80146b2:	ebac 0305 	sub.w	r3, ip, r5
 80146b6:	6123      	str	r3, [r4, #16]
 80146b8:	f8cd 8000 	str.w	r8, [sp]
 80146bc:	463b      	mov	r3, r7
 80146be:	aa03      	add	r2, sp, #12
 80146c0:	4621      	mov	r1, r4
 80146c2:	4630      	mov	r0, r6
 80146c4:	f7ff fef6 	bl	80144b4 <_printf_common>
 80146c8:	3001      	adds	r0, #1
 80146ca:	d14d      	bne.n	8014768 <_printf_i+0x1c8>
 80146cc:	f04f 30ff 	mov.w	r0, #4294967295
 80146d0:	b005      	add	sp, #20
 80146d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146d6:	4839      	ldr	r0, [pc, #228]	; (80147bc <_printf_i+0x21c>)
 80146d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80146dc:	6813      	ldr	r3, [r2, #0]
 80146de:	6821      	ldr	r1, [r4, #0]
 80146e0:	1d1d      	adds	r5, r3, #4
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	6015      	str	r5, [r2, #0]
 80146e6:	060a      	lsls	r2, r1, #24
 80146e8:	d50b      	bpl.n	8014702 <_printf_i+0x162>
 80146ea:	07ca      	lsls	r2, r1, #31
 80146ec:	bf44      	itt	mi
 80146ee:	f041 0120 	orrmi.w	r1, r1, #32
 80146f2:	6021      	strmi	r1, [r4, #0]
 80146f4:	b91b      	cbnz	r3, 80146fe <_printf_i+0x15e>
 80146f6:	6822      	ldr	r2, [r4, #0]
 80146f8:	f022 0220 	bic.w	r2, r2, #32
 80146fc:	6022      	str	r2, [r4, #0]
 80146fe:	2210      	movs	r2, #16
 8014700:	e7b7      	b.n	8014672 <_printf_i+0xd2>
 8014702:	064d      	lsls	r5, r1, #25
 8014704:	bf48      	it	mi
 8014706:	b29b      	uxthmi	r3, r3
 8014708:	e7ef      	b.n	80146ea <_printf_i+0x14a>
 801470a:	4665      	mov	r5, ip
 801470c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014710:	fb02 3311 	mls	r3, r2, r1, r3
 8014714:	5cc3      	ldrb	r3, [r0, r3]
 8014716:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801471a:	460b      	mov	r3, r1
 801471c:	2900      	cmp	r1, #0
 801471e:	d1f5      	bne.n	801470c <_printf_i+0x16c>
 8014720:	e7b9      	b.n	8014696 <_printf_i+0xf6>
 8014722:	6813      	ldr	r3, [r2, #0]
 8014724:	6825      	ldr	r5, [r4, #0]
 8014726:	6961      	ldr	r1, [r4, #20]
 8014728:	1d18      	adds	r0, r3, #4
 801472a:	6010      	str	r0, [r2, #0]
 801472c:	0628      	lsls	r0, r5, #24
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	d501      	bpl.n	8014736 <_printf_i+0x196>
 8014732:	6019      	str	r1, [r3, #0]
 8014734:	e002      	b.n	801473c <_printf_i+0x19c>
 8014736:	066a      	lsls	r2, r5, #25
 8014738:	d5fb      	bpl.n	8014732 <_printf_i+0x192>
 801473a:	8019      	strh	r1, [r3, #0]
 801473c:	2300      	movs	r3, #0
 801473e:	6123      	str	r3, [r4, #16]
 8014740:	4665      	mov	r5, ip
 8014742:	e7b9      	b.n	80146b8 <_printf_i+0x118>
 8014744:	6813      	ldr	r3, [r2, #0]
 8014746:	1d19      	adds	r1, r3, #4
 8014748:	6011      	str	r1, [r2, #0]
 801474a:	681d      	ldr	r5, [r3, #0]
 801474c:	6862      	ldr	r2, [r4, #4]
 801474e:	2100      	movs	r1, #0
 8014750:	4628      	mov	r0, r5
 8014752:	f7eb fd45 	bl	80001e0 <memchr>
 8014756:	b108      	cbz	r0, 801475c <_printf_i+0x1bc>
 8014758:	1b40      	subs	r0, r0, r5
 801475a:	6060      	str	r0, [r4, #4]
 801475c:	6863      	ldr	r3, [r4, #4]
 801475e:	6123      	str	r3, [r4, #16]
 8014760:	2300      	movs	r3, #0
 8014762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014766:	e7a7      	b.n	80146b8 <_printf_i+0x118>
 8014768:	6923      	ldr	r3, [r4, #16]
 801476a:	462a      	mov	r2, r5
 801476c:	4639      	mov	r1, r7
 801476e:	4630      	mov	r0, r6
 8014770:	47c0      	blx	r8
 8014772:	3001      	adds	r0, #1
 8014774:	d0aa      	beq.n	80146cc <_printf_i+0x12c>
 8014776:	6823      	ldr	r3, [r4, #0]
 8014778:	079b      	lsls	r3, r3, #30
 801477a:	d413      	bmi.n	80147a4 <_printf_i+0x204>
 801477c:	68e0      	ldr	r0, [r4, #12]
 801477e:	9b03      	ldr	r3, [sp, #12]
 8014780:	4298      	cmp	r0, r3
 8014782:	bfb8      	it	lt
 8014784:	4618      	movlt	r0, r3
 8014786:	e7a3      	b.n	80146d0 <_printf_i+0x130>
 8014788:	2301      	movs	r3, #1
 801478a:	464a      	mov	r2, r9
 801478c:	4639      	mov	r1, r7
 801478e:	4630      	mov	r0, r6
 8014790:	47c0      	blx	r8
 8014792:	3001      	adds	r0, #1
 8014794:	d09a      	beq.n	80146cc <_printf_i+0x12c>
 8014796:	3501      	adds	r5, #1
 8014798:	68e3      	ldr	r3, [r4, #12]
 801479a:	9a03      	ldr	r2, [sp, #12]
 801479c:	1a9b      	subs	r3, r3, r2
 801479e:	42ab      	cmp	r3, r5
 80147a0:	dcf2      	bgt.n	8014788 <_printf_i+0x1e8>
 80147a2:	e7eb      	b.n	801477c <_printf_i+0x1dc>
 80147a4:	2500      	movs	r5, #0
 80147a6:	f104 0919 	add.w	r9, r4, #25
 80147aa:	e7f5      	b.n	8014798 <_printf_i+0x1f8>
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d1ac      	bne.n	801470a <_printf_i+0x16a>
 80147b0:	7803      	ldrb	r3, [r0, #0]
 80147b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80147b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147ba:	e76c      	b.n	8014696 <_printf_i+0xf6>
 80147bc:	08016e53 	.word	0x08016e53
 80147c0:	08016e64 	.word	0x08016e64

080147c4 <_sbrk_r>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	4c06      	ldr	r4, [pc, #24]	; (80147e0 <_sbrk_r+0x1c>)
 80147c8:	2300      	movs	r3, #0
 80147ca:	4605      	mov	r5, r0
 80147cc:	4608      	mov	r0, r1
 80147ce:	6023      	str	r3, [r4, #0]
 80147d0:	f7ef fde4 	bl	800439c <_sbrk>
 80147d4:	1c43      	adds	r3, r0, #1
 80147d6:	d102      	bne.n	80147de <_sbrk_r+0x1a>
 80147d8:	6823      	ldr	r3, [r4, #0]
 80147da:	b103      	cbz	r3, 80147de <_sbrk_r+0x1a>
 80147dc:	602b      	str	r3, [r5, #0]
 80147de:	bd38      	pop	{r3, r4, r5, pc}
 80147e0:	2000498c 	.word	0x2000498c

080147e4 <__sread>:
 80147e4:	b510      	push	{r4, lr}
 80147e6:	460c      	mov	r4, r1
 80147e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ec:	f000 f8e2 	bl	80149b4 <_read_r>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	bfab      	itete	ge
 80147f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147f6:	89a3      	ldrhlt	r3, [r4, #12]
 80147f8:	181b      	addge	r3, r3, r0
 80147fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147fe:	bfac      	ite	ge
 8014800:	6563      	strge	r3, [r4, #84]	; 0x54
 8014802:	81a3      	strhlt	r3, [r4, #12]
 8014804:	bd10      	pop	{r4, pc}

08014806 <__swrite>:
 8014806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801480a:	461f      	mov	r7, r3
 801480c:	898b      	ldrh	r3, [r1, #12]
 801480e:	05db      	lsls	r3, r3, #23
 8014810:	4605      	mov	r5, r0
 8014812:	460c      	mov	r4, r1
 8014814:	4616      	mov	r6, r2
 8014816:	d505      	bpl.n	8014824 <__swrite+0x1e>
 8014818:	2302      	movs	r3, #2
 801481a:	2200      	movs	r2, #0
 801481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014820:	f000 f874 	bl	801490c <_lseek_r>
 8014824:	89a3      	ldrh	r3, [r4, #12]
 8014826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801482a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801482e:	81a3      	strh	r3, [r4, #12]
 8014830:	4632      	mov	r2, r6
 8014832:	463b      	mov	r3, r7
 8014834:	4628      	mov	r0, r5
 8014836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801483a:	f000 b823 	b.w	8014884 <_write_r>

0801483e <__sseek>:
 801483e:	b510      	push	{r4, lr}
 8014840:	460c      	mov	r4, r1
 8014842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014846:	f000 f861 	bl	801490c <_lseek_r>
 801484a:	1c43      	adds	r3, r0, #1
 801484c:	89a3      	ldrh	r3, [r4, #12]
 801484e:	bf15      	itete	ne
 8014850:	6560      	strne	r0, [r4, #84]	; 0x54
 8014852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801485a:	81a3      	strheq	r3, [r4, #12]
 801485c:	bf18      	it	ne
 801485e:	81a3      	strhne	r3, [r4, #12]
 8014860:	bd10      	pop	{r4, pc}

08014862 <__sclose>:
 8014862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014866:	f000 b81f 	b.w	80148a8 <_close_r>

0801486a <__ascii_wctomb>:
 801486a:	b149      	cbz	r1, 8014880 <__ascii_wctomb+0x16>
 801486c:	2aff      	cmp	r2, #255	; 0xff
 801486e:	bf85      	ittet	hi
 8014870:	238a      	movhi	r3, #138	; 0x8a
 8014872:	6003      	strhi	r3, [r0, #0]
 8014874:	700a      	strbls	r2, [r1, #0]
 8014876:	f04f 30ff 	movhi.w	r0, #4294967295
 801487a:	bf98      	it	ls
 801487c:	2001      	movls	r0, #1
 801487e:	4770      	bx	lr
 8014880:	4608      	mov	r0, r1
 8014882:	4770      	bx	lr

08014884 <_write_r>:
 8014884:	b538      	push	{r3, r4, r5, lr}
 8014886:	4c07      	ldr	r4, [pc, #28]	; (80148a4 <_write_r+0x20>)
 8014888:	4605      	mov	r5, r0
 801488a:	4608      	mov	r0, r1
 801488c:	4611      	mov	r1, r2
 801488e:	2200      	movs	r2, #0
 8014890:	6022      	str	r2, [r4, #0]
 8014892:	461a      	mov	r2, r3
 8014894:	f7ef fd32 	bl	80042fc <_write>
 8014898:	1c43      	adds	r3, r0, #1
 801489a:	d102      	bne.n	80148a2 <_write_r+0x1e>
 801489c:	6823      	ldr	r3, [r4, #0]
 801489e:	b103      	cbz	r3, 80148a2 <_write_r+0x1e>
 80148a0:	602b      	str	r3, [r5, #0]
 80148a2:	bd38      	pop	{r3, r4, r5, pc}
 80148a4:	2000498c 	.word	0x2000498c

080148a8 <_close_r>:
 80148a8:	b538      	push	{r3, r4, r5, lr}
 80148aa:	4c06      	ldr	r4, [pc, #24]	; (80148c4 <_close_r+0x1c>)
 80148ac:	2300      	movs	r3, #0
 80148ae:	4605      	mov	r5, r0
 80148b0:	4608      	mov	r0, r1
 80148b2:	6023      	str	r3, [r4, #0]
 80148b4:	f7ef fd3e 	bl	8004334 <_close>
 80148b8:	1c43      	adds	r3, r0, #1
 80148ba:	d102      	bne.n	80148c2 <_close_r+0x1a>
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	b103      	cbz	r3, 80148c2 <_close_r+0x1a>
 80148c0:	602b      	str	r3, [r5, #0]
 80148c2:	bd38      	pop	{r3, r4, r5, pc}
 80148c4:	2000498c 	.word	0x2000498c

080148c8 <_fstat_r>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	4c07      	ldr	r4, [pc, #28]	; (80148e8 <_fstat_r+0x20>)
 80148cc:	2300      	movs	r3, #0
 80148ce:	4605      	mov	r5, r0
 80148d0:	4608      	mov	r0, r1
 80148d2:	4611      	mov	r1, r2
 80148d4:	6023      	str	r3, [r4, #0]
 80148d6:	f7ef fd39 	bl	800434c <_fstat>
 80148da:	1c43      	adds	r3, r0, #1
 80148dc:	d102      	bne.n	80148e4 <_fstat_r+0x1c>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	b103      	cbz	r3, 80148e4 <_fstat_r+0x1c>
 80148e2:	602b      	str	r3, [r5, #0]
 80148e4:	bd38      	pop	{r3, r4, r5, pc}
 80148e6:	bf00      	nop
 80148e8:	2000498c 	.word	0x2000498c

080148ec <_isatty_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4c06      	ldr	r4, [pc, #24]	; (8014908 <_isatty_r+0x1c>)
 80148f0:	2300      	movs	r3, #0
 80148f2:	4605      	mov	r5, r0
 80148f4:	4608      	mov	r0, r1
 80148f6:	6023      	str	r3, [r4, #0]
 80148f8:	f7ef fd38 	bl	800436c <_isatty>
 80148fc:	1c43      	adds	r3, r0, #1
 80148fe:	d102      	bne.n	8014906 <_isatty_r+0x1a>
 8014900:	6823      	ldr	r3, [r4, #0]
 8014902:	b103      	cbz	r3, 8014906 <_isatty_r+0x1a>
 8014904:	602b      	str	r3, [r5, #0]
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	2000498c 	.word	0x2000498c

0801490c <_lseek_r>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	4c07      	ldr	r4, [pc, #28]	; (801492c <_lseek_r+0x20>)
 8014910:	4605      	mov	r5, r0
 8014912:	4608      	mov	r0, r1
 8014914:	4611      	mov	r1, r2
 8014916:	2200      	movs	r2, #0
 8014918:	6022      	str	r2, [r4, #0]
 801491a:	461a      	mov	r2, r3
 801491c:	f7ef fd31 	bl	8004382 <_lseek>
 8014920:	1c43      	adds	r3, r0, #1
 8014922:	d102      	bne.n	801492a <_lseek_r+0x1e>
 8014924:	6823      	ldr	r3, [r4, #0]
 8014926:	b103      	cbz	r3, 801492a <_lseek_r+0x1e>
 8014928:	602b      	str	r3, [r5, #0]
 801492a:	bd38      	pop	{r3, r4, r5, pc}
 801492c:	2000498c 	.word	0x2000498c

08014930 <memmove>:
 8014930:	4288      	cmp	r0, r1
 8014932:	b510      	push	{r4, lr}
 8014934:	eb01 0302 	add.w	r3, r1, r2
 8014938:	d807      	bhi.n	801494a <memmove+0x1a>
 801493a:	1e42      	subs	r2, r0, #1
 801493c:	4299      	cmp	r1, r3
 801493e:	d00a      	beq.n	8014956 <memmove+0x26>
 8014940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014944:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014948:	e7f8      	b.n	801493c <memmove+0xc>
 801494a:	4283      	cmp	r3, r0
 801494c:	d9f5      	bls.n	801493a <memmove+0xa>
 801494e:	1881      	adds	r1, r0, r2
 8014950:	1ad2      	subs	r2, r2, r3
 8014952:	42d3      	cmn	r3, r2
 8014954:	d100      	bne.n	8014958 <memmove+0x28>
 8014956:	bd10      	pop	{r4, pc}
 8014958:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801495c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014960:	e7f7      	b.n	8014952 <memmove+0x22>

08014962 <__malloc_lock>:
 8014962:	4770      	bx	lr

08014964 <__malloc_unlock>:
 8014964:	4770      	bx	lr

08014966 <_realloc_r>:
 8014966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014968:	4607      	mov	r7, r0
 801496a:	4614      	mov	r4, r2
 801496c:	460e      	mov	r6, r1
 801496e:	b921      	cbnz	r1, 801497a <_realloc_r+0x14>
 8014970:	4611      	mov	r1, r2
 8014972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014976:	f7ff bab1 	b.w	8013edc <_malloc_r>
 801497a:	b922      	cbnz	r2, 8014986 <_realloc_r+0x20>
 801497c:	f7ff fa60 	bl	8013e40 <_free_r>
 8014980:	4625      	mov	r5, r4
 8014982:	4628      	mov	r0, r5
 8014984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014986:	f000 f827 	bl	80149d8 <_malloc_usable_size_r>
 801498a:	42a0      	cmp	r0, r4
 801498c:	d20f      	bcs.n	80149ae <_realloc_r+0x48>
 801498e:	4621      	mov	r1, r4
 8014990:	4638      	mov	r0, r7
 8014992:	f7ff faa3 	bl	8013edc <_malloc_r>
 8014996:	4605      	mov	r5, r0
 8014998:	2800      	cmp	r0, #0
 801499a:	d0f2      	beq.n	8014982 <_realloc_r+0x1c>
 801499c:	4631      	mov	r1, r6
 801499e:	4622      	mov	r2, r4
 80149a0:	f7fe fd91 	bl	80134c6 <memcpy>
 80149a4:	4631      	mov	r1, r6
 80149a6:	4638      	mov	r0, r7
 80149a8:	f7ff fa4a 	bl	8013e40 <_free_r>
 80149ac:	e7e9      	b.n	8014982 <_realloc_r+0x1c>
 80149ae:	4635      	mov	r5, r6
 80149b0:	e7e7      	b.n	8014982 <_realloc_r+0x1c>
	...

080149b4 <_read_r>:
 80149b4:	b538      	push	{r3, r4, r5, lr}
 80149b6:	4c07      	ldr	r4, [pc, #28]	; (80149d4 <_read_r+0x20>)
 80149b8:	4605      	mov	r5, r0
 80149ba:	4608      	mov	r0, r1
 80149bc:	4611      	mov	r1, r2
 80149be:	2200      	movs	r2, #0
 80149c0:	6022      	str	r2, [r4, #0]
 80149c2:	461a      	mov	r2, r3
 80149c4:	f7ef fc7d 	bl	80042c2 <_read>
 80149c8:	1c43      	adds	r3, r0, #1
 80149ca:	d102      	bne.n	80149d2 <_read_r+0x1e>
 80149cc:	6823      	ldr	r3, [r4, #0]
 80149ce:	b103      	cbz	r3, 80149d2 <_read_r+0x1e>
 80149d0:	602b      	str	r3, [r5, #0]
 80149d2:	bd38      	pop	{r3, r4, r5, pc}
 80149d4:	2000498c 	.word	0x2000498c

080149d8 <_malloc_usable_size_r>:
 80149d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149dc:	1f18      	subs	r0, r3, #4
 80149de:	2b00      	cmp	r3, #0
 80149e0:	bfbc      	itt	lt
 80149e2:	580b      	ldrlt	r3, [r1, r0]
 80149e4:	18c0      	addlt	r0, r0, r3
 80149e6:	4770      	bx	lr

080149e8 <trunc>:
 80149e8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80149ec:	ec5c bb10 	vmov	fp, ip, d0
 80149f0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80149f4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80149f8:	2913      	cmp	r1, #19
 80149fa:	4664      	mov	r4, ip
 80149fc:	dc11      	bgt.n	8014a22 <trunc+0x3a>
 80149fe:	2900      	cmp	r1, #0
 8014a00:	bfa7      	ittee	ge
 8014a02:	4b15      	ldrge	r3, [pc, #84]	; (8014a58 <trunc+0x70>)
 8014a04:	fa43 f101 	asrge.w	r1, r3, r1
 8014a08:	2200      	movlt	r2, #0
 8014a0a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8014a0e:	bfa4      	itt	ge
 8014a10:	2200      	movge	r2, #0
 8014a12:	ea2c 0301 	bicge.w	r3, ip, r1
 8014a16:	4693      	mov	fp, r2
 8014a18:	469c      	mov	ip, r3
 8014a1a:	ec4c bb10 	vmov	d0, fp, ip
 8014a1e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8014a22:	2933      	cmp	r1, #51	; 0x33
 8014a24:	dd0d      	ble.n	8014a42 <trunc+0x5a>
 8014a26:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014a2a:	d1f6      	bne.n	8014a1a <trunc+0x32>
 8014a2c:	4663      	mov	r3, ip
 8014a2e:	ee10 2a10 	vmov	r2, s0
 8014a32:	ee10 0a10 	vmov	r0, s0
 8014a36:	4621      	mov	r1, r4
 8014a38:	f7eb fc28 	bl	800028c <__adddf3>
 8014a3c:	4683      	mov	fp, r0
 8014a3e:	468c      	mov	ip, r1
 8014a40:	e7eb      	b.n	8014a1a <trunc+0x32>
 8014a42:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8014a46:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4a:	fa23 f000 	lsr.w	r0, r3, r0
 8014a4e:	ea2b 0600 	bic.w	r6, fp, r0
 8014a52:	46b3      	mov	fp, r6
 8014a54:	46a4      	mov	ip, r4
 8014a56:	e7e0      	b.n	8014a1a <trunc+0x32>
 8014a58:	000fffff 	.word	0x000fffff

08014a5c <pow>:
 8014a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a60:	ed2d 8b04 	vpush	{d8-d9}
 8014a64:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014d38 <pow+0x2dc>
 8014a68:	b08d      	sub	sp, #52	; 0x34
 8014a6a:	ec57 6b10 	vmov	r6, r7, d0
 8014a6e:	ec55 4b11 	vmov	r4, r5, d1
 8014a72:	f000 f965 	bl	8014d40 <__ieee754_pow>
 8014a76:	f999 3000 	ldrsb.w	r3, [r9]
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8014a82:	eef0 8a60 	vmov.f32	s17, s1
 8014a86:	46c8      	mov	r8, r9
 8014a88:	d05f      	beq.n	8014b4a <pow+0xee>
 8014a8a:	4622      	mov	r2, r4
 8014a8c:	462b      	mov	r3, r5
 8014a8e:	4620      	mov	r0, r4
 8014a90:	4629      	mov	r1, r5
 8014a92:	f7ec f84b 	bl	8000b2c <__aeabi_dcmpun>
 8014a96:	4683      	mov	fp, r0
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d156      	bne.n	8014b4a <pow+0xee>
 8014a9c:	4632      	mov	r2, r6
 8014a9e:	463b      	mov	r3, r7
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	4639      	mov	r1, r7
 8014aa4:	f7ec f842 	bl	8000b2c <__aeabi_dcmpun>
 8014aa8:	9001      	str	r0, [sp, #4]
 8014aaa:	b1e8      	cbz	r0, 8014ae8 <pow+0x8c>
 8014aac:	2200      	movs	r2, #0
 8014aae:	2300      	movs	r3, #0
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	4629      	mov	r1, r5
 8014ab4:	f7ec f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d046      	beq.n	8014b4a <pow+0xee>
 8014abc:	2301      	movs	r3, #1
 8014abe:	9302      	str	r3, [sp, #8]
 8014ac0:	4b96      	ldr	r3, [pc, #600]	; (8014d1c <pow+0x2c0>)
 8014ac2:	9303      	str	r3, [sp, #12]
 8014ac4:	4b96      	ldr	r3, [pc, #600]	; (8014d20 <pow+0x2c4>)
 8014ac6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014aca:	2200      	movs	r2, #0
 8014acc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014ad0:	9b00      	ldr	r3, [sp, #0]
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014ad8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014adc:	d033      	beq.n	8014b46 <pow+0xea>
 8014ade:	a802      	add	r0, sp, #8
 8014ae0:	f000 fefd 	bl	80158de <matherr>
 8014ae4:	bb48      	cbnz	r0, 8014b3a <pow+0xde>
 8014ae6:	e05d      	b.n	8014ba4 <pow+0x148>
 8014ae8:	f04f 0a00 	mov.w	sl, #0
 8014aec:	f04f 0b00 	mov.w	fp, #0
 8014af0:	4652      	mov	r2, sl
 8014af2:	465b      	mov	r3, fp
 8014af4:	4630      	mov	r0, r6
 8014af6:	4639      	mov	r1, r7
 8014af8:	f7eb ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8014afc:	ec4b ab19 	vmov	d9, sl, fp
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d054      	beq.n	8014bae <pow+0x152>
 8014b04:	4652      	mov	r2, sl
 8014b06:	465b      	mov	r3, fp
 8014b08:	4620      	mov	r0, r4
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	f7eb ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b10:	4680      	mov	r8, r0
 8014b12:	b318      	cbz	r0, 8014b5c <pow+0x100>
 8014b14:	2301      	movs	r3, #1
 8014b16:	9302      	str	r3, [sp, #8]
 8014b18:	4b80      	ldr	r3, [pc, #512]	; (8014d1c <pow+0x2c0>)
 8014b1a:	9303      	str	r3, [sp, #12]
 8014b1c:	9b01      	ldr	r3, [sp, #4]
 8014b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014b20:	9b00      	ldr	r3, [sp, #0]
 8014b22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d0d5      	beq.n	8014ade <pow+0x82>
 8014b32:	4b7b      	ldr	r3, [pc, #492]	; (8014d20 <pow+0x2c4>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b3c:	b11b      	cbz	r3, 8014b46 <pow+0xea>
 8014b3e:	f7fe fc89 	bl	8013454 <__errno>
 8014b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b44:	6003      	str	r3, [r0, #0]
 8014b46:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8014b4e:	eef0 0a68 	vmov.f32	s1, s17
 8014b52:	b00d      	add	sp, #52	; 0x34
 8014b54:	ecbd 8b04 	vpop	{d8-d9}
 8014b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5c:	ec45 4b10 	vmov	d0, r4, r5
 8014b60:	f000 feb5 	bl	80158ce <finite>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	d0f0      	beq.n	8014b4a <pow+0xee>
 8014b68:	4652      	mov	r2, sl
 8014b6a:	465b      	mov	r3, fp
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	4629      	mov	r1, r5
 8014b70:	f7eb ffb4 	bl	8000adc <__aeabi_dcmplt>
 8014b74:	2800      	cmp	r0, #0
 8014b76:	d0e8      	beq.n	8014b4a <pow+0xee>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	9302      	str	r3, [sp, #8]
 8014b7c:	4b67      	ldr	r3, [pc, #412]	; (8014d1c <pow+0x2c0>)
 8014b7e:	9303      	str	r3, [sp, #12]
 8014b80:	f999 3000 	ldrsb.w	r3, [r9]
 8014b84:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014b88:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b8c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b90:	b913      	cbnz	r3, 8014b98 <pow+0x13c>
 8014b92:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014b96:	e7a2      	b.n	8014ade <pow+0x82>
 8014b98:	4962      	ldr	r1, [pc, #392]	; (8014d24 <pow+0x2c8>)
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ba0:	2b02      	cmp	r3, #2
 8014ba2:	d19c      	bne.n	8014ade <pow+0x82>
 8014ba4:	f7fe fc56 	bl	8013454 <__errno>
 8014ba8:	2321      	movs	r3, #33	; 0x21
 8014baa:	6003      	str	r3, [r0, #0]
 8014bac:	e7c5      	b.n	8014b3a <pow+0xde>
 8014bae:	eeb0 0a48 	vmov.f32	s0, s16
 8014bb2:	eef0 0a68 	vmov.f32	s1, s17
 8014bb6:	f000 fe8a 	bl	80158ce <finite>
 8014bba:	9000      	str	r0, [sp, #0]
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	f040 8081 	bne.w	8014cc4 <pow+0x268>
 8014bc2:	ec47 6b10 	vmov	d0, r6, r7
 8014bc6:	f000 fe82 	bl	80158ce <finite>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d07a      	beq.n	8014cc4 <pow+0x268>
 8014bce:	ec45 4b10 	vmov	d0, r4, r5
 8014bd2:	f000 fe7c 	bl	80158ce <finite>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d074      	beq.n	8014cc4 <pow+0x268>
 8014bda:	ec53 2b18 	vmov	r2, r3, d8
 8014bde:	ee18 0a10 	vmov	r0, s16
 8014be2:	4619      	mov	r1, r3
 8014be4:	f7eb ffa2 	bl	8000b2c <__aeabi_dcmpun>
 8014be8:	f999 9000 	ldrsb.w	r9, [r9]
 8014bec:	4b4b      	ldr	r3, [pc, #300]	; (8014d1c <pow+0x2c0>)
 8014bee:	b1b0      	cbz	r0, 8014c1e <pow+0x1c2>
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014bf6:	9b00      	ldr	r3, [sp, #0]
 8014bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8014bfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014bfe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c02:	f1b9 0f00 	cmp.w	r9, #0
 8014c06:	d0c4      	beq.n	8014b92 <pow+0x136>
 8014c08:	4652      	mov	r2, sl
 8014c0a:	465b      	mov	r3, fp
 8014c0c:	4650      	mov	r0, sl
 8014c0e:	4659      	mov	r1, fp
 8014c10:	f7eb fe1c 	bl	800084c <__aeabi_ddiv>
 8014c14:	f1b9 0f02 	cmp.w	r9, #2
 8014c18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014c1c:	e7c1      	b.n	8014ba2 <pow+0x146>
 8014c1e:	2203      	movs	r2, #3
 8014c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c24:	900a      	str	r0, [sp, #40]	; 0x28
 8014c26:	4629      	mov	r1, r5
 8014c28:	4620      	mov	r0, r4
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	4b3e      	ldr	r3, [pc, #248]	; (8014d28 <pow+0x2cc>)
 8014c2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014c36:	f7eb fcdf 	bl	80005f8 <__aeabi_dmul>
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	460d      	mov	r5, r1
 8014c3e:	f1b9 0f00 	cmp.w	r9, #0
 8014c42:	d124      	bne.n	8014c8e <pow+0x232>
 8014c44:	4b39      	ldr	r3, [pc, #228]	; (8014d2c <pow+0x2d0>)
 8014c46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014c4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4652      	mov	r2, sl
 8014c52:	465b      	mov	r3, fp
 8014c54:	4639      	mov	r1, r7
 8014c56:	f7eb ff41 	bl	8000adc <__aeabi_dcmplt>
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	d056      	beq.n	8014d0c <pow+0x2b0>
 8014c5e:	ec45 4b10 	vmov	d0, r4, r5
 8014c62:	f000 fe49 	bl	80158f8 <rint>
 8014c66:	4622      	mov	r2, r4
 8014c68:	462b      	mov	r3, r5
 8014c6a:	ec51 0b10 	vmov	r0, r1, d0
 8014c6e:	f7eb ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c72:	b920      	cbnz	r0, 8014c7e <pow+0x222>
 8014c74:	4b2e      	ldr	r3, [pc, #184]	; (8014d30 <pow+0x2d4>)
 8014c76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014c7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c7e:	f998 3000 	ldrsb.w	r3, [r8]
 8014c82:	2b02      	cmp	r3, #2
 8014c84:	d142      	bne.n	8014d0c <pow+0x2b0>
 8014c86:	f7fe fbe5 	bl	8013454 <__errno>
 8014c8a:	2322      	movs	r3, #34	; 0x22
 8014c8c:	e78d      	b.n	8014baa <pow+0x14e>
 8014c8e:	4b29      	ldr	r3, [pc, #164]	; (8014d34 <pow+0x2d8>)
 8014c90:	2200      	movs	r2, #0
 8014c92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c96:	4630      	mov	r0, r6
 8014c98:	4652      	mov	r2, sl
 8014c9a:	465b      	mov	r3, fp
 8014c9c:	4639      	mov	r1, r7
 8014c9e:	f7eb ff1d 	bl	8000adc <__aeabi_dcmplt>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	d0eb      	beq.n	8014c7e <pow+0x222>
 8014ca6:	ec45 4b10 	vmov	d0, r4, r5
 8014caa:	f000 fe25 	bl	80158f8 <rint>
 8014cae:	4622      	mov	r2, r4
 8014cb0:	462b      	mov	r3, r5
 8014cb2:	ec51 0b10 	vmov	r0, r1, d0
 8014cb6:	f7eb ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d1df      	bne.n	8014c7e <pow+0x222>
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	4b18      	ldr	r3, [pc, #96]	; (8014d24 <pow+0x2c8>)
 8014cc2:	e7da      	b.n	8014c7a <pow+0x21e>
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	ec51 0b18 	vmov	r0, r1, d8
 8014ccc:	f7eb fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	f43f af3a 	beq.w	8014b4a <pow+0xee>
 8014cd6:	ec47 6b10 	vmov	d0, r6, r7
 8014cda:	f000 fdf8 	bl	80158ce <finite>
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	f43f af33 	beq.w	8014b4a <pow+0xee>
 8014ce4:	ec45 4b10 	vmov	d0, r4, r5
 8014ce8:	f000 fdf1 	bl	80158ce <finite>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	f43f af2c 	beq.w	8014b4a <pow+0xee>
 8014cf2:	2304      	movs	r3, #4
 8014cf4:	9302      	str	r3, [sp, #8]
 8014cf6:	4b09      	ldr	r3, [pc, #36]	; (8014d1c <pow+0x2c0>)
 8014cf8:	9303      	str	r3, [sp, #12]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8014cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014d02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014d06:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014d0a:	e7b8      	b.n	8014c7e <pow+0x222>
 8014d0c:	a802      	add	r0, sp, #8
 8014d0e:	f000 fde6 	bl	80158de <matherr>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	f47f af11 	bne.w	8014b3a <pow+0xde>
 8014d18:	e7b5      	b.n	8014c86 <pow+0x22a>
 8014d1a:	bf00      	nop
 8014d1c:	08016f76 	.word	0x08016f76
 8014d20:	3ff00000 	.word	0x3ff00000
 8014d24:	fff00000 	.word	0xfff00000
 8014d28:	3fe00000 	.word	0x3fe00000
 8014d2c:	47efffff 	.word	0x47efffff
 8014d30:	c7efffff 	.word	0xc7efffff
 8014d34:	7ff00000 	.word	0x7ff00000
 8014d38:	20000664 	.word	0x20000664
 8014d3c:	00000000 	.word	0x00000000

08014d40 <__ieee754_pow>:
 8014d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	b091      	sub	sp, #68	; 0x44
 8014d46:	ed8d 1b00 	vstr	d1, [sp]
 8014d4a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014d4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014d52:	ea58 0302 	orrs.w	r3, r8, r2
 8014d56:	ec57 6b10 	vmov	r6, r7, d0
 8014d5a:	f000 84be 	beq.w	80156da <__ieee754_pow+0x99a>
 8014d5e:	4b7a      	ldr	r3, [pc, #488]	; (8014f48 <__ieee754_pow+0x208>)
 8014d60:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014d64:	429c      	cmp	r4, r3
 8014d66:	463d      	mov	r5, r7
 8014d68:	ee10 aa10 	vmov	sl, s0
 8014d6c:	dc09      	bgt.n	8014d82 <__ieee754_pow+0x42>
 8014d6e:	d103      	bne.n	8014d78 <__ieee754_pow+0x38>
 8014d70:	b93e      	cbnz	r6, 8014d82 <__ieee754_pow+0x42>
 8014d72:	45a0      	cmp	r8, r4
 8014d74:	dc0d      	bgt.n	8014d92 <__ieee754_pow+0x52>
 8014d76:	e001      	b.n	8014d7c <__ieee754_pow+0x3c>
 8014d78:	4598      	cmp	r8, r3
 8014d7a:	dc02      	bgt.n	8014d82 <__ieee754_pow+0x42>
 8014d7c:	4598      	cmp	r8, r3
 8014d7e:	d10e      	bne.n	8014d9e <__ieee754_pow+0x5e>
 8014d80:	b16a      	cbz	r2, 8014d9e <__ieee754_pow+0x5e>
 8014d82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014d86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014d8a:	ea54 030a 	orrs.w	r3, r4, sl
 8014d8e:	f000 84a4 	beq.w	80156da <__ieee754_pow+0x99a>
 8014d92:	486e      	ldr	r0, [pc, #440]	; (8014f4c <__ieee754_pow+0x20c>)
 8014d94:	b011      	add	sp, #68	; 0x44
 8014d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9a:	f000 bda5 	b.w	80158e8 <nan>
 8014d9e:	2d00      	cmp	r5, #0
 8014da0:	da53      	bge.n	8014e4a <__ieee754_pow+0x10a>
 8014da2:	4b6b      	ldr	r3, [pc, #428]	; (8014f50 <__ieee754_pow+0x210>)
 8014da4:	4598      	cmp	r8, r3
 8014da6:	dc4d      	bgt.n	8014e44 <__ieee754_pow+0x104>
 8014da8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014dac:	4598      	cmp	r8, r3
 8014dae:	dd4c      	ble.n	8014e4a <__ieee754_pow+0x10a>
 8014db0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014db4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014db8:	2b14      	cmp	r3, #20
 8014dba:	dd26      	ble.n	8014e0a <__ieee754_pow+0xca>
 8014dbc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014dc0:	fa22 f103 	lsr.w	r1, r2, r3
 8014dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8014dc8:	4293      	cmp	r3, r2
 8014dca:	d13e      	bne.n	8014e4a <__ieee754_pow+0x10a>
 8014dcc:	f001 0101 	and.w	r1, r1, #1
 8014dd0:	f1c1 0b02 	rsb	fp, r1, #2
 8014dd4:	2a00      	cmp	r2, #0
 8014dd6:	d15b      	bne.n	8014e90 <__ieee754_pow+0x150>
 8014dd8:	4b5b      	ldr	r3, [pc, #364]	; (8014f48 <__ieee754_pow+0x208>)
 8014dda:	4598      	cmp	r8, r3
 8014ddc:	d124      	bne.n	8014e28 <__ieee754_pow+0xe8>
 8014dde:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014de2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014de6:	ea53 030a 	orrs.w	r3, r3, sl
 8014dea:	f000 8476 	beq.w	80156da <__ieee754_pow+0x99a>
 8014dee:	4b59      	ldr	r3, [pc, #356]	; (8014f54 <__ieee754_pow+0x214>)
 8014df0:	429c      	cmp	r4, r3
 8014df2:	dd2d      	ble.n	8014e50 <__ieee754_pow+0x110>
 8014df4:	f1b9 0f00 	cmp.w	r9, #0
 8014df8:	f280 8473 	bge.w	80156e2 <__ieee754_pow+0x9a2>
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	2100      	movs	r1, #0
 8014e00:	ec41 0b10 	vmov	d0, r0, r1
 8014e04:	b011      	add	sp, #68	; 0x44
 8014e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e0a:	2a00      	cmp	r2, #0
 8014e0c:	d13e      	bne.n	8014e8c <__ieee754_pow+0x14c>
 8014e0e:	f1c3 0314 	rsb	r3, r3, #20
 8014e12:	fa48 f103 	asr.w	r1, r8, r3
 8014e16:	fa01 f303 	lsl.w	r3, r1, r3
 8014e1a:	4543      	cmp	r3, r8
 8014e1c:	f040 8469 	bne.w	80156f2 <__ieee754_pow+0x9b2>
 8014e20:	f001 0101 	and.w	r1, r1, #1
 8014e24:	f1c1 0b02 	rsb	fp, r1, #2
 8014e28:	4b4b      	ldr	r3, [pc, #300]	; (8014f58 <__ieee754_pow+0x218>)
 8014e2a:	4598      	cmp	r8, r3
 8014e2c:	d118      	bne.n	8014e60 <__ieee754_pow+0x120>
 8014e2e:	f1b9 0f00 	cmp.w	r9, #0
 8014e32:	f280 845a 	bge.w	80156ea <__ieee754_pow+0x9aa>
 8014e36:	4948      	ldr	r1, [pc, #288]	; (8014f58 <__ieee754_pow+0x218>)
 8014e38:	4632      	mov	r2, r6
 8014e3a:	463b      	mov	r3, r7
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	f7eb fd05 	bl	800084c <__aeabi_ddiv>
 8014e42:	e7dd      	b.n	8014e00 <__ieee754_pow+0xc0>
 8014e44:	f04f 0b02 	mov.w	fp, #2
 8014e48:	e7c4      	b.n	8014dd4 <__ieee754_pow+0x94>
 8014e4a:	f04f 0b00 	mov.w	fp, #0
 8014e4e:	e7c1      	b.n	8014dd4 <__ieee754_pow+0x94>
 8014e50:	f1b9 0f00 	cmp.w	r9, #0
 8014e54:	dad2      	bge.n	8014dfc <__ieee754_pow+0xbc>
 8014e56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014e5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014e5e:	e7cf      	b.n	8014e00 <__ieee754_pow+0xc0>
 8014e60:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014e64:	d106      	bne.n	8014e74 <__ieee754_pow+0x134>
 8014e66:	4632      	mov	r2, r6
 8014e68:	463b      	mov	r3, r7
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	4619      	mov	r1, r3
 8014e6e:	f7eb fbc3 	bl	80005f8 <__aeabi_dmul>
 8014e72:	e7c5      	b.n	8014e00 <__ieee754_pow+0xc0>
 8014e74:	4b39      	ldr	r3, [pc, #228]	; (8014f5c <__ieee754_pow+0x21c>)
 8014e76:	4599      	cmp	r9, r3
 8014e78:	d10a      	bne.n	8014e90 <__ieee754_pow+0x150>
 8014e7a:	2d00      	cmp	r5, #0
 8014e7c:	db08      	blt.n	8014e90 <__ieee754_pow+0x150>
 8014e7e:	ec47 6b10 	vmov	d0, r6, r7
 8014e82:	b011      	add	sp, #68	; 0x44
 8014e84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e88:	f000 bc68 	b.w	801575c <__ieee754_sqrt>
 8014e8c:	f04f 0b00 	mov.w	fp, #0
 8014e90:	ec47 6b10 	vmov	d0, r6, r7
 8014e94:	f000 fd12 	bl	80158bc <fabs>
 8014e98:	ec51 0b10 	vmov	r0, r1, d0
 8014e9c:	f1ba 0f00 	cmp.w	sl, #0
 8014ea0:	d127      	bne.n	8014ef2 <__ieee754_pow+0x1b2>
 8014ea2:	b124      	cbz	r4, 8014eae <__ieee754_pow+0x16e>
 8014ea4:	4b2c      	ldr	r3, [pc, #176]	; (8014f58 <__ieee754_pow+0x218>)
 8014ea6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d121      	bne.n	8014ef2 <__ieee754_pow+0x1b2>
 8014eae:	f1b9 0f00 	cmp.w	r9, #0
 8014eb2:	da05      	bge.n	8014ec0 <__ieee754_pow+0x180>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	460b      	mov	r3, r1
 8014eb8:	2000      	movs	r0, #0
 8014eba:	4927      	ldr	r1, [pc, #156]	; (8014f58 <__ieee754_pow+0x218>)
 8014ebc:	f7eb fcc6 	bl	800084c <__aeabi_ddiv>
 8014ec0:	2d00      	cmp	r5, #0
 8014ec2:	da9d      	bge.n	8014e00 <__ieee754_pow+0xc0>
 8014ec4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014ec8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014ecc:	ea54 030b 	orrs.w	r3, r4, fp
 8014ed0:	d108      	bne.n	8014ee4 <__ieee754_pow+0x1a4>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	4610      	mov	r0, r2
 8014ed8:	4619      	mov	r1, r3
 8014eda:	f7eb f9d5 	bl	8000288 <__aeabi_dsub>
 8014ede:	4602      	mov	r2, r0
 8014ee0:	460b      	mov	r3, r1
 8014ee2:	e7ac      	b.n	8014e3e <__ieee754_pow+0xfe>
 8014ee4:	f1bb 0f01 	cmp.w	fp, #1
 8014ee8:	d18a      	bne.n	8014e00 <__ieee754_pow+0xc0>
 8014eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eee:	4619      	mov	r1, r3
 8014ef0:	e786      	b.n	8014e00 <__ieee754_pow+0xc0>
 8014ef2:	0fed      	lsrs	r5, r5, #31
 8014ef4:	1e6b      	subs	r3, r5, #1
 8014ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8014ef8:	ea5b 0303 	orrs.w	r3, fp, r3
 8014efc:	d102      	bne.n	8014f04 <__ieee754_pow+0x1c4>
 8014efe:	4632      	mov	r2, r6
 8014f00:	463b      	mov	r3, r7
 8014f02:	e7e8      	b.n	8014ed6 <__ieee754_pow+0x196>
 8014f04:	4b16      	ldr	r3, [pc, #88]	; (8014f60 <__ieee754_pow+0x220>)
 8014f06:	4598      	cmp	r8, r3
 8014f08:	f340 80fe 	ble.w	8015108 <__ieee754_pow+0x3c8>
 8014f0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014f10:	4598      	cmp	r8, r3
 8014f12:	dd0a      	ble.n	8014f2a <__ieee754_pow+0x1ea>
 8014f14:	4b0f      	ldr	r3, [pc, #60]	; (8014f54 <__ieee754_pow+0x214>)
 8014f16:	429c      	cmp	r4, r3
 8014f18:	dc0d      	bgt.n	8014f36 <__ieee754_pow+0x1f6>
 8014f1a:	f1b9 0f00 	cmp.w	r9, #0
 8014f1e:	f6bf af6d 	bge.w	8014dfc <__ieee754_pow+0xbc>
 8014f22:	a307      	add	r3, pc, #28	; (adr r3, 8014f40 <__ieee754_pow+0x200>)
 8014f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f28:	e79f      	b.n	8014e6a <__ieee754_pow+0x12a>
 8014f2a:	4b0e      	ldr	r3, [pc, #56]	; (8014f64 <__ieee754_pow+0x224>)
 8014f2c:	429c      	cmp	r4, r3
 8014f2e:	ddf4      	ble.n	8014f1a <__ieee754_pow+0x1da>
 8014f30:	4b09      	ldr	r3, [pc, #36]	; (8014f58 <__ieee754_pow+0x218>)
 8014f32:	429c      	cmp	r4, r3
 8014f34:	dd18      	ble.n	8014f68 <__ieee754_pow+0x228>
 8014f36:	f1b9 0f00 	cmp.w	r9, #0
 8014f3a:	dcf2      	bgt.n	8014f22 <__ieee754_pow+0x1e2>
 8014f3c:	e75e      	b.n	8014dfc <__ieee754_pow+0xbc>
 8014f3e:	bf00      	nop
 8014f40:	8800759c 	.word	0x8800759c
 8014f44:	7e37e43c 	.word	0x7e37e43c
 8014f48:	7ff00000 	.word	0x7ff00000
 8014f4c:	08016e47 	.word	0x08016e47
 8014f50:	433fffff 	.word	0x433fffff
 8014f54:	3fefffff 	.word	0x3fefffff
 8014f58:	3ff00000 	.word	0x3ff00000
 8014f5c:	3fe00000 	.word	0x3fe00000
 8014f60:	41e00000 	.word	0x41e00000
 8014f64:	3feffffe 	.word	0x3feffffe
 8014f68:	2200      	movs	r2, #0
 8014f6a:	4b63      	ldr	r3, [pc, #396]	; (80150f8 <__ieee754_pow+0x3b8>)
 8014f6c:	f7eb f98c 	bl	8000288 <__aeabi_dsub>
 8014f70:	a355      	add	r3, pc, #340	; (adr r3, 80150c8 <__ieee754_pow+0x388>)
 8014f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f76:	4604      	mov	r4, r0
 8014f78:	460d      	mov	r5, r1
 8014f7a:	f7eb fb3d 	bl	80005f8 <__aeabi_dmul>
 8014f7e:	a354      	add	r3, pc, #336	; (adr r3, 80150d0 <__ieee754_pow+0x390>)
 8014f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f84:	4606      	mov	r6, r0
 8014f86:	460f      	mov	r7, r1
 8014f88:	4620      	mov	r0, r4
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	f7eb fb34 	bl	80005f8 <__aeabi_dmul>
 8014f90:	2200      	movs	r2, #0
 8014f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f96:	4b59      	ldr	r3, [pc, #356]	; (80150fc <__ieee754_pow+0x3bc>)
 8014f98:	4620      	mov	r0, r4
 8014f9a:	4629      	mov	r1, r5
 8014f9c:	f7eb fb2c 	bl	80005f8 <__aeabi_dmul>
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	460b      	mov	r3, r1
 8014fa4:	a14c      	add	r1, pc, #304	; (adr r1, 80150d8 <__ieee754_pow+0x398>)
 8014fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014faa:	f7eb f96d 	bl	8000288 <__aeabi_dsub>
 8014fae:	4622      	mov	r2, r4
 8014fb0:	462b      	mov	r3, r5
 8014fb2:	f7eb fb21 	bl	80005f8 <__aeabi_dmul>
 8014fb6:	4602      	mov	r2, r0
 8014fb8:	460b      	mov	r3, r1
 8014fba:	2000      	movs	r0, #0
 8014fbc:	4950      	ldr	r1, [pc, #320]	; (8015100 <__ieee754_pow+0x3c0>)
 8014fbe:	f7eb f963 	bl	8000288 <__aeabi_dsub>
 8014fc2:	4622      	mov	r2, r4
 8014fc4:	462b      	mov	r3, r5
 8014fc6:	4680      	mov	r8, r0
 8014fc8:	4689      	mov	r9, r1
 8014fca:	4620      	mov	r0, r4
 8014fcc:	4629      	mov	r1, r5
 8014fce:	f7eb fb13 	bl	80005f8 <__aeabi_dmul>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	4649      	mov	r1, r9
 8014fda:	f7eb fb0d 	bl	80005f8 <__aeabi_dmul>
 8014fde:	a340      	add	r3, pc, #256	; (adr r3, 80150e0 <__ieee754_pow+0x3a0>)
 8014fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe4:	f7eb fb08 	bl	80005f8 <__aeabi_dmul>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	460b      	mov	r3, r1
 8014fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ff0:	f7eb f94a 	bl	8000288 <__aeabi_dsub>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	460d      	mov	r5, r1
 8014ffc:	4630      	mov	r0, r6
 8014ffe:	4639      	mov	r1, r7
 8015000:	f7eb f944 	bl	800028c <__adddf3>
 8015004:	2000      	movs	r0, #0
 8015006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801500a:	4632      	mov	r2, r6
 801500c:	463b      	mov	r3, r7
 801500e:	f7eb f93b 	bl	8000288 <__aeabi_dsub>
 8015012:	4602      	mov	r2, r0
 8015014:	460b      	mov	r3, r1
 8015016:	4620      	mov	r0, r4
 8015018:	4629      	mov	r1, r5
 801501a:	f7eb f935 	bl	8000288 <__aeabi_dsub>
 801501e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015020:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015024:	4313      	orrs	r3, r2
 8015026:	4606      	mov	r6, r0
 8015028:	460f      	mov	r7, r1
 801502a:	f040 81eb 	bne.w	8015404 <__ieee754_pow+0x6c4>
 801502e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80150e8 <__ieee754_pow+0x3a8>
 8015032:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015036:	2400      	movs	r4, #0
 8015038:	4622      	mov	r2, r4
 801503a:	462b      	mov	r3, r5
 801503c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015040:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015044:	f7eb f920 	bl	8000288 <__aeabi_dsub>
 8015048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801504c:	f7eb fad4 	bl	80005f8 <__aeabi_dmul>
 8015050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015054:	4680      	mov	r8, r0
 8015056:	4689      	mov	r9, r1
 8015058:	4630      	mov	r0, r6
 801505a:	4639      	mov	r1, r7
 801505c:	f7eb facc 	bl	80005f8 <__aeabi_dmul>
 8015060:	4602      	mov	r2, r0
 8015062:	460b      	mov	r3, r1
 8015064:	4640      	mov	r0, r8
 8015066:	4649      	mov	r1, r9
 8015068:	f7eb f910 	bl	800028c <__adddf3>
 801506c:	4622      	mov	r2, r4
 801506e:	462b      	mov	r3, r5
 8015070:	4680      	mov	r8, r0
 8015072:	4689      	mov	r9, r1
 8015074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015078:	f7eb fabe 	bl	80005f8 <__aeabi_dmul>
 801507c:	460b      	mov	r3, r1
 801507e:	4604      	mov	r4, r0
 8015080:	460d      	mov	r5, r1
 8015082:	4602      	mov	r2, r0
 8015084:	4649      	mov	r1, r9
 8015086:	4640      	mov	r0, r8
 8015088:	e9cd 4500 	strd	r4, r5, [sp]
 801508c:	f7eb f8fe 	bl	800028c <__adddf3>
 8015090:	4b1c      	ldr	r3, [pc, #112]	; (8015104 <__ieee754_pow+0x3c4>)
 8015092:	4299      	cmp	r1, r3
 8015094:	4606      	mov	r6, r0
 8015096:	460f      	mov	r7, r1
 8015098:	468b      	mov	fp, r1
 801509a:	f340 82f7 	ble.w	801568c <__ieee754_pow+0x94c>
 801509e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80150a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80150a6:	4303      	orrs	r3, r0
 80150a8:	f000 81ea 	beq.w	8015480 <__ieee754_pow+0x740>
 80150ac:	a310      	add	r3, pc, #64	; (adr r3, 80150f0 <__ieee754_pow+0x3b0>)
 80150ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150b6:	f7eb fa9f 	bl	80005f8 <__aeabi_dmul>
 80150ba:	a30d      	add	r3, pc, #52	; (adr r3, 80150f0 <__ieee754_pow+0x3b0>)
 80150bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c0:	e6d5      	b.n	8014e6e <__ieee754_pow+0x12e>
 80150c2:	bf00      	nop
 80150c4:	f3af 8000 	nop.w
 80150c8:	60000000 	.word	0x60000000
 80150cc:	3ff71547 	.word	0x3ff71547
 80150d0:	f85ddf44 	.word	0xf85ddf44
 80150d4:	3e54ae0b 	.word	0x3e54ae0b
 80150d8:	55555555 	.word	0x55555555
 80150dc:	3fd55555 	.word	0x3fd55555
 80150e0:	652b82fe 	.word	0x652b82fe
 80150e4:	3ff71547 	.word	0x3ff71547
 80150e8:	00000000 	.word	0x00000000
 80150ec:	bff00000 	.word	0xbff00000
 80150f0:	8800759c 	.word	0x8800759c
 80150f4:	7e37e43c 	.word	0x7e37e43c
 80150f8:	3ff00000 	.word	0x3ff00000
 80150fc:	3fd00000 	.word	0x3fd00000
 8015100:	3fe00000 	.word	0x3fe00000
 8015104:	408fffff 	.word	0x408fffff
 8015108:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801510c:	f04f 0200 	mov.w	r2, #0
 8015110:	da05      	bge.n	801511e <__ieee754_pow+0x3de>
 8015112:	4bd3      	ldr	r3, [pc, #844]	; (8015460 <__ieee754_pow+0x720>)
 8015114:	f7eb fa70 	bl	80005f8 <__aeabi_dmul>
 8015118:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801511c:	460c      	mov	r4, r1
 801511e:	1523      	asrs	r3, r4, #20
 8015120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015124:	4413      	add	r3, r2
 8015126:	9309      	str	r3, [sp, #36]	; 0x24
 8015128:	4bce      	ldr	r3, [pc, #824]	; (8015464 <__ieee754_pow+0x724>)
 801512a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801512e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015132:	429c      	cmp	r4, r3
 8015134:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015138:	dd08      	ble.n	801514c <__ieee754_pow+0x40c>
 801513a:	4bcb      	ldr	r3, [pc, #812]	; (8015468 <__ieee754_pow+0x728>)
 801513c:	429c      	cmp	r4, r3
 801513e:	f340 815e 	ble.w	80153fe <__ieee754_pow+0x6be>
 8015142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015144:	3301      	adds	r3, #1
 8015146:	9309      	str	r3, [sp, #36]	; 0x24
 8015148:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801514c:	f04f 0a00 	mov.w	sl, #0
 8015150:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015154:	930c      	str	r3, [sp, #48]	; 0x30
 8015156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015158:	4bc4      	ldr	r3, [pc, #784]	; (801546c <__ieee754_pow+0x72c>)
 801515a:	4413      	add	r3, r2
 801515c:	ed93 7b00 	vldr	d7, [r3]
 8015160:	4629      	mov	r1, r5
 8015162:	ec53 2b17 	vmov	r2, r3, d7
 8015166:	ed8d 7b06 	vstr	d7, [sp, #24]
 801516a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801516e:	f7eb f88b 	bl	8000288 <__aeabi_dsub>
 8015172:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015176:	4606      	mov	r6, r0
 8015178:	460f      	mov	r7, r1
 801517a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801517e:	f7eb f885 	bl	800028c <__adddf3>
 8015182:	4602      	mov	r2, r0
 8015184:	460b      	mov	r3, r1
 8015186:	2000      	movs	r0, #0
 8015188:	49b9      	ldr	r1, [pc, #740]	; (8015470 <__ieee754_pow+0x730>)
 801518a:	f7eb fb5f 	bl	800084c <__aeabi_ddiv>
 801518e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015192:	4602      	mov	r2, r0
 8015194:	460b      	mov	r3, r1
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb fa2d 	bl	80005f8 <__aeabi_dmul>
 801519e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80151a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80151aa:	2300      	movs	r3, #0
 80151ac:	9302      	str	r3, [sp, #8]
 80151ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80151b2:	106d      	asrs	r5, r5, #1
 80151b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80151b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80151bc:	2200      	movs	r2, #0
 80151be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80151c2:	4640      	mov	r0, r8
 80151c4:	4649      	mov	r1, r9
 80151c6:	4614      	mov	r4, r2
 80151c8:	461d      	mov	r5, r3
 80151ca:	f7eb fa15 	bl	80005f8 <__aeabi_dmul>
 80151ce:	4602      	mov	r2, r0
 80151d0:	460b      	mov	r3, r1
 80151d2:	4630      	mov	r0, r6
 80151d4:	4639      	mov	r1, r7
 80151d6:	f7eb f857 	bl	8000288 <__aeabi_dsub>
 80151da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80151de:	4606      	mov	r6, r0
 80151e0:	460f      	mov	r7, r1
 80151e2:	4620      	mov	r0, r4
 80151e4:	4629      	mov	r1, r5
 80151e6:	f7eb f84f 	bl	8000288 <__aeabi_dsub>
 80151ea:	4602      	mov	r2, r0
 80151ec:	460b      	mov	r3, r1
 80151ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80151f2:	f7eb f849 	bl	8000288 <__aeabi_dsub>
 80151f6:	4642      	mov	r2, r8
 80151f8:	464b      	mov	r3, r9
 80151fa:	f7eb f9fd 	bl	80005f8 <__aeabi_dmul>
 80151fe:	4602      	mov	r2, r0
 8015200:	460b      	mov	r3, r1
 8015202:	4630      	mov	r0, r6
 8015204:	4639      	mov	r1, r7
 8015206:	f7eb f83f 	bl	8000288 <__aeabi_dsub>
 801520a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801520e:	f7eb f9f3 	bl	80005f8 <__aeabi_dmul>
 8015212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801521a:	4610      	mov	r0, r2
 801521c:	4619      	mov	r1, r3
 801521e:	f7eb f9eb 	bl	80005f8 <__aeabi_dmul>
 8015222:	a37b      	add	r3, pc, #492	; (adr r3, 8015410 <__ieee754_pow+0x6d0>)
 8015224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015228:	4604      	mov	r4, r0
 801522a:	460d      	mov	r5, r1
 801522c:	f7eb f9e4 	bl	80005f8 <__aeabi_dmul>
 8015230:	a379      	add	r3, pc, #484	; (adr r3, 8015418 <__ieee754_pow+0x6d8>)
 8015232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015236:	f7eb f829 	bl	800028c <__adddf3>
 801523a:	4622      	mov	r2, r4
 801523c:	462b      	mov	r3, r5
 801523e:	f7eb f9db 	bl	80005f8 <__aeabi_dmul>
 8015242:	a377      	add	r3, pc, #476	; (adr r3, 8015420 <__ieee754_pow+0x6e0>)
 8015244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015248:	f7eb f820 	bl	800028c <__adddf3>
 801524c:	4622      	mov	r2, r4
 801524e:	462b      	mov	r3, r5
 8015250:	f7eb f9d2 	bl	80005f8 <__aeabi_dmul>
 8015254:	a374      	add	r3, pc, #464	; (adr r3, 8015428 <__ieee754_pow+0x6e8>)
 8015256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525a:	f7eb f817 	bl	800028c <__adddf3>
 801525e:	4622      	mov	r2, r4
 8015260:	462b      	mov	r3, r5
 8015262:	f7eb f9c9 	bl	80005f8 <__aeabi_dmul>
 8015266:	a372      	add	r3, pc, #456	; (adr r3, 8015430 <__ieee754_pow+0x6f0>)
 8015268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526c:	f7eb f80e 	bl	800028c <__adddf3>
 8015270:	4622      	mov	r2, r4
 8015272:	462b      	mov	r3, r5
 8015274:	f7eb f9c0 	bl	80005f8 <__aeabi_dmul>
 8015278:	a36f      	add	r3, pc, #444	; (adr r3, 8015438 <__ieee754_pow+0x6f8>)
 801527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527e:	f7eb f805 	bl	800028c <__adddf3>
 8015282:	4622      	mov	r2, r4
 8015284:	4606      	mov	r6, r0
 8015286:	460f      	mov	r7, r1
 8015288:	462b      	mov	r3, r5
 801528a:	4620      	mov	r0, r4
 801528c:	4629      	mov	r1, r5
 801528e:	f7eb f9b3 	bl	80005f8 <__aeabi_dmul>
 8015292:	4602      	mov	r2, r0
 8015294:	460b      	mov	r3, r1
 8015296:	4630      	mov	r0, r6
 8015298:	4639      	mov	r1, r7
 801529a:	f7eb f9ad 	bl	80005f8 <__aeabi_dmul>
 801529e:	4642      	mov	r2, r8
 80152a0:	4604      	mov	r4, r0
 80152a2:	460d      	mov	r5, r1
 80152a4:	464b      	mov	r3, r9
 80152a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152aa:	f7ea ffef 	bl	800028c <__adddf3>
 80152ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80152b2:	f7eb f9a1 	bl	80005f8 <__aeabi_dmul>
 80152b6:	4622      	mov	r2, r4
 80152b8:	462b      	mov	r3, r5
 80152ba:	f7ea ffe7 	bl	800028c <__adddf3>
 80152be:	4642      	mov	r2, r8
 80152c0:	4606      	mov	r6, r0
 80152c2:	460f      	mov	r7, r1
 80152c4:	464b      	mov	r3, r9
 80152c6:	4640      	mov	r0, r8
 80152c8:	4649      	mov	r1, r9
 80152ca:	f7eb f995 	bl	80005f8 <__aeabi_dmul>
 80152ce:	2200      	movs	r2, #0
 80152d0:	4b68      	ldr	r3, [pc, #416]	; (8015474 <__ieee754_pow+0x734>)
 80152d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80152d6:	f7ea ffd9 	bl	800028c <__adddf3>
 80152da:	4632      	mov	r2, r6
 80152dc:	463b      	mov	r3, r7
 80152de:	f7ea ffd5 	bl	800028c <__adddf3>
 80152e2:	9802      	ldr	r0, [sp, #8]
 80152e4:	460d      	mov	r5, r1
 80152e6:	4604      	mov	r4, r0
 80152e8:	4602      	mov	r2, r0
 80152ea:	460b      	mov	r3, r1
 80152ec:	4640      	mov	r0, r8
 80152ee:	4649      	mov	r1, r9
 80152f0:	f7eb f982 	bl	80005f8 <__aeabi_dmul>
 80152f4:	2200      	movs	r2, #0
 80152f6:	4680      	mov	r8, r0
 80152f8:	4689      	mov	r9, r1
 80152fa:	4b5e      	ldr	r3, [pc, #376]	; (8015474 <__ieee754_pow+0x734>)
 80152fc:	4620      	mov	r0, r4
 80152fe:	4629      	mov	r1, r5
 8015300:	f7ea ffc2 	bl	8000288 <__aeabi_dsub>
 8015304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015308:	f7ea ffbe 	bl	8000288 <__aeabi_dsub>
 801530c:	4602      	mov	r2, r0
 801530e:	460b      	mov	r3, r1
 8015310:	4630      	mov	r0, r6
 8015312:	4639      	mov	r1, r7
 8015314:	f7ea ffb8 	bl	8000288 <__aeabi_dsub>
 8015318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801531c:	f7eb f96c 	bl	80005f8 <__aeabi_dmul>
 8015320:	4622      	mov	r2, r4
 8015322:	4606      	mov	r6, r0
 8015324:	460f      	mov	r7, r1
 8015326:	462b      	mov	r3, r5
 8015328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801532c:	f7eb f964 	bl	80005f8 <__aeabi_dmul>
 8015330:	4602      	mov	r2, r0
 8015332:	460b      	mov	r3, r1
 8015334:	4630      	mov	r0, r6
 8015336:	4639      	mov	r1, r7
 8015338:	f7ea ffa8 	bl	800028c <__adddf3>
 801533c:	4606      	mov	r6, r0
 801533e:	460f      	mov	r7, r1
 8015340:	4602      	mov	r2, r0
 8015342:	460b      	mov	r3, r1
 8015344:	4640      	mov	r0, r8
 8015346:	4649      	mov	r1, r9
 8015348:	f7ea ffa0 	bl	800028c <__adddf3>
 801534c:	9802      	ldr	r0, [sp, #8]
 801534e:	a33c      	add	r3, pc, #240	; (adr r3, 8015440 <__ieee754_pow+0x700>)
 8015350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015354:	4604      	mov	r4, r0
 8015356:	460d      	mov	r5, r1
 8015358:	f7eb f94e 	bl	80005f8 <__aeabi_dmul>
 801535c:	4642      	mov	r2, r8
 801535e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015362:	464b      	mov	r3, r9
 8015364:	4620      	mov	r0, r4
 8015366:	4629      	mov	r1, r5
 8015368:	f7ea ff8e 	bl	8000288 <__aeabi_dsub>
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	4630      	mov	r0, r6
 8015372:	4639      	mov	r1, r7
 8015374:	f7ea ff88 	bl	8000288 <__aeabi_dsub>
 8015378:	a333      	add	r3, pc, #204	; (adr r3, 8015448 <__ieee754_pow+0x708>)
 801537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801537e:	f7eb f93b 	bl	80005f8 <__aeabi_dmul>
 8015382:	a333      	add	r3, pc, #204	; (adr r3, 8015450 <__ieee754_pow+0x710>)
 8015384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015388:	4606      	mov	r6, r0
 801538a:	460f      	mov	r7, r1
 801538c:	4620      	mov	r0, r4
 801538e:	4629      	mov	r1, r5
 8015390:	f7eb f932 	bl	80005f8 <__aeabi_dmul>
 8015394:	4602      	mov	r2, r0
 8015396:	460b      	mov	r3, r1
 8015398:	4630      	mov	r0, r6
 801539a:	4639      	mov	r1, r7
 801539c:	f7ea ff76 	bl	800028c <__adddf3>
 80153a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153a2:	4b35      	ldr	r3, [pc, #212]	; (8015478 <__ieee754_pow+0x738>)
 80153a4:	4413      	add	r3, r2
 80153a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153aa:	f7ea ff6f 	bl	800028c <__adddf3>
 80153ae:	4604      	mov	r4, r0
 80153b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153b2:	460d      	mov	r5, r1
 80153b4:	f7eb f8b6 	bl	8000524 <__aeabi_i2d>
 80153b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153ba:	4b30      	ldr	r3, [pc, #192]	; (801547c <__ieee754_pow+0x73c>)
 80153bc:	4413      	add	r3, r2
 80153be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153c2:	4606      	mov	r6, r0
 80153c4:	460f      	mov	r7, r1
 80153c6:	4622      	mov	r2, r4
 80153c8:	462b      	mov	r3, r5
 80153ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153ce:	f7ea ff5d 	bl	800028c <__adddf3>
 80153d2:	4642      	mov	r2, r8
 80153d4:	464b      	mov	r3, r9
 80153d6:	f7ea ff59 	bl	800028c <__adddf3>
 80153da:	4632      	mov	r2, r6
 80153dc:	463b      	mov	r3, r7
 80153de:	f7ea ff55 	bl	800028c <__adddf3>
 80153e2:	9802      	ldr	r0, [sp, #8]
 80153e4:	4632      	mov	r2, r6
 80153e6:	463b      	mov	r3, r7
 80153e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153ec:	f7ea ff4c 	bl	8000288 <__aeabi_dsub>
 80153f0:	4642      	mov	r2, r8
 80153f2:	464b      	mov	r3, r9
 80153f4:	f7ea ff48 	bl	8000288 <__aeabi_dsub>
 80153f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153fc:	e607      	b.n	801500e <__ieee754_pow+0x2ce>
 80153fe:	f04f 0a01 	mov.w	sl, #1
 8015402:	e6a5      	b.n	8015150 <__ieee754_pow+0x410>
 8015404:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015458 <__ieee754_pow+0x718>
 8015408:	e613      	b.n	8015032 <__ieee754_pow+0x2f2>
 801540a:	bf00      	nop
 801540c:	f3af 8000 	nop.w
 8015410:	4a454eef 	.word	0x4a454eef
 8015414:	3fca7e28 	.word	0x3fca7e28
 8015418:	93c9db65 	.word	0x93c9db65
 801541c:	3fcd864a 	.word	0x3fcd864a
 8015420:	a91d4101 	.word	0xa91d4101
 8015424:	3fd17460 	.word	0x3fd17460
 8015428:	518f264d 	.word	0x518f264d
 801542c:	3fd55555 	.word	0x3fd55555
 8015430:	db6fabff 	.word	0xdb6fabff
 8015434:	3fdb6db6 	.word	0x3fdb6db6
 8015438:	33333303 	.word	0x33333303
 801543c:	3fe33333 	.word	0x3fe33333
 8015440:	e0000000 	.word	0xe0000000
 8015444:	3feec709 	.word	0x3feec709
 8015448:	dc3a03fd 	.word	0xdc3a03fd
 801544c:	3feec709 	.word	0x3feec709
 8015450:	145b01f5 	.word	0x145b01f5
 8015454:	be3e2fe0 	.word	0xbe3e2fe0
 8015458:	00000000 	.word	0x00000000
 801545c:	3ff00000 	.word	0x3ff00000
 8015460:	43400000 	.word	0x43400000
 8015464:	0003988e 	.word	0x0003988e
 8015468:	000bb679 	.word	0x000bb679
 801546c:	08016f80 	.word	0x08016f80
 8015470:	3ff00000 	.word	0x3ff00000
 8015474:	40080000 	.word	0x40080000
 8015478:	08016fa0 	.word	0x08016fa0
 801547c:	08016f90 	.word	0x08016f90
 8015480:	a3b4      	add	r3, pc, #720	; (adr r3, 8015754 <__ieee754_pow+0xa14>)
 8015482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015486:	4640      	mov	r0, r8
 8015488:	4649      	mov	r1, r9
 801548a:	f7ea feff 	bl	800028c <__adddf3>
 801548e:	4622      	mov	r2, r4
 8015490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015494:	462b      	mov	r3, r5
 8015496:	4630      	mov	r0, r6
 8015498:	4639      	mov	r1, r7
 801549a:	f7ea fef5 	bl	8000288 <__aeabi_dsub>
 801549e:	4602      	mov	r2, r0
 80154a0:	460b      	mov	r3, r1
 80154a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154a6:	f7eb fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80154aa:	2800      	cmp	r0, #0
 80154ac:	f47f adfe 	bne.w	80150ac <__ieee754_pow+0x36c>
 80154b0:	4aa3      	ldr	r2, [pc, #652]	; (8015740 <__ieee754_pow+0xa00>)
 80154b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80154b6:	4293      	cmp	r3, r2
 80154b8:	f340 810a 	ble.w	80156d0 <__ieee754_pow+0x990>
 80154bc:	151b      	asrs	r3, r3, #20
 80154be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80154c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80154c6:	fa4a f303 	asr.w	r3, sl, r3
 80154ca:	445b      	add	r3, fp
 80154cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80154d0:	4e9c      	ldr	r6, [pc, #624]	; (8015744 <__ieee754_pow+0xa04>)
 80154d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80154d6:	4116      	asrs	r6, r2
 80154d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80154dc:	2000      	movs	r0, #0
 80154de:	ea23 0106 	bic.w	r1, r3, r6
 80154e2:	f1c2 0214 	rsb	r2, r2, #20
 80154e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80154ea:	fa4a fa02 	asr.w	sl, sl, r2
 80154ee:	f1bb 0f00 	cmp.w	fp, #0
 80154f2:	4602      	mov	r2, r0
 80154f4:	460b      	mov	r3, r1
 80154f6:	4620      	mov	r0, r4
 80154f8:	4629      	mov	r1, r5
 80154fa:	bfb8      	it	lt
 80154fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8015500:	f7ea fec2 	bl	8000288 <__aeabi_dsub>
 8015504:	e9cd 0100 	strd	r0, r1, [sp]
 8015508:	4642      	mov	r2, r8
 801550a:	464b      	mov	r3, r9
 801550c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015510:	f7ea febc 	bl	800028c <__adddf3>
 8015514:	2000      	movs	r0, #0
 8015516:	a378      	add	r3, pc, #480	; (adr r3, 80156f8 <__ieee754_pow+0x9b8>)
 8015518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551c:	4604      	mov	r4, r0
 801551e:	460d      	mov	r5, r1
 8015520:	f7eb f86a 	bl	80005f8 <__aeabi_dmul>
 8015524:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015528:	4606      	mov	r6, r0
 801552a:	460f      	mov	r7, r1
 801552c:	4620      	mov	r0, r4
 801552e:	4629      	mov	r1, r5
 8015530:	f7ea feaa 	bl	8000288 <__aeabi_dsub>
 8015534:	4602      	mov	r2, r0
 8015536:	460b      	mov	r3, r1
 8015538:	4640      	mov	r0, r8
 801553a:	4649      	mov	r1, r9
 801553c:	f7ea fea4 	bl	8000288 <__aeabi_dsub>
 8015540:	a36f      	add	r3, pc, #444	; (adr r3, 8015700 <__ieee754_pow+0x9c0>)
 8015542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015546:	f7eb f857 	bl	80005f8 <__aeabi_dmul>
 801554a:	a36f      	add	r3, pc, #444	; (adr r3, 8015708 <__ieee754_pow+0x9c8>)
 801554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015550:	4680      	mov	r8, r0
 8015552:	4689      	mov	r9, r1
 8015554:	4620      	mov	r0, r4
 8015556:	4629      	mov	r1, r5
 8015558:	f7eb f84e 	bl	80005f8 <__aeabi_dmul>
 801555c:	4602      	mov	r2, r0
 801555e:	460b      	mov	r3, r1
 8015560:	4640      	mov	r0, r8
 8015562:	4649      	mov	r1, r9
 8015564:	f7ea fe92 	bl	800028c <__adddf3>
 8015568:	4604      	mov	r4, r0
 801556a:	460d      	mov	r5, r1
 801556c:	4602      	mov	r2, r0
 801556e:	460b      	mov	r3, r1
 8015570:	4630      	mov	r0, r6
 8015572:	4639      	mov	r1, r7
 8015574:	f7ea fe8a 	bl	800028c <__adddf3>
 8015578:	4632      	mov	r2, r6
 801557a:	463b      	mov	r3, r7
 801557c:	4680      	mov	r8, r0
 801557e:	4689      	mov	r9, r1
 8015580:	f7ea fe82 	bl	8000288 <__aeabi_dsub>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	4620      	mov	r0, r4
 801558a:	4629      	mov	r1, r5
 801558c:	f7ea fe7c 	bl	8000288 <__aeabi_dsub>
 8015590:	4642      	mov	r2, r8
 8015592:	4606      	mov	r6, r0
 8015594:	460f      	mov	r7, r1
 8015596:	464b      	mov	r3, r9
 8015598:	4640      	mov	r0, r8
 801559a:	4649      	mov	r1, r9
 801559c:	f7eb f82c 	bl	80005f8 <__aeabi_dmul>
 80155a0:	a35b      	add	r3, pc, #364	; (adr r3, 8015710 <__ieee754_pow+0x9d0>)
 80155a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a6:	4604      	mov	r4, r0
 80155a8:	460d      	mov	r5, r1
 80155aa:	f7eb f825 	bl	80005f8 <__aeabi_dmul>
 80155ae:	a35a      	add	r3, pc, #360	; (adr r3, 8015718 <__ieee754_pow+0x9d8>)
 80155b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b4:	f7ea fe68 	bl	8000288 <__aeabi_dsub>
 80155b8:	4622      	mov	r2, r4
 80155ba:	462b      	mov	r3, r5
 80155bc:	f7eb f81c 	bl	80005f8 <__aeabi_dmul>
 80155c0:	a357      	add	r3, pc, #348	; (adr r3, 8015720 <__ieee754_pow+0x9e0>)
 80155c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c6:	f7ea fe61 	bl	800028c <__adddf3>
 80155ca:	4622      	mov	r2, r4
 80155cc:	462b      	mov	r3, r5
 80155ce:	f7eb f813 	bl	80005f8 <__aeabi_dmul>
 80155d2:	a355      	add	r3, pc, #340	; (adr r3, 8015728 <__ieee754_pow+0x9e8>)
 80155d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d8:	f7ea fe56 	bl	8000288 <__aeabi_dsub>
 80155dc:	4622      	mov	r2, r4
 80155de:	462b      	mov	r3, r5
 80155e0:	f7eb f80a 	bl	80005f8 <__aeabi_dmul>
 80155e4:	a352      	add	r3, pc, #328	; (adr r3, 8015730 <__ieee754_pow+0x9f0>)
 80155e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ea:	f7ea fe4f 	bl	800028c <__adddf3>
 80155ee:	4622      	mov	r2, r4
 80155f0:	462b      	mov	r3, r5
 80155f2:	f7eb f801 	bl	80005f8 <__aeabi_dmul>
 80155f6:	4602      	mov	r2, r0
 80155f8:	460b      	mov	r3, r1
 80155fa:	4640      	mov	r0, r8
 80155fc:	4649      	mov	r1, r9
 80155fe:	f7ea fe43 	bl	8000288 <__aeabi_dsub>
 8015602:	4604      	mov	r4, r0
 8015604:	460d      	mov	r5, r1
 8015606:	4602      	mov	r2, r0
 8015608:	460b      	mov	r3, r1
 801560a:	4640      	mov	r0, r8
 801560c:	4649      	mov	r1, r9
 801560e:	f7ea fff3 	bl	80005f8 <__aeabi_dmul>
 8015612:	2200      	movs	r2, #0
 8015614:	e9cd 0100 	strd	r0, r1, [sp]
 8015618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801561c:	4620      	mov	r0, r4
 801561e:	4629      	mov	r1, r5
 8015620:	f7ea fe32 	bl	8000288 <__aeabi_dsub>
 8015624:	4602      	mov	r2, r0
 8015626:	460b      	mov	r3, r1
 8015628:	e9dd 0100 	ldrd	r0, r1, [sp]
 801562c:	f7eb f90e 	bl	800084c <__aeabi_ddiv>
 8015630:	4632      	mov	r2, r6
 8015632:	4604      	mov	r4, r0
 8015634:	460d      	mov	r5, r1
 8015636:	463b      	mov	r3, r7
 8015638:	4640      	mov	r0, r8
 801563a:	4649      	mov	r1, r9
 801563c:	f7ea ffdc 	bl	80005f8 <__aeabi_dmul>
 8015640:	4632      	mov	r2, r6
 8015642:	463b      	mov	r3, r7
 8015644:	f7ea fe22 	bl	800028c <__adddf3>
 8015648:	4602      	mov	r2, r0
 801564a:	460b      	mov	r3, r1
 801564c:	4620      	mov	r0, r4
 801564e:	4629      	mov	r1, r5
 8015650:	f7ea fe1a 	bl	8000288 <__aeabi_dsub>
 8015654:	4642      	mov	r2, r8
 8015656:	464b      	mov	r3, r9
 8015658:	f7ea fe16 	bl	8000288 <__aeabi_dsub>
 801565c:	4602      	mov	r2, r0
 801565e:	460b      	mov	r3, r1
 8015660:	2000      	movs	r0, #0
 8015662:	4939      	ldr	r1, [pc, #228]	; (8015748 <__ieee754_pow+0xa08>)
 8015664:	f7ea fe10 	bl	8000288 <__aeabi_dsub>
 8015668:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801566c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015670:	4602      	mov	r2, r0
 8015672:	460b      	mov	r3, r1
 8015674:	da2f      	bge.n	80156d6 <__ieee754_pow+0x996>
 8015676:	4650      	mov	r0, sl
 8015678:	ec43 2b10 	vmov	d0, r2, r3
 801567c:	f000 f9c0 	bl	8015a00 <scalbn>
 8015680:	ec51 0b10 	vmov	r0, r1, d0
 8015684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015688:	f7ff bbf1 	b.w	8014e6e <__ieee754_pow+0x12e>
 801568c:	4b2f      	ldr	r3, [pc, #188]	; (801574c <__ieee754_pow+0xa0c>)
 801568e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015692:	429e      	cmp	r6, r3
 8015694:	f77f af0c 	ble.w	80154b0 <__ieee754_pow+0x770>
 8015698:	4b2d      	ldr	r3, [pc, #180]	; (8015750 <__ieee754_pow+0xa10>)
 801569a:	440b      	add	r3, r1
 801569c:	4303      	orrs	r3, r0
 801569e:	d00b      	beq.n	80156b8 <__ieee754_pow+0x978>
 80156a0:	a325      	add	r3, pc, #148	; (adr r3, 8015738 <__ieee754_pow+0x9f8>)
 80156a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156aa:	f7ea ffa5 	bl	80005f8 <__aeabi_dmul>
 80156ae:	a322      	add	r3, pc, #136	; (adr r3, 8015738 <__ieee754_pow+0x9f8>)
 80156b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b4:	f7ff bbdb 	b.w	8014e6e <__ieee754_pow+0x12e>
 80156b8:	4622      	mov	r2, r4
 80156ba:	462b      	mov	r3, r5
 80156bc:	f7ea fde4 	bl	8000288 <__aeabi_dsub>
 80156c0:	4642      	mov	r2, r8
 80156c2:	464b      	mov	r3, r9
 80156c4:	f7eb fa1e 	bl	8000b04 <__aeabi_dcmpge>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	f43f aef1 	beq.w	80154b0 <__ieee754_pow+0x770>
 80156ce:	e7e7      	b.n	80156a0 <__ieee754_pow+0x960>
 80156d0:	f04f 0a00 	mov.w	sl, #0
 80156d4:	e718      	b.n	8015508 <__ieee754_pow+0x7c8>
 80156d6:	4621      	mov	r1, r4
 80156d8:	e7d4      	b.n	8015684 <__ieee754_pow+0x944>
 80156da:	2000      	movs	r0, #0
 80156dc:	491a      	ldr	r1, [pc, #104]	; (8015748 <__ieee754_pow+0xa08>)
 80156de:	f7ff bb8f 	b.w	8014e00 <__ieee754_pow+0xc0>
 80156e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156e6:	f7ff bb8b 	b.w	8014e00 <__ieee754_pow+0xc0>
 80156ea:	4630      	mov	r0, r6
 80156ec:	4639      	mov	r1, r7
 80156ee:	f7ff bb87 	b.w	8014e00 <__ieee754_pow+0xc0>
 80156f2:	4693      	mov	fp, r2
 80156f4:	f7ff bb98 	b.w	8014e28 <__ieee754_pow+0xe8>
 80156f8:	00000000 	.word	0x00000000
 80156fc:	3fe62e43 	.word	0x3fe62e43
 8015700:	fefa39ef 	.word	0xfefa39ef
 8015704:	3fe62e42 	.word	0x3fe62e42
 8015708:	0ca86c39 	.word	0x0ca86c39
 801570c:	be205c61 	.word	0xbe205c61
 8015710:	72bea4d0 	.word	0x72bea4d0
 8015714:	3e663769 	.word	0x3e663769
 8015718:	c5d26bf1 	.word	0xc5d26bf1
 801571c:	3ebbbd41 	.word	0x3ebbbd41
 8015720:	af25de2c 	.word	0xaf25de2c
 8015724:	3f11566a 	.word	0x3f11566a
 8015728:	16bebd93 	.word	0x16bebd93
 801572c:	3f66c16c 	.word	0x3f66c16c
 8015730:	5555553e 	.word	0x5555553e
 8015734:	3fc55555 	.word	0x3fc55555
 8015738:	c2f8f359 	.word	0xc2f8f359
 801573c:	01a56e1f 	.word	0x01a56e1f
 8015740:	3fe00000 	.word	0x3fe00000
 8015744:	000fffff 	.word	0x000fffff
 8015748:	3ff00000 	.word	0x3ff00000
 801574c:	4090cbff 	.word	0x4090cbff
 8015750:	3f6f3400 	.word	0x3f6f3400
 8015754:	652b82fe 	.word	0x652b82fe
 8015758:	3c971547 	.word	0x3c971547

0801575c <__ieee754_sqrt>:
 801575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015760:	4955      	ldr	r1, [pc, #340]	; (80158b8 <__ieee754_sqrt+0x15c>)
 8015762:	ec55 4b10 	vmov	r4, r5, d0
 8015766:	43a9      	bics	r1, r5
 8015768:	462b      	mov	r3, r5
 801576a:	462a      	mov	r2, r5
 801576c:	d112      	bne.n	8015794 <__ieee754_sqrt+0x38>
 801576e:	ee10 2a10 	vmov	r2, s0
 8015772:	ee10 0a10 	vmov	r0, s0
 8015776:	4629      	mov	r1, r5
 8015778:	f7ea ff3e 	bl	80005f8 <__aeabi_dmul>
 801577c:	4602      	mov	r2, r0
 801577e:	460b      	mov	r3, r1
 8015780:	4620      	mov	r0, r4
 8015782:	4629      	mov	r1, r5
 8015784:	f7ea fd82 	bl	800028c <__adddf3>
 8015788:	4604      	mov	r4, r0
 801578a:	460d      	mov	r5, r1
 801578c:	ec45 4b10 	vmov	d0, r4, r5
 8015790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015794:	2d00      	cmp	r5, #0
 8015796:	ee10 0a10 	vmov	r0, s0
 801579a:	4621      	mov	r1, r4
 801579c:	dc0f      	bgt.n	80157be <__ieee754_sqrt+0x62>
 801579e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80157a2:	4330      	orrs	r0, r6
 80157a4:	d0f2      	beq.n	801578c <__ieee754_sqrt+0x30>
 80157a6:	b155      	cbz	r5, 80157be <__ieee754_sqrt+0x62>
 80157a8:	ee10 2a10 	vmov	r2, s0
 80157ac:	4620      	mov	r0, r4
 80157ae:	4629      	mov	r1, r5
 80157b0:	f7ea fd6a 	bl	8000288 <__aeabi_dsub>
 80157b4:	4602      	mov	r2, r0
 80157b6:	460b      	mov	r3, r1
 80157b8:	f7eb f848 	bl	800084c <__aeabi_ddiv>
 80157bc:	e7e4      	b.n	8015788 <__ieee754_sqrt+0x2c>
 80157be:	151b      	asrs	r3, r3, #20
 80157c0:	d073      	beq.n	80158aa <__ieee754_sqrt+0x14e>
 80157c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80157c6:	07dd      	lsls	r5, r3, #31
 80157c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80157cc:	bf48      	it	mi
 80157ce:	0fc8      	lsrmi	r0, r1, #31
 80157d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80157d4:	bf44      	itt	mi
 80157d6:	0049      	lslmi	r1, r1, #1
 80157d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80157dc:	2500      	movs	r5, #0
 80157de:	1058      	asrs	r0, r3, #1
 80157e0:	0fcb      	lsrs	r3, r1, #31
 80157e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80157e6:	0049      	lsls	r1, r1, #1
 80157e8:	2316      	movs	r3, #22
 80157ea:	462c      	mov	r4, r5
 80157ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80157f0:	19a7      	adds	r7, r4, r6
 80157f2:	4297      	cmp	r7, r2
 80157f4:	bfde      	ittt	le
 80157f6:	19bc      	addle	r4, r7, r6
 80157f8:	1bd2      	suble	r2, r2, r7
 80157fa:	19ad      	addle	r5, r5, r6
 80157fc:	0fcf      	lsrs	r7, r1, #31
 80157fe:	3b01      	subs	r3, #1
 8015800:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015804:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015808:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801580c:	d1f0      	bne.n	80157f0 <__ieee754_sqrt+0x94>
 801580e:	f04f 0c20 	mov.w	ip, #32
 8015812:	469e      	mov	lr, r3
 8015814:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015818:	42a2      	cmp	r2, r4
 801581a:	eb06 070e 	add.w	r7, r6, lr
 801581e:	dc02      	bgt.n	8015826 <__ieee754_sqrt+0xca>
 8015820:	d112      	bne.n	8015848 <__ieee754_sqrt+0xec>
 8015822:	428f      	cmp	r7, r1
 8015824:	d810      	bhi.n	8015848 <__ieee754_sqrt+0xec>
 8015826:	2f00      	cmp	r7, #0
 8015828:	eb07 0e06 	add.w	lr, r7, r6
 801582c:	da42      	bge.n	80158b4 <__ieee754_sqrt+0x158>
 801582e:	f1be 0f00 	cmp.w	lr, #0
 8015832:	db3f      	blt.n	80158b4 <__ieee754_sqrt+0x158>
 8015834:	f104 0801 	add.w	r8, r4, #1
 8015838:	1b12      	subs	r2, r2, r4
 801583a:	428f      	cmp	r7, r1
 801583c:	bf88      	it	hi
 801583e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015842:	1bc9      	subs	r1, r1, r7
 8015844:	4433      	add	r3, r6
 8015846:	4644      	mov	r4, r8
 8015848:	0052      	lsls	r2, r2, #1
 801584a:	f1bc 0c01 	subs.w	ip, ip, #1
 801584e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015852:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015856:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801585a:	d1dd      	bne.n	8015818 <__ieee754_sqrt+0xbc>
 801585c:	430a      	orrs	r2, r1
 801585e:	d006      	beq.n	801586e <__ieee754_sqrt+0x112>
 8015860:	1c5c      	adds	r4, r3, #1
 8015862:	bf13      	iteet	ne
 8015864:	3301      	addne	r3, #1
 8015866:	3501      	addeq	r5, #1
 8015868:	4663      	moveq	r3, ip
 801586a:	f023 0301 	bicne.w	r3, r3, #1
 801586e:	106a      	asrs	r2, r5, #1
 8015870:	085b      	lsrs	r3, r3, #1
 8015872:	07e9      	lsls	r1, r5, #31
 8015874:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015878:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801587c:	bf48      	it	mi
 801587e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015882:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015886:	461c      	mov	r4, r3
 8015888:	e780      	b.n	801578c <__ieee754_sqrt+0x30>
 801588a:	0aca      	lsrs	r2, r1, #11
 801588c:	3815      	subs	r0, #21
 801588e:	0549      	lsls	r1, r1, #21
 8015890:	2a00      	cmp	r2, #0
 8015892:	d0fa      	beq.n	801588a <__ieee754_sqrt+0x12e>
 8015894:	02d6      	lsls	r6, r2, #11
 8015896:	d50a      	bpl.n	80158ae <__ieee754_sqrt+0x152>
 8015898:	f1c3 0420 	rsb	r4, r3, #32
 801589c:	fa21 f404 	lsr.w	r4, r1, r4
 80158a0:	1e5d      	subs	r5, r3, #1
 80158a2:	4099      	lsls	r1, r3
 80158a4:	4322      	orrs	r2, r4
 80158a6:	1b43      	subs	r3, r0, r5
 80158a8:	e78b      	b.n	80157c2 <__ieee754_sqrt+0x66>
 80158aa:	4618      	mov	r0, r3
 80158ac:	e7f0      	b.n	8015890 <__ieee754_sqrt+0x134>
 80158ae:	0052      	lsls	r2, r2, #1
 80158b0:	3301      	adds	r3, #1
 80158b2:	e7ef      	b.n	8015894 <__ieee754_sqrt+0x138>
 80158b4:	46a0      	mov	r8, r4
 80158b6:	e7bf      	b.n	8015838 <__ieee754_sqrt+0xdc>
 80158b8:	7ff00000 	.word	0x7ff00000

080158bc <fabs>:
 80158bc:	ec51 0b10 	vmov	r0, r1, d0
 80158c0:	ee10 2a10 	vmov	r2, s0
 80158c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80158c8:	ec43 2b10 	vmov	d0, r2, r3
 80158cc:	4770      	bx	lr

080158ce <finite>:
 80158ce:	ee10 3a90 	vmov	r3, s1
 80158d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80158d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80158da:	0fc0      	lsrs	r0, r0, #31
 80158dc:	4770      	bx	lr

080158de <matherr>:
 80158de:	2000      	movs	r0, #0
 80158e0:	4770      	bx	lr
 80158e2:	0000      	movs	r0, r0
 80158e4:	0000      	movs	r0, r0
	...

080158e8 <nan>:
 80158e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80158f0 <nan+0x8>
 80158ec:	4770      	bx	lr
 80158ee:	bf00      	nop
 80158f0:	00000000 	.word	0x00000000
 80158f4:	7ff80000 	.word	0x7ff80000

080158f8 <rint>:
 80158f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158fa:	ec51 0b10 	vmov	r0, r1, d0
 80158fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015902:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015906:	2e13      	cmp	r6, #19
 8015908:	460b      	mov	r3, r1
 801590a:	ee10 4a10 	vmov	r4, s0
 801590e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015912:	dc56      	bgt.n	80159c2 <rint+0xca>
 8015914:	2e00      	cmp	r6, #0
 8015916:	da2b      	bge.n	8015970 <rint+0x78>
 8015918:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801591c:	4302      	orrs	r2, r0
 801591e:	d023      	beq.n	8015968 <rint+0x70>
 8015920:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015924:	4302      	orrs	r2, r0
 8015926:	4254      	negs	r4, r2
 8015928:	4314      	orrs	r4, r2
 801592a:	0c4b      	lsrs	r3, r1, #17
 801592c:	0b24      	lsrs	r4, r4, #12
 801592e:	045b      	lsls	r3, r3, #17
 8015930:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015934:	ea44 0103 	orr.w	r1, r4, r3
 8015938:	460b      	mov	r3, r1
 801593a:	492f      	ldr	r1, [pc, #188]	; (80159f8 <rint+0x100>)
 801593c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015940:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015944:	4602      	mov	r2, r0
 8015946:	4639      	mov	r1, r7
 8015948:	4630      	mov	r0, r6
 801594a:	f7ea fc9f 	bl	800028c <__adddf3>
 801594e:	e9cd 0100 	strd	r0, r1, [sp]
 8015952:	463b      	mov	r3, r7
 8015954:	4632      	mov	r2, r6
 8015956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801595a:	f7ea fc95 	bl	8000288 <__aeabi_dsub>
 801595e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015962:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015966:	4639      	mov	r1, r7
 8015968:	ec41 0b10 	vmov	d0, r0, r1
 801596c:	b003      	add	sp, #12
 801596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015970:	4a22      	ldr	r2, [pc, #136]	; (80159fc <rint+0x104>)
 8015972:	4132      	asrs	r2, r6
 8015974:	ea01 0702 	and.w	r7, r1, r2
 8015978:	4307      	orrs	r7, r0
 801597a:	d0f5      	beq.n	8015968 <rint+0x70>
 801597c:	0852      	lsrs	r2, r2, #1
 801597e:	4011      	ands	r1, r2
 8015980:	430c      	orrs	r4, r1
 8015982:	d00b      	beq.n	801599c <rint+0xa4>
 8015984:	ea23 0202 	bic.w	r2, r3, r2
 8015988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801598c:	2e13      	cmp	r6, #19
 801598e:	fa43 f306 	asr.w	r3, r3, r6
 8015992:	bf0c      	ite	eq
 8015994:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015998:	2400      	movne	r4, #0
 801599a:	4313      	orrs	r3, r2
 801599c:	4916      	ldr	r1, [pc, #88]	; (80159f8 <rint+0x100>)
 801599e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80159a2:	4622      	mov	r2, r4
 80159a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80159a8:	4620      	mov	r0, r4
 80159aa:	4629      	mov	r1, r5
 80159ac:	f7ea fc6e 	bl	800028c <__adddf3>
 80159b0:	e9cd 0100 	strd	r0, r1, [sp]
 80159b4:	4622      	mov	r2, r4
 80159b6:	462b      	mov	r3, r5
 80159b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159bc:	f7ea fc64 	bl	8000288 <__aeabi_dsub>
 80159c0:	e7d2      	b.n	8015968 <rint+0x70>
 80159c2:	2e33      	cmp	r6, #51	; 0x33
 80159c4:	dd07      	ble.n	80159d6 <rint+0xde>
 80159c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80159ca:	d1cd      	bne.n	8015968 <rint+0x70>
 80159cc:	ee10 2a10 	vmov	r2, s0
 80159d0:	f7ea fc5c 	bl	800028c <__adddf3>
 80159d4:	e7c8      	b.n	8015968 <rint+0x70>
 80159d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80159da:	f04f 32ff 	mov.w	r2, #4294967295
 80159de:	40f2      	lsrs	r2, r6
 80159e0:	4210      	tst	r0, r2
 80159e2:	d0c1      	beq.n	8015968 <rint+0x70>
 80159e4:	0852      	lsrs	r2, r2, #1
 80159e6:	4210      	tst	r0, r2
 80159e8:	bf1f      	itttt	ne
 80159ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80159ee:	ea20 0202 	bicne.w	r2, r0, r2
 80159f2:	4134      	asrne	r4, r6
 80159f4:	4314      	orrne	r4, r2
 80159f6:	e7d1      	b.n	801599c <rint+0xa4>
 80159f8:	08016fb0 	.word	0x08016fb0
 80159fc:	000fffff 	.word	0x000fffff

08015a00 <scalbn>:
 8015a00:	b570      	push	{r4, r5, r6, lr}
 8015a02:	ec55 4b10 	vmov	r4, r5, d0
 8015a06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015a0a:	4606      	mov	r6, r0
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	b9aa      	cbnz	r2, 8015a3c <scalbn+0x3c>
 8015a10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015a14:	4323      	orrs	r3, r4
 8015a16:	d03b      	beq.n	8015a90 <scalbn+0x90>
 8015a18:	4b31      	ldr	r3, [pc, #196]	; (8015ae0 <scalbn+0xe0>)
 8015a1a:	4629      	mov	r1, r5
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	ee10 0a10 	vmov	r0, s0
 8015a22:	f7ea fde9 	bl	80005f8 <__aeabi_dmul>
 8015a26:	4b2f      	ldr	r3, [pc, #188]	; (8015ae4 <scalbn+0xe4>)
 8015a28:	429e      	cmp	r6, r3
 8015a2a:	4604      	mov	r4, r0
 8015a2c:	460d      	mov	r5, r1
 8015a2e:	da12      	bge.n	8015a56 <scalbn+0x56>
 8015a30:	a327      	add	r3, pc, #156	; (adr r3, 8015ad0 <scalbn+0xd0>)
 8015a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a36:	f7ea fddf 	bl	80005f8 <__aeabi_dmul>
 8015a3a:	e009      	b.n	8015a50 <scalbn+0x50>
 8015a3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015a40:	428a      	cmp	r2, r1
 8015a42:	d10c      	bne.n	8015a5e <scalbn+0x5e>
 8015a44:	ee10 2a10 	vmov	r2, s0
 8015a48:	4620      	mov	r0, r4
 8015a4a:	4629      	mov	r1, r5
 8015a4c:	f7ea fc1e 	bl	800028c <__adddf3>
 8015a50:	4604      	mov	r4, r0
 8015a52:	460d      	mov	r5, r1
 8015a54:	e01c      	b.n	8015a90 <scalbn+0x90>
 8015a56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015a5a:	460b      	mov	r3, r1
 8015a5c:	3a36      	subs	r2, #54	; 0x36
 8015a5e:	4432      	add	r2, r6
 8015a60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015a64:	428a      	cmp	r2, r1
 8015a66:	dd0b      	ble.n	8015a80 <scalbn+0x80>
 8015a68:	ec45 4b11 	vmov	d1, r4, r5
 8015a6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015ad8 <scalbn+0xd8>
 8015a70:	f000 f83c 	bl	8015aec <copysign>
 8015a74:	a318      	add	r3, pc, #96	; (adr r3, 8015ad8 <scalbn+0xd8>)
 8015a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7a:	ec51 0b10 	vmov	r0, r1, d0
 8015a7e:	e7da      	b.n	8015a36 <scalbn+0x36>
 8015a80:	2a00      	cmp	r2, #0
 8015a82:	dd08      	ble.n	8015a96 <scalbn+0x96>
 8015a84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015a90:	ec45 4b10 	vmov	d0, r4, r5
 8015a94:	bd70      	pop	{r4, r5, r6, pc}
 8015a96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015a9a:	da0d      	bge.n	8015ab8 <scalbn+0xb8>
 8015a9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015aa0:	429e      	cmp	r6, r3
 8015aa2:	ec45 4b11 	vmov	d1, r4, r5
 8015aa6:	dce1      	bgt.n	8015a6c <scalbn+0x6c>
 8015aa8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015ad0 <scalbn+0xd0>
 8015aac:	f000 f81e 	bl	8015aec <copysign>
 8015ab0:	a307      	add	r3, pc, #28	; (adr r3, 8015ad0 <scalbn+0xd0>)
 8015ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab6:	e7e0      	b.n	8015a7a <scalbn+0x7a>
 8015ab8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015abc:	3236      	adds	r2, #54	; 0x36
 8015abe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015ac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	4629      	mov	r1, r5
 8015aca:	2200      	movs	r2, #0
 8015acc:	4b06      	ldr	r3, [pc, #24]	; (8015ae8 <scalbn+0xe8>)
 8015ace:	e7b2      	b.n	8015a36 <scalbn+0x36>
 8015ad0:	c2f8f359 	.word	0xc2f8f359
 8015ad4:	01a56e1f 	.word	0x01a56e1f
 8015ad8:	8800759c 	.word	0x8800759c
 8015adc:	7e37e43c 	.word	0x7e37e43c
 8015ae0:	43500000 	.word	0x43500000
 8015ae4:	ffff3cb0 	.word	0xffff3cb0
 8015ae8:	3c900000 	.word	0x3c900000

08015aec <copysign>:
 8015aec:	ec51 0b10 	vmov	r0, r1, d0
 8015af0:	ee11 0a90 	vmov	r0, s3
 8015af4:	ee10 2a10 	vmov	r2, s0
 8015af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015afc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015b00:	ea41 0300 	orr.w	r3, r1, r0
 8015b04:	ec43 2b10 	vmov	d0, r2, r3
 8015b08:	4770      	bx	lr
	...

08015b0c <_init>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	bf00      	nop
 8015b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b12:	bc08      	pop	{r3}
 8015b14:	469e      	mov	lr, r3
 8015b16:	4770      	bx	lr

08015b18 <_fini>:
 8015b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b1a:	bf00      	nop
 8015b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b1e:	bc08      	pop	{r3}
 8015b20:	469e      	mov	lr, r3
 8015b22:	4770      	bx	lr
