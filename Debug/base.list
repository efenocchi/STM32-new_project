
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800aa70  0800aa70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b170  0800b170  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b170  0800b170  0001b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b178  0800b178  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b178  0800b178  0001b178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b17c  0800b17c  0001b17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f88  20000098  0800b218  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003020  0800b218  00023020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ab24  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bcc  00000000  00000000  0004abec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002050  00000000  00000000  0004f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e28  00000000  00000000  00051808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295b1  00000000  00000000  00053630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a08f  00000000  00000000  0007cbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001052d8  00000000  00000000  00096c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019bf48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009124  00000000  00000000  0019bfc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa58 	.word	0x0800aa58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800aa58 	.word	0x0800aa58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SPI_WIFI_ISR+0x1c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d102      	bne.n	800094a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <SPI_WIFI_ISR+0x1c>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
   }
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200000b4 	.word	0x200000b4

08000958 <inizialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void inizialize(struct sharedValues_t *sv){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	sv->humidity=0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
	sv->proximity=0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
	sv->temperature_val1=0;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
	sv->temperature_val2=0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	605a      	str	r2, [r3, #4]


	sv->primo = osSemaphoreNew(1, 1, NULL);
 800097e:	2200      	movs	r2, #0
 8000980:	2101      	movs	r1, #1
 8000982:	2001      	movs	r0, #1
 8000984:	f005 fec4 	bl	8006710 <osSemaphoreNew>
 8000988:	4602      	mov	r2, r0
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	611a      	str	r2, [r3, #16]
	sv->secondo = osSemaphoreNew(1, 1, NULL);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	2001      	movs	r0, #1
 8000994:	f005 febc 	bl	8006710 <osSemaphoreNew>
 8000998:	4602      	mov	r2, r0
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]


}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <main>:
  * @retval int
  */


int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	   HAL_Init();
 80009ac:	f001 fbb6 	bl	800211c <HAL_Init>

	   /* Configure the system clock */
	   SystemClock_Config();
 80009b0:	f000 f87e 	bl	8000ab0 <SystemClock_Config>
	   /* Configure LED2 */
	   BSP_LED_Init(LED2);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 f891 	bl	8001adc <BSP_LED_Init>

      /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f001 f8bd 	bl	8001b3c <BSP_PB_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <main+0xd4>)
 80009c4:	4a2e      	ldr	r2, [pc, #184]	; (8000a80 <main+0xd8>)
 80009c6:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <main+0xd4>)
 80009ca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ce:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <main+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <main+0xd4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <main+0xd4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <main+0xd4>)
 80009e4:	220c      	movs	r2, #12
 80009e6:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <main+0xd4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <main+0xd4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <main+0xd4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <main+0xd4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8000a00:	491e      	ldr	r1, [pc, #120]	; (8000a7c <main+0xd4>)
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 f8f0 	bl	8001be8 <BSP_COM_Init>
#endif /* TERMINAL_USE */

		MX_GPIO_Init();
 8000a08:	f000 fa72 	bl	8000ef0 <MX_GPIO_Init>
		MX_DFSDM1_Init();
 8000a0c:	f000 f906 	bl	8000c1c <MX_DFSDM1_Init>
		MX_I2C2_Init();
 8000a10:	f000 f93c 	bl	8000c8c <MX_I2C2_Init>
		MX_QUADSPI_Init();
 8000a14:	f000 f97a 	bl	8000d0c <MX_QUADSPI_Init>
		MX_SPI3_Init();
 8000a18:	f000 f99e 	bl	8000d58 <MX_SPI3_Init>
		MX_USART1_UART_Init();
 8000a1c:	f000 f9da 	bl	8000dd4 <MX_USART1_UART_Init>
		MX_USART3_UART_Init();
 8000a20:	f000 fa08 	bl	8000e34 <MX_USART3_UART_Init>
		MX_USB_OTG_FS_PCD_Init();
 8000a24:	f000 fa36 	bl	8000e94 <MX_USB_OTG_FS_PCD_Init>
		BSP_TSENSOR_Init();
 8000a28:	f001 fa9a 	bl	8001f60 <BSP_TSENSOR_Init>




	  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8000a2c:	4815      	ldr	r0, [pc, #84]	; (8000a84 <main+0xdc>)
 8000a2e:	f009 f877 	bl	8009b20 <puts>
	  TERMOUT("TCP Client Instructions :\n");
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <main+0xe0>)
 8000a34:	f009 f874 	bl	8009b20 <puts>
	  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <main+0xe4>)
 8000a3a:	f009 f871 	bl	8009b20 <puts>
	  TERMOUT("   you configured using the Configuration Access Point.\n");
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <main+0xe8>)
 8000a40:	f009 f86e 	bl	8009b20 <puts>
	  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <main+0xec>)
 8000a46:	f009 f86b 	bl	8009b20 <puts>
	  TERMOUT("   with port(8002).\n");
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <main+0xf0>)
 8000a4c:	f009 f868 	bl	8009b20 <puts>
	  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <main+0xf4>)
 8000a52:	f009 f865 	bl	8009b20 <puts>


		    /* Init scheduler ----------------------------------------------------------------------------*/
	  osKernelInitialize();
 8000a56:	f005 fd1d 	bl	8006494 <osKernelInitialize>


	  /* USER CODE BEGIN RTOS_THREADS */
	  //inizialize the structure
	  inizialize(&sharedValues);
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <main+0xf8>)
 8000a5c:	f7ff ff7c 	bl	8000958 <inizialize>
	  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
	  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <main+0xfc>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <main+0x100>)
 8000a66:	f005 fd7f 	bl	8006568 <osThreadNew>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <main+0x104>)
 8000a6e:	601a      	str	r2, [r3, #0]


	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	  osKernelStart();
 8000a70:	f005 fd44 	bl	80064fc <osKernelStart>
 8000a74:	2300      	movs	r3, #0


}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20002f0c 	.word	0x20002f0c
 8000a80:	40013800 	.word	0x40013800
 8000a84:	0800aa98 	.word	0x0800aa98
 8000a88:	0800aad8 	.word	0x0800aad8
 8000a8c:	0800aaf4 	.word	0x0800aaf4
 8000a90:	0800ab34 	.word	0x0800ab34
 8000a94:	0800ab6c 	.word	0x0800ab6c
 8000a98:	0800abac 	.word	0x0800abac
 8000a9c:	0800abc0 	.word	0x0800abc0
 8000aa0:	20002dc4 	.word	0x20002dc4
 8000aa4:	0800b06c 	.word	0x0800b06c
 8000aa8:	0800135d 	.word	0x0800135d
 8000aac:	20002ec4 	.word	0x20002ec4

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0b8      	sub	sp, #224	; 0xe0
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aba:	2244      	movs	r2, #68	; 0x44
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 ffc9 	bl	8009a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2288      	movs	r2, #136	; 0x88
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f008 ffbb 	bl	8009a56 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ae0:	f002 ffc6 	bl	8003a70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ae4:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <SystemClock_Config+0x140>)
 8000ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aea:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <SystemClock_Config+0x140>)
 8000aec:	f023 0318 	bic.w	r3, r3, #24
 8000af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000af4:	2314      	movs	r3, #20
 8000af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b0c:	2360      	movs	r3, #96	; 0x60
 8000b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b24:	2328      	movs	r3, #40	; 0x28
 8000b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 f8d5 	bl	8003cf0 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b4c:	f000 fc10 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2303      	movs	r3, #3
 8000b58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b72:	2104      	movs	r1, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fca1 	bl	80044bc <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b80:	f000 fbf6 	bl	8001370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <SystemClock_Config+0x144>)
 8000b86:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000ba8:	2318      	movs	r3, #24
 8000baa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bac:	2307      	movs	r3, #7
 8000bae:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000bb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bbc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fe7f 	bl	80048c4 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000bcc:	f000 fbd0 	bl	8001370 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bd4:	f002 ff6a 	bl	8003aac <HAL_PWREx_ControlVoltageScaling>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000bde:	f000 fbc7 	bl	8001370 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000be2:	f004 f955 	bl	8004e90 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000be6:	bf00      	nop
 8000be8:	37e0      	adds	r7, #224	; 0xe0
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	00012085 	.word	0x00012085

08000bf8 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000c00:	1d39      	adds	r1, r7, #4
 8000c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c06:	2201      	movs	r2, #1
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <__io_putchar+0x20>)
 8000c0a:	f004 fd2c 	bl	8005666 <HAL_UART_Transmit>

  return ch;
 8000c0e:	687b      	ldr	r3, [r7, #4]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20002f0c 	.word	0x20002f0c

08000c1c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <MX_DFSDM1_Init+0x6c>)
 8000c24:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c4a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c54:	2204      	movs	r2, #4
 8000c56:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_DFSDM1_Init+0x68>)
 8000c72:	f001 fbfb 	bl	800246c <HAL_DFSDM_ChannelInit>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c7c:	f000 fb78 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200028b4 	.word	0x200028b4
 8000c88:	40016020 	.word	0x40016020

08000c8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <MX_I2C2_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <MX_I2C2_Init+0x7c>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cc8:	f001 ffea 	bl	8002ca0 <HAL_I2C_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cd2:	f000 fb4d 	bl	8001370 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cda:	f002 fce9 	bl	80036b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ce4:	f000 fb44 	bl	8001370 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_I2C2_Init+0x74>)
 8000cec:	f002 fd2b 	bl	8003746 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cf6:	f000 fb3b 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20002d78 	.word	0x20002d78
 8000d04:	40005800 	.word	0x40005800
 8000d08:	10909cec 	.word	0x10909cec

08000d0c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <MX_QUADSPI_Init+0x48>)
 8000d14:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d18:	22ff      	movs	r2, #255	; 0xff
 8000d1a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_QUADSPI_Init+0x44>)
 8000d3c:	f002 ff1c 	bl	8003b78 <HAL_QSPI_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d46:	f000 fb13 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20002ec8 	.word	0x20002ec8
 8000d54:	a0001000 	.word	0xa0001000

08000d58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <MX_SPI3_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000da6:	2207      	movs	r2, #7
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000db2:	2208      	movs	r2, #8
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_SPI3_Init+0x74>)
 8000db8:	f004 fa44 	bl	8005244 <HAL_SPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 fad5 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20002ddc 	.word	0x20002ddc
 8000dd0:	40003c00 	.word	0x40003c00

08000dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e18:	f004 fbd7 	bl	80055ca <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 faa5 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20002e40 	.word	0x20002e40
 8000e30:	40013800 	.word	0x40013800

08000e34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <MX_USART3_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART3_UART_Init+0x58>)
 8000e78:	f004 fba7 	bl	80055ca <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 fa75 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200028f0 	.word	0x200028f0
 8000e90:	40004800 	.word	0x40004800

08000e94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea2:	2206      	movs	r2, #6
 8000ea4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed8:	f002 fc81 	bl	80037de <HAL_PCD_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f000 fa45 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20002970 	.word	0x20002970

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	4bba      	ldr	r3, [pc, #744]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4ab9      	ldr	r2, [pc, #740]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4bb7      	ldr	r3, [pc, #732]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4bb4      	ldr	r3, [pc, #720]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4ab3      	ldr	r2, [pc, #716]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4bb1      	ldr	r3, [pc, #708]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4bae      	ldr	r3, [pc, #696]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4aad      	ldr	r2, [pc, #692]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4bab      	ldr	r3, [pc, #684]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4ba8      	ldr	r3, [pc, #672]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4aa7      	ldr	r2, [pc, #668]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4ba5      	ldr	r3, [pc, #660]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4ba2      	ldr	r3, [pc, #648]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4aa1      	ldr	r2, [pc, #644]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b9f      	ldr	r3, [pc, #636]	; (80011f0 <MX_GPIO_Init+0x300>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f84:	489b      	ldr	r0, [pc, #620]	; (80011f4 <MX_GPIO_Init+0x304>)
 8000f86:	f001 fe5b 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 fe54 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f9e:	4896      	ldr	r0, [pc, #600]	; (80011f8 <MX_GPIO_Init+0x308>)
 8000fa0:	f001 fe4e 	bl	8002c40 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f241 0181 	movw	r1, #4225	; 0x1081
 8000faa:	4894      	ldr	r0, [pc, #592]	; (80011fc <MX_GPIO_Init+0x30c>)
 8000fac:	f001 fe48 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	4891      	ldr	r0, [pc, #580]	; (80011fc <MX_GPIO_Init+0x30c>)
 8000fb8:	f001 fe42 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000fc2:	488f      	ldr	r0, [pc, #572]	; (8001200 <MX_GPIO_Init+0x310>)
 8000fc4:	f001 fe3c 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2120      	movs	r1, #32
 8000fcc:	488a      	ldr	r0, [pc, #552]	; (80011f8 <MX_GPIO_Init+0x308>)
 8000fce:	f001 fe37 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4887      	ldr	r0, [pc, #540]	; (80011f4 <MX_GPIO_Init+0x304>)
 8000fd8:	f001 fe32 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fdc:	f240 1315 	movw	r3, #277	; 0x115
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	487f      	ldr	r0, [pc, #508]	; (80011f4 <MX_GPIO_Init+0x304>)
 8000ff6:	f001 fb87 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ffa:	236a      	movs	r3, #106	; 0x6a
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	4b81      	ldr	r3, [pc, #516]	; (8001204 <MX_GPIO_Init+0x314>)
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4879      	ldr	r0, [pc, #484]	; (80011f4 <MX_GPIO_Init+0x304>)
 800100e:	f001 fb7b 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001018:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <MX_GPIO_Init+0x318>)
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4876      	ldr	r0, [pc, #472]	; (8001200 <MX_GPIO_Init+0x310>)
 8001028:	f001 fb6e 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800102c:	233f      	movs	r3, #63	; 0x3f
 800102e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001030:	230b      	movs	r3, #11
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4870      	ldr	r0, [pc, #448]	; (8001200 <MX_GPIO_Init+0x310>)
 8001040:	f001 fb62 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001044:	2303      	movs	r3, #3
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001054:	2308      	movs	r3, #8
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 fb51 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001066:	f248 1304 	movw	r3, #33028	; 0x8104
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f001 fb41 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001086:	2308      	movs	r3, #8
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 fb30 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80010a8:	2310      	movs	r3, #16
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ac:	230b      	movs	r3, #11
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f001 fb23 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80010c2:	23e0      	movs	r3, #224	; 0xe0
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d2:	2305      	movs	r3, #5
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f001 fb12 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80010e4:	2301      	movs	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <MX_GPIO_Init+0x314>)
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4840      	ldr	r0, [pc, #256]	; (80011f8 <MX_GPIO_Init+0x308>)
 80010f8:	f001 fb06 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001100:	230b      	movs	r3, #11
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	483a      	ldr	r0, [pc, #232]	; (80011f8 <MX_GPIO_Init+0x308>)
 8001110:	f001 fafa 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001114:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001118:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4832      	ldr	r0, [pc, #200]	; (80011f8 <MX_GPIO_Init+0x308>)
 800112e:	f001 faeb 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001132:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001136:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <MX_GPIO_Init+0x314>)
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	482d      	ldr	r0, [pc, #180]	; (80011fc <MX_GPIO_Init+0x30c>)
 8001148:	f001 fade 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800114c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4825      	ldr	r0, [pc, #148]	; (80011fc <MX_GPIO_Init+0x30c>)
 8001166:	f001 facf 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800116a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_GPIO_Init+0x310>)
 8001184:	f001 fac0 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001188:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_GPIO_Init+0x314>)
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <MX_GPIO_Init+0x310>)
 800119e:	f001 fab3 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80011a2:	2302      	movs	r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b2:	2305      	movs	r3, #5
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_GPIO_Init+0x30c>)
 80011be:	f001 faa3 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80011c2:	2378      	movs	r3, #120	; 0x78
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d2:	2307      	movs	r3, #7
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_GPIO_Init+0x30c>)
 80011de:	f001 fa93 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80011e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00d      	b.n	800120c <MX_GPIO_Init+0x31c>
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48001000 	.word	0x48001000
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48000800 	.word	0x48000800
 8001204:	10110000 	.word	0x10110000
 8001208:	10210000 	.word	0x10210000
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001212:	2304      	movs	r3, #4
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <MX_GPIO_Init+0x35c>)
 800121e:	f001 fa73 	bl	8002708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2017      	movs	r0, #23
 8001228:	f001 f8e9 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800122c:	2017      	movs	r0, #23
 800122e:	f001 f902 	bl	8002436 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f001 f8e1 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f001 f8fa 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	48000400 	.word	0x48000400

08001250 <stampa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */

void stampa(struct sharedValues_t *sv){
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b091      	sub	sp, #68	; 0x44
 8001254:	af02      	add	r7, sp, #8
 8001256:	6078      	str	r0, [r7, #4]
	 osSemaphoreAcquire(sv->secondo, portMAX_DELAY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	4618      	mov	r0, r3
 8001262:	f005 faf3 	bl	800684c <osSemaphoreAcquire>
		printf("Thread 2\n");
 8001266:	4838      	ldr	r0, [pc, #224]	; (8001348 <stampa+0xf8>)
 8001268:	f008 fc5a 	bl	8009b20 <puts>

		float temperature;
		float separa = 0;
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
		int val1,val2;
		char msg[30] = "";
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	831a      	strh	r2, [r3, #24]
		temperature = BSP_TSENSOR_ReadTemp();
 800128a:	f000 fe85 	bl	8001f98 <BSP_TSENSOR_ReadTemp>
 800128e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		printf("Thread TTTTTTTTTTTTTTTTTTt\n");
 8001292:	482e      	ldr	r0, [pc, #184]	; (800134c <stampa+0xfc>)
 8001294:	f008 fc44 	bl	8009b20 <puts>
		val1 = temperature;
 8001298:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800129c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a0:	ee17 3a90 	vmov	r3, s15
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		separa = temperature - val1;
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		val2 = trunc(separa * 100);
 80012bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012c0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001350 <stampa+0x100>
 80012c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c8:	ee17 0a90 	vmov	r0, s15
 80012cc:	f7ff f934 	bl	8000538 <__aeabi_f2d>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	ec44 3b10 	vmov	d0, r3, r4
 80012d8:	f009 fb84 	bl	800a9e4 <trunc>
 80012dc:	ec54 3b10 	vmov	r3, r4, d0
 80012e0:	4618      	mov	r0, r3
 80012e2:	4621      	mov	r1, r4
 80012e4:	f7ff f980 	bl	80005e8 <__aeabi_d2iz>
 80012e8:	4603      	mov	r3, r0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
		sv->temperature_val1 = val1;
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a00 	vstr	s15, [r3]
		sv->temperature_val2 = val2;
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	edc3 7a01 	vstr	s15, [r3, #4]
		snprintf(msg,30," TEMPERATURE = %d.%02d\n\r", val1, val2);
 800130c:	f107 0008 	add.w	r0, r7, #8
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <stampa+0x104>)
 8001318:	211e      	movs	r1, #30
 800131a:	f008 fc09 	bl	8009b30 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 800131e:	f107 0108 	add.w	r1, r7, #8
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	221e      	movs	r2, #30
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <stampa+0x108>)
 800132a:	f004 f99c 	bl	8005666 <HAL_UART_Transmit>


  osSemaphoreRelease(sv->secondo);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4618      	mov	r0, r3
 8001334:	f005 faf0 	bl	8006918 <osSemaphoreRelease>
  osDelay(500);
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f005 f9ba 	bl	80066b4 <osDelay>
}
 8001340:	bf00      	nop
 8001342:	373c      	adds	r7, #60	; 0x3c
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	0800af38 	.word	0x0800af38
 800134c:	0800af44 	.word	0x0800af44
 8001350:	42c80000 	.word	0x42c80000
 8001354:	0800ae98 	.word	0x0800ae98
 8001358:	20002e40 	.word	0x20002e40

0800135c <StartTask02>:
void StartTask02(void *arguments)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  stampa(&sharedValues);
 8001364:	4801      	ldr	r0, [pc, #4]	; (800136c <StartTask02+0x10>)
 8001366:	f7ff ff73 	bl	8001250 <stampa>
 800136a:	e7fb      	b.n	8001364 <StartTask02+0x8>
 800136c:	20002dc4 	.word	0x20002dc4

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d000      	beq.n	8001390 <HAL_GPIO_EXTI_Callback+0x12>
      SPI_WIFI_ISR();
      break;
    }
    default:
    {
      break;
 800138e:	e002      	b.n	8001396 <HAL_GPIO_EXTI_Callback+0x18>
      SPI_WIFI_ISR();
 8001390:	f7ff fad2 	bl	8000938 <SPI_WIFI_ISR>
      break;
 8001394:	bf00      	nop
    }
  }
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SPI3_IRQHandler+0x10>)
 80013a6:	f003 fff1 	bl	800538c <HAL_SPI_IRQHandler>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20002850 	.word	0x20002850

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x44>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_MspInit+0x44>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6613      	str	r3, [r2, #96]	; 0x60
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_MspInit+0x44>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_MspInit+0x44>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6593      	str	r3, [r2, #88]	; 0x58
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_MspInit+0x44>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d128      	bne.n	800146e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_DFSDM_ChannelMspInit+0x80>)
 800141e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001420:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	6613      	str	r3, [r2, #96]	; 0x60
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_DFSDM_ChannelMspInit+0x80>)
 800142a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_DFSDM_ChannelMspInit+0x80>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800144c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800145e:	2306      	movs	r3, #6
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_DFSDM_ChannelMspInit+0x84>)
 800146a:	f001 f94d 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000b8 	.word	0x200000b8
 800147c:	40021000 	.word	0x40021000
 8001480:	48001000 	.word	0x48001000

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_I2C_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d128      	bne.n	80014f8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_I2C_MspInit+0x80>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <HAL_I2C_MspInit+0x80>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_I2C_MspInit+0x80>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80014be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c4:	2312      	movs	r3, #18
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d0:	2304      	movs	r3, #4
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <HAL_I2C_MspInit+0x84>)
 80014dc:	f001 f914 	bl	8002708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_I2C_MspInit+0x80>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_I2C_MspInit+0x80>)
 80014e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ea:	6593      	str	r3, [r2, #88]	; 0x58
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_I2C_MspInit+0x80>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005800 	.word	0x40005800
 8001504:	40021000 	.word	0x40021000
 8001508:	48000400 	.word	0x48000400

0800150c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_I2C_MspDeInit+0x3c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10f      	bne.n	800153e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_I2C_MspDeInit+0x40>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_I2C_MspDeInit+0x40>)
 8001524:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <HAL_I2C_MspDeInit+0x44>)
 8001530:	f001 fa92 	bl	8002a58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <HAL_I2C_MspDeInit+0x44>)
 800153a:	f001 fa8d 	bl	8002a58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40005800 	.word	0x40005800
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_QSPI_MspInit+0x7c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d128      	bne.n	80015c8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_QSPI_MspInit+0x80>)
 8001578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <HAL_QSPI_MspInit+0x80>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6513      	str	r3, [r2, #80]	; 0x50
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_QSPI_MspInit+0x80>)
 8001584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_QSPI_MspInit+0x80>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_QSPI_MspInit+0x80>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_QSPI_MspInit+0x80>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80015a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015aa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015b8:	230a      	movs	r3, #10
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_QSPI_MspInit+0x84>)
 80015c4:	f001 f8a0 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	a0001000 	.word	0xa0001000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	48001000 	.word	0x48001000

080015dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_SPI_MspInit+0x7c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d128      	bne.n	8001650 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_SPI_MspInit+0x80>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <HAL_SPI_MspInit+0x80>)
 8001604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001608:	6593      	str	r3, [r2, #88]	; 0x58
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_SPI_MspInit+0x80>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_SPI_MspInit+0x80>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_SPI_MspInit+0x80>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_SPI_MspInit+0x80>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800162e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001640:	2306      	movs	r3, #6
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_SPI_MspInit+0x84>)
 800164c:	f001 f85c 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40003c00 	.word	0x40003c00
 800165c:	40021000 	.word	0x40021000
 8001660:	48000800 	.word	0x48000800

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_UART_MspInit+0xd8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d128      	bne.n	80016d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_UART_MspInit+0xdc>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	4a2d      	ldr	r2, [pc, #180]	; (8001740 <HAL_UART_MspInit+0xdc>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6613      	str	r3, [r2, #96]	; 0x60
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_UART_MspInit+0xdc>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80016b6:	23c0      	movs	r3, #192	; 0xc0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c6:	2307      	movs	r3, #7
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	481c      	ldr	r0, [pc, #112]	; (8001744 <HAL_UART_MspInit+0xe0>)
 80016d2:	f001 f819 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016d6:	e02d      	b.n	8001734 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_UART_MspInit+0xe4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d128      	bne.n	8001734 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6593      	str	r3, [r2, #88]	; 0x58
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_UART_MspInit+0xdc>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_UART_MspInit+0xdc>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_UART_MspInit+0xdc>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001724:	2307      	movs	r3, #7
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <HAL_UART_MspInit+0xe8>)
 8001730:	f000 ffea 	bl	8002708 <HAL_GPIO_Init>
}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40013800 	.word	0x40013800
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400
 8001748:	40004800 	.word	0x40004800
 800174c:	48000c00 	.word	0x48000c00

08001750 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001770:	d154      	bne.n	800181c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800178a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f000 ffb1 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80017a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b8:	230a      	movs	r3, #10
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f000 ff9f 	bl	8002708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d114      	bne.n	8001818 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001806:	f002 f9a7 	bl	8003b58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <HAL_PCD_MspInit+0xd4>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001816:	e001      	b.n	800181c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001818:	f002 f99e 	bl	8003b58 <HAL_PWREx_EnableVddUSB>
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 fcb0 	bl	80021c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001864:	f006 ff8e 	bl	8008784 <xTaskGetSchedulerState>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800186e:	f007 fe5b 	bl	8009528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800187a:	2020      	movs	r0, #32
 800187c:	f001 f9f8 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001880:	2040      	movs	r0, #64	; 0x40
 8001882:	f001 f9f5 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001886:	2080      	movs	r0, #128	; 0x80
 8001888:	f001 f9f2 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800188c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001890:	f001 f9ee 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800189c:	2002      	movs	r0, #2
 800189e:	f001 f9e7 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80018aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018ae:	f001 f9df 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80018b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018b6:	f001 f9db 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018be:	f001 f9d7 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80018c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018c6:	f001 f9d3 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80018ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018ce:	f001 f9cf 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e00a      	b.n	80018fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e8:	f3af 8000 	nop.w
 80018ec:	4601      	mov	r1, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf0      	blt.n	80018e8 <_read+0x12>
	}

return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e009      	b.n	8001936 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f964 	bl	8000bf8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf1      	blt.n	8001922 <_write+0x12>
	}
	return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_close>:

int _close(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001970:	605a      	str	r2, [r3, #4]
	return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_isatty>:

int _isatty(int file)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f008 f804 	bl	80099ec <__errno>
 80019e4:	4602      	mov	r2, r0
 80019e6:	230c      	movs	r3, #12
 80019e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20018000 	.word	0x20018000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	200000bc 	.word	0x200000bc
 8001a18:	20003020 	.word	0x20003020

08001a1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <SystemInit+0x64>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <SystemInit+0x64>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <SystemInit+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <SystemInit+0x68>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <SystemInit+0x68>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <SystemInit+0x68>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <SystemInit+0x68>)
 8001a48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <SystemInit+0x68>)
 8001a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <SystemInit+0x68>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <SystemInit+0x68>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <SystemInit+0x68>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SystemInit+0x64>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	609a      	str	r2, [r3, #8]
#endif
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	40021000 	.word	0x40021000

08001a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff ffc6 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a9c:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
	ldr	r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ab2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f007 ff9f 	bl	80099f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aba:	f7fe ff75 	bl	80009a8 <main>

08001abe <LoopForever>:

LoopForever:
    b LoopForever
 8001abe:	e7fe      	b.n	8001abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ac4:	0800b180 	.word	0x0800b180
	ldr	r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001acc:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 8001ad0:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8001ad4:	20003020 	.word	0x20003020

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <BSP_LED_Init>:
  * @param  Led  LED to be initialized.
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  LEDx_GPIO_CLK_ENABLE(Led);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <BSP_LED_Init+0x28>
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <BSP_LED_Init+0x58>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <BSP_LED_Init+0x58>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <BSP_LED_Init+0x58>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b08:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <BSP_LED_Init+0x5c>)
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	f107 020c 	add.w	r2, r7, #12
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 fdef 	bl	8002708 <HAL_GPIO_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	20000004 	.word	0x20000004

08001b3c <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line
  *                                              with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	460a      	mov	r2, r1
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <BSP_PB_Init+0xa0>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <BSP_PB_Init+0xa0>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <BSP_PB_Init+0xa0>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d112      	bne.n	8001b90 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <BSP_PB_Init+0xa4>)
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	f107 020c 	add.w	r2, r7, #12
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fdbc 	bl	8002708 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11e      	bne.n	8001bd4 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <BSP_PB_Init+0xa8>)
 8001ba6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <BSP_PB_Init+0xa4>)
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fda6 	bl	8002708 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001bbc:	2328      	movs	r3, #40	; 0x28
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fc1a 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001bca:	2328      	movs	r3, #40	; 0x28
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fc31 	bl	8002436 <HAL_NVIC_EnableIRQ>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	10110000 	.word	0x10110000

08001be8 <BSP_COM_Init>:
  *                @arg  COM1
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10b      	bne.n	8001c12 <BSP_COM_Init+0x2a>
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <BSP_COM_Init+0x48>
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a24      	ldr	r2, [pc, #144]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <BSP_COM_Init+0x66>
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6613      	str	r3, [r2, #96]	; 0x60
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <BSP_COM_Init+0xc8>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8001c4e:	2340      	movs	r3, #64	; 0x40
 8001c50:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c56:	2302      	movs	r3, #2
 8001c58:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001c5e:	2307      	movs	r3, #7
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <BSP_COM_Init+0xcc>)
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	f107 0214 	add.w	r2, r7, #20
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fd49 	bl	8002708 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001c7e:	2307      	movs	r3, #7
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <BSP_COM_Init+0xd0>)
 8001c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8a:	f107 0214 	add.w	r2, r7, #20
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fd39 	bl	8002708 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <BSP_COM_Init+0xd4>)
 8001c9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f003 fc91 	bl	80055ca <HAL_UART_Init>
}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	2000000c 	.word	0x2000000c

08001cc0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ce0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ce4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481b      	ldr	r0, [pc, #108]	; (8001d6c <I2Cx_MspInit+0xac>)
 8001cfe:	f000 fd03 	bl	8002708 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4818      	ldr	r0, [pc, #96]	; (8001d6c <I2Cx_MspInit+0xac>)
 8001d0a:	f000 fcfd 	bl	8002708 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d30:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <I2Cx_MspInit+0xa8>)
 8001d38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	210f      	movs	r1, #15
 8001d42:	2021      	movs	r0, #33	; 0x21
 8001d44:	f000 fb5b 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d48:	2021      	movs	r0, #33	; 0x21
 8001d4a:	f000 fb74 	bl	8002436 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	210f      	movs	r1, #15
 8001d52:	2022      	movs	r0, #34	; 0x22
 8001d54:	f000 fb53 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001d58:	2022      	movs	r0, #34	; 0x22
 8001d5a:	f000 fb6c 	bl	8002436 <HAL_NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000400 	.word	0x48000400

08001d70 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <I2Cx_Init+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <I2Cx_Init+0x58>)
 8001d82:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff89 	bl	8001cc0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 ff76 	bl	8002ca0 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8001db4:	2100      	movs	r1, #0
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f001 fc7a 	bl	80036b0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005800 	.word	0x40005800
 8001dc8:	00702681 	.word	0x00702681

08001dcc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af04      	add	r7, sp, #16
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	72fb      	strb	r3, [r7, #11]
 8001dde:	460b      	mov	r3, r1
 8001de0:	813b      	strh	r3, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	b299      	uxth	r1, r3
 8001dee:	88f8      	ldrh	r0, [r7, #6]
 8001df0:	893a      	ldrh	r2, [r7, #8]
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4603      	mov	r3, r0
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f001 f91e 	bl	8003044 <HAL_I2C_Mem_Read>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	4619      	mov	r1, r3
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f832 	bl	8001e80 <I2Cx_Error>
  }
  return status;
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b08a      	sub	sp, #40	; 0x28
 8001e2a:	af04      	add	r7, sp, #16
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	4608      	mov	r0, r1
 8001e30:	4611      	mov	r1, r2
 8001e32:	461a      	mov	r2, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	72fb      	strb	r3, [r7, #11]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	813b      	strh	r3, [r7, #8]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	b299      	uxth	r1, r3
 8001e48:	88f8      	ldrh	r0, [r7, #6]
 8001e4a:	893a      	ldrh	r2, [r7, #8]
 8001e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e50:	9302      	str	r3, [sp, #8]
 8001e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 ffdd 	bl	8002e1c <HAL_I2C_Mem_Write>
 8001e62:	4603      	mov	r3, r0
 8001e64:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f805 	bl	8001e80 <I2Cx_Error>
  }
  return status;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 ff96 	bl	8002dbe <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff6c 	bl	8001d70 <I2Cx_Init>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <SENSOR_IO_Init+0x10>)
 8001ea6:	f7ff ff63 	bl	8001d70 <I2Cx_Init>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20002f8c 	.word	0x20002f8c

08001eb4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	71bb      	strb	r3, [r7, #6]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	79f9      	ldrb	r1, [r7, #7]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	1d7b      	adds	r3, r7, #5
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <SENSOR_IO_Write+0x30>)
 8001ed8:	f7ff ffa5 	bl	8001e26 <I2Cx_WriteMultiple>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20002f8c 	.word	0x20002f8c

08001ee8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	79f9      	ldrb	r1, [r7, #7]
 8001f02:	2301      	movs	r3, #1
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f107 030f 	add.w	r3, r7, #15
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <SENSOR_IO_Read+0x38>)
 8001f10:	f7ff ff5c 	bl	8001dcc <I2Cx_ReadMultiple>

  return read_value;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20002f8c 	.word	0x20002f8c

08001f24 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	603a      	str	r2, [r7, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	460b      	mov	r3, r1
 8001f34:	71bb      	strb	r3, [r7, #6]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	79f9      	ldrb	r1, [r7, #7]
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	4804      	ldr	r0, [pc, #16]	; (8001f5c <SENSOR_IO_ReadMultiple+0x38>)
 8001f4c:	f7ff ff3e 	bl	8001dcc <I2Cx_ReadMultiple>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b29b      	uxth	r3, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20002f8c 	.word	0x20002f8c

08001f60 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <BSP_TSENSOR_Init+0x30>)
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <BSP_TSENSOR_Init+0x34>)
 8001f6e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001f70:	f7ff ff96 	bl	8001ea0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <BSP_TSENSOR_Init+0x30>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	20be      	movs	r0, #190	; 0xbe
 8001f7e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001f84:	79fb      	ldrb	r3, [r7, #7]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000c0 	.word	0x200000c0
 8001f94:	20000018 	.word	0x20000018

08001f98 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <BSP_TSENSOR_ReadTemp+0x18>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	20be      	movs	r0, #190	; 0xbe
 8001fa4:	4798      	blx	r3
 8001fa6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001faa:	eeb0 0a67 	vmov.f32	s0, s15
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200000c0 	.word	0x200000c0

08001fb4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2120      	movs	r1, #32
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff8e 	bl	8001ee8 <SENSOR_IO_Read>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	2120      	movs	r1, #32
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff57 	bl	8001eb4 <SENSOR_IO_Write>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b088      	sub	sp, #32
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	b2d8      	uxtb	r0, r3
 800201c:	f107 0208 	add.w	r2, r7, #8
 8002020:	2302      	movs	r3, #2
 8002022:	21b2      	movs	r1, #178	; 0xb2
 8002024:	f7ff ff7e 	bl	8001f24 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2135      	movs	r1, #53	; 0x35
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff5a 	bl	8001ee8 <SENSOR_IO_Read>
 8002034:	4603      	mov	r3, r0
 8002036:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002038:	7ffb      	ldrb	r3, [r7, #31]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	b21b      	sxth	r3, r3
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	b21a      	sxth	r2, r3
 8002044:	7a3b      	ldrb	r3, [r7, #8]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800204c:	7ffb      	ldrb	r3, [r7, #31]
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	b21b      	sxth	r3, r3
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	b21a      	sxth	r2, r3
 8002058:	7a7b      	ldrb	r3, [r7, #9]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002060:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002064:	10db      	asrs	r3, r3, #3
 8002066:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002068:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800206c:	10db      	asrs	r3, r3, #3
 800206e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	b2d8      	uxtb	r0, r3
 8002074:	f107 0208 	add.w	r2, r7, #8
 8002078:	2304      	movs	r3, #4
 800207a:	21bc      	movs	r1, #188	; 0xbc
 800207c:	f7ff ff52 	bl	8001f24 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	b21a      	sxth	r2, r3
 8002086:	7a3b      	ldrb	r3, [r7, #8]
 8002088:	b21b      	sxth	r3, r3
 800208a:	4313      	orrs	r3, r2
 800208c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b21a      	sxth	r2, r3
 8002094:	7abb      	ldrb	r3, [r7, #10]
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	b2d8      	uxtb	r0, r3
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	2302      	movs	r3, #2
 80020a6:	21aa      	movs	r1, #170	; 0xaa
 80020a8:	f7ff ff3c 	bl	8001f24 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	7a3b      	ldrb	r3, [r7, #8]
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80020ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80020be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002108:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	ee07 3a90 	vmov	s15, r3
}
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002126:	2003      	movs	r0, #3
 8002128:	f000 f95e 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212c:	2000      	movs	r0, #0
 800212e:	f000 f80d 	bl	800214c <HAL_InitTick>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	e001      	b.n	8002142 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800213e:	f7ff f939 	bl	80013b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002142:	79fb      	ldrb	r3, [r7, #7]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_InitTick+0x6c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_InitTick+0x70>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_InitTick+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f96b 	bl	8002452 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d809      	bhi.n	800219c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f935 	bl	80023fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_InitTick+0x74>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e007      	b.n	80021ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e004      	b.n	80021ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e001      	b.n	80021ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000002c 	.word	0x2000002c
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000028 	.word	0x20000028

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000002c 	.word	0x2000002c
 80021e8:	20002fd8 	.word	0x20002fd8

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20002fd8 	.word	0x20002fd8

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_Delay+0x40>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffde 	bl	80021ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2000002c 	.word	0x2000002c

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff29 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff3e 	bl	8002290 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff8e 	bl	800233c <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff31 	bl	80022ac <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0ac      	b.n	80025d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8b2 	bl	80025ec <DFSDM_GetChannelFromInstance>
 8002488:	4602      	mov	r2, r0
 800248a:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <HAL_DFSDM_ChannelInit+0x174>)
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e09f      	b.n	80025d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fe ffaf 	bl	80013fc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <HAL_DFSDM_ChannelInit+0x178>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a4f      	ldr	r2, [pc, #316]	; (80025e4 <HAL_DFSDM_ChannelInit+0x178>)
 80024a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_DFSDM_ChannelInit+0x178>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d125      	bne.n	80024fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80024b0:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4948      	ldr	r1, [pc, #288]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80024d4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	791b      	ldrb	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	493f      	ldr	r1, [pc, #252]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80024f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800250a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800251a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002520:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 020f 	bic.w	r2, r2, #15
 8002538:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002560:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 0207 	and.w	r2, r2, #7
 800258c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f810 	bl	80025ec <DFSDM_GetChannelFromInstance>
 80025cc:	4601      	mov	r1, r0
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_DFSDM_ChannelInit+0x174>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200000c8 	.word	0x200000c8
 80025e4:	200000c4 	.word	0x200000c4
 80025e8:	40016000 	.word	0x40016000

080025ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <DFSDM_GetChannelFromInstance+0x7c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e02b      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <DFSDM_GetChannelFromInstance+0x80>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d102      	bne.n	8002610 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e024      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a17      	ldr	r2, [pc, #92]	; (8002670 <DFSDM_GetChannelFromInstance+0x84>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d102      	bne.n	800261e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002618:	2302      	movs	r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e01d      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <DFSDM_GetChannelFromInstance+0x88>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d102      	bne.n	800262c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002626:	2304      	movs	r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e016      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <DFSDM_GetChannelFromInstance+0x8c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d102      	bne.n	800263a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002634:	2305      	movs	r3, #5
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e00f      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <DFSDM_GetChannelFromInstance+0x90>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d102      	bne.n	8002648 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002642:	2306      	movs	r3, #6
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e008      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <DFSDM_GetChannelFromInstance+0x94>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d102      	bne.n	8002656 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002650:	2307      	movs	r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e001      	b.n	800265a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002656:	2303      	movs	r3, #3
 8002658:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40016000 	.word	0x40016000
 800266c:	40016020 	.word	0x40016020
 8002670:	40016040 	.word	0x40016040
 8002674:	40016080 	.word	0x40016080
 8002678:	400160a0 	.word	0x400160a0
 800267c:	400160c0 	.word	0x400160c0
 8002680:	400160e0 	.word	0x400160e0

08002684 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d005      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2204      	movs	r2, #4
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e029      	b.n	80026fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020e 	bic.w	r2, r2, #14
 80026b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	f003 021c 	and.w	r2, r3, #28
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
    }
  }
  return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e17f      	b.n	8002a18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8171 	beq.w	8002a12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00b      	beq.n	8002750 <HAL_GPIO_Init+0x48>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d007      	beq.n	8002750 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002744:	2b11      	cmp	r3, #17
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b12      	cmp	r3, #18
 800274e:	d130      	bne.n	80027b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002786:	2201      	movs	r2, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0201 	and.w	r2, r3, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d118      	bne.n	80027f0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027c4:	2201      	movs	r2, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0201 	and.w	r2, r3, #1
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x128>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b12      	cmp	r3, #18
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	6939      	ldr	r1, [r7, #16]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80ac 	beq.w	8002a12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6613      	str	r3, [r2, #96]	; 0x60
 80028c6:	4b5b      	ldr	r3, [pc, #364]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028d2:	4a59      	ldr	r2, [pc, #356]	; (8002a38 <HAL_GPIO_Init+0x330>)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x242>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_GPIO_Init+0x334>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x23e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <HAL_GPIO_Init+0x338>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x23a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_GPIO_Init+0x33c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x236>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_GPIO_Init+0x340>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x232>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_GPIO_Init+0x344>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x22e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <HAL_GPIO_Init+0x348>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x22a>
 800292e:	2306      	movs	r3, #6
 8002930:	e00c      	b.n	800294c <HAL_GPIO_Init+0x244>
 8002932:	2307      	movs	r3, #7
 8002934:	e00a      	b.n	800294c <HAL_GPIO_Init+0x244>
 8002936:	2305      	movs	r3, #5
 8002938:	e008      	b.n	800294c <HAL_GPIO_Init+0x244>
 800293a:	2304      	movs	r3, #4
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x244>
 800293e:	2303      	movs	r3, #3
 8002940:	e004      	b.n	800294c <HAL_GPIO_Init+0x244>
 8002942:	2302      	movs	r3, #2
 8002944:	e002      	b.n	800294c <HAL_GPIO_Init+0x244>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_GPIO_Init+0x244>
 800294a:	2300      	movs	r3, #0
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	f002 0203 	and.w	r2, r2, #3
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	4093      	lsls	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800295c:	4936      	ldr	r1, [pc, #216]	; (8002a38 <HAL_GPIO_Init+0x330>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800298e:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f47f ae78 	bne.w	8002718 <HAL_GPIO_Init+0x10>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	48000400 	.word	0x48000400
 8002a40:	48000800 	.word	0x48000800
 8002a44:	48000c00 	.word	0x48000c00
 8002a48:	48001000 	.word	0x48001000
 8002a4c:	48001400 	.word	0x48001400
 8002a50:	48001800 	.word	0x48001800
 8002a54:	40010400 	.word	0x40010400

08002a58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a66:	e0cd      	b.n	8002c04 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80c0 	beq.w	8002bfe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002a7e:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <HAL_GPIO_DeInit+0x1c8>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aa6:	d025      	beq.n	8002af4 <HAL_GPIO_DeInit+0x9c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	; (8002c24 <HAL_GPIO_DeInit+0x1cc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01f      	beq.n	8002af0 <HAL_GPIO_DeInit+0x98>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_GPIO_DeInit+0x1d0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d019      	beq.n	8002aec <HAL_GPIO_DeInit+0x94>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <HAL_GPIO_DeInit+0x1d4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d013      	beq.n	8002ae8 <HAL_GPIO_DeInit+0x90>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_GPIO_DeInit+0x1d8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_GPIO_DeInit+0x8c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a5a      	ldr	r2, [pc, #360]	; (8002c34 <HAL_GPIO_DeInit+0x1dc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <HAL_GPIO_DeInit+0x88>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a59      	ldr	r2, [pc, #356]	; (8002c38 <HAL_GPIO_DeInit+0x1e0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_GPIO_DeInit+0x84>
 8002ad8:	2306      	movs	r3, #6
 8002ada:	e00c      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002adc:	2307      	movs	r3, #7
 8002ade:	e00a      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	e008      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e006      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_DeInit+0x9e>
 8002af4:	2300      	movs	r3, #0
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d132      	bne.n	8002b6c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002b06:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	494b      	ldr	r1, [pc, #300]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002b14:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4947      	ldr	r1, [pc, #284]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4944      	ldr	r1, [pc, #272]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4940      	ldr	r1, [pc, #256]	; (8002c3c <HAL_GPIO_DeInit+0x1e4>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b4e:	4a34      	ldr	r2, [pc, #208]	; (8002c20 <HAL_GPIO_DeInit+0x1c8>)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	3302      	adds	r3, #2
 8002b56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	4830      	ldr	r0, [pc, #192]	; (8002c20 <HAL_GPIO_DeInit+0x1c8>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	400a      	ands	r2, r1
 8002b66:	3302      	adds	r3, #2
 8002b68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2103      	movs	r1, #3
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	08d2      	lsrs	r2, r2, #3
 8002ba0:	4019      	ands	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2103      	movs	r1, #3
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	2101      	movs	r1, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f af2b 	bne.w	8002a68 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	48001000 	.word	0x48001000
 8002c34:	48001400 	.word	0x48001400
 8002c38:	48001800 	.word	0x48001800
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fb75 	bl	800137e <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e081      	b.n	8002db6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fbdc 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	e006      	b.n	8002d28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d104      	bne.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	ea42 0103 	orr.w	r1, r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1a      	ldr	r2, [r3, #32]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e021      	b.n	8002e14 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe fb8f 	bl	800150c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80f9 	bne.w	8003036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x34>
 8002e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0ed      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x4e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0e6      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e72:	f7ff f9bb 	bl	80021ec <HAL_GetTick>
 8002e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2319      	movs	r3, #25
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fac3 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d1      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2221      	movs	r2, #33	; 0x21
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	; 0x40
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ebc:	88f8      	ldrh	r0, [r7, #6]
 8002ebe:	893a      	ldrh	r2, [r7, #8]
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9d3 	bl	8003278 <I2C_RequestMemoryWrite>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0a9      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2bff      	cmp	r3, #255	; 0xff
 8002eec:	d90e      	bls.n	8002f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	2300      	movs	r3, #0
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fba5 	bl	8003654 <I2C_TransferConfig>
 8002f0a:	e00f      	b.n	8002f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb94 	bl	8003654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 faad 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e07b      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d034      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0x1c8>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d130      	bne.n	8002fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa3f 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04d      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d90e      	bls.n	8002fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb49 	bl	8003654 <I2C_TransferConfig>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fb38 	bl	8003654 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d19e      	bne.n	8002f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa8c 	bl	8003510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01a      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2220      	movs	r2, #32
 8003008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_I2C_Mem_Write+0x224>)
 8003016:	400b      	ands	r3, r1
 8003018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	fe00e800 	.word	0xfe00e800

08003044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	f040 80fd 	bne.w	8003266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_I2C_Mem_Read+0x34>
 8003072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0f1      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Mem_Read+0x4e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ea      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800309a:	f7ff f8a7 	bl	80021ec <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2319      	movs	r3, #25
 80030a6:	2201      	movs	r2, #1
 80030a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f9af 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d5      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2222      	movs	r2, #34	; 0x22
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e4:	88f8      	ldrh	r0, [r7, #6]
 80030e6:	893a      	ldrh	r2, [r7, #8]
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4603      	mov	r3, r0
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f913 	bl	8003320 <I2C_RequestMemoryRead>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ad      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2bff      	cmp	r3, #255	; 0xff
 8003114:	d90e      	bls.n	8003134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	4b52      	ldr	r3, [pc, #328]	; (8003270 <HAL_I2C_Mem_Read+0x22c>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fa91 	bl	8003654 <I2C_TransferConfig>
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_I2C_Mem_Read+0x22c>)
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa80 	bl	8003654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2200      	movs	r2, #0
 800315c:	2104      	movs	r1, #4
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f956 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07c      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d034      	beq.n	8003214 <HAL_I2C_Mem_Read+0x1d0>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d130      	bne.n	8003214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f927 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e04d      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d90e      	bls.n	80031f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fa31 	bl	8003654 <I2C_TransferConfig>
 80031f2:	e00f      	b.n	8003214 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	b2da      	uxtb	r2, r3
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	2300      	movs	r3, #0
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa20 	bl	8003654 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d19a      	bne.n	8003154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f974 	bl	8003510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e01a      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2220      	movs	r2, #32
 8003238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_I2C_Mem_Read+0x230>)
 8003246:	400b      	ands	r3, r1
 8003248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	80002400 	.word	0x80002400
 8003274:	fe00e800 	.word	0xfe00e800

08003278 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <I2C_RequestMemoryWrite+0xa4>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f9d7 	bl	8003654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8f0 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e02c      	b.n	8003314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
 80032ca:	e015      	b.n	80032f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	69b9      	ldr	r1, [r7, #24]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f8d6 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e012      	b.n	8003314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2200      	movs	r2, #0
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f884 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	80002000 	.word	0x80002000

08003320 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	8979      	ldrh	r1, [r7, #10]
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <I2C_RequestMemoryRead+0xa4>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f984 	bl	8003654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f89d 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e02c      	b.n	80033ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003366:	893b      	ldrh	r3, [r7, #8]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	e015      	b.n	800339e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003372:	893b      	ldrh	r3, [r7, #8]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	b29b      	uxth	r3, r3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f883 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e012      	b.n	80033ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	; 0x40
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f831 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	80002000 	.word	0x80002000

080033c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	619a      	str	r2, [r3, #24]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003420:	e022      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d01e      	beq.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe fedf 	bl	80021ec <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e00f      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	429a      	cmp	r2, r3
 8003484:	d0cd      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800349c:	e02c      	b.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f870 	bl	8003588 <I2C_IsAcknowledgeFailed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e02a      	b.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d01e      	beq.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fe97 	bl	80021ec <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e007      	b.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d1cb      	bne.n	800349e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	e028      	b.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f830 	bl	8003588 <I2C_IsAcknowledgeFailed>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e026      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fe5b 	bl	80021ec <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e007      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d1cf      	bne.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d151      	bne.n	8003646 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a2:	e022      	b.n	80035ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d01e      	beq.n	80035ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7fe fe1e 	bl	80021ec <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <I2C_IsAcknowledgeFailed+0x3a>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e02e      	b.n	8003648 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d1d5      	bne.n	80035a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2210      	movs	r2, #16
 80035fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2220      	movs	r2, #32
 8003606:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff fedd 	bl	80033c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <I2C_IsAcknowledgeFailed+0xc8>)
 800361a:	400b      	ands	r3, r1
 800361c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	fe00e800 	.word	0xfe00e800

08003654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	4613      	mov	r3, r2
 8003664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	0d5b      	lsrs	r3, r3, #21
 8003670:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <I2C_TransferConfig+0x58>)
 8003676:	430b      	orrs	r3, r1
 8003678:	43db      	mvns	r3, r3
 800367a:	ea02 0103 	and.w	r1, r2, r3
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003684:	7a7b      	ldrb	r3, [r7, #9]
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	431a      	orrs	r2, r3
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	03ff63ff 	.word	0x03ff63ff

080036b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d138      	bne.n	8003738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e032      	b.n	800373a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b20      	cmp	r3, #32
 800375a:	d139      	bne.n	80037d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003766:	2302      	movs	r3, #2
 8003768:	e033      	b.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2224      	movs	r2, #36	; 0x24
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003798:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e0:	b08f      	sub	sp, #60	; 0x3c
 80037e2:	af0a      	add	r7, sp, #40	; 0x28
 80037e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e116      	b.n	8003a1e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd ffa0 	bl	8001750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2203      	movs	r2, #3
 8003814:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fbea 	bl	8006008 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	687e      	ldr	r6, [r7, #4]
 800383c:	466d      	mov	r5, sp
 800383e:	f106 0410 	add.w	r4, r6, #16
 8003842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800384e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003852:	1d33      	adds	r3, r6, #4
 8003854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f002 fb84 	bl	8005f64 <USB_CoreInit>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e0d7      	b.n	8003a1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f002 fbd8 	bl	800602a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e04a      	b.n	8003916 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	333d      	adds	r3, #61	; 0x3d
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333c      	adds	r3, #60	; 0x3c
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	b298      	uxth	r0, r3
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3342      	adds	r3, #66	; 0x42
 80038bc:	4602      	mov	r2, r0
 80038be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	333f      	adds	r3, #63	; 0x3f
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3344      	adds	r3, #68	; 0x44
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3348      	adds	r3, #72	; 0x48
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3350      	adds	r3, #80	; 0x50
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	3301      	adds	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	d3af      	bcc.n	8003880 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
 8003924:	e044      	b.n	80039b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	3301      	adds	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3b5      	bcc.n	8003926 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	687e      	ldr	r6, [r7, #4]
 80039c2:	466d      	mov	r5, sp
 80039c4:	f106 0410 	add.w	r4, r6, #16
 80039c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039d8:	1d33      	adds	r3, r6, #4
 80039da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f002 fb4f 	bl	8006080 <USB_DevInit>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e014      	b.n	8003a1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f80a 	bl	8003a26 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f002 fcdf 	bl	80063da <USB_DevDisconnect>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	f043 0303 	orr.w	r3, r3, #3
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40007000 	.word	0x40007000

08003a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40007000 	.word	0x40007000

08003aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aba:	d130      	bne.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac8:	d038      	beq.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2232      	movs	r2, #50	; 0x32
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af0:	e002      	b.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d102      	bne.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f2      	bne.n	8003af2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b18:	d110      	bne.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d007      	beq.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	20000000 	.word	0x20000000
 8003b54:	431bde83 	.word	0x431bde83

08003b58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b66:	6053      	str	r3, [r2, #4]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7fe fb34 	bl	80021ec <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e063      	b.n	8003c58 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fd fcd5 	bl	8001554 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003baa:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f858 	bl	8003c64 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	021a      	lsls	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2120      	movs	r1, #32
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f850 	bl	8003c80 <QSPI_WaitFlagStateUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d131      	bne.n	8003c4e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bf4:	f023 0310 	bic.w	r3, r3, #16
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6852      	ldr	r2, [r2, #4]
 8003bfc:	0611      	lsls	r1, r2, #24
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_QSPI_Init+0xe8>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6912      	ldr	r2, [r2, #16]
 8003c1a:	0411      	lsls	r1, r2, #16
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6952      	ldr	r2, [r2, #20]
 8003c20:	4311      	orrs	r1, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6992      	ldr	r2, [r2, #24]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003c56:	7afb      	ldrb	r3, [r7, #11]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	ffe0f8fe 	.word	0xffe0f8fe

08003c64 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c90:	e01a      	b.n	8003cc8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d016      	beq.n	8003cc8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7fe faa7 	bl	80021ec <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e00e      	b.n	8003ce6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1d6      	bne.n	8003c92 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e3d4      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d02:	4ba1      	ldr	r3, [pc, #644]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d0c:	4b9e      	ldr	r3, [pc, #632]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80e4 	beq.w	8003eec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_RCC_OscConfig+0x4a>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	f040 808b 	bne.w	8003e48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 8087 	bne.w	8003e48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d3a:	4b93      	ldr	r3, [pc, #588]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_RCC_OscConfig+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e3ac      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_RCC_OscConfig+0x7c>
 8003d62:	4b89      	ldr	r3, [pc, #548]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6a:	e005      	b.n	8003d78 <HAL_RCC_OscConfig+0x88>
 8003d6c:	4b86      	ldr	r3, [pc, #536]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d223      	bcs.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fd3f 	bl	8004804 <RCC_SetFlashLatencyFromMSIRange>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e38d      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d90:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	4977      	ldr	r1, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	4972      	ldr	r1, [pc, #456]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
 8003dc2:	e025      	b.n	8003e10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc4:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003dca:	f043 0308 	orr.w	r3, r3, #8
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	496a      	ldr	r1, [pc, #424]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de2:	4b69      	ldr	r3, [pc, #420]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	4965      	ldr	r1, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fcff 	bl	8004804 <RCC_SetFlashLatencyFromMSIRange>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e34d      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e10:	f000 fc36 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8003e14:	4601      	mov	r1, r0
 8003e16:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	4a5a      	ldr	r2, [pc, #360]	; (8003f8c <HAL_RCC_OscConfig+0x29c>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	fa21 f303 	lsr.w	r3, r1, r3
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x2a0>)
 8003e2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e30:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_OscConfig+0x2a4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe f989 	bl	800214c <HAL_InitTick>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d052      	beq.n	8003eea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	e331      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d032      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e50:	4b4d      	ldr	r3, [pc, #308]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4c      	ldr	r2, [pc, #304]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f9c6 	bl	80021ec <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e64:	f7fe f9c2 	bl	80021ec <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e31a      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e88:	f043 0308 	orr.w	r3, r3, #8
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b3e      	ldr	r3, [pc, #248]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	493b      	ldr	r1, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea0:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	4936      	ldr	r1, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
 8003eb4:	e01a      	b.n	8003eec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a33      	ldr	r2, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec2:	f7fe f993 	bl	80021ec <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eca:	f7fe f98f 	bl	80021ec <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e2e7      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003edc:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x1da>
 8003ee8:	e000      	b.n	8003eec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d074      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x21a>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d10e      	bne.n	8003f22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d10b      	bne.n	8003f22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d064      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d160      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e2c4      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x24a>
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	e01d      	b.n	8003f76 <HAL_RCC_OscConfig+0x286>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCC_OscConfig+0x26e>
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e00b      	b.n	8003f76 <HAL_RCC_OscConfig+0x286>
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x298>)
 8003f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fe f935 	bl	80021ec <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f84:	e011      	b.n	8003faa <HAL_RCC_OscConfig+0x2ba>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	0800b090 	.word	0x0800b090
 8003f90:	20000000 	.word	0x20000000
 8003f94:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fe f928 	bl	80021ec <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e280      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003faa:	4baf      	ldr	r3, [pc, #700]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x2a8>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fe f918 	bl	80021ec <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fe f914 	bl	80021ec <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e26c      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd2:	4ba5      	ldr	r3, [pc, #660]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x2d0>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d060      	beq.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_OscConfig+0x310>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d116      	bne.n	800402e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	4b99      	ldr	r3, [pc, #612]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_OscConfig+0x328>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e249      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004018:	4b93      	ldr	r3, [pc, #588]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	4990      	ldr	r1, [pc, #576]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402c:	e040      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d023      	beq.n	800407e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004036:	4b8c      	ldr	r3, [pc, #560]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a8b      	ldr	r2, [pc, #556]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe f8d3 	bl	80021ec <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404a:	f7fe f8cf 	bl	80021ec <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e227      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405c:	4b82      	ldr	r3, [pc, #520]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b7f      	ldr	r3, [pc, #508]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	497c      	ldr	r1, [pc, #496]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	e018      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407e:	4b7a      	ldr	r3, [pc, #488]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a79      	ldr	r2, [pc, #484]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe f8af 	bl	80021ec <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe f8ab 	bl	80021ec <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e203      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a4:	4b70      	ldr	r3, [pc, #448]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d03c      	beq.n	8004136 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01c      	beq.n	80040fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c4:	4b68      	ldr	r3, [pc, #416]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ca:	4a67      	ldr	r2, [pc, #412]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fe f88a 	bl	80021ec <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fe f886 	bl	80021ec <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e1de      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ee:	4b5e      	ldr	r3, [pc, #376]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80040f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ef      	beq.n	80040dc <HAL_RCC_OscConfig+0x3ec>
 80040fc:	e01b      	b.n	8004136 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fe:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fe f86d 	bl	80021ec <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004116:	f7fe f869 	bl	80021ec <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e1c1      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004128:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ef      	bne.n	8004116 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80a6 	beq.w	8004290 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004148:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	4b44      	ldr	r3, [pc, #272]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	4a43      	ldr	r2, [pc, #268]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415e:	6593      	str	r3, [r2, #88]	; 0x58
 8004160:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416c:	2301      	movs	r3, #1
 800416e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCC_OscConfig+0x57c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d118      	bne.n	80041ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417c:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_OscConfig+0x57c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3a      	ldr	r2, [pc, #232]	; (800426c <HAL_RCC_OscConfig+0x57c>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004188:	f7fe f830 	bl	80021ec <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fe f82c 	bl	80021ec <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e184      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a2:	4b32      	ldr	r3, [pc, #200]	; (800426c <HAL_RCC_OscConfig+0x57c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4d8>
 80041b6:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c6:	e024      	b.n	8004212 <HAL_RCC_OscConfig+0x522>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d110      	bne.n	80041f2 <HAL_RCC_OscConfig+0x502>
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	4a24      	ldr	r2, [pc, #144]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	4a20      	ldr	r2, [pc, #128]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f0:	e00f      	b.n	8004212 <HAL_RCC_OscConfig+0x522>
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800420a:	f023 0304 	bic.w	r3, r3, #4
 800420e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fd ffe7 	bl	80021ec <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fd ffe3 	bl	80021ec <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e139      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_OscConfig+0x578>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ed      	beq.n	8004222 <HAL_RCC_OscConfig+0x532>
 8004246:	e01a      	b.n	800427e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fd ffd0 	bl	80021ec <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800424e:	e00f      	b.n	8004270 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd ffcc 	bl	80021ec <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d906      	bls.n	8004270 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e122      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004270:	4b90      	ldr	r3, [pc, #576]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e8      	bne.n	8004250 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427e:	7ffb      	ldrb	r3, [r7, #31]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4b8b      	ldr	r3, [pc, #556]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	4a8a      	ldr	r2, [pc, #552]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 800428a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8108 	beq.w	80044aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f040 80d0 	bne.w	8004444 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042a4:	4b83      	ldr	r3, [pc, #524]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0203 	and.w	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d130      	bne.n	800431a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	3b01      	subs	r3, #1
 80042c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d127      	bne.n	800431a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d11f      	bne.n	800431a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e4:	2a07      	cmp	r2, #7
 80042e6:	bf14      	ite	ne
 80042e8:	2201      	movne	r2, #1
 80042ea:	2200      	moveq	r2, #0
 80042ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d113      	bne.n	800431a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d109      	bne.n	800431a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	3b01      	subs	r3, #1
 8004314:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d06e      	beq.n	80043f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b0c      	cmp	r3, #12
 800431e:	d069      	beq.n	80043f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004320:	4b64      	ldr	r3, [pc, #400]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800432c:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b7      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800433c:	4b5d      	ldr	r3, [pc, #372]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a5c      	ldr	r2, [pc, #368]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004348:	f7fd ff50 	bl	80021ec <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fd ff4c 	bl	80021ec <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0a4      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004362:	4b54      	ldr	r3, [pc, #336]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436e:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	4b51      	ldr	r3, [pc, #324]	; (80044b8 <HAL_RCC_OscConfig+0x7c8>)
 8004374:	4013      	ands	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800437e:	3a01      	subs	r2, #1
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	4311      	orrs	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004388:	0212      	lsls	r2, r2, #8
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004390:	0852      	lsrs	r2, r2, #1
 8004392:	3a01      	subs	r2, #1
 8004394:	0552      	lsls	r2, r2, #21
 8004396:	4311      	orrs	r1, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	3a01      	subs	r2, #1
 80043a0:	0652      	lsls	r2, r2, #25
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043a8:	0912      	lsrs	r2, r2, #4
 80043aa:	0452      	lsls	r2, r2, #17
 80043ac:	430a      	orrs	r2, r1
 80043ae:	4941      	ldr	r1, [pc, #260]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043b4:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a3e      	ldr	r2, [pc, #248]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043c0:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a3b      	ldr	r2, [pc, #236]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043cc:	f7fd ff0e 	bl	80021ec <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd ff0a 	bl	80021ec <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e062      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e6:	4b33      	ldr	r3, [pc, #204]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043f2:	e05a      	b.n	80044aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e059      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f8:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d152      	bne.n	80044aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800440e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004410:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a27      	ldr	r2, [pc, #156]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800441c:	f7fd fee6 	bl	80021ec <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fd fee2 	bl	80021ec <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e03a      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x734>
 8004442:	e032      	b.n	80044aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d02d      	beq.n	80044a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004454:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004468:	f023 0303 	bic.w	r3, r3, #3
 800446c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 8004474:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fd feb5 	bl	80021ec <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004486:	f7fd feb1 	bl	80021ec <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e009      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_OscConfig+0x7c4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x796>
 80044a4:	e001      	b.n	80044aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	f99d808c 	.word	0xf99d808c

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0c8      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b66      	ldr	r3, [pc, #408]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d910      	bls.n	8004500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	4961      	ldr	r1, [pc, #388]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b5f      	ldr	r3, [pc, #380]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b0      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d04c      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d107      	bne.n	8004524 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004514:	4b56      	ldr	r3, [pc, #344]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d121      	bne.n	8004564 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e09e      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d107      	bne.n	800453c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e092      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004544:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e086      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004554:	4b46      	ldr	r3, [pc, #280]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e07e      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004564:	4b42      	ldr	r3, [pc, #264]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 0203 	bic.w	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	493f      	ldr	r1, [pc, #252]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004576:	f7fd fe39 	bl	80021ec <HAL_GetTick>
 800457a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457c:	e00a      	b.n	8004594 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457e:	f7fd fe35 	bl	80021ec <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e066      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 020c 	and.w	r2, r3, #12
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d1eb      	bne.n	800457e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	492c      	ldr	r1, [pc, #176]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d210      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 0207 	bic.w	r2, r3, #7
 80045da:	4924      	ldr	r1, [pc, #144]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b22      	ldr	r3, [pc, #136]	; (800466c <HAL_RCC_ClockConfig+0x1b0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e036      	b.n	8004662 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4918      	ldr	r1, [pc, #96]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b14      	ldr	r3, [pc, #80]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4910      	ldr	r1, [pc, #64]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004632:	f000 f825 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8004636:	4601      	mov	r1, r0
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCC_ClockConfig+0x1b4>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	fa21 f303 	lsr.w	r3, r1, r3
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd fd78 	bl	800214c <HAL_InitTick>
 800465c:	4603      	mov	r3, r0
 800465e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004660:	7afb      	ldrb	r3, [r7, #11]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40022000 	.word	0x40022000
 8004670:	40021000 	.word	0x40021000
 8004674:	0800b090 	.word	0x0800b090
 8004678:	20000000 	.word	0x20000000
 800467c:	20000028 	.word	0x20000028

08004680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468e:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004698:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x34>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d121      	bne.n	80046f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11e      	bne.n	80046f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046b4:	4b33      	ldr	r3, [pc, #204]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046c0:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 80046c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	e005      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046d0:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046dc:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <HAL_RCC_GetSysClockFreq+0x108>)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10d      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046f0:	e00a      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d102      	bne.n	80046fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <HAL_RCC_GetSysClockFreq+0x10c>)
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e004      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d101      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_RCC_GetSysClockFreq+0x110>)
 8004706:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d133      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0xa4>
 800471e:	2b03      	cmp	r3, #3
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0xaa>
 8004722:	e005      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004726:	617b      	str	r3, [r7, #20]
      break;
 8004728:	e005      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800472a:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RCC_GetSysClockFreq+0x110>)
 800472c:	617b      	str	r3, [r7, #20]
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	617b      	str	r3, [r7, #20]
      break;
 8004734:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	3301      	adds	r3, #1
 8004742:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	fb02 f203 	mul.w	r2, r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_GetSysClockFreq+0x104>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	0e5b      	lsrs	r3, r3, #25
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004776:	69bb      	ldr	r3, [r7, #24]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3724      	adds	r7, #36	; 0x24
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40021000 	.word	0x40021000
 8004788:	0800b0a8 	.word	0x0800b0a8
 800478c:	00f42400 	.word	0x00f42400
 8004790:	007a1200 	.word	0x007a1200

08004794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000000 	.word	0x20000000

080047ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047b0:	f7ff fff0 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 80047b4:	4601      	mov	r1, r0
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	0800b0a0 	.word	0x0800b0a0

080047d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047dc:	f7ff ffda 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 80047e0:	4601      	mov	r1, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0adb      	lsrs	r3, r3, #11
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	0800b0a0 	.word	0x0800b0a0

08004804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004810:	4b2a      	ldr	r3, [pc, #168]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800481c:	f7ff f938 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 8004820:	6178      	str	r0, [r7, #20]
 8004822:	e014      	b.n	800484e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	4a24      	ldr	r2, [pc, #144]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800482a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482e:	6593      	str	r3, [r2, #88]	; 0x58
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800483c:	f7ff f928 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 8004840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	4a1d      	ldr	r2, [pc, #116]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004854:	d10b      	bne.n	800486e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b80      	cmp	r3, #128	; 0x80
 800485a:	d919      	bls.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2ba0      	cmp	r3, #160	; 0xa0
 8004860:	d902      	bls.n	8004868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004862:	2302      	movs	r3, #2
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e013      	b.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004868:	2301      	movs	r3, #1
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e010      	b.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b80      	cmp	r3, #128	; 0x80
 8004872:	d902      	bls.n	800487a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004874:	2303      	movs	r3, #3
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	e00a      	b.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d102      	bne.n	8004886 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004880:	2302      	movs	r3, #2
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	e004      	b.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b70      	cmp	r3, #112	; 0x70
 800488a:	d101      	bne.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800488c:	2301      	movs	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 0207 	bic.w	r2, r3, #7
 8004898:	4909      	ldr	r1, [pc, #36]	; (80048c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d001      	beq.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40022000 	.word	0x40022000

080048c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048cc:	2300      	movs	r3, #0
 80048ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048d0:	2300      	movs	r3, #0
 80048d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03f      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e8:	d01c      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80048ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ee:	d802      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80048f4:	e01f      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80048f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048fa:	d003      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80048fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004900:	d01c      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004902:	e018      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004904:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a84      	ldr	r2, [pc, #528]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800490a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004910:	e015      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fac9 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004922:	e00c      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3320      	adds	r3, #32
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fbb0 	bl	8005090 <RCCEx_PLLSAI2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	74fb      	strb	r3, [r7, #19]
      break;
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800493c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004944:	4b75      	ldr	r3, [pc, #468]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004952:	4972      	ldr	r1, [pc, #456]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800495a:	e001      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d03f      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004974:	d01c      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004976:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800497a:	d802      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004980:	e01f      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004988:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800498c:	d01c      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800498e:	e018      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004990:	4b62      	ldr	r3, [pc, #392]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a61      	ldr	r2, [pc, #388]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800499c:	e015      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3304      	adds	r3, #4
 80049a2:	2100      	movs	r1, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fa83 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ae:	e00c      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3320      	adds	r3, #32
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb6a 	bl	8005090 <RCCEx_PLLSAI2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049c0:	e003      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	74fb      	strb	r3, [r7, #19]
      break;
 80049c6:	e000      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049d0:	4b52      	ldr	r3, [pc, #328]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049de:	494f      	ldr	r1, [pc, #316]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049e6:	e001      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a0 	beq.w	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00d      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a14:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	4a40      	ldr	r2, [pc, #256]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a20:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3a      	ldr	r2, [pc, #232]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a3c:	f7fd fbd6 	bl	80021ec <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a42:	e009      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a44:	f7fd fbd2 	bl	80021ec <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d902      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	74fb      	strb	r3, [r7, #19]
        break;
 8004a56:	e005      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a58:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ef      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d15c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01f      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d019      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a88:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fd fb91 	bl	80021ec <HAL_GetTick>
 8004aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004acc:	e00b      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd fb8d 	bl	80021ec <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d902      	bls.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ec      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0a:	4904      	ldr	r1, [pc, #16]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b12:	e009      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
 8004b18:	e006      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b28:	7c7b      	ldrb	r3, [r7, #17]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b9e      	ldr	r3, [pc, #632]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	4a9d      	ldr	r2, [pc, #628]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b46:	4b98      	ldr	r3, [pc, #608]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f023 0203 	bic.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	4994      	ldr	r1, [pc, #592]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b68:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 020c 	bic.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	498c      	ldr	r1, [pc, #560]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b8a:	4b87      	ldr	r3, [pc, #540]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	4983      	ldr	r1, [pc, #524]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bac:	4b7e      	ldr	r3, [pc, #504]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	497b      	ldr	r1, [pc, #492]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bce:	4b76      	ldr	r3, [pc, #472]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bdc:	4972      	ldr	r1, [pc, #456]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf0:	4b6d      	ldr	r3, [pc, #436]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	496a      	ldr	r1, [pc, #424]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c12:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	4961      	ldr	r1, [pc, #388]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c34:	4b5c      	ldr	r3, [pc, #368]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	4959      	ldr	r1, [pc, #356]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c56:	4b54      	ldr	r3, [pc, #336]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	4950      	ldr	r1, [pc, #320]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	4948      	ldr	r1, [pc, #288]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c9a:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	493f      	ldr	r1, [pc, #252]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d028      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cbc:	4b3a      	ldr	r3, [pc, #232]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cca:	4937      	ldr	r1, [pc, #220]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cda:	d106      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]
 8004ce8:	e011      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf2:	d10c      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f8d8 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d028      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d1a:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	491f      	ldr	r1, [pc, #124]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d38:	d106      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d44:	60d3      	str	r3, [r2, #12]
 8004d46:	e011      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	2101      	movs	r1, #1
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f8a9 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004d68:	7cfb      	ldrb	r3, [r7, #19]
 8004d6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02b      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d86:	4908      	ldr	r1, [pc, #32]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d96:	d109      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a02      	ldr	r2, [pc, #8]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da2:	60d3      	str	r3, [r2, #12]
 8004da4:	e014      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f877 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dc6:	7cfb      	ldrb	r3, [r7, #19]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02f      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dea:	4928      	ldr	r1, [pc, #160]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	2102      	movs	r1, #2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f854 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	74bb      	strb	r3, [r7, #18]
 8004e16:	e011      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3320      	adds	r3, #32
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f931 	bl	8005090 <RCCEx_PLLSAI2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e56:	490d      	ldr	r1, [pc, #52]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7a:	4904      	ldr	r1, [pc, #16]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000

08004e90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000

08004eb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ebe:	4b73      	ldr	r3, [pc, #460]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eca:	4b70      	ldr	r3, [pc, #448]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0203 	and.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d10d      	bne.n	8004ef6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ee2:	4b6a      	ldr	r3, [pc, #424]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d044      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	e041      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d00c      	beq.n	8004f1e <RCCEx_PLLSAI1_Config+0x6e>
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d013      	beq.n	8004f30 <RCCEx_PLLSAI1_Config+0x80>
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d120      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f0c:	4b5f      	ldr	r3, [pc, #380]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11d      	bne.n	8004f54 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1c:	e01a      	b.n	8004f54 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f1e:	4b5b      	ldr	r3, [pc, #364]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2e:	e013      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f30:	4b56      	ldr	r3, [pc, #344]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10f      	bne.n	8004f5c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f4c:	e006      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	e004      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10d      	bne.n	8004f80 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f64:	4b49      	ldr	r3, [pc, #292]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	4944      	ldr	r1, [pc, #272]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d17d      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f86:	4b41      	ldr	r3, [pc, #260]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a40      	ldr	r2, [pc, #256]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f92:	f7fd f92b 	bl	80021ec <HAL_GetTick>
 8004f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f98:	e009      	b.n	8004fae <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f9a:	f7fd f927 	bl	80021ec <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d902      	bls.n	8004fae <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	73fb      	strb	r3, [r7, #15]
        break;
 8004fac:	e005      	b.n	8004fba <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d160      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d111      	bne.n	8004fea <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc6:	4b31      	ldr	r3, [pc, #196]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	0211      	lsls	r1, r2, #8
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68d2      	ldr	r2, [r2, #12]
 8004fdc:	0912      	lsrs	r2, r2, #4
 8004fde:	0452      	lsls	r2, r2, #17
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	492a      	ldr	r1, [pc, #168]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	610b      	str	r3, [r1, #16]
 8004fe8:	e027      	b.n	800503a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d112      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff0:	4b26      	ldr	r3, [pc, #152]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ff8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6892      	ldr	r2, [r2, #8]
 8005000:	0211      	lsls	r1, r2, #8
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6912      	ldr	r2, [r2, #16]
 8005006:	0852      	lsrs	r2, r2, #1
 8005008:	3a01      	subs	r2, #1
 800500a:	0552      	lsls	r2, r2, #21
 800500c:	430a      	orrs	r2, r1
 800500e:	491f      	ldr	r1, [pc, #124]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	610b      	str	r3, [r1, #16]
 8005014:	e011      	b.n	800503a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005016:	4b1d      	ldr	r3, [pc, #116]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800501e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6892      	ldr	r2, [r2, #8]
 8005026:	0211      	lsls	r1, r2, #8
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6952      	ldr	r2, [r2, #20]
 800502c:	0852      	lsrs	r2, r2, #1
 800502e:	3a01      	subs	r2, #1
 8005030:	0652      	lsls	r2, r2, #25
 8005032:	430a      	orrs	r2, r1
 8005034:	4915      	ldr	r1, [pc, #84]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a13      	ldr	r2, [pc, #76]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005040:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005044:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fd f8d1 	bl	80021ec <HAL_GetTick>
 800504a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800504c:	e009      	b.n	8005062 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504e:	f7fd f8cd 	bl	80021ec <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d902      	bls.n	8005062 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	73fb      	strb	r3, [r7, #15]
          break;
 8005060:	e005      	b.n	800506e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0ef      	beq.n	800504e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <RCCEx_PLLSAI1_Config+0x1dc>)
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40021000 	.word	0x40021000

08005090 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800509e:	4b68      	ldr	r3, [pc, #416]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050aa:	4b65      	ldr	r3, [pc, #404]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10d      	bne.n	80050d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
       ||
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050c2:	4b5f      	ldr	r3, [pc, #380]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
       ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d044      	beq.n	8005160 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e041      	b.n	8005160 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d00c      	beq.n	80050fe <RCCEx_PLLSAI2_Config+0x6e>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d013      	beq.n	8005110 <RCCEx_PLLSAI2_Config+0x80>
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d120      	bne.n	800512e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050ec:	4b54      	ldr	r3, [pc, #336]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d11d      	bne.n	8005134 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050fc:	e01a      	b.n	8005134 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050fe:	4b50      	ldr	r3, [pc, #320]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d116      	bne.n	8005138 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800510e:	e013      	b.n	8005138 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005110:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10f      	bne.n	800513c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800511c:	4b48      	ldr	r3, [pc, #288]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800512c:	e006      	b.n	800513c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	73fb      	strb	r3, [r7, #15]
      break;
 8005132:	e004      	b.n	800513e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800513c:	bf00      	nop
    }

    if(status == HAL_OK)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10d      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005144:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	3b01      	subs	r3, #1
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	430b      	orrs	r3, r1
 800515a:	4939      	ldr	r1, [pc, #228]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d167      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005166:	4b36      	ldr	r3, [pc, #216]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a35      	ldr	r2, [pc, #212]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 800516c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fd f83b 	bl	80021ec <HAL_GetTick>
 8005176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005178:	e009      	b.n	800518e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800517a:	f7fd f837 	bl	80021ec <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d902      	bls.n	800518e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	73fb      	strb	r3, [r7, #15]
        break;
 800518c:	e005      	b.n	800519a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800518e:	4b2c      	ldr	r3, [pc, #176]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ef      	bne.n	800517a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d14a      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d111      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6892      	ldr	r2, [r2, #8]
 80051b6:	0211      	lsls	r1, r2, #8
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68d2      	ldr	r2, [r2, #12]
 80051bc:	0912      	lsrs	r2, r2, #4
 80051be:	0452      	lsls	r2, r2, #17
 80051c0:	430a      	orrs	r2, r1
 80051c2:	491f      	ldr	r1, [pc, #124]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	614b      	str	r3, [r1, #20]
 80051c8:	e011      	b.n	80051ee <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6892      	ldr	r2, [r2, #8]
 80051da:	0211      	lsls	r1, r2, #8
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6912      	ldr	r2, [r2, #16]
 80051e0:	0852      	lsrs	r2, r2, #1
 80051e2:	3a01      	subs	r2, #1
 80051e4:	0652      	lsls	r2, r2, #25
 80051e6:	430a      	orrs	r2, r1
 80051e8:	4915      	ldr	r1, [pc, #84]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a13      	ldr	r2, [pc, #76]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fa:	f7fc fff7 	bl	80021ec <HAL_GetTick>
 80051fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005200:	e009      	b.n	8005216 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005202:	f7fc fff3 	bl	80021ec <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d902      	bls.n	8005216 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	73fb      	strb	r3, [r7, #15]
          break;
 8005214:	e005      	b.n	8005222 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0ef      	beq.n	8005202 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	4903      	ldr	r1, [pc, #12]	; (8005240 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005232:	4313      	orrs	r3, r2
 8005234:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000

08005244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e095      	b.n	8005382 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d108      	bne.n	8005270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005266:	d009      	beq.n	800527c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	61da      	str	r2, [r3, #28]
 800526e:	e005      	b.n	800527c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc f9a0 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052bc:	d902      	bls.n	80052c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e002      	b.n	80052ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052d2:	d007      	beq.n	80052e4 <HAL_SPI_Init+0xa0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	ea42 0103 	orr.w	r1, r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	f003 0204 	and.w	r2, r3, #4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005360:	ea42 0103 	orr.w	r1, r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10f      	bne.n	80053d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
    return;
 80053ce:	e0d8      	b.n	8005582 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_SPI_IRQHandler+0x66>
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
    return;
 80053f0:	e0c7      	b.n	8005582 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10c      	bne.n	8005418 <HAL_SPI_IRQHandler+0x8c>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	099b      	lsrs	r3, r3, #6
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80b5 	beq.w	8005582 <HAL_SPI_IRQHandler+0x1f6>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80ae 	beq.w	8005582 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	099b      	lsrs	r3, r3, #6
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d023      	beq.n	800547a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b03      	cmp	r3, #3
 800543c:	d011      	beq.n	8005462 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005442:	f043 0204 	orr.w	r2, r3, #4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	e00b      	b.n	800547a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	693b      	ldr	r3, [r7, #16]
        return;
 8005478:	e083      	b.n	8005582 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d014      	beq.n	80054b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548a:	f043 0201 	orr.w	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	f043 0208 	orr.w	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054c8:	2300      	movs	r3, #0
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d050      	beq.n	8005580 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_SPI_IRQHandler+0x17e>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d034      	beq.n	8005574 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0203 	bic.w	r2, r2, #3
 8005518:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <HAL_SPI_IRQHandler+0x1fc>)
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	4618      	mov	r0, r3
 8005530:	f7fd f8a8 	bl	8002684 <HAL_DMA_Abort_IT>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <HAL_SPI_IRQHandler+0x1fc>)
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	4618      	mov	r0, r3
 800555c:	f7fd f892 	bl	8002684 <HAL_DMA_Abort_IT>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005572:	e003      	b.n	800557c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f809 	bl	800558c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800557a:	e000      	b.n	800557e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800557c:	bf00      	nop
    return;
 800557e:	bf00      	nop
 8005580:	bf00      	nop
  }
}
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	080055a1 	.word	0x080055a1

0800558c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff ffe5 	bl	800558c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055c2:	bf00      	nop
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e040      	b.n	800565e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fc f839 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	; 0x24
 80055f6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8bf 	bl	800578c <UART_SetConfig>
 800560e:	4603      	mov	r3, r0
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e022      	b.n	800565e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fb3d 	bl	8005ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005634:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005644:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fbc4 	bl	8005de4 <UART_CheckIdleState>
 800565c:	4603      	mov	r3, r0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08a      	sub	sp, #40	; 0x28
 800566a:	af02      	add	r7, sp, #8
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567a:	2b20      	cmp	r3, #32
 800567c:	f040 8081 	bne.w	8005782 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_UART_Transmit+0x26>
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e079      	b.n	8005784 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_UART_Transmit+0x38>
 800569a:	2302      	movs	r3, #2
 800569c:	e072      	b.n	8005784 <HAL_UART_Transmit+0x11e>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2221      	movs	r2, #33	; 0x21
 80056b0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc fd9b 	bl	80021ec <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x7e>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80056f4:	e02d      	b.n	8005752 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fbb4 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e039      	b.n	8005784 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	881a      	ldrh	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005722:	b292      	uxth	r2, r2
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3302      	adds	r3, #2
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e008      	b.n	8005740 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b292      	uxth	r2, r2
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1cb      	bne.n	80056f6 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fb80 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e005      	b.n	8005784 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800578c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005790:	b088      	sub	sp, #32
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4bac      	ldr	r3, [pc, #688]	; (8005a6c <UART_SetConfig+0x2e0>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	430b      	orrs	r3, r1
 80057c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4aa2      	ldr	r2, [pc, #648]	; (8005a70 <UART_SetConfig+0x2e4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a99      	ldr	r2, [pc, #612]	; (8005a74 <UART_SetConfig+0x2e8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d121      	bne.n	8005858 <UART_SetConfig+0xcc>
 8005814:	4b98      	ldr	r3, [pc, #608]	; (8005a78 <UART_SetConfig+0x2ec>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d816      	bhi.n	8005850 <UART_SetConfig+0xc4>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x9c>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005839 	.word	0x08005839
 800582c:	08005845 	.word	0x08005845
 8005830:	0800583f 	.word	0x0800583f
 8005834:	0800584b 	.word	0x0800584b
 8005838:	2301      	movs	r3, #1
 800583a:	76fb      	strb	r3, [r7, #27]
 800583c:	e0e8      	b.n	8005a10 <UART_SetConfig+0x284>
 800583e:	2302      	movs	r3, #2
 8005840:	76fb      	strb	r3, [r7, #27]
 8005842:	e0e5      	b.n	8005a10 <UART_SetConfig+0x284>
 8005844:	2304      	movs	r3, #4
 8005846:	76fb      	strb	r3, [r7, #27]
 8005848:	e0e2      	b.n	8005a10 <UART_SetConfig+0x284>
 800584a:	2308      	movs	r3, #8
 800584c:	76fb      	strb	r3, [r7, #27]
 800584e:	e0df      	b.n	8005a10 <UART_SetConfig+0x284>
 8005850:	2310      	movs	r3, #16
 8005852:	76fb      	strb	r3, [r7, #27]
 8005854:	bf00      	nop
 8005856:	e0db      	b.n	8005a10 <UART_SetConfig+0x284>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a87      	ldr	r2, [pc, #540]	; (8005a7c <UART_SetConfig+0x2f0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d134      	bne.n	80058cc <UART_SetConfig+0x140>
 8005862:	4b85      	ldr	r3, [pc, #532]	; (8005a78 <UART_SetConfig+0x2ec>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005868:	f003 030c 	and.w	r3, r3, #12
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d829      	bhi.n	80058c4 <UART_SetConfig+0x138>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0xec>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058c5 	.word	0x080058c5
 8005880:	080058c5 	.word	0x080058c5
 8005884:	080058c5 	.word	0x080058c5
 8005888:	080058b9 	.word	0x080058b9
 800588c:	080058c5 	.word	0x080058c5
 8005890:	080058c5 	.word	0x080058c5
 8005894:	080058c5 	.word	0x080058c5
 8005898:	080058b3 	.word	0x080058b3
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058c5 	.word	0x080058c5
 80058a8:	080058bf 	.word	0x080058bf
 80058ac:	2300      	movs	r3, #0
 80058ae:	76fb      	strb	r3, [r7, #27]
 80058b0:	e0ae      	b.n	8005a10 <UART_SetConfig+0x284>
 80058b2:	2302      	movs	r3, #2
 80058b4:	76fb      	strb	r3, [r7, #27]
 80058b6:	e0ab      	b.n	8005a10 <UART_SetConfig+0x284>
 80058b8:	2304      	movs	r3, #4
 80058ba:	76fb      	strb	r3, [r7, #27]
 80058bc:	e0a8      	b.n	8005a10 <UART_SetConfig+0x284>
 80058be:	2308      	movs	r3, #8
 80058c0:	76fb      	strb	r3, [r7, #27]
 80058c2:	e0a5      	b.n	8005a10 <UART_SetConfig+0x284>
 80058c4:	2310      	movs	r3, #16
 80058c6:	76fb      	strb	r3, [r7, #27]
 80058c8:	bf00      	nop
 80058ca:	e0a1      	b.n	8005a10 <UART_SetConfig+0x284>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a6b      	ldr	r2, [pc, #428]	; (8005a80 <UART_SetConfig+0x2f4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d120      	bne.n	8005918 <UART_SetConfig+0x18c>
 80058d6:	4b68      	ldr	r3, [pc, #416]	; (8005a78 <UART_SetConfig+0x2ec>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d00f      	beq.n	8005904 <UART_SetConfig+0x178>
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d802      	bhi.n	80058ee <UART_SetConfig+0x162>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <UART_SetConfig+0x16c>
 80058ec:	e010      	b.n	8005910 <UART_SetConfig+0x184>
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d005      	beq.n	80058fe <UART_SetConfig+0x172>
 80058f2:	2b30      	cmp	r3, #48	; 0x30
 80058f4:	d009      	beq.n	800590a <UART_SetConfig+0x17e>
 80058f6:	e00b      	b.n	8005910 <UART_SetConfig+0x184>
 80058f8:	2300      	movs	r3, #0
 80058fa:	76fb      	strb	r3, [r7, #27]
 80058fc:	e088      	b.n	8005a10 <UART_SetConfig+0x284>
 80058fe:	2302      	movs	r3, #2
 8005900:	76fb      	strb	r3, [r7, #27]
 8005902:	e085      	b.n	8005a10 <UART_SetConfig+0x284>
 8005904:	2304      	movs	r3, #4
 8005906:	76fb      	strb	r3, [r7, #27]
 8005908:	e082      	b.n	8005a10 <UART_SetConfig+0x284>
 800590a:	2308      	movs	r3, #8
 800590c:	76fb      	strb	r3, [r7, #27]
 800590e:	e07f      	b.n	8005a10 <UART_SetConfig+0x284>
 8005910:	2310      	movs	r3, #16
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	bf00      	nop
 8005916:	e07b      	b.n	8005a10 <UART_SetConfig+0x284>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a59      	ldr	r2, [pc, #356]	; (8005a84 <UART_SetConfig+0x2f8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d120      	bne.n	8005964 <UART_SetConfig+0x1d8>
 8005922:	4b55      	ldr	r3, [pc, #340]	; (8005a78 <UART_SetConfig+0x2ec>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d00f      	beq.n	8005950 <UART_SetConfig+0x1c4>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d802      	bhi.n	800593a <UART_SetConfig+0x1ae>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <UART_SetConfig+0x1b8>
 8005938:	e010      	b.n	800595c <UART_SetConfig+0x1d0>
 800593a:	2b80      	cmp	r3, #128	; 0x80
 800593c:	d005      	beq.n	800594a <UART_SetConfig+0x1be>
 800593e:	2bc0      	cmp	r3, #192	; 0xc0
 8005940:	d009      	beq.n	8005956 <UART_SetConfig+0x1ca>
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x1d0>
 8005944:	2300      	movs	r3, #0
 8005946:	76fb      	strb	r3, [r7, #27]
 8005948:	e062      	b.n	8005a10 <UART_SetConfig+0x284>
 800594a:	2302      	movs	r3, #2
 800594c:	76fb      	strb	r3, [r7, #27]
 800594e:	e05f      	b.n	8005a10 <UART_SetConfig+0x284>
 8005950:	2304      	movs	r3, #4
 8005952:	76fb      	strb	r3, [r7, #27]
 8005954:	e05c      	b.n	8005a10 <UART_SetConfig+0x284>
 8005956:	2308      	movs	r3, #8
 8005958:	76fb      	strb	r3, [r7, #27]
 800595a:	e059      	b.n	8005a10 <UART_SetConfig+0x284>
 800595c:	2310      	movs	r3, #16
 800595e:	76fb      	strb	r3, [r7, #27]
 8005960:	bf00      	nop
 8005962:	e055      	b.n	8005a10 <UART_SetConfig+0x284>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a47      	ldr	r2, [pc, #284]	; (8005a88 <UART_SetConfig+0x2fc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d124      	bne.n	80059b8 <UART_SetConfig+0x22c>
 800596e:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <UART_SetConfig+0x2ec>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597c:	d012      	beq.n	80059a4 <UART_SetConfig+0x218>
 800597e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005982:	d802      	bhi.n	800598a <UART_SetConfig+0x1fe>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <UART_SetConfig+0x20c>
 8005988:	e012      	b.n	80059b0 <UART_SetConfig+0x224>
 800598a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598e:	d006      	beq.n	800599e <UART_SetConfig+0x212>
 8005990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005994:	d009      	beq.n	80059aa <UART_SetConfig+0x21e>
 8005996:	e00b      	b.n	80059b0 <UART_SetConfig+0x224>
 8005998:	2300      	movs	r3, #0
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e038      	b.n	8005a10 <UART_SetConfig+0x284>
 800599e:	2302      	movs	r3, #2
 80059a0:	76fb      	strb	r3, [r7, #27]
 80059a2:	e035      	b.n	8005a10 <UART_SetConfig+0x284>
 80059a4:	2304      	movs	r3, #4
 80059a6:	76fb      	strb	r3, [r7, #27]
 80059a8:	e032      	b.n	8005a10 <UART_SetConfig+0x284>
 80059aa:	2308      	movs	r3, #8
 80059ac:	76fb      	strb	r3, [r7, #27]
 80059ae:	e02f      	b.n	8005a10 <UART_SetConfig+0x284>
 80059b0:	2310      	movs	r3, #16
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	bf00      	nop
 80059b6:	e02b      	b.n	8005a10 <UART_SetConfig+0x284>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2c      	ldr	r2, [pc, #176]	; (8005a70 <UART_SetConfig+0x2e4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d124      	bne.n	8005a0c <UART_SetConfig+0x280>
 80059c2:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <UART_SetConfig+0x2ec>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	d012      	beq.n	80059f8 <UART_SetConfig+0x26c>
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d6:	d802      	bhi.n	80059de <UART_SetConfig+0x252>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <UART_SetConfig+0x260>
 80059dc:	e012      	b.n	8005a04 <UART_SetConfig+0x278>
 80059de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e2:	d006      	beq.n	80059f2 <UART_SetConfig+0x266>
 80059e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e8:	d009      	beq.n	80059fe <UART_SetConfig+0x272>
 80059ea:	e00b      	b.n	8005a04 <UART_SetConfig+0x278>
 80059ec:	2300      	movs	r3, #0
 80059ee:	76fb      	strb	r3, [r7, #27]
 80059f0:	e00e      	b.n	8005a10 <UART_SetConfig+0x284>
 80059f2:	2302      	movs	r3, #2
 80059f4:	76fb      	strb	r3, [r7, #27]
 80059f6:	e00b      	b.n	8005a10 <UART_SetConfig+0x284>
 80059f8:	2304      	movs	r3, #4
 80059fa:	76fb      	strb	r3, [r7, #27]
 80059fc:	e008      	b.n	8005a10 <UART_SetConfig+0x284>
 80059fe:	2308      	movs	r3, #8
 8005a00:	76fb      	strb	r3, [r7, #27]
 8005a02:	e005      	b.n	8005a10 <UART_SetConfig+0x284>
 8005a04:	2310      	movs	r3, #16
 8005a06:	76fb      	strb	r3, [r7, #27]
 8005a08:	bf00      	nop
 8005a0a:	e001      	b.n	8005a10 <UART_SetConfig+0x284>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <UART_SetConfig+0x2e4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f040 8087 	bne.w	8005b2a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a1c:	7efb      	ldrb	r3, [r7, #27]
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d836      	bhi.n	8005a90 <UART_SetConfig+0x304>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <UART_SetConfig+0x29c>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a91 	.word	0x08005a91
 8005a38:	08005a5b 	.word	0x08005a5b
 8005a3c:	08005a91 	.word	0x08005a91
 8005a40:	08005a91 	.word	0x08005a91
 8005a44:	08005a91 	.word	0x08005a91
 8005a48:	08005a63 	.word	0x08005a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f7fe feae 	bl	80047ac <HAL_RCC_GetPCLK1Freq>
 8005a50:	6178      	str	r0, [r7, #20]
        break;
 8005a52:	e022      	b.n	8005a9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <UART_SetConfig+0x300>)
 8005a56:	617b      	str	r3, [r7, #20]
        break;
 8005a58:	e01f      	b.n	8005a9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5a:	f7fe fe11 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8005a5e:	6178      	str	r0, [r7, #20]
        break;
 8005a60:	e01b      	b.n	8005a9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a66:	617b      	str	r3, [r7, #20]
        break;
 8005a68:	e017      	b.n	8005a9a <UART_SetConfig+0x30e>
 8005a6a:	bf00      	nop
 8005a6c:	efff69f3 	.word	0xefff69f3
 8005a70:	40008000 	.word	0x40008000
 8005a74:	40013800 	.word	0x40013800
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40004400 	.word	0x40004400
 8005a80:	40004800 	.word	0x40004800
 8005a84:	40004c00 	.word	0x40004c00
 8005a88:	40005000 	.word	0x40005000
 8005a8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	76bb      	strb	r3, [r7, #26]
        break;
 8005a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80f1 	beq.w	8005c84 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	4413      	add	r3, r2
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d305      	bcc.n	8005abe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d902      	bls.n	8005ac4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	76bb      	strb	r3, [r7, #26]
 8005ac2:	e0df      	b.n	8005c84 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	0214      	lsls	r4, r2, #8
 8005ad6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ada:	020b      	lsls	r3, r1, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6852      	ldr	r2, [r2, #4]
 8005ae0:	0852      	lsrs	r2, r2, #1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	eb13 0b01 	adds.w	fp, r3, r1
 8005aec:	eb44 0c02 	adc.w	ip, r4, r2
 8005af0:	4658      	mov	r0, fp
 8005af2:	4661      	mov	r1, ip
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f04f 0400 	mov.w	r4, #0
 8005afc:	461a      	mov	r2, r3
 8005afe:	4623      	mov	r3, r4
 8005b00:	f7fa fd9a 	bl	8000638 <__aeabi_uldivmod>
 8005b04:	4603      	mov	r3, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b10:	d308      	bcc.n	8005b24 <UART_SetConfig+0x398>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b18:	d204      	bcs.n	8005b24 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	e0af      	b.n	8005c84 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	76bb      	strb	r3, [r7, #26]
 8005b28:	e0ac      	b.n	8005c84 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	d15b      	bne.n	8005bec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005b34:	7efb      	ldrb	r3, [r7, #27]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d827      	bhi.n	8005b8a <UART_SetConfig+0x3fe>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0x3b4>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fe fe22 	bl	80047ac <HAL_RCC_GetPCLK1Freq>
 8005b68:	6178      	str	r0, [r7, #20]
        break;
 8005b6a:	e013      	b.n	8005b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fe fe34 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 8005b70:	6178      	str	r0, [r7, #20]
        break;
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b49      	ldr	r3, [pc, #292]	; (8005c9c <UART_SetConfig+0x510>)
 8005b76:	617b      	str	r3, [r7, #20]
        break;
 8005b78:	e00c      	b.n	8005b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fe fd81 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8005b7e:	6178      	str	r0, [r7, #20]
        break;
 8005b80:	e008      	b.n	8005b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b86:	617b      	str	r3, [r7, #20]
        break;
 8005b88:	e004      	b.n	8005b94 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	76bb      	strb	r3, [r7, #26]
        break;
 8005b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d074      	beq.n	8005c84 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	005a      	lsls	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	441a      	add	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b0f      	cmp	r3, #15
 8005bb6:	d916      	bls.n	8005be6 <UART_SetConfig+0x45a>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbe:	d212      	bcs.n	8005be6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f023 030f 	bic.w	r3, r3, #15
 8005bc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	89fb      	ldrh	r3, [r7, #14]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	89fa      	ldrh	r2, [r7, #14]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	e04e      	b.n	8005c84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	76bb      	strb	r3, [r7, #26]
 8005bea:	e04b      	b.n	8005c84 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bec:	7efb      	ldrb	r3, [r7, #27]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d827      	bhi.n	8005c42 <UART_SetConfig+0x4b6>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x46c>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c33 	.word	0x08005c33
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c43 	.word	0x08005c43
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fe fdc6 	bl	80047ac <HAL_RCC_GetPCLK1Freq>
 8005c20:	6178      	str	r0, [r7, #20]
        break;
 8005c22:	e013      	b.n	8005c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c24:	f7fe fdd8 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 8005c28:	6178      	str	r0, [r7, #20]
        break;
 8005c2a:	e00f      	b.n	8005c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <UART_SetConfig+0x510>)
 8005c2e:	617b      	str	r3, [r7, #20]
        break;
 8005c30:	e00c      	b.n	8005c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7fe fd25 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8005c36:	6178      	str	r0, [r7, #20]
        break;
 8005c38:	e008      	b.n	8005c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3e:	617b      	str	r3, [r7, #20]
        break;
 8005c40:	e004      	b.n	8005c4c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	76bb      	strb	r3, [r7, #26]
        break;
 8005c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	085a      	lsrs	r2, r3, #1
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	d908      	bls.n	8005c80 <UART_SetConfig+0x4f4>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	d204      	bcs.n	8005c80 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e001      	b.n	8005c84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c90:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c9c:	00f42400 	.word	0x00f42400

08005ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01a      	beq.n	8005db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9e:	d10a      	bne.n	8005db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
  }
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005df2:	f7fc f9fb 	bl	80021ec <HAL_GetTick>
 8005df6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d10e      	bne.n	8005e24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f82a 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e020      	b.n	8005e66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d10e      	bne.n	8005e50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f814 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e00a      	b.n	8005e66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	e05d      	b.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d059      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e88:	f7fc f9b0 	bl	80021ec <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11b      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005eac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e042      	b.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02b      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d123      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e00f      	b.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d092      	beq.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f64:	b084      	sub	sp, #16
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	f107 001c 	add.w	r0, r7, #28
 8005f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d122      	bne.n	8005fc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d105      	bne.n	8005fb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa30 	bl	800641c <USB_CoreReset>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e01a      	b.n	8005ff8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa24 	bl	800641c <USB_CoreReset>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8005fea:	e005      	b.n	8005ff8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006004:	b004      	add	sp, #16
 8006006:	4770      	bx	lr

08006008 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 0201 	bic.w	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	e00b      	b.n	800606e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e001      	b.n	800606e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e003      	b.n	8006076 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800606e:	2032      	movs	r0, #50	; 0x32
 8006070:	f7fc f8c8 	bl	8002204 <HAL_Delay>

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006080:	b084      	sub	sp, #16
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800608e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e009      	b.n	80060b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3340      	adds	r3, #64	; 0x40
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b0e      	cmp	r3, #14
 80060b8:	d9f2      	bls.n	80060a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11c      	bne.n	80060fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ce:	f043 0302 	orr.w	r3, r3, #2
 80060d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e005      	b.n	8006106 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800610c:	461a      	mov	r2, r3
 800610e:	2300      	movs	r3, #0
 8006110:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	4619      	mov	r1, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006120:	461a      	mov	r2, r3
 8006122:	680b      	ldr	r3, [r1, #0]
 8006124:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006126:	2103      	movs	r1, #3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f93d 	bl	80063a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800612e:	2110      	movs	r1, #16
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8f1 	bl	8006318 <USB_FlushTxFifo>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f90f 	bl	8006364 <USB_FlushRxFifo>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	461a      	mov	r2, r3
 8006158:	2300      	movs	r3, #0
 800615a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	461a      	mov	r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	461a      	mov	r2, r3
 8006170:	2300      	movs	r3, #0
 8006172:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e043      	b.n	8006202 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006190:	d118      	bne.n	80061c4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	461a      	mov	r2, r3
 80061a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	e013      	b.n	80061d6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	461a      	mov	r2, r3
 80061bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e008      	b.n	80061d6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	461a      	mov	r2, r3
 80061d2:	2300      	movs	r3, #0
 80061d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	461a      	mov	r2, r3
 80061e4:	2300      	movs	r3, #0
 80061e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	461a      	mov	r2, r3
 80061f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3301      	adds	r3, #1
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	429a      	cmp	r2, r3
 8006208:	d3b7      	bcc.n	800617a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	e043      	b.n	8006298 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006226:	d118      	bne.n	800625a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623a:	461a      	mov	r2, r3
 800623c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e013      	b.n	800626c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	e008      	b.n	800626c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	2300      	movs	r3, #0
 800626a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	461a      	mov	r2, r3
 800628c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006290:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3301      	adds	r3, #1
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	429a      	cmp	r2, r3
 800629e:	d3b7      	bcc.n	8006210 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f043 0210 	orr.w	r2, r3, #16
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <USB_DevInit+0x294>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	f043 0208 	orr.w	r2, r3, #8
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d107      	bne.n	8006302 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fa:	f043 0304 	orr.w	r3, r3, #4
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800630e:	b004      	add	sp, #16
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	803c3800 	.word	0x803c3800

08006318 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	019b      	lsls	r3, r3, #6
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a09      	ldr	r2, [pc, #36]	; (8006360 <USB_FlushTxFifo+0x48>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d901      	bls.n	8006344 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e006      	b.n	8006352 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b20      	cmp	r3, #32
 800634e:	d0f0      	beq.n	8006332 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	00030d40 	.word	0x00030d40

08006364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2210      	movs	r2, #16
 8006374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <USB_FlushRxFifo+0x40>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d901      	bls.n	8006388 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e006      	b.n	8006396 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b10      	cmp	r3, #16
 8006392:	d0f0      	beq.n	8006376 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	00030d40 	.word	0x00030d40

080063a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063f4:	f023 0303 	bic.w	r3, r3, #3
 80063f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006408:	f043 0302 	orr.w	r3, r3, #2
 800640c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a13      	ldr	r2, [pc, #76]	; (8006480 <USB_CoreReset+0x64>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e01b      	b.n	8006472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	daf2      	bge.n	8006428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f043 0201 	orr.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a09      	ldr	r2, [pc, #36]	; (8006480 <USB_CoreReset+0x64>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d901      	bls.n	8006464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e006      	b.n	8006472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d0f0      	beq.n	8006452 <USB_CoreReset+0x36>

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	00030d40 	.word	0x00030d40

08006484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649a:	f3ef 8305 	mrs	r3, IPSR
 800649e:	60bb      	str	r3, [r7, #8]
  return(result);
 80064a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10f      	bne.n	80064c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a6:	f3ef 8310 	mrs	r3, PRIMASK
 80064aa:	607b      	str	r3, [r7, #4]
  return(result);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b2:	f3ef 8311 	mrs	r3, BASEPRI
 80064b6:	603b      	str	r3, [r7, #0]
  return(result);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <osKernelInitialize+0x3a>
 80064be:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <osKernelInitialize+0x64>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d103      	bne.n	80064ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064c6:	f06f 0305 	mvn.w	r3, #5
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e00c      	b.n	80064e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <osKernelInitialize+0x64>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <osKernelInitialize+0x64>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e002      	b.n	80064e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064e8:	68fb      	ldr	r3, [r7, #12]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	200000e8 	.word	0x200000e8

080064fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006502:	f3ef 8305 	mrs	r3, IPSR
 8006506:	60bb      	str	r3, [r7, #8]
  return(result);
 8006508:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10f      	bne.n	800652e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800650e:	f3ef 8310 	mrs	r3, PRIMASK
 8006512:	607b      	str	r3, [r7, #4]
  return(result);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800651a:	f3ef 8311 	mrs	r3, BASEPRI
 800651e:	603b      	str	r3, [r7, #0]
  return(result);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <osKernelStart+0x3a>
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <osKernelStart+0x68>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d103      	bne.n	8006536 <osKernelStart+0x3a>
    stat = osErrorISR;
 800652e:	f06f 0305 	mvn.w	r3, #5
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e010      	b.n	8006558 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <osKernelStart+0x68>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d109      	bne.n	8006552 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800653e:	f7ff ffa1 	bl	8006484 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006542:	4b08      	ldr	r3, [pc, #32]	; (8006564 <osKernelStart+0x68>)
 8006544:	2202      	movs	r2, #2
 8006546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006548:	f001 fce6 	bl	8007f18 <vTaskStartScheduler>
      stat = osOK;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e002      	b.n	8006558 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	200000e8 	.word	0x200000e8

08006568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b090      	sub	sp, #64	; 0x40
 800656c:	af04      	add	r7, sp, #16
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006578:	f3ef 8305 	mrs	r3, IPSR
 800657c:	61fb      	str	r3, [r7, #28]
  return(result);
 800657e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 808f 	bne.w	80066a4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006586:	f3ef 8310 	mrs	r3, PRIMASK
 800658a:	61bb      	str	r3, [r7, #24]
  return(result);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d105      	bne.n	800659e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006592:	f3ef 8311 	mrs	r3, BASEPRI
 8006596:	617b      	str	r3, [r7, #20]
  return(result);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <osThreadNew+0x3e>
 800659e:	4b44      	ldr	r3, [pc, #272]	; (80066b0 <osThreadNew+0x148>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d07e      	beq.n	80066a4 <osThreadNew+0x13c>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d07b      	beq.n	80066a4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80065ac:	2340      	movs	r3, #64	; 0x40
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80065b0:	2318      	movs	r3, #24
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d045      	beq.n	8006650 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <osThreadNew+0x6a>
        name = attr->name;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d008      	beq.n	80065f8 <osThreadNew+0x90>
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	2b38      	cmp	r3, #56	; 0x38
 80065ea:	d805      	bhi.n	80065f8 <osThreadNew+0x90>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <osThreadNew+0x94>
        return (NULL);
 80065f8:	2300      	movs	r3, #0
 80065fa:	e054      	b.n	80066a6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	089b      	lsrs	r3, r3, #2
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <osThreadNew+0xca>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b5b      	cmp	r3, #91	; 0x5b
 800661a:	d90a      	bls.n	8006632 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006620:	2b00      	cmp	r3, #0
 8006622:	d006      	beq.n	8006632 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <osThreadNew+0xca>
        mem = 1;
 800662c:	2301      	movs	r3, #1
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	e010      	b.n	8006654 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10c      	bne.n	8006654 <osThreadNew+0xec>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d108      	bne.n	8006654 <osThreadNew+0xec>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <osThreadNew+0xec>
          mem = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	e001      	b.n	8006654 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d110      	bne.n	800667c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006662:	9202      	str	r2, [sp, #8]
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f001 fa7f 	bl	8007b74 <xTaskCreateStatic>
 8006676:	4603      	mov	r3, r0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e013      	b.n	80066a4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d110      	bne.n	80066a4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	b29a      	uxth	r2, r3
 8006686:	f107 0310 	add.w	r3, r7, #16
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fac7 	bl	8007c28 <xTaskCreate>
 800669a:	4603      	mov	r3, r0
 800669c:	2b01      	cmp	r3, #1
 800669e:	d001      	beq.n	80066a4 <osThreadNew+0x13c>
          hTask = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066a4:	693b      	ldr	r3, [r7, #16]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3730      	adds	r7, #48	; 0x30
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	200000e8 	.word	0x200000e8

080066b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066bc:	f3ef 8305 	mrs	r3, IPSR
 80066c0:	613b      	str	r3, [r7, #16]
  return(result);
 80066c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10f      	bne.n	80066e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066c8:	f3ef 8310 	mrs	r3, PRIMASK
 80066cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066d4:	f3ef 8311 	mrs	r3, BASEPRI
 80066d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <osDelay+0x3c>
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <osDelay+0x58>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d103      	bne.n	80066f0 <osDelay+0x3c>
    stat = osErrorISR;
 80066e8:	f06f 0305 	mvn.w	r3, #5
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e007      	b.n	8006700 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fbd8 	bl	8007eb0 <vTaskDelay>
    }
  }

  return (stat);
 8006700:	697b      	ldr	r3, [r7, #20]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200000e8 	.word	0x200000e8

08006710 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b08c      	sub	sp, #48	; 0x30
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800671c:	2300      	movs	r3, #0
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006720:	f3ef 8305 	mrs	r3, IPSR
 8006724:	61bb      	str	r3, [r7, #24]
  return(result);
 8006726:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 8087 	bne.w	800683c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800672e:	f3ef 8310 	mrs	r3, PRIMASK
 8006732:	617b      	str	r3, [r7, #20]
  return(result);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800673a:	f3ef 8311 	mrs	r3, BASEPRI
 800673e:	613b      	str	r3, [r7, #16]
  return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <osSemaphoreNew+0x3e>
 8006746:	4b40      	ldr	r3, [pc, #256]	; (8006848 <osSemaphoreNew+0x138>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d076      	beq.n	800683c <osSemaphoreNew+0x12c>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d073      	beq.n	800683c <osSemaphoreNew+0x12c>
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	429a      	cmp	r2, r3
 800675a:	d86f      	bhi.n	800683c <osSemaphoreNew+0x12c>
    mem = -1;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d015      	beq.n	8006794 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <osSemaphoreNew+0x6e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b4f      	cmp	r3, #79	; 0x4f
 8006776:	d902      	bls.n	800677e <osSemaphoreNew+0x6e>
        mem = 1;
 8006778:	2301      	movs	r3, #1
 800677a:	623b      	str	r3, [r7, #32]
 800677c:	e00c      	b.n	8006798 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d108      	bne.n	8006798 <osSemaphoreNew+0x88>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <osSemaphoreNew+0x88>
          mem = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	e001      	b.n	8006798 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d04d      	beq.n	800683c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d129      	bne.n	80067fa <osSemaphoreNew+0xea>
        if (mem == 1) {
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10b      	bne.n	80067c4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	2303      	movs	r3, #3
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	2001      	movs	r0, #1
 80067bc:	f000 fa54 	bl	8006c68 <xQueueGenericCreateStatic>
 80067c0:	6278      	str	r0, [r7, #36]	; 0x24
 80067c2:	e005      	b.n	80067d0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80067c4:	2203      	movs	r2, #3
 80067c6:	2100      	movs	r1, #0
 80067c8:	2001      	movs	r0, #1
 80067ca:	f000 fac0 	bl	8006d4e <xQueueGenericCreate>
 80067ce:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d022      	beq.n	800681c <osSemaphoreNew+0x10c>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01f      	beq.n	800681c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80067dc:	2300      	movs	r3, #0
 80067de:	2200      	movs	r2, #0
 80067e0:	2100      	movs	r1, #0
 80067e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067e4:	f000 fb7c 	bl	8006ee0 <xQueueGenericSend>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d016      	beq.n	800681c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80067ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067f0:	f000 ffef 	bl	80077d2 <vQueueDelete>
            hSemaphore = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	e010      	b.n	800681c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d108      	bne.n	8006812 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	461a      	mov	r2, r3
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fb02 	bl	8006e12 <xQueueCreateCountingSemaphoreStatic>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24
 8006810:	e004      	b.n	800681c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fb31 	bl	8006e7c <xQueueCreateCountingSemaphore>
 800681a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00c      	beq.n	800683c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <osSemaphoreNew+0x120>
          name = attr->name;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	e001      	b.n	8006834 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006838:	f001 f916 	bl	8007a68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	200000e8 	.word	0x200000e8

0800684c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006864:	f06f 0303 	mvn.w	r3, #3
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e04b      	b.n	8006904 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800686c:	f3ef 8305 	mrs	r3, IPSR
 8006870:	617b      	str	r3, [r7, #20]
  return(result);
 8006872:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10f      	bne.n	8006898 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006878:	f3ef 8310 	mrs	r3, PRIMASK
 800687c:	613b      	str	r3, [r7, #16]
  return(result);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006884:	f3ef 8311 	mrs	r3, BASEPRI
 8006888:	60fb      	str	r3, [r7, #12]
  return(result);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d026      	beq.n	80068de <osSemaphoreAcquire+0x92>
 8006890:	4b1f      	ldr	r3, [pc, #124]	; (8006910 <osSemaphoreAcquire+0xc4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d122      	bne.n	80068de <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800689e:	f06f 0303 	mvn.w	r3, #3
 80068a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80068a4:	e02d      	b.n	8006902 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	461a      	mov	r2, r3
 80068b0:	2100      	movs	r1, #0
 80068b2:	69b8      	ldr	r0, [r7, #24]
 80068b4:	f000 ff10 	bl	80076d8 <xQueueReceiveFromISR>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d003      	beq.n	80068c6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80068be:	f06f 0302 	mvn.w	r3, #2
 80068c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80068c4:	e01d      	b.n	8006902 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <osSemaphoreAcquire+0xb6>
 80068cc:	4b11      	ldr	r3, [pc, #68]	; (8006914 <osSemaphoreAcquire+0xc8>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80068dc:	e011      	b.n	8006902 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	69b8      	ldr	r0, [r7, #24]
 80068e2:	f000 fdf1 	bl	80074c8 <xQueueSemaphoreTake>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d00b      	beq.n	8006904 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80068f2:	f06f 0301 	mvn.w	r3, #1
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	e004      	b.n	8006904 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80068fa:	f06f 0302 	mvn.w	r3, #2
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e000      	b.n	8006904 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006902:	bf00      	nop
      }
    }
  }

  return (stat);
 8006904:	69fb      	ldr	r3, [r7, #28]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200000e8 	.word	0x200000e8
 8006914:	e000ed04 	.word	0xe000ed04

08006918 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800692e:	f06f 0303 	mvn.w	r3, #3
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	e03e      	b.n	80069b4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006936:	f3ef 8305 	mrs	r3, IPSR
 800693a:	617b      	str	r3, [r7, #20]
  return(result);
 800693c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006942:	f3ef 8310 	mrs	r3, PRIMASK
 8006946:	613b      	str	r3, [r7, #16]
  return(result);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800694e:	f3ef 8311 	mrs	r3, BASEPRI
 8006952:	60fb      	str	r3, [r7, #12]
  return(result);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01e      	beq.n	8006998 <osSemaphoreRelease+0x80>
 800695a:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <osSemaphoreRelease+0xa8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d11a      	bne.n	8006998 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006966:	f107 0308 	add.w	r3, r7, #8
 800696a:	4619      	mov	r1, r3
 800696c:	69b8      	ldr	r0, [r7, #24]
 800696e:	f000 fc45 	bl	80071fc <xQueueGiveFromISR>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d003      	beq.n	8006980 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006978:	f06f 0302 	mvn.w	r3, #2
 800697c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800697e:	e018      	b.n	80069b2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d015      	beq.n	80069b2 <osSemaphoreRelease+0x9a>
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <osSemaphoreRelease+0xac>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006996:	e00c      	b.n	80069b2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006998:	2300      	movs	r3, #0
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	69b8      	ldr	r0, [r7, #24]
 80069a0:	f000 fa9e 	bl	8006ee0 <xQueueGenericSend>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d004      	beq.n	80069b4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80069aa:	f06f 0302 	mvn.w	r3, #2
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	e000      	b.n	80069b4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80069b2:	bf00      	nop
    }
  }

  return (stat);
 80069b4:	69fb      	ldr	r3, [r7, #28]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	200000e8 	.word	0x200000e8
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80069d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a06      	ldr	r2, [pc, #24]	; (80069f8 <vApplicationGetIdleTaskMemory+0x30>)
 80069de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2240      	movs	r2, #64	; 0x40
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200000ec 	.word	0x200000ec
 80069f8:	20000148 	.word	0x20000148

080069fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a07      	ldr	r2, [pc, #28]	; (8006a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a06      	ldr	r2, [pc, #24]	; (8006a2c <vApplicationGetTimerTaskMemory+0x30>)
 8006a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a1a:	601a      	str	r2, [r3, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	20000248 	.word	0x20000248
 8006a2c:	200002a4 	.word	0x200002a4

08006a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f103 0208 	add.w	r2, r3, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f103 0208 	add.w	r2, r3, #8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f103 0208 	add.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae8:	d103      	bne.n	8006af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e00c      	b.n	8006b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3308      	adds	r3, #8
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e002      	b.n	8006b00 <vListInsert+0x2e>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d2f6      	bcs.n	8006afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6892      	ldr	r2, [r2, #8]
 8006b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6852      	ldr	r2, [r2, #4]
 8006b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d103      	bne.n	8006b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1e5a      	subs	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	e7fe      	b.n	8006bbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006bc0:	f002 fc24 	bl	800940c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	22ff      	movs	r2, #255	; 0xff
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d114      	bne.n	8006c40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01a      	beq.n	8006c54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3310      	adds	r3, #16
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fbf8 	bl	8008418 <xTaskRemoveFromEventList>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d012      	beq.n	8006c54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <xQueueGenericReset+0xcc>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	e009      	b.n	8006c54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3310      	adds	r3, #16
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fef3 	bl	8006a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff feee 	bl	8006a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c54:	f002 fc08 	bl	8009468 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c58:	2301      	movs	r3, #1
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08e      	sub	sp, #56	; 0x38
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <xQueueGenericCreateStatic+0x28>
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8e:	e7fe      	b.n	8006c8e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <xQueueGenericCreateStatic+0x42>
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <xQueueGenericCreateStatic+0x4e>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <xQueueGenericCreateStatic+0x52>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <xQueueGenericCreateStatic+0x54>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <xQueueGenericCreateStatic+0x6c>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	e7fe      	b.n	8006cd2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <xQueueGenericCreateStatic+0x78>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <xQueueGenericCreateStatic+0x7c>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <xQueueGenericCreateStatic+0x7e>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <xQueueGenericCreateStatic+0x96>
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	e7fe      	b.n	8006cfc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cfe:	2350      	movs	r3, #80	; 0x50
 8006d00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b50      	cmp	r3, #80	; 0x50
 8006d06:	d009      	beq.n	8006d1c <xQueueGenericCreateStatic+0xb4>
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e7fe      	b.n	8006d1a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00d      	beq.n	8006d44 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f844 	bl	8006dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b08a      	sub	sp, #40	; 0x28
 8006d52:	af02      	add	r7, sp, #8
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <xQueueGenericCreate+0x28>
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	e7fe      	b.n	8006d74 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e004      	b.n	8006d8c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	3350      	adds	r3, #80	; 0x50
 8006d90:	4618      	mov	r0, r3
 8006d92:	f002 fc55 	bl	8009640 <pvPortMalloc>
 8006d96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d011      	beq.n	8006dc2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	3350      	adds	r3, #80	; 0x50
 8006da6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006db0:	79fa      	ldrb	r2, [r7, #7]
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4613      	mov	r3, r2
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f805 	bl	8006dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3720      	adds	r7, #32
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d103      	bne.n	8006de8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e002      	b.n	8006dee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	69b8      	ldr	r0, [r7, #24]
 8006dfe:	f7ff fecb 	bl	8006b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b08a      	sub	sp, #40	; 0x28
 8006e16:	af02      	add	r7, sp, #8
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <xQueueCreateCountingSemaphoreStatic+0x26>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	e7fe      	b.n	8006e36 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d909      	bls.n	8006e54 <xQueueCreateCountingSemaphoreStatic+0x42>
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	e7fe      	b.n	8006e52 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e54:	2302      	movs	r3, #2
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ff02 	bl	8006c68 <xQueueGenericCreateStatic>
 8006e64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e72:	69fb      	ldr	r3, [r7, #28]
	}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <xQueueCreateCountingSemaphore+0x24>
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e7fe      	b.n	8006e9e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d909      	bls.n	8006ebc <xQueueCreateCountingSemaphore+0x40>
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	e7fe      	b.n	8006eba <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ff44 	bl	8006d4e <xQueueGenericCreate>
 8006ec6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ed4:	697b      	ldr	r3, [r7, #20]
	}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	; 0x38
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <xQueueGenericSend+0x30>
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0e:	e7fe      	b.n	8006f0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <xQueueGenericSend+0x3e>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <xQueueGenericSend+0x42>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <xQueueGenericSend+0x44>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <xQueueGenericSend+0x5c>
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3a:	e7fe      	b.n	8006f3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d103      	bne.n	8006f4a <xQueueGenericSend+0x6a>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <xQueueGenericSend+0x6e>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <xQueueGenericSend+0x70>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <xQueueGenericSend+0x88>
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	e7fe      	b.n	8006f66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f68:	f001 fc0c 	bl	8008784 <xTaskGetSchedulerState>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <xQueueGenericSend+0x98>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <xQueueGenericSend+0x9c>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <xQueueGenericSend+0x9e>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <xQueueGenericSend+0xb6>
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f96:	f002 fa39 	bl	800940c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <xQueueGenericSend+0xcc>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d129      	bne.n	8007000 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb2:	f000 fc48 	bl	8007846 <prvCopyDataToQueue>
 8006fb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d010      	beq.n	8006fe2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	3324      	adds	r3, #36	; 0x24
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fa27 	bl	8008418 <xTaskRemoveFromEventList>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d013      	beq.n	8006ff8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <xQueueGenericSend+0x1f0>)
 8006fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	e00a      	b.n	8006ff8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fe8:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <xQueueGenericSend+0x1f0>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ff8:	f002 fa36 	bl	8009468 <vPortExitCritical>
				return pdPASS;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e063      	b.n	80070c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007006:	f002 fa2f 	bl	8009468 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800700a:	2300      	movs	r3, #0
 800700c:	e05c      	b.n	80070c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d106      	bne.n	8007022 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007014:	f107 0314 	add.w	r3, r7, #20
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fa5f 	bl	80084dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800701e:	2301      	movs	r3, #1
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007022:	f002 fa21 	bl	8009468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007026:	f000 ffdb 	bl	8007fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800702a:	f002 f9ef 	bl	800940c <vPortEnterCritical>
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007034:	b25b      	sxtb	r3, r3
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d103      	bne.n	8007044 <xQueueGenericSend+0x164>
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800704a:	b25b      	sxtb	r3, r3
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d103      	bne.n	800705a <xQueueGenericSend+0x17a>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800705a:	f002 fa05 	bl	8009468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800705e:	1d3a      	adds	r2, r7, #4
 8007060:	f107 0314 	add.w	r3, r7, #20
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fa4e 	bl	8008508 <xTaskCheckForTimeOut>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d124      	bne.n	80070bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007074:	f000 fcdf 	bl	8007a36 <prvIsQueueFull>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d018      	beq.n	80070b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	3310      	adds	r3, #16
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f978 	bl	800837c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800708c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800708e:	f000 fc6a 	bl	8007966 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007092:	f000 ffb3 	bl	8007ffc <xTaskResumeAll>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	f47f af7c 	bne.w	8006f96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <xQueueGenericSend+0x1f0>)
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	e772      	b.n	8006f96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070b2:	f000 fc58 	bl	8007966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b6:	f000 ffa1 	bl	8007ffc <xTaskResumeAll>
 80070ba:	e76c      	b.n	8006f96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070be:	f000 fc52 	bl	8007966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070c2:	f000 ff9b 	bl	8007ffc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3738      	adds	r7, #56	; 0x38
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	e000ed04 	.word	0xe000ed04

080070d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08e      	sub	sp, #56	; 0x38
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <xQueueGenericSendFromISR+0x2c>
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
 80070fe:	e7fe      	b.n	80070fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <xQueueGenericSendFromISR+0x3a>
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <xQueueGenericSendFromISR+0x3e>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <xQueueGenericSendFromISR+0x40>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d109      	bne.n	800712c <xQueueGenericSendFromISR+0x58>
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	623b      	str	r3, [r7, #32]
 800712a:	e7fe      	b.n	800712a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d103      	bne.n	800713a <xQueueGenericSendFromISR+0x66>
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <xQueueGenericSendFromISR+0x6a>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <xQueueGenericSendFromISR+0x6c>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d109      	bne.n	8007158 <xQueueGenericSendFromISR+0x84>
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	61fb      	str	r3, [r7, #28]
 8007156:	e7fe      	b.n	8007156 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007158:	f002 fa34 	bl	80095c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800715c:	f3ef 8211 	mrs	r2, BASEPRI
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	61ba      	str	r2, [r7, #24]
 8007172:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007174:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	429a      	cmp	r2, r3
 8007182:	d302      	bcc.n	800718a <xQueueGenericSendFromISR+0xb6>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d12c      	bne.n	80071e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719a:	f000 fb54 	bl	8007846 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800719e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a6:	d112      	bne.n	80071ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d016      	beq.n	80071de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 f92f 	bl	8008418 <xTaskRemoveFromEventList>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e007      	b.n	80071de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	b25a      	sxtb	r2, r3
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071de:	2301      	movs	r3, #1
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80071e2:	e001      	b.n	80071e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3738      	adds	r7, #56	; 0x38
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	; 0x38
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	623b      	str	r3, [r7, #32]
 8007222:	e7fe      	b.n	8007222 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <xQueueGiveFromISR+0x44>
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e7fe      	b.n	800723e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <xQueueGiveFromISR+0x54>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <xQueueGiveFromISR+0x58>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <xQueueGiveFromISR+0x5a>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <xQueueGiveFromISR+0x72>
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e7fe      	b.n	800726c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800726e:	f002 f9a9 	bl	80095c4 <vPortValidateInterruptPriority>
	__asm volatile
 8007272:	f3ef 8211 	mrs	r2, BASEPRI
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	617a      	str	r2, [r7, #20]
 8007288:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800728a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800729a:	429a      	cmp	r2, r3
 800729c:	d22b      	bcs.n	80072f6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d112      	bne.n	80072e0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d016      	beq.n	80072f0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	3324      	adds	r3, #36	; 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 f8a6 	bl	8008418 <xTaskRemoveFromEventList>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00e      	beq.n	80072f0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e007      	b.n	80072f0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e4:	3301      	adds	r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	b25a      	sxtb	r2, r3
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072f0:	2301      	movs	r3, #1
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
 80072f4:	e001      	b.n	80072fa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007306:	4618      	mov	r0, r3
 8007308:	3738      	adds	r7, #56	; 0x38
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800731c:	2300      	movs	r3, #0
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <xQueueReceive+0x2e>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	623b      	str	r3, [r7, #32]
 800733c:	e7fe      	b.n	800733c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d103      	bne.n	800734c <xQueueReceive+0x3c>
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <xQueueReceive+0x40>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <xQueueReceive+0x42>
 8007350:	2300      	movs	r3, #0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <xQueueReceive+0x5a>
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e7fe      	b.n	8007368 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800736a:	f001 fa0b 	bl	8008784 <xTaskGetSchedulerState>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <xQueueReceive+0x6a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <xQueueReceive+0x6e>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <xQueueReceive+0x70>
 800737e:	2300      	movs	r3, #0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <xQueueReceive+0x88>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	e7fe      	b.n	8007396 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007398:	f002 f838 	bl	800940c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01f      	beq.n	80073e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ac:	f000 fab5 	bl	800791a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	1e5a      	subs	r2, r3, #1
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	3310      	adds	r3, #16
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 f827 	bl	8008418 <xTaskRemoveFromEventList>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073d0:	4b3c      	ldr	r3, [pc, #240]	; (80074c4 <xQueueReceive+0x1b4>)
 80073d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073e0:	f002 f842 	bl	8009468 <vPortExitCritical>
				return pdPASS;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e069      	b.n	80074bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ee:	f002 f83b 	bl	8009468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e062      	b.n	80074bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073fc:	f107 0310 	add.w	r3, r7, #16
 8007400:	4618      	mov	r0, r3
 8007402:	f001 f86b 	bl	80084dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800740a:	f002 f82d 	bl	8009468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800740e:	f000 fde7 	bl	8007fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007412:	f001 fffb 	bl	800940c <vPortEnterCritical>
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800741c:	b25b      	sxtb	r3, r3
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d103      	bne.n	800742c <xQueueReceive+0x11c>
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d103      	bne.n	8007442 <xQueueReceive+0x132>
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007442:	f002 f811 	bl	8009468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007446:	1d3a      	adds	r2, r7, #4
 8007448:	f107 0310 	add.w	r3, r7, #16
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f001 f85a 	bl	8008508 <xTaskCheckForTimeOut>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d123      	bne.n	80074a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800745a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745c:	f000 fad5 	bl	8007a0a <prvIsQueueEmpty>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d017      	beq.n	8007496 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	3324      	adds	r3, #36	; 0x24
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f000 ff84 	bl	800837c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007476:	f000 fa76 	bl	8007966 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800747a:	f000 fdbf 	bl	8007ffc <xTaskResumeAll>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d189      	bne.n	8007398 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <xQueueReceive+0x1b4>)
 8007486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	e780      	b.n	8007398 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007498:	f000 fa65 	bl	8007966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800749c:	f000 fdae 	bl	8007ffc <xTaskResumeAll>
 80074a0:	e77a      	b.n	8007398 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a4:	f000 fa5f 	bl	8007966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074a8:	f000 fda8 	bl	8007ffc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ae:	f000 faac 	bl	8007a0a <prvIsQueueEmpty>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f43f af6f 	beq.w	8007398 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3730      	adds	r7, #48	; 0x30
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	e000ed04 	.word	0xe000ed04

080074c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	; 0x38
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074da:	2300      	movs	r3, #0
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <xQueueSemaphoreTake+0x30>
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	623b      	str	r3, [r7, #32]
 80074f6:	e7fe      	b.n	80074f6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <xQueueSemaphoreTake+0x4c>
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e7fe      	b.n	8007512 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007514:	f001 f936 	bl	8008784 <xTaskGetSchedulerState>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <xQueueSemaphoreTake+0x5c>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <xQueueSemaphoreTake+0x60>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <xQueueSemaphoreTake+0x62>
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <xQueueSemaphoreTake+0x7a>
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	e7fe      	b.n	8007540 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007542:	f001 ff63 	bl	800940c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	d024      	beq.n	800759c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	1e5a      	subs	r2, r3, #1
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007562:	f001 fa81 	bl	8008a68 <pvTaskIncrementMutexHeldCount>
 8007566:	4602      	mov	r2, r0
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00f      	beq.n	8007594 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	3310      	adds	r3, #16
 8007578:	4618      	mov	r0, r3
 800757a:	f000 ff4d 	bl	8008418 <xTaskRemoveFromEventList>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007584:	4b53      	ldr	r3, [pc, #332]	; (80076d4 <xQueueSemaphoreTake+0x20c>)
 8007586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007594:	f001 ff68 	bl	8009468 <vPortExitCritical>
				return pdPASS;
 8007598:	2301      	movs	r3, #1
 800759a:	e096      	b.n	80076ca <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d110      	bne.n	80075c4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <xQueueSemaphoreTake+0xf4>
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e7fe      	b.n	80075ba <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075bc:	f001 ff54 	bl	8009468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075c0:	2300      	movs	r3, #0
 80075c2:	e082      	b.n	80076ca <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 ff84 	bl	80084dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075d8:	f001 ff46 	bl	8009468 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075dc:	f000 fd00 	bl	8007fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075e0:	f001 ff14 	bl	800940c <vPortEnterCritical>
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075ea:	b25b      	sxtb	r3, r3
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d103      	bne.n	80075fa <xQueueSemaphoreTake+0x132>
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007600:	b25b      	sxtb	r3, r3
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d103      	bne.n	8007610 <xQueueSemaphoreTake+0x148>
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007610:	f001 ff2a 	bl	8009468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007614:	463a      	mov	r2, r7
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f000 ff73 	bl	8008508 <xTaskCheckForTimeOut>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d132      	bne.n	800768e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800762a:	f000 f9ee 	bl	8007a0a <prvIsQueueEmpty>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d026      	beq.n	8007682 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d109      	bne.n	8007650 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800763c:	f001 fee6 	bl	800940c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f001 f8bb 	bl	80087c0 <xTaskPriorityInherit>
 800764a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800764c:	f001 ff0c 	bl	8009468 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fe8f 	bl	800837c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800765e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007660:	f000 f981 	bl	8007966 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007664:	f000 fcca 	bl	8007ffc <xTaskResumeAll>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f47f af69 	bne.w	8007542 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007670:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <xQueueSemaphoreTake+0x20c>)
 8007672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	e75f      	b.n	8007542 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007684:	f000 f96f 	bl	8007966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007688:	f000 fcb8 	bl	8007ffc <xTaskResumeAll>
 800768c:	e759      	b.n	8007542 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800768e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007690:	f000 f969 	bl	8007966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007694:	f000 fcb2 	bl	8007ffc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800769a:	f000 f9b6 	bl	8007a0a <prvIsQueueEmpty>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f43f af4e 	beq.w	8007542 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80076ac:	f001 feae 	bl	800940c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076b2:	f000 f8b0 	bl	8007816 <prvGetDisinheritPriorityAfterTimeout>
 80076b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 f952 	bl	8008968 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80076c4:	f001 fed0 	bl	8009468 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3738      	adds	r7, #56	; 0x38
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08e      	sub	sp, #56	; 0x38
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <xQueueReceiveFromISR+0x2a>
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	623b      	str	r3, [r7, #32]
 8007700:	e7fe      	b.n	8007700 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <xQueueReceiveFromISR+0x38>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <xQueueReceiveFromISR+0x3c>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <xQueueReceiveFromISR+0x3e>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <xQueueReceiveFromISR+0x56>
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e7fe      	b.n	800772c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800772e:	f001 ff49 	bl	80095c4 <vPortValidateInterruptPriority>
	__asm volatile
 8007732:	f3ef 8211 	mrs	r2, BASEPRI
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	61ba      	str	r2, [r7, #24]
 8007748:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800774a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d02f      	beq.n	80077ba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007768:	f000 f8d7 	bl	800791a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	1e5a      	subs	r2, r3, #1
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d112      	bne.n	80077a4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d016      	beq.n	80077b4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	3310      	adds	r3, #16
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fe44 	bl	8008418 <xTaskRemoveFromEventList>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00e      	beq.n	80077b4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e007      	b.n	80077b4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80077a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a8:	3301      	adds	r3, #1
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	b25a      	sxtb	r2, r3
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80077b4:	2301      	movs	r3, #1
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
 80077b8:	e001      	b.n	80077be <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3738      	adds	r7, #56	; 0x38
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <vQueueDelete+0x26>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	e7fe      	b.n	80077f6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f95d 	bl	8007ab8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 ffdb 	bl	80097c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d006      	beq.n	8007834 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e001      	b.n	8007838 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007838:	68fb      	ldr	r3, [r7, #12]
	}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10d      	bne.n	8007880 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d14d      	bne.n	8007908 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4618      	mov	r0, r3
 8007872:	f001 f80d 	bl	8008890 <xTaskPriorityDisinherit>
 8007876:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]
 800787e:	e043      	b.n	8007908 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d119      	bne.n	80078ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6858      	ldr	r0, [r3, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	461a      	mov	r2, r3
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	f002 f8d5 	bl	8009a40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	441a      	add	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d32b      	bcc.n	8007908 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	605a      	str	r2, [r3, #4]
 80078b8:	e026      	b.n	8007908 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68d8      	ldr	r0, [r3, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	461a      	mov	r2, r3
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	f002 f8bb 	bl	8009a40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	425b      	negs	r3, r3
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d207      	bcs.n	80078f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	425b      	negs	r3, r3
 80078f0:	441a      	add	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d105      	bne.n	8007908 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3b01      	subs	r3, #1
 8007906:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007910:	697b      	ldr	r3, [r7, #20]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d018      	beq.n	800795e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	d303      	bcc.n	800794e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68d9      	ldr	r1, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	461a      	mov	r2, r3
 8007958:	6838      	ldr	r0, [r7, #0]
 800795a:	f002 f871 	bl	8009a40 <memcpy>
	}
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800796e:	f001 fd4d 	bl	800940c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007978:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800797a:	e011      	b.n	80079a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d012      	beq.n	80079aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3324      	adds	r3, #36	; 0x24
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fd45 	bl	8008418 <xTaskRemoveFromEventList>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007994:	f000 fe18 	bl	80085c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	3b01      	subs	r3, #1
 800799c:	b2db      	uxtb	r3, r3
 800799e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dce9      	bgt.n	800797c <prvUnlockQueue+0x16>
 80079a8:	e000      	b.n	80079ac <prvUnlockQueue+0x46>
					break;
 80079aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	22ff      	movs	r2, #255	; 0xff
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079b4:	f001 fd58 	bl	8009468 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079b8:	f001 fd28 	bl	800940c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079c4:	e011      	b.n	80079ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d012      	beq.n	80079f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3310      	adds	r3, #16
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fd20 	bl	8008418 <xTaskRemoveFromEventList>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079de:	f000 fdf3 	bl	80085c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dce9      	bgt.n	80079c6 <prvUnlockQueue+0x60>
 80079f2:	e000      	b.n	80079f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	22ff      	movs	r2, #255	; 0xff
 80079fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80079fe:	f001 fd33 	bl	8009468 <vPortExitCritical>
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a12:	f001 fcfb 	bl	800940c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e001      	b.n	8007a28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a28:	f001 fd1e 	bl	8009468 <vPortExitCritical>

	return xReturn;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a3e:	f001 fce5 	bl	800940c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d102      	bne.n	8007a54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e001      	b.n	8007a58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a58:	f001 fd06 	bl	8009468 <vPortExitCritical>

	return xReturn;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e014      	b.n	8007aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a78:	4a0e      	ldr	r2, [pc, #56]	; (8007ab4 <vQueueAddToRegistry+0x4c>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a84:	490b      	ldr	r1, [pc, #44]	; (8007ab4 <vQueueAddToRegistry+0x4c>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a8e:	4a09      	ldr	r2, [pc, #36]	; (8007ab4 <vQueueAddToRegistry+0x4c>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a9a:	e005      	b.n	8007aa8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	d9e7      	bls.n	8007a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007aa8:	bf00      	nop
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	20002fdc 	.word	0x20002fdc

08007ab8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e016      	b.n	8007af4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007ac6:	4a10      	ldr	r2, [pc, #64]	; (8007b08 <vQueueUnregisterQueue+0x50>)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d10b      	bne.n	8007aee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	; (8007b08 <vQueueUnregisterQueue+0x50>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2100      	movs	r1, #0
 8007adc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007ae0:	4a09      	ldr	r2, [pc, #36]	; (8007b08 <vQueueUnregisterQueue+0x50>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	2200      	movs	r2, #0
 8007aea:	605a      	str	r2, [r3, #4]
				break;
 8007aec:	e005      	b.n	8007afa <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b07      	cmp	r3, #7
 8007af8:	d9e5      	bls.n	8007ac6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20002fdc 	.word	0x20002fdc

08007b0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b1c:	f001 fc76 	bl	800940c <vPortEnterCritical>
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d103      	bne.n	8007b36 <vQueueWaitForMessageRestricted+0x2a>
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d103      	bne.n	8007b4c <vQueueWaitForMessageRestricted+0x40>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b4c:	f001 fc8c 	bl	8009468 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	3324      	adds	r3, #36	; 0x24
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fc2f 	bl	80083c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b66:	6978      	ldr	r0, [r7, #20]
 8007b68:	f7ff fefd 	bl	8007966 <prvUnlockQueue>
	}
 8007b6c:	bf00      	nop
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08e      	sub	sp, #56	; 0x38
 8007b78:	af04      	add	r7, sp, #16
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <xTaskCreateStatic+0x28>
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	623b      	str	r3, [r7, #32]
 8007b9a:	e7fe      	b.n	8007b9a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <xTaskCreateStatic+0x42>
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	e7fe      	b.n	8007bb4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bb6:	235c      	movs	r3, #92	; 0x5c
 8007bb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8007bbe:	d009      	beq.n	8007bd4 <xTaskCreateStatic+0x60>
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	e7fe      	b.n	8007bd2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01e      	beq.n	8007c1a <xTaskCreateStatic+0xa6>
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01b      	beq.n	8007c1a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f850 	bl	8007cb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c14:	f000 f8dc 	bl	8007dd0 <prvAddNewTaskToReadyList>
 8007c18:	e001      	b.n	8007c1e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c1e:	697b      	ldr	r3, [r7, #20]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3728      	adds	r7, #40	; 0x28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08c      	sub	sp, #48	; 0x30
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fcff 	bl	8009640 <pvPortMalloc>
 8007c42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00e      	beq.n	8007c68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c4a:	205c      	movs	r0, #92	; 0x5c
 8007c4c:	f001 fcf8 	bl	8009640 <pvPortMalloc>
 8007c50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c5e:	e005      	b.n	8007c6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c60:	6978      	ldr	r0, [r7, #20]
 8007c62:	f001 fdaf 	bl	80097c4 <vPortFree>
 8007c66:	e001      	b.n	8007c6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f80e 	bl	8007cb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c96:	69f8      	ldr	r0, [r7, #28]
 8007c98:	f000 f89a 	bl	8007dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	61bb      	str	r3, [r7, #24]
 8007ca0:	e002      	b.n	8007ca8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
	}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b088      	sub	sp, #32
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	21a5      	movs	r1, #165	; 0xa5
 8007ccc:	f001 fec3 	bl	8009a56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f023 0307 	bic.w	r3, r3, #7
 8007ce8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d009      	beq.n	8007d08 <prvInitialiseNewTask+0x56>
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e7fe      	b.n	8007d06 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01f      	beq.n	8007d4e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	e012      	b.n	8007d3a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	7819      	ldrb	r1, [r3, #0]
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	3334      	adds	r3, #52	; 0x34
 8007d24:	460a      	mov	r2, r1
 8007d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d006      	beq.n	8007d42 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	2b0f      	cmp	r3, #15
 8007d3e:	d9e9      	bls.n	8007d14 <prvInitialiseNewTask+0x62>
 8007d40:	e000      	b.n	8007d44 <prvInitialiseNewTask+0x92>
			{
				break;
 8007d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d4c:	e003      	b.n	8007d56 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	2b37      	cmp	r3, #55	; 0x37
 8007d5a:	d901      	bls.n	8007d60 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d5c:	2337      	movs	r3, #55	; 0x37
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	2200      	movs	r2, #0
 8007d70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	3304      	adds	r3, #4
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fe7a 	bl	8006a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	3318      	adds	r3, #24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe fe75 	bl	8006a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	2200      	movs	r2, #0
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	69b8      	ldr	r0, [r7, #24]
 8007db0:	f001 fa08 	bl	80091c4 <pxPortInitialiseStack>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc6:	bf00      	nop
 8007dc8:	3720      	adds	r7, #32
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dd8:	f001 fb18 	bl	800940c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ddc:	4b2d      	ldr	r3, [pc, #180]	; (8007e94 <prvAddNewTaskToReadyList+0xc4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3301      	adds	r3, #1
 8007de2:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <prvAddNewTaskToReadyList+0xc4>)
 8007de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007de6:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <prvAddNewTaskToReadyList+0xc8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dee:	4a2a      	ldr	r2, [pc, #168]	; (8007e98 <prvAddNewTaskToReadyList+0xc8>)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007df4:	4b27      	ldr	r3, [pc, #156]	; (8007e94 <prvAddNewTaskToReadyList+0xc4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d110      	bne.n	8007e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dfc:	f000 fc08 	bl	8008610 <prvInitialiseTaskLists>
 8007e00:	e00d      	b.n	8007e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e02:	4b26      	ldr	r3, [pc, #152]	; (8007e9c <prvAddNewTaskToReadyList+0xcc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e0a:	4b23      	ldr	r3, [pc, #140]	; (8007e98 <prvAddNewTaskToReadyList+0xc8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d802      	bhi.n	8007e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e18:	4a1f      	ldr	r2, [pc, #124]	; (8007e98 <prvAddNewTaskToReadyList+0xc8>)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <prvAddNewTaskToReadyList+0xd0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3301      	adds	r3, #1
 8007e24:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <prvAddNewTaskToReadyList+0xd0>)
 8007e26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e28:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <prvAddNewTaskToReadyList+0xd0>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	4b1b      	ldr	r3, [pc, #108]	; (8007ea4 <prvAddNewTaskToReadyList+0xd4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d903      	bls.n	8007e44 <prvAddNewTaskToReadyList+0x74>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <prvAddNewTaskToReadyList+0xd4>)
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <prvAddNewTaskToReadyList+0xd8>)
 8007e52:	441a      	add	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f7fe fe15 	bl	8006a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e60:	f001 fb02 	bl	8009468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e64:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <prvAddNewTaskToReadyList+0xcc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00e      	beq.n	8007e8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <prvAddNewTaskToReadyList+0xc8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d207      	bcs.n	8007e8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <prvAddNewTaskToReadyList+0xdc>)
 8007e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000b78 	.word	0x20000b78
 8007e98:	200006a4 	.word	0x200006a4
 8007e9c:	20000b84 	.word	0x20000b84
 8007ea0:	20000b94 	.word	0x20000b94
 8007ea4:	20000b80 	.word	0x20000b80
 8007ea8:	200006a8 	.word	0x200006a8
 8007eac:	e000ed04 	.word	0xe000ed04

08007eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d016      	beq.n	8007ef0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ec2:	4b13      	ldr	r3, [pc, #76]	; (8007f10 <vTaskDelay+0x60>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <vTaskDelay+0x2e>
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60bb      	str	r3, [r7, #8]
 8007edc:	e7fe      	b.n	8007edc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007ede:	f000 f87f 	bl	8007fe0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fdd3 	bl	8008a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007eea:	f000 f887 	bl	8007ffc <xTaskResumeAll>
 8007eee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007ef6:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <vTaskDelay+0x64>)
 8007ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f06:	bf00      	nop
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000ba0 	.word	0x20000ba0
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	; 0x28
 8007f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f26:	463a      	mov	r2, r7
 8007f28:	1d39      	adds	r1, r7, #4
 8007f2a:	f107 0308 	add.w	r3, r7, #8
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fd4a 	bl	80069c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	9202      	str	r2, [sp, #8]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	2300      	movs	r3, #0
 8007f44:	460a      	mov	r2, r1
 8007f46:	4920      	ldr	r1, [pc, #128]	; (8007fc8 <vTaskStartScheduler+0xb0>)
 8007f48:	4820      	ldr	r0, [pc, #128]	; (8007fcc <vTaskStartScheduler+0xb4>)
 8007f4a:	f7ff fe13 	bl	8007b74 <xTaskCreateStatic>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	4b1f      	ldr	r3, [pc, #124]	; (8007fd0 <vTaskStartScheduler+0xb8>)
 8007f52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f54:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <vTaskStartScheduler+0xb8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e001      	b.n	8007f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d102      	bne.n	8007f72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f6c:	f000 fde4 	bl	8008b38 <xTimerCreateTimerTask>
 8007f70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d115      	bne.n	8007fa4 <vTaskStartScheduler+0x8c>
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <vTaskStartScheduler+0xbc>)
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <vTaskStartScheduler+0xc0>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f98:	4b10      	ldr	r3, [pc, #64]	; (8007fdc <vTaskStartScheduler+0xc4>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f9e:	f001 f997 	bl	80092d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fa2:	e00d      	b.n	8007fc0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d109      	bne.n	8007fc0 <vTaskStartScheduler+0xa8>
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e7fe      	b.n	8007fbe <vTaskStartScheduler+0xa6>
}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	0800b054 	.word	0x0800b054
 8007fcc:	080085e1 	.word	0x080085e1
 8007fd0:	20000b9c 	.word	0x20000b9c
 8007fd4:	20000b98 	.word	0x20000b98
 8007fd8:	20000b84 	.word	0x20000b84
 8007fdc:	20000b7c 	.word	0x20000b7c

08007fe0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007fe4:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <vTaskSuspendAll+0x18>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	4a03      	ldr	r2, [pc, #12]	; (8007ff8 <vTaskSuspendAll+0x18>)
 8007fec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007fee:	bf00      	nop
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	20000ba0 	.word	0x20000ba0

08007ffc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008006:	2300      	movs	r3, #0
 8008008:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800800a:	4b41      	ldr	r3, [pc, #260]	; (8008110 <xTaskResumeAll+0x114>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <xTaskResumeAll+0x2a>
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	e7fe      	b.n	8008024 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008026:	f001 f9f1 	bl	800940c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <xTaskResumeAll+0x114>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3b01      	subs	r3, #1
 8008030:	4a37      	ldr	r2, [pc, #220]	; (8008110 <xTaskResumeAll+0x114>)
 8008032:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008034:	4b36      	ldr	r3, [pc, #216]	; (8008110 <xTaskResumeAll+0x114>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d162      	bne.n	8008102 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800803c:	4b35      	ldr	r3, [pc, #212]	; (8008114 <xTaskResumeAll+0x118>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d05e      	beq.n	8008102 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008044:	e02f      	b.n	80080a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008046:	4b34      	ldr	r3, [pc, #208]	; (8008118 <xTaskResumeAll+0x11c>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3318      	adds	r3, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fd76 	bl	8006b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3304      	adds	r3, #4
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fd71 	bl	8006b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	4b2d      	ldr	r3, [pc, #180]	; (800811c <xTaskResumeAll+0x120>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d903      	bls.n	8008076 <xTaskResumeAll+0x7a>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <xTaskResumeAll+0x120>)
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4a27      	ldr	r2, [pc, #156]	; (8008120 <xTaskResumeAll+0x124>)
 8008084:	441a      	add	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fe fcfc 	bl	8006a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	4b23      	ldr	r3, [pc, #140]	; (8008124 <xTaskResumeAll+0x128>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	429a      	cmp	r2, r3
 800809e:	d302      	bcc.n	80080a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80080a0:	4b21      	ldr	r3, [pc, #132]	; (8008128 <xTaskResumeAll+0x12c>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <xTaskResumeAll+0x11c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1cb      	bne.n	8008046 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080b4:	f000 fb46 	bl	8008744 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080b8:	4b1c      	ldr	r3, [pc, #112]	; (800812c <xTaskResumeAll+0x130>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d010      	beq.n	80080e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080c4:	f000 f846 	bl	8008154 <xTaskIncrementTick>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80080ce:	4b16      	ldr	r3, [pc, #88]	; (8008128 <xTaskResumeAll+0x12c>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f1      	bne.n	80080c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80080e0:	4b12      	ldr	r3, [pc, #72]	; (800812c <xTaskResumeAll+0x130>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <xTaskResumeAll+0x12c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080f2:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <xTaskResumeAll+0x134>)
 80080f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008102:	f001 f9b1 	bl	8009468 <vPortExitCritical>

	return xAlreadyYielded;
 8008106:	68bb      	ldr	r3, [r7, #8]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000ba0 	.word	0x20000ba0
 8008114:	20000b78 	.word	0x20000b78
 8008118:	20000b38 	.word	0x20000b38
 800811c:	20000b80 	.word	0x20000b80
 8008120:	200006a8 	.word	0x200006a8
 8008124:	200006a4 	.word	0x200006a4
 8008128:	20000b8c 	.word	0x20000b8c
 800812c:	20000b88 	.word	0x20000b88
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <xTaskGetTickCount+0x1c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008140:	687b      	ldr	r3, [r7, #4]
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000b7c 	.word	0x20000b7c

08008154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815e:	4b4e      	ldr	r3, [pc, #312]	; (8008298 <xTaskIncrementTick+0x144>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f040 8088 	bne.w	8008278 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008168:	4b4c      	ldr	r3, [pc, #304]	; (800829c <xTaskIncrementTick+0x148>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008170:	4a4a      	ldr	r2, [pc, #296]	; (800829c <xTaskIncrementTick+0x148>)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11f      	bne.n	80081bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800817c:	4b48      	ldr	r3, [pc, #288]	; (80082a0 <xTaskIncrementTick+0x14c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <xTaskIncrementTick+0x46>
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	e7fe      	b.n	8008198 <xTaskIncrementTick+0x44>
 800819a:	4b41      	ldr	r3, [pc, #260]	; (80082a0 <xTaskIncrementTick+0x14c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	4b40      	ldr	r3, [pc, #256]	; (80082a4 <xTaskIncrementTick+0x150>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a3e      	ldr	r2, [pc, #248]	; (80082a0 <xTaskIncrementTick+0x14c>)
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	4a3e      	ldr	r2, [pc, #248]	; (80082a4 <xTaskIncrementTick+0x150>)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	4b3e      	ldr	r3, [pc, #248]	; (80082a8 <xTaskIncrementTick+0x154>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a3c      	ldr	r2, [pc, #240]	; (80082a8 <xTaskIncrementTick+0x154>)
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	f000 fac4 	bl	8008744 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081bc:	4b3b      	ldr	r3, [pc, #236]	; (80082ac <xTaskIncrementTick+0x158>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d349      	bcc.n	800825a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c6:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <xTaskIncrementTick+0x14c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d0:	4b36      	ldr	r3, [pc, #216]	; (80082ac <xTaskIncrementTick+0x158>)
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	601a      	str	r2, [r3, #0]
					break;
 80081d8:	e03f      	b.n	800825a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081da:	4b31      	ldr	r3, [pc, #196]	; (80082a0 <xTaskIncrementTick+0x14c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d203      	bcs.n	80081fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081f2:	4a2e      	ldr	r2, [pc, #184]	; (80082ac <xTaskIncrementTick+0x158>)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081f8:	e02f      	b.n	800825a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fca0 	bl	8006b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	3318      	adds	r3, #24
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fc97 	bl	8006b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <xTaskIncrementTick+0x15c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d903      	bls.n	800822a <xTaskIncrementTick+0xd6>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	4a22      	ldr	r2, [pc, #136]	; (80082b0 <xTaskIncrementTick+0x15c>)
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <xTaskIncrementTick+0x160>)
 8008238:	441a      	add	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	3304      	adds	r3, #4
 800823e:	4619      	mov	r1, r3
 8008240:	4610      	mov	r0, r2
 8008242:	f7fe fc22 	bl	8006a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <xTaskIncrementTick+0x164>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	429a      	cmp	r2, r3
 8008252:	d3b8      	bcc.n	80081c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008258:	e7b5      	b.n	80081c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800825a:	4b17      	ldr	r3, [pc, #92]	; (80082b8 <xTaskIncrementTick+0x164>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	4914      	ldr	r1, [pc, #80]	; (80082b4 <xTaskIncrementTick+0x160>)
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	440b      	add	r3, r1
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d907      	bls.n	8008282 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008272:	2301      	movs	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e004      	b.n	8008282 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008278:	4b10      	ldr	r3, [pc, #64]	; (80082bc <xTaskIncrementTick+0x168>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a0f      	ldr	r2, [pc, #60]	; (80082bc <xTaskIncrementTick+0x168>)
 8008280:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008282:	4b0f      	ldr	r3, [pc, #60]	; (80082c0 <xTaskIncrementTick+0x16c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800828a:	2301      	movs	r3, #1
 800828c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800828e:	697b      	ldr	r3, [r7, #20]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20000ba0 	.word	0x20000ba0
 800829c:	20000b7c 	.word	0x20000b7c
 80082a0:	20000b30 	.word	0x20000b30
 80082a4:	20000b34 	.word	0x20000b34
 80082a8:	20000b90 	.word	0x20000b90
 80082ac:	20000b98 	.word	0x20000b98
 80082b0:	20000b80 	.word	0x20000b80
 80082b4:	200006a8 	.word	0x200006a8
 80082b8:	200006a4 	.word	0x200006a4
 80082bc:	20000b88 	.word	0x20000b88
 80082c0:	20000b8c 	.word	0x20000b8c

080082c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082ca:	4b27      	ldr	r3, [pc, #156]	; (8008368 <vTaskSwitchContext+0xa4>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082d2:	4b26      	ldr	r3, [pc, #152]	; (800836c <vTaskSwitchContext+0xa8>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082d8:	e040      	b.n	800835c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <vTaskSwitchContext+0xa8>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e0:	4b23      	ldr	r3, [pc, #140]	; (8008370 <vTaskSwitchContext+0xac>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e00f      	b.n	8008308 <vTaskSwitchContext+0x44>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <vTaskSwitchContext+0x3e>
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
 8008300:	e7fe      	b.n	8008300 <vTaskSwitchContext+0x3c>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3b01      	subs	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	491a      	ldr	r1, [pc, #104]	; (8008374 <vTaskSwitchContext+0xb0>)
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	440b      	add	r3, r1
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0e5      	beq.n	80082e8 <vTaskSwitchContext+0x24>
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4a13      	ldr	r2, [pc, #76]	; (8008374 <vTaskSwitchContext+0xb0>)
 8008328:	4413      	add	r3, r2
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	605a      	str	r2, [r3, #4]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3308      	adds	r3, #8
 800833e:	429a      	cmp	r2, r3
 8008340:	d104      	bne.n	800834c <vTaskSwitchContext+0x88>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	605a      	str	r2, [r3, #4]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	4a09      	ldr	r2, [pc, #36]	; (8008378 <vTaskSwitchContext+0xb4>)
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4a06      	ldr	r2, [pc, #24]	; (8008370 <vTaskSwitchContext+0xac>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6013      	str	r3, [r2, #0]
}
 800835c:	bf00      	nop
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	20000ba0 	.word	0x20000ba0
 800836c:	20000b8c 	.word	0x20000b8c
 8008370:	20000b80 	.word	0x20000b80
 8008374:	200006a8 	.word	0x200006a8
 8008378:	200006a4 	.word	0x200006a4

0800837c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <vTaskPlaceOnEventList+0x24>
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e7fe      	b.n	800839e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <vTaskPlaceOnEventList+0x44>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3318      	adds	r3, #24
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fe fb92 	bl	8006ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083ae:	2101      	movs	r1, #1
 80083b0:	6838      	ldr	r0, [r7, #0]
 80083b2:	f000 fb6d 	bl	8008a90 <prvAddCurrentTaskToDelayedList>
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	200006a4 	.word	0x200006a4

080083c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <vTaskPlaceOnEventListRestricted+0x26>
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e7fe      	b.n	80083e8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083ea:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <vTaskPlaceOnEventListRestricted+0x50>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3318      	adds	r3, #24
 80083f0:	4619      	mov	r1, r3
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7fe fb49 	bl	8006a8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008402:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	68b8      	ldr	r0, [r7, #8]
 8008408:	f000 fb42 	bl	8008a90 <prvAddCurrentTaskToDelayedList>
	}
 800840c:	bf00      	nop
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	200006a4 	.word	0x200006a4

08008418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <xTaskRemoveFromEventList+0x2a>
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e7fe      	b.n	8008440 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3318      	adds	r3, #24
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fb7c 	bl	8006b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800844c:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <xTaskRemoveFromEventList+0xac>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11d      	bne.n	8008490 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fb73 	bl	8006b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <xTaskRemoveFromEventList+0xb0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d903      	bls.n	8008472 <xTaskRemoveFromEventList+0x5a>
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <xTaskRemoveFromEventList+0xb0>)
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a13      	ldr	r2, [pc, #76]	; (80084cc <xTaskRemoveFromEventList+0xb4>)
 8008480:	441a      	add	r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fe fafe 	bl	8006a8a <vListInsertEnd>
 800848e:	e005      	b.n	800849c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3318      	adds	r3, #24
 8008494:	4619      	mov	r1, r3
 8008496:	480e      	ldr	r0, [pc, #56]	; (80084d0 <xTaskRemoveFromEventList+0xb8>)
 8008498:	f7fe faf7 	bl	8006a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <xTaskRemoveFromEventList+0xbc>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d905      	bls.n	80084b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <xTaskRemoveFromEventList+0xc0>)
 80084b0:	2201      	movs	r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	e001      	b.n	80084ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084ba:	697b      	ldr	r3, [r7, #20]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000ba0 	.word	0x20000ba0
 80084c8:	20000b80 	.word	0x20000b80
 80084cc:	200006a8 	.word	0x200006a8
 80084d0:	20000b38 	.word	0x20000b38
 80084d4:	200006a4 	.word	0x200006a4
 80084d8:	20000b8c 	.word	0x20000b8c

080084dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084e4:	4b06      	ldr	r3, [pc, #24]	; (8008500 <vTaskInternalSetTimeOutState+0x24>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <vTaskInternalSetTimeOutState+0x28>)
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	605a      	str	r2, [r3, #4]
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000b90 	.word	0x20000b90
 8008504:	20000b7c 	.word	0x20000b7c

08008508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d109      	bne.n	800852c <xTaskCheckForTimeOut+0x24>
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	e7fe      	b.n	800852a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <xTaskCheckForTimeOut+0x3e>
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e7fe      	b.n	8008544 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008546:	f000 ff61 	bl	800940c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800854a:	4b1d      	ldr	r3, [pc, #116]	; (80085c0 <xTaskCheckForTimeOut+0xb8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d102      	bne.n	800856a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
 8008568:	e023      	b.n	80085b2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <xTaskCheckForTimeOut+0xbc>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d007      	beq.n	8008586 <xTaskCheckForTimeOut+0x7e>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	429a      	cmp	r2, r3
 800857e:	d302      	bcc.n	8008586 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	61fb      	str	r3, [r7, #28]
 8008584:	e015      	b.n	80085b2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	429a      	cmp	r2, r3
 800858e:	d20b      	bcs.n	80085a8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	1ad2      	subs	r2, r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff ff9d 	bl	80084dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	61fb      	str	r3, [r7, #28]
 80085a6:	e004      	b.n	80085b2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085b2:	f000 ff59 	bl	8009468 <vPortExitCritical>

	return xReturn;
 80085b6:	69fb      	ldr	r3, [r7, #28]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3720      	adds	r7, #32
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20000b7c 	.word	0x20000b7c
 80085c4:	20000b90 	.word	0x20000b90

080085c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085cc:	4b03      	ldr	r3, [pc, #12]	; (80085dc <vTaskMissedYield+0x14>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
}
 80085d2:	bf00      	nop
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20000b8c 	.word	0x20000b8c

080085e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085e8:	f000 f852 	bl	8008690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085ec:	4b06      	ldr	r3, [pc, #24]	; (8008608 <prvIdleTask+0x28>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d9f9      	bls.n	80085e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085f4:	4b05      	ldr	r3, [pc, #20]	; (800860c <prvIdleTask+0x2c>)
 80085f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008604:	e7f0      	b.n	80085e8 <prvIdleTask+0x8>
 8008606:	bf00      	nop
 8008608:	200006a8 	.word	0x200006a8
 800860c:	e000ed04 	.word	0xe000ed04

08008610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008616:	2300      	movs	r3, #0
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	e00c      	b.n	8008636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4a12      	ldr	r2, [pc, #72]	; (8008670 <prvInitialiseTaskLists+0x60>)
 8008628:	4413      	add	r3, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fa00 	bl	8006a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3301      	adds	r3, #1
 8008634:	607b      	str	r3, [r7, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b37      	cmp	r3, #55	; 0x37
 800863a:	d9ef      	bls.n	800861c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800863c:	480d      	ldr	r0, [pc, #52]	; (8008674 <prvInitialiseTaskLists+0x64>)
 800863e:	f7fe f9f7 	bl	8006a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008642:	480d      	ldr	r0, [pc, #52]	; (8008678 <prvInitialiseTaskLists+0x68>)
 8008644:	f7fe f9f4 	bl	8006a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008648:	480c      	ldr	r0, [pc, #48]	; (800867c <prvInitialiseTaskLists+0x6c>)
 800864a:	f7fe f9f1 	bl	8006a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800864e:	480c      	ldr	r0, [pc, #48]	; (8008680 <prvInitialiseTaskLists+0x70>)
 8008650:	f7fe f9ee 	bl	8006a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008654:	480b      	ldr	r0, [pc, #44]	; (8008684 <prvInitialiseTaskLists+0x74>)
 8008656:	f7fe f9eb 	bl	8006a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800865a:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <prvInitialiseTaskLists+0x78>)
 800865c:	4a05      	ldr	r2, [pc, #20]	; (8008674 <prvInitialiseTaskLists+0x64>)
 800865e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008660:	4b0a      	ldr	r3, [pc, #40]	; (800868c <prvInitialiseTaskLists+0x7c>)
 8008662:	4a05      	ldr	r2, [pc, #20]	; (8008678 <prvInitialiseTaskLists+0x68>)
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200006a8 	.word	0x200006a8
 8008674:	20000b08 	.word	0x20000b08
 8008678:	20000b1c 	.word	0x20000b1c
 800867c:	20000b38 	.word	0x20000b38
 8008680:	20000b4c 	.word	0x20000b4c
 8008684:	20000b64 	.word	0x20000b64
 8008688:	20000b30 	.word	0x20000b30
 800868c:	20000b34 	.word	0x20000b34

08008690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008696:	e019      	b.n	80086cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008698:	f000 feb8 	bl	800940c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <prvCheckTasksWaitingTermination+0x4c>)
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe fa4b 	bl	8006b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086ae:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <prvCheckTasksWaitingTermination+0x50>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	4a0a      	ldr	r2, [pc, #40]	; (80086e0 <prvCheckTasksWaitingTermination+0x50>)
 80086b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvCheckTasksWaitingTermination+0x54>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3b01      	subs	r3, #1
 80086be:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <prvCheckTasksWaitingTermination+0x54>)
 80086c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086c2:	f000 fed1 	bl	8009468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f80e 	bl	80086e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086cc:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <prvCheckTasksWaitingTermination+0x54>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e1      	bne.n	8008698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000b4c 	.word	0x20000b4c
 80086e0:	20000b78 	.word	0x20000b78
 80086e4:	20000b60 	.word	0x20000b60

080086e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d108      	bne.n	800870c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 f860 	bl	80097c4 <vPortFree>
				vPortFree( pxTCB );
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f85d 	bl	80097c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800870a:	e017      	b.n	800873c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008712:	2b01      	cmp	r3, #1
 8008714:	d103      	bne.n	800871e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 f854 	bl	80097c4 <vPortFree>
	}
 800871c:	e00e      	b.n	800873c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008724:	2b02      	cmp	r3, #2
 8008726:	d009      	beq.n	800873c <prvDeleteTCB+0x54>
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	e7fe      	b.n	800873a <prvDeleteTCB+0x52>
	}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800874a:	4b0c      	ldr	r3, [pc, #48]	; (800877c <prvResetNextTaskUnblockTime+0x38>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008754:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <prvResetNextTaskUnblockTime+0x3c>)
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
 800875a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800875c:	e008      	b.n	8008770 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <prvResetNextTaskUnblockTime+0x38>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a04      	ldr	r2, [pc, #16]	; (8008780 <prvResetNextTaskUnblockTime+0x3c>)
 800876e:	6013      	str	r3, [r2, #0]
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	20000b30 	.word	0x20000b30
 8008780:	20000b98 	.word	0x20000b98

08008784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800878a:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <xTaskGetSchedulerState+0x34>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008792:	2301      	movs	r3, #1
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	e008      	b.n	80087aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008798:	4b08      	ldr	r3, [pc, #32]	; (80087bc <xTaskGetSchedulerState+0x38>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087a0:	2302      	movs	r3, #2
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	e001      	b.n	80087aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087a6:	2300      	movs	r3, #0
 80087a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087aa:	687b      	ldr	r3, [r7, #4]
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000b84 	.word	0x20000b84
 80087bc:	20000ba0 	.word	0x20000ba0

080087c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d051      	beq.n	800887a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087da:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <xTaskPriorityInherit+0xc4>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d241      	bcs.n	8008868 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db06      	blt.n	80087fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ec:	4b25      	ldr	r3, [pc, #148]	; (8008884 <xTaskPriorityInherit+0xc4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6959      	ldr	r1, [r3, #20]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <xTaskPriorityInherit+0xc8>)
 800880c:	4413      	add	r3, r2
 800880e:	4299      	cmp	r1, r3
 8008810:	d122      	bne.n	8008858 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3304      	adds	r3, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe f994 	bl	8006b44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800881c:	4b19      	ldr	r3, [pc, #100]	; (8008884 <xTaskPriorityInherit+0xc4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882a:	4b18      	ldr	r3, [pc, #96]	; (800888c <xTaskPriorityInherit+0xcc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d903      	bls.n	800883a <xTaskPriorityInherit+0x7a>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	4a15      	ldr	r2, [pc, #84]	; (800888c <xTaskPriorityInherit+0xcc>)
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4a10      	ldr	r2, [pc, #64]	; (8008888 <xTaskPriorityInherit+0xc8>)
 8008848:	441a      	add	r2, r3
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	3304      	adds	r3, #4
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f7fe f91a 	bl	8006a8a <vListInsertEnd>
 8008856:	e004      	b.n	8008862 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <xTaskPriorityInherit+0xc4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008862:	2301      	movs	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	e008      	b.n	800887a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <xTaskPriorityInherit+0xc4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	429a      	cmp	r2, r3
 8008874:	d201      	bcs.n	800887a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800887a:	68fb      	ldr	r3, [r7, #12]
	}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200006a4 	.word	0x200006a4
 8008888:	200006a8 	.word	0x200006a8
 800888c:	20000b80 	.word	0x20000b80

08008890 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d054      	beq.n	8008950 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088a6:	4b2d      	ldr	r3, [pc, #180]	; (800895c <xTaskPriorityDisinherit+0xcc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d009      	beq.n	80088c4 <xTaskPriorityDisinherit+0x34>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e7fe      	b.n	80088c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <xTaskPriorityDisinherit+0x50>
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	e7fe      	b.n	80088de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	1e5a      	subs	r2, r3, #1
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d02c      	beq.n	8008950 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d128      	bne.n	8008950 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe f91e 	bl	8006b44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <xTaskPriorityDisinherit+0xd0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d903      	bls.n	8008930 <xTaskPriorityDisinherit+0xa0>
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <xTaskPriorityDisinherit+0xd0>)
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4a09      	ldr	r2, [pc, #36]	; (8008964 <xTaskPriorityDisinherit+0xd4>)
 800893e:	441a      	add	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3304      	adds	r3, #4
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f7fe f89f 	bl	8006a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008950:	697b      	ldr	r3, [r7, #20]
	}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200006a4 	.word	0x200006a4
 8008960:	20000b80 	.word	0x20000b80
 8008964:	200006a8 	.word	0x200006a8

08008968 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008976:	2301      	movs	r3, #1
 8008978:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d068      	beq.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008984:	2b00      	cmp	r3, #0
 8008986:	d109      	bne.n	800899c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e7fe      	b.n	800899a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d902      	bls.n	80089ac <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e002      	b.n	80089b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d04a      	beq.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d145      	bne.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089c6:	4b25      	ldr	r3, [pc, #148]	; (8008a5c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d109      	bne.n	80089e4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60bb      	str	r3, [r7, #8]
 80089e2:	e7fe      	b.n	80089e2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	db04      	blt.n	8008a02 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	6959      	ldr	r1, [r3, #20]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008a12:	4413      	add	r3, r2
 8008a14:	4299      	cmp	r1, r3
 8008a16:	d11c      	bne.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe f891 	bl	8006b44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d903      	bls.n	8008a36 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4a07      	ldr	r2, [pc, #28]	; (8008a60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008a44:	441a      	add	r2, r3
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7fe f81c 	bl	8006a8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a52:	bf00      	nop
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	200006a4 	.word	0x200006a4
 8008a60:	200006a8 	.word	0x200006a8
 8008a64:	20000b80 	.word	0x20000b80

08008a68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d004      	beq.n	8008a7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008a7e:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a80:	681b      	ldr	r3, [r3, #0]
	}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	200006a4 	.word	0x200006a4

08008a90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a9a:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe f84c 	bl	8006b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d10a      	bne.n	8008aca <prvAddCurrentTaskToDelayedList+0x3a>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aba:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4819      	ldr	r0, [pc, #100]	; (8008b28 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ac4:	f7fd ffe1 	bl	8006a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ac8:	e026      	b.n	8008b18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4413      	add	r3, r2
 8008ad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ad2:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d209      	bcs.n	8008af6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fd ffef 	bl	8006ad2 <vListInsert>
}
 8008af4:	e010      	b.n	8008b18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fd ffe5 	bl	8006ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b08:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d202      	bcs.n	8008b18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b12:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	6013      	str	r3, [r2, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000b7c 	.word	0x20000b7c
 8008b24:	200006a4 	.word	0x200006a4
 8008b28:	20000b64 	.word	0x20000b64
 8008b2c:	20000b34 	.word	0x20000b34
 8008b30:	20000b30 	.word	0x20000b30
 8008b34:	20000b98 	.word	0x20000b98

08008b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b42:	f000 faff 	bl	8009144 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b46:	4b1c      	ldr	r3, [pc, #112]	; (8008bb8 <xTimerCreateTimerTask+0x80>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d021      	beq.n	8008b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b56:	1d3a      	adds	r2, r7, #4
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	f107 030c 	add.w	r3, r7, #12
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fd ff4b 	bl	80069fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	9202      	str	r2, [sp, #8]
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	2302      	movs	r3, #2
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	460a      	mov	r2, r1
 8008b78:	4910      	ldr	r1, [pc, #64]	; (8008bbc <xTimerCreateTimerTask+0x84>)
 8008b7a:	4811      	ldr	r0, [pc, #68]	; (8008bc0 <xTimerCreateTimerTask+0x88>)
 8008b7c:	f7fe fffa 	bl	8007b74 <xTaskCreateStatic>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <xTimerCreateTimerTask+0x8c>)
 8008b84:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <xTimerCreateTimerTask+0x8c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <xTimerCreateTimerTask+0x74>
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	613b      	str	r3, [r7, #16]
 8008baa:	e7fe      	b.n	8008baa <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008bac:	697b      	ldr	r3, [r7, #20]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000bd4 	.word	0x20000bd4
 8008bbc:	0800b05c 	.word	0x0800b05c
 8008bc0:	08008cf9 	.word	0x08008cf9
 8008bc4:	20000bd8 	.word	0x20000bd8

08008bc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d109      	bne.n	8008bf4 <xTimerGenericCommand+0x2c>
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	623b      	str	r3, [r7, #32]
 8008bf2:	e7fe      	b.n	8008bf2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bf4:	4b19      	ldr	r3, [pc, #100]	; (8008c5c <xTimerGenericCommand+0x94>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d02a      	beq.n	8008c52 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	dc18      	bgt.n	8008c40 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c0e:	f7ff fdb9 	bl	8008784 <xTaskGetSchedulerState>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d109      	bne.n	8008c2c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c18:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <xTimerGenericCommand+0x94>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	f107 0110 	add.w	r1, r7, #16
 8008c20:	2300      	movs	r3, #0
 8008c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c24:	f7fe f95c 	bl	8006ee0 <xQueueGenericSend>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24
 8008c2a:	e012      	b.n	8008c52 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <xTimerGenericCommand+0x94>)
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	f107 0110 	add.w	r1, r7, #16
 8008c34:	2300      	movs	r3, #0
 8008c36:	2200      	movs	r2, #0
 8008c38:	f7fe f952 	bl	8006ee0 <xQueueGenericSend>
 8008c3c:	6278      	str	r0, [r7, #36]	; 0x24
 8008c3e:	e008      	b.n	8008c52 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c40:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <xTimerGenericCommand+0x94>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	f107 0110 	add.w	r1, r7, #16
 8008c48:	2300      	movs	r3, #0
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	f7fe fa42 	bl	80070d4 <xQueueGenericSendFromISR>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3728      	adds	r7, #40	; 0x28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000bd4 	.word	0x20000bd4

08008c60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af02      	add	r7, sp, #8
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6a:	4b22      	ldr	r3, [pc, #136]	; (8008cf4 <prvProcessExpiredTimer+0x94>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fd ff63 	bl	8006b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d021      	beq.n	8008cd0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	18d1      	adds	r1, r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	6978      	ldr	r0, [r7, #20]
 8008c9a:	f000 f8d1 	bl	8008e40 <prvInsertTimerInActiveList>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01e      	beq.n	8008ce2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	2100      	movs	r1, #0
 8008cae:	6978      	ldr	r0, [r7, #20]
 8008cb0:	f7ff ff8a 	bl	8008bc8 <xTimerGenericCommand>
 8008cb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d112      	bne.n	8008ce2 <prvProcessExpiredTimer+0x82>
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	e7fe      	b.n	8008cce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd6:	f023 0301 	bic.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	4798      	blx	r3
}
 8008cea:	bf00      	nop
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000bcc 	.word	0x20000bcc

08008cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d00:	f107 0308 	add.w	r3, r7, #8
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f857 	bl	8008db8 <prvGetNextExpireTime>
 8008d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f803 	bl	8008d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d16:	f000 f8d5 	bl	8008ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d1a:	e7f1      	b.n	8008d00 <prvTimerTask+0x8>

08008d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d26:	f7ff f95b 	bl	8007fe0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d2a:	f107 0308 	add.w	r3, r7, #8
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f866 	bl	8008e00 <prvSampleTimeNow>
 8008d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d130      	bne.n	8008d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <prvProcessTimerOrBlockTask+0x3c>
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d806      	bhi.n	8008d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d4a:	f7ff f957 	bl	8007ffc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ff85 	bl	8008c60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d56:	e024      	b.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d008      	beq.n	8008d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <prvProcessTimerOrBlockTask+0x90>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <prvProcessTimerOrBlockTask+0x50>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e000      	b.n	8008d6e <prvProcessTimerOrBlockTask+0x52>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d70:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <prvProcessTimerOrBlockTask+0x94>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7fe fec5 	bl	8007b0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d82:	f7ff f93b 	bl	8007ffc <xTaskResumeAll>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d8c:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <prvProcessTimerOrBlockTask+0x98>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	f3bf 8f6f 	isb	sy
}
 8008d9c:	e001      	b.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d9e:	f7ff f92d 	bl	8007ffc <xTaskResumeAll>
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000bd0 	.word	0x20000bd0
 8008db0:	20000bd4 	.word	0x20000bd4
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <prvGetNextExpireTime+0x44>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <prvGetNextExpireTime+0x16>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	e000      	b.n	8008dd0 <prvGetNextExpireTime+0x18>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d105      	bne.n	8008de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ddc:	4b07      	ldr	r3, [pc, #28]	; (8008dfc <prvGetNextExpireTime+0x44>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	e001      	b.n	8008dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000bcc 	.word	0x20000bcc

08008e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e08:	f7ff f994 	bl	8008134 <xTaskGetTickCount>
 8008e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <prvSampleTimeNow+0x3c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d205      	bcs.n	8008e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e18:	f000 f930 	bl	800907c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e2a:	4a04      	ldr	r2, [pc, #16]	; (8008e3c <prvSampleTimeNow+0x3c>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e30:	68fb      	ldr	r3, [r7, #12]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000bdc 	.word	0x20000bdc

08008e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d812      	bhi.n	8008e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	1ad2      	subs	r2, r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e01b      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <prvInsertTimerInActiveList+0x7c>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7fd fe24 	bl	8006ad2 <vListInsert>
 8008e8a:	e012      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d206      	bcs.n	8008ea2 <prvInsertTimerInActiveList+0x62>
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	e007      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <prvInsertTimerInActiveList+0x80>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4610      	mov	r0, r2
 8008eae:	f7fd fe10 	bl	8006ad2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008eb2:	697b      	ldr	r3, [r7, #20]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000bd0 	.word	0x20000bd0
 8008ec0:	20000bcc 	.word	0x20000bcc

08008ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08e      	sub	sp, #56	; 0x38
 8008ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eca:	e0c6      	b.n	800905a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da17      	bge.n	8008f02 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d109      	bne.n	8008ef2 <prvProcessReceivedCommands+0x2e>
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e7fe      	b.n	8008ef0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef8:	6850      	ldr	r0, [r2, #4]
 8008efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008efc:	6892      	ldr	r2, [r2, #8]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f2c0 80a7 	blt.w	8009058 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fd fe12 	bl	8006b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f20:	463b      	mov	r3, r7
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff ff6c 	bl	8008e00 <prvSampleTimeNow>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b09      	cmp	r3, #9
 8008f2e:	f200 8094 	bhi.w	800905a <prvProcessReceivedCommands+0x196>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <prvProcessReceivedCommands+0x74>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f61 	.word	0x08008f61
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f61 	.word	0x08008f61
 8008f44:	08008fd3 	.word	0x08008fd3
 8008f48:	08008fe7 	.word	0x08008fe7
 8008f4c:	0800902f 	.word	0x0800902f
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008f61 	.word	0x08008f61
 8008f58:	08008fd3 	.word	0x08008fd3
 8008f5c:	08008fe7 	.word	0x08008fe7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	18d1      	adds	r1, r2, r3
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f80:	f7ff ff5e 	bl	8008e40 <prvInsertTimerInActiveList>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d067      	beq.n	800905a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d05c      	beq.n	800905a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	441a      	add	r2, r3
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	2300      	movs	r3, #0
 8008fae:	2100      	movs	r1, #0
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb2:	f7ff fe09 	bl	8008bc8 <xTimerGenericCommand>
 8008fb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d14d      	bne.n	800905a <prvProcessReceivedCommands+0x196>
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	61bb      	str	r3, [r7, #24]
 8008fd0:	e7fe      	b.n	8008fd0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008fe4:	e039      	b.n	800905a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fec:	f043 0301 	orr.w	r3, r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <prvProcessReceivedCommands+0x156>
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e7fe      	b.n	8009018 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	18d1      	adds	r1, r2, r3
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009028:	f7ff ff0a 	bl	8008e40 <prvInsertTimerInActiveList>
					break;
 800902c:	e015      	b.n	800905a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009034:	f003 0302 	and.w	r3, r3, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800903c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800903e:	f000 fbc1 	bl	80097c4 <vPortFree>
 8009042:	e00a      	b.n	800905a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009056:	e000      	b.n	800905a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <prvProcessReceivedCommands+0x1b4>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1d39      	adds	r1, r7, #4
 8009060:	2200      	movs	r2, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe f954 	bl	8007310 <xQueueReceive>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	f47f af2e 	bne.w	8008ecc <prvProcessReceivedCommands+0x8>
	}
}
 8009070:	bf00      	nop
 8009072:	3730      	adds	r7, #48	; 0x30
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20000bd4 	.word	0x20000bd4

0800907c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009082:	e047      	b.n	8009114 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009084:	4b2d      	ldr	r3, [pc, #180]	; (800913c <prvSwitchTimerLists+0xc0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908e:	4b2b      	ldr	r3, [pc, #172]	; (800913c <prvSwitchTimerLists+0xc0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3304      	adds	r3, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f7fd fd51 	bl	8006b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d02d      	beq.n	8009114 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4413      	add	r3, r2
 80090c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d90e      	bls.n	80090e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090d6:	4b19      	ldr	r3, [pc, #100]	; (800913c <prvSwitchTimerLists+0xc0>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3304      	adds	r3, #4
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f7fd fcf6 	bl	8006ad2 <vListInsert>
 80090e6:	e015      	b.n	8009114 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090e8:	2300      	movs	r3, #0
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	2100      	movs	r1, #0
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fd68 	bl	8008bc8 <xTimerGenericCommand>
 80090f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d109      	bne.n	8009114 <prvSwitchTimerLists+0x98>
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	e7fe      	b.n	8009112 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <prvSwitchTimerLists+0xc0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1b2      	bne.n	8009084 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <prvSwitchTimerLists+0xc0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009124:	4b06      	ldr	r3, [pc, #24]	; (8009140 <prvSwitchTimerLists+0xc4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a04      	ldr	r2, [pc, #16]	; (800913c <prvSwitchTimerLists+0xc0>)
 800912a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800912c:	4a04      	ldr	r2, [pc, #16]	; (8009140 <prvSwitchTimerLists+0xc4>)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	6013      	str	r3, [r2, #0]
}
 8009132:	bf00      	nop
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000bcc 	.word	0x20000bcc
 8009140:	20000bd0 	.word	0x20000bd0

08009144 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800914a:	f000 f95f 	bl	800940c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800914e:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <prvCheckForValidListAndQueue+0x60>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d120      	bne.n	8009198 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009156:	4814      	ldr	r0, [pc, #80]	; (80091a8 <prvCheckForValidListAndQueue+0x64>)
 8009158:	f7fd fc6a 	bl	8006a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800915c:	4813      	ldr	r0, [pc, #76]	; (80091ac <prvCheckForValidListAndQueue+0x68>)
 800915e:	f7fd fc67 	bl	8006a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009162:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <prvCheckForValidListAndQueue+0x6c>)
 8009164:	4a10      	ldr	r2, [pc, #64]	; (80091a8 <prvCheckForValidListAndQueue+0x64>)
 8009166:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <prvCheckForValidListAndQueue+0x70>)
 800916a:	4a10      	ldr	r2, [pc, #64]	; (80091ac <prvCheckForValidListAndQueue+0x68>)
 800916c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800916e:	2300      	movs	r3, #0
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <prvCheckForValidListAndQueue+0x74>)
 8009174:	4a11      	ldr	r2, [pc, #68]	; (80091bc <prvCheckForValidListAndQueue+0x78>)
 8009176:	2110      	movs	r1, #16
 8009178:	200a      	movs	r0, #10
 800917a:	f7fd fd75 	bl	8006c68 <xQueueGenericCreateStatic>
 800917e:	4602      	mov	r2, r0
 8009180:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <prvCheckForValidListAndQueue+0x60>)
 8009182:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009184:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <prvCheckForValidListAndQueue+0x60>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <prvCheckForValidListAndQueue+0x60>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	490b      	ldr	r1, [pc, #44]	; (80091c0 <prvCheckForValidListAndQueue+0x7c>)
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe fc68 	bl	8007a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009198:	f000 f966 	bl	8009468 <vPortExitCritical>
}
 800919c:	bf00      	nop
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000bd4 	.word	0x20000bd4
 80091a8:	20000ba4 	.word	0x20000ba4
 80091ac:	20000bb8 	.word	0x20000bb8
 80091b0:	20000bcc 	.word	0x20000bcc
 80091b4:	20000bd0 	.word	0x20000bd0
 80091b8:	20000c80 	.word	0x20000c80
 80091bc:	20000be0 	.word	0x20000be0
 80091c0:	0800b064 	.word	0x0800b064

080091c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3b04      	subs	r3, #4
 80091d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3b04      	subs	r3, #4
 80091e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f023 0201 	bic.w	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3b04      	subs	r3, #4
 80091f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091f4:	4a0c      	ldr	r2, [pc, #48]	; (8009228 <pxPortInitialiseStack+0x64>)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3b14      	subs	r3, #20
 80091fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b04      	subs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f06f 0202 	mvn.w	r2, #2
 8009212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3b20      	subs	r3, #32
 8009218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800921a:	68fb      	ldr	r3, [r7, #12]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	0800922d 	.word	0x0800922d

0800922c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <prvTaskExitError+0x50>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d009      	beq.n	8009254 <prvTaskExitError+0x28>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e7fe      	b.n	8009252 <prvTaskExitError+0x26>
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009266:	bf00      	nop
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0fc      	beq.n	8009268 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20000030 	.word	0x20000030

08009280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <pxCurrentTCBConst2>)
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	6808      	ldr	r0, [r1, #0]
 8009286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	f380 8809 	msr	PSP, r0
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f04f 0000 	mov.w	r0, #0
 8009296:	f380 8811 	msr	BASEPRI, r0
 800929a:	4770      	bx	lr
 800929c:	f3af 8000 	nop.w

080092a0 <pxCurrentTCBConst2>:
 80092a0:	200006a4 	.word	0x200006a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop

080092a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092a8:	4808      	ldr	r0, [pc, #32]	; (80092cc <prvPortStartFirstTask+0x24>)
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	6800      	ldr	r0, [r0, #0]
 80092ae:	f380 8808 	msr	MSP, r0
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8814 	msr	CONTROL, r0
 80092ba:	b662      	cpsie	i
 80092bc:	b661      	cpsie	f
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	df00      	svc	0
 80092c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ca:	bf00      	nop
 80092cc:	e000ed08 	.word	0xe000ed08

080092d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092d6:	4b44      	ldr	r3, [pc, #272]	; (80093e8 <xPortStartScheduler+0x118>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a44      	ldr	r2, [pc, #272]	; (80093ec <xPortStartScheduler+0x11c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d109      	bne.n	80092f4 <xPortStartScheduler+0x24>
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	e7fe      	b.n	80092f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092f4:	4b3c      	ldr	r3, [pc, #240]	; (80093e8 <xPortStartScheduler+0x118>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a3d      	ldr	r2, [pc, #244]	; (80093f0 <xPortStartScheduler+0x120>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d109      	bne.n	8009312 <xPortStartScheduler+0x42>
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e7fe      	b.n	8009310 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009312:	4b38      	ldr	r3, [pc, #224]	; (80093f4 <xPortStartScheduler+0x124>)
 8009314:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	22ff      	movs	r2, #255	; 0xff
 8009322:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009334:	b2da      	uxtb	r2, r3
 8009336:	4b30      	ldr	r3, [pc, #192]	; (80093f8 <xPortStartScheduler+0x128>)
 8009338:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800933a:	4b30      	ldr	r3, [pc, #192]	; (80093fc <xPortStartScheduler+0x12c>)
 800933c:	2207      	movs	r2, #7
 800933e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009340:	e009      	b.n	8009356 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009342:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <xPortStartScheduler+0x12c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3b01      	subs	r3, #1
 8009348:	4a2c      	ldr	r2, [pc, #176]	; (80093fc <xPortStartScheduler+0x12c>)
 800934a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935e:	2b80      	cmp	r3, #128	; 0x80
 8009360:	d0ef      	beq.n	8009342 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009362:	4b26      	ldr	r3, [pc, #152]	; (80093fc <xPortStartScheduler+0x12c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f1c3 0307 	rsb	r3, r3, #7
 800936a:	2b04      	cmp	r3, #4
 800936c:	d009      	beq.n	8009382 <xPortStartScheduler+0xb2>
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60bb      	str	r3, [r7, #8]
 8009380:	e7fe      	b.n	8009380 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009382:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <xPortStartScheduler+0x12c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	021b      	lsls	r3, r3, #8
 8009388:	4a1c      	ldr	r2, [pc, #112]	; (80093fc <xPortStartScheduler+0x12c>)
 800938a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <xPortStartScheduler+0x12c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009394:	4a19      	ldr	r2, [pc, #100]	; (80093fc <xPortStartScheduler+0x12c>)
 8009396:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	b2da      	uxtb	r2, r3
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093a0:	4b17      	ldr	r3, [pc, #92]	; (8009400 <xPortStartScheduler+0x130>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <xPortStartScheduler+0x130>)
 80093a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093ac:	4b14      	ldr	r3, [pc, #80]	; (8009400 <xPortStartScheduler+0x130>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a13      	ldr	r2, [pc, #76]	; (8009400 <xPortStartScheduler+0x130>)
 80093b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093b8:	f000 f8d6 	bl	8009568 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <xPortStartScheduler+0x134>)
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093c2:	f000 f8f5 	bl	80095b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <xPortStartScheduler+0x138>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a0f      	ldr	r2, [pc, #60]	; (8009408 <xPortStartScheduler+0x138>)
 80093cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093d2:	f7ff ff69 	bl	80092a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093d6:	f7fe ff75 	bl	80082c4 <vTaskSwitchContext>
	prvTaskExitError();
 80093da:	f7ff ff27 	bl	800922c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	e000ed00 	.word	0xe000ed00
 80093ec:	410fc271 	.word	0x410fc271
 80093f0:	410fc270 	.word	0x410fc270
 80093f4:	e000e400 	.word	0xe000e400
 80093f8:	20000cd0 	.word	0x20000cd0
 80093fc:	20000cd4 	.word	0x20000cd4
 8009400:	e000ed20 	.word	0xe000ed20
 8009404:	20000030 	.word	0x20000030
 8009408:	e000ef34 	.word	0xe000ef34

0800940c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <vPortEnterCritical+0x54>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3301      	adds	r3, #1
 800942a:	4a0d      	ldr	r2, [pc, #52]	; (8009460 <vPortEnterCritical+0x54>)
 800942c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <vPortEnterCritical+0x54>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d10e      	bne.n	8009454 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009436:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <vPortEnterCritical+0x58>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <vPortEnterCritical+0x48>
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	e7fe      	b.n	8009452 <vPortEnterCritical+0x46>
	}
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000030 	.word	0x20000030
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <vPortExitCritical+0x4c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <vPortExitCritical+0x22>
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	607b      	str	r3, [r7, #4]
 8009488:	e7fe      	b.n	8009488 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <vPortExitCritical+0x4c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3b01      	subs	r3, #1
 8009490:	4a08      	ldr	r2, [pc, #32]	; (80094b4 <vPortExitCritical+0x4c>)
 8009492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <vPortExitCritical+0x4c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <vPortExitCritical+0x3e>
 800949c:	2300      	movs	r3, #0
 800949e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000030 	.word	0x20000030
	...

080094c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094c0:	f3ef 8009 	mrs	r0, PSP
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	4b15      	ldr	r3, [pc, #84]	; (8009520 <pxCurrentTCBConst>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	f01e 0f10 	tst.w	lr, #16
 80094d0:	bf08      	it	eq
 80094d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	6010      	str	r0, [r2, #0]
 80094dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094e4:	f380 8811 	msr	BASEPRI, r0
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f7fe fee8 	bl	80082c4 <vTaskSwitchContext>
 80094f4:	f04f 0000 	mov.w	r0, #0
 80094f8:	f380 8811 	msr	BASEPRI, r0
 80094fc:	bc09      	pop	{r0, r3}
 80094fe:	6819      	ldr	r1, [r3, #0]
 8009500:	6808      	ldr	r0, [r1, #0]
 8009502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009506:	f01e 0f10 	tst.w	lr, #16
 800950a:	bf08      	it	eq
 800950c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009510:	f380 8809 	msr	PSP, r0
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	f3af 8000 	nop.w

08009520 <pxCurrentTCBConst>:
 8009520:	200006a4 	.word	0x200006a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop

08009528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009540:	f7fe fe08 	bl	8008154 <xTaskIncrementTick>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800954a:	4b06      	ldr	r3, [pc, #24]	; (8009564 <xPortSysTickHandler+0x3c>)
 800954c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	2300      	movs	r3, #0
 8009554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	e000ed04 	.word	0xe000ed04

08009568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <vPortSetupTimerInterrupt+0x34>)
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009572:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <vPortSetupTimerInterrupt+0x38>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <vPortSetupTimerInterrupt+0x3c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <vPortSetupTimerInterrupt+0x40>)
 800957e:	fba2 2303 	umull	r2, r3, r2, r3
 8009582:	099b      	lsrs	r3, r3, #6
 8009584:	4a09      	ldr	r2, [pc, #36]	; (80095ac <vPortSetupTimerInterrupt+0x44>)
 8009586:	3b01      	subs	r3, #1
 8009588:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800958a:	4b04      	ldr	r3, [pc, #16]	; (800959c <vPortSetupTimerInterrupt+0x34>)
 800958c:	2207      	movs	r2, #7
 800958e:	601a      	str	r2, [r3, #0]
}
 8009590:	bf00      	nop
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	e000e010 	.word	0xe000e010
 80095a0:	e000e018 	.word	0xe000e018
 80095a4:	20000000 	.word	0x20000000
 80095a8:	10624dd3 	.word	0x10624dd3
 80095ac:	e000e014 	.word	0xe000e014

080095b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095c0 <vPortEnableVFP+0x10>
 80095b4:	6801      	ldr	r1, [r0, #0]
 80095b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095ba:	6001      	str	r1, [r0, #0]
 80095bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095be:	bf00      	nop
 80095c0:	e000ed88 	.word	0xe000ed88

080095c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ca:	f3ef 8305 	mrs	r3, IPSR
 80095ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b0f      	cmp	r3, #15
 80095d4:	d913      	bls.n	80095fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095d6:	4a16      	ldr	r2, [pc, #88]	; (8009630 <vPortValidateInterruptPriority+0x6c>)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <vPortValidateInterruptPriority+0x70>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	7afa      	ldrb	r2, [r7, #11]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d209      	bcs.n	80095fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	e7fe      	b.n	80095fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095fe:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <vPortValidateInterruptPriority+0x74>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <vPortValidateInterruptPriority+0x78>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d909      	bls.n	8009622 <vPortValidateInterruptPriority+0x5e>
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	e7fe      	b.n	8009620 <vPortValidateInterruptPriority+0x5c>
	}
 8009622:	bf00      	nop
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	e000e3f0 	.word	0xe000e3f0
 8009634:	20000cd0 	.word	0x20000cd0
 8009638:	e000ed0c 	.word	0xe000ed0c
 800963c:	20000cd4 	.word	0x20000cd4

08009640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08a      	sub	sp, #40	; 0x28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800964c:	f7fe fcc8 	bl	8007fe0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009650:	4b57      	ldr	r3, [pc, #348]	; (80097b0 <pvPortMalloc+0x170>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009658:	f000 f90c 	bl	8009874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800965c:	4b55      	ldr	r3, [pc, #340]	; (80097b4 <pvPortMalloc+0x174>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4013      	ands	r3, r2
 8009664:	2b00      	cmp	r3, #0
 8009666:	f040 808c 	bne.w	8009782 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01c      	beq.n	80096aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009670:	2208      	movs	r2, #8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4413      	add	r3, r2
 8009676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	2b00      	cmp	r3, #0
 8009680:	d013      	beq.n	80096aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f023 0307 	bic.w	r3, r3, #7
 8009688:	3308      	adds	r3, #8
 800968a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	2b00      	cmp	r3, #0
 8009694:	d009      	beq.n	80096aa <pvPortMalloc+0x6a>
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e7fe      	b.n	80096a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d068      	beq.n	8009782 <pvPortMalloc+0x142>
 80096b0:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <pvPortMalloc+0x178>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d863      	bhi.n	8009782 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ba:	4b40      	ldr	r3, [pc, #256]	; (80097bc <pvPortMalloc+0x17c>)
 80096bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096be:	4b3f      	ldr	r3, [pc, #252]	; (80097bc <pvPortMalloc+0x17c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096c4:	e004      	b.n	80096d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d903      	bls.n	80096e2 <pvPortMalloc+0xa2>
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f1      	bne.n	80096c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096e2:	4b33      	ldr	r3, [pc, #204]	; (80097b0 <pvPortMalloc+0x170>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d04a      	beq.n	8009782 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2208      	movs	r2, #8
 80096f2:	4413      	add	r3, r2
 80096f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	1ad2      	subs	r2, r2, r3
 8009706:	2308      	movs	r3, #8
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	429a      	cmp	r2, r3
 800970c:	d91e      	bls.n	800974c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800970e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4413      	add	r3, r2
 8009714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <pvPortMalloc+0xf4>
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	e7fe      	b.n	8009732 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	1ad2      	subs	r2, r2, r3
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009746:	69b8      	ldr	r0, [r7, #24]
 8009748:	f000 f8f6 	bl	8009938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800974c:	4b1a      	ldr	r3, [pc, #104]	; (80097b8 <pvPortMalloc+0x178>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <pvPortMalloc+0x178>)
 8009758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800975a:	4b17      	ldr	r3, [pc, #92]	; (80097b8 <pvPortMalloc+0x178>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <pvPortMalloc+0x180>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d203      	bcs.n	800976e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009766:	4b14      	ldr	r3, [pc, #80]	; (80097b8 <pvPortMalloc+0x178>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <pvPortMalloc+0x180>)
 800976c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <pvPortMalloc+0x174>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	431a      	orrs	r2, r3
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009782:	f7fe fc3b 	bl	8007ffc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	2b00      	cmp	r3, #0
 800978e:	d009      	beq.n	80097a4 <pvPortMalloc+0x164>
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	e7fe      	b.n	80097a2 <pvPortMalloc+0x162>
	return pvReturn;
 80097a4:	69fb      	ldr	r3, [r7, #28]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3728      	adds	r7, #40	; 0x28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20002838 	.word	0x20002838
 80097b4:	20002844 	.word	0x20002844
 80097b8:	2000283c 	.word	0x2000283c
 80097bc:	20002830 	.word	0x20002830
 80097c0:	20002840 	.word	0x20002840

080097c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d046      	beq.n	8009864 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097d6:	2308      	movs	r3, #8
 80097d8:	425b      	negs	r3, r3
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4413      	add	r3, r2
 80097de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	4b20      	ldr	r3, [pc, #128]	; (800986c <vPortFree+0xa8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <vPortFree+0x42>
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e7fe      	b.n	8009804 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <vPortFree+0x5e>
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60bb      	str	r3, [r7, #8]
 8009820:	e7fe      	b.n	8009820 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	4b11      	ldr	r3, [pc, #68]	; (800986c <vPortFree+0xa8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4013      	ands	r3, r2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d019      	beq.n	8009864 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d115      	bne.n	8009864 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b0b      	ldr	r3, [pc, #44]	; (800986c <vPortFree+0xa8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	43db      	mvns	r3, r3
 8009842:	401a      	ands	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009848:	f7fe fbca 	bl	8007fe0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <vPortFree+0xac>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4413      	add	r3, r2
 8009856:	4a06      	ldr	r2, [pc, #24]	; (8009870 <vPortFree+0xac>)
 8009858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800985a:	6938      	ldr	r0, [r7, #16]
 800985c:	f000 f86c 	bl	8009938 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009860:	f7fe fbcc 	bl	8007ffc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009864:	bf00      	nop
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20002844 	.word	0x20002844
 8009870:	2000283c 	.word	0x2000283c

08009874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800987a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800987e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009880:	4b27      	ldr	r3, [pc, #156]	; (8009920 <prvHeapInit+0xac>)
 8009882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00c      	beq.n	80098a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3307      	adds	r3, #7
 8009892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0307 	bic.w	r3, r3, #7
 800989a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	4a1f      	ldr	r2, [pc, #124]	; (8009920 <prvHeapInit+0xac>)
 80098a4:	4413      	add	r3, r2
 80098a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098ac:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <prvHeapInit+0xb0>)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <prvHeapInit+0xb0>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4413      	add	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098c0:	2208      	movs	r2, #8
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0307 	bic.w	r3, r3, #7
 80098ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a15      	ldr	r2, [pc, #84]	; (8009928 <prvHeapInit+0xb4>)
 80098d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098d6:	4b14      	ldr	r3, [pc, #80]	; (8009928 <prvHeapInit+0xb4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098de:	4b12      	ldr	r3, [pc, #72]	; (8009928 <prvHeapInit+0xb4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098f4:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvHeapInit+0xb4>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	4a0a      	ldr	r2, [pc, #40]	; (800992c <prvHeapInit+0xb8>)
 8009902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	4a09      	ldr	r2, [pc, #36]	; (8009930 <prvHeapInit+0xbc>)
 800990a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800990c:	4b09      	ldr	r3, [pc, #36]	; (8009934 <prvHeapInit+0xc0>)
 800990e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009912:	601a      	str	r2, [r3, #0]
}
 8009914:	bf00      	nop
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	20000cd8 	.word	0x20000cd8
 8009924:	20002830 	.word	0x20002830
 8009928:	20002838 	.word	0x20002838
 800992c:	20002840 	.word	0x20002840
 8009930:	2000283c 	.word	0x2000283c
 8009934:	20002844 	.word	0x20002844

08009938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009940:	4b28      	ldr	r3, [pc, #160]	; (80099e4 <prvInsertBlockIntoFreeList+0xac>)
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e002      	b.n	800994c <prvInsertBlockIntoFreeList+0x14>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	429a      	cmp	r2, r3
 8009954:	d8f7      	bhi.n	8009946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d108      	bne.n	800997a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	441a      	add	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	441a      	add	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d118      	bne.n	80099c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d00d      	beq.n	80099b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	441a      	add	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	e008      	b.n	80099c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <prvInsertBlockIntoFreeList+0xb0>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e003      	b.n	80099c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d002      	beq.n	80099d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d6:	bf00      	nop
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20002830 	.word	0x20002830
 80099e8:	20002838 	.word	0x20002838

080099ec <__errno>:
 80099ec:	4b01      	ldr	r3, [pc, #4]	; (80099f4 <__errno+0x8>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20000034 	.word	0x20000034

080099f8 <__libc_init_array>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4e0d      	ldr	r6, [pc, #52]	; (8009a30 <__libc_init_array+0x38>)
 80099fc:	4c0d      	ldr	r4, [pc, #52]	; (8009a34 <__libc_init_array+0x3c>)
 80099fe:	1ba4      	subs	r4, r4, r6
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	2500      	movs	r5, #0
 8009a04:	42a5      	cmp	r5, r4
 8009a06:	d109      	bne.n	8009a1c <__libc_init_array+0x24>
 8009a08:	4e0b      	ldr	r6, [pc, #44]	; (8009a38 <__libc_init_array+0x40>)
 8009a0a:	4c0c      	ldr	r4, [pc, #48]	; (8009a3c <__libc_init_array+0x44>)
 8009a0c:	f001 f824 	bl	800aa58 <_init>
 8009a10:	1ba4      	subs	r4, r4, r6
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	2500      	movs	r5, #0
 8009a16:	42a5      	cmp	r5, r4
 8009a18:	d105      	bne.n	8009a26 <__libc_init_array+0x2e>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a20:	4798      	blx	r3
 8009a22:	3501      	adds	r5, #1
 8009a24:	e7ee      	b.n	8009a04 <__libc_init_array+0xc>
 8009a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a2a:	4798      	blx	r3
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	e7f2      	b.n	8009a16 <__libc_init_array+0x1e>
 8009a30:	0800b178 	.word	0x0800b178
 8009a34:	0800b178 	.word	0x0800b178
 8009a38:	0800b178 	.word	0x0800b178
 8009a3c:	0800b17c 	.word	0x0800b17c

08009a40 <memcpy>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	1e43      	subs	r3, r0, #1
 8009a44:	440a      	add	r2, r1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	d100      	bne.n	8009a4c <memcpy+0xc>
 8009a4a:	bd10      	pop	{r4, pc}
 8009a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a54:	e7f7      	b.n	8009a46 <memcpy+0x6>

08009a56 <memset>:
 8009a56:	4402      	add	r2, r0
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d100      	bne.n	8009a60 <memset+0xa>
 8009a5e:	4770      	bx	lr
 8009a60:	f803 1b01 	strb.w	r1, [r3], #1
 8009a64:	e7f9      	b.n	8009a5a <memset+0x4>
	...

08009a68 <_puts_r>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	460e      	mov	r6, r1
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b118      	cbz	r0, 8009a78 <_puts_r+0x10>
 8009a70:	6983      	ldr	r3, [r0, #24]
 8009a72:	b90b      	cbnz	r3, 8009a78 <_puts_r+0x10>
 8009a74:	f000 fa40 	bl	8009ef8 <__sinit>
 8009a78:	69ab      	ldr	r3, [r5, #24]
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	b913      	cbnz	r3, 8009a84 <_puts_r+0x1c>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 fa3a 	bl	8009ef8 <__sinit>
 8009a84:	4b23      	ldr	r3, [pc, #140]	; (8009b14 <_puts_r+0xac>)
 8009a86:	429c      	cmp	r4, r3
 8009a88:	d117      	bne.n	8009aba <_puts_r+0x52>
 8009a8a:	686c      	ldr	r4, [r5, #4]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	071b      	lsls	r3, r3, #28
 8009a90:	d51d      	bpl.n	8009ace <_puts_r+0x66>
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	b1db      	cbz	r3, 8009ace <_puts_r+0x66>
 8009a96:	3e01      	subs	r6, #1
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	60a3      	str	r3, [r4, #8]
 8009aa2:	b9e9      	cbnz	r1, 8009ae0 <_puts_r+0x78>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	da2e      	bge.n	8009b06 <_puts_r+0x9e>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	210a      	movs	r1, #10
 8009aac:	4628      	mov	r0, r5
 8009aae:	f000 f873 	bl	8009b98 <__swbuf_r>
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	d011      	beq.n	8009ada <_puts_r+0x72>
 8009ab6:	200a      	movs	r0, #10
 8009ab8:	e011      	b.n	8009ade <_puts_r+0x76>
 8009aba:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <_puts_r+0xb0>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	d101      	bne.n	8009ac4 <_puts_r+0x5c>
 8009ac0:	68ac      	ldr	r4, [r5, #8]
 8009ac2:	e7e3      	b.n	8009a8c <_puts_r+0x24>
 8009ac4:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <_puts_r+0xb4>)
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	bf08      	it	eq
 8009aca:	68ec      	ldreq	r4, [r5, #12]
 8009acc:	e7de      	b.n	8009a8c <_puts_r+0x24>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f000 f8b3 	bl	8009c3c <__swsetup_r>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0dd      	beq.n	8009a96 <_puts_r+0x2e>
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da04      	bge.n	8009aee <_puts_r+0x86>
 8009ae4:	69a2      	ldr	r2, [r4, #24]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	dc06      	bgt.n	8009af8 <_puts_r+0x90>
 8009aea:	290a      	cmp	r1, #10
 8009aec:	d004      	beq.n	8009af8 <_puts_r+0x90>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	7019      	strb	r1, [r3, #0]
 8009af6:	e7cf      	b.n	8009a98 <_puts_r+0x30>
 8009af8:	4622      	mov	r2, r4
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f84c 	bl	8009b98 <__swbuf_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d1c9      	bne.n	8009a98 <_puts_r+0x30>
 8009b04:	e7e9      	b.n	8009ada <_puts_r+0x72>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	200a      	movs	r0, #10
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	6022      	str	r2, [r4, #0]
 8009b0e:	7018      	strb	r0, [r3, #0]
 8009b10:	e7e5      	b.n	8009ade <_puts_r+0x76>
 8009b12:	bf00      	nop
 8009b14:	0800b0fc 	.word	0x0800b0fc
 8009b18:	0800b11c 	.word	0x0800b11c
 8009b1c:	0800b0dc 	.word	0x0800b0dc

08009b20 <puts>:
 8009b20:	4b02      	ldr	r3, [pc, #8]	; (8009b2c <puts+0xc>)
 8009b22:	4601      	mov	r1, r0
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f7ff bf9f 	b.w	8009a68 <_puts_r>
 8009b2a:	bf00      	nop
 8009b2c:	20000034 	.word	0x20000034

08009b30 <sniprintf>:
 8009b30:	b40c      	push	{r2, r3}
 8009b32:	b530      	push	{r4, r5, lr}
 8009b34:	4b17      	ldr	r3, [pc, #92]	; (8009b94 <sniprintf+0x64>)
 8009b36:	1e0c      	subs	r4, r1, #0
 8009b38:	b09d      	sub	sp, #116	; 0x74
 8009b3a:	681d      	ldr	r5, [r3, #0]
 8009b3c:	da08      	bge.n	8009b50 <sniprintf+0x20>
 8009b3e:	238b      	movs	r3, #139	; 0x8b
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f04f 30ff 	mov.w	r0, #4294967295
 8009b46:	b01d      	add	sp, #116	; 0x74
 8009b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b4c:	b002      	add	sp, #8
 8009b4e:	4770      	bx	lr
 8009b50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b58:	bf14      	ite	ne
 8009b5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b5e:	4623      	moveq	r3, r4
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	9307      	str	r3, [sp, #28]
 8009b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b68:	9002      	str	r0, [sp, #8]
 8009b6a:	9006      	str	r0, [sp, #24]
 8009b6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b72:	ab21      	add	r3, sp, #132	; 0x84
 8009b74:	a902      	add	r1, sp, #8
 8009b76:	4628      	mov	r0, r5
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	f000 fbad 	bl	800a2d8 <_svfiprintf_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	bfbc      	itt	lt
 8009b82:	238b      	movlt	r3, #139	; 0x8b
 8009b84:	602b      	strlt	r3, [r5, #0]
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	d0dd      	beq.n	8009b46 <sniprintf+0x16>
 8009b8a:	9b02      	ldr	r3, [sp, #8]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e7d9      	b.n	8009b46 <sniprintf+0x16>
 8009b92:	bf00      	nop
 8009b94:	20000034 	.word	0x20000034

08009b98 <__swbuf_r>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	b118      	cbz	r0, 8009baa <__swbuf_r+0x12>
 8009ba2:	6983      	ldr	r3, [r0, #24]
 8009ba4:	b90b      	cbnz	r3, 8009baa <__swbuf_r+0x12>
 8009ba6:	f000 f9a7 	bl	8009ef8 <__sinit>
 8009baa:	4b21      	ldr	r3, [pc, #132]	; (8009c30 <__swbuf_r+0x98>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	d12a      	bne.n	8009c06 <__swbuf_r+0x6e>
 8009bb0:	686c      	ldr	r4, [r5, #4]
 8009bb2:	69a3      	ldr	r3, [r4, #24]
 8009bb4:	60a3      	str	r3, [r4, #8]
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	071a      	lsls	r2, r3, #28
 8009bba:	d52e      	bpl.n	8009c1a <__swbuf_r+0x82>
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	b363      	cbz	r3, 8009c1a <__swbuf_r+0x82>
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	6820      	ldr	r0, [r4, #0]
 8009bc4:	1ac0      	subs	r0, r0, r3
 8009bc6:	6963      	ldr	r3, [r4, #20]
 8009bc8:	b2f6      	uxtb	r6, r6
 8009bca:	4283      	cmp	r3, r0
 8009bcc:	4637      	mov	r7, r6
 8009bce:	dc04      	bgt.n	8009bda <__swbuf_r+0x42>
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f000 f926 	bl	8009e24 <_fflush_r>
 8009bd8:	bb28      	cbnz	r0, 8009c26 <__swbuf_r+0x8e>
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	60a3      	str	r3, [r4, #8]
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	6022      	str	r2, [r4, #0]
 8009be6:	701e      	strb	r6, [r3, #0]
 8009be8:	6963      	ldr	r3, [r4, #20]
 8009bea:	3001      	adds	r0, #1
 8009bec:	4283      	cmp	r3, r0
 8009bee:	d004      	beq.n	8009bfa <__swbuf_r+0x62>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	07db      	lsls	r3, r3, #31
 8009bf4:	d519      	bpl.n	8009c2a <__swbuf_r+0x92>
 8009bf6:	2e0a      	cmp	r6, #10
 8009bf8:	d117      	bne.n	8009c2a <__swbuf_r+0x92>
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f000 f911 	bl	8009e24 <_fflush_r>
 8009c02:	b190      	cbz	r0, 8009c2a <__swbuf_r+0x92>
 8009c04:	e00f      	b.n	8009c26 <__swbuf_r+0x8e>
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <__swbuf_r+0x9c>)
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	d101      	bne.n	8009c10 <__swbuf_r+0x78>
 8009c0c:	68ac      	ldr	r4, [r5, #8]
 8009c0e:	e7d0      	b.n	8009bb2 <__swbuf_r+0x1a>
 8009c10:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <__swbuf_r+0xa0>)
 8009c12:	429c      	cmp	r4, r3
 8009c14:	bf08      	it	eq
 8009c16:	68ec      	ldreq	r4, [r5, #12]
 8009c18:	e7cb      	b.n	8009bb2 <__swbuf_r+0x1a>
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 f80d 	bl	8009c3c <__swsetup_r>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d0cc      	beq.n	8009bc0 <__swbuf_r+0x28>
 8009c26:	f04f 37ff 	mov.w	r7, #4294967295
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800b0fc 	.word	0x0800b0fc
 8009c34:	0800b11c 	.word	0x0800b11c
 8009c38:	0800b0dc 	.word	0x0800b0dc

08009c3c <__swsetup_r>:
 8009c3c:	4b32      	ldr	r3, [pc, #200]	; (8009d08 <__swsetup_r+0xcc>)
 8009c3e:	b570      	push	{r4, r5, r6, lr}
 8009c40:	681d      	ldr	r5, [r3, #0]
 8009c42:	4606      	mov	r6, r0
 8009c44:	460c      	mov	r4, r1
 8009c46:	b125      	cbz	r5, 8009c52 <__swsetup_r+0x16>
 8009c48:	69ab      	ldr	r3, [r5, #24]
 8009c4a:	b913      	cbnz	r3, 8009c52 <__swsetup_r+0x16>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f000 f953 	bl	8009ef8 <__sinit>
 8009c52:	4b2e      	ldr	r3, [pc, #184]	; (8009d0c <__swsetup_r+0xd0>)
 8009c54:	429c      	cmp	r4, r3
 8009c56:	d10f      	bne.n	8009c78 <__swsetup_r+0x3c>
 8009c58:	686c      	ldr	r4, [r5, #4]
 8009c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	0715      	lsls	r5, r2, #28
 8009c62:	d42c      	bmi.n	8009cbe <__swsetup_r+0x82>
 8009c64:	06d0      	lsls	r0, r2, #27
 8009c66:	d411      	bmi.n	8009c8c <__swsetup_r+0x50>
 8009c68:	2209      	movs	r2, #9
 8009c6a:	6032      	str	r2, [r6, #0]
 8009c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	e03e      	b.n	8009cf6 <__swsetup_r+0xba>
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <__swsetup_r+0xd4>)
 8009c7a:	429c      	cmp	r4, r3
 8009c7c:	d101      	bne.n	8009c82 <__swsetup_r+0x46>
 8009c7e:	68ac      	ldr	r4, [r5, #8]
 8009c80:	e7eb      	b.n	8009c5a <__swsetup_r+0x1e>
 8009c82:	4b24      	ldr	r3, [pc, #144]	; (8009d14 <__swsetup_r+0xd8>)
 8009c84:	429c      	cmp	r4, r3
 8009c86:	bf08      	it	eq
 8009c88:	68ec      	ldreq	r4, [r5, #12]
 8009c8a:	e7e6      	b.n	8009c5a <__swsetup_r+0x1e>
 8009c8c:	0751      	lsls	r1, r2, #29
 8009c8e:	d512      	bpl.n	8009cb6 <__swsetup_r+0x7a>
 8009c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c92:	b141      	cbz	r1, 8009ca6 <__swsetup_r+0x6a>
 8009c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	d002      	beq.n	8009ca2 <__swsetup_r+0x66>
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 fa19 	bl	800a0d4 <_free_r>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f043 0308 	orr.w	r3, r3, #8
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	b94b      	cbnz	r3, 8009cd6 <__swsetup_r+0x9a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ccc:	d003      	beq.n	8009cd6 <__swsetup_r+0x9a>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f000 f9bf 	bl	800a054 <__smakebuf_r>
 8009cd6:	89a2      	ldrh	r2, [r4, #12]
 8009cd8:	f012 0301 	ands.w	r3, r2, #1
 8009cdc:	d00c      	beq.n	8009cf8 <__swsetup_r+0xbc>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	6963      	ldr	r3, [r4, #20]
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	61a3      	str	r3, [r4, #24]
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	b953      	cbnz	r3, 8009d02 <__swsetup_r+0xc6>
 8009cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009cf4:	d1ba      	bne.n	8009c6c <__swsetup_r+0x30>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	0792      	lsls	r2, r2, #30
 8009cfa:	bf58      	it	pl
 8009cfc:	6963      	ldrpl	r3, [r4, #20]
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	e7f2      	b.n	8009ce8 <__swsetup_r+0xac>
 8009d02:	2000      	movs	r0, #0
 8009d04:	e7f7      	b.n	8009cf6 <__swsetup_r+0xba>
 8009d06:	bf00      	nop
 8009d08:	20000034 	.word	0x20000034
 8009d0c:	0800b0fc 	.word	0x0800b0fc
 8009d10:	0800b11c 	.word	0x0800b11c
 8009d14:	0800b0dc 	.word	0x0800b0dc

08009d18 <__sflush_r>:
 8009d18:	898a      	ldrh	r2, [r1, #12]
 8009d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1e:	4605      	mov	r5, r0
 8009d20:	0710      	lsls	r0, r2, #28
 8009d22:	460c      	mov	r4, r1
 8009d24:	d458      	bmi.n	8009dd8 <__sflush_r+0xc0>
 8009d26:	684b      	ldr	r3, [r1, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dc05      	bgt.n	8009d38 <__sflush_r+0x20>
 8009d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dc02      	bgt.n	8009d38 <__sflush_r+0x20>
 8009d32:	2000      	movs	r0, #0
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	d0f9      	beq.n	8009d32 <__sflush_r+0x1a>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d44:	682f      	ldr	r7, [r5, #0]
 8009d46:	6a21      	ldr	r1, [r4, #32]
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	d032      	beq.n	8009db2 <__sflush_r+0x9a>
 8009d4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	075a      	lsls	r2, r3, #29
 8009d52:	d505      	bpl.n	8009d60 <__sflush_r+0x48>
 8009d54:	6863      	ldr	r3, [r4, #4]
 8009d56:	1ac0      	subs	r0, r0, r3
 8009d58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d5a:	b10b      	cbz	r3, 8009d60 <__sflush_r+0x48>
 8009d5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d5e:	1ac0      	subs	r0, r0, r3
 8009d60:	2300      	movs	r3, #0
 8009d62:	4602      	mov	r2, r0
 8009d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d66:	6a21      	ldr	r1, [r4, #32]
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	d106      	bne.n	8009d80 <__sflush_r+0x68>
 8009d72:	6829      	ldr	r1, [r5, #0]
 8009d74:	291d      	cmp	r1, #29
 8009d76:	d848      	bhi.n	8009e0a <__sflush_r+0xf2>
 8009d78:	4a29      	ldr	r2, [pc, #164]	; (8009e20 <__sflush_r+0x108>)
 8009d7a:	40ca      	lsrs	r2, r1
 8009d7c:	07d6      	lsls	r6, r2, #31
 8009d7e:	d544      	bpl.n	8009e0a <__sflush_r+0xf2>
 8009d80:	2200      	movs	r2, #0
 8009d82:	6062      	str	r2, [r4, #4]
 8009d84:	04d9      	lsls	r1, r3, #19
 8009d86:	6922      	ldr	r2, [r4, #16]
 8009d88:	6022      	str	r2, [r4, #0]
 8009d8a:	d504      	bpl.n	8009d96 <__sflush_r+0x7e>
 8009d8c:	1c42      	adds	r2, r0, #1
 8009d8e:	d101      	bne.n	8009d94 <__sflush_r+0x7c>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b903      	cbnz	r3, 8009d96 <__sflush_r+0x7e>
 8009d94:	6560      	str	r0, [r4, #84]	; 0x54
 8009d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d98:	602f      	str	r7, [r5, #0]
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d0c9      	beq.n	8009d32 <__sflush_r+0x1a>
 8009d9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009da2:	4299      	cmp	r1, r3
 8009da4:	d002      	beq.n	8009dac <__sflush_r+0x94>
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 f994 	bl	800a0d4 <_free_r>
 8009dac:	2000      	movs	r0, #0
 8009dae:	6360      	str	r0, [r4, #52]	; 0x34
 8009db0:	e7c0      	b.n	8009d34 <__sflush_r+0x1c>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b0      	blx	r6
 8009db8:	1c41      	adds	r1, r0, #1
 8009dba:	d1c8      	bne.n	8009d4e <__sflush_r+0x36>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0c5      	beq.n	8009d4e <__sflush_r+0x36>
 8009dc2:	2b1d      	cmp	r3, #29
 8009dc4:	d001      	beq.n	8009dca <__sflush_r+0xb2>
 8009dc6:	2b16      	cmp	r3, #22
 8009dc8:	d101      	bne.n	8009dce <__sflush_r+0xb6>
 8009dca:	602f      	str	r7, [r5, #0]
 8009dcc:	e7b1      	b.n	8009d32 <__sflush_r+0x1a>
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	e7ad      	b.n	8009d34 <__sflush_r+0x1c>
 8009dd8:	690f      	ldr	r7, [r1, #16]
 8009dda:	2f00      	cmp	r7, #0
 8009ddc:	d0a9      	beq.n	8009d32 <__sflush_r+0x1a>
 8009dde:	0793      	lsls	r3, r2, #30
 8009de0:	680e      	ldr	r6, [r1, #0]
 8009de2:	bf08      	it	eq
 8009de4:	694b      	ldreq	r3, [r1, #20]
 8009de6:	600f      	str	r7, [r1, #0]
 8009de8:	bf18      	it	ne
 8009dea:	2300      	movne	r3, #0
 8009dec:	eba6 0807 	sub.w	r8, r6, r7
 8009df0:	608b      	str	r3, [r1, #8]
 8009df2:	f1b8 0f00 	cmp.w	r8, #0
 8009df6:	dd9c      	ble.n	8009d32 <__sflush_r+0x1a>
 8009df8:	4643      	mov	r3, r8
 8009dfa:	463a      	mov	r2, r7
 8009dfc:	6a21      	ldr	r1, [r4, #32]
 8009dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e00:	4628      	mov	r0, r5
 8009e02:	47b0      	blx	r6
 8009e04:	2800      	cmp	r0, #0
 8009e06:	dc06      	bgt.n	8009e16 <__sflush_r+0xfe>
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	e78e      	b.n	8009d34 <__sflush_r+0x1c>
 8009e16:	4407      	add	r7, r0
 8009e18:	eba8 0800 	sub.w	r8, r8, r0
 8009e1c:	e7e9      	b.n	8009df2 <__sflush_r+0xda>
 8009e1e:	bf00      	nop
 8009e20:	20400001 	.word	0x20400001

08009e24 <_fflush_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	690b      	ldr	r3, [r1, #16]
 8009e28:	4605      	mov	r5, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	b1db      	cbz	r3, 8009e66 <_fflush_r+0x42>
 8009e2e:	b118      	cbz	r0, 8009e38 <_fflush_r+0x14>
 8009e30:	6983      	ldr	r3, [r0, #24]
 8009e32:	b90b      	cbnz	r3, 8009e38 <_fflush_r+0x14>
 8009e34:	f000 f860 	bl	8009ef8 <__sinit>
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <_fflush_r+0x48>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d109      	bne.n	8009e52 <_fflush_r+0x2e>
 8009e3e:	686c      	ldr	r4, [r5, #4]
 8009e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e44:	b17b      	cbz	r3, 8009e66 <_fflush_r+0x42>
 8009e46:	4621      	mov	r1, r4
 8009e48:	4628      	mov	r0, r5
 8009e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4e:	f7ff bf63 	b.w	8009d18 <__sflush_r>
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <_fflush_r+0x4c>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	d101      	bne.n	8009e5c <_fflush_r+0x38>
 8009e58:	68ac      	ldr	r4, [r5, #8]
 8009e5a:	e7f1      	b.n	8009e40 <_fflush_r+0x1c>
 8009e5c:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <_fflush_r+0x50>)
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	bf08      	it	eq
 8009e62:	68ec      	ldreq	r4, [r5, #12]
 8009e64:	e7ec      	b.n	8009e40 <_fflush_r+0x1c>
 8009e66:	2000      	movs	r0, #0
 8009e68:	bd38      	pop	{r3, r4, r5, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0800b0fc 	.word	0x0800b0fc
 8009e70:	0800b11c 	.word	0x0800b11c
 8009e74:	0800b0dc 	.word	0x0800b0dc

08009e78 <std>:
 8009e78:	2300      	movs	r3, #0
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e82:	6083      	str	r3, [r0, #8]
 8009e84:	8181      	strh	r1, [r0, #12]
 8009e86:	6643      	str	r3, [r0, #100]	; 0x64
 8009e88:	81c2      	strh	r2, [r0, #14]
 8009e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e8e:	6183      	str	r3, [r0, #24]
 8009e90:	4619      	mov	r1, r3
 8009e92:	2208      	movs	r2, #8
 8009e94:	305c      	adds	r0, #92	; 0x5c
 8009e96:	f7ff fdde 	bl	8009a56 <memset>
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <std+0x38>)
 8009e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <std+0x3c>)
 8009ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <std+0x40>)
 8009ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <std+0x44>)
 8009ea8:	6224      	str	r4, [r4, #32]
 8009eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800a7f9 	.word	0x0800a7f9
 8009eb4:	0800a81b 	.word	0x0800a81b
 8009eb8:	0800a853 	.word	0x0800a853
 8009ebc:	0800a877 	.word	0x0800a877

08009ec0 <_cleanup_r>:
 8009ec0:	4901      	ldr	r1, [pc, #4]	; (8009ec8 <_cleanup_r+0x8>)
 8009ec2:	f000 b885 	b.w	8009fd0 <_fwalk_reent>
 8009ec6:	bf00      	nop
 8009ec8:	08009e25 	.word	0x08009e25

08009ecc <__sfmoreglue>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	1e4a      	subs	r2, r1, #1
 8009ed0:	2568      	movs	r5, #104	; 0x68
 8009ed2:	4355      	muls	r5, r2
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eda:	f000 f949 	bl	800a170 <_malloc_r>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	b140      	cbz	r0, 8009ef4 <__sfmoreglue+0x28>
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ee8:	300c      	adds	r0, #12
 8009eea:	60a0      	str	r0, [r4, #8]
 8009eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ef0:	f7ff fdb1 	bl	8009a56 <memset>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}

08009ef8 <__sinit>:
 8009ef8:	6983      	ldr	r3, [r0, #24]
 8009efa:	b510      	push	{r4, lr}
 8009efc:	4604      	mov	r4, r0
 8009efe:	bb33      	cbnz	r3, 8009f4e <__sinit+0x56>
 8009f00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009f04:	6503      	str	r3, [r0, #80]	; 0x50
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <__sinit+0x58>)
 8009f08:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <__sinit+0x5c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6282      	str	r2, [r0, #40]	; 0x28
 8009f0e:	4298      	cmp	r0, r3
 8009f10:	bf04      	itt	eq
 8009f12:	2301      	moveq	r3, #1
 8009f14:	6183      	streq	r3, [r0, #24]
 8009f16:	f000 f81f 	bl	8009f58 <__sfp>
 8009f1a:	6060      	str	r0, [r4, #4]
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 f81b 	bl	8009f58 <__sfp>
 8009f22:	60a0      	str	r0, [r4, #8]
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 f817 	bl	8009f58 <__sfp>
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	60e0      	str	r0, [r4, #12]
 8009f2e:	2104      	movs	r1, #4
 8009f30:	6860      	ldr	r0, [r4, #4]
 8009f32:	f7ff ffa1 	bl	8009e78 <std>
 8009f36:	2201      	movs	r2, #1
 8009f38:	2109      	movs	r1, #9
 8009f3a:	68a0      	ldr	r0, [r4, #8]
 8009f3c:	f7ff ff9c 	bl	8009e78 <std>
 8009f40:	2202      	movs	r2, #2
 8009f42:	2112      	movs	r1, #18
 8009f44:	68e0      	ldr	r0, [r4, #12]
 8009f46:	f7ff ff97 	bl	8009e78 <std>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	61a3      	str	r3, [r4, #24]
 8009f4e:	bd10      	pop	{r4, pc}
 8009f50:	0800b0d8 	.word	0x0800b0d8
 8009f54:	08009ec1 	.word	0x08009ec1

08009f58 <__sfp>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <__sfp+0x70>)
 8009f5c:	681e      	ldr	r6, [r3, #0]
 8009f5e:	69b3      	ldr	r3, [r6, #24]
 8009f60:	4607      	mov	r7, r0
 8009f62:	b913      	cbnz	r3, 8009f6a <__sfp+0x12>
 8009f64:	4630      	mov	r0, r6
 8009f66:	f7ff ffc7 	bl	8009ef8 <__sinit>
 8009f6a:	3648      	adds	r6, #72	; 0x48
 8009f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	d503      	bpl.n	8009f7c <__sfp+0x24>
 8009f74:	6833      	ldr	r3, [r6, #0]
 8009f76:	b133      	cbz	r3, 8009f86 <__sfp+0x2e>
 8009f78:	6836      	ldr	r6, [r6, #0]
 8009f7a:	e7f7      	b.n	8009f6c <__sfp+0x14>
 8009f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f80:	b16d      	cbz	r5, 8009f9e <__sfp+0x46>
 8009f82:	3468      	adds	r4, #104	; 0x68
 8009f84:	e7f4      	b.n	8009f70 <__sfp+0x18>
 8009f86:	2104      	movs	r1, #4
 8009f88:	4638      	mov	r0, r7
 8009f8a:	f7ff ff9f 	bl	8009ecc <__sfmoreglue>
 8009f8e:	6030      	str	r0, [r6, #0]
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d1f1      	bne.n	8009f78 <__sfp+0x20>
 8009f94:	230c      	movs	r3, #12
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4604      	mov	r4, r0
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <__sfp+0x74>)
 8009fa0:	6665      	str	r5, [r4, #100]	; 0x64
 8009fa2:	e9c4 5500 	strd	r5, r5, [r4]
 8009fa6:	60a5      	str	r5, [r4, #8]
 8009fa8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009fac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fb8:	f7ff fd4d 	bl	8009a56 <memset>
 8009fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fc4:	e7e9      	b.n	8009f9a <__sfp+0x42>
 8009fc6:	bf00      	nop
 8009fc8:	0800b0d8 	.word	0x0800b0d8
 8009fcc:	ffff0001 	.word	0xffff0001

08009fd0 <_fwalk_reent>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	4689      	mov	r9, r1
 8009fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fdc:	2600      	movs	r6, #0
 8009fde:	b914      	cbnz	r4, 8009fe6 <_fwalk_reent+0x16>
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009fea:	3f01      	subs	r7, #1
 8009fec:	d501      	bpl.n	8009ff2 <_fwalk_reent+0x22>
 8009fee:	6824      	ldr	r4, [r4, #0]
 8009ff0:	e7f5      	b.n	8009fde <_fwalk_reent+0xe>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d907      	bls.n	800a008 <_fwalk_reent+0x38>
 8009ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	d003      	beq.n	800a008 <_fwalk_reent+0x38>
 800a000:	4629      	mov	r1, r5
 800a002:	4640      	mov	r0, r8
 800a004:	47c8      	blx	r9
 800a006:	4306      	orrs	r6, r0
 800a008:	3568      	adds	r5, #104	; 0x68
 800a00a:	e7ee      	b.n	8009fea <_fwalk_reent+0x1a>

0800a00c <__swhatbuf_r>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	460e      	mov	r6, r1
 800a010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a014:	2900      	cmp	r1, #0
 800a016:	b096      	sub	sp, #88	; 0x58
 800a018:	4614      	mov	r4, r2
 800a01a:	461d      	mov	r5, r3
 800a01c:	da07      	bge.n	800a02e <__swhatbuf_r+0x22>
 800a01e:	2300      	movs	r3, #0
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	89b3      	ldrh	r3, [r6, #12]
 800a024:	061a      	lsls	r2, r3, #24
 800a026:	d410      	bmi.n	800a04a <__swhatbuf_r+0x3e>
 800a028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a02c:	e00e      	b.n	800a04c <__swhatbuf_r+0x40>
 800a02e:	466a      	mov	r2, sp
 800a030:	f000 fc48 	bl	800a8c4 <_fstat_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	dbf2      	blt.n	800a01e <__swhatbuf_r+0x12>
 800a038:	9a01      	ldr	r2, [sp, #4]
 800a03a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a03e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a042:	425a      	negs	r2, r3
 800a044:	415a      	adcs	r2, r3
 800a046:	602a      	str	r2, [r5, #0]
 800a048:	e7ee      	b.n	800a028 <__swhatbuf_r+0x1c>
 800a04a:	2340      	movs	r3, #64	; 0x40
 800a04c:	2000      	movs	r0, #0
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	b016      	add	sp, #88	; 0x58
 800a052:	bd70      	pop	{r4, r5, r6, pc}

0800a054 <__smakebuf_r>:
 800a054:	898b      	ldrh	r3, [r1, #12]
 800a056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a058:	079d      	lsls	r5, r3, #30
 800a05a:	4606      	mov	r6, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	d507      	bpl.n	800a070 <__smakebuf_r+0x1c>
 800a060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	6123      	str	r3, [r4, #16]
 800a068:	2301      	movs	r3, #1
 800a06a:	6163      	str	r3, [r4, #20]
 800a06c:	b002      	add	sp, #8
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	ab01      	add	r3, sp, #4
 800a072:	466a      	mov	r2, sp
 800a074:	f7ff ffca 	bl	800a00c <__swhatbuf_r>
 800a078:	9900      	ldr	r1, [sp, #0]
 800a07a:	4605      	mov	r5, r0
 800a07c:	4630      	mov	r0, r6
 800a07e:	f000 f877 	bl	800a170 <_malloc_r>
 800a082:	b948      	cbnz	r0, 800a098 <__smakebuf_r+0x44>
 800a084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a088:	059a      	lsls	r2, r3, #22
 800a08a:	d4ef      	bmi.n	800a06c <__smakebuf_r+0x18>
 800a08c:	f023 0303 	bic.w	r3, r3, #3
 800a090:	f043 0302 	orr.w	r3, r3, #2
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	e7e3      	b.n	800a060 <__smakebuf_r+0xc>
 800a098:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <__smakebuf_r+0x7c>)
 800a09a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	6020      	str	r0, [r4, #0]
 800a0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	6163      	str	r3, [r4, #20]
 800a0aa:	9b01      	ldr	r3, [sp, #4]
 800a0ac:	6120      	str	r0, [r4, #16]
 800a0ae:	b15b      	cbz	r3, 800a0c8 <__smakebuf_r+0x74>
 800a0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f000 fc17 	bl	800a8e8 <_isatty_r>
 800a0ba:	b128      	cbz	r0, 800a0c8 <__smakebuf_r+0x74>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f023 0303 	bic.w	r3, r3, #3
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	431d      	orrs	r5, r3
 800a0cc:	81a5      	strh	r5, [r4, #12]
 800a0ce:	e7cd      	b.n	800a06c <__smakebuf_r+0x18>
 800a0d0:	08009ec1 	.word	0x08009ec1

0800a0d4 <_free_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	d045      	beq.n	800a168 <_free_r+0x94>
 800a0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e0:	1f0c      	subs	r4, r1, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfb8      	it	lt
 800a0e6:	18e4      	addlt	r4, r4, r3
 800a0e8:	f000 fc39 	bl	800a95e <__malloc_lock>
 800a0ec:	4a1f      	ldr	r2, [pc, #124]	; (800a16c <_free_r+0x98>)
 800a0ee:	6813      	ldr	r3, [r2, #0]
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	b933      	cbnz	r3, 800a102 <_free_r+0x2e>
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	6014      	str	r4, [r2, #0]
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fe:	f000 bc2f 	b.w	800a960 <__malloc_unlock>
 800a102:	42a3      	cmp	r3, r4
 800a104:	d90c      	bls.n	800a120 <_free_r+0x4c>
 800a106:	6821      	ldr	r1, [r4, #0]
 800a108:	1862      	adds	r2, r4, r1
 800a10a:	4293      	cmp	r3, r2
 800a10c:	bf04      	itt	eq
 800a10e:	681a      	ldreq	r2, [r3, #0]
 800a110:	685b      	ldreq	r3, [r3, #4]
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	bf04      	itt	eq
 800a116:	1852      	addeq	r2, r2, r1
 800a118:	6022      	streq	r2, [r4, #0]
 800a11a:	6004      	str	r4, [r0, #0]
 800a11c:	e7ec      	b.n	800a0f8 <_free_r+0x24>
 800a11e:	4613      	mov	r3, r2
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	b10a      	cbz	r2, 800a128 <_free_r+0x54>
 800a124:	42a2      	cmp	r2, r4
 800a126:	d9fa      	bls.n	800a11e <_free_r+0x4a>
 800a128:	6819      	ldr	r1, [r3, #0]
 800a12a:	1858      	adds	r0, r3, r1
 800a12c:	42a0      	cmp	r0, r4
 800a12e:	d10b      	bne.n	800a148 <_free_r+0x74>
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	4401      	add	r1, r0
 800a134:	1858      	adds	r0, r3, r1
 800a136:	4282      	cmp	r2, r0
 800a138:	6019      	str	r1, [r3, #0]
 800a13a:	d1dd      	bne.n	800a0f8 <_free_r+0x24>
 800a13c:	6810      	ldr	r0, [r2, #0]
 800a13e:	6852      	ldr	r2, [r2, #4]
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	4401      	add	r1, r0
 800a144:	6019      	str	r1, [r3, #0]
 800a146:	e7d7      	b.n	800a0f8 <_free_r+0x24>
 800a148:	d902      	bls.n	800a150 <_free_r+0x7c>
 800a14a:	230c      	movs	r3, #12
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	e7d3      	b.n	800a0f8 <_free_r+0x24>
 800a150:	6820      	ldr	r0, [r4, #0]
 800a152:	1821      	adds	r1, r4, r0
 800a154:	428a      	cmp	r2, r1
 800a156:	bf04      	itt	eq
 800a158:	6811      	ldreq	r1, [r2, #0]
 800a15a:	6852      	ldreq	r2, [r2, #4]
 800a15c:	6062      	str	r2, [r4, #4]
 800a15e:	bf04      	itt	eq
 800a160:	1809      	addeq	r1, r1, r0
 800a162:	6021      	streq	r1, [r4, #0]
 800a164:	605c      	str	r4, [r3, #4]
 800a166:	e7c7      	b.n	800a0f8 <_free_r+0x24>
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	20002848 	.word	0x20002848

0800a170 <_malloc_r>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	1ccd      	adds	r5, r1, #3
 800a174:	f025 0503 	bic.w	r5, r5, #3
 800a178:	3508      	adds	r5, #8
 800a17a:	2d0c      	cmp	r5, #12
 800a17c:	bf38      	it	cc
 800a17e:	250c      	movcc	r5, #12
 800a180:	2d00      	cmp	r5, #0
 800a182:	4606      	mov	r6, r0
 800a184:	db01      	blt.n	800a18a <_malloc_r+0x1a>
 800a186:	42a9      	cmp	r1, r5
 800a188:	d903      	bls.n	800a192 <_malloc_r+0x22>
 800a18a:	230c      	movs	r3, #12
 800a18c:	6033      	str	r3, [r6, #0]
 800a18e:	2000      	movs	r0, #0
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	f000 fbe4 	bl	800a95e <__malloc_lock>
 800a196:	4a21      	ldr	r2, [pc, #132]	; (800a21c <_malloc_r+0xac>)
 800a198:	6814      	ldr	r4, [r2, #0]
 800a19a:	4621      	mov	r1, r4
 800a19c:	b991      	cbnz	r1, 800a1c4 <_malloc_r+0x54>
 800a19e:	4c20      	ldr	r4, [pc, #128]	; (800a220 <_malloc_r+0xb0>)
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	b91b      	cbnz	r3, 800a1ac <_malloc_r+0x3c>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f000 fb17 	bl	800a7d8 <_sbrk_r>
 800a1aa:	6020      	str	r0, [r4, #0]
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f000 fb12 	bl	800a7d8 <_sbrk_r>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d124      	bne.n	800a202 <_malloc_r+0x92>
 800a1b8:	230c      	movs	r3, #12
 800a1ba:	6033      	str	r3, [r6, #0]
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f000 fbcf 	bl	800a960 <__malloc_unlock>
 800a1c2:	e7e4      	b.n	800a18e <_malloc_r+0x1e>
 800a1c4:	680b      	ldr	r3, [r1, #0]
 800a1c6:	1b5b      	subs	r3, r3, r5
 800a1c8:	d418      	bmi.n	800a1fc <_malloc_r+0x8c>
 800a1ca:	2b0b      	cmp	r3, #11
 800a1cc:	d90f      	bls.n	800a1ee <_malloc_r+0x7e>
 800a1ce:	600b      	str	r3, [r1, #0]
 800a1d0:	50cd      	str	r5, [r1, r3]
 800a1d2:	18cc      	adds	r4, r1, r3
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 fbc3 	bl	800a960 <__malloc_unlock>
 800a1da:	f104 000b 	add.w	r0, r4, #11
 800a1de:	1d23      	adds	r3, r4, #4
 800a1e0:	f020 0007 	bic.w	r0, r0, #7
 800a1e4:	1ac3      	subs	r3, r0, r3
 800a1e6:	d0d3      	beq.n	800a190 <_malloc_r+0x20>
 800a1e8:	425a      	negs	r2, r3
 800a1ea:	50e2      	str	r2, [r4, r3]
 800a1ec:	e7d0      	b.n	800a190 <_malloc_r+0x20>
 800a1ee:	428c      	cmp	r4, r1
 800a1f0:	684b      	ldr	r3, [r1, #4]
 800a1f2:	bf16      	itet	ne
 800a1f4:	6063      	strne	r3, [r4, #4]
 800a1f6:	6013      	streq	r3, [r2, #0]
 800a1f8:	460c      	movne	r4, r1
 800a1fa:	e7eb      	b.n	800a1d4 <_malloc_r+0x64>
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	6849      	ldr	r1, [r1, #4]
 800a200:	e7cc      	b.n	800a19c <_malloc_r+0x2c>
 800a202:	1cc4      	adds	r4, r0, #3
 800a204:	f024 0403 	bic.w	r4, r4, #3
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d005      	beq.n	800a218 <_malloc_r+0xa8>
 800a20c:	1a21      	subs	r1, r4, r0
 800a20e:	4630      	mov	r0, r6
 800a210:	f000 fae2 	bl	800a7d8 <_sbrk_r>
 800a214:	3001      	adds	r0, #1
 800a216:	d0cf      	beq.n	800a1b8 <_malloc_r+0x48>
 800a218:	6025      	str	r5, [r4, #0]
 800a21a:	e7db      	b.n	800a1d4 <_malloc_r+0x64>
 800a21c:	20002848 	.word	0x20002848
 800a220:	2000284c 	.word	0x2000284c

0800a224 <__ssputs_r>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	688e      	ldr	r6, [r1, #8]
 800a22a:	429e      	cmp	r6, r3
 800a22c:	4682      	mov	sl, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4690      	mov	r8, r2
 800a232:	4699      	mov	r9, r3
 800a234:	d837      	bhi.n	800a2a6 <__ssputs_r+0x82>
 800a236:	898a      	ldrh	r2, [r1, #12]
 800a238:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a23c:	d031      	beq.n	800a2a2 <__ssputs_r+0x7e>
 800a23e:	6825      	ldr	r5, [r4, #0]
 800a240:	6909      	ldr	r1, [r1, #16]
 800a242:	1a6f      	subs	r7, r5, r1
 800a244:	6965      	ldr	r5, [r4, #20]
 800a246:	2302      	movs	r3, #2
 800a248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a24c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a250:	f109 0301 	add.w	r3, r9, #1
 800a254:	443b      	add	r3, r7
 800a256:	429d      	cmp	r5, r3
 800a258:	bf38      	it	cc
 800a25a:	461d      	movcc	r5, r3
 800a25c:	0553      	lsls	r3, r2, #21
 800a25e:	d530      	bpl.n	800a2c2 <__ssputs_r+0x9e>
 800a260:	4629      	mov	r1, r5
 800a262:	f7ff ff85 	bl	800a170 <_malloc_r>
 800a266:	4606      	mov	r6, r0
 800a268:	b950      	cbnz	r0, 800a280 <__ssputs_r+0x5c>
 800a26a:	230c      	movs	r3, #12
 800a26c:	f8ca 3000 	str.w	r3, [sl]
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a280:	463a      	mov	r2, r7
 800a282:	6921      	ldr	r1, [r4, #16]
 800a284:	f7ff fbdc 	bl	8009a40 <memcpy>
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	6126      	str	r6, [r4, #16]
 800a296:	6165      	str	r5, [r4, #20]
 800a298:	443e      	add	r6, r7
 800a29a:	1bed      	subs	r5, r5, r7
 800a29c:	6026      	str	r6, [r4, #0]
 800a29e:	60a5      	str	r5, [r4, #8]
 800a2a0:	464e      	mov	r6, r9
 800a2a2:	454e      	cmp	r6, r9
 800a2a4:	d900      	bls.n	800a2a8 <__ssputs_r+0x84>
 800a2a6:	464e      	mov	r6, r9
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	4641      	mov	r1, r8
 800a2ac:	6820      	ldr	r0, [r4, #0]
 800a2ae:	f000 fb3d 	bl	800a92c <memmove>
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	1b9b      	subs	r3, r3, r6
 800a2b6:	60a3      	str	r3, [r4, #8]
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	441e      	add	r6, r3
 800a2bc:	6026      	str	r6, [r4, #0]
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7dc      	b.n	800a27c <__ssputs_r+0x58>
 800a2c2:	462a      	mov	r2, r5
 800a2c4:	f000 fb4d 	bl	800a962 <_realloc_r>
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d1e2      	bne.n	800a294 <__ssputs_r+0x70>
 800a2ce:	6921      	ldr	r1, [r4, #16]
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	f7ff feff 	bl	800a0d4 <_free_r>
 800a2d6:	e7c8      	b.n	800a26a <__ssputs_r+0x46>

0800a2d8 <_svfiprintf_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	461d      	mov	r5, r3
 800a2de:	898b      	ldrh	r3, [r1, #12]
 800a2e0:	061f      	lsls	r7, r3, #24
 800a2e2:	b09d      	sub	sp, #116	; 0x74
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	4616      	mov	r6, r2
 800a2ea:	d50f      	bpl.n	800a30c <_svfiprintf_r+0x34>
 800a2ec:	690b      	ldr	r3, [r1, #16]
 800a2ee:	b96b      	cbnz	r3, 800a30c <_svfiprintf_r+0x34>
 800a2f0:	2140      	movs	r1, #64	; 0x40
 800a2f2:	f7ff ff3d 	bl	800a170 <_malloc_r>
 800a2f6:	6020      	str	r0, [r4, #0]
 800a2f8:	6120      	str	r0, [r4, #16]
 800a2fa:	b928      	cbnz	r0, 800a308 <_svfiprintf_r+0x30>
 800a2fc:	230c      	movs	r3, #12
 800a2fe:	f8c8 3000 	str.w	r3, [r8]
 800a302:	f04f 30ff 	mov.w	r0, #4294967295
 800a306:	e0c8      	b.n	800a49a <_svfiprintf_r+0x1c2>
 800a308:	2340      	movs	r3, #64	; 0x40
 800a30a:	6163      	str	r3, [r4, #20]
 800a30c:	2300      	movs	r3, #0
 800a30e:	9309      	str	r3, [sp, #36]	; 0x24
 800a310:	2320      	movs	r3, #32
 800a312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a316:	2330      	movs	r3, #48	; 0x30
 800a318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a31c:	9503      	str	r5, [sp, #12]
 800a31e:	f04f 0b01 	mov.w	fp, #1
 800a322:	4637      	mov	r7, r6
 800a324:	463d      	mov	r5, r7
 800a326:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a32a:	b10b      	cbz	r3, 800a330 <_svfiprintf_r+0x58>
 800a32c:	2b25      	cmp	r3, #37	; 0x25
 800a32e:	d13e      	bne.n	800a3ae <_svfiprintf_r+0xd6>
 800a330:	ebb7 0a06 	subs.w	sl, r7, r6
 800a334:	d00b      	beq.n	800a34e <_svfiprintf_r+0x76>
 800a336:	4653      	mov	r3, sl
 800a338:	4632      	mov	r2, r6
 800a33a:	4621      	mov	r1, r4
 800a33c:	4640      	mov	r0, r8
 800a33e:	f7ff ff71 	bl	800a224 <__ssputs_r>
 800a342:	3001      	adds	r0, #1
 800a344:	f000 80a4 	beq.w	800a490 <_svfiprintf_r+0x1b8>
 800a348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34a:	4453      	add	r3, sl
 800a34c:	9309      	str	r3, [sp, #36]	; 0x24
 800a34e:	783b      	ldrb	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 809d 	beq.w	800a490 <_svfiprintf_r+0x1b8>
 800a356:	2300      	movs	r3, #0
 800a358:	f04f 32ff 	mov.w	r2, #4294967295
 800a35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a368:	931a      	str	r3, [sp, #104]	; 0x68
 800a36a:	462f      	mov	r7, r5
 800a36c:	2205      	movs	r2, #5
 800a36e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a372:	4850      	ldr	r0, [pc, #320]	; (800a4b4 <_svfiprintf_r+0x1dc>)
 800a374:	f7f5 ff2c 	bl	80001d0 <memchr>
 800a378:	9b04      	ldr	r3, [sp, #16]
 800a37a:	b9d0      	cbnz	r0, 800a3b2 <_svfiprintf_r+0xda>
 800a37c:	06d9      	lsls	r1, r3, #27
 800a37e:	bf44      	itt	mi
 800a380:	2220      	movmi	r2, #32
 800a382:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a386:	071a      	lsls	r2, r3, #28
 800a388:	bf44      	itt	mi
 800a38a:	222b      	movmi	r2, #43	; 0x2b
 800a38c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a390:	782a      	ldrb	r2, [r5, #0]
 800a392:	2a2a      	cmp	r2, #42	; 0x2a
 800a394:	d015      	beq.n	800a3c2 <_svfiprintf_r+0xea>
 800a396:	9a07      	ldr	r2, [sp, #28]
 800a398:	462f      	mov	r7, r5
 800a39a:	2000      	movs	r0, #0
 800a39c:	250a      	movs	r5, #10
 800a39e:	4639      	mov	r1, r7
 800a3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a4:	3b30      	subs	r3, #48	; 0x30
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	d94d      	bls.n	800a446 <_svfiprintf_r+0x16e>
 800a3aa:	b1b8      	cbz	r0, 800a3dc <_svfiprintf_r+0x104>
 800a3ac:	e00f      	b.n	800a3ce <_svfiprintf_r+0xf6>
 800a3ae:	462f      	mov	r7, r5
 800a3b0:	e7b8      	b.n	800a324 <_svfiprintf_r+0x4c>
 800a3b2:	4a40      	ldr	r2, [pc, #256]	; (800a4b4 <_svfiprintf_r+0x1dc>)
 800a3b4:	1a80      	subs	r0, r0, r2
 800a3b6:	fa0b f000 	lsl.w	r0, fp, r0
 800a3ba:	4318      	orrs	r0, r3
 800a3bc:	9004      	str	r0, [sp, #16]
 800a3be:	463d      	mov	r5, r7
 800a3c0:	e7d3      	b.n	800a36a <_svfiprintf_r+0x92>
 800a3c2:	9a03      	ldr	r2, [sp, #12]
 800a3c4:	1d11      	adds	r1, r2, #4
 800a3c6:	6812      	ldr	r2, [r2, #0]
 800a3c8:	9103      	str	r1, [sp, #12]
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	db01      	blt.n	800a3d2 <_svfiprintf_r+0xfa>
 800a3ce:	9207      	str	r2, [sp, #28]
 800a3d0:	e004      	b.n	800a3dc <_svfiprintf_r+0x104>
 800a3d2:	4252      	negs	r2, r2
 800a3d4:	f043 0302 	orr.w	r3, r3, #2
 800a3d8:	9207      	str	r2, [sp, #28]
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	783b      	ldrb	r3, [r7, #0]
 800a3de:	2b2e      	cmp	r3, #46	; 0x2e
 800a3e0:	d10c      	bne.n	800a3fc <_svfiprintf_r+0x124>
 800a3e2:	787b      	ldrb	r3, [r7, #1]
 800a3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e6:	d133      	bne.n	800a450 <_svfiprintf_r+0x178>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d1a      	adds	r2, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9203      	str	r2, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfb8      	it	lt
 800a3f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3f8:	3702      	adds	r7, #2
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	4d2e      	ldr	r5, [pc, #184]	; (800a4b8 <_svfiprintf_r+0x1e0>)
 800a3fe:	7839      	ldrb	r1, [r7, #0]
 800a400:	2203      	movs	r2, #3
 800a402:	4628      	mov	r0, r5
 800a404:	f7f5 fee4 	bl	80001d0 <memchr>
 800a408:	b138      	cbz	r0, 800a41a <_svfiprintf_r+0x142>
 800a40a:	2340      	movs	r3, #64	; 0x40
 800a40c:	1b40      	subs	r0, r0, r5
 800a40e:	fa03 f000 	lsl.w	r0, r3, r0
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	4303      	orrs	r3, r0
 800a416:	3701      	adds	r7, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	7839      	ldrb	r1, [r7, #0]
 800a41c:	4827      	ldr	r0, [pc, #156]	; (800a4bc <_svfiprintf_r+0x1e4>)
 800a41e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a422:	2206      	movs	r2, #6
 800a424:	1c7e      	adds	r6, r7, #1
 800a426:	f7f5 fed3 	bl	80001d0 <memchr>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d038      	beq.n	800a4a0 <_svfiprintf_r+0x1c8>
 800a42e:	4b24      	ldr	r3, [pc, #144]	; (800a4c0 <_svfiprintf_r+0x1e8>)
 800a430:	bb13      	cbnz	r3, 800a478 <_svfiprintf_r+0x1a0>
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	3307      	adds	r3, #7
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	3308      	adds	r3, #8
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a440:	444b      	add	r3, r9
 800a442:	9309      	str	r3, [sp, #36]	; 0x24
 800a444:	e76d      	b.n	800a322 <_svfiprintf_r+0x4a>
 800a446:	fb05 3202 	mla	r2, r5, r2, r3
 800a44a:	2001      	movs	r0, #1
 800a44c:	460f      	mov	r7, r1
 800a44e:	e7a6      	b.n	800a39e <_svfiprintf_r+0xc6>
 800a450:	2300      	movs	r3, #0
 800a452:	3701      	adds	r7, #1
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	4619      	mov	r1, r3
 800a458:	250a      	movs	r5, #10
 800a45a:	4638      	mov	r0, r7
 800a45c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a460:	3a30      	subs	r2, #48	; 0x30
 800a462:	2a09      	cmp	r2, #9
 800a464:	d903      	bls.n	800a46e <_svfiprintf_r+0x196>
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0c8      	beq.n	800a3fc <_svfiprintf_r+0x124>
 800a46a:	9105      	str	r1, [sp, #20]
 800a46c:	e7c6      	b.n	800a3fc <_svfiprintf_r+0x124>
 800a46e:	fb05 2101 	mla	r1, r5, r1, r2
 800a472:	2301      	movs	r3, #1
 800a474:	4607      	mov	r7, r0
 800a476:	e7f0      	b.n	800a45a <_svfiprintf_r+0x182>
 800a478:	ab03      	add	r3, sp, #12
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	4622      	mov	r2, r4
 800a47e:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <_svfiprintf_r+0x1ec>)
 800a480:	a904      	add	r1, sp, #16
 800a482:	4640      	mov	r0, r8
 800a484:	f3af 8000 	nop.w
 800a488:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a48c:	4681      	mov	r9, r0
 800a48e:	d1d6      	bne.n	800a43e <_svfiprintf_r+0x166>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	065b      	lsls	r3, r3, #25
 800a494:	f53f af35 	bmi.w	800a302 <_svfiprintf_r+0x2a>
 800a498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a49a:	b01d      	add	sp, #116	; 0x74
 800a49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a0:	ab03      	add	r3, sp, #12
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <_svfiprintf_r+0x1ec>)
 800a4a8:	a904      	add	r1, sp, #16
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f000 f882 	bl	800a5b4 <_printf_i>
 800a4b0:	e7ea      	b.n	800a488 <_svfiprintf_r+0x1b0>
 800a4b2:	bf00      	nop
 800a4b4:	0800b13c 	.word	0x0800b13c
 800a4b8:	0800b142 	.word	0x0800b142
 800a4bc:	0800b146 	.word	0x0800b146
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	0800a225 	.word	0x0800a225

0800a4c8 <_printf_common>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	4691      	mov	r9, r2
 800a4ce:	461f      	mov	r7, r3
 800a4d0:	688a      	ldr	r2, [r1, #8]
 800a4d2:	690b      	ldr	r3, [r1, #16]
 800a4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	bfb8      	it	lt
 800a4dc:	4613      	movlt	r3, r2
 800a4de:	f8c9 3000 	str.w	r3, [r9]
 800a4e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	b112      	cbz	r2, 800a4f2 <_printf_common+0x2a>
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	f8c9 3000 	str.w	r3, [r9]
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	0699      	lsls	r1, r3, #26
 800a4f6:	bf42      	ittt	mi
 800a4f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4fc:	3302      	addmi	r3, #2
 800a4fe:	f8c9 3000 	strmi.w	r3, [r9]
 800a502:	6825      	ldr	r5, [r4, #0]
 800a504:	f015 0506 	ands.w	r5, r5, #6
 800a508:	d107      	bne.n	800a51a <_printf_common+0x52>
 800a50a:	f104 0a19 	add.w	sl, r4, #25
 800a50e:	68e3      	ldr	r3, [r4, #12]
 800a510:	f8d9 2000 	ldr.w	r2, [r9]
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	42ab      	cmp	r3, r5
 800a518:	dc28      	bgt.n	800a56c <_printf_common+0xa4>
 800a51a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	3300      	adds	r3, #0
 800a522:	bf18      	it	ne
 800a524:	2301      	movne	r3, #1
 800a526:	0692      	lsls	r2, r2, #26
 800a528:	d42d      	bmi.n	800a586 <_printf_common+0xbe>
 800a52a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a52e:	4639      	mov	r1, r7
 800a530:	4630      	mov	r0, r6
 800a532:	47c0      	blx	r8
 800a534:	3001      	adds	r0, #1
 800a536:	d020      	beq.n	800a57a <_printf_common+0xb2>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	68e5      	ldr	r5, [r4, #12]
 800a53c:	f8d9 2000 	ldr.w	r2, [r9]
 800a540:	f003 0306 	and.w	r3, r3, #6
 800a544:	2b04      	cmp	r3, #4
 800a546:	bf08      	it	eq
 800a548:	1aad      	subeq	r5, r5, r2
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	6922      	ldr	r2, [r4, #16]
 800a54e:	bf0c      	ite	eq
 800a550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a554:	2500      	movne	r5, #0
 800a556:	4293      	cmp	r3, r2
 800a558:	bfc4      	itt	gt
 800a55a:	1a9b      	subgt	r3, r3, r2
 800a55c:	18ed      	addgt	r5, r5, r3
 800a55e:	f04f 0900 	mov.w	r9, #0
 800a562:	341a      	adds	r4, #26
 800a564:	454d      	cmp	r5, r9
 800a566:	d11a      	bne.n	800a59e <_printf_common+0xd6>
 800a568:	2000      	movs	r0, #0
 800a56a:	e008      	b.n	800a57e <_printf_common+0xb6>
 800a56c:	2301      	movs	r3, #1
 800a56e:	4652      	mov	r2, sl
 800a570:	4639      	mov	r1, r7
 800a572:	4630      	mov	r0, r6
 800a574:	47c0      	blx	r8
 800a576:	3001      	adds	r0, #1
 800a578:	d103      	bne.n	800a582 <_printf_common+0xba>
 800a57a:	f04f 30ff 	mov.w	r0, #4294967295
 800a57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a582:	3501      	adds	r5, #1
 800a584:	e7c3      	b.n	800a50e <_printf_common+0x46>
 800a586:	18e1      	adds	r1, r4, r3
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	2030      	movs	r0, #48	; 0x30
 800a58c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a590:	4422      	add	r2, r4
 800a592:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a596:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a59a:	3302      	adds	r3, #2
 800a59c:	e7c5      	b.n	800a52a <_printf_common+0x62>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	47c0      	blx	r8
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d0e6      	beq.n	800a57a <_printf_common+0xb2>
 800a5ac:	f109 0901 	add.w	r9, r9, #1
 800a5b0:	e7d8      	b.n	800a564 <_printf_common+0x9c>
	...

0800a5b4 <_printf_i>:
 800a5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a5bc:	460c      	mov	r4, r1
 800a5be:	7e09      	ldrb	r1, [r1, #24]
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	296e      	cmp	r1, #110	; 0x6e
 800a5c4:	4617      	mov	r7, r2
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	4698      	mov	r8, r3
 800a5ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5cc:	f000 80b3 	beq.w	800a736 <_printf_i+0x182>
 800a5d0:	d822      	bhi.n	800a618 <_printf_i+0x64>
 800a5d2:	2963      	cmp	r1, #99	; 0x63
 800a5d4:	d036      	beq.n	800a644 <_printf_i+0x90>
 800a5d6:	d80a      	bhi.n	800a5ee <_printf_i+0x3a>
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	f000 80b9 	beq.w	800a750 <_printf_i+0x19c>
 800a5de:	2958      	cmp	r1, #88	; 0x58
 800a5e0:	f000 8083 	beq.w	800a6ea <_printf_i+0x136>
 800a5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5ec:	e032      	b.n	800a654 <_printf_i+0xa0>
 800a5ee:	2964      	cmp	r1, #100	; 0x64
 800a5f0:	d001      	beq.n	800a5f6 <_printf_i+0x42>
 800a5f2:	2969      	cmp	r1, #105	; 0x69
 800a5f4:	d1f6      	bne.n	800a5e4 <_printf_i+0x30>
 800a5f6:	6820      	ldr	r0, [r4, #0]
 800a5f8:	6813      	ldr	r3, [r2, #0]
 800a5fa:	0605      	lsls	r5, r0, #24
 800a5fc:	f103 0104 	add.w	r1, r3, #4
 800a600:	d52a      	bpl.n	800a658 <_printf_i+0xa4>
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	da03      	bge.n	800a612 <_printf_i+0x5e>
 800a60a:	222d      	movs	r2, #45	; 0x2d
 800a60c:	425b      	negs	r3, r3
 800a60e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a612:	486f      	ldr	r0, [pc, #444]	; (800a7d0 <_printf_i+0x21c>)
 800a614:	220a      	movs	r2, #10
 800a616:	e039      	b.n	800a68c <_printf_i+0xd8>
 800a618:	2973      	cmp	r1, #115	; 0x73
 800a61a:	f000 809d 	beq.w	800a758 <_printf_i+0x1a4>
 800a61e:	d808      	bhi.n	800a632 <_printf_i+0x7e>
 800a620:	296f      	cmp	r1, #111	; 0x6f
 800a622:	d020      	beq.n	800a666 <_printf_i+0xb2>
 800a624:	2970      	cmp	r1, #112	; 0x70
 800a626:	d1dd      	bne.n	800a5e4 <_printf_i+0x30>
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	f043 0320 	orr.w	r3, r3, #32
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	e003      	b.n	800a63a <_printf_i+0x86>
 800a632:	2975      	cmp	r1, #117	; 0x75
 800a634:	d017      	beq.n	800a666 <_printf_i+0xb2>
 800a636:	2978      	cmp	r1, #120	; 0x78
 800a638:	d1d4      	bne.n	800a5e4 <_printf_i+0x30>
 800a63a:	2378      	movs	r3, #120	; 0x78
 800a63c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a640:	4864      	ldr	r0, [pc, #400]	; (800a7d4 <_printf_i+0x220>)
 800a642:	e055      	b.n	800a6f0 <_printf_i+0x13c>
 800a644:	6813      	ldr	r3, [r2, #0]
 800a646:	1d19      	adds	r1, r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6011      	str	r1, [r2, #0]
 800a64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a654:	2301      	movs	r3, #1
 800a656:	e08c      	b.n	800a772 <_printf_i+0x1be>
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6011      	str	r1, [r2, #0]
 800a65c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a660:	bf18      	it	ne
 800a662:	b21b      	sxthne	r3, r3
 800a664:	e7cf      	b.n	800a606 <_printf_i+0x52>
 800a666:	6813      	ldr	r3, [r2, #0]
 800a668:	6825      	ldr	r5, [r4, #0]
 800a66a:	1d18      	adds	r0, r3, #4
 800a66c:	6010      	str	r0, [r2, #0]
 800a66e:	0628      	lsls	r0, r5, #24
 800a670:	d501      	bpl.n	800a676 <_printf_i+0xc2>
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	e002      	b.n	800a67c <_printf_i+0xc8>
 800a676:	0668      	lsls	r0, r5, #25
 800a678:	d5fb      	bpl.n	800a672 <_printf_i+0xbe>
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	4854      	ldr	r0, [pc, #336]	; (800a7d0 <_printf_i+0x21c>)
 800a67e:	296f      	cmp	r1, #111	; 0x6f
 800a680:	bf14      	ite	ne
 800a682:	220a      	movne	r2, #10
 800a684:	2208      	moveq	r2, #8
 800a686:	2100      	movs	r1, #0
 800a688:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a68c:	6865      	ldr	r5, [r4, #4]
 800a68e:	60a5      	str	r5, [r4, #8]
 800a690:	2d00      	cmp	r5, #0
 800a692:	f2c0 8095 	blt.w	800a7c0 <_printf_i+0x20c>
 800a696:	6821      	ldr	r1, [r4, #0]
 800a698:	f021 0104 	bic.w	r1, r1, #4
 800a69c:	6021      	str	r1, [r4, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d13d      	bne.n	800a71e <_printf_i+0x16a>
 800a6a2:	2d00      	cmp	r5, #0
 800a6a4:	f040 808e 	bne.w	800a7c4 <_printf_i+0x210>
 800a6a8:	4665      	mov	r5, ip
 800a6aa:	2a08      	cmp	r2, #8
 800a6ac:	d10b      	bne.n	800a6c6 <_printf_i+0x112>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	07db      	lsls	r3, r3, #31
 800a6b2:	d508      	bpl.n	800a6c6 <_printf_i+0x112>
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	6862      	ldr	r2, [r4, #4]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	bfde      	ittt	le
 800a6bc:	2330      	movle	r3, #48	; 0x30
 800a6be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6c6:	ebac 0305 	sub.w	r3, ip, r5
 800a6ca:	6123      	str	r3, [r4, #16]
 800a6cc:	f8cd 8000 	str.w	r8, [sp]
 800a6d0:	463b      	mov	r3, r7
 800a6d2:	aa03      	add	r2, sp, #12
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7ff fef6 	bl	800a4c8 <_printf_common>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d14d      	bne.n	800a77c <_printf_i+0x1c8>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	b005      	add	sp, #20
 800a6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ea:	4839      	ldr	r0, [pc, #228]	; (800a7d0 <_printf_i+0x21c>)
 800a6ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6f0:	6813      	ldr	r3, [r2, #0]
 800a6f2:	6821      	ldr	r1, [r4, #0]
 800a6f4:	1d1d      	adds	r5, r3, #4
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6015      	str	r5, [r2, #0]
 800a6fa:	060a      	lsls	r2, r1, #24
 800a6fc:	d50b      	bpl.n	800a716 <_printf_i+0x162>
 800a6fe:	07ca      	lsls	r2, r1, #31
 800a700:	bf44      	itt	mi
 800a702:	f041 0120 	orrmi.w	r1, r1, #32
 800a706:	6021      	strmi	r1, [r4, #0]
 800a708:	b91b      	cbnz	r3, 800a712 <_printf_i+0x15e>
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	f022 0220 	bic.w	r2, r2, #32
 800a710:	6022      	str	r2, [r4, #0]
 800a712:	2210      	movs	r2, #16
 800a714:	e7b7      	b.n	800a686 <_printf_i+0xd2>
 800a716:	064d      	lsls	r5, r1, #25
 800a718:	bf48      	it	mi
 800a71a:	b29b      	uxthmi	r3, r3
 800a71c:	e7ef      	b.n	800a6fe <_printf_i+0x14a>
 800a71e:	4665      	mov	r5, ip
 800a720:	fbb3 f1f2 	udiv	r1, r3, r2
 800a724:	fb02 3311 	mls	r3, r2, r1, r3
 800a728:	5cc3      	ldrb	r3, [r0, r3]
 800a72a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a72e:	460b      	mov	r3, r1
 800a730:	2900      	cmp	r1, #0
 800a732:	d1f5      	bne.n	800a720 <_printf_i+0x16c>
 800a734:	e7b9      	b.n	800a6aa <_printf_i+0xf6>
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	6825      	ldr	r5, [r4, #0]
 800a73a:	6961      	ldr	r1, [r4, #20]
 800a73c:	1d18      	adds	r0, r3, #4
 800a73e:	6010      	str	r0, [r2, #0]
 800a740:	0628      	lsls	r0, r5, #24
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	d501      	bpl.n	800a74a <_printf_i+0x196>
 800a746:	6019      	str	r1, [r3, #0]
 800a748:	e002      	b.n	800a750 <_printf_i+0x19c>
 800a74a:	066a      	lsls	r2, r5, #25
 800a74c:	d5fb      	bpl.n	800a746 <_printf_i+0x192>
 800a74e:	8019      	strh	r1, [r3, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	4665      	mov	r5, ip
 800a756:	e7b9      	b.n	800a6cc <_printf_i+0x118>
 800a758:	6813      	ldr	r3, [r2, #0]
 800a75a:	1d19      	adds	r1, r3, #4
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	681d      	ldr	r5, [r3, #0]
 800a760:	6862      	ldr	r2, [r4, #4]
 800a762:	2100      	movs	r1, #0
 800a764:	4628      	mov	r0, r5
 800a766:	f7f5 fd33 	bl	80001d0 <memchr>
 800a76a:	b108      	cbz	r0, 800a770 <_printf_i+0x1bc>
 800a76c:	1b40      	subs	r0, r0, r5
 800a76e:	6060      	str	r0, [r4, #4]
 800a770:	6863      	ldr	r3, [r4, #4]
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	2300      	movs	r3, #0
 800a776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a77a:	e7a7      	b.n	800a6cc <_printf_i+0x118>
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	462a      	mov	r2, r5
 800a780:	4639      	mov	r1, r7
 800a782:	4630      	mov	r0, r6
 800a784:	47c0      	blx	r8
 800a786:	3001      	adds	r0, #1
 800a788:	d0aa      	beq.n	800a6e0 <_printf_i+0x12c>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	079b      	lsls	r3, r3, #30
 800a78e:	d413      	bmi.n	800a7b8 <_printf_i+0x204>
 800a790:	68e0      	ldr	r0, [r4, #12]
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	4298      	cmp	r0, r3
 800a796:	bfb8      	it	lt
 800a798:	4618      	movlt	r0, r3
 800a79a:	e7a3      	b.n	800a6e4 <_printf_i+0x130>
 800a79c:	2301      	movs	r3, #1
 800a79e:	464a      	mov	r2, r9
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	47c0      	blx	r8
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d09a      	beq.n	800a6e0 <_printf_i+0x12c>
 800a7aa:	3501      	adds	r5, #1
 800a7ac:	68e3      	ldr	r3, [r4, #12]
 800a7ae:	9a03      	ldr	r2, [sp, #12]
 800a7b0:	1a9b      	subs	r3, r3, r2
 800a7b2:	42ab      	cmp	r3, r5
 800a7b4:	dcf2      	bgt.n	800a79c <_printf_i+0x1e8>
 800a7b6:	e7eb      	b.n	800a790 <_printf_i+0x1dc>
 800a7b8:	2500      	movs	r5, #0
 800a7ba:	f104 0919 	add.w	r9, r4, #25
 800a7be:	e7f5      	b.n	800a7ac <_printf_i+0x1f8>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1ac      	bne.n	800a71e <_printf_i+0x16a>
 800a7c4:	7803      	ldrb	r3, [r0, #0]
 800a7c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7ce:	e76c      	b.n	800a6aa <_printf_i+0xf6>
 800a7d0:	0800b14d 	.word	0x0800b14d
 800a7d4:	0800b15e 	.word	0x0800b15e

0800a7d8 <_sbrk_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4c06      	ldr	r4, [pc, #24]	; (800a7f4 <_sbrk_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4605      	mov	r5, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	f7f7 f8e4 	bl	80019b0 <_sbrk>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_sbrk_r+0x1a>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_sbrk_r+0x1a>
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	2000301c 	.word	0x2000301c

0800a7f8 <__sread>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a800:	f000 f8d6 	bl	800a9b0 <_read_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	bfab      	itete	ge
 800a808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a80a:	89a3      	ldrhlt	r3, [r4, #12]
 800a80c:	181b      	addge	r3, r3, r0
 800a80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a812:	bfac      	ite	ge
 800a814:	6563      	strge	r3, [r4, #84]	; 0x54
 800a816:	81a3      	strhlt	r3, [r4, #12]
 800a818:	bd10      	pop	{r4, pc}

0800a81a <__swrite>:
 800a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	461f      	mov	r7, r3
 800a820:	898b      	ldrh	r3, [r1, #12]
 800a822:	05db      	lsls	r3, r3, #23
 800a824:	4605      	mov	r5, r0
 800a826:	460c      	mov	r4, r1
 800a828:	4616      	mov	r6, r2
 800a82a:	d505      	bpl.n	800a838 <__swrite+0x1e>
 800a82c:	2302      	movs	r3, #2
 800a82e:	2200      	movs	r2, #0
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	f000 f868 	bl	800a908 <_lseek_r>
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	4632      	mov	r2, r6
 800a846:	463b      	mov	r3, r7
 800a848:	4628      	mov	r0, r5
 800a84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	f000 b817 	b.w	800a880 <_write_r>

0800a852 <__sseek>:
 800a852:	b510      	push	{r4, lr}
 800a854:	460c      	mov	r4, r1
 800a856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85a:	f000 f855 	bl	800a908 <_lseek_r>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	bf15      	itete	ne
 800a864:	6560      	strne	r0, [r4, #84]	; 0x54
 800a866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a86e:	81a3      	strheq	r3, [r4, #12]
 800a870:	bf18      	it	ne
 800a872:	81a3      	strhne	r3, [r4, #12]
 800a874:	bd10      	pop	{r4, pc}

0800a876 <__sclose>:
 800a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87a:	f000 b813 	b.w	800a8a4 <_close_r>
	...

0800a880 <_write_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4c07      	ldr	r4, [pc, #28]	; (800a8a0 <_write_r+0x20>)
 800a884:	4605      	mov	r5, r0
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	2200      	movs	r2, #0
 800a88c:	6022      	str	r2, [r4, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	f7f7 f83e 	bl	8001910 <_write>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_write_r+0x1e>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_write_r+0x1e>
 800a89c:	602b      	str	r3, [r5, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	2000301c 	.word	0x2000301c

0800a8a4 <_close_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4c06      	ldr	r4, [pc, #24]	; (800a8c0 <_close_r+0x1c>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	f7f7 f84a 	bl	8001948 <_close>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_close_r+0x1a>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_close_r+0x1a>
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	2000301c 	.word	0x2000301c

0800a8c4 <_fstat_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4c07      	ldr	r4, [pc, #28]	; (800a8e4 <_fstat_r+0x20>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	f7f7 f845 	bl	8001960 <_fstat>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_fstat_r+0x1c>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_fstat_r+0x1c>
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000301c 	.word	0x2000301c

0800a8e8 <_isatty_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4c06      	ldr	r4, [pc, #24]	; (800a904 <_isatty_r+0x1c>)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	f7f7 f844 	bl	8001980 <_isatty>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_isatty_r+0x1a>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_isatty_r+0x1a>
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	2000301c 	.word	0x2000301c

0800a908 <_lseek_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4c07      	ldr	r4, [pc, #28]	; (800a928 <_lseek_r+0x20>)
 800a90c:	4605      	mov	r5, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f7 f83d 	bl	8001996 <_lseek>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_lseek_r+0x1e>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	b103      	cbz	r3, 800a926 <_lseek_r+0x1e>
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	2000301c 	.word	0x2000301c

0800a92c <memmove>:
 800a92c:	4288      	cmp	r0, r1
 800a92e:	b510      	push	{r4, lr}
 800a930:	eb01 0302 	add.w	r3, r1, r2
 800a934:	d807      	bhi.n	800a946 <memmove+0x1a>
 800a936:	1e42      	subs	r2, r0, #1
 800a938:	4299      	cmp	r1, r3
 800a93a:	d00a      	beq.n	800a952 <memmove+0x26>
 800a93c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a940:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a944:	e7f8      	b.n	800a938 <memmove+0xc>
 800a946:	4283      	cmp	r3, r0
 800a948:	d9f5      	bls.n	800a936 <memmove+0xa>
 800a94a:	1881      	adds	r1, r0, r2
 800a94c:	1ad2      	subs	r2, r2, r3
 800a94e:	42d3      	cmn	r3, r2
 800a950:	d100      	bne.n	800a954 <memmove+0x28>
 800a952:	bd10      	pop	{r4, pc}
 800a954:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a958:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a95c:	e7f7      	b.n	800a94e <memmove+0x22>

0800a95e <__malloc_lock>:
 800a95e:	4770      	bx	lr

0800a960 <__malloc_unlock>:
 800a960:	4770      	bx	lr

0800a962 <_realloc_r>:
 800a962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a964:	4607      	mov	r7, r0
 800a966:	4614      	mov	r4, r2
 800a968:	460e      	mov	r6, r1
 800a96a:	b921      	cbnz	r1, 800a976 <_realloc_r+0x14>
 800a96c:	4611      	mov	r1, r2
 800a96e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a972:	f7ff bbfd 	b.w	800a170 <_malloc_r>
 800a976:	b922      	cbnz	r2, 800a982 <_realloc_r+0x20>
 800a978:	f7ff fbac 	bl	800a0d4 <_free_r>
 800a97c:	4625      	mov	r5, r4
 800a97e:	4628      	mov	r0, r5
 800a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a982:	f000 f827 	bl	800a9d4 <_malloc_usable_size_r>
 800a986:	42a0      	cmp	r0, r4
 800a988:	d20f      	bcs.n	800a9aa <_realloc_r+0x48>
 800a98a:	4621      	mov	r1, r4
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7ff fbef 	bl	800a170 <_malloc_r>
 800a992:	4605      	mov	r5, r0
 800a994:	2800      	cmp	r0, #0
 800a996:	d0f2      	beq.n	800a97e <_realloc_r+0x1c>
 800a998:	4631      	mov	r1, r6
 800a99a:	4622      	mov	r2, r4
 800a99c:	f7ff f850 	bl	8009a40 <memcpy>
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f7ff fb96 	bl	800a0d4 <_free_r>
 800a9a8:	e7e9      	b.n	800a97e <_realloc_r+0x1c>
 800a9aa:	4635      	mov	r5, r6
 800a9ac:	e7e7      	b.n	800a97e <_realloc_r+0x1c>
	...

0800a9b0 <_read_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4c07      	ldr	r4, [pc, #28]	; (800a9d0 <_read_r+0x20>)
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	4608      	mov	r0, r1
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	6022      	str	r2, [r4, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f7f6 ff89 	bl	80018d6 <_read>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_read_r+0x1e>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_read_r+0x1e>
 800a9cc:	602b      	str	r3, [r5, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	2000301c 	.word	0x2000301c

0800a9d4 <_malloc_usable_size_r>:
 800a9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d8:	1f18      	subs	r0, r3, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfbc      	itt	lt
 800a9de:	580b      	ldrlt	r3, [r1, r0]
 800a9e0:	18c0      	addlt	r0, r0, r3
 800a9e2:	4770      	bx	lr

0800a9e4 <trunc>:
 800a9e4:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800a9e8:	ec5c bb10 	vmov	fp, ip, d0
 800a9ec:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800a9f0:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800a9f4:	2913      	cmp	r1, #19
 800a9f6:	4664      	mov	r4, ip
 800a9f8:	dc11      	bgt.n	800aa1e <trunc+0x3a>
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	bfa7      	ittee	ge
 800a9fe:	4b15      	ldrge	r3, [pc, #84]	; (800aa54 <trunc+0x70>)
 800aa00:	fa43 f101 	asrge.w	r1, r3, r1
 800aa04:	2200      	movlt	r2, #0
 800aa06:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800aa0a:	bfa4      	itt	ge
 800aa0c:	2200      	movge	r2, #0
 800aa0e:	ea2c 0301 	bicge.w	r3, ip, r1
 800aa12:	4693      	mov	fp, r2
 800aa14:	469c      	mov	ip, r3
 800aa16:	ec4c bb10 	vmov	d0, fp, ip
 800aa1a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800aa1e:	2933      	cmp	r1, #51	; 0x33
 800aa20:	dd0d      	ble.n	800aa3e <trunc+0x5a>
 800aa22:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa26:	d1f6      	bne.n	800aa16 <trunc+0x32>
 800aa28:	4663      	mov	r3, ip
 800aa2a:	ee10 2a10 	vmov	r2, s0
 800aa2e:	ee10 0a10 	vmov	r0, s0
 800aa32:	4621      	mov	r1, r4
 800aa34:	f7f5 fc22 	bl	800027c <__adddf3>
 800aa38:	4683      	mov	fp, r0
 800aa3a:	468c      	mov	ip, r1
 800aa3c:	e7eb      	b.n	800aa16 <trunc+0x32>
 800aa3e:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800aa42:	f04f 33ff 	mov.w	r3, #4294967295
 800aa46:	fa23 f000 	lsr.w	r0, r3, r0
 800aa4a:	ea2b 0600 	bic.w	r6, fp, r0
 800aa4e:	46b3      	mov	fp, r6
 800aa50:	46a4      	mov	ip, r4
 800aa52:	e7e0      	b.n	800aa16 <trunc+0x32>
 800aa54:	000fffff 	.word	0x000fffff

0800aa58 <_init>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	bf00      	nop
 800aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5e:	bc08      	pop	{r3}
 800aa60:	469e      	mov	lr, r3
 800aa62:	4770      	bx	lr

0800aa64 <_fini>:
 800aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa66:	bf00      	nop
 800aa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6a:	bc08      	pop	{r3}
 800aa6c:	469e      	mov	lr, r3
 800aa6e:	4770      	bx	lr
