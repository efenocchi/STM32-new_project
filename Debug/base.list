
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001334  08013de4  08013de4  00023de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015118  08015118  00030664  2**0
                  CONTENTS
  4 .ARM          00000008  08015118  08015118  00025118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015120  08015120  00030664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015120  08015120  00025120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015124  08015124  00025124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  08015128  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae0  20000664  0801578c  00030664  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004144  0801578c  00034144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b508  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000628b  00000000  00000000  0006bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029a0  00000000  00000000  00071e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026d8  00000000  00000000  000747c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d555  00000000  00000000  00076ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021f78  00000000  00000000  000a43f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109e6d  00000000  00000000  000c636d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d01da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd78  00000000  00000000  001d0258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000664 	.word	0x20000664
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013dcc 	.word	0x08013dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000668 	.word	0x20000668
 80001cc:	08013dcc 	.word	0x08013dcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b972 	b.w	8000944 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	4688      	mov	r8, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14b      	bne.n	800071e <__udivmoddi4+0xa6>
 8000686:	428a      	cmp	r2, r1
 8000688:	4615      	mov	r5, r2
 800068a:	d967      	bls.n	800075c <__udivmoddi4+0xe4>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0720 	rsb	r7, r2, #32
 8000696:	fa01 f302 	lsl.w	r3, r1, r2
 800069a:	fa20 f707 	lsr.w	r7, r0, r7
 800069e:	4095      	lsls	r5, r2
 80006a0:	ea47 0803 	orr.w	r8, r7, r3
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b0:	fa1f fc85 	uxth.w	ip, r5
 80006b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006bc:	fb07 f10c 	mul.w	r1, r7, ip
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18eb      	adds	r3, r5, r3
 80006c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ca:	f080 811b 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8118 	bls.w	8000904 <__udivmoddi4+0x28c>
 80006d4:	3f02      	subs	r7, #2
 80006d6:	442b      	add	r3, r5
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ec:	45a4      	cmp	ip, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	192c      	adds	r4, r5, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8107 	bcs.w	8000908 <__udivmoddi4+0x290>
 80006fa:	45a4      	cmp	ip, r4
 80006fc:	f240 8104 	bls.w	8000908 <__udivmoddi4+0x290>
 8000700:	3802      	subs	r0, #2
 8000702:	442c      	add	r4, r5
 8000704:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	2700      	movs	r7, #0
 800070e:	b11e      	cbz	r6, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c6 4300 	strd	r4, r3, [r6]
 8000718:	4639      	mov	r1, r7
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	428b      	cmp	r3, r1
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0xbe>
 8000722:	2e00      	cmp	r6, #0
 8000724:	f000 80eb 	beq.w	80008fe <__udivmoddi4+0x286>
 8000728:	2700      	movs	r7, #0
 800072a:	e9c6 0100 	strd	r0, r1, [r6]
 800072e:	4638      	mov	r0, r7
 8000730:	4639      	mov	r1, r7
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	fab3 f783 	clz	r7, r3
 800073a:	2f00      	cmp	r7, #0
 800073c:	d147      	bne.n	80007ce <__udivmoddi4+0x156>
 800073e:	428b      	cmp	r3, r1
 8000740:	d302      	bcc.n	8000748 <__udivmoddi4+0xd0>
 8000742:	4282      	cmp	r2, r0
 8000744:	f200 80fa 	bhi.w	800093c <__udivmoddi4+0x2c4>
 8000748:	1a84      	subs	r4, r0, r2
 800074a:	eb61 0303 	sbc.w	r3, r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	4698      	mov	r8, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d0e0      	beq.n	8000718 <__udivmoddi4+0xa0>
 8000756:	e9c6 4800 	strd	r4, r8, [r6]
 800075a:	e7dd      	b.n	8000718 <__udivmoddi4+0xa0>
 800075c:	b902      	cbnz	r2, 8000760 <__udivmoddi4+0xe8>
 800075e:	deff      	udf	#255	; 0xff
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	2a00      	cmp	r2, #0
 8000766:	f040 808f 	bne.w	8000888 <__udivmoddi4+0x210>
 800076a:	1b49      	subs	r1, r1, r5
 800076c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000770:	fa1f f885 	uxth.w	r8, r5
 8000774:	2701      	movs	r7, #1
 8000776:	fbb1 fcfe 	udiv	ip, r1, lr
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000784:	fb08 f10c 	mul.w	r1, r8, ip
 8000788:	4299      	cmp	r1, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x124>
 800078c:	18eb      	adds	r3, r5, r3
 800078e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x122>
 8000794:	4299      	cmp	r1, r3
 8000796:	f200 80cd 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 800079a:	4684      	mov	ip, r0
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ac:	fb08 f800 	mul.w	r8, r8, r0
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x14c>
 80007b4:	192c      	adds	r4, r5, r4
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x14a>
 80007bc:	45a0      	cmp	r8, r4
 80007be:	f200 80b6 	bhi.w	800092e <__udivmoddi4+0x2b6>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 0408 	sub.w	r4, r4, r8
 80007c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007cc:	e79f      	b.n	800070e <__udivmoddi4+0x96>
 80007ce:	f1c7 0c20 	rsb	ip, r7, #32
 80007d2:	40bb      	lsls	r3, r7
 80007d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007dc:	fa01 f407 	lsl.w	r4, r1, r7
 80007e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ec:	4325      	orrs	r5, r4
 80007ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80007f2:	0c2c      	lsrs	r4, r5, #16
 80007f4:	fb08 3319 	mls	r3, r8, r9, r3
 80007f8:	fa1f fa8e 	uxth.w	sl, lr
 80007fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000800:	fb09 f40a 	mul.w	r4, r9, sl
 8000804:	429c      	cmp	r4, r3
 8000806:	fa02 f207 	lsl.w	r2, r2, r7
 800080a:	fa00 f107 	lsl.w	r1, r0, r7
 800080e:	d90b      	bls.n	8000828 <__udivmoddi4+0x1b0>
 8000810:	eb1e 0303 	adds.w	r3, lr, r3
 8000814:	f109 30ff 	add.w	r0, r9, #4294967295
 8000818:	f080 8087 	bcs.w	800092a <__udivmoddi4+0x2b2>
 800081c:	429c      	cmp	r4, r3
 800081e:	f240 8084 	bls.w	800092a <__udivmoddi4+0x2b2>
 8000822:	f1a9 0902 	sub.w	r9, r9, #2
 8000826:	4473      	add	r3, lr
 8000828:	1b1b      	subs	r3, r3, r4
 800082a:	b2ad      	uxth	r5, r5
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000838:	fb00 fa0a 	mul.w	sl, r0, sl
 800083c:	45a2      	cmp	sl, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x1da>
 8000840:	eb1e 0404 	adds.w	r4, lr, r4
 8000844:	f100 33ff 	add.w	r3, r0, #4294967295
 8000848:	d26b      	bcs.n	8000922 <__udivmoddi4+0x2aa>
 800084a:	45a2      	cmp	sl, r4
 800084c:	d969      	bls.n	8000922 <__udivmoddi4+0x2aa>
 800084e:	3802      	subs	r0, #2
 8000850:	4474      	add	r4, lr
 8000852:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000856:	fba0 8902 	umull	r8, r9, r0, r2
 800085a:	eba4 040a 	sub.w	r4, r4, sl
 800085e:	454c      	cmp	r4, r9
 8000860:	46c2      	mov	sl, r8
 8000862:	464b      	mov	r3, r9
 8000864:	d354      	bcc.n	8000910 <__udivmoddi4+0x298>
 8000866:	d051      	beq.n	800090c <__udivmoddi4+0x294>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d069      	beq.n	8000940 <__udivmoddi4+0x2c8>
 800086c:	ebb1 050a 	subs.w	r5, r1, sl
 8000870:	eb64 0403 	sbc.w	r4, r4, r3
 8000874:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000878:	40fd      	lsrs	r5, r7
 800087a:	40fc      	lsrs	r4, r7
 800087c:	ea4c 0505 	orr.w	r5, ip, r5
 8000880:	e9c6 5400 	strd	r5, r4, [r6]
 8000884:	2700      	movs	r7, #0
 8000886:	e747      	b.n	8000718 <__udivmoddi4+0xa0>
 8000888:	f1c2 0320 	rsb	r3, r2, #32
 800088c:	fa20 f703 	lsr.w	r7, r0, r3
 8000890:	4095      	lsls	r5, r2
 8000892:	fa01 f002 	lsl.w	r0, r1, r2
 8000896:	fa21 f303 	lsr.w	r3, r1, r3
 800089a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800089e:	4338      	orrs	r0, r7
 80008a0:	0c01      	lsrs	r1, r0, #16
 80008a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008a6:	fa1f f885 	uxth.w	r8, r5
 80008aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb07 f308 	mul.w	r3, r7, r8
 80008b6:	428b      	cmp	r3, r1
 80008b8:	fa04 f402 	lsl.w	r4, r4, r2
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x256>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008c4:	d22f      	bcs.n	8000926 <__udivmoddi4+0x2ae>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d92d      	bls.n	8000926 <__udivmoddi4+0x2ae>
 80008ca:	3f02      	subs	r7, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1acb      	subs	r3, r1, r3
 80008d0:	b281      	uxth	r1, r0
 80008d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008de:	fb00 f308 	mul.w	r3, r0, r8
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x27e>
 80008e6:	1869      	adds	r1, r5, r1
 80008e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ec:	d217      	bcs.n	800091e <__udivmoddi4+0x2a6>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d915      	bls.n	800091e <__udivmoddi4+0x2a6>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4429      	add	r1, r5
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008fc:	e73b      	b.n	8000776 <__udivmoddi4+0xfe>
 80008fe:	4637      	mov	r7, r6
 8000900:	4630      	mov	r0, r6
 8000902:	e709      	b.n	8000718 <__udivmoddi4+0xa0>
 8000904:	4607      	mov	r7, r0
 8000906:	e6e7      	b.n	80006d8 <__udivmoddi4+0x60>
 8000908:	4618      	mov	r0, r3
 800090a:	e6fb      	b.n	8000704 <__udivmoddi4+0x8c>
 800090c:	4541      	cmp	r1, r8
 800090e:	d2ab      	bcs.n	8000868 <__udivmoddi4+0x1f0>
 8000910:	ebb8 0a02 	subs.w	sl, r8, r2
 8000914:	eb69 020e 	sbc.w	r2, r9, lr
 8000918:	3801      	subs	r0, #1
 800091a:	4613      	mov	r3, r2
 800091c:	e7a4      	b.n	8000868 <__udivmoddi4+0x1f0>
 800091e:	4660      	mov	r0, ip
 8000920:	e7e9      	b.n	80008f6 <__udivmoddi4+0x27e>
 8000922:	4618      	mov	r0, r3
 8000924:	e795      	b.n	8000852 <__udivmoddi4+0x1da>
 8000926:	4667      	mov	r7, ip
 8000928:	e7d1      	b.n	80008ce <__udivmoddi4+0x256>
 800092a:	4681      	mov	r9, r0
 800092c:	e77c      	b.n	8000828 <__udivmoddi4+0x1b0>
 800092e:	3802      	subs	r0, #2
 8000930:	442c      	add	r4, r5
 8000932:	e747      	b.n	80007c4 <__udivmoddi4+0x14c>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	442b      	add	r3, r5
 800093a:	e72f      	b.n	800079c <__udivmoddi4+0x124>
 800093c:	4638      	mov	r0, r7
 800093e:	e708      	b.n	8000752 <__udivmoddi4+0xda>
 8000940:	4637      	mov	r7, r6
 8000942:	e6e9      	b.n	8000718 <__udivmoddi4+0xa0>

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b2f      	cmp	r3, #47	; 0x2f
 8000956:	d906      	bls.n	8000966 <Hex2Num+0x1e>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b39      	cmp	r3, #57	; 0x39
 800095c:	d803      	bhi.n	8000966 <Hex2Num+0x1e>
        return a - '0';
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3b30      	subs	r3, #48	; 0x30
 8000962:	b2db      	uxtb	r3, r3
 8000964:	e014      	b.n	8000990 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b60      	cmp	r3, #96	; 0x60
 800096a:	d906      	bls.n	800097a <Hex2Num+0x32>
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b66      	cmp	r3, #102	; 0x66
 8000970:	d803      	bhi.n	800097a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3b57      	subs	r3, #87	; 0x57
 8000976:	b2db      	uxtb	r3, r3
 8000978:	e00a      	b.n	8000990 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b40      	cmp	r3, #64	; 0x40
 800097e:	d906      	bls.n	800098e <Hex2Num+0x46>
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b46      	cmp	r3, #70	; 0x46
 8000984:	d803      	bhi.n	800098e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3b37      	subs	r3, #55	; 0x37
 800098a:	b2db      	uxtb	r3, r3
 800098c:	e000      	b.n	8000990 <Hex2Num+0x48>
    }

    return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80009ae:	e012      	b.n	80009d6 <ParseHexNumber+0x3a>
        sum <<= 4;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffc4 	bl	8000948 <Hex2Num>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
        ptr++;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
        i++;
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	3301      	adds	r3, #1
 80009d4:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b2f      	cmp	r3, #47	; 0x2f
 80009dc:	d903      	bls.n	80009e6 <ParseHexNumber+0x4a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b39      	cmp	r3, #57	; 0x39
 80009e4:	d9e4      	bls.n	80009b0 <ParseHexNumber+0x14>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b60      	cmp	r3, #96	; 0x60
 80009ec:	d903      	bls.n	80009f6 <ParseHexNumber+0x5a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b66      	cmp	r3, #102	; 0x66
 80009f4:	d9dc      	bls.n	80009b0 <ParseHexNumber+0x14>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d903      	bls.n	8000a06 <ParseHexNumber+0x6a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b46      	cmp	r3, #70	; 0x46
 8000a04:	d9d4      	bls.n	80009b0 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <ParseHexNumber+0x76>
        *cnt = i;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	7afa      	ldrb	r2, [r7, #11]
 8000a10:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b2d      	cmp	r3, #45	; 0x2d
 8000a38:	d119      	bne.n	8000a6e <ParseNumber+0x52>
        minus = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3301      	adds	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
        i++;
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a4a:	e010      	b.n	8000a6e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b30      	subs	r3, #48	; 0x30
 8000a5e:	4413      	add	r3, r2
 8000a60:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
        i++;
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b2f      	cmp	r3, #47	; 0x2f
 8000a74:	d903      	bls.n	8000a7e <ParseNumber+0x62>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b39      	cmp	r3, #57	; 0x39
 8000a7c:	d9e6      	bls.n	8000a4c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <ParseNumber+0x6e>
        *cnt = i;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	7bba      	ldrb	r2, [r7, #14]
 8000a88:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <ParseNumber+0x7a>
        return 0 - sum;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	425b      	negs	r3, r3
 8000a94:	e000      	b.n	8000a98 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000a96:	68bb      	ldr	r3, [r7, #8]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000ab2:	e019      	b.n	8000ae8 <ParseMAC+0x44>
    hexcnt = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b3a      	cmp	r3, #58	; 0x3a
 8000abe:	d00e      	beq.n	8000ade <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000ac0:	f107 030e 	add.w	r3, r7, #14
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ff68 	bl	800099c <ParseHexNumber>
 8000acc:	4601      	mov	r1, r0
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	73fa      	strb	r2, [r7, #15]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1e1      	bne.n	8000ab4 <ParseMAC+0x10>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000b06:	e019      	b.n	8000b3c <ParseIP+0x44>
    hexcnt = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b2e      	cmp	r3, #46	; 0x2e
 8000b12:	d00e      	beq.n	8000b32 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff7e 	bl	8000a1c <ParseNumber>
 8000b20:	4601      	mov	r1, r0
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	73fa      	strb	r2, [r7, #15]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e1      	bne.n	8000b08 <ParseIP+0x10>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	4934      	ldr	r1, [pc, #208]	; (8000c30 <AT_ParseInfo+0xe4>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f011 ff83 	bl	8012a6c <strtok>
 8000b66:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000b68:	e05a      	b.n	8000c20 <AT_ParseInfo+0xd4>
    switch (num++) {
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	72fa      	strb	r2, [r7, #11]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d84f      	bhi.n	8000c14 <AT_ParseInfo+0xc8>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <AT_ParseInfo+0x30>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b99 	.word	0x08000b99
 8000b80:	08000ba7 	.word	0x08000ba7
 8000b84:	08000bb7 	.word	0x08000bb7
 8000b88:	08000bc7 	.word	0x08000bc7
 8000b8c:	08000bd7 	.word	0x08000bd7
 8000b90:	08000be7 	.word	0x08000be7
 8000b94:	08000bfb 	.word	0x08000bfb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f011 ff34 	bl	8012a0c <strncpy>
      break;
 8000ba4:	e037      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3320      	adds	r3, #32
 8000baa:	2218      	movs	r2, #24
 8000bac:	68f9      	ldr	r1, [r7, #12]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f011 ff2c 	bl	8012a0c <strncpy>
      break;
 8000bb4:	e02f      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3338      	adds	r3, #56	; 0x38
 8000bba:	2210      	movs	r2, #16
 8000bbc:	68f9      	ldr	r1, [r7, #12]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f011 ff24 	bl	8012a0c <strncpy>
      break;
 8000bc4:	e027      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3348      	adds	r3, #72	; 0x48
 8000bca:	2210      	movs	r2, #16
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f011 ff1c 	bl	8012a0c <strncpy>
      break;
 8000bd4:	e01f      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3358      	adds	r3, #88	; 0x58
 8000bda:	2210      	movs	r2, #16
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f011 ff14 	bl	8012a0c <strncpy>
      break;
 8000be4:	e017      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000be6:	2100      	movs	r1, #0
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff ff17 	bl	8000a1c <ParseNumber>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000bf8:	e00d      	b.n	8000c16 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <AT_ParseInfo+0xe8>)
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f011 ff35 	bl	8012a6c <strtok>
 8000c02:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3368      	adds	r3, #104	; 0x68
 8000c08:	2220      	movs	r2, #32
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f011 fefd 	bl	8012a0c <strncpy>
      break;
 8000c12:	e000      	b.n	8000c16 <AT_ParseInfo+0xca>

    default: break;
 8000c14:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000c16:	4906      	ldr	r1, [pc, #24]	; (8000c30 <AT_ParseInfo+0xe4>)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f011 ff27 	bl	8012a6c <strtok>
 8000c1e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1a1      	bne.n	8000b6a <AT_ParseInfo+0x1e>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08013e14 	.word	0x08013e14
 8000c34:	08013e18 	.word	0x08013e18

08000c38 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	4952      	ldr	r1, [pc, #328]	; (8000d94 <AT_ParseConnSettings+0x15c>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f011 ff0d 	bl	8012a6c <strtok>
 8000c52:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000c54:	e095      	b.n	8000d82 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	73fa      	strb	r2, [r7, #15]
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	d87f      	bhi.n	8000d60 <AT_ParseConnSettings+0x128>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <AT_ParseConnSettings+0x30>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000ca7 	.word	0x08000ca7
 8000c70:	08000cb7 	.word	0x08000cb7
 8000c74:	08000ccb 	.word	0x08000ccb
 8000c78:	08000cdf 	.word	0x08000cdf
 8000c7c:	08000cf3 	.word	0x08000cf3
 8000c80:	08000d01 	.word	0x08000d01
 8000c84:	08000d0f 	.word	0x08000d0f
 8000c88:	08000d1d 	.word	0x08000d1d
 8000c8c:	08000d2b 	.word	0x08000d2b
 8000c90:	08000d39 	.word	0x08000d39
 8000c94:	08000d4d 	.word	0x08000d4d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2221      	movs	r2, #33	; 0x21
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f011 feb4 	bl	8012a0c <strncpy>
      break;
 8000ca4:	e05d      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3321      	adds	r3, #33	; 0x21
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f011 feac 	bl	8012a0c <strncpy>
      break;
 8000cb4:	e055      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f7ff feaf 	bl	8000a1c <ParseNumber>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000cc8:	e04b      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fea5 	bl	8000a1c <ParseNumber>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000cdc:	e041      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f7ff fe9b 	bl	8000a1c <ParseNumber>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000cf0:	e037      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3348      	adds	r3, #72	; 0x48
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f7ff fefd 	bl	8000af8 <ParseIP>
      break;
 8000cfe:	e030      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	334c      	adds	r3, #76	; 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff fef6 	bl	8000af8 <ParseIP>
      break;
 8000d0c:	e029      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3350      	adds	r3, #80	; 0x50
 8000d12:	4619      	mov	r1, r3
 8000d14:	68b8      	ldr	r0, [r7, #8]
 8000d16:	f7ff feef 	bl	8000af8 <ParseIP>
      break;
 8000d1a:	e022      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3354      	adds	r3, #84	; 0x54
 8000d20:	4619      	mov	r1, r3
 8000d22:	68b8      	ldr	r0, [r7, #8]
 8000d24:	f7ff fee8 	bl	8000af8 <ParseIP>
      break;
 8000d28:	e01b      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3358      	adds	r3, #88	; 0x58
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f7ff fee1 	bl	8000af8 <ParseIP>
      break;
 8000d36:	e014      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f7ff fe6e 	bl	8000a1c <ParseNumber>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000d4a:	e00a      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	68b8      	ldr	r0, [r7, #8]
 8000d50:	f7ff fe64 	bl	8000a1c <ParseNumber>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000d5e:	e000      	b.n	8000d62 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8000d60:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <AT_ParseConnSettings+0x15c>)
 8000d64:	2000      	movs	r0, #0
 8000d66:	f011 fe81 	bl	8012a6c <strtok>
 8000d6a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <AT_ParseConnSettings+0x14a>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7a:	d102      	bne.n	8000d82 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f af66 	bne.w	8000c56 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08013e14 	.word	0x08013e14

08000d98 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3302      	adds	r3, #2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b31      	cmp	r3, #49	; 0x31
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000dde:	68b8      	ldr	r0, [r7, #8]
 8000de0:	f7ff f9f6 	bl	80001d0 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b299      	uxth	r1, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000dee:	461a      	mov	r2, r3
 8000df0:	68b8      	ldr	r0, [r7, #8]
 8000df2:	47a0      	blx	r4
 8000df4:	4603      	mov	r3, r0
 8000df6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd3e      	ble.n	8000e7c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	4798      	blx	r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dd27      	ble.n	8000e6e <AT_ExecuteCommand+0xaa>
 8000e1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e26:	dc22      	bgt.n	8000e6e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000e28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e30:	d105      	bne.n	8000e3e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000e3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000e4a:	490f      	ldr	r1, [pc, #60]	; (8000e88 <AT_ExecuteCommand+0xc4>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f011 fdf2 	bl	8012a36 <strstr>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e010      	b.n	8000e7e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000e5c:	490b      	ldr	r1, [pc, #44]	; (8000e8c <AT_ExecuteCommand+0xc8>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f011 fde9 	bl	8012a36 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e007      	b.n	8000e7e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e72:	f113 0f04 	cmn.w	r3, #4
 8000e76:	d101      	bne.n	8000e7c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e000      	b.n	8000e7e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000e7c:	2304      	movs	r3, #4
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	08013e28 	.word	0x08013e28
 8000e8c:	08013e34 	.word	0x08013e34

08000e90 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f7ff f990 	bl	80001d0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000eb4:	8a7b      	ldrh	r3, [r7, #18]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <AT_RequestSendData+0x32>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e053      	b.n	8000f6a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000ece:	8a79      	ldrh	r1, [r7, #18]
 8000ed0:	68b8      	ldr	r0, [r7, #8]
 8000ed2:	4798      	blx	r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000ed8:	8a3a      	ldrh	r2, [r7, #16]
 8000eda:	8a7b      	ldrh	r3, [r7, #18]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d143      	bne.n	8000f68 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000eec:	8879      	ldrh	r1, [r7, #2]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000ef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d131      	bne.n	8000f64 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6a38      	ldr	r0, [r7, #32]
 8000f10:	4798      	blx	r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dd19      	ble.n	8000f52 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8000f1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f22:	6a3a      	ldr	r2, [r7, #32]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000f2a:	4912      	ldr	r1, [pc, #72]	; (8000f74 <AT_RequestSendData+0xe4>)
 8000f2c:	6a38      	ldr	r0, [r7, #32]
 8000f2e:	f011 fd82 	bl	8012a36 <strstr>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e016      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000f3c:	490e      	ldr	r1, [pc, #56]	; (8000f78 <AT_RequestSendData+0xe8>)
 8000f3e:	6a38      	ldr	r0, [r7, #32]
 8000f40:	f011 fd79 	bl	8012a36 <strstr>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e00d      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e00b      	b.n	8000f6a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f56:	f113 0f04 	cmn.w	r3, #4
 8000f5a:	d101      	bne.n	8000f60 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e004      	b.n	8000f6a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000f64:	2302      	movs	r3, #2
 8000f66:	e000      	b.n	8000f6a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000f68:	2304      	movs	r3, #4
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08013e28 	.word	0x08013e28
 8000f78:	08013e34 	.word	0x08013e34

08000f7c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f90:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000f98:	68b8      	ldr	r0, [r7, #8]
 8000f9a:	f7ff f919 	bl	80001d0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	47a0      	blx	r4
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd6f      	ble.n	8001094 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	4798      	blx	r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d104      	bne.n	8000fdc <AT_RequestReceiveData+0x60>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d001      	beq.n	8000fe0 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e05a      	b.n	8001096 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3b02      	subs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
    p+=2;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d94a      	bls.n	8001088 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8000ff2:	e002      	b.n	8000ffa <AT_RequestReceiveData+0x7e>
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AT_RequestReceiveData+0x92>
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3b01      	subs	r3, #1
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b15      	cmp	r3, #21
 800100c:	d0f2      	beq.n	8000ff4 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4413      	add	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3b08      	subs	r3, #8
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4413      	add	r3, r2
 8001020:	491f      	ldr	r1, [pc, #124]	; (80010a0 <AT_RequestReceiveData+0x124>)
 8001022:	4618      	mov	r0, r3
 8001024:	f011 fd07 	bl	8012a36 <strstr>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b08      	subs	r3, #8
 8001034:	b29a      	uxth	r2, r3
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	429a      	cmp	r2, r3
 8001042:	d202      	bcs.n	800104a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	6939      	ldr	r1, [r7, #16]
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f011 fbef 	bl	8012836 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e01c      	b.n	8001096 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3b04      	subs	r3, #4
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4413      	add	r3, r2
 8001064:	2204      	movs	r2, #4
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <AT_RequestReceiveData+0x128>)
 8001068:	4618      	mov	r0, r3
 800106a:	f011 fbd5 	bl	8012818 <memcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d104      	bne.n	800107e <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800107a:	2305      	movs	r3, #5
 800107c:	e00b      	b.n	8001096 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001084:	2305      	movs	r3, #5
 8001086:	e006      	b.n	8001096 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f113 0f04 	cmn.w	r3, #4
 800108e:	d101      	bne.n	8001094 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001090:	2306      	movs	r3, #6
 8001092:	e000      	b.n	8001096 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001094:	2304      	movs	r3, #4
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	08013e28 	.word	0x08013e28
 80010a4:	08013e3c 	.word	0x08013e3c

080010a8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80010b0:	2302      	movs	r3, #2
 80010b2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80010ba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80010c4:	2000      	movs	r0, #0
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d113      	bne.n	80010f6 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010d4:	461a      	mov	r2, r3
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <ES_WIFI_Init+0x58>)
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fe73 	bl	8000dc4 <AT_ExecuteCommand>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d106      	bne.n	80010f6 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fd2b 	bl	8000b4c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08013e44 	.word	0x08013e44

08001104 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <ES_WIFI_RegisterBusIO+0x2c>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001130:	2302      	movs	r3, #2
 8001132:	e014      	b.n	800115e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	4931      	ldr	r1, [pc, #196]	; (8001248 <ES_WIFI_Connect+0xdc>)
 8001184:	4618      	mov	r0, r3
 8001186:	f011 fc19 	bl	80129bc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001196:	461a      	mov	r2, r3
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fe13 	bl	8000dc4 <AT_ExecuteCommand>
 800119e:	4603      	mov	r3, r0
 80011a0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d14a      	bne.n	800123e <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4926      	ldr	r1, [pc, #152]	; (800124c <ES_WIFI_Connect+0xe0>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f011 fc02 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011c4:	461a      	mov	r2, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fdfc 	bl	8000dc4 <AT_ExecuteCommand>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d133      	bne.n	800123e <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	491a      	ldr	r1, [pc, #104]	; (8001250 <ES_WIFI_Connect+0xe4>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f011 fbe7 	bl	80129bc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011fa:	461a      	mov	r2, r3
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff fde1 	bl	8000dc4 <AT_ExecuteCommand>
 8001202:	4603      	mov	r3, r0
 8001204:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d118      	bne.n	800123e <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <ES_WIFI_Connect+0xe8>)
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001224:	461a      	mov	r2, r3
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fdcc 	bl	8000dc4 <AT_ExecuteCommand>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08013e5c 	.word	0x08013e5c
 800124c:	08013e64 	.word	0x08013e64
 8001250:	08013e6c 	.word	0x08013e6c
 8001254:	08013e74 	.word	0x08013e74

08001258 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <ES_WIFI_IsConnected+0x54>)
 8001268:	6810      	ldr	r0, [r2, #0]
 800126a:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001278:	461a      	mov	r2, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fda2 	bl	8000dc4 <AT_ExecuteCommand>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	33d2      	adds	r3, #210	; 0xd2
 8001294:	4619      	mov	r1, r3
 8001296:	4610      	mov	r0, r2
 8001298:	f7ff fd7e 	bl	8000d98 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	08013e78 	.word	0x08013e78

080012b0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <ES_WIFI_GetNetworkSettings+0x50>)
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012d0:	461a      	mov	r2, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd76 	bl	8000dc4 <AT_ExecuteCommand>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	338d      	adds	r3, #141	; 0x8d
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f7ff fca2 	bl	8000c38 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	08013e80 	.word	0x08013e80

08001304 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <ES_WIFI_GetMACAddress+0x58>)
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001326:	461a      	mov	r2, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fd4b 	bl	8000dc4 <AT_ExecuteCommand>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800133e:	3302      	adds	r3, #2
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <ES_WIFI_GetMACAddress+0x5c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f011 fb92 	bl	8012a6c <strtok>
 8001348:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fba9 	bl	8000aa4 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	08013edc 	.word	0x08013edc
 8001360:	08013ee0 	.word	0x08013ee0

08001364 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b087      	sub	sp, #28
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <ES_WIFI_StartClientConnection+0x1e>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d105      	bne.n	800138e <ES_WIFI_StartClientConnection+0x2a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <ES_WIFI_StartClientConnection+0x2a>
 800138a:	2302      	movs	r3, #2
 800138c:	e0c3      	b.n	8001516 <ES_WIFI_StartClientConnection+0x1b2>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	461a      	mov	r2, r3
 800139a:	4961      	ldr	r1, [pc, #388]	; (8001520 <ES_WIFI_StartClientConnection+0x1bc>)
 800139c:	f011 fb0e 	bl	80129bc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013ac:	461a      	mov	r2, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd08 	bl	8000dc4 <AT_ExecuteCommand>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4956      	ldr	r1, [pc, #344]	; (8001524 <ES_WIFI_StartClientConnection+0x1c0>)
 80013cc:	f011 faf6 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013dc:	461a      	mov	r2, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fcf0 	bl	8000dc4 <AT_ExecuteCommand>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d114      	bne.n	8001418 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	461a      	mov	r2, r3
 80013fa:	494b      	ldr	r1, [pc, #300]	; (8001528 <ES_WIFI_StartClientConnection+0x1c4>)
 80013fc:	f011 fade 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800140c:	461a      	mov	r2, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fcd8 	bl	8000dc4 <AT_ExecuteCommand>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11c      	bne.n	8001458 <ES_WIFI_StartClientConnection+0xf4>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <ES_WIFI_StartClientConnection+0xca>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d114      	bne.n	8001458 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	461a      	mov	r2, r3
 800143a:	493c      	ldr	r1, [pc, #240]	; (800152c <ES_WIFI_StartClientConnection+0x1c8>)
 800143c:	f011 fabe 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800144c:	461a      	mov	r2, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fcb8 	bl	8000dc4 <AT_ExecuteCommand>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d128      	bne.n	80014b0 <ES_WIFI_StartClientConnection+0x14c>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <ES_WIFI_StartClientConnection+0x10a>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d120      	bne.n	80014b0 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	4619      	mov	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	79db      	ldrb	r3, [r3, #7]
 800147e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001484:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	460a      	mov	r2, r1
 8001492:	4927      	ldr	r1, [pc, #156]	; (8001530 <ES_WIFI_StartClientConnection+0x1cc>)
 8001494:	f011 fa92 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014a4:	461a      	mov	r2, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fc8c 	bl	8000dc4 <AT_ExecuteCommand>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d117      	bne.n	80014e6 <ES_WIFI_StartClientConnection+0x182>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d113      	bne.n	80014e6 <ES_WIFI_StartClientConnection+0x182>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <ES_WIFI_StartClientConnection+0x1d0>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	6018      	str	r0, [r3, #0]
 80014ca:	8892      	ldrh	r2, [r2, #4]
 80014cc:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014da:	461a      	mov	r2, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fc71 	bl	8000dc4 <AT_ExecuteCommand>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d113      	bne.n	8001514 <ES_WIFI_StartClientConnection+0x1b0>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <ES_WIFI_StartClientConnection+0x1d4>)
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	6018      	str	r0, [r3, #0]
 80014f8:	8892      	ldrh	r2, [r2, #4]
 80014fa:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001508:	461a      	mov	r2, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fc5a 	bl	8000dc4 <AT_ExecuteCommand>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08013f44 	.word	0x08013f44
 8001524:	08013f4c 	.word	0x08013f4c
 8001528:	08013f54 	.word	0x08013f54
 800152c:	08013f5c 	.word	0x08013f5c
 8001530:	08013f64 	.word	0x08013f64
 8001534:	08013f74 	.word	0x08013f74
 8001538:	08013f7c 	.word	0x08013f7c

0800153c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	460b      	mov	r3, r1
 800154a:	72fb      	strb	r3, [r7, #11]
 800154c:	4613      	mov	r3, r2
 800154e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001550:	2302      	movs	r3, #2
 8001552:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e001      	b.n	8001564 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800156a:	d302      	bcc.n	8001572 <ES_WIFI_SendData+0x36>
 800156c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001570:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	893a      	ldrh	r2, [r7, #8]
 8001576:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800157e:	7afa      	ldrb	r2, [r7, #11]
 8001580:	4942      	ldr	r1, [pc, #264]	; (800168c <ES_WIFI_SendData+0x150>)
 8001582:	4618      	mov	r0, r3
 8001584:	f011 fa1a 	bl	80129bc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001594:	461a      	mov	r2, r3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff fc14 	bl	8000dc4 <AT_ExecuteCommand>
 800159c:	4603      	mov	r3, r0
 800159e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d15e      	bne.n	8001664 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4938      	ldr	r1, [pc, #224]	; (8001690 <ES_WIFI_SendData+0x154>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f011 fa03 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fbfd 	bl	8000dc4 <AT_ExecuteCommand>
 80015ca:	4603      	mov	r3, r0
 80015cc:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 80015ce:	7cfb      	ldrb	r3, [r7, #19]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13d      	bne.n	8001650 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015da:	893a      	ldrh	r2, [r7, #8]
 80015dc:	492d      	ldr	r1, [pc, #180]	; (8001694 <ES_WIFI_SendData+0x158>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f011 f9ec 	bl	80129bc <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f0:	893a      	ldrh	r2, [r7, #8]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fc49 	bl	8000e90 <AT_RequestSendData>
 80015fe:	4603      	mov	r3, r0
 8001600:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001602:	7cfb      	ldrb	r3, [r7, #19]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d119      	bne.n	800163c <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800160e:	4922      	ldr	r1, [pc, #136]	; (8001698 <ES_WIFI_SendData+0x15c>)
 8001610:	4618      	mov	r0, r3
 8001612:	f011 fa10 	bl	8012a36 <strstr>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02c      	beq.n	8001676 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800161c:	f640 025b 	movw	r2, #2139	; 0x85b
 8001620:	491e      	ldr	r1, [pc, #120]	; (800169c <ES_WIFI_SendData+0x160>)
 8001622:	481f      	ldr	r0, [pc, #124]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001624:	f011 f91a 	bl	801285c <iprintf>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <ES_WIFI_SendData+0x168>)
 8001632:	f011 f913 	bl	801285c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001636:	2302      	movs	r3, #2
 8001638:	74fb      	strb	r3, [r7, #19]
 800163a:	e01c      	b.n	8001676 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800163c:	f640 0261 	movw	r2, #2145	; 0x861
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <ES_WIFI_SendData+0x160>)
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001644:	f011 f90a 	bl	801285c <iprintf>
 8001648:	4817      	ldr	r0, [pc, #92]	; (80016a8 <ES_WIFI_SendData+0x16c>)
 800164a:	f011 f97b 	bl	8012944 <puts>
 800164e:	e012      	b.n	8001676 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001650:	f640 0266 	movw	r2, #2150	; 0x866
 8001654:	4911      	ldr	r1, [pc, #68]	; (800169c <ES_WIFI_SendData+0x160>)
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <ES_WIFI_SendData+0x164>)
 8001658:	f011 f900 	bl	801285c <iprintf>
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <ES_WIFI_SendData+0x170>)
 800165e:	f011 f971 	bl	8012944 <puts>
 8001662:	e008      	b.n	8001676 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001664:	f640 026b 	movw	r2, #2155	; 0x86b
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <ES_WIFI_SendData+0x160>)
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <ES_WIFI_SendData+0x164>)
 800166c:	f011 f8f6 	bl	801285c <iprintf>
 8001670:	480f      	ldr	r0, [pc, #60]	; (80016b0 <ES_WIFI_SendData+0x174>)
 8001672:	f011 f967 	bl	8012944 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001676:	7cfb      	ldrb	r3, [r7, #19]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d102      	bne.n	8001682 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001682:	7cfb      	ldrb	r3, [r7, #19]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08013f44 	.word	0x08013f44
 8001690:	080140f8 	.word	0x080140f8
 8001694:	08014100 	.word	0x08014100
 8001698:	0801410c 	.word	0x0801410c
 800169c:	08013fd4 	.word	0x08013fd4
 80016a0:	08013fec 	.word	0x08013fec
 80016a4:	08014114 	.word	0x08014114
 80016a8:	08014130 	.word	0x08014130
 80016ac:	0801414c 	.word	0x0801414c
 80016b0:	08014160 	.word	0x08014160

080016b4 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
 80016c4:	4613      	mov	r3, r2
 80016c6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80016c8:	2302      	movs	r3, #2
 80016ca:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e001      	b.n	80016dc <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80016dc:	893b      	ldrh	r3, [r7, #8]
 80016de:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016e2:	f200 808a 	bhi.w	80017fa <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ec:	7afa      	ldrb	r2, [r7, #11]
 80016ee:	4945      	ldr	r1, [pc, #276]	; (8001804 <ES_WIFI_ReceiveData+0x150>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f011 f963 	bl	80129bc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001702:	461a      	mov	r2, r3
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fb5d 	bl	8000dc4 <AT_ExecuteCommand>
 800170a:	4603      	mov	r3, r0
 800170c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d164      	bne.n	80017de <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800171a:	893a      	ldrh	r2, [r7, #8]
 800171c:	493a      	ldr	r1, [pc, #232]	; (8001808 <ES_WIFI_ReceiveData+0x154>)
 800171e:	4618      	mov	r0, r3
 8001720:	f011 f94c 	bl	80129bc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001730:	461a      	mov	r2, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fb46 	bl	8000dc4 <AT_ExecuteCommand>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d140      	bne.n	80017c4 <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4930      	ldr	r1, [pc, #192]	; (800180c <ES_WIFI_ReceiveData+0x158>)
 800174c:	4618      	mov	r0, r3
 800174e:	f011 f935 	bl	80129bc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175e:	461a      	mov	r2, r3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fb2f 	bl	8000dc4 <AT_ExecuteCommand>
 8001766:	4603      	mov	r3, r0
 8001768:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11f      	bne.n	80017b0 <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <ES_WIFI_ReceiveData+0x15c>)
 8001778:	6810      	ldr	r0, [r2, #0]
 800177a:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001782:	893a      	ldrh	r2, [r7, #8]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fbf5 	bl	8000f7c <AT_RequestReceiveData>
 8001792:	4603      	mov	r3, r0
 8001794:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02e      	beq.n	80017fa <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800179c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80017a0:	491c      	ldr	r1, [pc, #112]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017a2:	481d      	ldr	r0, [pc, #116]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017a4:	f011 f85a 	bl	801285c <iprintf>
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <ES_WIFI_ReceiveData+0x168>)
 80017aa:	f011 f8cb 	bl	8012944 <puts>
 80017ae:	e024      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 80017b0:	f640 1201 	movw	r2, #2305	; 0x901
 80017b4:	4917      	ldr	r1, [pc, #92]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017b8:	f011 f850 	bl	801285c <iprintf>
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <ES_WIFI_ReceiveData+0x16c>)
 80017be:	f011 f8c1 	bl	8012944 <puts>
 80017c2:	e01a      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 80017c4:	f640 1206 	movw	r2, #2310	; 0x906
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017ca:	4813      	ldr	r0, [pc, #76]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017cc:	f011 f846 	bl	801285c <iprintf>
 80017d0:	4814      	ldr	r0, [pc, #80]	; (8001824 <ES_WIFI_ReceiveData+0x170>)
 80017d2:	f011 f8b7 	bl	8012944 <puts>
        *Receivedlen = 0;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e00d      	b.n	80017fa <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 80017de:	f640 120c 	movw	r2, #2316	; 0x90c
 80017e2:	490c      	ldr	r1, [pc, #48]	; (8001814 <ES_WIFI_ReceiveData+0x160>)
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <ES_WIFI_ReceiveData+0x164>)
 80017e6:	f011 f839 	bl	801285c <iprintf>
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <ES_WIFI_ReceiveData+0x174>)
 80017ec:	f011 f8aa 	bl	8012944 <puts>
      issue15++;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <ES_WIFI_ReceiveData+0x178>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a0d      	ldr	r2, [pc, #52]	; (800182c <ES_WIFI_ReceiveData+0x178>)
 80017f8:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	08013f44 	.word	0x08013f44
 8001808:	08014184 	.word	0x08014184
 800180c:	0801418c 	.word	0x0801418c
 8001810:	08014194 	.word	0x08014194
 8001814:	08013fd4 	.word	0x08013fd4
 8001818:	08013fec 	.word	0x08013fec
 800181c:	08014198 	.word	0x08014198
 8001820:	080141b8 	.word	0x080141b8
 8001824:	080141d0 	.word	0x080141d0
 8001828:	080141f0 	.word	0x080141f0
 800182c:	20000680 	.word	0x20000680

08001830 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	6593      	str	r3, [r2, #88]	; 0x58
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a49      	ldr	r2, [pc, #292]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a43      	ldr	r2, [pc, #268]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <SPI_WIFI_MspInit+0x164>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189e:	483e      	ldr	r0, [pc, #248]	; (8001998 <SPI_WIFI_MspInit+0x168>)
 80018a0:	f008 fcda 	bl	800a258 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4836      	ldr	r0, [pc, #216]	; (8001998 <SPI_WIFI_MspInit+0x168>)
 80018be:	f008 fa17 	bl	8009cf0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <SPI_WIFI_MspInit+0x16c>)
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4831      	ldr	r0, [pc, #196]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 80018da:	f008 fa09 	bl	8009cf0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80018de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4829      	ldr	r0, [pc, #164]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 80018fc:	f008 f9f8 	bl	8009cf0 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001900:	2201      	movs	r2, #1
 8001902:	2101      	movs	r1, #1
 8001904:	4826      	ldr	r0, [pc, #152]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 8001906:	f008 fca7 	bl	800a258 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800190a:	2301      	movs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <SPI_WIFI_MspInit+0x170>)
 8001922:	f008 f9e5 	bl	8009cf0 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001938:	2306      	movs	r3, #6
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001944:	f008 f9d4 	bl	8009cf0 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800195a:	2306      	movs	r3, #6
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	480f      	ldr	r0, [pc, #60]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001966:	f008 f9c3 	bl	8009cf0 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800196a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800197c:	2306      	movs	r3, #6
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <SPI_WIFI_MspInit+0x174>)
 8001988:	f008 f9b2 	bl	8009cf0 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	48000400 	.word	0x48000400
 800199c:	10110000 	.word	0x10110000
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48000800 	.word	0x48000800

080019a8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d145      	bne.n	8001a48 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <SPI_WIFI_Init+0xb8>)
 80019c0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80019c2:	4826      	ldr	r0, [pc, #152]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019c4:	f7ff ff34 	bl	8001830 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ce:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019dc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019f4:	2210      	movs	r2, #16
 80019f6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <SPI_WIFI_Init+0xb4>)
 8001a12:	f00b f993 	bl	800cd3c <HAL_SPI_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e018      	b.n	8001a54 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2007      	movs	r0, #7
 8001a28:	f007 ffdd 	bl	80099e6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001a2c:	2007      	movs	r0, #7
 8001a2e:	f007 fff6 	bl	8009a1e <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2033      	movs	r0, #51	; 0x33
 8001a38:	f007 ffd5 	bl	80099e6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001a3c:	2033      	movs	r0, #51	; 0x33
 8001a3e:	f007 ffee 	bl	8009a1e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f000 f9fe 	bl	8001e44 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001a48:	f000 f80c 	bl	8001a64 <SPI_WIFI_ResetModule>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20003028 	.word	0x20003028
 8001a60:	40003c00 	.word	0x40003c00

08001a64 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001a6a:	f007 feb3 	bl	80097d4 <HAL_GetTick>
 8001a6e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	4830      	ldr	r0, [pc, #192]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001a7c:	f008 fbec 	bl	800a258 <HAL_GPIO_WritePin>
 8001a80:	200a      	movs	r0, #10
 8001a82:	f007 feb3 	bl	80097ec <HAL_Delay>
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8c:	482b      	ldr	r0, [pc, #172]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001a8e:	f008 fbe3 	bl	800a258 <HAL_GPIO_WritePin>
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f007 fea9 	bl	80097ec <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001aa0:	f008 fbda 	bl	800a258 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001aa4:	200f      	movs	r0, #15
 8001aa6:	f000 f9cd 	bl	8001e44 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001aaa:	e020      	b.n	8001aee <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	463a      	mov	r2, r7
 8001ab0:	18d1      	adds	r1, r2, r3
 8001ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4821      	ldr	r0, [pc, #132]	; (8001b40 <SPI_WIFI_ResetModule+0xdc>)
 8001aba:	f00b fa0a 	bl	800ced2 <HAL_SPI_Receive>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001ac8:	f007 fe84 	bl	80097d4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d202      	bcs.n	8001ade <SPI_WIFI_ResetModule+0x7a>
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001ae4:	f008 fbb8 	bl	800a258 <HAL_GPIO_WritePin>
      return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e021      	b.n	8001b32 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001aee:	2102      	movs	r1, #2
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001af2:	f008 fb99 	bl	800a228 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d0d7      	beq.n	8001aac <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001afc:	2201      	movs	r2, #1
 8001afe:	2101      	movs	r1, #1
 8001b00:	480e      	ldr	r0, [pc, #56]	; (8001b3c <SPI_WIFI_ResetModule+0xd8>)
 8001b02:	f008 fba9 	bl	800a258 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001b06:	783b      	ldrb	r3, [r7, #0]
 8001b08:	2b15      	cmp	r3, #21
 8001b0a:	d10e      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b15      	cmp	r3, #21
 8001b10:	d10b      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b0d      	cmp	r3, #13
 8001b16:	d108      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001b18:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d105      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001b1e:	793b      	ldrb	r3, [r7, #4]
 8001b20:	2b3e      	cmp	r3, #62	; 0x3e
 8001b22:	d102      	bne.n	8001b2a <SPI_WIFI_ResetModule+0xc6>
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d002      	beq.n	8001b30 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e000      	b.n	8001b32 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	20003028 	.word	0x20003028

08001b44 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <SPI_WIFI_DeInit+0x10>)
 8001b4a:	f00b f99a 	bl	800ce82 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20003028 	.word	0x20003028

08001b58 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001b60:	f007 fe38 	bl	80097d4 <HAL_GetTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b68:	e00a      	b.n	8001b80 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b6a:	f007 fe33 	bl	80097d4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d902      	bls.n	8001b80 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e007      	b.n	8001b90 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b80:	2102      	movs	r1, #2
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <wait_cmddata_rdy_high+0x40>)
 8001b84:	f008 fb50 	bl	800a228 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d1ed      	bne.n	8001b6a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	48001000 	.word	0x48001000

08001b9c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ba4:	f007 fe16 	bl	80097d4 <HAL_GetTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001bac:	e00a      	b.n	8001bc4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bae:	f007 fe11 	bl	80097d4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d902      	bls.n	8001bc4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e004      	b.n	8001bce <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <wait_cmddata_rdy_rising_event+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d0f0      	beq.n	8001bae <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001bcc:	2300      	movs	r3, #0
#endif
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000068c 	.word	0x2000068c

08001bdc <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001be4:	f007 fdf6 	bl	80097d4 <HAL_GetTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001bec:	e00a      	b.n	8001c04 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bee:	f007 fdf1 	bl	80097d4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d902      	bls.n	8001c04 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e004      	b.n	8001c0e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <wait_spi_rx_event+0x3c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d0f0      	beq.n	8001bee <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001c0c:	2300      	movs	r3, #0
#endif
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000684 	.word	0x20000684

08001c1c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001c24:	f007 fdd6 	bl	80097d4 <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001c2c:	e00a      	b.n	8001c44 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c2e:	f007 fdd1 	bl	80097d4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d902      	bls.n	8001c44 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e004      	b.n	8001c4e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <wait_spi_tx_event+0x3c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d0f0      	beq.n	8001c2e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001c4c:	2300      	movs	r3, #0
#endif
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000688 	.word	0x20000688

08001c5c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	460b      	mov	r3, r1
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2101      	movs	r1, #1
 8001c72:	4834      	ldr	r0, [pc, #208]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001c74:	f008 faf0 	bl	800a258 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f8e3 	bl	8001e44 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff8b 	bl	8001b9c <wait_cmddata_rdy_rising_event>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da02      	bge.n	8001c92 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001c8c:	f06f 0302 	mvn.w	r3, #2
 8001c90:	e054      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001c92:	2200      	movs	r2, #0
 8001c94:	2101      	movs	r1, #1
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001c98:	f008 fade 	bl	800a258 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001c9c:	200f      	movs	r0, #15
 8001c9e:	f000 f8d1 	bl	8001e44 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001ca2:	e03d      	b.n	8001d20 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	db02      	blt.n	8001cb4 <SPI_WIFI_ReceiveData+0x58>
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13c      	bne.n	8001d2e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <SPI_WIFI_ReceiveData+0xec>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4822      	ldr	r0, [pc, #136]	; (8001d4c <SPI_WIFI_ReceiveData+0xf0>)
 8001cc4:	f00b fcd6 	bl	800d674 <HAL_SPI_Receive_IT>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	481c      	ldr	r0, [pc, #112]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001cd4:	f008 fac0 	bl	800a258 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	e02e      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff7b 	bl	8001bdc <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001ce6:	7d3a      	ldrb	r2, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	7d7a      	ldrb	r2, [r7, #21]
 8001cf2:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d0a:	db09      	blt.n	8001d20 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2101      	movs	r1, #1
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d12:	f008 faa1 	bl	800a258 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001d16:	f7ff fea5 	bl	8001a64 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d1a:	f06f 0303 	mvn.w	r3, #3
 8001d1e:	e00d      	b.n	8001d3c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001d20:	2102      	movs	r1, #2
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d24:	f008 fa80 	bl	800a228 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d0ba      	beq.n	8001ca4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <SPI_WIFI_ReceiveData+0xe8>)
 8001d34:	f008 fa90 	bl	800a258 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	48001000 	.word	0x48001000
 8001d48:	20000684 	.word	0x20000684
 8001d4c:	20003028 	.word	0x20003028

08001d50 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fef9 	bl	8001b58 <wait_cmddata_rdy_high>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da02      	bge.n	8001d72 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	e04f      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <SPI_WIFI_SendData+0xcc>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001d7e:	f008 fa6b 	bl	800a258 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f85e 	bl	8001e44 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d919      	bls.n	8001dc2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <SPI_WIFI_SendData+0xd4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4822      	ldr	r0, [pc, #136]	; (8001e28 <SPI_WIFI_SendData+0xd8>)
 8001da0:	f00b fbda 	bl	800d558 <HAL_SPI_Transmit_IT>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001daa:	2201      	movs	r2, #1
 8001dac:	2101      	movs	r1, #1
 8001dae:	481c      	ldr	r0, [pc, #112]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001db0:	f008 fa52 	bl	800a258 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	e02b      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff2d 	bl	8001c1c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001dd8:	230a      	movs	r3, #10
 8001dda:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <SPI_WIFI_SendData+0xd4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	2201      	movs	r2, #1
 8001de8:	4619      	mov	r1, r3
 8001dea:	480f      	ldr	r0, [pc, #60]	; (8001e28 <SPI_WIFI_SendData+0xd8>)
 8001dec:	f00b fbb4 	bl	800d558 <HAL_SPI_Transmit_IT>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001df6:	2201      	movs	r2, #1
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <SPI_WIFI_SendData+0xd0>)
 8001dfc:	f008 fa2c 	bl	800a258 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	e005      	b.n	8001e12 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff07 	bl	8001c1c <wait_spi_tx_event>
    
  }
  return len;
 8001e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000068c 	.word	0x2000068c
 8001e20:	48001000 	.word	0x48001000
 8001e24:	20000688 	.word	0x20000688
 8001e28:	20003028 	.word	0x20003028

08001e2c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f007 fcd9 	bl	80097ec <HAL_Delay>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d122      	bne.n	8001ea2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <SPI_WIFI_DelayUs+0x98>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <SPI_WIFI_DelayUs+0x9c>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001e72:	f007 fcaf 	bl	80097d4 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001e78:	e002      	b.n	8001e80 <SPI_WIFI_DelayUs+0x3c>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8001e86:	f007 fca5 	bl	80097d4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e92:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <SPI_WIFI_DelayUs+0x5e>
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <SPI_WIFI_DelayUs+0x98>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <SPI_WIFI_DelayUs+0xa0>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9a      	lsrs	r2, r3, #18
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <SPI_WIFI_DelayUs+0x94>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001ec2:	e002      	b.n	8001eca <SPI_WIFI_DelayUs+0x86>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f9      	bne.n	8001ec4 <SPI_WIFI_DelayUs+0x80>
  return;
 8001ed0:	bf00      	nop
}
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000690 	.word	0x20000690
 8001edc:	2000018c 	.word	0x2000018c
 8001ee0:	10624dd3 	.word	0x10624dd3
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_SPI_RxCpltCallback+0x24>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_SPI_RxCpltCallback+0x24>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000684 	.word	0x20000684

08001f10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_SPI_TxCpltCallback+0x24>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_SPI_TxCpltCallback+0x24>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000688 	.word	0x20000688

08001f38 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SPI_WIFI_ISR+0x1c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <SPI_WIFI_ISR+0x1c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
   }
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	2000068c 	.word	0x2000068c

08001f58 <inizialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void inizialize(struct sharedValues_t *sv){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	sv->temperature_val1=0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
	sv->temperature_val2=0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
	sv->humidity_val1=0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
	sv->humidity_val2=0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
	sv->pressure_val1=0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
	sv->pressure_val2=0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
	sv->proximity=0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]

	sv->primo = osSemaphoreNew(1, 1, NULL);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2101      	movs	r1, #1
 8001f96:	2001      	movs	r0, #1
 8001f98:	f00d fa9c 	bl	800f4d4 <osSemaphoreNew>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	61da      	str	r2, [r3, #28]
	sv->secondo = osSemaphoreNew(1, 1, NULL);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f00d fa94 	bl	800f4d4 <osSemaphoreNew>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	621a      	str	r2, [r3, #32]


}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <main>:
  * @retval int
  */


int main(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	   HAL_Init();
 8001fc0:	f007 fb9f 	bl	8009702 <HAL_Init>

	   /* Configure the system clock */
	   SystemClock_Config();
 8001fc4:	f000 f8a0 	bl	8002108 <SystemClock_Config>
	   /* Configure LED2 */
	   BSP_LED_Init(LED2);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f006 fe67 	bl	8008c9c <BSP_LED_Init>

      /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f006 fea9 	bl	8008d28 <BSP_PB_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <main+0x100>)
 8001fd8:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <main+0x104>)
 8001fda:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <main+0x100>)
 8001fde:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe2:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <main+0x100>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <main+0x100>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <main+0x100>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <main+0x100>)
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <main+0x100>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <main+0x100>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <main+0x100>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <main+0x100>)
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8002014:	4929      	ldr	r1, [pc, #164]	; (80020bc <main+0x100>)
 8002016:	2000      	movs	r0, #0
 8002018:	f006 fedc 	bl	8008dd4 <BSP_COM_Init>
#endif /* TERMINAL_USE */

		MX_GPIO_Init();
 800201c:	f000 fa94 	bl	8002548 <MX_GPIO_Init>
		MX_DFSDM1_Init();
 8002020:	f000 f928 	bl	8002274 <MX_DFSDM1_Init>
		MX_I2C2_Init();
 8002024:	f000 f95e 	bl	80022e4 <MX_I2C2_Init>
		MX_QUADSPI_Init();
 8002028:	f000 f99c 	bl	8002364 <MX_QUADSPI_Init>
		MX_SPI3_Init();
 800202c:	f000 f9c0 	bl	80023b0 <MX_SPI3_Init>
		MX_USART1_UART_Init();
 8002030:	f000 f9fc 	bl	800242c <MX_USART1_UART_Init>
		MX_USART3_UART_Init();
 8002034:	f000 fa2a 	bl	800248c <MX_USART3_UART_Init>
		MX_USB_OTG_FS_PCD_Init();
 8002038:	f000 fa58 	bl	80024ec <MX_USB_OTG_FS_PCD_Init>
		BSP_TSENSOR_Init();
 800203c:	f007 f8e2 	bl	8009204 <BSP_TSENSOR_Init>
		BSP_PSENSOR_Init();
 8002040:	f007 f8b2 	bl	80091a8 <BSP_PSENSOR_Init>
		BSP_HSENSOR_Init();
 8002044:	f007 f882 	bl	800914c <BSP_HSENSOR_Init>
		VL53L0X_PROXIMITY_Init();
 8002048:	f000 fc2e 	bl	80028a8 <VL53L0X_PROXIMITY_Init>


	  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 800204c:	481d      	ldr	r0, [pc, #116]	; (80020c4 <main+0x108>)
 800204e:	f010 fc79 	bl	8012944 <puts>
	  TERMOUT("TCP Client Instructions :\n");
 8002052:	481d      	ldr	r0, [pc, #116]	; (80020c8 <main+0x10c>)
 8002054:	f010 fc76 	bl	8012944 <puts>
	  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8002058:	481c      	ldr	r0, [pc, #112]	; (80020cc <main+0x110>)
 800205a:	f010 fc73 	bl	8012944 <puts>
	  TERMOUT("   you configured using the Configuration Access Point.\n");
 800205e:	481c      	ldr	r0, [pc, #112]	; (80020d0 <main+0x114>)
 8002060:	f010 fc70 	bl	8012944 <puts>
	  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8002064:	481b      	ldr	r0, [pc, #108]	; (80020d4 <main+0x118>)
 8002066:	f010 fc6d 	bl	8012944 <puts>
	  TERMOUT("   with port(8002).\n");
 800206a:	481b      	ldr	r0, [pc, #108]	; (80020d8 <main+0x11c>)
 800206c:	f010 fc6a 	bl	8012944 <puts>
	  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8002070:	481a      	ldr	r0, [pc, #104]	; (80020dc <main+0x120>)
 8002072:	f010 fc67 	bl	8012944 <puts>


		    /* Init scheduler ----------------------------------------------------------------------------*/
	  osKernelInitialize();
 8002076:	f00d f8ef 	bl	800f258 <osKernelInitialize>


	  /* USER CODE BEGIN RTOS_THREADS */
	  //inizialize the structure
	  inizialize(&sharedValues);
 800207a:	4819      	ldr	r0, [pc, #100]	; (80020e0 <main+0x124>)
 800207c:	f7ff ff6c 	bl	8001f58 <inizialize>
	  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002080:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <main+0x128>)
 8002082:	2100      	movs	r1, #0
 8002084:	4818      	ldr	r0, [pc, #96]	; (80020e8 <main+0x12c>)
 8002086:	f00d f951 	bl	800f32c <osThreadNew>
 800208a:	4602      	mov	r2, r0
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <main+0x130>)
 800208e:	601a      	str	r2, [r3, #0]
	  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <main+0x134>)
 8002092:	2100      	movs	r1, #0
 8002094:	4817      	ldr	r0, [pc, #92]	; (80020f4 <main+0x138>)
 8002096:	f00d f949 	bl	800f32c <osThreadNew>
 800209a:	4602      	mov	r2, r0
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <main+0x13c>)
 800209e:	601a      	str	r2, [r3, #0]
	  proximityThreadHandle = osThreadNew(Proximity_Test, NULL, &proximityThread_attributes);
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <main+0x140>)
 80020a2:	2100      	movs	r1, #0
 80020a4:	4816      	ldr	r0, [pc, #88]	; (8002100 <main+0x144>)
 80020a6:	f00d f941 	bl	800f32c <osThreadNew>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <main+0x148>)
 80020ae:	601a      	str	r2, [r3, #0]


	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	  osKernelStart();
 80020b0:	f00d f906 	bl	800f2c0 <osKernelStart>
 80020b4:	2300      	movs	r3, #0


}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20004030 	.word	0x20004030
 80020c0:	40013800 	.word	0x40013800
 80020c4:	080142cc 	.word	0x080142cc
 80020c8:	0801430c 	.word	0x0801430c
 80020cc:	08014328 	.word	0x08014328
 80020d0:	08014368 	.word	0x08014368
 80020d4:	080143a0 	.word	0x080143a0
 80020d8:	080143e0 	.word	0x080143e0
 80020dc:	080143f4 	.word	0x080143f4
 80020e0:	2000359c 	.word	0x2000359c
 80020e4:	08014ec0 	.word	0x08014ec0
 80020e8:	08002d49 	.word	0x08002d49
 80020ec:	200030c4 	.word	0x200030c4
 80020f0:	08014ee4 	.word	0x08014ee4
 80020f4:	08002fdd 	.word	0x08002fdd
 80020f8:	200036a8 	.word	0x200036a8
 80020fc:	08014f08 	.word	0x08014f08
 8002100:	08003051 	.word	0x08003051
 8002104:	200036a4 	.word	0x200036a4

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0b8      	sub	sp, #224	; 0xe0
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002112:	2244      	movs	r2, #68	; 0x44
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f010 fb98 	bl	801284c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2288      	movs	r2, #136	; 0x88
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f010 fb8a 	bl	801284c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002138:	f009 fa16 	bl	800b568 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <SystemClock_Config+0x140>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <SystemClock_Config+0x140>)
 8002144:	f023 0318 	bic.w	r3, r3, #24
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800214c:	2314      	movs	r3, #20
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002152:	2301      	movs	r3, #1
 8002154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002158:	2301      	movs	r3, #1
 800215a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002164:	2360      	movs	r3, #96	; 0x60
 8002166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002170:	2301      	movs	r3, #1
 8002172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800217c:	2328      	movs	r3, #40	; 0x28
 800217e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002182:	2307      	movs	r3, #7
 8002184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002198:	4618      	mov	r0, r3
 800219a:	f009 fb25 	bl	800b7e8 <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80021a4:	f000 ff72 	bl	800308c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a8:	230f      	movs	r3, #15
 80021aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021ca:	2104      	movs	r1, #4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f009 fef1 	bl	800bfb4 <HAL_RCC_ClockConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021d8:	f000 ff58 	bl	800308c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <SystemClock_Config+0x144>)
 80021de:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80021f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80021f8:	2301      	movs	r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002200:	2318      	movs	r3, #24
 8002202:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002204:	2307      	movs	r3, #7
 8002206:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002208:	2302      	movs	r3, #2
 800220a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002210:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002214:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002216:	463b      	mov	r3, r7
 8002218:	4618      	mov	r0, r3
 800221a:	f00a f8cf 	bl	800c3bc <HAL_RCCEx_PeriphCLKConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002224:	f000 ff32 	bl	800308c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800222c:	f009 f9ba 	bl	800b5a4 <HAL_PWREx_ControlVoltageScaling>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8002236:	f000 ff29 	bl	800308c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800223a:	f00a fba5 	bl	800c988 <HAL_RCCEx_EnableMSIPLLMode>
}
 800223e:	bf00      	nop
 8002240:	37e0      	adds	r7, #224	; 0xe0
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	00012085 	.word	0x00012085

08002250 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225e:	2201      	movs	r2, #1
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <__io_putchar+0x20>)
 8002262:	f00c f8e2 	bl	800e42a <HAL_UART_Transmit>

  return ch;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20004030 	.word	0x20004030

08002274 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_DFSDM1_Init+0x68>)
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <MX_DFSDM1_Init+0x6c>)
 800227c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002280:	2201      	movs	r2, #1
 8002282:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_DFSDM1_Init+0x68>)
 800228c:	2202      	movs	r2, #2
 800228e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_DFSDM1_Init+0x68>)
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_DFSDM1_Init+0x68>)
 800229e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022ac:	2204      	movs	r2, #4
 80022ae:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022be:	2200      	movs	r2, #0
 80022c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_DFSDM1_Init+0x68>)
 80022ca:	f007 fbc3 	bl	8009a54 <HAL_DFSDM_ChannelInit>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80022d4:	f000 feda 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000308c 	.word	0x2000308c
 80022e0:	40016020 	.word	0x40016020

080022e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_I2C2_Init+0x74>)
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <MX_I2C2_Init+0x78>)
 80022ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_I2C2_Init+0x74>)
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <MX_I2C2_Init+0x7c>)
 80022f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_I2C2_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_I2C2_Init+0x74>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <MX_I2C2_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_I2C2_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <MX_I2C2_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_I2C2_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_I2C2_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800231e:	480e      	ldr	r0, [pc, #56]	; (8002358 <MX_I2C2_Init+0x74>)
 8002320:	f007 ffe4 	bl	800a2ec <HAL_I2C_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800232a:	f000 feaf 	bl	800308c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800232e:	2100      	movs	r1, #0
 8002330:	4809      	ldr	r0, [pc, #36]	; (8002358 <MX_I2C2_Init+0x74>)
 8002332:	f008 ff39 	bl	800b1a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800233c:	f000 fea6 	bl	800308c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002340:	2100      	movs	r1, #0
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_I2C2_Init+0x74>)
 8002344:	f008 ff7b 	bl	800b23e <HAL_I2CEx_ConfigDigitalFilter>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800234e:	f000 fe9d 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20003550 	.word	0x20003550
 800235c:	40005800 	.word	0x40005800
 8002360:	10909cec 	.word	0x10909cec

08002364 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <MX_QUADSPI_Init+0x48>)
 800236c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002376:	2201      	movs	r2, #1
 8002378:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002382:	2201      	movs	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_QUADSPI_Init+0x44>)
 8002394:	f009 f96c 	bl	800b670 <HAL_QSPI_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800239e:	f000 fe75 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200036ac 	.word	0x200036ac
 80023ac:	a0001000 	.word	0xa0001000

080023b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_SPI3_Init+0x74>)
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <MX_SPI3_Init+0x78>)
 80023b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_SPI3_Init+0x74>)
 80023bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_SPI3_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <MX_SPI3_Init+0x74>)
 80023ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MX_SPI3_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <MX_SPI3_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_SPI3_Init+0x74>)
 80023de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_SPI3_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_SPI3_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_SPI3_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_SPI3_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_SPI3_Init+0x74>)
 80023fe:	2207      	movs	r2, #7
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_SPI3_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_SPI3_Init+0x74>)
 800240a:	2208      	movs	r2, #8
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_SPI3_Init+0x74>)
 8002410:	f00a fc94 	bl	800cd3c <HAL_SPI_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800241a:	f000 fe37 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200035c0 	.word	0x200035c0
 8002428:	40003c00 	.word	0x40003c00

0800242c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <MX_USART1_UART_Init+0x5c>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_USART1_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_USART1_UART_Init+0x58>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_USART1_UART_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_USART1_UART_Init+0x58>)
 8002470:	f00b ff8d 	bl	800e38e <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800247a:	f000 fe07 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20003624 	.word	0x20003624
 8002488:	40013800 	.word	0x40013800

0800248c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <MX_USART3_UART_Init+0x5c>)
 8002494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_USART3_UART_Init+0x58>)
 80024d0:	f00b ff5d 	bl	800e38e <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024da:	f000 fdd7 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200030c8 	.word	0x200030c8
 80024e8:	40004800 	.word	0x40004800

080024ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fa:	2206      	movs	r2, #6
 80024fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002500:	2202      	movs	r2, #2
 8002502:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002506:	2202      	movs	r2, #2
 8002508:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002530:	f008 fed1 	bl	800b2d6 <HAL_PCD_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800253a:	f000 fda7 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20003148 	.word	0x20003148

08002548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800255e:	4bba      	ldr	r3, [pc, #744]	; (8002848 <MX_GPIO_Init+0x300>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4ab9      	ldr	r2, [pc, #740]	; (8002848 <MX_GPIO_Init+0x300>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4bb7      	ldr	r3, [pc, #732]	; (8002848 <MX_GPIO_Init+0x300>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	4bb4      	ldr	r3, [pc, #720]	; (8002848 <MX_GPIO_Init+0x300>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4ab3      	ldr	r2, [pc, #716]	; (8002848 <MX_GPIO_Init+0x300>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4bb1      	ldr	r3, [pc, #708]	; (8002848 <MX_GPIO_Init+0x300>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4bae      	ldr	r3, [pc, #696]	; (8002848 <MX_GPIO_Init+0x300>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4aad      	ldr	r2, [pc, #692]	; (8002848 <MX_GPIO_Init+0x300>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4bab      	ldr	r3, [pc, #684]	; (8002848 <MX_GPIO_Init+0x300>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4ba8      	ldr	r3, [pc, #672]	; (8002848 <MX_GPIO_Init+0x300>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	4aa7      	ldr	r2, [pc, #668]	; (8002848 <MX_GPIO_Init+0x300>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b2:	4ba5      	ldr	r3, [pc, #660]	; (8002848 <MX_GPIO_Init+0x300>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025be:	4ba2      	ldr	r3, [pc, #648]	; (8002848 <MX_GPIO_Init+0x300>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4aa1      	ldr	r2, [pc, #644]	; (8002848 <MX_GPIO_Init+0x300>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b9f      	ldr	r3, [pc, #636]	; (8002848 <MX_GPIO_Init+0x300>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80025dc:	489b      	ldr	r0, [pc, #620]	; (800284c <MX_GPIO_Init+0x304>)
 80025de:	f007 fe3b 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f248 1104 	movw	r1, #33028	; 0x8104
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ec:	f007 fe34 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80025f0:	2200      	movs	r2, #0
 80025f2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80025f6:	4896      	ldr	r0, [pc, #600]	; (8002850 <MX_GPIO_Init+0x308>)
 80025f8:	f007 fe2e 	bl	800a258 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	f241 0181 	movw	r1, #4225	; 0x1081
 8002602:	4894      	ldr	r0, [pc, #592]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002604:	f007 fe28 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	4891      	ldr	r0, [pc, #580]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002610:	f007 fe22 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800261a:	488f      	ldr	r0, [pc, #572]	; (8002858 <MX_GPIO_Init+0x310>)
 800261c:	f007 fe1c 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002620:	2201      	movs	r2, #1
 8002622:	2120      	movs	r1, #32
 8002624:	488a      	ldr	r0, [pc, #552]	; (8002850 <MX_GPIO_Init+0x308>)
 8002626:	f007 fe17 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	2101      	movs	r1, #1
 800262e:	4887      	ldr	r0, [pc, #540]	; (800284c <MX_GPIO_Init+0x304>)
 8002630:	f007 fe12 	bl	800a258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002634:	f240 1315 	movw	r3, #277	; 0x115
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	487f      	ldr	r0, [pc, #508]	; (800284c <MX_GPIO_Init+0x304>)
 800264e:	f007 fb4f 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002652:	236a      	movs	r3, #106	; 0x6a
 8002654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002656:	4b81      	ldr	r3, [pc, #516]	; (800285c <MX_GPIO_Init+0x314>)
 8002658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4879      	ldr	r0, [pc, #484]	; (800284c <MX_GPIO_Init+0x304>)
 8002666:	f007 fb43 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002670:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <MX_GPIO_Init+0x318>)
 8002672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4876      	ldr	r0, [pc, #472]	; (8002858 <MX_GPIO_Init+0x310>)
 8002680:	f007 fb36 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002684:	233f      	movs	r3, #63	; 0x3f
 8002686:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002688:	230b      	movs	r3, #11
 800268a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	4870      	ldr	r0, [pc, #448]	; (8002858 <MX_GPIO_Init+0x310>)
 8002698:	f007 fb2a 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800269c:	2303      	movs	r3, #3
 800269e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026ac:	2308      	movs	r3, #8
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f007 fb19 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80026be:	f248 1304 	movw	r3, #33028	; 0x8104
 80026c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f007 fb09 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80026de:	2308      	movs	r3, #8
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fc:	f007 faf8 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002700:	2310      	movs	r3, #16
 8002702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002704:	230b      	movs	r3, #11
 8002706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002716:	f007 faeb 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800271a:	23e0      	movs	r3, #224	; 0xe0
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800272a:	2305      	movs	r3, #5
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f007 fada 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800273c:	2301      	movs	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <MX_GPIO_Init+0x314>)
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4840      	ldr	r0, [pc, #256]	; (8002850 <MX_GPIO_Init+0x308>)
 8002750:	f007 face 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002754:	2302      	movs	r3, #2
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002758:	230b      	movs	r3, #11
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	483a      	ldr	r0, [pc, #232]	; (8002850 <MX_GPIO_Init+0x308>)
 8002768:	f007 fac2 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800276c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002770:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4832      	ldr	r0, [pc, #200]	; (8002850 <MX_GPIO_Init+0x308>)
 8002786:	f007 fab3 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800278a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800278e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <MX_GPIO_Init+0x314>)
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	482d      	ldr	r0, [pc, #180]	; (8002854 <MX_GPIO_Init+0x30c>)
 80027a0:	f007 faa6 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80027a4:	f243 0381 	movw	r3, #12417	; 0x3081
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4825      	ldr	r0, [pc, #148]	; (8002854 <MX_GPIO_Init+0x30c>)
 80027be:	f007 fa97 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80027c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <MX_GPIO_Init+0x310>)
 80027dc:	f007 fa88 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80027e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <MX_GPIO_Init+0x314>)
 80027e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4818      	ldr	r0, [pc, #96]	; (8002858 <MX_GPIO_Init+0x310>)
 80027f6:	f007 fa7b 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80027fa:	2302      	movs	r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800280a:	2305      	movs	r3, #5
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	480f      	ldr	r0, [pc, #60]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002816:	f007 fa6b 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800281a:	2378      	movs	r3, #120	; 0x78
 800281c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282a:	2307      	movs	r3, #7
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <MX_GPIO_Init+0x30c>)
 8002836:	f007 fa5b 	bl	8009cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800283a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002840:	2312      	movs	r3, #18
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002844:	2301      	movs	r3, #1
 8002846:	e00d      	b.n	8002864 <MX_GPIO_Init+0x31c>
 8002848:	40021000 	.word	0x40021000
 800284c:	48001000 	.word	0x48001000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000c00 	.word	0x48000c00
 8002858:	48000800 	.word	0x48000800
 800285c:	10110000 	.word	0x10110000
 8002860:	10210000 	.word	0x10210000
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800286a:	2304      	movs	r3, #4
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	480b      	ldr	r0, [pc, #44]	; (80028a4 <MX_GPIO_Init+0x35c>)
 8002876:	f007 fa3b 	bl	8009cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2017      	movs	r0, #23
 8002880:	f007 f8b1 	bl	80099e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002884:	2017      	movs	r0, #23
 8002886:	f007 f8ca 	bl	8009a1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2028      	movs	r0, #40	; 0x28
 8002890:	f007 f8a9 	bl	80099e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002894:	2028      	movs	r0, #40	; 0x28
 8002896:	f007 f8c2 	bl	8009a1e <HAL_NVIC_EnableIRQ>

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	48000400 	.word	0x48000400

080028a8 <VL53L0X_PROXIMITY_Init>:

/* USER CODE END 4 */


static void VL53L0X_PROXIMITY_Init(void)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b0f9      	sub	sp, #484	; 0x1e4
 80028ac:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 80028b4:	f006 fbea 	bl	800908c <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 80028b8:	f000 f85e 	bl	8002978 <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80028bc:	463b      	mov	r3, r7
 80028be:	2263      	movs	r2, #99	; 0x63
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00f ffc2 	bl	801284c <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80028c8:	463b      	mov	r3, r7
 80028ca:	4619      	mov	r1, r3
 80028cc:	481e      	ldr	r0, [pc, #120]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 80028ce:	f000 ff87 	bl	80037e0 <VL53L0X_GetDeviceInfo>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d12f      	bne.n	8002938 <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 80028d8:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80028dc:	461a      	mov	r2, r3
 80028de:	21c0      	movs	r1, #192	; 0xc0
 80028e0:	4819      	ldr	r0, [pc, #100]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 80028e2:	f005 fecf 	bl	8008684 <VL53L0X_RdWord>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d121      	bne.n	8002930 <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 80028ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80028f0:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d122      	bne.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 80028f8:	4813      	ldr	r0, [pc, #76]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 80028fa:	f000 ff97 	bl	800382c <VL53L0X_DataInit>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002906:	2201      	movs	r2, #1
 8002908:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 800290c:	4c0e      	ldr	r4, [pc, #56]	; (8002948 <VL53L0X_PROXIMITY_Init+0xa0>)
 800290e:	4668      	mov	r0, sp
 8002910:	f104 0310 	add.w	r3, r4, #16
 8002914:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8002918:	4619      	mov	r1, r3
 800291a:	f00f ff8c 	bl	8012836 <memcpy>
 800291e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002922:	f005 ffb5 	bl	8008890 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 8002926:	e00a      	b.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8002928:	4808      	ldr	r0, [pc, #32]	; (800294c <VL53L0X_PROXIMITY_Init+0xa4>)
 800292a:	f010 f80b 	bl	8012944 <puts>
}
 800292e:	e006      	b.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <VL53L0X_PROXIMITY_Init+0xa8>)
 8002932:	f010 f807 	bl	8012944 <puts>
}
 8002936:	e002      	b.n	800293e <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8002938:	4806      	ldr	r0, [pc, #24]	; (8002954 <VL53L0X_PROXIMITY_Init+0xac>)
 800293a:	f010 f803 	bl	8012944 <puts>
}
 800293e:	bf00      	nop
 8002940:	376c      	adds	r7, #108	; 0x6c
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	20000004 	.word	0x20000004
 800294c:	0801443c 	.word	0x0801443c
 8002950:	0801446c 	.word	0x0801446c
 8002954:	0801449c 	.word	0x0801449c

08002958 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4804      	ldr	r0, [pc, #16]	; (8002974 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 8002964:	f002 f9c8 	bl	8004cf8 <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 8002968:	89bb      	ldrh	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004

08002978 <VL53L0X_PROXIMITY_MspInit>:

static void VL53L0X_PROXIMITY_MspInit(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002986:	2301      	movs	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298a:	2302      	movs	r3, #2
 800298c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 8002994:	f007 f9ac 	bl	8009cf0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800299e:	f007 fc5b 	bl	800a258 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80029a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a6:	f006 ff21 	bl	80097ec <HAL_Delay>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	48000800 	.word	0x48000800

080029b8 <controlla_valori_telefono>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */

void controlla_valori_telefono(struct sharedValues_t *sv){
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b0a2      	sub	sp, #136	; 0x88
 80029bc:	af04      	add	r7, sp, #16
 80029be:	6078      	str	r0, [r7, #4]

	uint8_t TxData[] = "STM32 : Hello!\n";
 80029c0:	4b5b      	ldr	r3, [pc, #364]	; (8002b30 <controlla_valori_telefono+0x178>)
 80029c2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80029c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			int32_t ret;
			uint16_t Datalen;
			uint8_t  MAC_Addr[6];
			uint8_t  IP_Addr[4];
			char msg[30] = "";
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	831a      	strh	r2, [r3, #24]

			int32_t Socket = -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	673b      	str	r3, [r7, #112]	; 0x70

			int16_t Trials = CONNECTION_TRIAL_MAX;
 80029ea:	230a      	movs	r3, #10
 80029ec:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			char text[30];

			/*Initialize  WIFI module */
			  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80029f0:	f006 f82c 	bl	8008a4c <WIFI_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80b8 	bne.w	8002b6c <controlla_valori_telefono+0x1b4>
			  {
				TERMOUT("> WIFI Module Initialized.\n");
 80029fc:	484d      	ldr	r0, [pc, #308]	; (8002b34 <controlla_valori_telefono+0x17c>)
 80029fe:	f00f ffa1 	bl	8012944 <puts>
				if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8002a02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a06:	4618      	mov	r0, r3
 8002a08:	f006 f86e 	bl	8008ae8 <WIFI_GetMAC_Address>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <controlla_valori_telefono+0x8c>
				{
				  TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8002a12:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a16:	4618      	mov	r0, r3
 8002a18:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002a22:	461d      	mov	r5, r3
 8002a24:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002a28:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8002a2c:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8002a30:	9102      	str	r1, [sp, #8]
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	462b      	mov	r3, r5
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	483e      	ldr	r0, [pc, #248]	; (8002b38 <controlla_valori_telefono+0x180>)
 8002a3e:	f00f ff0d 	bl	801285c <iprintf>
 8002a42:	e005      	b.n	8002a50 <controlla_valori_telefono+0x98>
						   MAC_Addr[4],
						   MAC_Addr[5]);
				}
				else
				{
				  TERMOUT("> ERROR : CANNOT get MAC address\n");
 8002a44:	483d      	ldr	r0, [pc, #244]	; (8002b3c <controlla_valori_telefono+0x184>)
 8002a46:	f00f ff7d 	bl	8012944 <puts>
				  BSP_LED_On(LED2);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f006 f956 	bl	8008cfc <BSP_LED_On>
				}

				if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8002a50:	2203      	movs	r2, #3
 8002a52:	493b      	ldr	r1, [pc, #236]	; (8002b40 <controlla_valori_telefono+0x188>)
 8002a54:	483b      	ldr	r0, [pc, #236]	; (8002b44 <controlla_valori_telefono+0x18c>)
 8002a56:	f006 f825 	bl	8008aa4 <WIFI_Connect>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d15f      	bne.n	8002b20 <controlla_valori_telefono+0x168>
				{
				  TERMOUT("> es-wifi module connected \n");
 8002a60:	4839      	ldr	r0, [pc, #228]	; (8002b48 <controlla_valori_telefono+0x190>)
 8002a62:	f00f ff6f 	bl	8012944 <puts>
				  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8002a66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 f852 	bl	8008b14 <WIFI_GetIP_Address>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d14d      	bne.n	8002b12 <controlla_valori_telefono+0x15a>
				  {
					TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8002a76:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a80:	461a      	mov	r2, r3
 8002a82:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a86:	4618      	mov	r0, r3
 8002a88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	482e      	ldr	r0, [pc, #184]	; (8002b4c <controlla_valori_telefono+0x194>)
 8002a92:	f00f fee3 	bl	801285c <iprintf>
						   IP_Addr[0],
						   IP_Addr[1],
						   IP_Addr[2],
						   IP_Addr[3]);

					TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	9200      	str	r2, [sp, #0]
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4826      	ldr	r0, [pc, #152]	; (8002b54 <controlla_valori_telefono+0x19c>)
 8002abc:	f00f fece 	bl	801285c <iprintf>
						   RemoteIP[1],
						   RemoteIP[2],
						   RemoteIP[3],
										 RemotePORT);

					while (Trials--)
 8002ac0:	e013      	b.n	8002aea <controlla_valori_telefono+0x132>
					{
					  if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <controlla_valori_telefono+0x198>)
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <controlla_valori_telefono+0x1a0>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f006 f83a 	bl	8008b4c <WIFI_OpenClientConnection>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <controlla_valori_telefono+0x132>
					  {
						TERMOUT("> TCP Connection opened successfully.\n");
 8002ade:	481f      	ldr	r0, [pc, #124]	; (8002b5c <controlla_valori_telefono+0x1a4>)
 8002ae0:	f00f ff30 	bl	8012944 <puts>
						Socket = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 8002ae8:	e008      	b.n	8002afc <controlla_valori_telefono+0x144>
					while (Trials--)
 8002aea:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	3a01      	subs	r2, #1
 8002af2:	b292      	uxth	r2, r2
 8002af4:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e2      	bne.n	8002ac2 <controlla_valori_telefono+0x10a>
					  }

					}
					if(Socket == -1)
 8002afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d139      	bne.n	8002b78 <controlla_valori_telefono+0x1c0>
					{
					  TERMOUT("> ERROR : Cannot open Connection\n");
 8002b04:	4816      	ldr	r0, [pc, #88]	; (8002b60 <controlla_valori_telefono+0x1a8>)
 8002b06:	f00f ff1d 	bl	8012944 <puts>
					  BSP_LED_On(LED2);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f006 f8f6 	bl	8008cfc <BSP_LED_On>
 8002b10:	e032      	b.n	8002b78 <controlla_valori_telefono+0x1c0>
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8002b12:	4814      	ldr	r0, [pc, #80]	; (8002b64 <controlla_valori_telefono+0x1ac>)
 8002b14:	f00f ff16 	bl	8012944 <puts>
					BSP_LED_On(LED2);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f006 f8ef 	bl	8008cfc <BSP_LED_On>
 8002b1e:	e02b      	b.n	8002b78 <controlla_valori_telefono+0x1c0>
				  }
				}
				else
				{
				  TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8002b20:	4811      	ldr	r0, [pc, #68]	; (8002b68 <controlla_valori_telefono+0x1b0>)
 8002b22:	f00f ff0f 	bl	8012944 <puts>
				  BSP_LED_On(LED2);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f006 f8e8 	bl	8008cfc <BSP_LED_On>
 8002b2c:	e024      	b.n	8002b78 <controlla_valori_telefono+0x1c0>
 8002b2e:	bf00      	nop
 8002b30:	080147a0 	.word	0x080147a0
 8002b34:	080144c8 	.word	0x080144c8
 8002b38:	080144e4 	.word	0x080144e4
 8002b3c:	08014518 	.word	0x08014518
 8002b40:	0801453c 	.word	0x0801453c
 8002b44:	0801454c 	.word	0x0801454c
 8002b48:	08014560 	.word	0x08014560
 8002b4c:	0801457c 	.word	0x0801457c
 8002b50:	20000000 	.word	0x20000000
 8002b54:	080145ac 	.word	0x080145ac
 8002b58:	080145e0 	.word	0x080145e0
 8002b5c:	080145ec 	.word	0x080145ec
 8002b60:	08014614 	.word	0x08014614
 8002b64:	08014638 	.word	0x08014638
 8002b68:	08014668 	.word	0x08014668
				}
			  }
			  else
			  {
				TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8002b6c:	486d      	ldr	r0, [pc, #436]	; (8002d24 <controlla_valori_telefono+0x36c>)
 8002b6e:	f00f fee9 	bl	8012944 <puts>
				BSP_LED_On(LED2);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f006 f8c2 	bl	8008cfc <BSP_LED_On>
			  }

			  while(1)
			  {
				 // osSemaphoreAcquire(primo, portMAX_DELAY);
				if(Socket != -1)
 8002b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d0fb      	beq.n	8002b78 <controlla_valori_telefono+0x1c0>
				{
				  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8002b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002b88:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b94:	4964      	ldr	r1, [pc, #400]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002b96:	f006 f835 	bl	8008c04 <WIFI_ReceiveData>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	677b      	str	r3, [r7, #116]	; 0x74
				  if(ret == WIFI_STATUS_OK)
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 80b8 	bne.w	8002d16 <controlla_valori_telefono+0x35e>
				  {
					if(Datalen > 0)
 8002ba6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0e4      	beq.n	8002b78 <controlla_valori_telefono+0x1c0>
					{
					  RxData[Datalen]=0;
 8002bae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]
					  TERMOUT("Received: %s\n",RxData);
 8002bba:	495b      	ldr	r1, [pc, #364]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002bbc:	485b      	ldr	r0, [pc, #364]	; (8002d2c <controlla_valori_telefono+0x374>)
 8002bbe:	f00f fe4d 	bl	801285c <iprintf>
					  int ritorno = atoi(RxData);
 8002bc2:	4859      	ldr	r0, [pc, #356]	; (8002d28 <controlla_valori_telefono+0x370>)
 8002bc4:	f00f fdfa 	bl	80127bc <atoi>
 8002bc8:	66b8      	str	r0, [r7, #104]	; 0x68
					  if(ritorno==45){
 8002bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bcc:	2b2d      	cmp	r3, #45	; 0x2d
 8002bce:	d10e      	bne.n	8002bee <controlla_valori_telefono+0x236>
						  ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8002bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002bd8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002bdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	2210      	movs	r2, #16
 8002be6:	f005 ffeb 	bl	8008bc0 <WIFI_SendData>
 8002bea:	4603      	mov	r3, r0
 8002bec:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //PROXIMITY
					  if(ritorno == 0){
 8002bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <controlla_valori_telefono+0x26a>
						  snprintf(text, 30, "Proximity value: %d \n", sv->proximity); // puts string into buffer
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f107 000c 	add.w	r0, r7, #12
 8002bfc:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <controlla_valori_telefono+0x378>)
 8002bfe:	211e      	movs	r1, #30
 8002c00:	f00f fea8 	bl	8012954 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002c0c:	f107 010c 	add.w	r1, r7, #12
 8002c10:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	221e      	movs	r2, #30
 8002c1a:	f005 ffd1 	bl	8008bc0 <WIFI_SendData>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //TEMPERATURE
					  if(ritorno==1){
 8002c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d11a      	bne.n	8002c5e <controlla_valori_telefono+0x2a6>
						  snprintf(text,30," Temperature = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f107 000c 	add.w	r0, r7, #12
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <controlla_valori_telefono+0x37c>)
 8002c3a:	211e      	movs	r1, #30
 8002c3c:	f00f fe8a 	bl	8012954 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c42:	b2d8      	uxtb	r0, r3
 8002c44:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002c48:	f107 010c 	add.w	r1, r7, #12
 8002c4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	221e      	movs	r2, #30
 8002c56:	f005 ffb3 	bl	8008bc0 <WIFI_SendData>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //HUMIDITY
					  if(ritorno==2){
 8002c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d126      	bne.n	8002cb2 <controlla_valori_telefono+0x2fa>
						  snprintf(text,30," Humidity = %d.%02d\n\r", sv->humidity_val1, sv->humidity_val2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc6d 	bl	8000548 <__aeabi_f2d>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	460d      	mov	r5, r1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc66 	bl	8000548 <__aeabi_f2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	f107 000c 	add.w	r0, r7, #12
 8002c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c88:	e9cd 4500 	strd	r4, r5, [sp]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <controlla_valori_telefono+0x380>)
 8002c8e:	211e      	movs	r1, #30
 8002c90:	f00f fe60 	bl	8012954 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c96:	b2d8      	uxtb	r0, r3
 8002c98:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002c9c:	f107 010c 	add.w	r1, r7, #12
 8002ca0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	221e      	movs	r2, #30
 8002caa:	f005 ff89 	bl	8008bc0 <WIFI_SendData>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //PRESSSURE 1mBar = 1hPa (100Pa)
					  if(ritorno==3){
 8002cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d126      	bne.n	8002d06 <controlla_valori_telefono+0x34e>
						  snprintf(text,30," Pressure = %d.%02d hPa\n\r", sv->pressure_val1, sv->pressure_val2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc3c 	bl	8000548 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	f107 000c 	add.w	r0, r7, #12
 8002cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cdc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <controlla_valori_telefono+0x384>)
 8002ce2:	211e      	movs	r1, #30
 8002ce4:	f00f fe36 	bl	8012954 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002cf0:	f107 010c 	add.w	r1, r7, #12
 8002cf4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	221e      	movs	r2, #30
 8002cfe:	f005 ff5f 	bl	8008bc0 <WIFI_SendData>
 8002d02:	4603      	mov	r3, r0
 8002d04:	677b      	str	r3, [r7, #116]	; 0x74
					  }


						  if (ret != WIFI_STATUS_OK)
 8002d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f43f af35 	beq.w	8002b78 <controlla_valori_telefono+0x1c0>
					  {
						TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 8002d0e:	480c      	ldr	r0, [pc, #48]	; (8002d40 <controlla_valori_telefono+0x388>)
 8002d10:	f00f fe18 	bl	8012944 <puts>
						break;
 8002d14:	e002      	b.n	8002d1c <controlla_valori_telefono+0x364>
					  }
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <controlla_valori_telefono+0x38c>)
 8002d18:	f00f fe14 	bl	8012944 <puts>
			  }




}
 8002d1c:	bf00      	nop
 8002d1e:	3778      	adds	r7, #120	; 0x78
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdb0      	pop	{r4, r5, r7, pc}
 8002d24:	08014690 	.word	0x08014690
 8002d28:	20000694 	.word	0x20000694
 8002d2c:	080146c0 	.word	0x080146c0
 8002d30:	080146d0 	.word	0x080146d0
 8002d34:	080146e8 	.word	0x080146e8
 8002d38:	08014704 	.word	0x08014704
 8002d3c:	0801471c 	.word	0x0801471c
 8002d40:	08014738 	.word	0x08014738
 8002d44:	0801476c 	.word	0x0801476c

08002d48 <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *arguments)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

	controlla_valori_telefono(&sharedValues);
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <StartDefaultTask+0x18>)
 8002d52:	f7ff fe31 	bl	80029b8 <controlla_valori_telefono>



}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000359c 	.word	0x2000359c

08002d64 <stampa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */

void stampa(struct sharedValues_t *sv){
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b0a3      	sub	sp, #140	; 0x8c
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	6078      	str	r0, [r7, #4]
	 osSemaphoreAcquire(sv->secondo, portMAX_DELAY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00c fc4b 	bl	800f610 <osSemaphoreAcquire>

		float temperature,humidity,pressure;
		float separa = 0;
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
		int val1,val2;
		char msg_t[30] = "";
 8002d80:	2300      	movs	r3, #0
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
 8002d94:	615a      	str	r2, [r3, #20]
 8002d96:	831a      	strh	r2, [r3, #24]
		char msg_h[30] = "";
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	831a      	strh	r2, [r3, #24]
		char msg_p[30] = "";
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	615a      	str	r2, [r3, #20]
 8002dc6:	831a      	strh	r2, [r3, #24]

		temperature = BSP_TSENSOR_ReadTemp();
 8002dc8:	f006 fa38 	bl	800923c <BSP_TSENSOR_ReadTemp>
 8002dcc:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
		humidity = BSP_HSENSOR_ReadHumidity();
 8002dd0:	f006 f9dc 	bl	800918c <BSP_HSENSOR_ReadHumidity>
 8002dd4:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		pressure = BSP_PSENSOR_ReadPressure();
 8002dd8:	f006 fa06 	bl	80091e8 <BSP_PSENSOR_ReadPressure>
 8002ddc:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70

		if(temperature>29)
 8002de0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002de4:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8002de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	dd04      	ble.n	8002dfc <stampa+0x98>
					HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8002df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002df6:	4873      	ldr	r0, [pc, #460]	; (8002fc4 <stampa+0x260>)
 8002df8:	f007 fa46 	bl	800a288 <HAL_GPIO_TogglePin>



		val1 = temperature;
 8002dfc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e04:	ee17 3a90 	vmov	r3, s15
 8002e08:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = temperature - val1;
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e14:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8002e20:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e24:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002fc8 <stampa+0x264>
 8002e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e2c:	ee17 0a90 	vmov	r0, s15
 8002e30:	f7fd fb8a 	bl	8000548 <__aeabi_f2d>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	ec44 3b10 	vmov	d0, r3, r4
 8002e3c:	f010 ff8c 	bl	8013d58 <trunc>
 8002e40:	ec54 3b10 	vmov	r3, r4, d0
 8002e44:	4618      	mov	r0, r3
 8002e46:	4621      	mov	r1, r4
 8002e48:	f7fd fbd6 	bl	80005f8 <__aeabi_d2iz>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->temperature_val1 = val1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e54:	601a      	str	r2, [r3, #0]
		sv->temperature_val2 = val2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e5a:	605a      	str	r2, [r3, #4]
		snprintf(msg_t,30," TEMPERATURE = %d.%02d\n\r", val1, val2);
 8002e5c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	4a59      	ldr	r2, [pc, #356]	; (8002fcc <stampa+0x268>)
 8002e68:	211e      	movs	r1, #30
 8002e6a:	f00f fd73 	bl	8012954 <sniprintf>


		HAL_UART_Transmit(&huart1, (uint8_t*) msg_t, sizeof(msg_t), 1000);
 8002e6e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e76:	221e      	movs	r2, #30
 8002e78:	4855      	ldr	r0, [pc, #340]	; (8002fd0 <stampa+0x26c>)
 8002e7a:	f00b fad6 	bl	800e42a <HAL_UART_Transmit>

		val1 = humidity;
 8002e7e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e86:	ee17 3a90 	vmov	r3, s15
 8002e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = humidity - val1;
 8002e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e96:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8002ea2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002ea6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002fc8 <stampa+0x264>
 8002eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eae:	ee17 0a90 	vmov	r0, s15
 8002eb2:	f7fd fb49 	bl	8000548 <__aeabi_f2d>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	ec44 3b10 	vmov	d0, r3, r4
 8002ebe:	f010 ff4b 	bl	8013d58 <trunc>
 8002ec2:	ec54 3b10 	vmov	r3, r4, d0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4621      	mov	r1, r4
 8002eca:	f7fd fb95 	bl	80005f8 <__aeabi_d2iz>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->humidity_val1 = val1;
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edc3 7a02 	vstr	s15, [r3, #8]
		sv->humidity_val2 = val2;
 8002ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	edc3 7a03 	vstr	s15, [r3, #12]
		snprintf(msg_h,30," humidity = %d.%02d\n\r", val1, val2);
 8002ef2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <stampa+0x270>)
 8002efe:	211e      	movs	r1, #30
 8002f00:	f00f fd28 	bl	8012954 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg_h, sizeof(msg_h), 1000);
 8002f04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0c:	221e      	movs	r2, #30
 8002f0e:	4830      	ldr	r0, [pc, #192]	; (8002fd0 <stampa+0x26c>)
 8002f10:	f00b fa8b 	bl	800e42a <HAL_UART_Transmit>


		val1 = pressure;
 8002f14:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 3a90 	vmov	r3, s15
 8002f20:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = pressure - val1;
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f34:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8002f38:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f3c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002fc8 <stampa+0x264>
 8002f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f44:	ee17 0a90 	vmov	r0, s15
 8002f48:	f7fd fafe 	bl	8000548 <__aeabi_f2d>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	ec44 3b10 	vmov	d0, r3, r4
 8002f54:	f010 ff00 	bl	8013d58 <trunc>
 8002f58:	ec54 3b10 	vmov	r3, r4, d0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4621      	mov	r1, r4
 8002f60:	f7fd fb4a 	bl	80005f8 <__aeabi_d2iz>
 8002f64:	4603      	mov	r3, r0
 8002f66:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->pressure_val1 = val1;
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	edc3 7a04 	vstr	s15, [r3, #16]
		sv->pressure_val2 = val2;
 8002f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	edc3 7a05 	vstr	s15, [r3, #20]
		snprintf(msg_p,30," pressure = %d.%02d\n\r", val1, val2);
 8002f88:	f107 0008 	add.w	r0, r7, #8
 8002f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <stampa+0x274>)
 8002f94:	211e      	movs	r1, #30
 8002f96:	f00f fcdd 	bl	8012954 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg_p, sizeof(msg_p), 1000);
 8002f9a:	f107 0108 	add.w	r1, r7, #8
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	221e      	movs	r2, #30
 8002fa4:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <stampa+0x26c>)
 8002fa6:	f00b fa40 	bl	800e42a <HAL_UART_Transmit>



  osSemaphoreRelease(sv->secondo);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00c fb94 	bl	800f6dc <osSemaphoreRelease>
  osDelay(500);
 8002fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fb8:	f00c fa5e 	bl	800f478 <osDelay>
}
 8002fbc:	bf00      	nop
 8002fbe:	3784      	adds	r7, #132	; 0x84
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	42c80000 	.word	0x42c80000
 8002fcc:	080147b0 	.word	0x080147b0
 8002fd0:	20003624 	.word	0x20003624
 8002fd4:	080147cc 	.word	0x080147cc
 8002fd8:	080147e4 	.word	0x080147e4

08002fdc <StartTask02>:
void StartTask02(void *arguments)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  stampa(&sharedValues);
 8002fe4:	4801      	ldr	r0, [pc, #4]	; (8002fec <StartTask02+0x10>)
 8002fe6:	f7ff febd 	bl	8002d64 <stampa>
 8002fea:	e7fb      	b.n	8002fe4 <StartTask02+0x8>
 8002fec:	2000359c 	.word	0x2000359c

08002ff0 <aggiorna_contatore>:
  }
  /* USER CODE END StartTask02 */
}

void aggiorna_contatore(struct sharedValues_t *sv){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
	uint16_t prox_value = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	817b      	strh	r3, [r7, #10]



	//prendo il mutex
	osSemaphoreAcquire(sv->primo, portMAX_DELAY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	4618      	mov	r0, r3
 800300a:	f00c fb01 	bl	800f610 <osSemaphoreAcquire>

	prox_value = VL53L0X_PROXIMITY_GetDistance();
 800300e:	f7ff fca3 	bl	8002958 <VL53L0X_PROXIMITY_GetDistance>
 8003012:	4603      	mov	r3, r0
 8003014:	817b      	strh	r3, [r7, #10]
	printf("DISTANCE is = %d mm \n", prox_value);
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	4619      	mov	r1, r3
 800301a:	480b      	ldr	r0, [pc, #44]	; (8003048 <aggiorna_contatore+0x58>)
 800301c:	f00f fc1e 	bl	801285c <iprintf>

	sv->proximity = prox_value;
 8003020:	897a      	ldrh	r2, [r7, #10]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
	if(prox_value<100)
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	2b63      	cmp	r3, #99	; 0x63
 800302a:	d804      	bhi.n	8003036 <aggiorna_contatore+0x46>
		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800302c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003030:	4806      	ldr	r0, [pc, #24]	; (800304c <aggiorna_contatore+0x5c>)
 8003032:	f007 f929 	bl	800a288 <HAL_GPIO_TogglePin>
	osSemaphoreRelease(sv->primo);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4618      	mov	r0, r3
 800303c:	f00c fb4e 	bl	800f6dc <osSemaphoreRelease>

}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	080147fc 	.word	0x080147fc
 800304c:	48000400 	.word	0x48000400

08003050 <Proximity_Test>:

void Proximity_Test(void *arguments)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  printf("\n*************************************************************\n");
 8003058:	4808      	ldr	r0, [pc, #32]	; (800307c <Proximity_Test+0x2c>)
 800305a:	f00f fc73 	bl	8012944 <puts>
  printf("\n********************** Proximity Test ************************\n");
 800305e:	4808      	ldr	r0, [pc, #32]	; (8003080 <Proximity_Test+0x30>)
 8003060:	f00f fc70 	bl	8012944 <puts>
  printf("\n*************************************************************\n\n");
 8003064:	4807      	ldr	r0, [pc, #28]	; (8003084 <Proximity_Test+0x34>)
 8003066:	f00f fc6d 	bl	8012944 <puts>


  while(1)
  {

	  	  aggiorna_contatore(&sharedValues);
 800306a:	4807      	ldr	r0, [pc, #28]	; (8003088 <Proximity_Test+0x38>)
 800306c:	f7ff ffc0 	bl	8002ff0 <aggiorna_contatore>
	  	  HAL_Delay(1000);
 8003070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003074:	f006 fbba 	bl	80097ec <HAL_Delay>
	  	  aggiorna_contatore(&sharedValues);
 8003078:	e7f7      	b.n	800306a <Proximity_Test+0x1a>
 800307a:	bf00      	nop
 800307c:	08014814 	.word	0x08014814
 8003080:	08014854 	.word	0x08014854
 8003084:	08014894 	.word	0x08014894
 8003088:	2000359c 	.word	0x2000359c

0800308c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d000      	beq.n	80030ac <HAL_GPIO_EXTI_Callback+0x12>
      SPI_WIFI_ISR();
      break;
    }
    default:
    {
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_EXTI_Callback+0x18>
      SPI_WIFI_ISR();
 80030ac:	f7fe ff44 	bl	8001f38 <SPI_WIFI_ISR>
      break;
 80030b0:	bf00      	nop
    }
  }
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <SPI3_IRQHandler+0x10>)
 80030c2:	f00a fc37 	bl	800d934 <HAL_SPI_IRQHandler>
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20003028 	.word	0x20003028

080030d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_MspInit+0x44>)
 80030d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <HAL_MspInit+0x44>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6613      	str	r3, [r2, #96]	; 0x60
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_MspInit+0x44>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_MspInit+0x44>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_MspInit+0x44>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_MspInit+0x44>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d128      	bne.n	800318a <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_DFSDM_ChannelMspInit+0x80>)
 800313a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313c:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_DFSDM_ChannelMspInit+0x80>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	6613      	str	r3, [r2, #96]	; 0x60
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_DFSDM_ChannelMspInit+0x80>)
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_DFSDM_ChannelMspInit+0x80>)
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_DFSDM_ChannelMspInit+0x80>)
 8003156:	f043 0310 	orr.w	r3, r3, #16
 800315a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_DFSDM_ChannelMspInit+0x80>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003168:	f44f 7320 	mov.w	r3, #640	; 0x280
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800317a:	2306      	movs	r3, #6
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4805      	ldr	r0, [pc, #20]	; (800319c <HAL_DFSDM_ChannelMspInit+0x84>)
 8003186:	f006 fdb3 	bl	8009cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800318a:	bf00      	nop
 800318c:	3728      	adds	r7, #40	; 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000888 	.word	0x20000888
 8003198:	40021000 	.word	0x40021000
 800319c:	48001000 	.word	0x48001000

080031a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_I2C_MspInit+0x7c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d128      	bne.n	8003214 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_I2C_MspInit+0x80>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_I2C_MspInit+0x80>)
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_I2C_MspInit+0x80>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80031da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e0:	2312      	movs	r3, #18
 80031e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e8:	2303      	movs	r3, #3
 80031ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031ec:	2304      	movs	r3, #4
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	480b      	ldr	r0, [pc, #44]	; (8003224 <HAL_I2C_MspInit+0x84>)
 80031f8:	f006 fd7a 	bl	8009cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_I2C_MspInit+0x80>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_I2C_MspInit+0x80>)
 8003202:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003206:	6593      	str	r3, [r2, #88]	; 0x58
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_I2C_MspInit+0x80>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003214:	bf00      	nop
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40005800 	.word	0x40005800
 8003220:	40021000 	.word	0x40021000
 8003224:	48000400 	.word	0x48000400

08003228 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <HAL_I2C_MspDeInit+0x3c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10f      	bne.n	800325a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_I2C_MspDeInit+0x40>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_I2C_MspDeInit+0x40>)
 8003240:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003244:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800324a:	4808      	ldr	r0, [pc, #32]	; (800326c <HAL_I2C_MspDeInit+0x44>)
 800324c:	f006 fef8 	bl	800a040 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003254:	4805      	ldr	r0, [pc, #20]	; (800326c <HAL_I2C_MspDeInit+0x44>)
 8003256:	f006 fef3 	bl	800a040 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40005800 	.word	0x40005800
 8003268:	40021000 	.word	0x40021000
 800326c:	48000400 	.word	0x48000400

08003270 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_QSPI_MspInit+0x7c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d128      	bne.n	80032e4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_QSPI_MspInit+0x80>)
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_QSPI_MspInit+0x80>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	6513      	str	r3, [r2, #80]	; 0x50
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_QSPI_MspInit+0x80>)
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_QSPI_MspInit+0x80>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_QSPI_MspInit+0x80>)
 80032b0:	f043 0310 	orr.w	r3, r3, #16
 80032b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_QSPI_MspInit+0x80>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80032c2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80032c6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032d4:	230a      	movs	r3, #10
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4619      	mov	r1, r3
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <HAL_QSPI_MspInit+0x84>)
 80032e0:	f006 fd06 	bl	8009cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	a0001000 	.word	0xa0001000
 80032f0:	40021000 	.word	0x40021000
 80032f4:	48001000 	.word	0x48001000

080032f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_SPI_MspInit+0x7c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d128      	bne.n	800336c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_SPI_MspInit+0x80>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_SPI_MspInit+0x80>)
 8003320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003324:	6593      	str	r3, [r2, #88]	; 0x58
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_SPI_MspInit+0x80>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_SPI_MspInit+0x80>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <HAL_SPI_MspInit+0x80>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_SPI_MspInit+0x80>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800334a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800334e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800335c:	2306      	movs	r3, #6
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <HAL_SPI_MspInit+0x84>)
 8003368:	f006 fcc2 	bl	8009cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40003c00 	.word	0x40003c00
 8003378:	40021000 	.word	0x40021000
 800337c:	48000800 	.word	0x48000800

08003380 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <HAL_SPI_MspDeInit+0x30>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10a      	bne.n	80033a8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <HAL_SPI_MspDeInit+0x34>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <HAL_SPI_MspDeInit+0x34>)
 8003398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800339c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800339e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80033a2:	4805      	ldr	r0, [pc, #20]	; (80033b8 <HAL_SPI_MspDeInit+0x38>)
 80033a4:	f006 fe4c 	bl	800a040 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40003c00 	.word	0x40003c00
 80033b4:	40021000 	.word	0x40021000
 80033b8:	48000800 	.word	0x48000800

080033bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2e      	ldr	r2, [pc, #184]	; (8003494 <HAL_UART_MspInit+0xd8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d128      	bne.n	8003430 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_UART_MspInit+0xdc>)
 80033e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e2:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <HAL_UART_MspInit+0xdc>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6613      	str	r3, [r2, #96]	; 0x60
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_UART_MspInit+0xdc>)
 80033ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_UART_MspInit+0xdc>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_UART_MspInit+0xdc>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_UART_MspInit+0xdc>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800340e:	23c0      	movs	r3, #192	; 0xc0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800341e:	2307      	movs	r3, #7
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	4619      	mov	r1, r3
 8003428:	481c      	ldr	r0, [pc, #112]	; (800349c <HAL_UART_MspInit+0xe0>)
 800342a:	f006 fc61 	bl	8009cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800342e:	e02d      	b.n	800348c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1a      	ldr	r2, [pc, #104]	; (80034a0 <HAL_UART_MspInit+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d128      	bne.n	800348c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_UART_MspInit+0xdc>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_UART_MspInit+0xdc>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_UART_MspInit+0xdc>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_UART_MspInit+0xdc>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_UART_MspInit+0xdc>)
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_UART_MspInit+0xdc>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800346a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800347c:	2307      	movs	r3, #7
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	4619      	mov	r1, r3
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <HAL_UART_MspInit+0xe8>)
 8003488:	f006 fc32 	bl	8009cf0 <HAL_GPIO_Init>
}
 800348c:	bf00      	nop
 800348e:	3730      	adds	r7, #48	; 0x30
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40013800 	.word	0x40013800
 8003498:	40021000 	.word	0x40021000
 800349c:	48000400 	.word	0x48000400
 80034a0:	40004800 	.word	0x40004800
 80034a4:	48000c00 	.word	0x48000c00

080034a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c8:	d154      	bne.n	8003574 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <HAL_PCD_MspInit+0xd4>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a2b      	ldr	r2, [pc, #172]	; (800357c <HAL_PCD_MspInit+0xd4>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d6:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_PCD_MspInit+0xd4>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80034e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4619      	mov	r1, r3
 80034f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fa:	f006 fbf9 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80034fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003510:	230a      	movs	r3, #10
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351e:	f006 fbe7 	bl	8009cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	4a15      	ldr	r2, [pc, #84]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800352c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_PCD_MspInit+0xd4>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d114      	bne.n	8003570 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	4a0c      	ldr	r2, [pc, #48]	; (800357c <HAL_PCD_MspInit+0xd4>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800355e:	f008 f877 	bl	800b650 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	4a05      	ldr	r2, [pc, #20]	; (800357c <HAL_PCD_MspInit+0xd4>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800356e:	e001      	b.n	8003574 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8003570:	f008 f86e 	bl	800b650 <HAL_PWREx_EnableVddUSB>
}
 8003574:	bf00      	nop
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000

08003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003592:	e7fe      	b.n	8003592 <HardFault_Handler+0x4>

08003594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003598:	e7fe      	b.n	8003598 <MemManage_Handler+0x4>

0800359a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800359e:	e7fe      	b.n	800359e <BusFault_Handler+0x4>

080035a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a4:	e7fe      	b.n	80035a4 <UsageFault_Handler+0x4>

080035a6 <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b8:	f006 f8f8 	bl	80097ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80035bc:	f00d ffc4 	bl	8011548 <xTaskGetSchedulerState>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80035c6:	f00e fe97 	bl	80122f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}

080035ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80035d2:	2020      	movs	r0, #32
 80035d4:	f006 fe72 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80035d8:	2040      	movs	r0, #64	; 0x40
 80035da:	f006 fe6f 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80035de:	2080      	movs	r0, #128	; 0x80
 80035e0:	f006 fe6c 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80035e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035e8:	f006 fe68 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI1_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80035f4:	2002      	movs	r0, #2
 80035f6:	f006 fe61 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}

080035fe <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003602:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003606:	f006 fe59 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800360a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800360e:	f006 fe55 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003612:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003616:	f006 fe51 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800361a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800361e:	f006 fe4d 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003622:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003626:	f006 fe49 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}

0800362e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e00a      	b.n	8003656 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003640:	f3af 8000 	nop.w
 8003644:	4601      	mov	r1, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	60ba      	str	r2, [r7, #8]
 800364c:	b2ca      	uxtb	r2, r1
 800364e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	dbf0      	blt.n	8003640 <_read+0x12>
	}

return len;
 800365e:	687b      	ldr	r3, [r7, #4]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e009      	b.n	800368e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	60ba      	str	r2, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fde4 	bl	8002250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3301      	adds	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	dbf1      	blt.n	800367a <_write+0x12>
	}
	return len;
 8003696:	687b      	ldr	r3, [r7, #4]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_close>:

int _close(int file)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	return -1;
 80036a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036c8:	605a      	str	r2, [r3, #4]
	return 0;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_isatty>:

int _isatty(int file)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	return 1;
 80036e0:	2301      	movs	r3, #1
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
	return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <_sbrk+0x5c>)
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <_sbrk+0x60>)
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <_sbrk+0x64>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <_sbrk+0x64>)
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <_sbrk+0x68>)
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <_sbrk+0x64>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	429a      	cmp	r2, r3
 8003736:	d207      	bcs.n	8003748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003738:	f00f f844 	bl	80127c4 <__errno>
 800373c:	4602      	mov	r2, r0
 800373e:	230c      	movs	r3, #12
 8003740:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	e009      	b.n	800375c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <_sbrk+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <_sbrk+0x64>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <_sbrk+0x64>)
 8003758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20018000 	.word	0x20018000
 8003768:	00000400 	.word	0x00000400
 800376c:	2000088c 	.word	0x2000088c
 8003770:	20004148 	.word	0x20004148

08003774 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <SystemInit+0x64>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <SystemInit+0x64>)
 8003780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <SystemInit+0x68>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <SystemInit+0x68>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <SystemInit+0x68>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <SystemInit+0x68>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <SystemInit+0x68>)
 80037a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80037a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80037a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <SystemInit+0x68>)
 80037ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <SystemInit+0x68>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <SystemInit+0x68>)
 80037b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <SystemInit+0x68>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <SystemInit+0x64>)
 80037c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ca:	609a      	str	r2, [r3, #8]
#endif
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000ed00 	.word	0xe000ed00
 80037dc:	40021000 	.word	0x40021000

080037e0 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80037ee:	6839      	ldr	r1, [r7, #0]
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f004 fdfb 	bl	80083ec <VL53L0X_get_device_info>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80037fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f001 fc6f 	bl	80050fa <VL53L0X_get_offset_calibration_data_micro_meter>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b094      	sub	sp, #80	; 0x50
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800383a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003842:	2200      	movs	r2, #0
 8003844:	2188      	movs	r1, #136	; 0x88
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f004 ff90 	bl	800876c <VL53L0X_WrByte>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003860:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800386a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a71      	ldr	r2, [pc, #452]	; (8003a38 <VL53L0X_DataInit+0x20c>)
 8003872:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a70      	ldr	r2, [pc, #448]	; (8003a3c <VL53L0X_DataInit+0x210>)
 800387a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa5a 	bl	8003d44 <VL53L0X_GetDeviceParameters>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8003896:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800389a:	2b00      	cmp	r3, #0
 800389c:	d112      	bne.n	80038c4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800389e:	2300      	movs	r3, #0
 80038a0:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80038a2:	2300      	movs	r3, #0
 80038a4:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 0410 	add.w	r4, r3, #16
 80038ac:	f107 0508 	add.w	r5, r7, #8
 80038b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80038c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2264      	movs	r2, #100	; 0x64
 80038c8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038d2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038dc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80038e6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f6:	e014      	b.n	8003922 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 80038f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d114      	bne.n	800392a <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003902:	b29b      	uxth	r3, r3
 8003904:	2201      	movs	r2, #1
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fd83 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003916:	4313      	orrs	r3, r2
 8003918:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391e:	3301      	adds	r3, #1
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
 8003922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003924:	2b05      	cmp	r3, #5
 8003926:	dde7      	ble.n	80038f8 <VL53L0X_DataInit+0xcc>
 8003928:	e000      	b.n	800392c <VL53L0X_DataInit+0x100>
		else
			break;
 800392a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800392c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003934:	2200      	movs	r2, #0
 8003936:	2102      	movs	r1, #2
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fd6b 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003944:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800394c:	2200      	movs	r2, #0
 800394e:	2103      	movs	r1, #3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fd5f 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800395c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003964:	2200      	movs	r2, #0
 8003966:	2104      	movs	r1, #4
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fd53 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003974:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800397c:	2200      	movs	r2, #0
 800397e:	2105      	movs	r1, #5
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fd47 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800398c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003994:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003998:	2100      	movs	r1, #0
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fdea 	bl	8004574 <VL53L0X_SetLimitCheckValue>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80039a6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b2:	2101      	movs	r1, #1
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fddd 	bl	8004574 <VL53L0X_SetLimitCheckValue>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039c8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80039cc:	2102      	movs	r1, #2
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fdd0 	bl	8004574 <VL53L0X_SetLimitCheckValue>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039da:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039e2:	2200      	movs	r2, #0
 80039e4:	2103      	movs	r1, #3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fdc4 	bl	8004574 <VL53L0X_SetLimitCheckValue>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039f2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003a02:	22ff      	movs	r2, #255	; 0xff
 8003a04:	2101      	movs	r1, #1
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f004 feb0 	bl	800876c <VL53L0X_WrByte>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003a1a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8003a2a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3750      	adds	r7, #80	; 0x50
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bdb0      	pop	{r4, r5, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	00016b85 	.word	0x00016b85
 8003a3c:	000970a4 	.word	0x000970a4

08003a40 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b09e      	sub	sp, #120	; 0x78
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003a4e:	f107 031c 	add.w	r3, r7, #28
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f00e fef8 	bl	801284c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f002 fa8e 	bl	8005fa0 <VL53L0X_get_info_from_device>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d80d      	bhi.n	8003ac0 <VL53L0X_StaticInit+0x80>
 8003aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d102      	bne.n	8003ab2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d806      	bhi.n	8003ac0 <VL53L0X_StaticInit+0x80>
 8003ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10e      	bne.n	8003ad8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	d90b      	bls.n	8003ad8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003ac0:	f107 0218 	add.w	r2, r7, #24
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f001 fd10 	bl	80054f0 <VL53L0X_perform_ref_spad_management>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003ad6:	e009      	b.n	8003aec <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003adc:	461a      	mov	r2, r3
 8003ade:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f001 ff11 	bl	8005908 <VL53L0X_set_reference_spads>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003aec:	4b94      	ldr	r3, [pc, #592]	; (8003d40 <VL53L0X_StaticInit+0x300>)
 8003aee:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003af0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003afe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003b02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b12:	e001      	b.n	8003b18 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003b14:	4b8a      	ldr	r3, [pc, #552]	; (8003d40 <VL53L0X_StaticInit+0x300>)
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003b18:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003b20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f003 fde4 	bl	80076f0 <VL53L0X_load_tuning_settings>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2100      	movs	r1, #0
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f001 f909 	bl	8004d58 <VL53L0X_SetGpioConfig>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d121      	bne.n	8003b98 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b54:	2201      	movs	r2, #1
 8003b56:	21ff      	movs	r1, #255	; 0xff
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f004 fe07 	bl	800876c <VL53L0X_WrByte>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003b64:	f107 031a 	add.w	r3, r7, #26
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2184      	movs	r1, #132	; 0x84
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f004 fd89 	bl	8008684 <VL53L0X_RdWord>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b80:	2200      	movs	r2, #0
 8003b82:	21ff      	movs	r1, #255	; 0xff
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f004 fdf1 	bl	800876c <VL53L0X_WrByte>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b98:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003bac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d108      	bne.n	8003bc6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8c2 	bl	8003d44 <VL53L0X_GetDeviceParameters>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003bc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d110      	bne.n	8003bf0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003bce:	f107 0319 	add.w	r3, r7, #25
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f9a0 	bl	8003f1a <VL53L0X_GetFractionEnable>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003be0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003be8:	7e7a      	ldrb	r2, [r7, #25]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003bf0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f103 0410 	add.w	r4, r3, #16
 8003bfe:	f107 051c 	add.w	r5, r7, #28
 8003c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d111      	bne.n	8003c42 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003c1e:	f107 0319 	add.w	r3, r7, #25
 8003c22:	461a      	mov	r2, r3
 8003c24:	2101      	movs	r1, #1
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f004 fca5 	bl	8008576 <VL53L0X_RdByte>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003c32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003c3a:	7e7a      	ldrb	r2, [r7, #25]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003c42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f9d8 	bl	8004004 <VL53L0X_SetSequenceStepEnable>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003c5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c62:	2200      	movs	r2, #0
 8003c64:	2102      	movs	r1, #2
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9cc 	bl	8004004 <VL53L0X_SetSequenceStepEnable>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003c72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c8a:	f107 0313 	add.w	r3, r7, #19
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2100      	movs	r1, #0
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f99e 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ca6:	7cfa      	ldrb	r2, [r7, #19]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003cb6:	f107 0313 	add.w	r3, r7, #19
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f988 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cd2:	7cfa      	ldrb	r2, [r7, #19]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2103      	movs	r1, #3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fad6 	bl	800429c <VL53L0X_GetSequenceStepTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003d06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	461a      	mov	r2, r3
 8003d14:	2104      	movs	r1, #4
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fac0 	bl	800429c <VL53L0X_GetSequenceStepTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3770      	adds	r7, #112	; 0x70
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000190 	.word	0x20000190

08003d44 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8cc 	bl	8003ef4 <VL53L0X_GetDeviceMode>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fad4 	bl	800431c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003d74:	4603      	mov	r3, r0
 8003d76:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3310      	adds	r3, #16
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb0a 	bl	80043ae <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fd2a 	bl	8003806 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003db2:	4603      	mov	r3, r0
 8003db4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d134      	bne.n	8003e28 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	e02a      	b.n	8003e1a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d12a      	bne.n	8003e22 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fc2a 	bl	8004638 <VL53L0X_GetLimitCheckValue>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d117      	bne.n	8003e26 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3318      	adds	r3, #24
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4413      	add	r3, r2
 8003e02:	461a      	mov	r2, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fb91 	bl	800452c <VL53L0X_GetLimitCheckEnable>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	ddd1      	ble.n	8003dc4 <VL53L0X_GetDeviceParameters+0x80>
 8003e20:	e002      	b.n	8003e28 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003e26:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	333c      	adds	r3, #60	; 0x3c
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fc8c 	bl	8004754 <VL53L0X_GetWrapAroundCheckEnable>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f895 	bl	8003f7e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	2b15      	cmp	r3, #21
 8003e78:	d832      	bhi.n	8003ee0 <VL53L0X_SetDeviceMode+0x7c>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <VL53L0X_SetDeviceMode+0x1c>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ed9 	.word	0x08003ed9
 8003e84:	08003ed9 	.word	0x08003ed9
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003ed9 	.word	0x08003ed9
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	08003ee1 	.word	0x08003ee1
 8003e98:	08003ee1 	.word	0x08003ee1
 8003e9c:	08003ee1 	.word	0x08003ee1
 8003ea0:	08003ee1 	.word	0x08003ee1
 8003ea4:	08003ee1 	.word	0x08003ee1
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ed9 	.word	0x08003ed9
 8003ed4:	08003ed9 	.word	0x08003ed9
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	741a      	strb	r2, [r3, #16]
		break;
 8003ede:	e001      	b.n	8003ee4 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003ee0:	23f8      	movs	r3, #248	; 0xf8
 8003ee2:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7c1a      	ldrb	r2, [r3, #16]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	2109      	movs	r1, #9
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f004 fb22 	bl	8008576 <VL53L0X_RdByte>
 8003f32:	4603      	mov	r3, r0
 8003f34:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f003 fa30 	bl	80073ce <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003f8c:	6839      	ldr	r1, [r7, #0]
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f003 fafd 	bl	800758e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003f94:	4603      	mov	r3, r0
 8003f96:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003fb8:	78ba      	ldrb	r2, [r7, #2]
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f002 ff45 	bl	8006e4e <VL53L0X_set_vcsel_pulse_period>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f003 f9b7 	bl	8007360 <VL53L0X_get_vcsel_pulse_period>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
 8004010:	4613      	mov	r3, r2
 8004012:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004014:	2300      	movs	r3, #0
 8004016:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004020:	f107 030f 	add.w	r3, r7, #15
 8004024:	461a      	mov	r2, r3
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f004 faa4 	bl	8008576 <VL53L0X_RdByte>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d15a      	bne.n	80040f4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d12b      	bne.n	800409c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d825      	bhi.n	8004096 <VL53L0X_SetSequenceStepEnable+0x92>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004065 	.word	0x08004065
 8004054:	0800406f 	.word	0x0800406f
 8004058:	08004079 	.word	0x08004079
 800405c:	08004083 	.word	0x08004083
 8004060:	0800408d 	.word	0x0800408d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004064:	7dbb      	ldrb	r3, [r7, #22]
 8004066:	f043 0310 	orr.w	r3, r3, #16
 800406a:	75bb      	strb	r3, [r7, #22]
				break;
 800406c:	e043      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800406e:	7dbb      	ldrb	r3, [r7, #22]
 8004070:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004074:	75bb      	strb	r3, [r7, #22]
				break;
 8004076:	e03e      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004078:	7dbb      	ldrb	r3, [r7, #22]
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	75bb      	strb	r3, [r7, #22]
				break;
 8004080:	e039      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004082:	7dbb      	ldrb	r3, [r7, #22]
 8004084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004088:	75bb      	strb	r3, [r7, #22]
				break;
 800408a:	e034      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800408c:	7dbb      	ldrb	r3, [r7, #22]
 800408e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004092:	75bb      	strb	r3, [r7, #22]
				break;
 8004094:	e02f      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004096:	23fc      	movs	r3, #252	; 0xfc
 8004098:	75fb      	strb	r3, [r7, #23]
 800409a:	e02c      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d825      	bhi.n	80040ee <VL53L0X_SetSequenceStepEnable+0xea>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040bd 	.word	0x080040bd
 80040ac:	080040c7 	.word	0x080040c7
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	080040db 	.word	0x080040db
 80040b8:	080040e5 	.word	0x080040e5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80040bc:	7dbb      	ldrb	r3, [r7, #22]
 80040be:	f023 0310 	bic.w	r3, r3, #16
 80040c2:	75bb      	strb	r3, [r7, #22]
				break;
 80040c4:	e017      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80040c6:	7dbb      	ldrb	r3, [r7, #22]
 80040c8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80040cc:	75bb      	strb	r3, [r7, #22]
				break;
 80040ce:	e012      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80040d0:	7dbb      	ldrb	r3, [r7, #22]
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	75bb      	strb	r3, [r7, #22]
				break;
 80040d8:	e00d      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80040da:	7dbb      	ldrb	r3, [r7, #22]
 80040dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e0:	75bb      	strb	r3, [r7, #22]
				break;
 80040e2:	e008      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80040e4:	7dbb      	ldrb	r3, [r7, #22]
 80040e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ea:	75bb      	strb	r3, [r7, #22]
				break;
 80040ec:	e003      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80040ee:	23fc      	movs	r3, #252	; 0xfc
 80040f0:	75fb      	strb	r3, [r7, #23]
 80040f2:	e000      	b.n	80040f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80040f4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	7dba      	ldrb	r2, [r7, #22]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d01e      	beq.n	800413c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80040fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004106:	7dbb      	ldrb	r3, [r7, #22]
 8004108:	461a      	mov	r2, r3
 800410a:	2101      	movs	r1, #1
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f004 fb2d 	bl	800876c <VL53L0X_WrByte>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7dba      	ldrb	r2, [r7, #22]
 8004122:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ff0e 	bl	8003f58 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800413c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	72fb      	strb	r3, [r7, #11]
 8004156:	4613      	mov	r3, r2
 8004158:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004164:	7afb      	ldrb	r3, [r7, #11]
 8004166:	2b04      	cmp	r3, #4
 8004168:	d836      	bhi.n	80041d8 <sequence_step_enabled+0x90>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <sequence_step_enabled+0x28>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004185 	.word	0x08004185
 8004174:	08004197 	.word	0x08004197
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041bb 	.word	0x080041bb
 8004180:	080041cd 	.word	0x080041cd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004184:	7abb      	ldrb	r3, [r7, #10]
 8004186:	111b      	asrs	r3, r3, #4
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	701a      	strb	r2, [r3, #0]
		break;
 8004194:	e022      	b.n	80041dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004196:	7abb      	ldrb	r3, [r7, #10]
 8004198:	10db      	asrs	r3, r3, #3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	701a      	strb	r2, [r3, #0]
		break;
 80041a6:	e019      	b.n	80041dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80041a8:	7abb      	ldrb	r3, [r7, #10]
 80041aa:	109b      	asrs	r3, r3, #2
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	701a      	strb	r2, [r3, #0]
		break;
 80041b8:	e010      	b.n	80041dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80041ba:	7abb      	ldrb	r3, [r7, #10]
 80041bc:	119b      	asrs	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	701a      	strb	r2, [r3, #0]
		break;
 80041ca:	e007      	b.n	80041dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80041cc:	7abb      	ldrb	r3, [r7, #10]
 80041ce:	09db      	lsrs	r3, r3, #7
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	701a      	strb	r2, [r3, #0]
		break;
 80041d6:	e001      	b.n	80041dc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041d8:	23fc      	movs	r3, #252	; 0xfc
 80041da:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80041fe:	f107 030e 	add.w	r3, r7, #14
 8004202:	461a      	mov	r2, r3
 8004204:	2101      	movs	r1, #1
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f004 f9b5 	bl	8008576 <VL53L0X_RdByte>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d107      	bne.n	8004228 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004218:	7bba      	ldrb	r2, [r7, #14]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff92 	bl	8004148 <sequence_step_enabled>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004230:	7bba      	ldrb	r2, [r7, #14]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3302      	adds	r3, #2
 8004236:	2101      	movs	r1, #1
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff85 	bl	8004148 <sequence_step_enabled>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800424a:	7bba      	ldrb	r2, [r7, #14]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	2102      	movs	r1, #2
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff78 	bl	8004148 <sequence_step_enabled>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004264:	7bba      	ldrb	r2, [r7, #14]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3303      	adds	r3, #3
 800426a:	2103      	movs	r1, #3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff6b 	bl	8004148 <sequence_step_enabled>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800427e:	7bba      	ldrb	r2, [r7, #14]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	3304      	adds	r3, #4
 8004284:	2104      	movs	r1, #4
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ff5e 	bl	8004148 <sequence_step_enabled>
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	460b      	mov	r3, r1
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80042b6:	f107 0210 	add.w	r2, r7, #16
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	4619      	mov	r1, r3
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f002 fbf0 	bl	8006aa4 <get_sequence_step_timeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80042c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d11c      	bne.n	800430a <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4613      	mov	r3, r2
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80042fc:	4a06      	ldr	r2, [pc, #24]	; (8004318 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800430a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	461a      	mov	r2, r3
 8004330:	21f8      	movs	r1, #248	; 0xf8
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f004 f9a6 	bl	8008684 <VL53L0X_RdWord>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800433c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d108      	bne.n	8004356 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004344:	f107 0308 	add.w	r3, r7, #8
 8004348:	461a      	mov	r2, r3
 800434a:	2104      	movs	r1, #4
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f004 f9d1 	bl	80086f4 <VL53L0X_RdDWord>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800435e:	89bb      	ldrh	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	89ba      	ldrh	r2, [r7, #12]
 8004368:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7f1b      	ldrb	r3, [r3, #28]
 8004396:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	7bba      	ldrb	r2, [r7, #14]
 800439c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800439e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80043bc:	f107 030e 	add.w	r3, r7, #14
 80043c0:	461a      	mov	r2, r3
 80043c2:	2120      	movs	r1, #32
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f004 f95d 	bl	8008684 <VL53L0X_RdWord>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80043ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d118      	bne.n	8004408 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	771a      	strb	r2, [r3, #28]
 80043ee:	e00b      	b.n	8004408 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
 8004420:	4613      	mov	r3, r2
 8004422:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004424:	2300      	movs	r3, #0
 8004426:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004434:	887b      	ldrh	r3, [r7, #2]
 8004436:	2b05      	cmp	r3, #5
 8004438:	d902      	bls.n	8004440 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800443a:	23fc      	movs	r3, #252	; 0xfc
 800443c:	75fb      	strb	r3, [r7, #23]
 800443e:	e05b      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004440:	787b      	ldrb	r3, [r7, #1]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	73bb      	strb	r3, [r7, #14]
 8004452:	e00a      	b.n	800446a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	330c      	adds	r3, #12
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	2b05      	cmp	r3, #5
 800446e:	d841      	bhi.n	80044f4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	08004491 	.word	0x08004491
 800447c:	0800449b 	.word	0x0800449b
 8004480:	080044b1 	.word	0x080044b1
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044c5 	.word	0x080044c5
 800448c:	080044dd 	.word	0x080044dd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004498:	e02e      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	2144      	movs	r1, #68	; 0x44
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f004 f985 	bl	80087b4 <VL53L0X_WrWord>
 80044aa:	4603      	mov	r3, r0
 80044ac:	75fb      	strb	r3, [r7, #23]

			break;
 80044ae:	e023      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80044b8:	e01e      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80044c2:	e019      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80044c4:	7bbb      	ldrb	r3, [r7, #14]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80044ca:	7b7b      	ldrb	r3, [r7, #13]
 80044cc:	22fe      	movs	r2, #254	; 0xfe
 80044ce:	2160      	movs	r1, #96	; 0x60
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f004 f999 	bl	8008808 <VL53L0X_UpdateByte>
 80044d6:	4603      	mov	r3, r0
 80044d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80044da:	e00d      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80044dc:	7bbb      	ldrb	r3, [r7, #14]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80044e2:	7b7b      	ldrb	r3, [r7, #13]
 80044e4:	22ef      	movs	r2, #239	; 0xef
 80044e6:	2160      	movs	r1, #96	; 0x60
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f004 f98d 	bl	8008808 <VL53L0X_UpdateByte>
 80044ee:	4603      	mov	r3, r0
 80044f0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80044f2:	e001      	b.n	80044f8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80044f4:	23fc      	movs	r3, #252	; 0xfc
 80044f6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80044f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004500:	787b      	ldrb	r3, [r7, #1]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004512:	e005      	b.n	8004520 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004520:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	460b      	mov	r3, r1
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800453e:	897b      	ldrh	r3, [r7, #10]
 8004540:	2b05      	cmp	r3, #5
 8004542:	d905      	bls.n	8004550 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004544:	23fc      	movs	r3, #252	; 0xfc
 8004546:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e008      	b.n	8004562 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004550:	897b      	ldrh	r3, [r7, #10]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7dba      	ldrb	r2, [r7, #22]
 8004560:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004566:	4618      	mov	r0, r3
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	460b      	mov	r3, r1
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004590:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004592:	7dbb      	ldrb	r3, [r7, #22]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004598:	897b      	ldrh	r3, [r7, #10]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	330c      	adds	r3, #12
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e040      	b.n	800462a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80045a8:	897b      	ldrh	r3, [r7, #10]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d830      	bhi.n	8004610 <VL53L0X_SetLimitCheckValue+0x9c>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <VL53L0X_SetLimitCheckValue+0x40>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045cd 	.word	0x080045cd
 80045b8:	080045d5 	.word	0x080045d5
 80045bc:	080045eb 	.word	0x080045eb
 80045c0:	080045f3 	.word	0x080045f3
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80045d2:	e01f      	b.n	8004614 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	2144      	movs	r1, #68	; 0x44
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f004 f8e8 	bl	80087b4 <VL53L0X_WrWord>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80045e8:	e014      	b.n	8004614 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80045f0:	e010      	b.n	8004614 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80045f8:	e00c      	b.n	8004614 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	2164      	movs	r1, #100	; 0x64
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f004 f8d5 	bl	80087b4 <VL53L0X_WrWord>
 800460a:	4603      	mov	r3, r0
 800460c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800460e:	e001      	b.n	8004614 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004610:	23fc      	movs	r3, #252	; 0xfc
 8004612:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d106      	bne.n	800462a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800461c:	897b      	ldrh	r3, [r7, #10]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	330c      	adds	r3, #12
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800462a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop

08004638 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	460b      	mov	r3, r1
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004646:	2300      	movs	r3, #0
 8004648:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	2b05      	cmp	r3, #5
 8004652:	d847      	bhi.n	80046e4 <VL53L0X_GetLimitCheckValue+0xac>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <VL53L0X_GetLimitCheckValue+0x24>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	08004675 	.word	0x08004675
 8004660:	08004681 	.word	0x08004681
 8004664:	080046a7 	.word	0x080046a7
 8004668:	080046b3 	.word	0x080046b3
 800466c:	080046bf 	.word	0x080046bf
 8004670:	080046bf 	.word	0x080046bf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	77bb      	strb	r3, [r7, #30]
		break;
 800467e:	e033      	b.n	80046e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004680:	f107 0316 	add.w	r3, r7, #22
 8004684:	461a      	mov	r2, r3
 8004686:	2144      	movs	r1, #68	; 0x44
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f003 fffb 	bl	8008684 <VL53L0X_RdWord>
 800468e:	4603      	mov	r3, r0
 8004690:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004692:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800469a:	8afb      	ldrh	r3, [r7, #22]
 800469c:	025b      	lsls	r3, r3, #9
 800469e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77bb      	strb	r3, [r7, #30]
		break;
 80046a4:	e020      	b.n	80046e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	77bb      	strb	r3, [r7, #30]
		break;
 80046b0:	e01a      	b.n	80046e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	77bb      	strb	r3, [r7, #30]
		break;
 80046bc:	e014      	b.n	80046e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80046be:	f107 0316 	add.w	r3, r7, #22
 80046c2:	461a      	mov	r2, r3
 80046c4:	2164      	movs	r1, #100	; 0x64
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f003 ffdc 	bl	8008684 <VL53L0X_RdWord>
 80046cc:	4603      	mov	r3, r0
 80046ce:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80046d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80046d8:	8afb      	ldrh	r3, [r7, #22]
 80046da:	025b      	lsls	r3, r3, #9
 80046dc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	77bb      	strb	r3, [r7, #30]
		break;
 80046e2:	e001      	b.n	80046e8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80046e4:	23fc      	movs	r3, #252	; 0xfc
 80046e6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d12a      	bne.n	8004746 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80046f0:	7fbb      	ldrb	r3, [r7, #30]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d124      	bne.n	8004740 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d110      	bne.n	800471e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	330c      	adds	r3, #12
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800471c:	e013      	b.n	8004746 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	330c      	adds	r3, #12
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800473e:	e002      	b.n	8004746 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004746:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop

08004754 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004762:	f107 030e 	add.w	r3, r7, #14
 8004766:	461a      	mov	r2, r3
 8004768:	2101      	movs	r1, #1
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f003 ff03 	bl	8008576 <VL53L0X_RdByte>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10e      	bne.n	800479a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800477c:	7bba      	ldrb	r2, [r7, #14]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	b25b      	sxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	da03      	bge.n	8004794 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e002      	b.n	800479a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d104      	bne.n	80047ac <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80047c4:	f107 030e 	add.w	r3, r7, #14
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fb92 	bl	8003ef4 <VL53L0X_GetDeviceMode>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80047d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f898 	bl	8004918 <VL53L0X_StartMeasurement>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80047ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 fb09 	bl	8005e0c <VL53L0X_measurement_poll_for_completion>
 80047fa:	4603      	mov	r3, r0
 80047fc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80047fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004806:	7bbb      	ldrb	r3, [r7, #14]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2203      	movs	r2, #3
 8004810:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004830:	2301      	movs	r3, #1
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f001 faab 	bl	8005d92 <VL53L0X_perform_ref_calibration>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004840:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004858:	2300      	movs	r3, #0
 800485a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004862:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004864:	7dbb      	ldrb	r3, [r7, #22]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d005      	beq.n	8004876 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800486a:	7dbb      	ldrb	r3, [r7, #22]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d002      	beq.n	8004876 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004870:	7dbb      	ldrb	r3, [r7, #22]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d147      	bne.n	8004906 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	f107 0210 	add.w	r2, r7, #16
 800487e:	2101      	movs	r1, #1
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fb8d 	bl	8004fa0 <VL53L0X_GetInterruptThresholds>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004890:	d803      	bhi.n	800489a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004892:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004894:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004898:	d935      	bls.n	8004906 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800489a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d131      	bne.n	8004906 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80048a8:	491a      	ldr	r1, [pc, #104]	; (8004914 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f002 ff20 	bl	80076f0 <VL53L0X_load_tuning_settings>
 80048b0:	4603      	mov	r3, r0
 80048b2:	75fb      	strb	r3, [r7, #23]
 80048b4:	e027      	b.n	8004906 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80048b6:	2204      	movs	r2, #4
 80048b8:	21ff      	movs	r1, #255	; 0xff
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f003 ff56 	bl	800876c <VL53L0X_WrByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80048ca:	2200      	movs	r2, #0
 80048cc:	2170      	movs	r1, #112	; 0x70
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f003 ff4c 	bl	800876c <VL53L0X_WrByte>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	4313      	orrs	r3, r2
 80048dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80048de:	2200      	movs	r2, #0
 80048e0:	21ff      	movs	r1, #255	; 0xff
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f003 ff42 	bl	800876c <VL53L0X_WrByte>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f003 ff38 	bl	800876c <VL53L0X_WrByte>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	4313      	orrs	r3, r2
 8004904:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004906:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000284 	.word	0x20000284

08004918 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004920:	2300      	movs	r3, #0
 8004922:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004928:	f107 030e 	add.w	r3, r7, #14
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fae0 	bl	8003ef4 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d035      	beq.n	80049a6 <VL53L0X_StartMeasurement+0x8e>
 800493a:	2b03      	cmp	r3, #3
 800493c:	d04d      	beq.n	80049da <VL53L0X_StartMeasurement+0xc2>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d165      	bne.n	8004a0e <VL53L0X_StartMeasurement+0xf6>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004942:	2201      	movs	r2, #1
 8004944:	2100      	movs	r1, #0
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f003 ff10 	bl	800876c <VL53L0X_WrByte>
 800494c:	4603      	mov	r3, r0
 800494e:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d15b      	bne.n	8004a14 <VL53L0X_StartMeasurement+0xfc>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <VL53L0X_StartMeasurement+0x60>
					Status = VL53L0X_RdByte(Dev,
 8004966:	f107 030d 	add.w	r3, r7, #13
 800496a:	461a      	mov	r2, r3
 800496c:	2100      	movs	r1, #0
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f003 fe01 	bl	8008576 <VL53L0X_RdByte>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3301      	adds	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800497e:	7b7a      	ldrb	r2, [r7, #13]
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	4013      	ands	r3, r2
 8004984:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	429a      	cmp	r2, r3
 800498a:	d106      	bne.n	800499a <VL53L0X_StartMeasurement+0x82>
				&& (Status == VL53L0X_ERROR_NONE)
 800498c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <VL53L0X_StartMeasurement+0x82>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2bc7      	cmp	r3, #199	; 0xc7
 8004998:	d9e2      	bls.n	8004960 <VL53L0X_StartMeasurement+0x48>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2bc7      	cmp	r3, #199	; 0xc7
 800499e:	d939      	bls.n	8004a14 <VL53L0X_StartMeasurement+0xfc>
				Status = VL53L0X_ERROR_TIME_OUT;
 80049a0:	23f9      	movs	r3, #249	; 0xf9
 80049a2:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80049a4:	e036      	b.n	8004a14 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80049a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d105      	bne.n	80049ba <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80049ae:	2101      	movs	r1, #1
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff4b 	bl	800484c <VL53L0X_CheckAndLoadInterruptSettings>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80049ba:	2202      	movs	r2, #2
 80049bc:	2100      	movs	r1, #0
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f003 fed4 	bl	800876c <VL53L0X_WrByte>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80049c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d123      	bne.n	8004a18 <VL53L0X_StartMeasurement+0x100>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80049d8:	e01e      	b.n	8004a18 <VL53L0X_StartMeasurement+0x100>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80049da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <VL53L0X_StartMeasurement+0xd6>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80049e2:	2101      	movs	r1, #1
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff31 	bl	800484c <VL53L0X_CheckAndLoadInterruptSettings>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80049ee:	2204      	movs	r2, #4
 80049f0:	2100      	movs	r1, #0
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f003 feba 	bl	800876c <VL53L0X_WrByte>
 80049f8:	4603      	mov	r3, r0
 80049fa:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80049fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <VL53L0X_StartMeasurement+0x104>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2204      	movs	r2, #4
 8004a08:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004a0c:	e006      	b.n	8004a1c <VL53L0X_StartMeasurement+0x104>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004a0e:	23f8      	movs	r3, #248	; 0xf8
 8004a10:	75fb      	strb	r3, [r7, #23]
 8004a12:	e004      	b.n	8004a1e <VL53L0X_StartMeasurement+0x106>
		break;
 8004a14:	bf00      	nop
 8004a16:	e002      	b.n	8004a1e <VL53L0X_StartMeasurement+0x106>
		break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <VL53L0X_StartMeasurement+0x106>
		break;
 8004a1c:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004a3e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004a40:	7bbb      	ldrb	r3, [r7, #14]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d112      	bne.n	8004a6c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fb1d 	bl	800508c <VL53L0X_GetInterruptMaskStatus>
 8004a52:	4603      	mov	r3, r0
 8004a54:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d103      	bne.n	8004a64 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e01c      	b.n	8004a9e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e018      	b.n	8004a9e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004a6c:	f107 030d 	add.w	r3, r7, #13
 8004a70:	461a      	mov	r2, r3
 8004a72:	2114      	movs	r1, #20
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f003 fd7e 	bl	8008576 <VL53L0X_RdByte>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004a86:	7b7b      	ldrb	r3, [r7, #13]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b096      	sub	sp, #88	; 0x58
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004abc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	2114      	movs	r1, #20
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f003 fdb1 	bl	800862c <VL53L0X_ReadMulti>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004ad0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 80d2 	bne.w	8004c7e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004ae6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004b02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	025b      	lsls	r3, r3, #9
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b1e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004b20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b3a:	025b      	lsls	r3, r3, #9
 8004b3c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004b42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b5e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004b60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8004b6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004b7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b80:	d047      	beq.n	8004c12 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004b82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b84:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <VL53L0X_GetRangingMeasurementData+0x248>)
 8004b92:	fb82 1203 	smull	r1, r2, r2, r3
 8004b96:	1192      	asrs	r2, r2, #6
 8004b98:	17db      	asrs	r3, r3, #31
 8004b9a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004b9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7f1b      	ldrb	r3, [r3, #28]
 8004baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004bae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02d      	beq.n	8004c12 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004bb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bb8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	121b      	asrs	r3, r3, #8
 8004bc2:	461a      	mov	r2, r3
				if ((SignalRate
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10d      	bne.n	8004be6 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004bca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004bd2:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004bd6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bda:	e016      	b.n	8004c0a <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004bdc:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004be0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004be4:	e011      	b.n	8004c0a <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004be6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bec:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004bf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bf2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004bfa:	121b      	asrs	r3, r3, #8
 8004bfc:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c00:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004c02:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004c06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004c0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004c12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00d      	beq.n	8004c36 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004c1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004c26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	75da      	strb	r2, [r3, #23]
 8004c34:	e006      	b.n	8004c44 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004c3c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004c44:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004c48:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004c4c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f003 f9b6 	bl	8007fcc <VL53L0X_get_pal_range_status>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004c6e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004c76:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c7e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d12f      	bne.n	8004ce6 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f107 040c 	add.w	r4, r7, #12
 8004c8c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004ca0:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004cae:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004cb4:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004cba:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004cc0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004cc6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004ccc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004cd6:	f107 050c 	add.w	r5, r7, #12
 8004cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ce6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3750      	adds	r7, #80	; 0x50
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	10624dd3 	.word	0x10624dd3

08004cf8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004d06:	2100      	movs	r1, #0
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff f8ab 	bl	8003e64 <VL53L0X_SetDeviceMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fd4c 	bl	80047b8 <VL53L0X_PerformSingleMeasurement>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff febc 	bl	8004aac <VL53L0X_GetRangingMeasurementData>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004d40:	2100      	movs	r1, #0
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f962 	bl	800500c <VL53L0X_ClearInterruptMask>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	70fb      	strb	r3, [r7, #3]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70bb      	strb	r3, [r7, #2]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004d7c:	23f6      	movs	r3, #246	; 0xf6
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e107      	b.n	8004f92 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004d82:	78bb      	ldrb	r3, [r7, #2]
 8004d84:	2b14      	cmp	r3, #20
 8004d86:	d110      	bne.n	8004daa <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004d88:	7e3b      	ldrb	r3, [r7, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004d8e:	2310      	movs	r3, #16
 8004d90:	73bb      	strb	r3, [r7, #14]
 8004d92:	e001      	b.n	8004d98 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004d98:	7bbb      	ldrb	r3, [r7, #14]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2184      	movs	r1, #132	; 0x84
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f003 fce4 	bl	800876c <VL53L0X_WrByte>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e0f3      	b.n	8004f92 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004daa:	78bb      	ldrb	r3, [r7, #2]
 8004dac:	2b15      	cmp	r3, #21
 8004dae:	f040 8097 	bne.w	8004ee0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004db2:	2201      	movs	r2, #1
 8004db4:	21ff      	movs	r1, #255	; 0xff
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f003 fcd8 	bl	800876c <VL53L0X_WrByte>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f003 fcce 	bl	800876c <VL53L0X_WrByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	21ff      	movs	r1, #255	; 0xff
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f003 fcc4 	bl	800876c <VL53L0X_WrByte>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004dee:	2201      	movs	r2, #1
 8004df0:	2180      	movs	r1, #128	; 0x80
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f003 fcba 	bl	800876c <VL53L0X_WrByte>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004e02:	2202      	movs	r2, #2
 8004e04:	2185      	movs	r1, #133	; 0x85
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f003 fcb0 	bl	800876c <VL53L0X_WrByte>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004e16:	2204      	movs	r2, #4
 8004e18:	21ff      	movs	r1, #255	; 0xff
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f003 fca6 	bl	800876c <VL53L0X_WrByte>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	21cd      	movs	r1, #205	; 0xcd
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f003 fc9c 	bl	800876c <VL53L0X_WrByte>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004e3e:	2211      	movs	r2, #17
 8004e40:	21cc      	movs	r1, #204	; 0xcc
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f003 fc92 	bl	800876c <VL53L0X_WrByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004e52:	2207      	movs	r2, #7
 8004e54:	21ff      	movs	r1, #255	; 0xff
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f003 fc88 	bl	800876c <VL53L0X_WrByte>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	461a      	mov	r2, r3
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004e66:	2200      	movs	r2, #0
 8004e68:	21be      	movs	r1, #190	; 0xbe
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f003 fc7e 	bl	800876c <VL53L0X_WrByte>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461a      	mov	r2, r3
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004e7a:	2206      	movs	r2, #6
 8004e7c:	21ff      	movs	r1, #255	; 0xff
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f003 fc74 	bl	800876c <VL53L0X_WrByte>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004e8e:	2209      	movs	r2, #9
 8004e90:	21cc      	movs	r1, #204	; 0xcc
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f003 fc6a 	bl	800876c <VL53L0X_WrByte>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	21ff      	movs	r1, #255	; 0xff
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f003 fc60 	bl	800876c <VL53L0X_WrByte>
 8004eac:	4603      	mov	r3, r0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	21ff      	movs	r1, #255	; 0xff
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f003 fc56 	bl	800876c <VL53L0X_WrByte>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2100      	movs	r1, #0
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f003 fc4c 	bl	800876c <VL53L0X_WrByte>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e058      	b.n	8004f92 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d121      	bne.n	8004f2c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004ee8:	787b      	ldrb	r3, [r7, #1]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d81b      	bhi.n	8004f26 <VL53L0X_SetGpioConfig+0x1ce>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <VL53L0X_SetGpioConfig+0x19c>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f09 	.word	0x08004f09
 8004ef8:	08004f0f 	.word	0x08004f0f
 8004efc:	08004f15 	.word	0x08004f15
 8004f00:	08004f1b 	.word	0x08004f1b
 8004f04:	08004f21 	.word	0x08004f21
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73bb      	strb	r3, [r7, #14]
				break;
 8004f0c:	e00f      	b.n	8004f2e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73bb      	strb	r3, [r7, #14]
				break;
 8004f12:	e00c      	b.n	8004f2e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004f14:	2302      	movs	r3, #2
 8004f16:	73bb      	strb	r3, [r7, #14]
				break;
 8004f18:	e009      	b.n	8004f2e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	73bb      	strb	r3, [r7, #14]
				break;
 8004f1e:	e006      	b.n	8004f2e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004f20:	2304      	movs	r3, #4
 8004f22:	73bb      	strb	r3, [r7, #14]
				break;
 8004f24:	e003      	b.n	8004f2e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8004f26:	23f5      	movs	r3, #245	; 0xf5
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	e000      	b.n	8004f2e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004f2c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	210a      	movs	r1, #10
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f003 fc15 	bl	800876c <VL53L0X_WrByte>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004f4e:	7e3b      	ldrb	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73bb      	strb	r3, [r7, #14]
 8004f58:	e001      	b.n	8004f5e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004f5a:	2310      	movs	r3, #16
 8004f5c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004f5e:	7bbb      	ldrb	r3, [r7, #14]
 8004f60:	22ef      	movs	r2, #239	; 0xef
 8004f62:	2184      	movs	r1, #132	; 0x84
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f003 fc4f 	bl	8008808 <VL53L0X_UpdateByte>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	787a      	ldrb	r2, [r7, #1]
 8004f7a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004f86:	2100      	movs	r1, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f83f 	bl	800500c <VL53L0X_ClearInterruptMask>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	461a      	mov	r2, r3
 8004fba:	210e      	movs	r1, #14
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f003 fb61 	bl	8008684 <VL53L0X_RdWord>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004fc6:	8abb      	ldrh	r3, [r7, #20]
 8004fc8:	045b      	lsls	r3, r3, #17
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <VL53L0X_GetInterruptThresholds+0x68>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004fdc:	f107 0314 	add.w	r3, r7, #20
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	210c      	movs	r1, #12
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f003 fb4d 	bl	8008684 <VL53L0X_RdWord>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004fee:	8abb      	ldrh	r3, [r7, #20]
 8004ff0:	045b      	lsls	r3, r3, #17
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <VL53L0X_GetInterruptThresholds+0x68>)
 8004ff6:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	1ffe0000 	.word	0x1ffe0000

0800500c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800501e:	2201      	movs	r2, #1
 8005020:	210b      	movs	r1, #11
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f003 fba2 	bl	800876c <VL53L0X_WrByte>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800502c:	2200      	movs	r2, #0
 800502e:	210b      	movs	r1, #11
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f003 fb9b 	bl	800876c <VL53L0X_WrByte>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	4313      	orrs	r3, r2
 800503e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005040:	f107 030d 	add.w	r3, r7, #13
 8005044:	461a      	mov	r2, r3
 8005046:	2113      	movs	r1, #19
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f003 fa94 	bl	8008576 <VL53L0X_RdByte>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	4313      	orrs	r3, r2
 8005056:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	3301      	adds	r3, #1
 800505c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800505e:	7b7b      	ldrb	r3, [r7, #13]
 8005060:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d803      	bhi.n	8005076 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800506e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0d3      	beq.n	800501e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005076:	7bbb      	ldrb	r3, [r7, #14]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800507c:	23f4      	movs	r3, #244	; 0xf4
 800507e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800509a:	f107 030e 	add.w	r3, r7, #14
 800509e:	461a      	mov	r2, r3
 80050a0:	2113      	movs	r1, #19
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f003 fa67 	bl	8008576 <VL53L0X_RdByte>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	f003 0207 	and.w	r2, r3, #7
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80050b6:	7bbb      	ldrb	r3, [r7, #14]
 80050b8:	f003 0318 	and.w	r3, r3, #24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80050c0:	23fa      	movs	r3, #250	; 0xfa
 80050c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80050c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050dc:	2300      	movs	r3, #0
 80050de:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fa03 	bl	80054f0 <VL53L0X_perform_ref_spad_management>
 80050ea:	4603      	mov	r3, r0
 80050ec:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80050ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005108:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800510c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800510e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005112:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	461a      	mov	r2, r3
 800511a:	2128      	movs	r1, #40	; 0x28
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f003 fab1 	bl	8008684 <VL53L0X_RdWord>
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11e      	bne.n	800516c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800512e:	893b      	ldrh	r3, [r7, #8]
 8005130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005134:	b29b      	uxth	r3, r3
 8005136:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005138:	893b      	ldrh	r3, [r7, #8]
 800513a:	461a      	mov	r2, r3
 800513c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005140:	429a      	cmp	r2, r3
 8005142:	dd0b      	ble.n	800515c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005144:	893a      	ldrh	r2, [r7, #8]
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	b21b      	sxth	r3, r3
 800514e:	461a      	mov	r2, r3
					* 250;
 8005150:	23fa      	movs	r3, #250	; 0xfa
 8005152:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e007      	b.n	800516c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	b21b      	sxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	23fa      	movs	r3, #250	; 0xfa
 8005164:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800516c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005178:	b480      	push	{r7}
 800517a:	b08b      	sub	sp, #44	; 0x2c
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005186:	2308      	movs	r3, #8
 8005188:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f04f 32ff 	mov.w	r2, #4294967295
 8005194:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80051a8:	69b9      	ldr	r1, [r7, #24]
 80051aa:	fb01 f202 	mul.w	r2, r1, r2
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
 80051b6:	e030      	b.n	800521a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	4413      	add	r3, r2
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80051c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d11e      	bne.n	800520c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80051ce:	7ffa      	ldrb	r2, [r7, #31]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	fa42 f303 	asr.w	r3, r2, r3
 80051d6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80051dc:	e016      	b.n	800520c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80051de:	7ffb      	ldrb	r3, [r7, #31]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <get_next_good_spad+0x88>
				success = 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	fb02 f203 	mul.w	r2, r2, r3
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	4413      	add	r3, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	601a      	str	r2, [r3, #0]
				break;
 80051fe:	e009      	b.n	8005214 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005200:	7ffb      	ldrb	r3, [r7, #31]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	3301      	adds	r3, #1
 800520a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800520c:	6a3a      	ldr	r2, [r7, #32]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d3e4      	bcc.n	80051de <get_next_good_spad+0x66>
				coarseIndex++) {
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	3301      	adds	r3, #1
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d202      	bcs.n	8005228 <get_next_good_spad+0xb0>
 8005222:	7fbb      	ldrb	r3, [r7, #30]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0c7      	beq.n	80051b8 <get_next_good_spad+0x40>
		}
	}
}
 8005228:	bf00      	nop
 800522a:	372c      	adds	r7, #44	; 0x2c
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <is_aperture+0x30>)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <is_aperture+0x22>
		isAperture = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	2000043c 	.word	0x2000043c

08005268 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005278:	2308      	movs	r3, #8
 800527a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	fbb3 f2f2 	udiv	r2, r3, r2
 800528e:	69b9      	ldr	r1, [r7, #24]
 8005290:	fb01 f202 	mul.w	r2, r1, r2
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80052a0:	23ce      	movs	r3, #206	; 0xce
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e010      	b.n	80052c8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b25a      	sxtb	r2, r3
 80052b0:	2101      	movs	r1, #1
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b259      	sxtb	r1, r3
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	b2ca      	uxtb	r2, r1
 80052c6:	701a      	strb	r2, [r3, #0]

	return status;
 80052c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3724      	adds	r7, #36	; 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80052e2:	2306      	movs	r3, #6
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	21b0      	movs	r1, #176	; 0xb0
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f003 f96f 	bl	80085cc <VL53L0X_WriteMulti>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005308:	2306      	movs	r3, #6
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	21b0      	movs	r1, #176	; 0xb0
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f003 f98c 	bl	800862c <VL53L0X_ReadMulti>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	460b      	mov	r3, r1
 8005332:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800533e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005340:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005342:	2300      	movs	r3, #0
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	e02b      	b.n	80053a0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ff11 	bl	8005178 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d103      	bne.n	8005366 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800535e:	23ce      	movs	r3, #206	; 0xce
 8005360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005364:	e020      	b.n	80053a8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	461a      	mov	r2, r3
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536c:	4413      	add	r3, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff ff60 	bl	8005234 <is_aperture>
 8005374:	4603      	mov	r3, r0
 8005376:	461a      	mov	r2, r3
 8005378:	7afb      	ldrb	r3, [r7, #11]
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800537e:	23ce      	movs	r3, #206	; 0xce
 8005380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005384:	e010      	b.n	80053a8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800538e:	6838      	ldr	r0, [r7, #0]
 8005390:	f7ff ff6a 	bl	8005268 <enable_spad_bit>
		currentSpad++;
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	3301      	adds	r3, #1
 8005398:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	3301      	adds	r3, #1
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d3cf      	bcc.n	8005348 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80053a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80053ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff ff8d 	bl	80052d8 <set_ref_spad_map>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80053c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d121      	bne.n	8005410 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80053cc:	f107 0314 	add.w	r3, r7, #20
 80053d0:	4619      	mov	r1, r3
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff ff93 	bl	80052fe <get_ref_spad_map>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80053e2:	e011      	b.n	8005408 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	4413      	add	r3, r2
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	f107 0114 	add.w	r1, r7, #20
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	440b      	add	r3, r1
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d003      	beq.n	8005402 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80053fa:	23ce      	movs	r3, #206	; 0xce
 80053fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005400:	e006      	b.n	8005410 <enable_ref_spads+0xec>
			}
			i++;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	3301      	adds	r3, #1
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	429a      	cmp	r2, r3
 800540e:	d3e9      	bcc.n	80053e4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005410:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	; 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800543c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005444:	22c0      	movs	r2, #192	; 0xc0
 8005446:	2101      	movs	r1, #1
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f003 f98f 	bl	800876c <VL53L0X_WrByte>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005454:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005458:	2b00      	cmp	r3, #0
 800545a:	d108      	bne.n	800546e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fc48 	bl	8004cf8 <VL53L0X_PerformSingleRangingMeasurement>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800546e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005476:	2201      	movs	r2, #1
 8005478:	21ff      	movs	r1, #255	; 0xff
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f003 f976 	bl	800876c <VL53L0X_WrByte>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005486:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	21b6      	movs	r1, #182	; 0xb6
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f003 f8f6 	bl	8008684 <VL53L0X_RdWord>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800549e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d107      	bne.n	80054b6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80054a6:	2200      	movs	r2, #0
 80054a8:	21ff      	movs	r1, #255	; 0xff
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f003 f95e 	bl	800876c <VL53L0X_WrByte>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80054b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d112      	bne.n	80054e4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80054be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054c2:	461a      	mov	r2, r3
 80054c4:	2101      	movs	r1, #1
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f003 f950 	bl	800876c <VL53L0X_WrByte>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80054d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80054e0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80054e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	; 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b09d      	sub	sp, #116	; 0x74
 80054f4:	af06      	add	r7, sp, #24
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005502:	23b4      	movs	r3, #180	; 0xb4
 8005504:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8005508:	2303      	movs	r3, #3
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800550c:	232c      	movs	r3, #44	; 0x2c
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800551c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005520:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800552a:	2306      	movs	r3, #6
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8005554:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005556:	2300      	movs	r3, #0
 8005558:	64bb      	str	r3, [r7, #72]	; 0x48
 800555a:	e009      	b.n	8005570 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005560:	4413      	add	r3, r2
 8005562:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800556a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556c:	3301      	adds	r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	429a      	cmp	r2, r3
 8005576:	d3f1      	bcc.n	800555c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005578:	2201      	movs	r2, #1
 800557a:	21ff      	movs	r1, #255	; 0xff
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f003 f8f5 	bl	800876c <VL53L0X_WrByte>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005588:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005590:	2200      	movs	r2, #0
 8005592:	214f      	movs	r1, #79	; 0x4f
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f003 f8e9 	bl	800876c <VL53L0X_WrByte>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80055a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80055a8:	222c      	movs	r2, #44	; 0x2c
 80055aa:	214e      	movs	r1, #78	; 0x4e
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f003 f8dd 	bl	800876c <VL53L0X_WrByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80055b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d107      	bne.n	80055d0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055c0:	2200      	movs	r2, #0
 80055c2:	21ff      	movs	r1, #255	; 0xff
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f003 f8d1 	bl	800876c <VL53L0X_WrByte>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80055d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80055d8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80055dc:	461a      	mov	r2, r3
 80055de:	21b6      	movs	r1, #182	; 0xb6
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f003 f8c3 	bl	800876c <VL53L0X_WrByte>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80055ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d107      	bne.n	8005604 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f003 f8b7 	bl	800876c <VL53L0X_WrByte>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8005604:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800560c:	f107 0210 	add.w	r2, r7, #16
 8005610:	f107 0111 	add.w	r1, r7, #17
 8005614:	2300      	movs	r3, #0
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fbbb 	bl	8005d92 <VL53L0X_perform_ref_calibration>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005622:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005626:	2b00      	cmp	r3, #0
 8005628:	d121      	bne.n	800566e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800562e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005630:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8005646:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800564a:	f107 0218 	add.w	r2, r7, #24
 800564e:	9204      	str	r2, [sp, #16]
 8005650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005656:	9202      	str	r2, [sp, #8]
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4623      	mov	r3, r4
 8005660:	4602      	mov	r2, r0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fe5e 	bl	8005324 <enable_ref_spads>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800566e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005672:	2b00      	cmp	r3, #0
 8005674:	d174      	bne.n	8005760 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800567a:	f107 0312 	add.w	r3, r7, #18
 800567e:	4619      	mov	r1, r3
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fecb 	bl	800541c <perform_ref_signal_measurement>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800568c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005690:	2b00      	cmp	r3, #0
 8005692:	d161      	bne.n	8005758 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005694:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005696:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005698:	429a      	cmp	r2, r3
 800569a:	d25d      	bcs.n	8005758 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800569c:	2300      	movs	r3, #0
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a0:	e009      	b.n	80056b6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80056b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b2:	3301      	adds	r3, #1
 80056b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d3f1      	bcc.n	80056a2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80056be:	e002      	b.n	80056c6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80056c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c2:	3301      	adds	r3, #1
 80056c4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80056c6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80056ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056cc:	4413      	add	r3, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fdb0 	bl	8005234 <is_aperture>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80056da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3ee      	bcc.n	80056c0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80056e2:	2301      	movs	r3, #1
 80056e4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80056e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80056f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80056fa:	f107 0218 	add.w	r2, r7, #24
 80056fe:	9204      	str	r2, [sp, #16]
 8005700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005702:	9203      	str	r2, [sp, #12]
 8005704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005706:	9202      	str	r2, [sp, #8]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4623      	mov	r3, r4
 8005710:	4602      	mov	r2, r0
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff fe06 	bl	8005324 <enable_ref_spads>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800571e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11b      	bne.n	800575e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800572a:	f107 0312 	add.w	r3, r7, #18
 800572e:	4619      	mov	r1, r3
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff fe73 	bl	800541c <perform_ref_signal_measurement>
 8005736:	4603      	mov	r3, r0
 8005738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800573c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10c      	bne.n	800575e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005744:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005746:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005748:	429a      	cmp	r2, r3
 800574a:	d208      	bcs.n	800575e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005756:	e002      	b.n	800575e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575c:	e000      	b.n	8005760 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800575e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005760:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 80af 	bne.w	80058c8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800576a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800576c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800576e:	429a      	cmp	r2, r3
 8005770:	f240 80aa 	bls.w	80058c8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005784:	f107 031c 	add.w	r3, r7, #28
 8005788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578a:	4618      	mov	r0, r3
 800578c:	f00d f853 	bl	8012836 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005790:	8a7b      	ldrh	r3, [r7, #18]
 8005792:	461a      	mov	r2, r3
 8005794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	bfb8      	it	lt
 800579c:	425b      	neglt	r3, r3
 800579e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80057a6:	e086      	b.n	80058b6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80057ae:	f107 0314 	add.w	r3, r7, #20
 80057b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b6:	f7ff fcdf 	bl	8005178 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d103      	bne.n	80057ca <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80057c2:	23ce      	movs	r3, #206	; 0xce
 80057c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80057c8:	e07e      	b.n	80058c8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	3301      	adds	r3, #1
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80057d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4413      	add	r3, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fd2b 	bl	8005234 <is_aperture>
 80057de:	4603      	mov	r3, r0
 80057e0:	461a      	mov	r2, r3
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80057e8:	23ce      	movs	r3, #206	; 0xce
 80057ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80057ee:	e06b      	b.n	80058c8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80057fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fd32 	bl	8005268 <enable_spad_bit>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800580a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005814:	3301      	adds	r3, #1
 8005816:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800581e:	4619      	mov	r1, r3
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fd59 	bl	80052d8 <set_ref_spad_map>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800582c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005830:	2b00      	cmp	r3, #0
 8005832:	d146      	bne.n	80058c2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005834:	f107 0312 	add.w	r3, r7, #18
 8005838:	4619      	mov	r1, r3
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fdee 	bl	800541c <perform_ref_signal_measurement>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005846:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800584a:	2b00      	cmp	r3, #0
 800584c:	d13b      	bne.n	80058c6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800584e:	8a7b      	ldrh	r3, [r7, #18]
 8005850:	461a      	mov	r2, r3
 8005852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfb8      	it	lt
 800585a:	425b      	neglt	r3, r3
 800585c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800585e:	8a7b      	ldrh	r3, [r7, #18]
 8005860:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005862:	429a      	cmp	r2, r3
 8005864:	d21c      	bcs.n	80058a0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586a:	429a      	cmp	r2, r3
 800586c:	d914      	bls.n	8005898 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800586e:	f107 031c 	add.w	r3, r7, #28
 8005872:	4619      	mov	r1, r3
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff fd2f 	bl	80052d8 <set_ref_spad_map>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005886:	f107 011c 	add.w	r1, r7, #28
 800588a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588c:	4618      	mov	r0, r3
 800588e:	f00c ffd2 	bl	8012836 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	3b01      	subs	r3, #1
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589e:	e00a      	b.n	80058b6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80058aa:	f107 031c 	add.w	r3, r7, #28
 80058ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b0:	4618      	mov	r0, r3
 80058b2:	f00c ffc0 	bl	8012836 <memcpy>
		while (!complete) {
 80058b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f43f af74 	beq.w	80057a8 <VL53L0X_perform_ref_spad_management+0x2b8>
 80058c0:	e002      	b.n	80058c8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80058c6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80058c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d115      	bne.n	80058fc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80058dc:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80058fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005900:	4618      	mov	r0, r3
 8005902:	375c      	adds	r7, #92	; 0x5c
 8005904:	46bd      	mov	sp, r7
 8005906:	bd90      	pop	{r4, r7, pc}

08005908 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b093      	sub	sp, #76	; 0x4c
 800590c:	af06      	add	r7, sp, #24
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005920:	23b4      	movs	r3, #180	; 0xb4
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005926:	2306      	movs	r3, #6
 8005928:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800592a:	232c      	movs	r3, #44	; 0x2c
 800592c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800592e:	2201      	movs	r2, #1
 8005930:	21ff      	movs	r1, #255	; 0xff
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f002 ff1a 	bl	800876c <VL53L0X_WrByte>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800593e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005942:	2b00      	cmp	r3, #0
 8005944:	d107      	bne.n	8005956 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005946:	2200      	movs	r2, #0
 8005948:	214f      	movs	r1, #79	; 0x4f
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f002 ff0e 	bl	800876c <VL53L0X_WrByte>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005956:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800595e:	222c      	movs	r2, #44	; 0x2c
 8005960:	214e      	movs	r1, #78	; 0x4e
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f002 ff02 	bl	800876c <VL53L0X_WrByte>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800596e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005976:	2200      	movs	r2, #0
 8005978:	21ff      	movs	r1, #255	; 0xff
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f002 fef6 	bl	800876c <VL53L0X_WrByte>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005986:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800598e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005992:	461a      	mov	r2, r3
 8005994:	21b6      	movs	r1, #182	; 0xb6
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f002 fee8 	bl	800876c <VL53L0X_WrByte>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	e009      	b.n	80059bc <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	3301      	adds	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3f1      	bcc.n	80059a8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d011      	beq.n	80059ee <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80059ca:	e002      	b.n	80059d2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	3301      	adds	r3, #1
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80059d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	4413      	add	r3, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fc2a 	bl	8005234 <is_aperture>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <VL53L0X_set_reference_spads+0xe6>
 80059e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3ee      	bcc.n	80059cc <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80059fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059fe:	79f9      	ldrb	r1, [r7, #7]
 8005a00:	f107 0214 	add.w	r2, r7, #20
 8005a04:	9204      	str	r2, [sp, #16]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	9203      	str	r2, [sp, #12]
 8005a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0c:	9202      	str	r2, [sp, #8]
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	4623      	mov	r3, r4
 8005a16:	4602      	mov	r2, r0
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff fc83 	bl	8005324 <enable_ref_spads>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005a24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10c      	bne.n	8005a46 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	79fa      	ldrb	r2, [r7, #7]
 8005a42:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005a46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3734      	adds	r7, #52	; 0x34
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}

08005a52 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	2100      	movs	r1, #0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 fe78 	bl	800876c <VL53L0X_WrByte>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f9bf 	bl	8005e0c <VL53L0X_measurement_poll_for_completion>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fab5 	bl	800500c <VL53L0X_ClearInterruptMask>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f002 fe5a 	bl	800876c <VL53L0X_WrByte>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	70fb      	strb	r3, [r7, #3]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70bb      	strb	r3, [r7, #2]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005aea:	2201      	movs	r2, #1
 8005aec:	21ff      	movs	r1, #255	; 0xff
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f002 fe3c 	bl	800876c <VL53L0X_WrByte>
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005afe:	2200      	movs	r2, #0
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 fe32 	bl	800876c <VL53L0X_WrByte>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b12:	2200      	movs	r2, #0
 8005b14:	21ff      	movs	r1, #255	; 0xff
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f002 fe28 	bl	800876c <VL53L0X_WrByte>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01e      	beq.n	8005b6a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005b2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	21cb      	movs	r1, #203	; 0xcb
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f002 fd1c 	bl	8008576 <VL53L0X_RdByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d02a      	beq.n	8005ba6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005b50:	f107 030e 	add.w	r3, r7, #14
 8005b54:	461a      	mov	r2, r3
 8005b56:	21ee      	movs	r1, #238	; 0xee
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f002 fd0c 	bl	8008576 <VL53L0X_RdByte>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	e01d      	b.n	8005ba6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005b72:	78bb      	ldrb	r3, [r7, #2]
 8005b74:	461a      	mov	r2, r3
 8005b76:	21cb      	movs	r1, #203	; 0xcb
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f002 fdf7 	bl	800876c <VL53L0X_WrByte>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005b88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005b90:	787b      	ldrb	r3, [r7, #1]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	21ee      	movs	r1, #238	; 0xee
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f002 fe36 	bl	8008808 <VL53L0X_UpdateByte>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	21ff      	movs	r1, #255	; 0xff
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f002 fdde 	bl	800876c <VL53L0X_WrByte>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f002 fdd4 	bl	800876c <VL53L0X_WrByte>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	21ff      	movs	r1, #255	; 0xff
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f002 fdca 	bl	800876c <VL53L0X_WrByte>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	f023 0310 	bic.w	r3, r3, #16
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	701a      	strb	r2, [r3, #0]

	return Status;
 8005bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b08a      	sub	sp, #40	; 0x28
 8005bfe:	af04      	add	r7, sp, #16
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	4611      	mov	r1, r2
 8005c06:	461a      	mov	r2, r3
 8005c08:	460b      	mov	r3, r1
 8005c0a:	71fb      	strb	r3, [r7, #7]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005c24:	79bb      	ldrb	r3, [r7, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005c30:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005c32:	2201      	movs	r2, #1
 8005c34:	2101      	movs	r1, #1
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f002 fd98 	bl	800876c <VL53L0X_WrByte>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005c48:	2140      	movs	r1, #64	; 0x40
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ff01 	bl	8005a52 <VL53L0X_perform_single_ref_calibration>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d115      	bne.n	8005c88 <VL53L0X_perform_vhv_calibration+0x8e>
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d112      	bne.n	8005c88 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005c62:	7d39      	ldrb	r1, [r7, #20]
 8005c64:	7d7a      	ldrb	r2, [r7, #21]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9303      	str	r3, [sp, #12]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	9302      	str	r3, [sp, #8]
 8005c6e:	f107 0313 	add.w	r3, r7, #19
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff23 	bl	8005ac8 <VL53L0X_ref_calibration_io>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]
 8005c86:	e002      	b.n	8005c8e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d112      	bne.n	8005cbc <VL53L0X_perform_vhv_calibration+0xc2>
 8005c96:	79bb      	ldrb	r3, [r7, #6]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00f      	beq.n	8005cbc <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005c9c:	7dbb      	ldrb	r3, [r7, #22]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f002 fd62 	bl	800876c <VL53L0X_WrByte>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	7dba      	ldrb	r2, [r7, #22]
 8005cb8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	71fb      	strb	r3, [r7, #7]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005cee:	79bb      	ldrb	r3, [r7, #6]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005cfa:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	2101      	movs	r1, #1
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f002 fd33 	bl	800876c <VL53L0X_WrByte>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005d12:	2100      	movs	r1, #0
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff fe9c 	bl	8005a52 <VL53L0X_perform_single_ref_calibration>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d115      	bne.n	8005d52 <VL53L0X_perform_phase_calibration+0x8a>
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d112      	bne.n	8005d52 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005d2c:	7d39      	ldrb	r1, [r7, #20]
 8005d2e:	7d7a      	ldrb	r2, [r7, #21]
 8005d30:	2301      	movs	r3, #1
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	2300      	movs	r3, #0
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f107 0313 	add.w	r3, r7, #19
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	460b      	mov	r3, r1
 8005d44:	2101      	movs	r1, #1
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff febe 	bl	8005ac8 <VL53L0X_ref_calibration_io>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]
 8005d50:	e002      	b.n	8005d58 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d112      	bne.n	8005d86 <VL53L0X_perform_phase_calibration+0xbe>
 8005d60:	79bb      	ldrb	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00f      	beq.n	8005d86 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d66:	7dbb      	ldrb	r3, [r7, #22]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f002 fcfd 	bl	800876c <VL53L0X_WrByte>
 8005d72:	4603      	mov	r3, r0
 8005d74:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	7dba      	ldrb	r2, [r7, #22]
 8005d82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005dae:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	2300      	movs	r3, #0
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff ff1f 	bl	8005bfa <VL53L0X_perform_vhv_calibration>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff ff7a 	bl	8005cc8 <VL53L0X_perform_phase_calibration>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10f      	bne.n	8005e00 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005de0:	7dbb      	ldrb	r3, [r7, #22]
 8005de2:	461a      	mov	r2, r3
 8005de4:	2101      	movs	r1, #1
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f002 fcc0 	bl	800876c <VL53L0X_WrByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	7dba      	ldrb	r2, [r7, #22]
 8005dfc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005e20:	f107 030f 	add.w	r3, r7, #15
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fe fdff 	bl	8004a2a <VL53L0X_GetMeasurementDataReady>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10f      	bne.n	8005e58 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d00e      	beq.n	8005e5c <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3301      	adds	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2bc7      	cmp	r3, #199	; 0xc7
 8005e48:	d902      	bls.n	8005e50 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005e4a:	23f9      	movs	r3, #249	; 0xf9
 8005e4c:	75fb      	strb	r3, [r7, #23]
			break;
 8005e4e:	e006      	b.n	8005e5e <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 fd0d 	bl	8008870 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005e56:	e7e3      	b.n	8005e20 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8005e5c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	4603      	mov	r3, r0
 8005e72:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ec6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005ec8:	e002      	b.n	8005ed0 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	089b      	lsrs	r3, r3, #2
 8005ece:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d8f8      	bhi.n	8005eca <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005ed8:	e017      	b.n	8005f0a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4413      	add	r3, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d30b      	bcc.n	8005efe <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4413      	add	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e002      	b.n	8005f04 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e4      	bne.n	8005eda <VL53L0X_isqrt+0x24>
	}

	return res;
 8005f10:	68fb      	ldr	r3, [r7, #12]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2183      	movs	r1, #131	; 0x83
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f002 fc1c 	bl	800876c <VL53L0X_WrByte>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11c      	bne.n	8005f80 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005f4a:	f107 030f 	add.w	r3, r7, #15
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2183      	movs	r1, #131	; 0x83
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f002 fb0f 	bl	8008576 <VL53L0X_RdByte>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <VL53L0X_device_read_strobe+0x58>
 8005f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2bc7      	cmp	r3, #199	; 0xc7
 8005f74:	d9e9      	bls.n	8005f4a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2bc7      	cmp	r3, #199	; 0xc7
 8005f7a:	d901      	bls.n	8005f80 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005f7c:	23f9      	movs	r3, #249	; 0xf9
 8005f7e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005f80:	2201      	movs	r2, #1
 8005f82:	2183      	movs	r1, #131	; 0x83
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f002 fbf1 	bl	800876c <VL53L0X_WrByte>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005f94:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b098      	sub	sp, #96	; 0x60
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005fd0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005fd4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005fec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ff0:	2b07      	cmp	r3, #7
 8005ff2:	f000 8408 	beq.w	8006806 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fbb6 	bl	800876c <VL53L0X_WrByte>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006008:	4313      	orrs	r3, r2
 800600a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800600e:	2201      	movs	r2, #1
 8006010:	21ff      	movs	r1, #255	; 0xff
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f002 fbaa 	bl	800876c <VL53L0X_WrByte>
 8006018:	4603      	mov	r3, r0
 800601a:	461a      	mov	r2, r3
 800601c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006020:	4313      	orrs	r3, r2
 8006022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006026:	2200      	movs	r2, #0
 8006028:	2100      	movs	r1, #0
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 fb9e 	bl	800876c <VL53L0X_WrByte>
 8006030:	4603      	mov	r3, r0
 8006032:	461a      	mov	r2, r3
 8006034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006038:	4313      	orrs	r3, r2
 800603a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800603e:	2206      	movs	r2, #6
 8006040:	21ff      	movs	r1, #255	; 0xff
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f002 fb92 	bl	800876c <VL53L0X_WrByte>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006050:	4313      	orrs	r3, r2
 8006052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006056:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800605a:	461a      	mov	r2, r3
 800605c:	2183      	movs	r1, #131	; 0x83
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 fa89 	bl	8008576 <VL53L0X_RdByte>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800606c:	4313      	orrs	r3, r2
 800606e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	2183      	movs	r1, #131	; 0x83
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f002 fb73 	bl	800876c <VL53L0X_WrByte>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800608e:	4313      	orrs	r3, r2
 8006090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006094:	2207      	movs	r2, #7
 8006096:	21ff      	movs	r1, #255	; 0xff
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f002 fb67 	bl	800876c <VL53L0X_WrByte>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80060ac:	2201      	movs	r2, #1
 80060ae:	2181      	movs	r1, #129	; 0x81
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 fb5b 	bl	800876c <VL53L0X_WrByte>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060be:	4313      	orrs	r3, r2
 80060c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f002 fbd3 	bl	8008870 <VL53L0X_PollingDelay>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80060d8:	2201      	movs	r2, #1
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 fb45 	bl	800876c <VL53L0X_WrByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8098 	beq.w	800622c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80060fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006100:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 8091 	bne.w	800622c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800610a:	226b      	movs	r2, #107	; 0x6b
 800610c:	2194      	movs	r1, #148	; 0x94
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f002 fb2c 	bl	800876c <VL53L0X_WrByte>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800611c:	4313      	orrs	r3, r2
 800611e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fefb 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006130:	4313      	orrs	r3, r2
 8006132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800613a:	461a      	mov	r2, r3
 800613c:	2190      	movs	r1, #144	; 0x90
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f002 fad8 	bl	80086f4 <VL53L0X_RdDWord>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800614c:	4313      	orrs	r3, r2
 800614e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	0bdb      	lsrs	r3, r3, #15
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	2194      	movs	r1, #148	; 0x94
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f002 fafa 	bl	800876c <VL53L0X_WrByte>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006180:	4313      	orrs	r3, r2
 8006182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fec9 	bl	8005f1e <VL53L0X_device_read_strobe>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006194:	4313      	orrs	r3, r2
 8006196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800619a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800619e:	461a      	mov	r2, r3
 80061a0:	2190      	movs	r1, #144	; 0x90
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f002 faa6 	bl	80086f4 <VL53L0X_RdDWord>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	0e1b      	lsrs	r3, r3, #24
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80061d4:	2225      	movs	r2, #37	; 0x25
 80061d6:	2194      	movs	r1, #148	; 0x94
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f002 fac7 	bl	800876c <VL53L0X_WrByte>
 80061de:	4603      	mov	r3, r0
 80061e0:	461a      	mov	r2, r3
 80061e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fe96 	bl	8005f1e <VL53L0X_device_read_strobe>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006204:	461a      	mov	r2, r3
 8006206:	2190      	movs	r1, #144	; 0x90
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 fa73 	bl	80086f4 <VL53L0X_RdDWord>
 800620e:	4603      	mov	r3, r0
 8006210:	461a      	mov	r2, r3
 8006212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006216:	4313      	orrs	r3, r2
 8006218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	0e1b      	lsrs	r3, r3, #24
 8006220:	b2db      	uxtb	r3, r3
 8006222:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	0c1b      	lsrs	r3, r3, #16
 8006228:	b2db      	uxtb	r3, r3
 800622a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8189 	beq.w	800654a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800623c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006240:	2b00      	cmp	r3, #0
 8006242:	f040 8182 	bne.w	800654a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006246:	2202      	movs	r2, #2
 8006248:	2194      	movs	r1, #148	; 0x94
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f002 fa8e 	bl	800876c <VL53L0X_WrByte>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006258:	4313      	orrs	r3, r2
 800625a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fe5d 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006264:	4603      	mov	r3, r0
 8006266:	461a      	mov	r2, r3
 8006268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800626c:	4313      	orrs	r3, r2
 800626e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006272:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006276:	461a      	mov	r2, r3
 8006278:	2190      	movs	r1, #144	; 0x90
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f002 f97b 	bl	8008576 <VL53L0X_RdByte>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006288:	4313      	orrs	r3, r2
 800628a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800628e:	227b      	movs	r2, #123	; 0x7b
 8006290:	2194      	movs	r1, #148	; 0x94
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 fa6a 	bl	800876c <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fe39 	bl	8005f1e <VL53L0X_device_read_strobe>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80062ba:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80062be:	461a      	mov	r2, r3
 80062c0:	2190      	movs	r1, #144	; 0x90
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f002 f957 	bl	8008576 <VL53L0X_RdByte>
 80062c8:	4603      	mov	r3, r0
 80062ca:	461a      	mov	r2, r3
 80062cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80062d6:	2277      	movs	r2, #119	; 0x77
 80062d8:	2194      	movs	r1, #148	; 0x94
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f002 fa46 	bl	800876c <VL53L0X_WrByte>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff fe15 	bl	8005f1e <VL53L0X_device_read_strobe>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006306:	461a      	mov	r2, r3
 8006308:	2190      	movs	r1, #144	; 0x90
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f002 f9f2 	bl	80086f4 <VL53L0X_RdDWord>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006318:	4313      	orrs	r3, r2
 800631a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	0e5b      	lsrs	r3, r3, #25
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006328:	b2db      	uxtb	r3, r3
 800632a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	0c9b      	lsrs	r3, r3, #18
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006336:	b2db      	uxtb	r3, r3
 8006338:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	0adb      	lsrs	r3, r3, #11
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006344:	b2db      	uxtb	r3, r3
 8006346:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006352:	b2db      	uxtb	r3, r3
 8006354:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	b2db      	uxtb	r3, r3
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006368:	2278      	movs	r2, #120	; 0x78
 800636a:	2194      	movs	r1, #148	; 0x94
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 f9fd 	bl	800876c <VL53L0X_WrByte>
 8006372:	4603      	mov	r3, r0
 8006374:	461a      	mov	r2, r3
 8006376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800637a:	4313      	orrs	r3, r2
 800637c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fdcc 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006386:	4603      	mov	r3, r0
 8006388:	461a      	mov	r2, r3
 800638a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800638e:	4313      	orrs	r3, r2
 8006390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006398:	461a      	mov	r2, r3
 800639a:	2190      	movs	r1, #144	; 0x90
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f002 f9a9 	bl	80086f4 <VL53L0X_RdDWord>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461a      	mov	r2, r3
 80063a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	0f5b      	lsrs	r3, r3, #29
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ba:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80063bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063c0:	4413      	add	r3, r2
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	0d9b      	lsrs	r3, r3, #22
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	0bdb      	lsrs	r3, r3, #15
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	0a1b      	lsrs	r3, r3, #8
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	b2db      	uxtb	r3, r3
 8006402:	019b      	lsls	r3, r3, #6
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006410:	2279      	movs	r2, #121	; 0x79
 8006412:	2194      	movs	r1, #148	; 0x94
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f002 f9a9 	bl	800876c <VL53L0X_WrByte>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006422:	4313      	orrs	r3, r2
 8006424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fd78 	bl	8005f1e <VL53L0X_device_read_strobe>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006436:	4313      	orrs	r3, r2
 8006438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800643c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006440:	461a      	mov	r2, r3
 8006442:	2190      	movs	r1, #144	; 0x90
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f002 f955 	bl	80086f4 <VL53L0X_RdDWord>
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006452:	4313      	orrs	r3, r2
 8006454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	0e9b      	lsrs	r3, r3, #26
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006462:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006464:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006468:	4413      	add	r3, r2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	0cdb      	lsrs	r3, r3, #19
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	b2db      	uxtb	r3, r3
 800647a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	0b1b      	lsrs	r3, r3, #12
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006486:	b2db      	uxtb	r3, r3
 8006488:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	b2db      	uxtb	r3, r3
 8006496:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	b2db      	uxtb	r3, r3
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80064aa:	227a      	movs	r2, #122	; 0x7a
 80064ac:	2194      	movs	r1, #148	; 0x94
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f002 f95c 	bl	800876c <VL53L0X_WrByte>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064bc:	4313      	orrs	r3, r2
 80064be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fd2b 	bl	8005f1e <VL53L0X_device_read_strobe>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064da:	461a      	mov	r2, r3
 80064dc:	2190      	movs	r1, #144	; 0x90
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 f908 	bl	80086f4 <VL53L0X_RdDWord>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	0f9b      	lsrs	r3, r3, #30
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fc:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80064fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006502:	4413      	add	r3, r2
 8006504:	b2db      	uxtb	r3, r3
 8006506:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	0ddb      	lsrs	r3, r3, #23
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006512:	b2db      	uxtb	r3, r3
 8006514:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006520:	b2db      	uxtb	r3, r3
 8006522:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	0a5b      	lsrs	r3, r3, #9
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	089b      	lsrs	r3, r3, #2
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8006544:	2300      	movs	r3, #0
 8006546:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80f1 	beq.w	8006738 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006556:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800655a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 80ea 	bne.w	8006738 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006564:	227b      	movs	r2, #123	; 0x7b
 8006566:	2194      	movs	r1, #148	; 0x94
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f002 f8ff 	bl	800876c <VL53L0X_WrByte>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006576:	4313      	orrs	r3, r2
 8006578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff fcce 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800658a:	4313      	orrs	r3, r2
 800658c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006594:	461a      	mov	r2, r3
 8006596:	2190      	movs	r1, #144	; 0x90
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f002 f8ab 	bl	80086f4 <VL53L0X_RdDWord>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80065ac:	227c      	movs	r2, #124	; 0x7c
 80065ae:	2194      	movs	r1, #148	; 0x94
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f002 f8db 	bl	800876c <VL53L0X_WrByte>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065be:	4313      	orrs	r3, r2
 80065c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fcaa 	bl	8005f1e <VL53L0X_device_read_strobe>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80065d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065dc:	461a      	mov	r2, r3
 80065de:	2190      	movs	r1, #144	; 0x90
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f002 f887 	bl	80086f4 <VL53L0X_RdDWord>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80065f4:	2273      	movs	r2, #115	; 0x73
 80065f6:	2194      	movs	r1, #148	; 0x94
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f002 f8b7 	bl	800876c <VL53L0X_WrByte>
 80065fe:	4603      	mov	r3, r0
 8006600:	461a      	mov	r2, r3
 8006602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006606:	4313      	orrs	r3, r2
 8006608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fc86 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800661a:	4313      	orrs	r3, r2
 800661c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006624:	461a      	mov	r2, r3
 8006626:	2190      	movs	r1, #144	; 0x90
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f002 f863 	bl	80086f4 <VL53L0X_RdDWord>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006636:	4313      	orrs	r3, r2
 8006638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006640:	b29b      	uxth	r3, r3
 8006642:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006644:	2274      	movs	r2, #116	; 0x74
 8006646:	2194      	movs	r1, #148	; 0x94
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f002 f88f 	bl	800876c <VL53L0X_WrByte>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006656:	4313      	orrs	r3, r2
 8006658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff fc5e 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006662:	4603      	mov	r3, r0
 8006664:	461a      	mov	r2, r3
 8006666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800666a:	4313      	orrs	r3, r2
 800666c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006674:	461a      	mov	r2, r3
 8006676:	2190      	movs	r1, #144	; 0x90
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f002 f83b 	bl	80086f4 <VL53L0X_RdDWord>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006686:	4313      	orrs	r3, r2
 8006688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006692:	4313      	orrs	r3, r2
 8006694:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006696:	2275      	movs	r2, #117	; 0x75
 8006698:	2194      	movs	r1, #148	; 0x94
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 f866 	bl	800876c <VL53L0X_WrByte>
 80066a0:	4603      	mov	r3, r0
 80066a2:	461a      	mov	r2, r3
 80066a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fc35 	bl	8005f1e <VL53L0X_device_read_strobe>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066bc:	4313      	orrs	r3, r2
 80066be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066c6:	461a      	mov	r2, r3
 80066c8:	2190      	movs	r1, #144	; 0x90
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f002 f812 	bl	80086f4 <VL53L0X_RdDWord>
 80066d0:	4603      	mov	r3, r0
 80066d2:	461a      	mov	r2, r3
 80066d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066d8:	4313      	orrs	r3, r2
 80066da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066e6:	2276      	movs	r2, #118	; 0x76
 80066e8:	2194      	movs	r1, #148	; 0x94
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 f83e 	bl	800876c <VL53L0X_WrByte>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fc0d 	bl	8005f1e <VL53L0X_device_read_strobe>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800670c:	4313      	orrs	r3, r2
 800670e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006716:	461a      	mov	r2, r3
 8006718:	2190      	movs	r1, #144	; 0x90
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 ffea 	bl	80086f4 <VL53L0X_RdDWord>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006728:	4313      	orrs	r3, r2
 800672a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006734:	4313      	orrs	r3, r2
 8006736:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006738:	2200      	movs	r2, #0
 800673a:	2181      	movs	r1, #129	; 0x81
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 f815 	bl	800876c <VL53L0X_WrByte>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800674a:	4313      	orrs	r3, r2
 800674c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006750:	2206      	movs	r2, #6
 8006752:	21ff      	movs	r1, #255	; 0xff
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f002 f809 	bl	800876c <VL53L0X_WrByte>
 800675a:	4603      	mov	r3, r0
 800675c:	461a      	mov	r2, r3
 800675e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006762:	4313      	orrs	r3, r2
 8006764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006768:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800676c:	461a      	mov	r2, r3
 800676e:	2183      	movs	r1, #131	; 0x83
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 ff00 	bl	8008576 <VL53L0X_RdByte>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800677e:	4313      	orrs	r3, r2
 8006780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006788:	f023 0304 	bic.w	r3, r3, #4
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	2183      	movs	r1, #131	; 0x83
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 ffea 	bl	800876c <VL53L0X_WrByte>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067a6:	2201      	movs	r2, #1
 80067a8:	21ff      	movs	r1, #255	; 0xff
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 ffde 	bl	800876c <VL53L0X_WrByte>
 80067b0:	4603      	mov	r3, r0
 80067b2:	461a      	mov	r2, r3
 80067b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80067be:	2201      	movs	r2, #1
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 ffd2 	bl	800876c <VL53L0X_WrByte>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067d6:	2200      	movs	r2, #0
 80067d8:	21ff      	movs	r1, #255	; 0xff
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 ffc6 	bl	800876c <VL53L0X_WrByte>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80067ee:	2200      	movs	r2, #0
 80067f0:	2180      	movs	r1, #128	; 0x80
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 ffba 	bl	800876c <VL53L0X_WrByte>
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006800:	4313      	orrs	r3, r2
 8006802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006806:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 808f 	bne.w	800692e <VL53L0X_get_info_from_device+0x98e>
 8006810:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006814:	2b07      	cmp	r3, #7
 8006816:	f000 808a 	beq.w	800692e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d024      	beq.n	800686e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006824:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006828:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11e      	bne.n	800686e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006836:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006840:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006844:	2300      	movs	r3, #0
 8006846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006848:	e00e      	b.n	8006868 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800684a:	f107 0208 	add.w	r2, r7, #8
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	4413      	add	r3, r2
 8006852:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006858:	4413      	add	r3, r2
 800685a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800685e:	460a      	mov	r2, r1
 8006860:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	3301      	adds	r3, #1
 8006866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686a:	2b05      	cmp	r3, #5
 800686c:	dded      	ble.n	800684a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d018      	beq.n	80068aa <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800687c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006880:	2b00      	cmp	r3, #0
 8006882:	d112      	bne.n	80068aa <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006884:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800688e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	33f3      	adds	r3, #243	; 0xf3
 800689c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800689e:	f107 0310 	add.w	r3, r7, #16
 80068a2:	4619      	mov	r1, r3
 80068a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068a6:	f00c f8a9 	bl	80129fc <strcpy>

		}

		if (((option & 4) == 4) &&
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d030      	beq.n	8006916 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80068b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068b8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d12a      	bne.n	8006916 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	025b      	lsls	r3, r3, #9
 80068d4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068da:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80068e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80068ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80068f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068f8:	fb02 f303 	mul.w	r3, r2, r3
 80068fc:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80068fe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006902:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006906:	425b      	negs	r3, r3
 8006908:	b29b      	uxth	r3, r3
 800690a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800690e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006916:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	4313      	orrs	r3, r2
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006924:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800692e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006932:	4618      	mov	r0, r3
 8006934:	3760      	adds	r7, #96	; 0x60
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800693a:	b490      	push	{r4, r7}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006946:	f240 6377 	movw	r3, #1655	; 0x677
 800694a:	f04f 0400 	mov.w	r4, #0
 800694e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006952:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006956:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	fb02 f303 	mul.w	r3, r2, r3
 8006966:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006968:	68bb      	ldr	r3, [r7, #8]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bc90      	pop	{r4, r7}
 8006972:	4770      	bx	lr

08006974 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d017      	beq.n	80069be <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3b01      	subs	r3, #1
 8006992:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006994:	e005      	b.n	80069a2 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800699c:	89fb      	ldrh	r3, [r7, #14]
 800699e:	3301      	adds	r3, #1
 80069a0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f4      	bne.n	8006996 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80069ba:	4413      	add	r3, r2
 80069bc:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80069be:	8afb      	ldrh	r3, [r7, #22]

}
 80069c0:	4618      	mov	r0, r3
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	0a12      	lsrs	r2, r2, #8
 80069e2:	b292      	uxth	r2, r2
 80069e4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80069ea:	68fb      	ldr	r3, [r7, #12]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7ff ff93 	bl	800693a <VL53L0X_calc_macro_period_ps>
 8006a14:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <VL53L0X_calc_timeout_mclks+0x50>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	099b      	lsrs	r3, r3, #6
 8006a24:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a2c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	441a      	add	r2, r3
	timeout_period_mclks =
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	10624dd3 	.word	0x10624dd3

08006a4c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006a60:	787b      	ldrb	r3, [r7, #1]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ff68 	bl	800693a <VL53L0X_calc_macro_period_ps>
 8006a6a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006a72:	4a0b      	ldr	r2, [pc, #44]	; (8006aa0 <VL53L0X_calc_timeout_us+0x54>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	099b      	lsrs	r3, r3, #6
 8006a7a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8006a7c:	887b      	ldrh	r3, [r7, #2]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	4413      	add	r3, r2
	actual_timeout_period_us =
 8006a8a:	4a05      	ldr	r2, [pc, #20]	; (8006aa0 <VL53L0X_calc_timeout_us+0x54>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	099b      	lsrs	r3, r3, #6
 8006a92:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006a94:	697b      	ldr	r3, [r7, #20]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	10624dd3 	.word	0x10624dd3

08006aa4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	460b      	mov	r3, r1
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <get_sequence_step_timeout+0x38>
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d002      	beq.n	8006adc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d128      	bne.n	8006b2e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006adc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7fd fa75 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006af0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006af8:	f107 0320 	add.w	r3, r7, #32
 8006afc:	461a      	mov	r2, r3
 8006afe:	2146      	movs	r1, #70	; 0x46
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f001 fd38 	bl	8008576 <VL53L0X_RdByte>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff ff5a 	bl	80069cc <VL53L0X_decode_timeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006b1c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff ff91 	bl	8006a4c <VL53L0X_calc_timeout_us>
 8006b2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b2c:	e092      	b.n	8006c54 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d135      	bne.n	8006ba0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7fd fa49 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 8081 	bne.w	8006c54 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b52:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b56:	461a      	mov	r2, r3
 8006b58:	2100      	movs	r1, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7fd fa3a 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006b66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006b6e:	f107 031e 	add.w	r3, r7, #30
 8006b72:	461a      	mov	r2, r3
 8006b74:	2151      	movs	r1, #81	; 0x51
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 fd84 	bl	8008684 <VL53L0X_RdWord>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b82:	8bfb      	ldrh	r3, [r7, #30]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff ff21 	bl	80069cc <VL53L0X_decode_timeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006b8e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b94:	4619      	mov	r1, r3
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff ff58 	bl	8006a4c <VL53L0X_calc_timeout_us>
 8006b9c:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b9e:	e059      	b.n	8006c54 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d156      	bne.n	8006c54 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ba6:	f107 0314 	add.w	r3, r7, #20
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7fd fb1d 	bl	80041ec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01d      	beq.n	8006bf8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006bbc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7fd fa05 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006bd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10f      	bne.n	8006bf8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006bd8:	f107 031e 	add.w	r3, r7, #30
 8006bdc:	461a      	mov	r2, r3
 8006bde:	2151      	movs	r1, #81	; 0x51
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 fd4f 	bl	8008684 <VL53L0X_RdWord>
 8006be6:	4603      	mov	r3, r0
 8006be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006bec:	8bfb      	ldrh	r3, [r7, #30]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff feec 	bl	80069cc <VL53L0X_decode_timeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006bf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c00:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006c04:	461a      	mov	r2, r3
 8006c06:	2101      	movs	r1, #1
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7fd f9e3 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006c14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006c1c:	f107 031c 	add.w	r3, r7, #28
 8006c20:	461a      	mov	r2, r3
 8006c22:	2171      	movs	r1, #113	; 0x71
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f001 fd2d 	bl	8008684 <VL53L0X_RdWord>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006c30:	8bbb      	ldrh	r3, [r7, #28]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff feca 	bl	80069cc <VL53L0X_decode_timeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006c3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006c44:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff fefd 	bl	8006a4c <VL53L0X_calc_timeout_us>
 8006c52:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	601a      	str	r2, [r3, #0]

	return Status;
 8006c5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3730      	adds	r7, #48	; 0x30
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b08a      	sub	sp, #40	; 0x28
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <set_sequence_step_timeout+0x26>
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d002      	beq.n	8006c8c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d138      	bne.n	8006cfe <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c8c:	f107 031d 	add.w	r3, r7, #29
 8006c90:	461a      	mov	r2, r3
 8006c92:	2100      	movs	r1, #0
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7fd f99d 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006ca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11a      	bne.n	8006cde <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006ca8:	7f7b      	ldrb	r3, [r7, #29]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fea2 	bl	80069f8 <VL53L0X_calc_timeout_mclks>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006cb8:	8bfb      	ldrh	r3, [r7, #30]
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	d903      	bls.n	8006cc8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006cc0:	23ff      	movs	r3, #255	; 0xff
 8006cc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cc6:	e004      	b.n	8006cd2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006cc8:	8bfb      	ldrh	r3, [r7, #30]
 8006cca:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 80ad 	bne.w	8006e42 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8006ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cec:	461a      	mov	r2, r3
 8006cee:	2146      	movs	r1, #70	; 0x46
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f001 fd3b 	bl	800876c <VL53L0X_WrByte>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006cfc:	e0a1      	b.n	8006e42 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d135      	bne.n	8006d70 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11b      	bne.n	8006d44 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d0c:	f107 031d 	add.w	r3, r7, #29
 8006d10:	461a      	mov	r2, r3
 8006d12:	2100      	movs	r1, #0
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7fd f95d 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006d20:	7f7b      	ldrb	r3, [r7, #29]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fe66 	bl	80069f8 <VL53L0X_calc_timeout_mclks>
 8006d2c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fe1e 	bl	8006974 <VL53L0X_encode_timeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d3c:	8b7a      	ldrh	r2, [r7, #26]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006d44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006d4c:	8b7b      	ldrh	r3, [r7, #26]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2151      	movs	r1, #81	; 0x51
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f001 fd2e 	bl	80087b4 <VL53L0X_WrWord>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006d5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d16d      	bne.n	8006e42 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006d6e:	e068      	b.n	8006e42 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006d70:	7afb      	ldrb	r3, [r7, #11]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d162      	bne.n	8006e3c <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7fd fa35 	bl	80041ec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01d      	beq.n	8006dc8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d8c:	f107 031d 	add.w	r3, r7, #29
 8006d90:	461a      	mov	r2, r3
 8006d92:	2100      	movs	r1, #0
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7fd f91d 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006da0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10f      	bne.n	8006dc8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006da8:	f107 031a 	add.w	r3, r7, #26
 8006dac:	461a      	mov	r2, r3
 8006dae:	2151      	movs	r1, #81	; 0x51
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f001 fc67 	bl	8008684 <VL53L0X_RdWord>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006dbc:	8b7b      	ldrh	r3, [r7, #26]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fe04 	bl	80069cc <VL53L0X_decode_timeout>
 8006dc4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006dd0:	f107 031d 	add.w	r3, r7, #29
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7fd f8fb 	bl	8003fd4 <VL53L0X_GetVcselPulsePeriod>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d12a      	bne.n	8006e42 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006dec:	7f7b      	ldrb	r3, [r7, #29]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff fe00 	bl	80069f8 <VL53L0X_calc_timeout_mclks>
 8006df8:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8006dfa:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006dfc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e00:	4413      	add	r3, r2
 8006e02:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				FinalRangeEncodedTimeOut =
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff fdb4 	bl	8006974 <VL53L0X_encode_timeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8006e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006e18:	8c3b      	ldrh	r3, [r7, #32]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2171      	movs	r1, #113	; 0x71
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f001 fcc8 	bl	80087b4 <VL53L0X_WrWord>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d107      	bne.n	8006e42 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006e3a:	e002      	b.n	8006e42 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e3c:	23fc      	movs	r3, #252	; 0xfc
 8006e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006e42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3728      	adds	r7, #40	; 0x28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b08a      	sub	sp, #40	; 0x28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006e64:	230c      	movs	r3, #12
 8006e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006e6a:	2312      	movs	r3, #18
 8006e6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006e70:	2308      	movs	r3, #8
 8006e72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006e76:	230e      	movs	r3, #14
 8006e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006e80:	78bb      	ldrb	r3, [r7, #2]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e8c:	23fc      	movs	r3, #252	; 0xfc
 8006e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e92:	e020      	b.n	8006ed6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10d      	bne.n	8006eb6 <VL53L0X_set_vcsel_pulse_period+0x68>
 8006e9a:	78ba      	ldrb	r2, [r7, #2]
 8006e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d304      	bcc.n	8006eae <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006ea4:	78ba      	ldrb	r2, [r7, #2]
 8006ea6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d903      	bls.n	8006eb6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006eae:	23fc      	movs	r3, #252	; 0xfc
 8006eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006eb4:	e00f      	b.n	8006ed6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d10c      	bne.n	8006ed6 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006ebc:	78ba      	ldrb	r2, [r7, #2]
 8006ebe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d304      	bcc.n	8006ed0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006ec6:	78ba      	ldrb	r2, [r7, #2]
 8006ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d902      	bls.n	8006ed6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ed0:	23fc      	movs	r3, #252	; 0xfc
 8006ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006ed6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006ede:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ee2:	e239      	b.n	8007358 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d150      	bne.n	8006f8c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006eea:	78bb      	ldrb	r3, [r7, #2]
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	d110      	bne.n	8006f12 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006ef0:	2218      	movs	r2, #24
 8006ef2:	2157      	movs	r1, #87	; 0x57
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fc39 	bl	800876c <VL53L0X_WrByte>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006f00:	2208      	movs	r2, #8
 8006f02:	2156      	movs	r1, #86	; 0x56
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fc31 	bl	800876c <VL53L0X_WrByte>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f10:	e17f      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006f12:	78bb      	ldrb	r3, [r7, #2]
 8006f14:	2b0e      	cmp	r3, #14
 8006f16:	d110      	bne.n	8006f3a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006f18:	2230      	movs	r2, #48	; 0x30
 8006f1a:	2157      	movs	r1, #87	; 0x57
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fc25 	bl	800876c <VL53L0X_WrByte>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006f28:	2208      	movs	r2, #8
 8006f2a:	2156      	movs	r1, #86	; 0x56
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fc1d 	bl	800876c <VL53L0X_WrByte>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f38:	e16b      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006f3a:	78bb      	ldrb	r3, [r7, #2]
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d110      	bne.n	8006f62 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006f40:	2240      	movs	r2, #64	; 0x40
 8006f42:	2157      	movs	r1, #87	; 0x57
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fc11 	bl	800876c <VL53L0X_WrByte>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006f50:	2208      	movs	r2, #8
 8006f52:	2156      	movs	r1, #86	; 0x56
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fc09 	bl	800876c <VL53L0X_WrByte>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f60:	e157      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006f62:	78bb      	ldrb	r3, [r7, #2]
 8006f64:	2b12      	cmp	r3, #18
 8006f66:	f040 8154 	bne.w	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006f6a:	2250      	movs	r2, #80	; 0x50
 8006f6c:	2157      	movs	r1, #87	; 0x57
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fbfc 	bl	800876c <VL53L0X_WrByte>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	2156      	movs	r1, #86	; 0x56
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fbf4 	bl	800876c <VL53L0X_WrByte>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f8a:	e142      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	f040 813f 	bne.w	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006f94:	78bb      	ldrb	r3, [r7, #2]
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d14c      	bne.n	8007034 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	2148      	movs	r1, #72	; 0x48
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fbe4 	bl	800876c <VL53L0X_WrByte>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006faa:	2208      	movs	r2, #8
 8006fac:	2147      	movs	r1, #71	; 0x47
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fbdc 	bl	800876c <VL53L0X_WrByte>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006fba:	2202      	movs	r2, #2
 8006fbc:	2132      	movs	r1, #50	; 0x32
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fbd4 	bl	800876c <VL53L0X_WrByte>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006fd2:	220c      	movs	r2, #12
 8006fd4:	2130      	movs	r1, #48	; 0x30
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fbc8 	bl	800876c <VL53L0X_WrByte>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006fea:	2201      	movs	r2, #1
 8006fec:	21ff      	movs	r1, #255	; 0xff
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fbbc 	bl	800876c <VL53L0X_WrByte>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007002:	2230      	movs	r2, #48	; 0x30
 8007004:	2130      	movs	r1, #48	; 0x30
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fbb0 	bl	800876c <VL53L0X_WrByte>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007014:	4313      	orrs	r3, r2
 8007016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800701a:	2200      	movs	r2, #0
 800701c:	21ff      	movs	r1, #255	; 0xff
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fba4 	bl	800876c <VL53L0X_WrByte>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800702c:	4313      	orrs	r3, r2
 800702e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007032:	e0ee      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007034:	78bb      	ldrb	r3, [r7, #2]
 8007036:	2b0a      	cmp	r3, #10
 8007038:	d14c      	bne.n	80070d4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800703a:	2228      	movs	r2, #40	; 0x28
 800703c:	2148      	movs	r1, #72	; 0x48
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fb94 	bl	800876c <VL53L0X_WrByte>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800704a:	2208      	movs	r2, #8
 800704c:	2147      	movs	r1, #71	; 0x47
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fb8c 	bl	800876c <VL53L0X_WrByte>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800705a:	2203      	movs	r2, #3
 800705c:	2132      	movs	r1, #50	; 0x32
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fb84 	bl	800876c <VL53L0X_WrByte>
 8007064:	4603      	mov	r3, r0
 8007066:	461a      	mov	r2, r3
 8007068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800706c:	4313      	orrs	r3, r2
 800706e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007072:	2209      	movs	r2, #9
 8007074:	2130      	movs	r1, #48	; 0x30
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fb78 	bl	800876c <VL53L0X_WrByte>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007084:	4313      	orrs	r3, r2
 8007086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800708a:	2201      	movs	r2, #1
 800708c:	21ff      	movs	r1, #255	; 0xff
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fb6c 	bl	800876c <VL53L0X_WrByte>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800709c:	4313      	orrs	r3, r2
 800709e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80070a2:	2220      	movs	r2, #32
 80070a4:	2130      	movs	r1, #48	; 0x30
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fb60 	bl	800876c <VL53L0X_WrByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80070ba:	2200      	movs	r2, #0
 80070bc:	21ff      	movs	r1, #255	; 0xff
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fb54 	bl	800876c <VL53L0X_WrByte>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070d2:	e09e      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80070d4:	78bb      	ldrb	r3, [r7, #2]
 80070d6:	2b0c      	cmp	r3, #12
 80070d8:	d14c      	bne.n	8007174 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80070da:	2238      	movs	r2, #56	; 0x38
 80070dc:	2148      	movs	r1, #72	; 0x48
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fb44 	bl	800876c <VL53L0X_WrByte>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80070ea:	2208      	movs	r2, #8
 80070ec:	2147      	movs	r1, #71	; 0x47
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fb3c 	bl	800876c <VL53L0X_WrByte>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80070fa:	2203      	movs	r2, #3
 80070fc:	2132      	movs	r1, #50	; 0x32
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fb34 	bl	800876c <VL53L0X_WrByte>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710c:	4313      	orrs	r3, r2
 800710e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007112:	2208      	movs	r2, #8
 8007114:	2130      	movs	r1, #48	; 0x30
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fb28 	bl	800876c <VL53L0X_WrByte>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007124:	4313      	orrs	r3, r2
 8007126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800712a:	2201      	movs	r2, #1
 800712c:	21ff      	movs	r1, #255	; 0xff
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fb1c 	bl	800876c <VL53L0X_WrByte>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713c:	4313      	orrs	r3, r2
 800713e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007142:	2220      	movs	r2, #32
 8007144:	2130      	movs	r1, #48	; 0x30
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fb10 	bl	800876c <VL53L0X_WrByte>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007154:	4313      	orrs	r3, r2
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800715a:	2200      	movs	r2, #0
 800715c:	21ff      	movs	r1, #255	; 0xff
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fb04 	bl	800876c <VL53L0X_WrByte>
 8007164:	4603      	mov	r3, r0
 8007166:	461a      	mov	r2, r3
 8007168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716c:	4313      	orrs	r3, r2
 800716e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007172:	e04e      	b.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007174:	78bb      	ldrb	r3, [r7, #2]
 8007176:	2b0e      	cmp	r3, #14
 8007178:	d14b      	bne.n	8007212 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800717a:	2248      	movs	r2, #72	; 0x48
 800717c:	2148      	movs	r1, #72	; 0x48
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 faf4 	bl	800876c <VL53L0X_WrByte>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800718a:	2208      	movs	r2, #8
 800718c:	2147      	movs	r1, #71	; 0x47
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 faec 	bl	800876c <VL53L0X_WrByte>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800719a:	2203      	movs	r2, #3
 800719c:	2132      	movs	r1, #50	; 0x32
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fae4 	bl	800876c <VL53L0X_WrByte>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80071b2:	2207      	movs	r2, #7
 80071b4:	2130      	movs	r1, #48	; 0x30
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fad8 	bl	800876c <VL53L0X_WrByte>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80071ca:	2201      	movs	r2, #1
 80071cc:	21ff      	movs	r1, #255	; 0xff
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 facc 	bl	800876c <VL53L0X_WrByte>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071dc:	4313      	orrs	r3, r2
 80071de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80071e2:	2220      	movs	r2, #32
 80071e4:	2130      	movs	r1, #48	; 0x30
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fac0 	bl	800876c <VL53L0X_WrByte>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80071fa:	2200      	movs	r2, #0
 80071fc:	21ff      	movs	r1, #255	; 0xff
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fab4 	bl	800876c <VL53L0X_WrByte>
 8007204:	4603      	mov	r3, r0
 8007206:	461a      	mov	r2, r3
 8007208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720c:	4313      	orrs	r3, r2
 800720e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007212:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007216:	2b00      	cmp	r3, #0
 8007218:	d17f      	bne.n	800731a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800721a:	78bb      	ldrb	r3, [r7, #2]
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fe37 	bl	8005e90 <VL53L0X_encode_vcsel_period>
 8007222:	4603      	mov	r3, r0
 8007224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800722e:	2b01      	cmp	r3, #1
 8007230:	d045      	beq.n	80072be <VL53L0X_set_vcsel_pulse_period+0x470>
 8007232:	e06e      	b.n	8007312 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007234:	f107 0314 	add.w	r3, r7, #20
 8007238:	461a      	mov	r2, r3
 800723a:	2103      	movs	r1, #3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fc31 	bl	8006aa4 <get_sequence_step_timeout>
 8007242:	4603      	mov	r3, r0
 8007244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007248:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800724c:	2b00      	cmp	r3, #0
 800724e:	d109      	bne.n	8007264 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007250:	f107 0310 	add.w	r3, r7, #16
 8007254:	461a      	mov	r2, r3
 8007256:	2102      	movs	r1, #2
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fc23 	bl	8006aa4 <get_sequence_step_timeout>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800726c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007270:	461a      	mov	r2, r3
 8007272:	2150      	movs	r1, #80	; 0x50
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fa79 	bl	800876c <VL53L0X_WrByte>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	461a      	mov	r2, r3
 800728c:	2103      	movs	r1, #3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fce9 	bl	8006c66 <set_sequence_step_timeout>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800729a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d108      	bne.n	80072b4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	461a      	mov	r2, r3
 80072a6:	2102      	movs	r1, #2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fcdc 	bl	8006c66 <set_sequence_step_timeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	78ba      	ldrb	r2, [r7, #2]
 80072b8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80072bc:	e02e      	b.n	800731c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80072be:	f107 0318 	add.w	r3, r7, #24
 80072c2:	461a      	mov	r2, r3
 80072c4:	2104      	movs	r1, #4
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fbec 	bl	8006aa4 <get_sequence_step_timeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80072d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80072da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80072de:	461a      	mov	r2, r3
 80072e0:	2170      	movs	r1, #112	; 0x70
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fa42 	bl	800876c <VL53L0X_WrByte>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80072ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d108      	bne.n	8007308 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	461a      	mov	r2, r3
 80072fa:	2104      	movs	r1, #4
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fcb2 	bl	8006c66 <set_sequence_step_timeout>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	78ba      	ldrb	r2, [r7, #2]
 800730c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007310:	e004      	b.n	800731c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007312:	23fc      	movs	r3, #252	; 0xfc
 8007314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007318:	e000      	b.n	800731c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800731a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800731c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800732a:	69f9      	ldr	r1, [r7, #28]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fc fe13 	bl	8003f58 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800733c:	2b00      	cmp	r3, #0
 800733e:	d109      	bne.n	8007354 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007340:	f107 010f 	add.w	r1, r7, #15
 8007344:	2301      	movs	r3, #1
 8007346:	2200      	movs	r2, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fe fcbd 	bl	8005cc8 <VL53L0X_perform_phase_calibration>
 800734e:	4603      	mov	r3, r0
 8007350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007358:	4618      	mov	r0, r3
 800735a:	3728      	adds	r7, #40	; 0x28
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	460b      	mov	r3, r1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007378:	2b01      	cmp	r3, #1
 800737a:	d00a      	beq.n	8007392 <VL53L0X_get_vcsel_pulse_period+0x32>
 800737c:	e013      	b.n	80073a6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800737e:	f107 0316 	add.w	r3, r7, #22
 8007382:	461a      	mov	r2, r3
 8007384:	2150      	movs	r1, #80	; 0x50
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 f8f5 	bl	8008576 <VL53L0X_RdByte>
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007390:	e00b      	b.n	80073aa <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007392:	f107 0316 	add.w	r3, r7, #22
 8007396:	461a      	mov	r2, r3
 8007398:	2170      	movs	r1, #112	; 0x70
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 f8eb 	bl	8008576 <VL53L0X_RdByte>
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80073a4:	e001      	b.n	80073aa <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073a6:	23fc      	movs	r3, #252	; 0xfc
 80073a8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80073aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d107      	bne.n	80073c2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80073b2:	7dbb      	ldrb	r3, [r7, #22]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fd58 	bl	8005e6a <VL53L0X_decode_vcsel_period>
 80073ba:	4603      	mov	r3, r0
 80073bc:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	701a      	strb	r2, [r3, #0]

	return Status;
 80073c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b092      	sub	sp, #72	; 0x48
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80073de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80073e2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 80073e4:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80073ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80073f0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80073f6:	f240 234e 	movw	r3, #590	; 0x24e
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80073fc:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007402:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007408:	f240 2326 	movw	r3, #550	; 0x226
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8007412:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007416:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	429a      	cmp	r2, r3
 8007422:	d205      	bcs.n	8007430 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007424:	23fc      	movs	r3, #252	; 0xfc
 8007426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800742a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800742e:	e0aa      	b.n	8007586 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fc fed2 	bl	80041ec <VL53L0X_GetSequenceStepEnables>
 8007448:	4603      	mov	r3, r0
 800744a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800744e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007452:	2b00      	cmp	r3, #0
 8007454:	d15b      	bne.n	800750e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007456:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007458:	2b00      	cmp	r3, #0
 800745a:	d105      	bne.n	8007468 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800745c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007462:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	d052      	beq.n	800750e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007468:	f107 0310 	add.w	r3, r7, #16
 800746c:	461a      	mov	r2, r3
 800746e:	2102      	movs	r1, #2
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fb17 	bl	8006aa4 <get_sequence_step_timeout>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800747c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007484:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007488:	e07d      	b.n	8007586 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800748a:	7d3b      	ldrb	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00f      	beq.n	80074b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007490:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007494:	4413      	add	r3, r2
 8007496:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749c:	429a      	cmp	r2, r3
 800749e:	d204      	bcs.n	80074aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80074a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	643b      	str	r3, [r7, #64]	; 0x40
 80074a8:	e002      	b.n	80074b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074aa:	23fc      	movs	r3, #252	; 0xfc
 80074ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80074b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80074b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80074bc:	e063      	b.n	8007586 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80074be:	7dbb      	ldrb	r3, [r7, #22]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d011      	beq.n	80074e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	4413      	add	r3, r2
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d204      	bcs.n	80074e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80074d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	643b      	str	r3, [r7, #64]	; 0x40
 80074de:	e016      	b.n	800750e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074e0:	23fc      	movs	r3, #252	; 0xfc
 80074e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80074e6:	e012      	b.n	800750e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80074e8:	7d7b      	ldrb	r3, [r7, #21]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00f      	beq.n	800750e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074f2:	4413      	add	r3, r2
 80074f4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d204      	bcs.n	8007508 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80074fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
 8007506:	e002      	b.n	800750e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007508:	23fc      	movs	r3, #252	; 0xfc
 800750a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800750e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007516:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800751a:	e034      	b.n	8007586 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d019      	beq.n	8007556 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	461a      	mov	r2, r3
 8007528:	2103      	movs	r1, #3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff faba 	bl	8006aa4 <get_sequence_step_timeout>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753a:	4413      	add	r3, r2
 800753c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007542:	429a      	cmp	r2, r3
 8007544:	d204      	bcs.n	8007550 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	643b      	str	r3, [r7, #64]	; 0x40
 800754e:	e002      	b.n	8007556 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007550:	23fc      	movs	r3, #252	; 0xfc
 8007552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007556:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800755a:	2b00      	cmp	r3, #0
 800755c:	d111      	bne.n	8007582 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800755e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00e      	beq.n	8007582 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800756c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800756e:	2104      	movs	r1, #4
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fb78 	bl	8006c66 <set_sequence_step_timeout>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007582:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007586:	4618      	mov	r0, r3
 8007588:	3748      	adds	r7, #72	; 0x48
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b090      	sub	sp, #64	; 0x40
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800759e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80075a2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80075a4:	f240 7376 	movw	r3, #1910	; 0x776
 80075a8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80075aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80075b0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80075b6:	f240 234e 	movw	r3, #590	; 0x24e
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80075bc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80075c2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80075c8:	f240 2326 	movw	r3, #550	; 0x226
 80075cc:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80075d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	441a      	add	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075dc:	f107 0318 	add.w	r3, r7, #24
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fc fe02 	bl	80041ec <VL53L0X_GetSequenceStepEnables>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80075ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80075f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075fa:	e075      	b.n	80076e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80075fc:	7e3b      	ldrb	r3, [r7, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007602:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007608:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d030      	beq.n	8007670 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800760e:	f107 0310 	add.w	r3, r7, #16
 8007612:	461a      	mov	r2, r3
 8007614:	2102      	movs	r1, #2
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff fa44 	bl	8006aa4 <get_sequence_step_timeout>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007622:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007626:	2b00      	cmp	r3, #0
 8007628:	d122      	bne.n	8007670 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800762a:	7e3b      	ldrb	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007634:	6939      	ldr	r1, [r7, #16]
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800763a:	441a      	add	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007640:	7ebb      	ldrb	r3, [r7, #26]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800764a:	6939      	ldr	r1, [r7, #16]
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	440b      	add	r3, r1
 8007650:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007652:	441a      	add	r2, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e00a      	b.n	8007670 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800765a:	7e7b      	ldrb	r3, [r7, #25]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007664:	6939      	ldr	r1, [r7, #16]
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800766a:	441a      	add	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007670:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007674:	2b00      	cmp	r3, #0
 8007676:	d114      	bne.n	80076a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007678:	7efb      	ldrb	r3, [r7, #27]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d011      	beq.n	80076a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	461a      	mov	r2, r3
 8007684:	2103      	movs	r1, #3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fa0c 	bl	8006aa4 <get_sequence_step_timeout>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800769c:	441a      	add	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d114      	bne.n	80076d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80076aa:	7f3b      	ldrb	r3, [r7, #28]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d011      	beq.n	80076d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80076b0:	f107 0314 	add.w	r3, r7, #20
 80076b4:	461a      	mov	r2, r3
 80076b6:	2104      	movs	r1, #4
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff f9f3 	bl	8006aa4 <get_sequence_step_timeout>
 80076be:	4603      	mov	r3, r0
 80076c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80076ce:	441a      	add	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3740      	adds	r7, #64	; 0x40
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007702:	e0c6      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4413      	add	r3, r2
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	3301      	adds	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007714:	7cfb      	ldrb	r3, [r7, #19]
 8007716:	2bff      	cmp	r3, #255	; 0xff
 8007718:	f040 808d 	bne.w	8007836 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4413      	add	r3, r2
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	747b      	strb	r3, [r7, #17]
			Index++;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	3301      	adds	r3, #1
 800772a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800772c:	7c7b      	ldrb	r3, [r7, #17]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d87e      	bhi.n	8007830 <VL53L0X_load_tuning_settings+0x140>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <VL53L0X_load_tuning_settings+0x48>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007749 	.word	0x08007749
 800773c:	08007783 	.word	0x08007783
 8007740:	080077bd 	.word	0x080077bd
 8007744:	080077f7 	.word	0x080077f7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4413      	add	r3, r2
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	743b      	strb	r3, [r7, #16]
				Index++;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3301      	adds	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	3301      	adds	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007768:	7c3b      	ldrb	r3, [r7, #16]
 800776a:	b29b      	uxth	r3, r3
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	b29a      	uxth	r2, r3
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	b29b      	uxth	r3, r3
 8007774:	4413      	add	r3, r2
 8007776:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	89ba      	ldrh	r2, [r7, #12]
 800777c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007780:	e087      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	4413      	add	r3, r2
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	743b      	strb	r3, [r7, #16]
				Index++;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3301      	adds	r3, #1
 8007790:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	4413      	add	r3, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3301      	adds	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077a2:	7c3b      	ldrb	r3, [r7, #16]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4413      	add	r3, r2
 80077b0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	89ba      	ldrh	r2, [r7, #12]
 80077b6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80077ba:	e06a      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	743b      	strb	r3, [r7, #16]
				Index++;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	3301      	adds	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4413      	add	r3, r2
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	3301      	adds	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077dc:	7c3b      	ldrb	r3, [r7, #16]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4413      	add	r3, r2
 80077ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	89ba      	ldrh	r2, [r7, #12]
 80077f0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80077f4:	e04d      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	4413      	add	r3, r2
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	743b      	strb	r3, [r7, #16]
				Index++;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	3301      	adds	r3, #1
 8007804:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	3301      	adds	r3, #1
 8007814:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007816:	7c3b      	ldrb	r3, [r7, #16]
 8007818:	b29b      	uxth	r3, r3
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	b29a      	uxth	r2, r3
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	b29b      	uxth	r3, r3
 8007822:	4413      	add	r3, r2
 8007824:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	89ba      	ldrh	r2, [r7, #12]
 800782a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800782e:	e030      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007830:	23fc      	movs	r3, #252	; 0xfc
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e02d      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007836:	7cfb      	ldrb	r3, [r7, #19]
 8007838:	2b04      	cmp	r3, #4
 800783a:	d828      	bhi.n	800788e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4413      	add	r3, r2
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	3301      	adds	r3, #1
 800784a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	e00f      	b.n	8007872 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	4413      	add	r3, r2
 8007858:	7819      	ldrb	r1, [r3, #0]
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	4413      	add	r3, r2
 8007862:	460a      	mov	r2, r1
 8007864:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	3301      	adds	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	3301      	adds	r3, #1
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	7cfb      	ldrb	r3, [r7, #19]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	429a      	cmp	r2, r3
 8007878:	dbeb      	blt.n	8007852 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	f107 0208 	add.w	r2, r7, #8
 8007880:	7cb9      	ldrb	r1, [r7, #18]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fea2 	bl	80085cc <VL53L0X_WriteMulti>
 8007888:	4603      	mov	r3, r0
 800788a:	77fb      	strb	r3, [r7, #31]
 800788c:	e001      	b.n	8007892 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800788e:	23fc      	movs	r3, #252	; 0xfc
 8007890:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	4413      	add	r3, r2
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <VL53L0X_load_tuning_settings+0x1b8>
 800789e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f43f af2e 	beq.w	8007704 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80078ca:	f107 0313 	add.w	r3, r7, #19
 80078ce:	4619      	mov	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7fc fd57 	bl	8004384 <VL53L0X_GetXTalkCompensationEnable>
 80078d6:	4603      	mov	r3, r0
 80078d8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80078da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d111      	bne.n	8007906 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80078e2:	7cfb      	ldrb	r3, [r7, #19]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	8a9b      	ldrh	r3, [r3, #20]
 80078f2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3380      	adds	r3, #128	; 0x80
 8007900:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007906:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800792a:	f107 0310 	add.w	r3, r7, #16
 800792e:	461a      	mov	r2, r3
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f7ff ffbe 	bl	80078b4 <VL53L0X_get_total_xtalk_rate>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800793c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d105      	bne.n	8007950 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	441a      	add	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]

	return Status;
 8007950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b09a      	sub	sp, #104	; 0x68
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800796a:	2312      	movs	r3, #18
 800796c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800796e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007972:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007974:	2342      	movs	r3, #66	; 0x42
 8007976:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007978:	2306      	movs	r3, #6
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800797c:	2307      	movs	r3, #7
 800797e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007980:	2300      	movs	r3, #0
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800799a:	fb02 f303 	mul.w	r3, r2, r3
 800799e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	3380      	adds	r3, #128	; 0x80
 80079a4:	0a1b      	lsrs	r3, r3, #8
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ac:	fb02 f303 	mul.w	r3, r2, r3
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	029b      	lsls	r3, r3, #10
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80079c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c8:	4413      	add	r3, r2
 80079ca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80079cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80079d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80079e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079e4:	fb02 f303 	mul.w	r3, r2, r3
 80079e8:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80079ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079f8:	fb02 f303 	mul.w	r3, r2, r3
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007a04:	0c1b      	lsrs	r3, r3, #16
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0c:	fb02 f303 	mul.w	r3, r2, r3
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a1e:	085a      	lsrs	r2, r3, #1
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	441a      	add	r2, r3
 8007a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a30:	fb02 f303 	mul.w	r3, r2, r3
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d302      	bcc.n	8007a44 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8007a3e:	4b55      	ldr	r3, [pc, #340]	; (8007b94 <VL53L0X_calc_dmax+0x238>)
 8007a40:	663b      	str	r3, [r7, #96]	; 0x60
 8007a42:	e016      	b.n	8007a72 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a46:	085a      	lsrs	r2, r3, #1
 8007a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4a:	441a      	add	r2, r3
 8007a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a52:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
 8007a5c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007a64:	0c1b      	lsrs	r3, r3, #16
 8007a66:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a74:	039b      	lsls	r3, r3, #14
 8007a76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a7a:	4a47      	ldr	r2, [pc, #284]	; (8007b98 <VL53L0X_calc_dmax+0x23c>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	099b      	lsrs	r3, r3, #6
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a88:	fb02 f303 	mul.w	r3, r2, r3
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aaa:	4613      	mov	r3, r2
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	4413      	add	r3, r2
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007aba:	0b9b      	lsrs	r3, r3, #14
 8007abc:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ac2:	4413      	add	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4413      	add	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad8:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	039b      	lsls	r3, r3, #14
 8007ade:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007af8:	fb02 f303 	mul.w	r3, r2, r3
 8007afc:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b04:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <VL53L0X_calc_dmax+0x23c>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	099b      	lsrs	r3, r3, #6
 8007b0c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b1a:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <VL53L0X_calc_dmax+0x23c>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	099b      	lsrs	r3, r3, #6
 8007b22:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b26:	3380      	adds	r3, #128	; 0x80
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	085a      	lsrs	r2, r3, #1
 8007b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b38:	441a      	add	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b42:	e001      	b.n	8007b48 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007b48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007b4a:	f7fe f9b4 	bl	8005eb6 <VL53L0X_isqrt>
 8007b4e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	085a      	lsrs	r2, r3, #1
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5c:	441a      	add	r2, r3
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b66:	e001      	b.n	8007b6c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007b6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007b6e:	f7fe f9a2 	bl	8005eb6 <VL53L0X_isqrt>
 8007b72:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d902      	bls.n	8007b88 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8007b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b86:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007b88:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3768      	adds	r7, #104	; 0x68
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	fff00000 	.word	0xfff00000
 8007b98:	10624dd3 	.word	0x10624dd3

08007b9c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0b2      	sub	sp, #200	; 0xc8
 8007ba0:	af04      	add	r7, sp, #16
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007baa:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007bb2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007bba:	2342      	movs	r3, #66	; 0x42
 8007bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007bc0:	f241 235c 	movw	r3, #4700	; 0x125c
 8007bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007bc8:	4b6b      	ldr	r3, [pc, #428]	; (8007d78 <VL53L0X_calc_sigma_estimate+0x1dc>)
 8007bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007bce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007bd6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be2:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007be4:	4b65      	ldr	r3, [pc, #404]	; (8007d7c <VL53L0X_calc_sigma_estimate+0x1e0>)
 8007be6:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bec:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007bee:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007bf2:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8007bf4:	f240 6377 	movw	r3, #1655	; 0x677
 8007bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007c12:	0c1b      	lsrs	r3, r3, #16
 8007c14:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	461a      	mov	r2, r3
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fe74 	bl	8007912 <VL53L0X_get_total_signal_rate>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007c30:	f107 0314 	add.w	r3, r7, #20
 8007c34:	461a      	mov	r2, r3
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff fe3b 	bl	80078b4 <VL53L0X_get_total_xtalk_rate>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c56:	0c1b      	lsrs	r3, r3, #16
 8007c58:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c60:	fb02 f303 	mul.w	r3, r2, r3
 8007c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007c68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d902      	bls.n	8007c78 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 8007c78:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d164      	bne.n	8007d4a <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007c86:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007c8e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007c92:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007c96:	461a      	mov	r2, r3
 8007c98:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7fe feac 	bl	80069f8 <VL53L0X_calc_timeout_mclks>
 8007ca0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007cb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007cb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7fe fe9b 	bl	80069f8 <VL53L0X_calc_timeout_mclks>
 8007cc2:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8007cca:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d102      	bne.n	8007cd8 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cdc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007cde:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007ce2:	fb02 f303 	mul.w	r3, r2, r3
 8007ce6:	02db      	lsls	r3, r3, #11
 8007ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cf4:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	099b      	lsrs	r3, r3, #6
 8007cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8007d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d16:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	099b      	lsrs	r3, r3, #6
 8007d1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3380      	adds	r3, #128	; 0x80
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007d38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d3c:	3380      	adds	r3, #128	; 0x80
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007d4a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8007d52:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007d56:	e12e      	b.n	8007fb6 <VL53L0X_calc_sigma_estimate+0x41a>
	}

	if (peakSignalRate_kcps == 0) {
 8007d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d112      	bne.n	8007d84 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d64:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d6c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e11c      	b.n	8007fb2 <VL53L0X_calc_sigma_estimate+0x416>
 8007d78:	028f87ae 	.word	0x028f87ae
 8007d7c:	0006999a 	.word	0x0006999a
 8007d80:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8007d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d96:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d9a:	041a      	lsls	r2, r3, #16
 8007d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d902      	bls.n	8007db6 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007db0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007db6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007dbe:	fb02 f303 	mul.w	r3, r2, r3
 8007dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dca:	4613      	mov	r3, r2
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe f86f 	bl	8005eb6 <VL53L0X_isqrt>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	891b      	ldrh	r3, [r3, #8]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dee:	041a      	lsls	r2, r3, #16
 8007df0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007df4:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8007df6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007dfa:	4a71      	ldr	r2, [pc, #452]	; (8007fc0 <VL53L0X_calc_sigma_estimate+0x424>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	099b      	lsrs	r3, r3, #6
 8007e02:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e06:	041a      	lsls	r2, r3, #16
 8007e08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e0c:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8007e0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007e12:	4a6b      	ldr	r2, [pc, #428]	; (8007fc0 <VL53L0X_calc_sigma_estimate+0x424>)
 8007e14:	fba2 2303 	umull	r2, r3, r2, r3
 8007e18:	099b      	lsrs	r3, r3, #6
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bfb8      	it	lt
 8007e2e:	425b      	neglt	r3, r3
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e56:	4413      	add	r3, r2
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
 8007e72:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	0b9b      	lsrs	r3, r3, #14
 8007e78:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e8a:	0c1b      	lsrs	r3, r3, #16
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 8007e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eac:	fb02 f303 	mul.w	r3, r2, r3
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	4413      	add	r3, r2
 8007eb8:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007eba:	6a38      	ldr	r0, [r7, #32]
 8007ebc:	f7fd fffb 	bl	8005eb6 <VL53L0X_isqrt>
 8007ec0:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	3332      	adds	r3, #50	; 0x32
 8007ecc:	4a3d      	ldr	r2, [pc, #244]	; (8007fc4 <VL53L0X_calc_sigma_estimate+0x428>)
 8007ece:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed2:	095a      	lsrs	r2, r3, #5
 8007ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ee2:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8007efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f00:	4a31      	ldr	r2, [pc, #196]	; (8007fc8 <VL53L0X_calc_sigma_estimate+0x42c>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	0b5b      	lsrs	r3, r3, #13
 8007f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007f0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d903      	bls.n	8007f20 <VL53L0X_calc_sigma_estimate+0x384>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8007f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f32:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	4413      	add	r3, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd ffb7 	bl	8005eb6 <VL53L0X_isqrt>
 8007f48:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f50:	fb02 f303 	mul.w	r3, r2, r3
 8007f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <VL53L0X_calc_sigma_estimate+0x3d6>
 8007f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <VL53L0X_calc_sigma_estimate+0x3d6>
 8007f66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d903      	bls.n	8007f7a <VL53L0X_calc_sigma_estimate+0x3de>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f80:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8007f8c:	6939      	ldr	r1, [r7, #16]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f96:	9302      	str	r3, [sp, #8]
 8007f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff fcd8 	bl	800795c <VL53L0X_calc_dmax>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007fb2:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	37b8      	adds	r7, #184	; 0xb8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	10624dd3 	.word	0x10624dd3
 8007fc4:	51eb851f 	.word	0x51eb851f
 8007fc8:	d1b71759 	.word	0xd1b71759

08007fcc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b090      	sub	sp, #64	; 0x40
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	460b      	mov	r3, r1
 8007fda:	72fb      	strb	r3, [r7, #11]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	10db      	asrs	r3, r3, #3
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 030f 	and.w	r3, r3, #15
 8008028:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800802c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008030:	2b00      	cmp	r3, #0
 8008032:	d017      	beq.n	8008064 <VL53L0X_get_pal_range_status+0x98>
 8008034:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008038:	2b05      	cmp	r3, #5
 800803a:	d013      	beq.n	8008064 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800803c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008040:	2b07      	cmp	r3, #7
 8008042:	d00f      	beq.n	8008064 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008044:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008048:	2b0c      	cmp	r3, #12
 800804a:	d00b      	beq.n	8008064 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800804c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008050:	2b0d      	cmp	r3, #13
 8008052:	d007      	beq.n	8008064 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008054:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008058:	2b0e      	cmp	r3, #14
 800805a:	d003      	beq.n	8008064 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800805c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008060:	2b0f      	cmp	r3, #15
 8008062:	d103      	bne.n	800806c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008064:	2301      	movs	r3, #1
 8008066:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800806a:	e002      	b.n	8008072 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8008072:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008076:	2b00      	cmp	r3, #0
 8008078:	d107      	bne.n	800808a <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800807a:	2201      	movs	r2, #1
 800807c:	21ff      	movs	r1, #255	; 0xff
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fb74 	bl	800876c <VL53L0X_WrByte>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800808a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8008092:	f107 0316 	add.w	r3, r7, #22
 8008096:	461a      	mov	r2, r3
 8008098:	21b6      	movs	r1, #182	; 0xb6
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 faf2 	bl	8008684 <VL53L0X_RdWord>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80080a6:	8afb      	ldrh	r3, [r7, #22]
 80080a8:	025b      	lsls	r3, r3, #9
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 80080ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d107      	bne.n	80080c4 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80080b4:	2200      	movs	r2, #0
 80080b6:	21ff      	movs	r1, #255	; 0xff
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb57 	bl	800876c <VL53L0X_WrByte>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80080cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80080d4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80080d8:	461a      	mov	r2, r3
 80080da:	2100      	movs	r1, #0
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7fc fa25 	bl	800452c <VL53L0X_GetLimitCheckEnable>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80080e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d02e      	beq.n	800814e <VL53L0X_get_pal_range_status+0x182>
 80080f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d12a      	bne.n	800814e <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80080f8:	f107 0310 	add.w	r3, r7, #16
 80080fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008100:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fd4a 	bl	8007b9c <VL53L0X_calc_sigma_estimate>
 8008108:	4603      	mov	r3, r0
 800810a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800810e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	b29a      	uxth	r2, r3
 800811a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811c:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800811e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008122:	2b00      	cmp	r3, #0
 8008124:	d113      	bne.n	800814e <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008126:	f107 0320 	add.w	r3, r7, #32
 800812a:	461a      	mov	r2, r3
 800812c:	2100      	movs	r1, #0
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7fc fa82 	bl	8004638 <VL53L0X_GetLimitCheckValue>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d006      	beq.n	800814e <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8008140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008142:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008144:	429a      	cmp	r2, r3
 8008146:	d902      	bls.n	800814e <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800814e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008156:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800815a:	461a      	mov	r2, r3
 800815c:	2102      	movs	r1, #2
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7fc f9e4 	bl	800452c <VL53L0X_GetLimitCheckEnable>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800816a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800816e:	2b00      	cmp	r3, #0
 8008170:	d017      	beq.n	80081a2 <VL53L0X_get_pal_range_status+0x1d6>
 8008172:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008176:	2b00      	cmp	r3, #0
 8008178:	d113      	bne.n	80081a2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800817a:	f107 031c 	add.w	r3, r7, #28
 800817e:	461a      	mov	r2, r3
 8008180:	2102      	movs	r1, #2
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7fc fa58 	bl	8004638 <VL53L0X_GetLimitCheckValue>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d006      	beq.n	80081a2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008194:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008198:	429a      	cmp	r2, r3
 800819a:	d902      	bls.n	80081a2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80081a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80081aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081ae:	461a      	mov	r2, r3
 80081b0:	2103      	movs	r1, #3
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7fc f9ba 	bl	800452c <VL53L0X_GetLimitCheckEnable>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80081be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d023      	beq.n	800820e <VL53L0X_get_pal_range_status+0x242>
 80081c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d11f      	bne.n	800820e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80081ce:	893b      	ldrh	r3, [r7, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
 80081d8:	e005      	b.n	80081e6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	021a      	lsls	r2, r3, #8
 80081de:	893b      	ldrh	r3, [r7, #8]
 80081e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80081e6:	f107 0318 	add.w	r3, r7, #24
 80081ea:	461a      	mov	r2, r3
 80081ec:	2103      	movs	r1, #3
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7fc fa22 	bl	8004638 <VL53L0X_GetLimitCheckValue>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008200:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008204:	429a      	cmp	r2, r3
 8008206:	d202      	bcs.n	800820e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800820e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008212:	2b00      	cmp	r3, #0
 8008214:	d14a      	bne.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008216:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800821a:	2b01      	cmp	r3, #1
 800821c:	d103      	bne.n	8008226 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800821e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008220:	22ff      	movs	r2, #255	; 0xff
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e042      	b.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008226:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800822a:	2b01      	cmp	r3, #1
 800822c:	d007      	beq.n	800823e <VL53L0X_get_pal_range_status+0x272>
 800822e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008232:	2b02      	cmp	r3, #2
 8008234:	d003      	beq.n	800823e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008236:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800823a:	2b03      	cmp	r3, #3
 800823c:	d103      	bne.n	8008246 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800823e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008240:	2205      	movs	r2, #5
 8008242:	701a      	strb	r2, [r3, #0]
 8008244:	e032      	b.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008246:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800824a:	2b06      	cmp	r3, #6
 800824c:	d003      	beq.n	8008256 <VL53L0X_get_pal_range_status+0x28a>
 800824e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008252:	2b09      	cmp	r3, #9
 8008254:	d103      	bne.n	800825e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	2204      	movs	r2, #4
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e026      	b.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800825e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008262:	2b08      	cmp	r3, #8
 8008264:	d007      	beq.n	8008276 <VL53L0X_get_pal_range_status+0x2aa>
 8008266:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800826a:	2b0a      	cmp	r3, #10
 800826c:	d003      	beq.n	8008276 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800826e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d103      	bne.n	800827e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008278:	2203      	movs	r2, #3
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e016      	b.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800827e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008282:	2b04      	cmp	r3, #4
 8008284:	d003      	beq.n	800828e <VL53L0X_get_pal_range_status+0x2c2>
 8008286:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800828a:	2b01      	cmp	r3, #1
 800828c:	d103      	bne.n	8008296 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	2202      	movs	r2, #2
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e00a      	b.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008296:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800829a:	2b01      	cmp	r3, #1
 800829c:	d103      	bne.n	80082a6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800829e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e002      	b.n	80082ac <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80082a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80082ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80082b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b6:	2200      	movs	r2, #0
 80082b8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80082ba:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80082be:	461a      	mov	r2, r3
 80082c0:	2101      	movs	r1, #1
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7fc f932 	bl	800452c <VL53L0X_GetLimitCheckEnable>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80082ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d14f      	bne.n	8008376 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80082d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <VL53L0X_get_pal_range_status+0x31a>
 80082de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d103      	bne.n	80082ee <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ec:	e002      	b.n	80082f4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80082fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80082fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008302:	2b04      	cmp	r3, #4
 8008304:	d003      	beq.n	800830e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008306:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008314:	e002      	b.n	800831c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008322:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008326:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <VL53L0X_get_pal_range_status+0x36a>
 800832e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d103      	bne.n	800833e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833c:	e002      	b.n	8008344 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800834a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800834e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <VL53L0X_get_pal_range_status+0x392>
 8008356:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800835a:	2b01      	cmp	r3, #1
 800835c:	d103      	bne.n	8008366 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008364:	e002      	b.n	800836c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008372:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008376:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800837a:	4618      	mov	r0, r3
 800837c:	3740      	adds	r7, #64	; 0x40
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800838e:	2300      	movs	r3, #0
 8008390:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8008392:	2102      	movs	r1, #2
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7fd fe03 	bl	8005fa0 <VL53L0X_get_info_from_device>
 800839a:	4603      	mov	r3, r0
 800839c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800839e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d11c      	bne.n	80083e0 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 80083ac:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 80083ae:	7dbb      	ldrb	r3, [r7, #22]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d107      	bne.n	80083c4 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3340      	adds	r3, #64	; 0x40
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	e00d      	b.n	80083e0 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	33f3      	adds	r3, #243	; 0xf3
 80083d2:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3340      	adds	r3, #64	; 0x40
 80083d8:	6939      	ldr	r1, [r7, #16]
 80083da:	4618      	mov	r0, r3
 80083dc:	f00a fb0e 	bl	80129fc <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80083ec:	b5b0      	push	{r4, r5, r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 80083fa:	f107 030d 	add.w	r3, r7, #13
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff ffbd 	bl	8008382 <VL53L0X_check_part_used>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800840c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d13b      	bne.n	800848c <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 8008414:	7b7b      	ldrb	r3, [r7, #13]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d108      	bne.n	800842c <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	4a30      	ldr	r2, [pc, #192]	; (80084e0 <VL53L0X_get_device_info+0xf4>)
 800841e:	461c      	mov	r4, r3
 8008420:	4613      	mov	r3, r2
 8008422:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008424:	6020      	str	r0, [r4, #0]
 8008426:	6061      	str	r1, [r4, #4]
 8008428:	60a2      	str	r2, [r4, #8]
 800842a:	e027      	b.n	800847c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800842c:	7b7b      	ldrb	r3, [r7, #13]
 800842e:	2b22      	cmp	r3, #34	; 0x22
 8008430:	d80b      	bhi.n	800844a <VL53L0X_get_device_info+0x5e>
 8008432:	7b7b      	ldrb	r3, [r7, #13]
 8008434:	2b20      	cmp	r3, #32
 8008436:	d008      	beq.n	800844a <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	4a2a      	ldr	r2, [pc, #168]	; (80084e4 <VL53L0X_get_device_info+0xf8>)
 800843c:	461c      	mov	r4, r3
 800843e:	4613      	mov	r3, r2
 8008440:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008442:	6020      	str	r0, [r4, #0]
 8008444:	6061      	str	r1, [r4, #4]
 8008446:	60a2      	str	r2, [r4, #8]
 8008448:	e018      	b.n	800847c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800844a:	7b7b      	ldrb	r3, [r7, #13]
 800844c:	2b26      	cmp	r3, #38	; 0x26
 800844e:	d808      	bhi.n	8008462 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	4a25      	ldr	r2, [pc, #148]	; (80084e8 <VL53L0X_get_device_info+0xfc>)
 8008454:	461c      	mov	r4, r3
 8008456:	4613      	mov	r3, r2
 8008458:	cb07      	ldmia	r3!, {r0, r1, r2}
 800845a:	6020      	str	r0, [r4, #0]
 800845c:	6061      	str	r1, [r4, #4]
 800845e:	60a2      	str	r2, [r4, #8]
 8008460:	e00c      	b.n	800847c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	4a21      	ldr	r2, [pc, #132]	; (80084ec <VL53L0X_get_device_info+0x100>)
 8008466:	461d      	mov	r5, r3
 8008468:	4614      	mov	r4, r2
 800846a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800846c:	6028      	str	r0, [r5, #0]
 800846e:	6069      	str	r1, [r5, #4]
 8008470:	60aa      	str	r2, [r5, #8]
 8008472:	60eb      	str	r3, [r5, #12]
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	6128      	str	r0, [r5, #16]
 8008478:	7923      	ldrb	r3, [r4, #4]
 800847a:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	3320      	adds	r3, #32
 8008480:	491b      	ldr	r1, [pc, #108]	; (80084f0 <VL53L0X_get_device_info+0x104>)
 8008482:	461a      	mov	r2, r3
 8008484:	460b      	mov	r3, r1
 8008486:	cb03      	ldmia	r3!, {r0, r1}
 8008488:	6010      	str	r0, [r2, #0]
 800848a:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800848c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d108      	bne.n	80084a6 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	3360      	adds	r3, #96	; 0x60
 8008498:	461a      	mov	r2, r3
 800849a:	21c0      	movs	r1, #192	; 0xc0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f86a 	bl	8008576 <VL53L0X_RdByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80084a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d112      	bne.n	80084d4 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 80084ae:	f107 030e 	add.w	r3, r7, #14
 80084b2:	461a      	mov	r2, r3
 80084b4:	21c2      	movs	r1, #194	; 0xc2
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f85d 	bl	8008576 <VL53L0X_RdByte>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	091b      	lsrs	r3, r3, #4
 80084cc:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 80084d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bdb0      	pop	{r4, r5, r7, pc}
 80084e0:	080148d4 	.word	0x080148d4
 80084e4:	080148e0 	.word	0x080148e0
 80084e8:	080148ec 	.word	0x080148ec
 80084ec:	080148f8 	.word	0x080148f8
 80084f0:	08014910 	.word	0x08014910

080084f4 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	330a      	adds	r3, #10
 8008504:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8008512:	b299      	uxth	r1, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	b29a      	uxth	r2, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	f001 ffa2 	bl	800a468 <HAL_I2C_Master_Transmit>
 8008524:	4603      	mov	r3, r0
 8008526:	613b      	str	r3, [r7, #16]
    
    return status;
 8008528:	693b      	ldr	r3, [r7, #16]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008532:	b580      	push	{r7, lr}
 8008534:	b088      	sub	sp, #32
 8008536:	af02      	add	r7, sp, #8
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	330a      	adds	r3, #10
 8008542:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	b299      	uxth	r1, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	b29a      	uxth	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	f002 f874 	bl	800a650 <HAL_I2C_Master_Receive>
 8008568:	4603      	mov	r3, r0
 800856a:	613b      	str	r3, [r7, #16]
    
    return status;
 800856c:	693b      	ldr	r3, [r7, #16]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008576:	b580      	push	{r7, lr}
 8008578:	b086      	sub	sp, #24
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	460b      	mov	r3, r1
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008584:	2300      	movs	r3, #0
 8008586:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008588:	f107 030b 	add.w	r3, r7, #11
 800858c:	2201      	movs	r2, #1
 800858e:	4619      	mov	r1, r3
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff ffaf 	bl	80084f4 <_I2CWrite>
 8008596:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800859e:	23ec      	movs	r3, #236	; 0xec
 80085a0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80085a2:	e00c      	b.n	80085be <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 80085a4:	2201      	movs	r2, #1
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff ffc2 	bl	8008532 <_I2CRead>
 80085ae:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80085b6:	23ec      	movs	r3, #236	; 0xec
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e000      	b.n	80085be <VL53L0X_RdByte+0x48>
    }
done:
 80085bc:	bf00      	nop
    return Status;
 80085be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085dc:	2300      	movs	r3, #0
 80085de:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2b3f      	cmp	r3, #63	; 0x3f
 80085e4:	d902      	bls.n	80085ec <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80085e6:	f06f 0303 	mvn.w	r3, #3
 80085ea:	e016      	b.n	800861a <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 80085ec:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <VL53L0X_WriteMulti+0x58>)
 80085ee:	7afb      	ldrb	r3, [r7, #11]
 80085f0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	480c      	ldr	r0, [pc, #48]	; (8008628 <VL53L0X_WriteMulti+0x5c>)
 80085f8:	f00a f91d 	bl	8012836 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	3301      	adds	r3, #1
 8008600:	461a      	mov	r2, r3
 8008602:	4908      	ldr	r1, [pc, #32]	; (8008624 <VL53L0X_WriteMulti+0x58>)
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff ff75 	bl	80084f4 <_I2CWrite>
 800860a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008612:	23ec      	movs	r3, #236	; 0xec
 8008614:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 8008616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200036f0 	.word	0x200036f0
 8008628:	200036f1 	.word	0x200036f1

0800862c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	460b      	mov	r3, r1
 800863a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800863c:	2300      	movs	r3, #0
 800863e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8008640:	f107 030b 	add.w	r3, r7, #11
 8008644:	2201      	movs	r2, #1
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff ff53 	bl	80084f4 <_I2CWrite>
 800864e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008656:	23ec      	movs	r3, #236	; 0xec
 8008658:	75fb      	strb	r3, [r7, #23]
        goto done;
 800865a:	e00c      	b.n	8008676 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff ff66 	bl	8008532 <_I2CRead>
 8008666:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800866e:	23ec      	movs	r3, #236	; 0xec
 8008670:	75fb      	strb	r3, [r7, #23]
 8008672:	e000      	b.n	8008676 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008674:	bf00      	nop
    return Status;
 8008676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	460b      	mov	r3, r1
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008696:	f107 030b 	add.w	r3, r7, #11
 800869a:	2201      	movs	r2, #1
 800869c:	4619      	mov	r1, r3
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7ff ff28 	bl	80084f4 <_I2CWrite>
 80086a4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086ac:	23ec      	movs	r3, #236	; 0xec
 80086ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 80086b0:	e017      	b.n	80086e2 <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80086b2:	2202      	movs	r2, #2
 80086b4:	490e      	ldr	r1, [pc, #56]	; (80086f0 <VL53L0X_RdWord+0x6c>)
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff ff3b 	bl	8008532 <_I2CRead>
 80086bc:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086c4:	23ec      	movs	r3, #236	; 0xec
 80086c6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80086c8:	e00b      	b.n	80086e2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <VL53L0X_RdWord+0x6c>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <VL53L0X_RdWord+0x6c>)
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4413      	add	r3, r2
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 80086e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200036f0 	.word	0x200036f0

080086f4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	460b      	mov	r3, r1
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008706:	f107 030b 	add.w	r3, r7, #11
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fef0 	bl	80084f4 <_I2CWrite>
 8008714:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800871c:	23ec      	movs	r3, #236	; 0xec
 800871e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008720:	e01b      	b.n	800875a <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008722:	2204      	movs	r2, #4
 8008724:	4910      	ldr	r1, [pc, #64]	; (8008768 <VL53L0X_RdDWord+0x74>)
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff ff03 	bl	8008532 <_I2CRead>
 800872c:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008734:	23ec      	movs	r3, #236	; 0xec
 8008736:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008738:	e00f      	b.n	800875a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <VL53L0X_RdDWord+0x74>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	061a      	lsls	r2, r3, #24
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <VL53L0X_RdDWord+0x74>)
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	041b      	lsls	r3, r3, #16
 8008746:	441a      	add	r2, r3
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <VL53L0X_RdDWord+0x74>)
 800874a:	789b      	ldrb	r3, [r3, #2]
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	4413      	add	r3, r2
 8008750:	4a05      	ldr	r2, [pc, #20]	; (8008768 <VL53L0X_RdDWord+0x74>)
 8008752:	78d2      	ldrb	r2, [r2, #3]
 8008754:	441a      	add	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800875a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200036f0 	.word	0x200036f0

0800876c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
 8008778:	4613      	mov	r3, r2
 800877a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008780:	4a0b      	ldr	r2, [pc, #44]	; (80087b0 <VL53L0X_WrByte+0x44>)
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008786:	4a0a      	ldr	r2, [pc, #40]	; (80087b0 <VL53L0X_WrByte+0x44>)
 8008788:	78bb      	ldrb	r3, [r7, #2]
 800878a:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800878c:	2202      	movs	r2, #2
 800878e:	4908      	ldr	r1, [pc, #32]	; (80087b0 <VL53L0X_WrByte+0x44>)
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff feaf 	bl	80084f4 <_I2CWrite>
 8008796:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800879e:	23ec      	movs	r3, #236	; 0xec
 80087a0:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 80087a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200036f0 	.word	0x200036f0

080087b4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
 80087c0:	4613      	mov	r3, r2
 80087c2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80087c8:	4a0e      	ldr	r2, [pc, #56]	; (8008804 <VL53L0X_WrWord+0x50>)
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80087ce:	883b      	ldrh	r3, [r7, #0]
 80087d0:	0a1b      	lsrs	r3, r3, #8
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <VL53L0X_WrWord+0x50>)
 80087d8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80087da:	883b      	ldrh	r3, [r7, #0]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <VL53L0X_WrWord+0x50>)
 80087e0:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80087e2:	2203      	movs	r2, #3
 80087e4:	4907      	ldr	r1, [pc, #28]	; (8008804 <VL53L0X_WrWord+0x50>)
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff fe84 	bl	80084f4 <_I2CWrite>
 80087ec:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087f4:	23ec      	movs	r3, #236	; 0xec
 80087f6:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 80087f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	200036f0 	.word	0x200036f0

08008808 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	4608      	mov	r0, r1
 8008812:	4611      	mov	r1, r2
 8008814:	461a      	mov	r2, r3
 8008816:	4603      	mov	r3, r0
 8008818:	70fb      	strb	r3, [r7, #3]
 800881a:	460b      	mov	r3, r1
 800881c:	70bb      	strb	r3, [r7, #2]
 800881e:	4613      	mov	r3, r2
 8008820:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008826:	f107 020e 	add.w	r2, r7, #14
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fea1 	bl	8008576 <VL53L0X_RdByte>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 8008838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d110      	bne.n	8008862 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8008840:	7bba      	ldrb	r2, [r7, #14]
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	4013      	ands	r3, r2
 8008846:	b2da      	uxtb	r2, r3
 8008848:	787b      	ldrb	r3, [r7, #1]
 800884a:	4313      	orrs	r3, r2
 800884c:	b2db      	uxtb	r3, r3
 800884e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008850:	7bba      	ldrb	r2, [r7, #14]
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff ff88 	bl	800876c <VL53L0X_WrByte>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
 8008860:	e000      	b.n	8008864 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008862:	bf00      	nop
done:
    return Status;
 8008864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800887c:	2002      	movs	r0, #2
 800887e:	f000 ffb5 	bl	80097ec <HAL_Delay>
    return status;
 8008882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8008890:	b084      	sub	sp, #16
 8008892:	b580      	push	{r7, lr}
 8008894:	b088      	sub	sp, #32
 8008896:	af00      	add	r7, sp, #0
 8008898:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800889c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 80088a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088a4:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 80088a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80088aa:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 80088ac:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80088b0:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 80088b2:	230e      	movs	r3, #14
 80088b4:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 80088b6:	230a      	movs	r3, #10
 80088b8:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 80088ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80ac 	beq.w	8008a1c <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 80088c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088c8:	f7fb f8ba 	bl	8003a40 <VL53L0X_StaticInit>
 80088cc:	4603      	mov	r3, r0
 80088ce:	60fb      	str	r3, [r7, #12]
    if( status ){
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 80088d6:	4855      	ldr	r0, [pc, #340]	; (8008a2c <SetupSingleShot+0x19c>)
 80088d8:	f00a f834 	bl	8012944 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 80088dc:	f107 020a 	add.w	r2, r7, #10
 80088e0:	f107 030b 	add.w	r3, r7, #11
 80088e4:	4619      	mov	r1, r3
 80088e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088ea:	f7fb ff99 	bl	8004820 <VL53L0X_PerformRefCalibration>
 80088ee:	4603      	mov	r3, r0
 80088f0:	60fb      	str	r3, [r7, #12]
    if( status ){
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 80088f8:	484d      	ldr	r0, [pc, #308]	; (8008a30 <SetupSingleShot+0x1a0>)
 80088fa:	f00a f823 	bl	8012944 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 80088fe:	1cfa      	adds	r2, r7, #3
 8008900:	1d3b      	adds	r3, r7, #4
 8008902:	4619      	mov	r1, r3
 8008904:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008908:	f7fc fbe2 	bl	80050d0 <VL53L0X_PerformRefSpadManagement>
 800890c:	4603      	mov	r3, r0
 800890e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8008916:	4847      	ldr	r0, [pc, #284]	; (8008a34 <SetupSingleShot+0x1a4>)
 8008918:	f00a f814 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800891c:	2100      	movs	r1, #0
 800891e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008922:	f7fb fa9f 	bl	8003e64 <VL53L0X_SetDeviceMode>
 8008926:	4603      	mov	r3, r0
 8008928:	60fb      	str	r3, [r7, #12]
    if( status ){
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 8008930:	4841      	ldr	r0, [pc, #260]	; (8008a38 <SetupSingleShot+0x1a8>)
 8008932:	f00a f807 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8008936:	2201      	movs	r2, #1
 8008938:	2100      	movs	r1, #0
 800893a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800893e:	f7fb fd69 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 8008942:	4603      	mov	r3, r0
 8008944:	60fb      	str	r3, [r7, #12]
    if( status ){
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800894c:	483b      	ldr	r0, [pc, #236]	; (8008a3c <SetupSingleShot+0x1ac>)
 800894e:	f009 fff9 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8008952:	2201      	movs	r2, #1
 8008954:	2101      	movs	r1, #1
 8008956:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800895a:	f7fb fd5b 	bl	8004414 <VL53L0X_SetLimitCheckEnable>
 800895e:	4603      	mov	r3, r0
 8008960:	60fb      	str	r3, [r7, #12]
    if( status ){
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8008968:	4834      	ldr	r0, [pc, #208]	; (8008a3c <SetupSingleShot+0x1ac>)
 800896a:	f009 ffeb 	bl	8012944 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800896e:	f641 1399 	movw	r3, #6553	; 0x1999
 8008972:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 8008974:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8008978:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 800897a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800897e:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 8008980:	2312      	movs	r3, #18
 8008982:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 8008984:	230e      	movs	r3, #14
 8008986:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	2101      	movs	r1, #1
 800898c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008990:	f7fb fdf0 	bl	8004574 <VL53L0X_SetLimitCheckValue>
 8008994:	4603      	mov	r3, r0
 8008996:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800899e:	4828      	ldr	r0, [pc, #160]	; (8008a40 <SetupSingleShot+0x1b0>)
 80089a0:	f009 ffd0 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	2100      	movs	r1, #0
 80089a8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80089ac:	f7fb fde2 	bl	8004574 <VL53L0X_SetLimitCheckValue>
 80089b0:	4603      	mov	r3, r0
 80089b2:	60fb      	str	r3, [r7, #12]
    if( status ){
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80089ba:	4821      	ldr	r0, [pc, #132]	; (8008a40 <SetupSingleShot+0x1b0>)
 80089bc:	f009 ffc2 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 80089c0:	6979      	ldr	r1, [r7, #20]
 80089c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80089c6:	f7fb fac7 	bl	8003f58 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80089ca:	4603      	mov	r3, r0
 80089cc:	60fb      	str	r3, [r7, #12]
    if( status ){
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80089d4:	481b      	ldr	r0, [pc, #108]	; (8008a44 <SetupSingleShot+0x1b4>)
 80089d6:	f009 ffb5 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80089da:	7cfb      	ldrb	r3, [r7, #19]
 80089dc:	461a      	mov	r2, r3
 80089de:	2100      	movs	r1, #0
 80089e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80089e4:	f7fb fade 	bl	8003fa4 <VL53L0X_SetVcselPulsePeriod>
 80089e8:	4603      	mov	r3, r0
 80089ea:	60fb      	str	r3, [r7, #12]
    if( status ){
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80089f2:	4815      	ldr	r0, [pc, #84]	; (8008a48 <SetupSingleShot+0x1b8>)
 80089f4:	f009 ffa6 	bl	8012944 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80089f8:	7cbb      	ldrb	r3, [r7, #18]
 80089fa:	461a      	mov	r2, r3
 80089fc:	2101      	movs	r1, #1
 80089fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008a02:	f7fb facf 	bl	8003fa4 <VL53L0X_SetVcselPulsePeriod>
 8008a06:	4603      	mov	r3, r0
 8008a08:	60fb      	str	r3, [r7, #12]
    if( status ){
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8008a10:	480d      	ldr	r0, [pc, #52]	; (8008a48 <SetupSingleShot+0x1b8>)
 8008a12:	f009 ff97 	bl	8012944 <puts>
    }
    
    Dev.LeakyFirst=1;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3720      	adds	r7, #32
 8008a20:	46bd      	mov	sp, r7
 8008a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a26:	b004      	add	sp, #16
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	08014d78 	.word	0x08014d78
 8008a30:	08014d94 	.word	0x08014d94
 8008a34:	08014dbc 	.word	0x08014dbc
 8008a38:	08014de4 	.word	0x08014de4
 8008a3c:	08014e04 	.word	0x08014e04
 8008a40:	08014e28 	.word	0x08014e28
 8008a44:	08014e4c 	.word	0x08014e4c
 8008a48:	08014e84 	.word	0x08014e84

08008a4c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008a56:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <WIFI_Init+0x40>)
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <WIFI_Init+0x44>)
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <WIFI_Init+0x48>)
 8008a60:	4a0d      	ldr	r2, [pc, #52]	; (8008a98 <WIFI_Init+0x4c>)
 8008a62:	490e      	ldr	r1, [pc, #56]	; (8008a9c <WIFI_Init+0x50>)
 8008a64:	480e      	ldr	r0, [pc, #56]	; (8008aa0 <WIFI_Init+0x54>)
 8008a66:	f7f8 fb4d 	bl	8001104 <ES_WIFI_RegisterBusIO>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d107      	bne.n	8008a80 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008a70:	480b      	ldr	r0, [pc, #44]	; (8008aa0 <WIFI_Init+0x54>)
 8008a72:	f7f8 fb19 	bl	80010a8 <ES_WIFI_Init>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008a80:	79fb      	ldrb	r3, [r7, #7]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08001c5d 	.word	0x08001c5d
 8008a90:	08001d51 	.word	0x08001d51
 8008a94:	08001e2d 	.word	0x08001e2d
 8008a98:	08001b45 	.word	0x08001b45
 8008a9c:	080019a9 	.word	0x080019a9
 8008aa0:	20003730 	.word	0x20003730

08008aa4 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	68f9      	ldr	r1, [r7, #12]
 8008abc:	4809      	ldr	r0, [pc, #36]	; (8008ae4 <WIFI_Connect+0x40>)
 8008abe:	f7f8 fb55 	bl	800116c <ES_WIFI_Connect>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d107      	bne.n	8008ad8 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008ac8:	4806      	ldr	r0, [pc, #24]	; (8008ae4 <WIFI_Connect+0x40>)
 8008aca:	f7f8 fbf1 	bl	80012b0 <ES_WIFI_GetNetworkSettings>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20003730 	.word	0x20003730

08008ae8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4806      	ldr	r0, [pc, #24]	; (8008b10 <WIFI_GetMAC_Address+0x28>)
 8008af8:	f7f8 fc04 	bl	8001304 <ES_WIFI_GetMACAddress>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20003730 	.word	0x20003730

08008b14 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8008b20:	4809      	ldr	r0, [pc, #36]	; (8008b48 <WIFI_GetIP_Address+0x34>)
 8008b22:	f7f8 fb99 	bl	8001258 <ES_WIFI_IsConnected>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d107      	bne.n	8008b3c <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <WIFI_GetIP_Address+0x34>)
 8008b2e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20003730 	.word	0x20003730

08008b4c <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8008b68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008b6a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8008b6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008b6e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008b70:	7afb      	ldrb	r3, [r7, #11]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bf14      	ite	ne
 8008b76:	2301      	movne	r3, #1
 8008b78:	2300      	moveq	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	789b      	ldrb	r3, [r3, #2]
 8008b8e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	78db      	ldrb	r3, [r3, #3]
 8008b94:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008b96:	f107 0310 	add.w	r3, r7, #16
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4807      	ldr	r0, [pc, #28]	; (8008bbc <WIFI_OpenClientConnection+0x70>)
 8008b9e:	f7f8 fbe1 	bl	8001364 <ES_WIFI_StartClientConnection>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3728      	adds	r7, #40	; 0x28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20003730 	.word	0x20003730

08008bc0 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607b      	str	r3, [r7, #4]
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008bd6:	89ba      	ldrh	r2, [r7, #12]
 8008bd8:	7bf9      	ldrb	r1, [r7, #15]
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4613      	mov	r3, r2
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	4806      	ldr	r0, [pc, #24]	; (8008c00 <WIFI_SendData+0x40>)
 8008be8:	f7f8 fca8 	bl	800153c <ES_WIFI_SendData>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20003730 	.word	0x20003730

08008c04 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	607b      	str	r3, [r7, #4]
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	4613      	mov	r3, r2
 8008c14:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008c1a:	89ba      	ldrh	r2, [r7, #12]
 8008c1c:	7bf9      	ldrb	r1, [r7, #15]
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	4613      	mov	r3, r2
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	4806      	ldr	r0, [pc, #24]	; (8008c44 <WIFI_ReceiveData+0x40>)
 8008c2c:	f7f8 fd42 	bl	80016b4 <ES_WIFI_ReceiveData>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20003730 	.word	0x20003730

08008c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008c4c:	f7fa fd92 	bl	8003774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008c50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008c52:	e003      	b.n	8008c5c <LoopCopyDataInit>

08008c54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008c56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008c58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008c5a:	3104      	adds	r1, #4

08008c5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008c5c:	480a      	ldr	r0, [pc, #40]	; (8008c88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008c5e:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8008c60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008c62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008c64:	d3f6      	bcc.n	8008c54 <CopyDataInit>
	ldr	r2, =_sbss
 8008c66:	4a0a      	ldr	r2, [pc, #40]	; (8008c90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008c68:	e002      	b.n	8008c70 <LoopFillZerobss>

08008c6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008c6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008c6c:	f842 3b04 	str.w	r3, [r2], #4

08008c70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008c70:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <LoopForever+0x16>)
	cmp	r2, r3
 8008c72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008c74:	d3f9      	bcc.n	8008c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008c76:	f009 fdab 	bl	80127d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008c7a:	f7f9 f99f 	bl	8001fbc <main>

08008c7e <LoopForever>:

LoopForever:
    b LoopForever
 8008c7e:	e7fe      	b.n	8008c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008c80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008c84:	08015128 	.word	0x08015128
	ldr	r0, =_sdata
 8008c88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008c8c:	20000664 	.word	0x20000664
	ldr	r2, =_sbss
 8008c90:	20000664 	.word	0x20000664
	ldr	r3, = _ebss
 8008c94:	20004144 	.word	0x20004144

08008c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008c98:	e7fe      	b.n	8008c98 <ADC1_2_IRQHandler>
	...

08008c9c <BSP_LED_Init>:
  * @param  Led  LED to be initialized.
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  LEDx_GPIO_CLK_ENABLE(Led);
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10b      	bne.n	8008cc4 <BSP_LED_Init+0x28>
 8008cac:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <BSP_LED_Init+0x58>)
 8008cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb0:	4a10      	ldr	r2, [pc, #64]	; (8008cf4 <BSP_LED_Init+0x58>)
 8008cb2:	f043 0302 	orr.w	r3, r3, #2
 8008cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cb8:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <BSP_LED_Init+0x58>)
 8008cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	60bb      	str	r3, [r7, #8]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8008cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cc8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	4a07      	ldr	r2, [pc, #28]	; (8008cf8 <BSP_LED_Init+0x5c>)
 8008cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cde:	f107 020c 	add.w	r2, r7, #12
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f803 	bl	8009cf0 <HAL_GPIO_Init>
}
 8008cea:	bf00      	nop
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	2000044c 	.word	0x2000044c

08008cfc <BSP_LED_On>:
  * @param  Led  LED to be set on
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <BSP_LED_On+0x28>)
 8008d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d12:	b291      	uxth	r1, r2
 8008d14:	2201      	movs	r2, #1
 8008d16:	4618      	mov	r0, r3
 8008d18:	f001 fa9e 	bl	800a258 <HAL_GPIO_WritePin>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	2000044c 	.word	0x2000044c

08008d28 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line
  *                                              with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	460a      	mov	r2, r1
 8008d32:	71fb      	strb	r3, [r7, #7]
 8008d34:	4613      	mov	r3, r2
 8008d36:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8008d38:	4b23      	ldr	r3, [pc, #140]	; (8008dc8 <BSP_PB_Init+0xa0>)
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	4a22      	ldr	r2, [pc, #136]	; (8008dc8 <BSP_PB_Init+0xa0>)
 8008d3e:	f043 0304 	orr.w	r3, r3, #4
 8008d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d44:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <BSP_PB_Init+0xa0>)
 8008d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	60bb      	str	r3, [r7, #8]
 8008d4e:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8008d50:	79bb      	ldrb	r3, [r7, #6]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d112      	bne.n	8008d7c <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d5a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8008d60:	2301      	movs	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d64:	2302      	movs	r3, #2
 8008d66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <BSP_PB_Init+0xa4>)
 8008d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d70:	f107 020c 	add.w	r2, r7, #12
 8008d74:	4611      	mov	r1, r2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 ffba 	bl	8009cf0 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 8008d7c:	79bb      	ldrb	r3, [r7, #6]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d11e      	bne.n	8008dc0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d86:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008d90:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <BSP_PB_Init+0xa8>)
 8008d92:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	4a0d      	ldr	r2, [pc, #52]	; (8008dcc <BSP_PB_Init+0xa4>)
 8008d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d9c:	f107 020c 	add.w	r2, r7, #12
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 ffa4 	bl	8009cf0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8008da8:	2328      	movs	r3, #40	; 0x28
 8008daa:	b25b      	sxtb	r3, r3
 8008dac:	2200      	movs	r2, #0
 8008dae:	210f      	movs	r1, #15
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fe18 	bl	80099e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008db6:	2328      	movs	r3, #40	; 0x28
 8008db8:	b25b      	sxtb	r3, r3
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fe2f 	bl	8009a1e <HAL_NVIC_EnableIRQ>
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	3720      	adds	r7, #32
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40021000 	.word	0x40021000
 8008dcc:	20000450 	.word	0x20000450
 8008dd0:	10110000 	.word	0x10110000

08008dd4 <BSP_COM_Init>:
  *                @arg  COM1
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	; 0x28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <BSP_COM_Init+0x2a>
 8008de6:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dea:	4a2c      	ldr	r2, [pc, #176]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008dec:	f043 0302 	orr.w	r3, r3, #2
 8008df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008df2:	4b2a      	ldr	r3, [pc, #168]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10b      	bne.n	8008e1c <BSP_COM_Init+0x48>
 8008e04:	4b25      	ldr	r3, [pc, #148]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e08:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008e0a:	f043 0302 	orr.w	r3, r3, #2
 8008e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e10:	4b22      	ldr	r3, [pc, #136]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10b      	bne.n	8008e3a <BSP_COM_Init+0x66>
 8008e22:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	4a1d      	ldr	r2, [pc, #116]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8008e2e:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <BSP_COM_Init+0xc8>)
 8008e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e36:	60bb      	str	r3, [r7, #8]
 8008e38:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8008e3a:	2340      	movs	r3, #64	; 0x40
 8008e3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e42:	2302      	movs	r3, #2
 8008e44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8008e4a:	2307      	movs	r3, #7
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	4a13      	ldr	r2, [pc, #76]	; (8008ea0 <BSP_COM_Init+0xcc>)
 8008e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e56:	f107 0214 	add.w	r2, r7, #20
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 ff47 	bl	8009cf0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8008e62:	2380      	movs	r3, #128	; 0x80
 8008e64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008e66:	2302      	movs	r3, #2
 8008e68:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8008e6a:	2307      	movs	r3, #7
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <BSP_COM_Init+0xd0>)
 8008e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e76:	f107 0214 	add.w	r2, r7, #20
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 ff37 	bl	8009cf0 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	4a08      	ldr	r2, [pc, #32]	; (8008ea8 <BSP_COM_Init+0xd4>)
 8008e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8008e8e:	6838      	ldr	r0, [r7, #0]
 8008e90:	f005 fa7d 	bl	800e38e <HAL_UART_Init>
}
 8008e94:	bf00      	nop
 8008e96:	3728      	adds	r7, #40	; 0x28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	20000458 	.word	0x20000458
 8008ea4:	2000045c 	.word	0x2000045c
 8008ea8:	20000454 	.word	0x20000454

08008eac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08a      	sub	sp, #40	; 0x28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8008eb4:	4b27      	ldr	r3, [pc, #156]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb8:	4a26      	ldr	r2, [pc, #152]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008eba:	f043 0302 	orr.w	r3, r3, #2
 8008ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ec0:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008ecc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ed0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8008ed2:	2312      	movs	r3, #18
 8008ed4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eda:	2303      	movs	r3, #3
 8008edc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008ede:	2304      	movs	r3, #4
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008ee2:	f107 0314 	add.w	r3, r7, #20
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	481b      	ldr	r0, [pc, #108]	; (8008f58 <I2Cx_MspInit+0xac>)
 8008eea:	f000 ff01 	bl	8009cf0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008eee:	f107 0314 	add.w	r3, r7, #20
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4818      	ldr	r0, [pc, #96]	; (8008f58 <I2Cx_MspInit+0xac>)
 8008ef6:	f000 fefb 	bl	8009cf0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008efa:	4b16      	ldr	r3, [pc, #88]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efe:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f04:	6593      	str	r3, [r2, #88]	; 0x58
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8008f12:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	4a0f      	ldr	r2, [pc, #60]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	4a0c      	ldr	r2, [pc, #48]	; (8008f54 <I2Cx_MspInit+0xa8>)
 8008f24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008f28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	210f      	movs	r1, #15
 8008f2e:	2021      	movs	r0, #33	; 0x21
 8008f30:	f000 fd59 	bl	80099e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008f34:	2021      	movs	r0, #33	; 0x21
 8008f36:	f000 fd72 	bl	8009a1e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	210f      	movs	r1, #15
 8008f3e:	2022      	movs	r0, #34	; 0x22
 8008f40:	f000 fd51 	bl	80099e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8008f44:	2022      	movs	r0, #34	; 0x22
 8008f46:	f000 fd6a 	bl	8009a1e <HAL_NVIC_EnableIRQ>
}
 8008f4a:	bf00      	nop
 8008f4c:	3728      	adds	r7, #40	; 0x28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40021000 	.word	0x40021000
 8008f58:	48000400 	.word	0x48000400

08008f5c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a12      	ldr	r2, [pc, #72]	; (8008fb0 <I2Cx_Init+0x54>)
 8008f68:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a11      	ldr	r2, [pc, #68]	; (8008fb4 <I2Cx_Init+0x58>)
 8008f6e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff ff89 	bl	8008eac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f001 f9a6 	bl	800a2ec <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f002 f900 	bl	800b1a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	40005800 	.word	0x40005800
 8008fb4:	00702681 	.word	0x00702681

08008fb8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af04      	add	r7, sp, #16
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	72fb      	strb	r3, [r7, #11]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	813b      	strh	r3, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008fd6:	7afb      	ldrb	r3, [r7, #11]
 8008fd8:	b299      	uxth	r1, r3
 8008fda:	88f8      	ldrh	r0, [r7, #6]
 8008fdc:	893a      	ldrh	r2, [r7, #8]
 8008fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4603      	mov	r3, r0
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f001 fd38 	bl	800aa64 <HAL_I2C_Mem_Read>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	4619      	mov	r1, r3
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f832 	bl	800906c <I2Cx_Error>
  }
  return status;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b08a      	sub	sp, #40	; 0x28
 8009016:	af04      	add	r7, sp, #16
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	461a      	mov	r2, r3
 8009020:	4603      	mov	r3, r0
 8009022:	72fb      	strb	r3, [r7, #11]
 8009024:	460b      	mov	r3, r1
 8009026:	813b      	strh	r3, [r7, #8]
 8009028:	4613      	mov	r3, r2
 800902a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	b299      	uxth	r1, r3
 8009034:	88f8      	ldrh	r0, [r7, #6]
 8009036:	893a      	ldrh	r2, [r7, #8]
 8009038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4603      	mov	r3, r0
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f001 fbf7 	bl	800a83c <HAL_I2C_Mem_Write>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d004      	beq.n	8009062 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	4619      	mov	r1, r3
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f805 	bl	800906c <I2Cx_Error>
  }
  return status;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f9c6 	bl	800a40a <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff ff6c 	bl	8008f5c <I2Cx_Init>
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009090:	4802      	ldr	r0, [pc, #8]	; (800909c <SENSOR_IO_Init+0x10>)
 8009092:	f7ff ff63 	bl	8008f5c <I2Cx_Init>
}
 8009096:	bf00      	nop
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200040b0 	.word	0x200040b0

080090a0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	4603      	mov	r3, r0
 80090a8:	71fb      	strb	r3, [r7, #7]
 80090aa:	460b      	mov	r3, r1
 80090ac:	71bb      	strb	r3, [r7, #6]
 80090ae:	4613      	mov	r3, r2
 80090b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80090b2:	79bb      	ldrb	r3, [r7, #6]
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	79f9      	ldrb	r1, [r7, #7]
 80090b8:	2301      	movs	r3, #1
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	1d7b      	adds	r3, r7, #5
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	2301      	movs	r3, #1
 80090c2:	4803      	ldr	r0, [pc, #12]	; (80090d0 <SENSOR_IO_Write+0x30>)
 80090c4:	f7ff ffa5 	bl	8009012 <I2Cx_WriteMultiple>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200040b0 	.word	0x200040b0

080090d4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af02      	add	r7, sp, #8
 80090da:	4603      	mov	r3, r0
 80090dc:	460a      	mov	r2, r1
 80090de:	71fb      	strb	r3, [r7, #7]
 80090e0:	4613      	mov	r3, r2
 80090e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80090e8:	79bb      	ldrb	r3, [r7, #6]
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	79f9      	ldrb	r1, [r7, #7]
 80090ee:	2301      	movs	r3, #1
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	f107 030f 	add.w	r3, r7, #15
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	2301      	movs	r3, #1
 80090fa:	4804      	ldr	r0, [pc, #16]	; (800910c <SENSOR_IO_Read+0x38>)
 80090fc:	f7ff ff5c 	bl	8008fb8 <I2Cx_ReadMultiple>

  return read_value;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	200040b0 	.word	0x200040b0

08009110 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af02      	add	r7, sp, #8
 8009116:	603a      	str	r2, [r7, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	4603      	mov	r3, r0
 800911c:	71fb      	strb	r3, [r7, #7]
 800911e:	460b      	mov	r3, r1
 8009120:	71bb      	strb	r3, [r7, #6]
 8009122:	4613      	mov	r3, r2
 8009124:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009126:	79bb      	ldrb	r3, [r7, #6]
 8009128:	b29a      	uxth	r2, r3
 800912a:	79f9      	ldrb	r1, [r7, #7]
 800912c:	88bb      	ldrh	r3, [r7, #4]
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	2301      	movs	r3, #1
 8009136:	4804      	ldr	r0, [pc, #16]	; (8009148 <SENSOR_IO_ReadMultiple+0x38>)
 8009138:	f7ff ff3e 	bl	8008fb8 <I2Cx_ReadMultiple>
 800913c:	4603      	mov	r3, r0
 800913e:	b29b      	uxth	r3, r3
}
 8009140:	4618      	mov	r0, r3
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	200040b0 	.word	0x200040b0

0800914c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <BSP_HSENSOR_Init+0x38>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	20be      	movs	r0, #190	; 0xbe
 8009158:	4798      	blx	r3
 800915a:	4603      	mov	r3, r0
 800915c:	2bbc      	cmp	r3, #188	; 0xbc
 800915e:	d002      	beq.n	8009166 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e009      	b.n	800917a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8009166:	4b08      	ldr	r3, [pc, #32]	; (8009188 <BSP_HSENSOR_Init+0x3c>)
 8009168:	4a06      	ldr	r2, [pc, #24]	; (8009184 <BSP_HSENSOR_Init+0x38>)
 800916a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <BSP_HSENSOR_Init+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	20be      	movs	r0, #190	; 0xbe
 8009174:	4798      	blx	r3
    ret = HSENSOR_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800917a:	687b      	ldr	r3, [r7, #4]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000460 	.word	0x20000460
 8009188:	20000890 	.word	0x20000890

0800918c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <BSP_HSENSOR_ReadHumidity+0x18>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	20be      	movs	r0, #190	; 0xbe
 8009198:	4798      	blx	r3
 800919a:	eef0 7a40 	vmov.f32	s15, s0
}
 800919e:	eeb0 0a67 	vmov.f32	s0, s15
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20000890 	.word	0x20000890

080091a8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <BSP_PSENSOR_Init+0x38>)
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	20ba      	movs	r0, #186	; 0xba
 80091b4:	4798      	blx	r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	2bb1      	cmp	r3, #177	; 0xb1
 80091ba:	d002      	beq.n	80091c2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	607b      	str	r3, [r7, #4]
 80091c0:	e009      	b.n	80091d6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80091c2:	4b08      	ldr	r3, [pc, #32]	; (80091e4 <BSP_PSENSOR_Init+0x3c>)
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <BSP_PSENSOR_Init+0x38>)
 80091c6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80091c8:	4b06      	ldr	r3, [pc, #24]	; (80091e4 <BSP_PSENSOR_Init+0x3c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	20ba      	movs	r0, #186	; 0xba
 80091d0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80091d6:	687b      	ldr	r3, [r7, #4]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	2000047c 	.word	0x2000047c
 80091e4:	20000894 	.word	0x20000894

080091e8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80091ec:	4b04      	ldr	r3, [pc, #16]	; (8009200 <BSP_PSENSOR_ReadPressure+0x18>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	20ba      	movs	r0, #186	; 0xba
 80091f4:	4798      	blx	r3
 80091f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80091fa:	eeb0 0a67 	vmov.f32	s0, s15
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000894 	.word	0x20000894

08009204 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800920e:	4b09      	ldr	r3, [pc, #36]	; (8009234 <BSP_TSENSOR_Init+0x30>)
 8009210:	4a09      	ldr	r2, [pc, #36]	; (8009238 <BSP_TSENSOR_Init+0x34>)
 8009212:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8009214:	f7ff ff3a 	bl	800908c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8009218:	4b06      	ldr	r3, [pc, #24]	; (8009234 <BSP_TSENSOR_Init+0x30>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2100      	movs	r1, #0
 8009220:	20be      	movs	r0, #190	; 0xbe
 8009222:	4798      	blx	r3

  ret = TSENSOR_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8009228:	79fb      	ldrb	r3, [r7, #7]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000898 	.word	0x20000898
 8009238:	2000046c 	.word	0x2000046c

0800923c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8009240:	4b04      	ldr	r3, [pc, #16]	; (8009254 <BSP_TSENSOR_ReadTemp+0x18>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	20be      	movs	r0, #190	; 0xbe
 8009248:	4798      	blx	r3
 800924a:	eef0 7a40 	vmov.f32	s15, s0
}
 800924e:	eeb0 0a67 	vmov.f32	s0, s15
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000898 	.word	0x20000898

08009258 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2120      	movs	r1, #32
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff ff33 	bl	80090d4 <SENSOR_IO_Read>
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	f023 0304 	bic.w	r3, r3, #4
 8009278:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	f043 0304 	orr.w	r3, r3, #4
 8009280:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	f023 0303 	bic.w	r3, r3, #3
 8009288:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009298:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	7bfa      	ldrb	r2, [r7, #15]
 80092a0:	2120      	movs	r1, #32
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff fefc 	bl	80090a0 <SENSOR_IO_Write>
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80092be:	f7ff fee5 	bl	800908c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	210f      	movs	r1, #15
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff ff03 	bl	80090d4 <SENSOR_IO_Read>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	b2d8      	uxtb	r0, r3
 80092ea:	f107 020c 	add.w	r2, r7, #12
 80092ee:	2302      	movs	r3, #2
 80092f0:	21b0      	movs	r1, #176	; 0xb0
 80092f2:	f7ff ff0d 	bl	8009110 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80092f6:	7b3b      	ldrb	r3, [r7, #12]
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80092fe:	7b7b      	ldrb	r3, [r7, #13]
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	b2db      	uxtb	r3, r3
 8009304:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	b2d8      	uxtb	r0, r3
 800930a:	f107 020c 	add.w	r2, r7, #12
 800930e:	2302      	movs	r3, #2
 8009310:	21b6      	movs	r1, #182	; 0xb6
 8009312:	f7ff fefd 	bl	8009110 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009316:	7b7b      	ldrb	r3, [r7, #13]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	b21a      	sxth	r2, r3
 800931c:	7b3b      	ldrb	r3, [r7, #12]
 800931e:	b21b      	sxth	r3, r3
 8009320:	4313      	orrs	r3, r2
 8009322:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009324:	88fb      	ldrh	r3, [r7, #6]
 8009326:	b2d8      	uxtb	r0, r3
 8009328:	f107 020c 	add.w	r2, r7, #12
 800932c:	2302      	movs	r3, #2
 800932e:	21ba      	movs	r1, #186	; 0xba
 8009330:	f7ff feee 	bl	8009110 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009334:	7b7b      	ldrb	r3, [r7, #13]
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	b21a      	sxth	r2, r3
 800933a:	7b3b      	ldrb	r3, [r7, #12]
 800933c:	b21b      	sxth	r3, r3
 800933e:	4313      	orrs	r3, r2
 8009340:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	b2d8      	uxtb	r0, r3
 8009346:	f107 020c 	add.w	r2, r7, #12
 800934a:	2302      	movs	r3, #2
 800934c:	21a8      	movs	r1, #168	; 0xa8
 800934e:	f7ff fedf 	bl	8009110 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009352:	7b7b      	ldrb	r3, [r7, #13]
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	b21a      	sxth	r2, r3
 8009358:	7b3b      	ldrb	r3, [r7, #12]
 800935a:	b21b      	sxth	r3, r3
 800935c:	4313      	orrs	r3, r2
 800935e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8009360:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009364:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009372:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009376:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009384:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009388:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800938c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800939a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ae:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80093b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80093b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80093ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093be:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80093c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80093c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800940c <HTS221_H_ReadHumidity+0x130>
 80093ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d2:	dd01      	ble.n	80093d8 <HTS221_H_ReadHumidity+0xfc>
 80093d4:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <HTS221_H_ReadHumidity+0x134>)
 80093d6:	e00a      	b.n	80093ee <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80093d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80093dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e4:	d502      	bpl.n	80093ec <HTS221_H_ReadHumidity+0x110>
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	e000      	b.n	80093ee <HTS221_H_ReadHumidity+0x112>
 80093ec:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80093ee:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80093f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80093f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80093f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8009400:	eeb0 0a67 	vmov.f32	s0, s15
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	447a0000 	.word	0x447a0000
 8009410:	447a0000 	.word	0x447a0000

08009414 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2120      	movs	r1, #32
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff fe54 	bl	80090d4 <SENSOR_IO_Read>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	f023 0304 	bic.w	r3, r3, #4
 8009436:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	f043 0304 	orr.w	r3, r3, #4
 800943e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	f023 0303 	bic.w	r3, r3, #3
 8009446:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	f043 0301 	orr.w	r3, r3, #1
 800944e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009456:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009458:	88fb      	ldrh	r3, [r7, #6]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	7bfa      	ldrb	r2, [r7, #15]
 800945e:	2120      	movs	r1, #32
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff fe1d 	bl	80090a0 <SENSOR_IO_Write>
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b088      	sub	sp, #32
 8009472:	af00      	add	r7, sp, #0
 8009474:	4603      	mov	r3, r0
 8009476:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	b2d8      	uxtb	r0, r3
 800947c:	f107 0208 	add.w	r2, r7, #8
 8009480:	2302      	movs	r3, #2
 8009482:	21b2      	movs	r1, #178	; 0xb2
 8009484:	f7ff fe44 	bl	8009110 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8009488:	88fb      	ldrh	r3, [r7, #6]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2135      	movs	r1, #53	; 0x35
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fe20 	bl	80090d4 <SENSOR_IO_Read>
 8009494:	4603      	mov	r3, r0
 8009496:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8009498:	7ffb      	ldrb	r3, [r7, #31]
 800949a:	021b      	lsls	r3, r3, #8
 800949c:	b21b      	sxth	r3, r3
 800949e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a2:	b21a      	sxth	r2, r3
 80094a4:	7a3b      	ldrb	r3, [r7, #8]
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	4313      	orrs	r3, r2
 80094aa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80094ac:	7ffb      	ldrb	r3, [r7, #31]
 80094ae:	019b      	lsls	r3, r3, #6
 80094b0:	b21b      	sxth	r3, r3
 80094b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b6:	b21a      	sxth	r2, r3
 80094b8:	7a7b      	ldrb	r3, [r7, #9]
 80094ba:	b21b      	sxth	r3, r3
 80094bc:	4313      	orrs	r3, r2
 80094be:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80094c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80094c4:	10db      	asrs	r3, r3, #3
 80094c6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80094c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80094cc:	10db      	asrs	r3, r3, #3
 80094ce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80094d0:	88fb      	ldrh	r3, [r7, #6]
 80094d2:	b2d8      	uxtb	r0, r3
 80094d4:	f107 0208 	add.w	r2, r7, #8
 80094d8:	2304      	movs	r3, #4
 80094da:	21bc      	movs	r1, #188	; 0xbc
 80094dc:	f7ff fe18 	bl	8009110 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80094e0:	7a7b      	ldrb	r3, [r7, #9]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	b21a      	sxth	r2, r3
 80094e6:	7a3b      	ldrb	r3, [r7, #8]
 80094e8:	b21b      	sxth	r3, r3
 80094ea:	4313      	orrs	r3, r2
 80094ec:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	b21a      	sxth	r2, r3
 80094f4:	7abb      	ldrb	r3, [r7, #10]
 80094f6:	b21b      	sxth	r3, r3
 80094f8:	4313      	orrs	r3, r2
 80094fa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	b2d8      	uxtb	r0, r3
 8009500:	f107 0208 	add.w	r2, r7, #8
 8009504:	2302      	movs	r3, #2
 8009506:	21aa      	movs	r1, #170	; 0xaa
 8009508:	f7ff fe02 	bl	8009110 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800950c:	7a7b      	ldrb	r3, [r7, #9]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	b21a      	sxth	r2, r3
 8009512:	7a3b      	ldrb	r3, [r7, #8]
 8009514:	b21b      	sxth	r3, r3
 8009516:	4313      	orrs	r3, r2
 8009518:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800951a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800951e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800952c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009530:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800953e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009542:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009558:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800955c:	ee07 3a90 	vmov	s15, r3
 8009560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009568:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	ee07 3a90 	vmov	s15, r3
}
 8009572:	eeb0 0a67 	vmov.f32	s0, s15
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f87b 	bl	8009684 <LPS22HB_Init>
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	4603      	mov	r3, r0
 800959e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80095a4:	f7ff fd72 	bl	800908c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	210f      	movs	r1, #15
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff fd90 	bl	80090d4 <SENSOR_IO_Read>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80095d2:	2300      	movs	r3, #0
 80095d4:	74fb      	strb	r3, [r7, #19]
 80095d6:	e013      	b.n	8009600 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	7cfb      	ldrb	r3, [r7, #19]
 80095de:	3328      	adds	r3, #40	; 0x28
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	7cfc      	ldrb	r4, [r7, #19]
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7ff fd74 	bl	80090d4 <SENSOR_IO_Read>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	f107 0318 	add.w	r3, r7, #24
 80095f4:	4423      	add	r3, r4
 80095f6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80095fa:	7cfb      	ldrb	r3, [r7, #19]
 80095fc:	3301      	adds	r3, #1
 80095fe:	74fb      	strb	r3, [r7, #19]
 8009600:	7cfb      	ldrb	r3, [r7, #19]
 8009602:	2b02      	cmp	r3, #2
 8009604:	d9e8      	bls.n	80095d8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8009606:	2300      	movs	r3, #0
 8009608:	74fb      	strb	r3, [r7, #19]
 800960a:	e010      	b.n	800962e <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800960c:	7cfb      	ldrb	r3, [r7, #19]
 800960e:	f107 0218 	add.w	r2, r7, #24
 8009612:	4413      	add	r3, r2
 8009614:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009618:	461a      	mov	r2, r3
 800961a:	7cfb      	ldrb	r3, [r7, #19]
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	fa02 f303 	lsl.w	r3, r2, r3
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8009628:	7cfb      	ldrb	r3, [r7, #19]
 800962a:	3301      	adds	r3, #1
 800962c:	74fb      	strb	r3, [r7, #19]
 800962e:	7cfb      	ldrb	r3, [r7, #19]
 8009630:	2b02      	cmp	r3, #2
 8009632:	d9eb      	bls.n	800960c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009644:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2264      	movs	r2, #100	; 0x64
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	da01      	bge.n	800965a <LPS22HB_P_ReadPressure+0x96>
 8009656:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800965a:	131b      	asrs	r3, r3, #12
 800965c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009668:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009680 <LPS22HB_P_ReadPressure+0xbc>
 800966c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009670:	eef0 7a66 	vmov.f32	s15, s13
}
 8009674:	eeb0 0a67 	vmov.f32	s0, s15
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
 800967e:	bf00      	nop
 8009680:	42c80000 	.word	0x42c80000

08009684 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	211a      	movs	r1, #26
 8009694:	4618      	mov	r0, r3
 8009696:	f7ff fd1d 	bl	80090d4 <SENSOR_IO_Read>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	f023 0301 	bic.w	r3, r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	f043 0301 	orr.w	r3, r3, #1
 80096ac:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80096ae:	88fb      	ldrh	r3, [r7, #6]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	7bfa      	ldrb	r2, [r7, #15]
 80096b4:	211a      	movs	r1, #26
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fcf2 	bl	80090a0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80096bc:	88fb      	ldrh	r3, [r7, #6]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2110      	movs	r1, #16
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fd06 	bl	80090d4 <SENSOR_IO_Read>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80096da:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	f023 0302 	bic.w	r3, r3, #2
 80096e2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	f043 0302 	orr.w	r3, r3, #2
 80096ea:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	7bfa      	ldrb	r2, [r7, #15]
 80096f2:	2110      	movs	r1, #16
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff fcd3 	bl	80090a0 <SENSOR_IO_Write>
}  
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800970c:	2003      	movs	r0, #3
 800970e:	f000 f95f 	bl	80099d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009712:	2000      	movs	r0, #0
 8009714:	f000 f80e 	bl	8009734 <HAL_InitTick>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	71fb      	strb	r3, [r7, #7]
 8009722:	e001      	b.n	8009728 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009724:	f7f9 fcd4 	bl	80030d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009728:	79fb      	ldrb	r3, [r7, #7]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009740:	4b17      	ldr	r3, [pc, #92]	; (80097a0 <HAL_InitTick+0x6c>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d023      	beq.n	8009790 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <HAL_InitTick+0x70>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	4b14      	ldr	r3, [pc, #80]	; (80097a0 <HAL_InitTick+0x6c>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	4619      	mov	r1, r3
 8009752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009756:	fbb3 f3f1 	udiv	r3, r3, r1
 800975a:	fbb2 f3f3 	udiv	r3, r2, r3
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f96b 	bl	8009a3a <HAL_SYSTICK_Config>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10f      	bne.n	800978a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b0f      	cmp	r3, #15
 800976e:	d809      	bhi.n	8009784 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009770:	2200      	movs	r2, #0
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	f04f 30ff 	mov.w	r0, #4294967295
 8009778:	f000 f935 	bl	80099e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800977c:	4a0a      	ldr	r2, [pc, #40]	; (80097a8 <HAL_InitTick+0x74>)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	e007      	b.n	8009794 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
 8009788:	e004      	b.n	8009794 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	73fb      	strb	r3, [r7, #15]
 800978e:	e001      	b.n	8009794 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000048c 	.word	0x2000048c
 80097a4:	2000018c 	.word	0x2000018c
 80097a8:	20000488 	.word	0x20000488

080097ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <HAL_IncTick+0x20>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <HAL_IncTick+0x24>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4413      	add	r3, r2
 80097bc:	4a04      	ldr	r2, [pc, #16]	; (80097d0 <HAL_IncTick+0x24>)
 80097be:	6013      	str	r3, [r2, #0]
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	2000048c 	.word	0x2000048c
 80097d0:	200040fc 	.word	0x200040fc

080097d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  return uwTick;
 80097d8:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <HAL_GetTick+0x14>)
 80097da:	681b      	ldr	r3, [r3, #0]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	200040fc 	.word	0x200040fc

080097ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097f4:	f7ff ffee 	bl	80097d4 <HAL_GetTick>
 80097f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d005      	beq.n	8009812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009806:	4b09      	ldr	r3, [pc, #36]	; (800982c <HAL_Delay+0x40>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009812:	bf00      	nop
 8009814:	f7ff ffde 	bl	80097d4 <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	429a      	cmp	r2, r3
 8009822:	d8f7      	bhi.n	8009814 <HAL_Delay+0x28>
  {
  }
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	2000048c 	.word	0x2000048c

08009830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <__NVIC_SetPriorityGrouping+0x44>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800984c:	4013      	ands	r3, r2
 800984e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800985c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <__NVIC_SetPriorityGrouping+0x44>)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	60d3      	str	r3, [r2, #12]
}
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <__NVIC_GetPriorityGrouping+0x18>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	0a1b      	lsrs	r3, r3, #8
 8009882:	f003 0307 	and.w	r3, r3, #7
}
 8009886:	4618      	mov	r0, r3
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800989e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	db0b      	blt.n	80098be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 021f 	and.w	r2, r3, #31
 80098ac:	4907      	ldr	r1, [pc, #28]	; (80098cc <__NVIC_EnableIRQ+0x38>)
 80098ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	2001      	movs	r0, #1
 80098b6:	fa00 f202 	lsl.w	r2, r0, r2
 80098ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	e000e100 	.word	0xe000e100

080098d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	db0a      	blt.n	80098fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	490c      	ldr	r1, [pc, #48]	; (800991c <__NVIC_SetPriority+0x4c>)
 80098ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ee:	0112      	lsls	r2, r2, #4
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	440b      	add	r3, r1
 80098f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098f8:	e00a      	b.n	8009910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	4908      	ldr	r1, [pc, #32]	; (8009920 <__NVIC_SetPriority+0x50>)
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	f003 030f 	and.w	r3, r3, #15
 8009906:	3b04      	subs	r3, #4
 8009908:	0112      	lsls	r2, r2, #4
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	440b      	add	r3, r1
 800990e:	761a      	strb	r2, [r3, #24]
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	e000e100 	.word	0xe000e100
 8009920:	e000ed00 	.word	0xe000ed00

08009924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009924:	b480      	push	{r7}
 8009926:	b089      	sub	sp, #36	; 0x24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	2b04      	cmp	r3, #4
 8009940:	bf28      	it	cs
 8009942:	2304      	movcs	r3, #4
 8009944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	3304      	adds	r3, #4
 800994a:	2b06      	cmp	r3, #6
 800994c:	d902      	bls.n	8009954 <NVIC_EncodePriority+0x30>
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	3b03      	subs	r3, #3
 8009952:	e000      	b.n	8009956 <NVIC_EncodePriority+0x32>
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	43da      	mvns	r2, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	401a      	ands	r2, r3
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800996c:	f04f 31ff 	mov.w	r1, #4294967295
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	fa01 f303 	lsl.w	r3, r1, r3
 8009976:	43d9      	mvns	r1, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800997c:	4313      	orrs	r3, r2
         );
}
 800997e:	4618      	mov	r0, r3
 8009980:	3724      	adds	r7, #36	; 0x24
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3b01      	subs	r3, #1
 8009998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800999c:	d301      	bcc.n	80099a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800999e:	2301      	movs	r3, #1
 80099a0:	e00f      	b.n	80099c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099a2:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <SysTick_Config+0x40>)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099aa:	210f      	movs	r1, #15
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	f7ff ff8e 	bl	80098d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <SysTick_Config+0x40>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <SysTick_Config+0x40>)
 80099bc:	2207      	movs	r2, #7
 80099be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	e000e010 	.word	0xe000e010

080099d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff ff29 	bl	8009830 <__NVIC_SetPriorityGrouping>
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	4603      	mov	r3, r0
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	607a      	str	r2, [r7, #4]
 80099f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80099f8:	f7ff ff3e 	bl	8009878 <__NVIC_GetPriorityGrouping>
 80099fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	6978      	ldr	r0, [r7, #20]
 8009a04:	f7ff ff8e 	bl	8009924 <NVIC_EncodePriority>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff ff5d 	bl	80098d0 <__NVIC_SetPriority>
}
 8009a16:	bf00      	nop
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	4603      	mov	r3, r0
 8009a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff ff31 	bl	8009894 <__NVIC_EnableIRQ>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff ffa2 	bl	800998c <SysTick_Config>
 8009a48:	4603      	mov	r3, r0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e0ac      	b.n	8009bc0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f8b2 	bl	8009bd4 <DFSDM_GetChannelFromInstance>
 8009a70:	4602      	mov	r2, r0
 8009a72:	4b55      	ldr	r3, [pc, #340]	; (8009bc8 <HAL_DFSDM_ChannelInit+0x174>)
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e09f      	b.n	8009bc0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7f9 fb49 	bl	8003118 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8009a86:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_DFSDM_ChannelInit+0x178>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	4a4f      	ldr	r2, [pc, #316]	; (8009bcc <HAL_DFSDM_ChannelInit+0x178>)
 8009a8e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8009a90:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <HAL_DFSDM_ChannelInit+0x178>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d125      	bne.n	8009ae4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8009a98:	4b4d      	ldr	r3, [pc, #308]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a4c      	ldr	r2, [pc, #304]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009a9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009aa2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009aa4:	4b4a      	ldr	r3, [pc, #296]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	4948      	ldr	r1, [pc, #288]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009ab2:	4b47      	ldr	r3, [pc, #284]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a46      	ldr	r2, [pc, #280]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009ab8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8009abc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	791b      	ldrb	r3, [r3, #4]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d108      	bne.n	8009ad8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8009ac6:	4b42      	ldr	r3, [pc, #264]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	041b      	lsls	r3, r3, #16
 8009ad2:	493f      	ldr	r1, [pc, #252]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8009ad8:	4b3d      	ldr	r3, [pc, #244]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a3c      	ldr	r2, [pc, #240]	; (8009bd0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ae2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8009af2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6819      	ldr	r1, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009b02:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8009b08:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 020f 	bic.w	r2, r2, #15
 8009b20:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6819      	ldr	r1, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8009b48:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6899      	ldr	r1, [r3, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f002 0207 	and.w	r2, r2, #7
 8009b74:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6859      	ldr	r1, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b86:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ba0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f810 	bl	8009bd4 <DFSDM_GetChannelFromInstance>
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <HAL_DFSDM_ChannelInit+0x174>)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200008a0 	.word	0x200008a0
 8009bcc:	2000089c 	.word	0x2000089c
 8009bd0:	40016000 	.word	0x40016000

08009bd4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a1c      	ldr	r2, [pc, #112]	; (8009c50 <DFSDM_GetChannelFromInstance+0x7c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d102      	bne.n	8009bea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	e02b      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a19      	ldr	r2, [pc, #100]	; (8009c54 <DFSDM_GetChannelFromInstance+0x80>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d102      	bne.n	8009bf8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e024      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a17      	ldr	r2, [pc, #92]	; (8009c58 <DFSDM_GetChannelFromInstance+0x84>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d102      	bne.n	8009c06 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8009c00:	2302      	movs	r3, #2
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e01d      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a14      	ldr	r2, [pc, #80]	; (8009c5c <DFSDM_GetChannelFromInstance+0x88>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d102      	bne.n	8009c14 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8009c0e:	2304      	movs	r3, #4
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	e016      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a12      	ldr	r2, [pc, #72]	; (8009c60 <DFSDM_GetChannelFromInstance+0x8c>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d102      	bne.n	8009c22 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8009c1c:	2305      	movs	r3, #5
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e00f      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a0f      	ldr	r2, [pc, #60]	; (8009c64 <DFSDM_GetChannelFromInstance+0x90>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d102      	bne.n	8009c30 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8009c2a:	2306      	movs	r3, #6
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	e008      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <DFSDM_GetChannelFromInstance+0x94>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d102      	bne.n	8009c3e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8009c38:	2307      	movs	r3, #7
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	e001      	b.n	8009c42 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8009c42:	68fb      	ldr	r3, [r7, #12]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	40016000 	.word	0x40016000
 8009c54:	40016020 	.word	0x40016020
 8009c58:	40016040 	.word	0x40016040
 8009c5c:	40016080 	.word	0x40016080
 8009c60:	400160a0 	.word	0x400160a0
 8009c64:	400160c0 	.word	0x400160c0
 8009c68:	400160e0 	.word	0x400160e0

08009c6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d005      	beq.n	8009c90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	73fb      	strb	r3, [r7, #15]
 8009c8e:	e029      	b.n	8009ce4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 020e 	bic.w	r2, r2, #14
 8009c9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb4:	f003 021c 	and.w	r2, r3, #28
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8009cc2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
    }
  }
  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009cfe:	e17f      	b.n	800a000 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	2101      	movs	r1, #1
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	fa01 f303 	lsl.w	r3, r1, r3
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 8171 	beq.w	8009ffa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d00b      	beq.n	8009d38 <HAL_GPIO_Init+0x48>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d007      	beq.n	8009d38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009d2c:	2b11      	cmp	r3, #17
 8009d2e:	d003      	beq.n	8009d38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2b12      	cmp	r3, #18
 8009d36:	d130      	bne.n	8009d9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	2203      	movs	r2, #3
 8009d44:	fa02 f303 	lsl.w	r3, r2, r3
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d6e:	2201      	movs	r2, #1
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
 8009d76:	43db      	mvns	r3, r3
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	091b      	lsrs	r3, r3, #4
 8009d84:	f003 0201 	and.w	r2, r3, #1
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f003 0303 	and.w	r3, r3, #3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d118      	bne.n	8009dd8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009dac:	2201      	movs	r2, #1
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	43db      	mvns	r3, r3
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4013      	ands	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	08db      	lsrs	r3, r3, #3
 8009dc2:	f003 0201 	and.w	r2, r3, #1
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	2203      	movs	r2, #3
 8009de4:	fa02 f303 	lsl.w	r3, r2, r3
 8009de8:	43db      	mvns	r3, r3
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	4013      	ands	r3, r2
 8009dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d003      	beq.n	8009e18 <HAL_GPIO_Init+0x128>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	2b12      	cmp	r3, #18
 8009e16:	d123      	bne.n	8009e60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	08da      	lsrs	r2, r3, #3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3208      	adds	r2, #8
 8009e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	220f      	movs	r2, #15
 8009e30:	fa02 f303 	lsl.w	r3, r2, r3
 8009e34:	43db      	mvns	r3, r3
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4013      	ands	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	691a      	ldr	r2, [r3, #16]
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	08da      	lsrs	r2, r3, #3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3208      	adds	r2, #8
 8009e5a:	6939      	ldr	r1, [r7, #16]
 8009e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e70:	43db      	mvns	r3, r3
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	4013      	ands	r3, r2
 8009e76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f003 0203 	and.w	r2, r3, #3
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	fa02 f303 	lsl.w	r3, r2, r3
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80ac 	beq.w	8009ffa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ea2:	4b5e      	ldr	r3, [pc, #376]	; (800a01c <HAL_GPIO_Init+0x32c>)
 8009ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea6:	4a5d      	ldr	r2, [pc, #372]	; (800a01c <HAL_GPIO_Init+0x32c>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	6613      	str	r3, [r2, #96]	; 0x60
 8009eae:	4b5b      	ldr	r3, [pc, #364]	; (800a01c <HAL_GPIO_Init+0x32c>)
 8009eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	60bb      	str	r3, [r7, #8]
 8009eb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009eba:	4a59      	ldr	r2, [pc, #356]	; (800a020 <HAL_GPIO_Init+0x330>)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	220f      	movs	r2, #15
 8009ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed6:	43db      	mvns	r3, r3
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4013      	ands	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ee4:	d025      	beq.n	8009f32 <HAL_GPIO_Init+0x242>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a4e      	ldr	r2, [pc, #312]	; (800a024 <HAL_GPIO_Init+0x334>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01f      	beq.n	8009f2e <HAL_GPIO_Init+0x23e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a4d      	ldr	r2, [pc, #308]	; (800a028 <HAL_GPIO_Init+0x338>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d019      	beq.n	8009f2a <HAL_GPIO_Init+0x23a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a4c      	ldr	r2, [pc, #304]	; (800a02c <HAL_GPIO_Init+0x33c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <HAL_GPIO_Init+0x236>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a4b      	ldr	r2, [pc, #300]	; (800a030 <HAL_GPIO_Init+0x340>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00d      	beq.n	8009f22 <HAL_GPIO_Init+0x232>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a4a      	ldr	r2, [pc, #296]	; (800a034 <HAL_GPIO_Init+0x344>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d007      	beq.n	8009f1e <HAL_GPIO_Init+0x22e>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a49      	ldr	r2, [pc, #292]	; (800a038 <HAL_GPIO_Init+0x348>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d101      	bne.n	8009f1a <HAL_GPIO_Init+0x22a>
 8009f16:	2306      	movs	r3, #6
 8009f18:	e00c      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f1a:	2307      	movs	r3, #7
 8009f1c:	e00a      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f1e:	2305      	movs	r3, #5
 8009f20:	e008      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f22:	2304      	movs	r3, #4
 8009f24:	e006      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f26:	2303      	movs	r3, #3
 8009f28:	e004      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e002      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <HAL_GPIO_Init+0x244>
 8009f32:	2300      	movs	r3, #0
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	f002 0203 	and.w	r2, r2, #3
 8009f3a:	0092      	lsls	r2, r2, #2
 8009f3c:	4093      	lsls	r3, r2
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009f44:	4936      	ldr	r1, [pc, #216]	; (800a020 <HAL_GPIO_Init+0x330>)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	089b      	lsrs	r3, r3, #2
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009f52:	4b3a      	ldr	r3, [pc, #232]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	43db      	mvns	r3, r3
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009f76:	4a31      	ldr	r2, [pc, #196]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009f7c:	4b2f      	ldr	r3, [pc, #188]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	43db      	mvns	r3, r3
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4013      	ands	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009fa0:	4a26      	ldr	r2, [pc, #152]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009fa6:	4b25      	ldr	r3, [pc, #148]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	43db      	mvns	r3, r3
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009fca:	4a1c      	ldr	r2, [pc, #112]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009fd0:	4b1a      	ldr	r3, [pc, #104]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009ff4:	4a11      	ldr	r2, [pc, #68]	; (800a03c <HAL_GPIO_Init+0x34c>)
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	fa22 f303 	lsr.w	r3, r2, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f47f ae78 	bne.w	8009d00 <HAL_GPIO_Init+0x10>
  }
}
 800a010:	bf00      	nop
 800a012:	371c      	adds	r7, #28
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	40021000 	.word	0x40021000
 800a020:	40010000 	.word	0x40010000
 800a024:	48000400 	.word	0x48000400
 800a028:	48000800 	.word	0x48000800
 800a02c:	48000c00 	.word	0x48000c00
 800a030:	48001000 	.word	0x48001000
 800a034:	48001400 	.word	0x48001400
 800a038:	48001800 	.word	0x48001800
 800a03c:	40010400 	.word	0x40010400

0800a040 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a04e:	e0cd      	b.n	800a1ec <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a050:	2201      	movs	r2, #1
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	fa02 f303 	lsl.w	r3, r2, r3
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	4013      	ands	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 80c0 	beq.w	800a1e6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a066:	4a68      	ldr	r2, [pc, #416]	; (800a208 <HAL_GPIO_DeInit+0x1c8>)
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	089b      	lsrs	r3, r3, #2
 800a06c:	3302      	adds	r3, #2
 800a06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a072:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	220f      	movs	r2, #15
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4013      	ands	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a08e:	d025      	beq.n	800a0dc <HAL_GPIO_DeInit+0x9c>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a5e      	ldr	r2, [pc, #376]	; (800a20c <HAL_GPIO_DeInit+0x1cc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d01f      	beq.n	800a0d8 <HAL_GPIO_DeInit+0x98>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a5d      	ldr	r2, [pc, #372]	; (800a210 <HAL_GPIO_DeInit+0x1d0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d019      	beq.n	800a0d4 <HAL_GPIO_DeInit+0x94>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a5c      	ldr	r2, [pc, #368]	; (800a214 <HAL_GPIO_DeInit+0x1d4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d013      	beq.n	800a0d0 <HAL_GPIO_DeInit+0x90>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a5b      	ldr	r2, [pc, #364]	; (800a218 <HAL_GPIO_DeInit+0x1d8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00d      	beq.n	800a0cc <HAL_GPIO_DeInit+0x8c>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a5a      	ldr	r2, [pc, #360]	; (800a21c <HAL_GPIO_DeInit+0x1dc>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d007      	beq.n	800a0c8 <HAL_GPIO_DeInit+0x88>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a59      	ldr	r2, [pc, #356]	; (800a220 <HAL_GPIO_DeInit+0x1e0>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d101      	bne.n	800a0c4 <HAL_GPIO_DeInit+0x84>
 800a0c0:	2306      	movs	r3, #6
 800a0c2:	e00c      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0c4:	2307      	movs	r3, #7
 800a0c6:	e00a      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0c8:	2305      	movs	r3, #5
 800a0ca:	e008      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	e006      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e004      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e002      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <HAL_GPIO_DeInit+0x9e>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	f002 0203 	and.w	r2, r2, #3
 800a0e4:	0092      	lsls	r2, r2, #2
 800a0e6:	4093      	lsls	r3, r2
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d132      	bne.n	800a154 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a0ee:	4b4d      	ldr	r3, [pc, #308]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	494b      	ldr	r1, [pc, #300]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a0fc:	4b49      	ldr	r3, [pc, #292]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	43db      	mvns	r3, r3
 800a104:	4947      	ldr	r1, [pc, #284]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a106:	4013      	ands	r3, r2
 800a108:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a10a:	4b46      	ldr	r3, [pc, #280]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	43db      	mvns	r3, r3
 800a112:	4944      	ldr	r1, [pc, #272]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a114:	4013      	ands	r3, r2
 800a116:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a118:	4b42      	ldr	r3, [pc, #264]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a11a:	68da      	ldr	r2, [r3, #12]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	43db      	mvns	r3, r3
 800a120:	4940      	ldr	r1, [pc, #256]	; (800a224 <HAL_GPIO_DeInit+0x1e4>)
 800a122:	4013      	ands	r3, r2
 800a124:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	220f      	movs	r2, #15
 800a130:	fa02 f303 	lsl.w	r3, r2, r3
 800a134:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a136:	4a34      	ldr	r2, [pc, #208]	; (800a208 <HAL_GPIO_DeInit+0x1c8>)
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	089b      	lsrs	r3, r3, #2
 800a13c:	3302      	adds	r3, #2
 800a13e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	43da      	mvns	r2, r3
 800a146:	4830      	ldr	r0, [pc, #192]	; (800a208 <HAL_GPIO_DeInit+0x1c8>)
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	089b      	lsrs	r3, r3, #2
 800a14c:	400a      	ands	r2, r1
 800a14e:	3302      	adds	r3, #2
 800a150:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	2103      	movs	r1, #3
 800a15e:	fa01 f303 	lsl.w	r3, r1, r3
 800a162:	431a      	orrs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	08da      	lsrs	r2, r3, #3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3208      	adds	r2, #8
 800a170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	220f      	movs	r2, #15
 800a17e:	fa02 f303 	lsl.w	r3, r2, r3
 800a182:	43db      	mvns	r3, r3
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	08d2      	lsrs	r2, r2, #3
 800a188:	4019      	ands	r1, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3208      	adds	r2, #8
 800a18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	2103      	movs	r1, #3
 800a19c:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a0:	43db      	mvns	r3, r3
 800a1a2:	401a      	ands	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b4:	43db      	mvns	r3, r3
 800a1b6:	401a      	ands	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	2103      	movs	r1, #3
 800a1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ca:	43db      	mvns	r3, r3
 800a1cc:	401a      	ands	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	fa01 f303 	lsl.w	r3, r1, r3
 800a1de:	43db      	mvns	r3, r3
 800a1e0:	401a      	ands	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f47f af2b 	bne.w	800a050 <HAL_GPIO_DeInit+0x10>
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	371c      	adds	r7, #28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	40010000 	.word	0x40010000
 800a20c:	48000400 	.word	0x48000400
 800a210:	48000800 	.word	0x48000800
 800a214:	48000c00 	.word	0x48000c00
 800a218:	48001000 	.word	0x48001000
 800a21c:	48001400 	.word	0x48001400
 800a220:	48001800 	.word	0x48001800
 800a224:	40010400 	.word	0x40010400

0800a228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	887b      	ldrh	r3, [r7, #2]
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a240:	2301      	movs	r3, #1
 800a242:	73fb      	strb	r3, [r7, #15]
 800a244:	e001      	b.n	800a24a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
 800a264:	4613      	mov	r3, r2
 800a266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a268:	787b      	ldrb	r3, [r7, #1]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a26e:	887a      	ldrh	r2, [r7, #2]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a274:	e002      	b.n	800a27c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a276:	887a      	ldrh	r2, [r7, #2]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a29a:	887a      	ldrh	r2, [r7, #2]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4013      	ands	r3, r2
 800a2a0:	041a      	lsls	r2, r3, #16
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	43d9      	mvns	r1, r3
 800a2a6:	887b      	ldrh	r3, [r7, #2]
 800a2a8:	400b      	ands	r3, r1
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	619a      	str	r2, [r3, #24]
}
 800a2b0:	bf00      	nop
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a2c6:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2c8:	695a      	ldr	r2, [r3, #20]
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d006      	beq.n	800a2e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2d2:	4a05      	ldr	r2, [pc, #20]	; (800a2e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2d4:	88fb      	ldrh	r3, [r7, #6]
 800a2d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f8 fedd 	bl	800309a <HAL_GPIO_EXTI_Callback>
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40010400 	.word	0x40010400

0800a2ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e081      	b.n	800a402 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7f8 ff44 	bl	80031a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2224      	movs	r2, #36	; 0x24
 800a31c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0201 	bic.w	r2, r2, #1
 800a32e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a33c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a34c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d107      	bne.n	800a366 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a362:	609a      	str	r2, [r3, #8]
 800a364:	e006      	b.n	800a374 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689a      	ldr	r2, [r3, #8]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a372:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d104      	bne.n	800a386 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a384:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a398:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	ea42 0103 	orr.w	r1, r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	021a      	lsls	r2, r3, #8
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	69d9      	ldr	r1, [r3, #28]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1a      	ldr	r2, [r3, #32]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0201 	orr.w	r2, r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e021      	b.n	800a460 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2224      	movs	r2, #36	; 0x24
 800a420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 0201 	bic.w	r2, r2, #1
 800a432:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7f8 fef7 	bl	8003228 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af02      	add	r7, sp, #8
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	607a      	str	r2, [r7, #4]
 800a472:	461a      	mov	r2, r3
 800a474:	460b      	mov	r3, r1
 800a476:	817b      	strh	r3, [r7, #10]
 800a478:	4613      	mov	r3, r2
 800a47a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b20      	cmp	r3, #32
 800a486:	f040 80da 	bne.w	800a63e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_I2C_Master_Transmit+0x30>
 800a494:	2302      	movs	r3, #2
 800a496:	e0d3      	b.n	800a640 <HAL_I2C_Master_Transmit+0x1d8>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4a0:	f7ff f998 	bl	80097d4 <HAL_GetTick>
 800a4a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	2319      	movs	r3, #25
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 fcbc 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e0be      	b.n	800a640 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2221      	movs	r2, #33	; 0x21
 800a4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2210      	movs	r2, #16
 800a4ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	893a      	ldrh	r2, [r7, #8]
 800a4e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	2bff      	cmp	r3, #255	; 0xff
 800a4f2:	d90e      	bls.n	800a512 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	22ff      	movs	r2, #255	; 0xff
 800a4f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	8979      	ldrh	r1, [r7, #10]
 800a502:	4b51      	ldr	r3, [pc, #324]	; (800a648 <HAL_I2C_Master_Transmit+0x1e0>)
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 fe1e 	bl	800b14c <I2C_TransferConfig>
 800a510:	e06c      	b.n	800a5ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a516:	b29a      	uxth	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a520:	b2da      	uxtb	r2, r3
 800a522:	8979      	ldrh	r1, [r7, #10]
 800a524:	4b48      	ldr	r3, [pc, #288]	; (800a648 <HAL_I2C_Master_Transmit+0x1e0>)
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 fe0d 	bl	800b14c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a532:	e05b      	b.n	800a5ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	6a39      	ldr	r1, [r7, #32]
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 fcb9 	bl	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e07b      	b.n	800a640 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d034      	beq.n	800a5ec <HAL_I2C_Master_Transmit+0x184>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a586:	2b00      	cmp	r3, #0
 800a588:	d130      	bne.n	800a5ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	2200      	movs	r2, #0
 800a592:	2180      	movs	r1, #128	; 0x80
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 fc4b 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e04d      	b.n	800a640 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2bff      	cmp	r3, #255	; 0xff
 800a5ac:	d90e      	bls.n	800a5cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	22ff      	movs	r2, #255	; 0xff
 800a5b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	8979      	ldrh	r1, [r7, #10]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fdc1 	bl	800b14c <I2C_TransferConfig>
 800a5ca:	e00f      	b.n	800a5ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	8979      	ldrh	r1, [r7, #10]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fdb0 	bl	800b14c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d19e      	bne.n	800a534 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	6a39      	ldr	r1, [r7, #32]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 fc98 	bl	800af30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e01a      	b.n	800a640 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2220      	movs	r2, #32
 800a610:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6859      	ldr	r1, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <HAL_I2C_Master_Transmit+0x1e4>)
 800a61e:	400b      	ands	r3, r1
 800a620:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	e000      	b.n	800a640 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a63e:	2302      	movs	r3, #2
  }
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	80002000 	.word	0x80002000
 800a64c:	fe00e800 	.word	0xfe00e800

0800a650 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af02      	add	r7, sp, #8
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	607a      	str	r2, [r7, #4]
 800a65a:	461a      	mov	r2, r3
 800a65c:	460b      	mov	r3, r1
 800a65e:	817b      	strh	r3, [r7, #10]
 800a660:	4613      	mov	r3, r2
 800a662:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	f040 80db 	bne.w	800a828 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_I2C_Master_Receive+0x30>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e0d4      	b.n	800a82a <HAL_I2C_Master_Receive+0x1da>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a688:	f7ff f8a4 	bl	80097d4 <HAL_GetTick>
 800a68c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	2319      	movs	r3, #25
 800a694:	2201      	movs	r2, #1
 800a696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fbc8 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e0bf      	b.n	800a82a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2222      	movs	r2, #34	; 0x22
 800a6ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2210      	movs	r2, #16
 800a6b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	893a      	ldrh	r2, [r7, #8]
 800a6ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2bff      	cmp	r3, #255	; 0xff
 800a6da:	d90e      	bls.n	800a6fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	22ff      	movs	r2, #255	; 0xff
 800a6e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	8979      	ldrh	r1, [r7, #10]
 800a6ea:	4b52      	ldr	r3, [pc, #328]	; (800a834 <HAL_I2C_Master_Receive+0x1e4>)
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fd2a 	bl	800b14c <I2C_TransferConfig>
 800a6f8:	e06d      	b.n	800a7d6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	8979      	ldrh	r1, [r7, #10]
 800a70c:	4b49      	ldr	r3, [pc, #292]	; (800a834 <HAL_I2C_Master_Receive+0x1e4>)
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 fd19 	bl	800b14c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a71a:	e05c      	b.n	800a7d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	6a39      	ldr	r1, [r7, #32]
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 fc41 	bl	800afa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e07c      	b.n	800a82a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	b2d2      	uxtb	r2, r2
 800a73c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a766:	b29b      	uxth	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d034      	beq.n	800a7d6 <HAL_I2C_Master_Receive+0x186>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a770:	2b00      	cmp	r3, #0
 800a772:	d130      	bne.n	800a7d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	2200      	movs	r2, #0
 800a77c:	2180      	movs	r1, #128	; 0x80
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fb56 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e04d      	b.n	800a82a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a792:	b29b      	uxth	r3, r3
 800a794:	2bff      	cmp	r3, #255	; 0xff
 800a796:	d90e      	bls.n	800a7b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	22ff      	movs	r2, #255	; 0xff
 800a79c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	8979      	ldrh	r1, [r7, #10]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fccc 	bl	800b14c <I2C_TransferConfig>
 800a7b4:	e00f      	b.n	800a7d6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	8979      	ldrh	r1, [r7, #10]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 fcbb 	bl	800b14c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d19d      	bne.n	800a71c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	6a39      	ldr	r1, [r7, #32]
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fba3 	bl	800af30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e01a      	b.n	800a82a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6859      	ldr	r1, [r3, #4]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <HAL_I2C_Master_Receive+0x1e8>)
 800a808:	400b      	ands	r3, r1
 800a80a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2220      	movs	r2, #32
 800a810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	e000      	b.n	800a82a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a828:	2302      	movs	r3, #2
  }
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	80002400 	.word	0x80002400
 800a838:	fe00e800 	.word	0xfe00e800

0800a83c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af02      	add	r7, sp, #8
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	4608      	mov	r0, r1
 800a846:	4611      	mov	r1, r2
 800a848:	461a      	mov	r2, r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	817b      	strh	r3, [r7, #10]
 800a84e:	460b      	mov	r3, r1
 800a850:	813b      	strh	r3, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b20      	cmp	r3, #32
 800a860:	f040 80f9 	bne.w	800aa56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_I2C_Mem_Write+0x34>
 800a86a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d105      	bne.n	800a87c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a876:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e0ed      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <HAL_I2C_Mem_Write+0x4e>
 800a886:	2302      	movs	r3, #2
 800a888:	e0e6      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a892:	f7fe ff9f 	bl	80097d4 <HAL_GetTick>
 800a896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	2319      	movs	r3, #25
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fac3 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e0d1      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2221      	movs	r2, #33	; 0x21
 800a8b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2240      	movs	r2, #64	; 0x40
 800a8c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a3a      	ldr	r2, [r7, #32]
 800a8ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8dc:	88f8      	ldrh	r0, [r7, #6]
 800a8de:	893a      	ldrh	r2, [r7, #8]
 800a8e0:	8979      	ldrh	r1, [r7, #10]
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f9d3 	bl	800ac98 <I2C_RequestMemoryWrite>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e0a9      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a908:	b29b      	uxth	r3, r3
 800a90a:	2bff      	cmp	r3, #255	; 0xff
 800a90c:	d90e      	bls.n	800a92c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	8979      	ldrh	r1, [r7, #10]
 800a91c:	2300      	movs	r3, #0
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 fc11 	bl	800b14c <I2C_TransferConfig>
 800a92a:	e00f      	b.n	800a94c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a930:	b29a      	uxth	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	8979      	ldrh	r1, [r7, #10]
 800a93e:	2300      	movs	r3, #0
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 fc00 	bl	800b14c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 faad 	bl	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e07b      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	781a      	ldrb	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a994:	b29b      	uxth	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d034      	beq.n	800aa04 <HAL_I2C_Mem_Write+0x1c8>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d130      	bne.n	800aa04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2180      	movs	r1, #128	; 0x80
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 fa3f 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e04d      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	2bff      	cmp	r3, #255	; 0xff
 800a9c4:	d90e      	bls.n	800a9e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	22ff      	movs	r2, #255	; 0xff
 800a9ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	8979      	ldrh	r1, [r7, #10]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 fbb5 	bl	800b14c <I2C_TransferConfig>
 800a9e2:	e00f      	b.n	800aa04 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	8979      	ldrh	r1, [r7, #10]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 fba4 	bl	800b14c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d19e      	bne.n	800a94c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 fa8c 	bl	800af30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e01a      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2220      	movs	r2, #32
 800aa28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6859      	ldr	r1, [r3, #4]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <HAL_I2C_Mem_Write+0x224>)
 800aa36:	400b      	ands	r3, r1
 800aa38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e000      	b.n	800aa58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800aa56:	2302      	movs	r3, #2
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	fe00e800 	.word	0xfe00e800

0800aa64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4611      	mov	r1, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	817b      	strh	r3, [r7, #10]
 800aa76:	460b      	mov	r3, r1
 800aa78:	813b      	strh	r3, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	f040 80fd 	bne.w	800ac86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <HAL_I2C_Mem_Read+0x34>
 800aa92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d105      	bne.n	800aaa4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e0f1      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_I2C_Mem_Read+0x4e>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e0ea      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aaba:	f7fe fe8b 	bl	80097d4 <HAL_GetTick>
 800aabe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	2319      	movs	r3, #25
 800aac6:	2201      	movs	r2, #1
 800aac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 f9af 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e0d5      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2222      	movs	r2, #34	; 0x22
 800aae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2240      	movs	r2, #64	; 0x40
 800aae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a3a      	ldr	r2, [r7, #32]
 800aaf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aafc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab04:	88f8      	ldrh	r0, [r7, #6]
 800ab06:	893a      	ldrh	r2, [r7, #8]
 800ab08:	8979      	ldrh	r1, [r7, #10]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4603      	mov	r3, r0
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f913 	bl	800ad40 <I2C_RequestMemoryRead>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d005      	beq.n	800ab2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e0ad      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	2bff      	cmp	r3, #255	; 0xff
 800ab34:	d90e      	bls.n	800ab54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	22ff      	movs	r2, #255	; 0xff
 800ab3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	8979      	ldrh	r1, [r7, #10]
 800ab44:	4b52      	ldr	r3, [pc, #328]	; (800ac90 <HAL_I2C_Mem_Read+0x22c>)
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 fafd 	bl	800b14c <I2C_TransferConfig>
 800ab52:	e00f      	b.n	800ab74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	8979      	ldrh	r1, [r7, #10]
 800ab66:	4b4a      	ldr	r3, [pc, #296]	; (800ac90 <HAL_I2C_Mem_Read+0x22c>)
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f000 faec 	bl	800b14c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2104      	movs	r1, #4
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 f956 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e07c      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d034      	beq.n	800ac34 <HAL_I2C_Mem_Read+0x1d0>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d130      	bne.n	800ac34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	2200      	movs	r2, #0
 800abda:	2180      	movs	r1, #128	; 0x80
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f927 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e04d      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2bff      	cmp	r3, #255	; 0xff
 800abf4:	d90e      	bls.n	800ac14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	22ff      	movs	r2, #255	; 0xff
 800abfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	8979      	ldrh	r1, [r7, #10]
 800ac04:	2300      	movs	r3, #0
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 fa9d 	bl	800b14c <I2C_TransferConfig>
 800ac12:	e00f      	b.n	800ac34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	8979      	ldrh	r1, [r7, #10]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fa8c 	bl	800b14c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d19a      	bne.n	800ab74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 f974 	bl	800af30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e01a      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2220      	movs	r2, #32
 800ac58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6859      	ldr	r1, [r3, #4]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <HAL_I2C_Mem_Read+0x230>)
 800ac66:	400b      	ands	r3, r1
 800ac68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	e000      	b.n	800ac88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ac86:	2302      	movs	r3, #2
  }
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	80002400 	.word	0x80002400
 800ac94:	fe00e800 	.word	0xfe00e800

0800ac98 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	461a      	mov	r2, r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	817b      	strh	r3, [r7, #10]
 800acaa:	460b      	mov	r3, r1
 800acac:	813b      	strh	r3, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	8979      	ldrh	r1, [r7, #10]
 800acb8:	4b20      	ldr	r3, [pc, #128]	; (800ad3c <I2C_RequestMemoryWrite+0xa4>)
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f000 fa43 	bl	800b14c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acc6:	69fa      	ldr	r2, [r7, #28]
 800acc8:	69b9      	ldr	r1, [r7, #24]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f8f0 	bl	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e02c      	b.n	800ad34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800acda:	88fb      	ldrh	r3, [r7, #6]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d105      	bne.n	800acec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ace0:	893b      	ldrh	r3, [r7, #8]
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	629a      	str	r2, [r3, #40]	; 0x28
 800acea:	e015      	b.n	800ad18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800acec:	893b      	ldrh	r3, [r7, #8]
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acfa:	69fa      	ldr	r2, [r7, #28]
 800acfc:	69b9      	ldr	r1, [r7, #24]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 f8d6 	bl	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e012      	b.n	800ad34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad0e:	893b      	ldrh	r3, [r7, #8]
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2180      	movs	r1, #128	; 0x80
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f884 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e000      	b.n	800ad34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	80002000 	.word	0x80002000

0800ad40 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	4603      	mov	r3, r0
 800ad50:	817b      	strh	r3, [r7, #10]
 800ad52:	460b      	mov	r3, r1
 800ad54:	813b      	strh	r3, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	8979      	ldrh	r1, [r7, #10]
 800ad60:	4b20      	ldr	r3, [pc, #128]	; (800ade4 <I2C_RequestMemoryRead+0xa4>)
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	2300      	movs	r3, #0
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 f9f0 	bl	800b14c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad6c:	69fa      	ldr	r2, [r7, #28]
 800ad6e:	69b9      	ldr	r1, [r7, #24]
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f000 f89d 	bl	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e02c      	b.n	800adda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d105      	bne.n	800ad92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad86:	893b      	ldrh	r3, [r7, #8]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ad90:	e015      	b.n	800adbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad92:	893b      	ldrh	r3, [r7, #8]
 800ad94:	0a1b      	lsrs	r3, r3, #8
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	69b9      	ldr	r1, [r7, #24]
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 f883 	bl	800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e012      	b.n	800adda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adb4:	893b      	ldrh	r3, [r7, #8]
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2200      	movs	r2, #0
 800adc6:	2140      	movs	r1, #64	; 0x40
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f831 	bl	800ae30 <I2C_WaitOnFlagUntilTimeout>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e000      	b.n	800adda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	80002000 	.word	0x80002000

0800ade8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	f003 0302 	and.w	r3, r3, #2
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d103      	bne.n	800ae06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2200      	movs	r2, #0
 800ae04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d007      	beq.n	800ae24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	699a      	ldr	r2, [r3, #24]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0201 	orr.w	r2, r2, #1
 800ae22:	619a      	str	r2, [r3, #24]
  }
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	603b      	str	r3, [r7, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae40:	e022      	b.n	800ae88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d01e      	beq.n	800ae88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae4a:	f7fe fcc3 	bl	80097d4 <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d302      	bcc.n	800ae60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d113      	bne.n	800ae88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae64:	f043 0220 	orr.w	r2, r3, #32
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e00f      	b.n	800aea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699a      	ldr	r2, [r3, #24]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	4013      	ands	r3, r2
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	bf0c      	ite	eq
 800ae98:	2301      	moveq	r3, #1
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d0cd      	beq.n	800ae42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aebc:	e02c      	b.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 f8dc 	bl	800b080 <I2C_IsAcknowledgeFailed>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e02a      	b.n	800af28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d01e      	beq.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeda:	f7fe fc7b 	bl	80097d4 <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d302      	bcc.n	800aef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d113      	bne.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef4:	f043 0220 	orr.w	r2, r3, #32
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2220      	movs	r2, #32
 800af00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e007      	b.n	800af28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d1cb      	bne.n	800aebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af3c:	e028      	b.n	800af90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 f89c 	bl	800b080 <I2C_IsAcknowledgeFailed>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e026      	b.n	800afa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af52:	f7fe fc3f 	bl	80097d4 <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d302      	bcc.n	800af68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d113      	bne.n	800af90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6c:	f043 0220 	orr.w	r2, r3, #32
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2220      	movs	r2, #32
 800af78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e007      	b.n	800afa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	f003 0320 	and.w	r3, r3, #32
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	d1cf      	bne.n	800af3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800afb4:	e055      	b.n	800b062 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f000 f860 	bl	800b080 <I2C_IsAcknowledgeFailed>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e053      	b.n	800b072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	f003 0320 	and.w	r3, r3, #32
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d129      	bne.n	800b02c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f003 0304 	and.w	r3, r3, #4
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d105      	bne.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	e03f      	b.n	800b072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2220      	movs	r2, #32
 800aff8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6859      	ldr	r1, [r3, #4]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	4b1d      	ldr	r3, [pc, #116]	; (800b07c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800b006:	400b      	ands	r3, r1
 800b008:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2220      	movs	r2, #32
 800b014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e022      	b.n	800b072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b02c:	f7fe fbd2 	bl	80097d4 <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d302      	bcc.n	800b042 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10f      	bne.n	800b062 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b046:	f043 0220 	orr.w	r2, r3, #32
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2220      	movs	r2, #32
 800b052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e007      	b.n	800b072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	f003 0304 	and.w	r3, r3, #4
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d1a2      	bne.n	800afb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	fe00e800 	.word	0xfe00e800

0800b080 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f003 0310 	and.w	r3, r3, #16
 800b096:	2b10      	cmp	r3, #16
 800b098:	d151      	bne.n	800b13e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b09a:	e022      	b.n	800b0e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a2:	d01e      	beq.n	800b0e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a4:	f7fe fb96 	bl	80097d4 <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d302      	bcc.n	800b0ba <I2C_IsAcknowledgeFailed+0x3a>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d113      	bne.n	800b0e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	f043 0220 	orr.w	r2, r3, #32
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e02e      	b.n	800b140 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d1d5      	bne.n	800b09c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2210      	movs	r2, #16
 800b0f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f7ff fe71 	bl	800ade8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6859      	ldr	r1, [r3, #4]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <I2C_IsAcknowledgeFailed+0xc8>)
 800b112:	400b      	ands	r3, r1
 800b114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	f043 0204 	orr.w	r2, r3, #4
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2220      	movs	r2, #32
 800b126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	fe00e800 	.word	0xfe00e800

0800b14c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	817b      	strh	r3, [r7, #10]
 800b15a:	4613      	mov	r3, r2
 800b15c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	0d5b      	lsrs	r3, r3, #21
 800b168:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <I2C_TransferConfig+0x58>)
 800b16e:	430b      	orrs	r3, r1
 800b170:	43db      	mvns	r3, r3
 800b172:	ea02 0103 	and.w	r1, r2, r3
 800b176:	897b      	ldrh	r3, [r7, #10]
 800b178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b17c:	7a7b      	ldrb	r3, [r7, #9]
 800b17e:	041b      	lsls	r3, r3, #16
 800b180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	431a      	orrs	r2, r3
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	431a      	orrs	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	430a      	orrs	r2, r1
 800b194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	03ff63ff 	.word	0x03ff63ff

0800b1a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b20      	cmp	r3, #32
 800b1bc:	d138      	bne.n	800b230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d101      	bne.n	800b1cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	e032      	b.n	800b232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2224      	movs	r2, #36	; 0x24
 800b1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0201 	bic.w	r2, r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b1fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6819      	ldr	r1, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f042 0201 	orr.w	r2, r2, #1
 800b21a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	e000      	b.n	800b232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b230:	2302      	movs	r3, #2
  }
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b20      	cmp	r3, #32
 800b252:	d139      	bne.n	800b2c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d101      	bne.n	800b262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b25e:	2302      	movs	r3, #2
 800b260:	e033      	b.n	800b2ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2224      	movs	r2, #36	; 0x24
 800b26e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0201 	bic.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	021b      	lsls	r3, r3, #8
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0201 	orr.w	r2, r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	e000      	b.n	800b2ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b2c8:	2302      	movs	r3, #2
  }
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2d8:	b08f      	sub	sp, #60	; 0x3c
 800b2da:	af0a      	add	r7, sp, #40	; 0x28
 800b2dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e116      	b.n	800b516 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7f8 f8d0 	bl	80034a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2203      	movs	r2, #3
 800b30c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4618      	mov	r0, r3
 800b328:	f003 fd50 	bl	800edcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	603b      	str	r3, [r7, #0]
 800b332:	687e      	ldr	r6, [r7, #4]
 800b334:	466d      	mov	r5, sp
 800b336:	f106 0410 	add.w	r4, r6, #16
 800b33a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b33c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b33e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b342:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b346:	e885 0003 	stmia.w	r5, {r0, r1}
 800b34a:	1d33      	adds	r3, r6, #4
 800b34c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b34e:	6838      	ldr	r0, [r7, #0]
 800b350:	f003 fcea 	bl	800ed28 <USB_CoreInit>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d005      	beq.n	800b366 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2202      	movs	r2, #2
 800b35e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e0d7      	b.n	800b516 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2100      	movs	r1, #0
 800b36c:	4618      	mov	r0, r3
 800b36e:	f003 fd3e 	bl	800edee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
 800b376:	e04a      	b.n	800b40e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b378:	7bfa      	ldrb	r2, [r7, #15]
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	4613      	mov	r3, r2
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	1a9b      	subs	r3, r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	440b      	add	r3, r1
 800b386:	333d      	adds	r3, #61	; 0x3d
 800b388:	2201      	movs	r2, #1
 800b38a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b38c:	7bfa      	ldrb	r2, [r7, #15]
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4613      	mov	r3, r2
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	1a9b      	subs	r3, r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	440b      	add	r3, r1
 800b39a:	333c      	adds	r3, #60	; 0x3c
 800b39c:	7bfa      	ldrb	r2, [r7, #15]
 800b39e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b3a0:	7bfa      	ldrb	r2, [r7, #15]
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	b298      	uxth	r0, r3
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	1a9b      	subs	r3, r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	440b      	add	r3, r1
 800b3b2:	3342      	adds	r3, #66	; 0x42
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b3b8:	7bfa      	ldrb	r2, [r7, #15]
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	1a9b      	subs	r3, r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	333f      	adds	r3, #63	; 0x3f
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b3cc:	7bfa      	ldrb	r2, [r7, #15]
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	440b      	add	r3, r1
 800b3da:	3344      	adds	r3, #68	; 0x44
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b3e0:	7bfa      	ldrb	r2, [r7, #15]
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	1a9b      	subs	r3, r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	3348      	adds	r3, #72	; 0x48
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b3f4:	7bfa      	ldrb	r2, [r7, #15]
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	1a9b      	subs	r3, r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	440b      	add	r3, r1
 800b402:	3350      	adds	r3, #80	; 0x50
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	3301      	adds	r3, #1
 800b40c:	73fb      	strb	r3, [r7, #15]
 800b40e:	7bfa      	ldrb	r2, [r7, #15]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d3af      	bcc.n	800b378 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
 800b41c:	e044      	b.n	800b4a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b41e:	7bfa      	ldrb	r2, [r7, #15]
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	4613      	mov	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	1a9b      	subs	r3, r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	440b      	add	r3, r1
 800b42c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b434:	7bfa      	ldrb	r2, [r7, #15]
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4613      	mov	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	1a9b      	subs	r3, r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b446:	7bfa      	ldrb	r2, [r7, #15]
 800b448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b44a:	7bfa      	ldrb	r2, [r7, #15]
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	4613      	mov	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	1a9b      	subs	r3, r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	440b      	add	r3, r1
 800b458:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b460:	7bfa      	ldrb	r2, [r7, #15]
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	4613      	mov	r3, r2
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	1a9b      	subs	r3, r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b476:	7bfa      	ldrb	r2, [r7, #15]
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	4613      	mov	r3, r2
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	1a9b      	subs	r3, r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	440b      	add	r3, r1
 800b484:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b48c:	7bfa      	ldrb	r2, [r7, #15]
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	4613      	mov	r3, r2
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	440b      	add	r3, r1
 800b49a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	73fb      	strb	r3, [r7, #15]
 800b4a8:	7bfa      	ldrb	r2, [r7, #15]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d3b5      	bcc.n	800b41e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	687e      	ldr	r6, [r7, #4]
 800b4ba:	466d      	mov	r5, sp
 800b4bc:	f106 0410 	add.w	r4, r6, #16
 800b4c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b4c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b4c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4cc:	e885 0003 	stmia.w	r5, {r0, r1}
 800b4d0:	1d33      	adds	r3, r6, #4
 800b4d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4d4:	6838      	ldr	r0, [r7, #0]
 800b4d6:	f003 fcb5 	bl	800ee44 <USB_DevInit>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d005      	beq.n	800b4ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e014      	b.n	800b516 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b500:	2b01      	cmp	r3, #1
 800b502:	d102      	bne.n	800b50a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f80a 	bl	800b51e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4618      	mov	r0, r3
 800b510:	f003 fe45 	bl	800f19e <USB_DevDisconnect>

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b51e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b550:	f043 0303 	orr.w	r3, r3, #3
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a04      	ldr	r2, [pc, #16]	; (800b584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b576:	6013      	str	r3, [r2, #0]
}
 800b578:	bf00      	nop
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40007000 	.word	0x40007000

0800b588 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b588:	b480      	push	{r7}
 800b58a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b594:	4618      	mov	r0, r3
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	40007000 	.word	0x40007000

0800b5a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b2:	d130      	bne.n	800b616 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b5b4:	4b23      	ldr	r3, [pc, #140]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5c0:	d038      	beq.n	800b634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b5c2:	4b20      	ldr	r3, [pc, #128]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b5ca:	4a1e      	ldr	r2, [pc, #120]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b5d2:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2232      	movs	r2, #50	; 0x32
 800b5d8:	fb02 f303 	mul.w	r3, r2, r3
 800b5dc:	4a1b      	ldr	r2, [pc, #108]	; (800b64c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	0c9b      	lsrs	r3, r3, #18
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b5e8:	e002      	b.n	800b5f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b5f0:	4b14      	ldr	r3, [pc, #80]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5fc:	d102      	bne.n	800b604 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f2      	bne.n	800b5ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b604:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b610:	d110      	bne.n	800b634 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e00f      	b.n	800b636 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b616:	4b0b      	ldr	r3, [pc, #44]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b622:	d007      	beq.n	800b634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b62c:	4a05      	ldr	r2, [pc, #20]	; (800b644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b62e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b632:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	40007000 	.word	0x40007000
 800b648:	2000018c 	.word	0x2000018c
 800b64c:	431bde83 	.word	0x431bde83

0800b650 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b650:	b480      	push	{r7}
 800b652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b654:	4b05      	ldr	r3, [pc, #20]	; (800b66c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4a04      	ldr	r2, [pc, #16]	; (800b66c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b65a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b65e:	6053      	str	r3, [r2, #4]
}
 800b660:	bf00      	nop
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	40007000 	.word	0x40007000

0800b670 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af02      	add	r7, sp, #8
 800b676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b678:	f7fe f8ac 	bl	80097d4 <HAL_GetTick>
 800b67c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e063      	b.n	800b750 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10b      	bne.n	800b6ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7f7 fde7 	bl	8003270 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b6a2:	f241 3188 	movw	r1, #5000	; 0x1388
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f858 	bl	800b75c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	021a      	lsls	r2, r3, #8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2120      	movs	r1, #32
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f850 	bl	800b778 <QSPI_WaitFlagStateUntilTimeout>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b6dc:	7afb      	ldrb	r3, [r7, #11]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d131      	bne.n	800b746 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6ec:	f023 0310 	bic.w	r3, r3, #16
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6852      	ldr	r2, [r2, #4]
 800b6f4:	0611      	lsls	r1, r2, #24
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	68d2      	ldr	r2, [r2, #12]
 800b6fa:	4311      	orrs	r1, r2
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	430b      	orrs	r3, r1
 800b702:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	4b13      	ldr	r3, [pc, #76]	; (800b758 <HAL_QSPI_Init+0xe8>)
 800b70c:	4013      	ands	r3, r2
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6912      	ldr	r2, [r2, #16]
 800b712:	0411      	lsls	r1, r2, #16
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	6952      	ldr	r2, [r2, #20]
 800b718:	4311      	orrs	r1, r2
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	6992      	ldr	r2, [r2, #24]
 800b71e:	4311      	orrs	r1, r2
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	6812      	ldr	r2, [r2, #0]
 800b724:	430b      	orrs	r3, r1
 800b726:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800b74e:	7afb      	ldrb	r3, [r7, #11]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	ffe0f8fe 	.word	0xffe0f8fe

0800b75c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	4613      	mov	r3, r2
 800b786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b788:	e01a      	b.n	800b7c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b790:	d016      	beq.n	800b7c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b792:	f7fe f81f 	bl	80097d4 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d302      	bcc.n	800b7a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10b      	bne.n	800b7c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2204      	movs	r2, #4
 800b7ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b4:	f043 0201 	orr.w	r2, r3, #1
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e00e      	b.n	800b7de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689a      	ldr	r2, [r3, #8]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bf14      	ite	ne
 800b7ce:	2301      	movne	r3, #1
 800b7d0:	2300      	moveq	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d1d6      	bne.n	800b78a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e3d4      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7fa:	4ba1      	ldr	r3, [pc, #644]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 030c 	and.w	r3, r3, #12
 800b802:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b804:	4b9e      	ldr	r3, [pc, #632]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f003 0303 	and.w	r3, r3, #3
 800b80c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0310 	and.w	r3, r3, #16
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 80e4 	beq.w	800b9e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <HAL_RCC_OscConfig+0x4a>
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b0c      	cmp	r3, #12
 800b826:	f040 808b 	bne.w	800b940 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	f040 8087 	bne.w	800b940 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b832:	4b93      	ldr	r3, [pc, #588]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d005      	beq.n	800b84a <HAL_RCC_OscConfig+0x62>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e3ac      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1a      	ldr	r2, [r3, #32]
 800b84e:	4b8c      	ldr	r3, [pc, #560]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <HAL_RCC_OscConfig+0x7c>
 800b85a:	4b89      	ldr	r3, [pc, #548]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b862:	e005      	b.n	800b870 <HAL_RCC_OscConfig+0x88>
 800b864:	4b86      	ldr	r3, [pc, #536]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b86a:	091b      	lsrs	r3, r3, #4
 800b86c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b870:	4293      	cmp	r3, r2
 800b872:	d223      	bcs.n	800b8bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 fd3f 	bl	800c2fc <RCC_SetFlashLatencyFromMSIRange>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e38d      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b888:	4b7d      	ldr	r3, [pc, #500]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a7c      	ldr	r2, [pc, #496]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b88e:	f043 0308 	orr.w	r3, r3, #8
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	4b7a      	ldr	r3, [pc, #488]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	4977      	ldr	r1, [pc, #476]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b8a6:	4b76      	ldr	r3, [pc, #472]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	021b      	lsls	r3, r3, #8
 800b8b4:	4972      	ldr	r1, [pc, #456]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	604b      	str	r3, [r1, #4]
 800b8ba:	e025      	b.n	800b908 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b8bc:	4b70      	ldr	r3, [pc, #448]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a6f      	ldr	r2, [pc, #444]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8c2:	f043 0308 	orr.w	r3, r3, #8
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	4b6d      	ldr	r3, [pc, #436]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a1b      	ldr	r3, [r3, #32]
 800b8d4:	496a      	ldr	r1, [pc, #424]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b8da:	4b69      	ldr	r3, [pc, #420]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	021b      	lsls	r3, r3, #8
 800b8e8:	4965      	ldr	r1, [pc, #404]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d109      	bne.n	800b908 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f000 fcff 	bl	800c2fc <RCC_SetFlashLatencyFromMSIRange>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e34d      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b908:	f000 fc36 	bl	800c178 <HAL_RCC_GetSysClockFreq>
 800b90c:	4601      	mov	r1, r0
 800b90e:	4b5c      	ldr	r3, [pc, #368]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	091b      	lsrs	r3, r3, #4
 800b914:	f003 030f 	and.w	r3, r3, #15
 800b918:	4a5a      	ldr	r2, [pc, #360]	; (800ba84 <HAL_RCC_OscConfig+0x29c>)
 800b91a:	5cd3      	ldrb	r3, [r2, r3]
 800b91c:	f003 031f 	and.w	r3, r3, #31
 800b920:	fa21 f303 	lsr.w	r3, r1, r3
 800b924:	4a58      	ldr	r2, [pc, #352]	; (800ba88 <HAL_RCC_OscConfig+0x2a0>)
 800b926:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b928:	4b58      	ldr	r3, [pc, #352]	; (800ba8c <HAL_RCC_OscConfig+0x2a4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fd ff01 	bl	8009734 <HAL_InitTick>
 800b932:	4603      	mov	r3, r0
 800b934:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d052      	beq.n	800b9e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	e331      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d032      	beq.n	800b9ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b948:	4b4d      	ldr	r3, [pc, #308]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a4c      	ldr	r2, [pc, #304]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b94e:	f043 0301 	orr.w	r3, r3, #1
 800b952:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b954:	f7fd ff3e 	bl	80097d4 <HAL_GetTick>
 800b958:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b95a:	e008      	b.n	800b96e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b95c:	f7fd ff3a 	bl	80097d4 <HAL_GetTick>
 800b960:	4602      	mov	r2, r0
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	2b02      	cmp	r3, #2
 800b968:	d901      	bls.n	800b96e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e31a      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b96e:	4b44      	ldr	r3, [pc, #272]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0f0      	beq.n	800b95c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b97a:	4b41      	ldr	r3, [pc, #260]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a40      	ldr	r2, [pc, #256]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b980:	f043 0308 	orr.w	r3, r3, #8
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	4b3e      	ldr	r3, [pc, #248]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	493b      	ldr	r1, [pc, #236]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b994:	4313      	orrs	r3, r2
 800b996:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b998:	4b39      	ldr	r3, [pc, #228]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	69db      	ldr	r3, [r3, #28]
 800b9a4:	021b      	lsls	r3, r3, #8
 800b9a6:	4936      	ldr	r1, [pc, #216]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	604b      	str	r3, [r1, #4]
 800b9ac:	e01a      	b.n	800b9e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b9ae:	4b34      	ldr	r3, [pc, #208]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a33      	ldr	r2, [pc, #204]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b9b4:	f023 0301 	bic.w	r3, r3, #1
 800b9b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b9ba:	f7fd ff0b 	bl	80097d4 <HAL_GetTick>
 800b9be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b9c0:	e008      	b.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b9c2:	f7fd ff07 	bl	80097d4 <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d901      	bls.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e2e7      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1f0      	bne.n	800b9c2 <HAL_RCC_OscConfig+0x1da>
 800b9e0:	e000      	b.n	800b9e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b9e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d074      	beq.n	800bada <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2b08      	cmp	r3, #8
 800b9f4:	d005      	beq.n	800ba02 <HAL_RCC_OscConfig+0x21a>
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	2b0c      	cmp	r3, #12
 800b9fa:	d10e      	bne.n	800ba1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d10b      	bne.n	800ba1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba02:	4b1f      	ldr	r3, [pc, #124]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d064      	beq.n	800bad8 <HAL_RCC_OscConfig+0x2f0>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d160      	bne.n	800bad8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e2c4      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba22:	d106      	bne.n	800ba32 <HAL_RCC_OscConfig+0x24a>
 800ba24:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba2e:	6013      	str	r3, [r2, #0]
 800ba30:	e01d      	b.n	800ba6e <HAL_RCC_OscConfig+0x286>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba3a:	d10c      	bne.n	800ba56 <HAL_RCC_OscConfig+0x26e>
 800ba3c:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a0f      	ldr	r2, [pc, #60]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba52:	6013      	str	r3, [r2, #0]
 800ba54:	e00b      	b.n	800ba6e <HAL_RCC_OscConfig+0x286>
 800ba56:	4b0a      	ldr	r3, [pc, #40]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a06      	ldr	r2, [pc, #24]	; (800ba80 <HAL_RCC_OscConfig+0x298>)
 800ba68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d01c      	beq.n	800bab0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba76:	f7fd fead 	bl	80097d4 <HAL_GetTick>
 800ba7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba7c:	e011      	b.n	800baa2 <HAL_RCC_OscConfig+0x2ba>
 800ba7e:	bf00      	nop
 800ba80:	40021000 	.word	0x40021000
 800ba84:	08014f2c 	.word	0x08014f2c
 800ba88:	2000018c 	.word	0x2000018c
 800ba8c:	20000488 	.word	0x20000488
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba90:	f7fd fea0 	bl	80097d4 <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	2b64      	cmp	r3, #100	; 0x64
 800ba9c:	d901      	bls.n	800baa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e280      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800baa2:	4baf      	ldr	r3, [pc, #700]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0f0      	beq.n	800ba90 <HAL_RCC_OscConfig+0x2a8>
 800baae:	e014      	b.n	800bada <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bab0:	f7fd fe90 	bl	80097d4 <HAL_GetTick>
 800bab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bab6:	e008      	b.n	800baca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bab8:	f7fd fe8c 	bl	80097d4 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2b64      	cmp	r3, #100	; 0x64
 800bac4:	d901      	bls.n	800baca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e26c      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800baca:	4ba5      	ldr	r3, [pc, #660]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f0      	bne.n	800bab8 <HAL_RCC_OscConfig+0x2d0>
 800bad6:	e000      	b.n	800bada <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d060      	beq.n	800bba8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b04      	cmp	r3, #4
 800baea:	d005      	beq.n	800baf8 <HAL_RCC_OscConfig+0x310>
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b0c      	cmp	r3, #12
 800baf0:	d119      	bne.n	800bb26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d116      	bne.n	800bb26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800baf8:	4b99      	ldr	r3, [pc, #612]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <HAL_RCC_OscConfig+0x328>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e249      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb10:	4b93      	ldr	r3, [pc, #588]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	061b      	lsls	r3, r3, #24
 800bb1e:	4990      	ldr	r1, [pc, #576]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb20:	4313      	orrs	r3, r2
 800bb22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb24:	e040      	b.n	800bba8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d023      	beq.n	800bb76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb2e:	4b8c      	ldr	r3, [pc, #560]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a8b      	ldr	r2, [pc, #556]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb3a:	f7fd fe4b 	bl	80097d4 <HAL_GetTick>
 800bb3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb40:	e008      	b.n	800bb54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb42:	f7fd fe47 	bl	80097d4 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d901      	bls.n	800bb54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e227      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb54:	4b82      	ldr	r3, [pc, #520]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0f0      	beq.n	800bb42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb60:	4b7f      	ldr	r3, [pc, #508]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	061b      	lsls	r3, r3, #24
 800bb6e:	497c      	ldr	r1, [pc, #496]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb70:	4313      	orrs	r3, r2
 800bb72:	604b      	str	r3, [r1, #4]
 800bb74:	e018      	b.n	800bba8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb76:	4b7a      	ldr	r3, [pc, #488]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a79      	ldr	r2, [pc, #484]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb82:	f7fd fe27 	bl	80097d4 <HAL_GetTick>
 800bb86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb88:	e008      	b.n	800bb9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb8a:	f7fd fe23 	bl	80097d4 <HAL_GetTick>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d901      	bls.n	800bb9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e203      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb9c:	4b70      	ldr	r3, [pc, #448]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1f0      	bne.n	800bb8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0308 	and.w	r3, r3, #8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d03c      	beq.n	800bc2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d01c      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bbbc:	4b68      	ldr	r3, [pc, #416]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bbbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbc2:	4a67      	ldr	r2, [pc, #412]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bbc4:	f043 0301 	orr.w	r3, r3, #1
 800bbc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbcc:	f7fd fe02 	bl	80097d4 <HAL_GetTick>
 800bbd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbd2:	e008      	b.n	800bbe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbd4:	f7fd fdfe 	bl	80097d4 <HAL_GetTick>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d901      	bls.n	800bbe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e1de      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbe6:	4b5e      	ldr	r3, [pc, #376]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bbe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbec:	f003 0302 	and.w	r3, r3, #2
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0ef      	beq.n	800bbd4 <HAL_RCC_OscConfig+0x3ec>
 800bbf4:	e01b      	b.n	800bc2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbf6:	4b5a      	ldr	r3, [pc, #360]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bbf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbfc:	4a58      	ldr	r2, [pc, #352]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bbfe:	f023 0301 	bic.w	r3, r3, #1
 800bc02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc06:	f7fd fde5 	bl	80097d4 <HAL_GetTick>
 800bc0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc0c:	e008      	b.n	800bc20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc0e:	f7fd fde1 	bl	80097d4 <HAL_GetTick>
 800bc12:	4602      	mov	r2, r0
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d901      	bls.n	800bc20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e1c1      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc20:	4b4f      	ldr	r3, [pc, #316]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bc22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1ef      	bne.n	800bc0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 80a6 	beq.w	800bd88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bc40:	4b47      	ldr	r3, [pc, #284]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bc42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc4c:	4b44      	ldr	r3, [pc, #272]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bc4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc50:	4a43      	ldr	r2, [pc, #268]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bc52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc56:	6593      	str	r3, [r2, #88]	; 0x58
 800bc58:	4b41      	ldr	r3, [pc, #260]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bc5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc60:	60bb      	str	r3, [r7, #8]
 800bc62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc64:	2301      	movs	r3, #1
 800bc66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc68:	4b3e      	ldr	r3, [pc, #248]	; (800bd64 <HAL_RCC_OscConfig+0x57c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d118      	bne.n	800bca6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc74:	4b3b      	ldr	r3, [pc, #236]	; (800bd64 <HAL_RCC_OscConfig+0x57c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a3a      	ldr	r2, [pc, #232]	; (800bd64 <HAL_RCC_OscConfig+0x57c>)
 800bc7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc80:	f7fd fda8 	bl	80097d4 <HAL_GetTick>
 800bc84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc86:	e008      	b.n	800bc9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc88:	f7fd fda4 	bl	80097d4 <HAL_GetTick>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d901      	bls.n	800bc9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bc96:	2303      	movs	r3, #3
 800bc98:	e184      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc9a:	4b32      	ldr	r3, [pc, #200]	; (800bd64 <HAL_RCC_OscConfig+0x57c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0f0      	beq.n	800bc88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d108      	bne.n	800bcc0 <HAL_RCC_OscConfig+0x4d8>
 800bcae:	4b2c      	ldr	r3, [pc, #176]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb4:	4a2a      	ldr	r2, [pc, #168]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcb6:	f043 0301 	orr.w	r3, r3, #1
 800bcba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bcbe:	e024      	b.n	800bd0a <HAL_RCC_OscConfig+0x522>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	2b05      	cmp	r3, #5
 800bcc6:	d110      	bne.n	800bcea <HAL_RCC_OscConfig+0x502>
 800bcc8:	4b25      	ldr	r3, [pc, #148]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcce:	4a24      	ldr	r2, [pc, #144]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcd0:	f043 0304 	orr.w	r3, r3, #4
 800bcd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bcd8:	4b21      	ldr	r3, [pc, #132]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcde:	4a20      	ldr	r2, [pc, #128]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bce0:	f043 0301 	orr.w	r3, r3, #1
 800bce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bce8:	e00f      	b.n	800bd0a <HAL_RCC_OscConfig+0x522>
 800bcea:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf0:	4a1b      	ldr	r2, [pc, #108]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcf2:	f023 0301 	bic.w	r3, r3, #1
 800bcf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bcfa:	4b19      	ldr	r3, [pc, #100]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bcfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd00:	4a17      	ldr	r2, [pc, #92]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bd02:	f023 0304 	bic.w	r3, r3, #4
 800bd06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d016      	beq.n	800bd40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd12:	f7fd fd5f 	bl	80097d4 <HAL_GetTick>
 800bd16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd18:	e00a      	b.n	800bd30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd1a:	f7fd fd5b 	bl	80097d4 <HAL_GetTick>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d901      	bls.n	800bd30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	e139      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <HAL_RCC_OscConfig+0x578>)
 800bd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0ed      	beq.n	800bd1a <HAL_RCC_OscConfig+0x532>
 800bd3e:	e01a      	b.n	800bd76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd40:	f7fd fd48 	bl	80097d4 <HAL_GetTick>
 800bd44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd46:	e00f      	b.n	800bd68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd48:	f7fd fd44 	bl	80097d4 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d906      	bls.n	800bd68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e122      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
 800bd5e:	bf00      	nop
 800bd60:	40021000 	.word	0x40021000
 800bd64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd68:	4b90      	ldr	r3, [pc, #576]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1e8      	bne.n	800bd48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d105      	bne.n	800bd88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd7c:	4b8b      	ldr	r3, [pc, #556]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bd7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd80:	4a8a      	ldr	r2, [pc, #552]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bd82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8108 	beq.w	800bfa2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	f040 80d0 	bne.w	800bf3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bd9c:	4b83      	ldr	r3, [pc, #524]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f003 0203 	and.w	r2, r3, #3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d130      	bne.n	800be12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d127      	bne.n	800be12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d11f      	bne.n	800be12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bddc:	2a07      	cmp	r2, #7
 800bdde:	bf14      	ite	ne
 800bde0:	2201      	movne	r2, #1
 800bde2:	2200      	moveq	r2, #0
 800bde4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d113      	bne.n	800be12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf4:	085b      	lsrs	r3, r3, #1
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d109      	bne.n	800be12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be08:	085b      	lsrs	r3, r3, #1
 800be0a:	3b01      	subs	r3, #1
 800be0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be0e:	429a      	cmp	r2, r3
 800be10:	d06e      	beq.n	800bef0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	2b0c      	cmp	r3, #12
 800be16:	d069      	beq.n	800beec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800be18:	4b64      	ldr	r3, [pc, #400]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d105      	bne.n	800be30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800be24:	4b61      	ldr	r3, [pc, #388]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e0b7      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800be34:	4b5d      	ldr	r3, [pc, #372]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a5c      	ldr	r2, [pc, #368]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800be3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800be40:	f7fd fcc8 	bl	80097d4 <HAL_GetTick>
 800be44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be48:	f7fd fcc4 	bl	80097d4 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e0a4      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be5a:	4b54      	ldr	r3, [pc, #336]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1f0      	bne.n	800be48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be66:	4b51      	ldr	r3, [pc, #324]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800be68:	68da      	ldr	r2, [r3, #12]
 800be6a:	4b51      	ldr	r3, [pc, #324]	; (800bfb0 <HAL_RCC_OscConfig+0x7c8>)
 800be6c:	4013      	ands	r3, r2
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be76:	3a01      	subs	r2, #1
 800be78:	0112      	lsls	r2, r2, #4
 800be7a:	4311      	orrs	r1, r2
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be80:	0212      	lsls	r2, r2, #8
 800be82:	4311      	orrs	r1, r2
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800be88:	0852      	lsrs	r2, r2, #1
 800be8a:	3a01      	subs	r2, #1
 800be8c:	0552      	lsls	r2, r2, #21
 800be8e:	4311      	orrs	r1, r2
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800be94:	0852      	lsrs	r2, r2, #1
 800be96:	3a01      	subs	r2, #1
 800be98:	0652      	lsls	r2, r2, #25
 800be9a:	4311      	orrs	r1, r2
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bea0:	0912      	lsrs	r2, r2, #4
 800bea2:	0452      	lsls	r2, r2, #17
 800bea4:	430a      	orrs	r2, r1
 800bea6:	4941      	ldr	r1, [pc, #260]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bea8:	4313      	orrs	r3, r2
 800beaa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800beac:	4b3f      	ldr	r3, [pc, #252]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a3e      	ldr	r2, [pc, #248]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800beb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800beb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800beb8:	4b3c      	ldr	r3, [pc, #240]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	4a3b      	ldr	r2, [pc, #236]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bec2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bec4:	f7fd fc86 	bl	80097d4 <HAL_GetTick>
 800bec8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800beca:	e008      	b.n	800bede <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800becc:	f7fd fc82 	bl	80097d4 <HAL_GetTick>
 800bed0:	4602      	mov	r2, r0
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d901      	bls.n	800bede <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	e062      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bede:	4b33      	ldr	r3, [pc, #204]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0f0      	beq.n	800becc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800beea:	e05a      	b.n	800bfa2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e059      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bef0:	4b2e      	ldr	r3, [pc, #184]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d152      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800befc:	4b2b      	ldr	r3, [pc, #172]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a2a      	ldr	r2, [pc, #168]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bf08:	4b28      	ldr	r3, [pc, #160]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	4a27      	ldr	r2, [pc, #156]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bf14:	f7fd fc5e 	bl	80097d4 <HAL_GetTick>
 800bf18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf1a:	e008      	b.n	800bf2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf1c:	f7fd fc5a 	bl	80097d4 <HAL_GetTick>
 800bf20:	4602      	mov	r2, r0
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d901      	bls.n	800bf2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e03a      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf2e:	4b1f      	ldr	r3, [pc, #124]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d0f0      	beq.n	800bf1c <HAL_RCC_OscConfig+0x734>
 800bf3a:	e032      	b.n	800bfa2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	2b0c      	cmp	r3, #12
 800bf40:	d02d      	beq.n	800bf9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf42:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a19      	ldr	r2, [pc, #100]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800bf4e:	4b17      	ldr	r3, [pc, #92]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bf5a:	4b14      	ldr	r3, [pc, #80]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	4a13      	ldr	r2, [pc, #76]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf60:	f023 0303 	bic.w	r3, r3, #3
 800bf64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800bf66:	4b11      	ldr	r3, [pc, #68]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	4a10      	ldr	r2, [pc, #64]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bf70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf76:	f7fd fc2d 	bl	80097d4 <HAL_GetTick>
 800bf7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf7c:	e008      	b.n	800bf90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf7e:	f7fd fc29 	bl	80097d4 <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d901      	bls.n	800bf90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e009      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf90:	4b06      	ldr	r3, [pc, #24]	; (800bfac <HAL_RCC_OscConfig+0x7c4>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1f0      	bne.n	800bf7e <HAL_RCC_OscConfig+0x796>
 800bf9c:	e001      	b.n	800bfa2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3720      	adds	r7, #32
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	40021000 	.word	0x40021000
 800bfb0:	f99d808c 	.word	0xf99d808c

0800bfb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e0c8      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bfc8:	4b66      	ldr	r3, [pc, #408]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0307 	and.w	r3, r3, #7
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d910      	bls.n	800bff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfd6:	4b63      	ldr	r3, [pc, #396]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f023 0207 	bic.w	r2, r3, #7
 800bfde:	4961      	ldr	r1, [pc, #388]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfe6:	4b5f      	ldr	r3, [pc, #380]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d001      	beq.n	800bff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e0b0      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d04c      	beq.n	800c09e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d107      	bne.n	800c01c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c00c:	4b56      	ldr	r3, [pc, #344]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d121      	bne.n	800c05c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e09e      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2b02      	cmp	r3, #2
 800c022:	d107      	bne.n	800c034 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c024:	4b50      	ldr	r3, [pc, #320]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d115      	bne.n	800c05c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e092      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d107      	bne.n	800c04c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c03c:	4b4a      	ldr	r3, [pc, #296]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 0302 	and.w	r3, r3, #2
 800c044:	2b00      	cmp	r3, #0
 800c046:	d109      	bne.n	800c05c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e086      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c04c:	4b46      	ldr	r3, [pc, #280]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e07e      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c05c:	4b42      	ldr	r3, [pc, #264]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f023 0203 	bic.w	r2, r3, #3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	493f      	ldr	r1, [pc, #252]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c06e:	f7fd fbb1 	bl	80097d4 <HAL_GetTick>
 800c072:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c074:	e00a      	b.n	800c08c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c076:	f7fd fbad 	bl	80097d4 <HAL_GetTick>
 800c07a:	4602      	mov	r2, r0
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	f241 3288 	movw	r2, #5000	; 0x1388
 800c084:	4293      	cmp	r3, r2
 800c086:	d901      	bls.n	800c08c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e066      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c08c:	4b36      	ldr	r3, [pc, #216]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	f003 020c 	and.w	r2, r3, #12
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d1eb      	bne.n	800c076 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0aa:	4b2f      	ldr	r3, [pc, #188]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	492c      	ldr	r1, [pc, #176]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c0bc:	4b29      	ldr	r3, [pc, #164]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0307 	and.w	r3, r3, #7
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d210      	bcs.n	800c0ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0ca:	4b26      	ldr	r3, [pc, #152]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f023 0207 	bic.w	r2, r3, #7
 800c0d2:	4924      	ldr	r1, [pc, #144]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0da:	4b22      	ldr	r3, [pc, #136]	; (800c164 <HAL_RCC_ClockConfig+0x1b0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0307 	and.w	r3, r3, #7
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d001      	beq.n	800c0ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e036      	b.n	800c15a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 0304 	and.w	r3, r3, #4
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d008      	beq.n	800c10a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0f8:	4b1b      	ldr	r3, [pc, #108]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	4918      	ldr	r1, [pc, #96]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c106:	4313      	orrs	r3, r2
 800c108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0308 	and.w	r3, r3, #8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d009      	beq.n	800c12a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c116:	4b14      	ldr	r3, [pc, #80]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	4910      	ldr	r1, [pc, #64]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c126:	4313      	orrs	r3, r2
 800c128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c12a:	f000 f825 	bl	800c178 <HAL_RCC_GetSysClockFreq>
 800c12e:	4601      	mov	r1, r0
 800c130:	4b0d      	ldr	r3, [pc, #52]	; (800c168 <HAL_RCC_ClockConfig+0x1b4>)
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	091b      	lsrs	r3, r3, #4
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	4a0c      	ldr	r2, [pc, #48]	; (800c16c <HAL_RCC_ClockConfig+0x1b8>)
 800c13c:	5cd3      	ldrb	r3, [r2, r3]
 800c13e:	f003 031f 	and.w	r3, r3, #31
 800c142:	fa21 f303 	lsr.w	r3, r1, r3
 800c146:	4a0a      	ldr	r2, [pc, #40]	; (800c170 <HAL_RCC_ClockConfig+0x1bc>)
 800c148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c14a:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fd faf0 	bl	8009734 <HAL_InitTick>
 800c154:	4603      	mov	r3, r0
 800c156:	72fb      	strb	r3, [r7, #11]

  return status;
 800c158:	7afb      	ldrb	r3, [r7, #11]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	40022000 	.word	0x40022000
 800c168:	40021000 	.word	0x40021000
 800c16c:	08014f2c 	.word	0x08014f2c
 800c170:	2000018c 	.word	0x2000018c
 800c174:	20000488 	.word	0x20000488

0800c178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c178:	b480      	push	{r7}
 800c17a:	b089      	sub	sp, #36	; 0x24
 800c17c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c17e:	2300      	movs	r3, #0
 800c180:	61fb      	str	r3, [r7, #28]
 800c182:	2300      	movs	r3, #0
 800c184:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c186:	4b3d      	ldr	r3, [pc, #244]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 030c 	and.w	r3, r3, #12
 800c18e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c190:	4b3a      	ldr	r3, [pc, #232]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0303 	and.w	r3, r3, #3
 800c198:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_RCC_GetSysClockFreq+0x34>
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	2b0c      	cmp	r3, #12
 800c1a4:	d121      	bne.n	800c1ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d11e      	bne.n	800c1ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c1ac:	4b33      	ldr	r3, [pc, #204]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0308 	and.w	r3, r3, #8
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d107      	bne.n	800c1c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c1b8:	4b30      	ldr	r3, [pc, #192]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1be:	0a1b      	lsrs	r3, r3, #8
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	61fb      	str	r3, [r7, #28]
 800c1c6:	e005      	b.n	800c1d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c1c8:	4b2c      	ldr	r3, [pc, #176]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	091b      	lsrs	r3, r3, #4
 800c1ce:	f003 030f 	and.w	r3, r3, #15
 800c1d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c1d4:	4a2a      	ldr	r2, [pc, #168]	; (800c280 <HAL_RCC_GetSysClockFreq+0x108>)
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10d      	bne.n	800c200 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c1e8:	e00a      	b.n	800c200 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d102      	bne.n	800c1f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c1f0:	4b24      	ldr	r3, [pc, #144]	; (800c284 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	e004      	b.n	800c200 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	2b08      	cmp	r3, #8
 800c1fa:	d101      	bne.n	800c200 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c1fc:	4b22      	ldr	r3, [pc, #136]	; (800c288 <HAL_RCC_GetSysClockFreq+0x110>)
 800c1fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2b0c      	cmp	r3, #12
 800c204:	d133      	bne.n	800c26e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c206:	4b1d      	ldr	r3, [pc, #116]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d002      	beq.n	800c21c <HAL_RCC_GetSysClockFreq+0xa4>
 800c216:	2b03      	cmp	r3, #3
 800c218:	d003      	beq.n	800c222 <HAL_RCC_GetSysClockFreq+0xaa>
 800c21a:	e005      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c21c:	4b19      	ldr	r3, [pc, #100]	; (800c284 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c21e:	617b      	str	r3, [r7, #20]
      break;
 800c220:	e005      	b.n	800c22e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c222:	4b19      	ldr	r3, [pc, #100]	; (800c288 <HAL_RCC_GetSysClockFreq+0x110>)
 800c224:	617b      	str	r3, [r7, #20]
      break;
 800c226:	e002      	b.n	800c22e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	617b      	str	r3, [r7, #20]
      break;
 800c22c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c22e:	4b13      	ldr	r3, [pc, #76]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	091b      	lsrs	r3, r3, #4
 800c234:	f003 0307 	and.w	r3, r3, #7
 800c238:	3301      	adds	r3, #1
 800c23a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c23c:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	0a1b      	lsrs	r3, r3, #8
 800c242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	fb02 f203 	mul.w	r2, r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c252:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c254:	4b09      	ldr	r3, [pc, #36]	; (800c27c <HAL_RCC_GetSysClockFreq+0x104>)
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	0e5b      	lsrs	r3, r3, #25
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	3301      	adds	r3, #1
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	fbb2 f3f3 	udiv	r3, r2, r3
 800c26c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c26e:	69bb      	ldr	r3, [r7, #24]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3724      	adds	r7, #36	; 0x24
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	40021000 	.word	0x40021000
 800c280:	08014f44 	.word	0x08014f44
 800c284:	00f42400 	.word	0x00f42400
 800c288:	007a1200 	.word	0x007a1200

0800c28c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c290:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c292:	681b      	ldr	r3, [r3, #0]
}
 800c294:	4618      	mov	r0, r3
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	2000018c 	.word	0x2000018c

0800c2a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c2a8:	f7ff fff0 	bl	800c28c <HAL_RCC_GetHCLKFreq>
 800c2ac:	4601      	mov	r1, r0
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	0a1b      	lsrs	r3, r3, #8
 800c2b4:	f003 0307 	and.w	r3, r3, #7
 800c2b8:	4a04      	ldr	r2, [pc, #16]	; (800c2cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c2ba:	5cd3      	ldrb	r3, [r2, r3]
 800c2bc:	f003 031f 	and.w	r3, r3, #31
 800c2c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	40021000 	.word	0x40021000
 800c2cc:	08014f3c 	.word	0x08014f3c

0800c2d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c2d4:	f7ff ffda 	bl	800c28c <HAL_RCC_GetHCLKFreq>
 800c2d8:	4601      	mov	r1, r0
 800c2da:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	0adb      	lsrs	r3, r3, #11
 800c2e0:	f003 0307 	and.w	r3, r3, #7
 800c2e4:	4a04      	ldr	r2, [pc, #16]	; (800c2f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c2e6:	5cd3      	ldrb	r3, [r2, r3]
 800c2e8:	f003 031f 	and.w	r3, r3, #31
 800c2ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	40021000 	.word	0x40021000
 800c2f8:	08014f3c 	.word	0x08014f3c

0800c2fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c304:	2300      	movs	r3, #0
 800c306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c308:	4b2a      	ldr	r3, [pc, #168]	; (800c3b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c30a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d003      	beq.n	800c31c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c314:	f7ff f938 	bl	800b588 <HAL_PWREx_GetVoltageRange>
 800c318:	6178      	str	r0, [r7, #20]
 800c31a:	e014      	b.n	800c346 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c31c:	4b25      	ldr	r3, [pc, #148]	; (800c3b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c320:	4a24      	ldr	r2, [pc, #144]	; (800c3b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c326:	6593      	str	r3, [r2, #88]	; 0x58
 800c328:	4b22      	ldr	r3, [pc, #136]	; (800c3b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c334:	f7ff f928 	bl	800b588 <HAL_PWREx_GetVoltageRange>
 800c338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c33a:	4b1e      	ldr	r3, [pc, #120]	; (800c3b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33e:	4a1d      	ldr	r2, [pc, #116]	; (800c3b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c344:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c34c:	d10b      	bne.n	800c366 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b80      	cmp	r3, #128	; 0x80
 800c352:	d919      	bls.n	800c388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2ba0      	cmp	r3, #160	; 0xa0
 800c358:	d902      	bls.n	800c360 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c35a:	2302      	movs	r3, #2
 800c35c:	613b      	str	r3, [r7, #16]
 800c35e:	e013      	b.n	800c388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c360:	2301      	movs	r3, #1
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	e010      	b.n	800c388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b80      	cmp	r3, #128	; 0x80
 800c36a:	d902      	bls.n	800c372 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c36c:	2303      	movs	r3, #3
 800c36e:	613b      	str	r3, [r7, #16]
 800c370:	e00a      	b.n	800c388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b80      	cmp	r3, #128	; 0x80
 800c376:	d102      	bne.n	800c37e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c378:	2302      	movs	r3, #2
 800c37a:	613b      	str	r3, [r7, #16]
 800c37c:	e004      	b.n	800c388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b70      	cmp	r3, #112	; 0x70
 800c382:	d101      	bne.n	800c388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c384:	2301      	movs	r3, #1
 800c386:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c388:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f023 0207 	bic.w	r2, r3, #7
 800c390:	4909      	ldr	r1, [pc, #36]	; (800c3b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	4313      	orrs	r3, r2
 800c396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c398:	4b07      	ldr	r3, [pc, #28]	; (800c3b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0307 	and.w	r3, r3, #7
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d001      	beq.n	800c3aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	40021000 	.word	0x40021000
 800c3b8:	40022000 	.word	0x40022000

0800c3bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d03f      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3e0:	d01c      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x60>
 800c3e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3e6:	d802      	bhi.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c3ec:	e01f      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800c3ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3f2:	d003      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 800c3f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c3f8:	d01c      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800c3fa:	e018      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c3fc:	4b85      	ldr	r3, [pc, #532]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	4a84      	ldr	r2, [pc, #528]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c406:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c408:	e015      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3304      	adds	r3, #4
 800c40e:	2100      	movs	r1, #0
 800c410:	4618      	mov	r0, r3
 800c412:	f000 fac9 	bl	800c9a8 <RCCEx_PLLSAI1_Config>
 800c416:	4603      	mov	r3, r0
 800c418:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c41a:	e00c      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3320      	adds	r3, #32
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fbb0 	bl	800cb88 <RCCEx_PLLSAI2_Config>
 800c428:	4603      	mov	r3, r0
 800c42a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c42c:	e003      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	74fb      	strb	r3, [r7, #19]
      break;
 800c432:	e000      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800c434:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c436:	7cfb      	ldrb	r3, [r7, #19]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10b      	bne.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c43c:	4b75      	ldr	r3, [pc, #468]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c44a:	4972      	ldr	r1, [pc, #456]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c44c:	4313      	orrs	r3, r2
 800c44e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c452:	e001      	b.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c454:	7cfb      	ldrb	r3, [r7, #19]
 800c456:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d03f      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c46c:	d01c      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800c46e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c472:	d802      	bhi.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00e      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800c478:	e01f      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c47a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c47e:	d003      	beq.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800c480:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c484:	d01c      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800c486:	e018      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c488:	4b62      	ldr	r3, [pc, #392]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	4a61      	ldr	r2, [pc, #388]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c48e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c492:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c494:	e015      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3304      	adds	r3, #4
 800c49a:	2100      	movs	r1, #0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 fa83 	bl	800c9a8 <RCCEx_PLLSAI1_Config>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c4a6:	e00c      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3320      	adds	r3, #32
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 fb6a 	bl	800cb88 <RCCEx_PLLSAI2_Config>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c4b8:	e003      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	74fb      	strb	r3, [r7, #19]
      break;
 800c4be:	e000      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c4c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4c2:	7cfb      	ldrb	r3, [r7, #19]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10b      	bne.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c4c8:	4b52      	ldr	r3, [pc, #328]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4d6:	494f      	ldr	r1, [pc, #316]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c4de:	e001      	b.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e0:	7cfb      	ldrb	r3, [r7, #19]
 800c4e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80a0 	beq.w	800c632 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c4f6:	4b47      	ldr	r3, [pc, #284]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800c506:	2300      	movs	r3, #0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00d      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c50c:	4b41      	ldr	r3, [pc, #260]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c510:	4a40      	ldr	r2, [pc, #256]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c516:	6593      	str	r3, [r2, #88]	; 0x58
 800c518:	4b3e      	ldr	r3, [pc, #248]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c51c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c520:	60bb      	str	r3, [r7, #8]
 800c522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c524:	2301      	movs	r3, #1
 800c526:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c528:	4b3b      	ldr	r3, [pc, #236]	; (800c618 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a3a      	ldr	r2, [pc, #232]	; (800c618 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800c52e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c534:	f7fd f94e 	bl	80097d4 <HAL_GetTick>
 800c538:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c53a:	e009      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c53c:	f7fd f94a 	bl	80097d4 <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	2b02      	cmp	r3, #2
 800c548:	d902      	bls.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	74fb      	strb	r3, [r7, #19]
        break;
 800c54e:	e005      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c550:	4b31      	ldr	r3, [pc, #196]	; (800c618 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0ef      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800c55c:	7cfb      	ldrb	r3, [r7, #19]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d15c      	bne.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c562:	4b2c      	ldr	r3, [pc, #176]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c56c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d01f      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d019      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c580:	4b24      	ldr	r3, [pc, #144]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c58a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c58c:	4b21      	ldr	r3, [pc, #132]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c592:	4a20      	ldr	r2, [pc, #128]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c59c:	4b1d      	ldr	r3, [pc, #116]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a2:	4a1c      	ldr	r2, [pc, #112]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c5a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c5ac:	4a19      	ldr	r2, [pc, #100]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d016      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5be:	f7fd f909 	bl	80097d4 <HAL_GetTick>
 800c5c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5c4:	e00b      	b.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5c6:	f7fd f905 	bl	80097d4 <HAL_GetTick>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d902      	bls.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	74fb      	strb	r3, [r7, #19]
            break;
 800c5dc:	e006      	b.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5de:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e4:	f003 0302 	and.w	r3, r3, #2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d0ec      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800c5ec:	7cfb      	ldrb	r3, [r7, #19]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10c      	bne.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5f2:	4b08      	ldr	r3, [pc, #32]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c602:	4904      	ldr	r1, [pc, #16]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c604:	4313      	orrs	r3, r2
 800c606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c60a:	e009      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c60c:	7cfb      	ldrb	r3, [r7, #19]
 800c60e:	74bb      	strb	r3, [r7, #18]
 800c610:	e006      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800c612:	bf00      	nop
 800c614:	40021000 	.word	0x40021000
 800c618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c61c:	7cfb      	ldrb	r3, [r7, #19]
 800c61e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c620:	7c7b      	ldrb	r3, [r7, #17]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d105      	bne.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c626:	4b9e      	ldr	r3, [pc, #632]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c62a:	4a9d      	ldr	r2, [pc, #628]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c62c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c630:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c63e:	4b98      	ldr	r3, [pc, #608]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c644:	f023 0203 	bic.w	r2, r3, #3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	4994      	ldr	r1, [pc, #592]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c64e:	4313      	orrs	r3, r2
 800c650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00a      	beq.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c660:	4b8f      	ldr	r3, [pc, #572]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c666:	f023 020c 	bic.w	r2, r3, #12
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66e:	498c      	ldr	r1, [pc, #560]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c670:	4313      	orrs	r3, r2
 800c672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0304 	and.w	r3, r3, #4
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00a      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c682:	4b87      	ldr	r3, [pc, #540]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c690:	4983      	ldr	r1, [pc, #524]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c692:	4313      	orrs	r3, r2
 800c694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0308 	and.w	r3, r3, #8
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00a      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c6a4:	4b7e      	ldr	r3, [pc, #504]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b2:	497b      	ldr	r1, [pc, #492]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0310 	and.w	r3, r3, #16
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00a      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c6c6:	4b76      	ldr	r3, [pc, #472]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6d4:	4972      	ldr	r1, [pc, #456]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0320 	and.w	r3, r3, #32
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00a      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c6e8:	4b6d      	ldr	r3, [pc, #436]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f6:	496a      	ldr	r1, [pc, #424]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00a      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c70a:	4b65      	ldr	r3, [pc, #404]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c710:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c718:	4961      	ldr	r1, [pc, #388]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c71a:	4313      	orrs	r3, r2
 800c71c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c72c:	4b5c      	ldr	r3, [pc, #368]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c73a:	4959      	ldr	r1, [pc, #356]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c73c:	4313      	orrs	r3, r2
 800c73e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c74e:	4b54      	ldr	r3, [pc, #336]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c75c:	4950      	ldr	r1, [pc, #320]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00a      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c770:	4b4b      	ldr	r3, [pc, #300]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77e:	4948      	ldr	r1, [pc, #288]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c780:	4313      	orrs	r3, r2
 800c782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00a      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c792:	4b43      	ldr	r3, [pc, #268]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a0:	493f      	ldr	r1, [pc, #252]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d028      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c7b4:	4b3a      	ldr	r3, [pc, #232]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c2:	4937      	ldr	r1, [pc, #220]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7d2:	d106      	bne.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c7d4:	4b32      	ldr	r3, [pc, #200]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	4a31      	ldr	r2, [pc, #196]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c7da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7de:	60d3      	str	r3, [r2, #12]
 800c7e0:	e011      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7ea:	d10c      	bne.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 f8d8 	bl	800c9a8 <RCCEx_PLLSAI1_Config>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c7fc:	7cfb      	ldrb	r3, [r7, #19]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800c802:	7cfb      	ldrb	r3, [r7, #19]
 800c804:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d028      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c812:	4b23      	ldr	r3, [pc, #140]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c818:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	491f      	ldr	r1, [pc, #124]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c822:	4313      	orrs	r3, r2
 800c824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c830:	d106      	bne.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c832:	4b1b      	ldr	r3, [pc, #108]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	4a1a      	ldr	r2, [pc, #104]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c83c:	60d3      	str	r3, [r2, #12]
 800c83e:	e011      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c848:	d10c      	bne.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3304      	adds	r3, #4
 800c84e:	2101      	movs	r1, #1
 800c850:	4618      	mov	r0, r3
 800c852:	f000 f8a9 	bl	800c9a8 <RCCEx_PLLSAI1_Config>
 800c856:	4603      	mov	r3, r0
 800c858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c85a:	7cfb      	ldrb	r3, [r7, #19]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800c860:	7cfb      	ldrb	r3, [r7, #19]
 800c862:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d02b      	beq.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c870:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c87e:	4908      	ldr	r1, [pc, #32]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c880:	4313      	orrs	r3, r2
 800c882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c88a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c88e:	d109      	bne.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c890:	4b03      	ldr	r3, [pc, #12]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	4a02      	ldr	r2, [pc, #8]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800c896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c89a:	60d3      	str	r3, [r2, #12]
 800c89c:	e014      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800c89e:	bf00      	nop
 800c8a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8ac:	d10c      	bne.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f877 	bl	800c9a8 <RCCEx_PLLSAI1_Config>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c8be:	7cfb      	ldrb	r3, [r7, #19]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800c8c4:	7cfb      	ldrb	r3, [r7, #19]
 800c8c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d02f      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c8d4:	4b2b      	ldr	r3, [pc, #172]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8e2:	4928      	ldr	r1, [pc, #160]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8f2:	d10d      	bne.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	2102      	movs	r1, #2
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 f854 	bl	800c9a8 <RCCEx_PLLSAI1_Config>
 800c900:	4603      	mov	r3, r0
 800c902:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c904:	7cfb      	ldrb	r3, [r7, #19]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d014      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800c90a:	7cfb      	ldrb	r3, [r7, #19]
 800c90c:	74bb      	strb	r3, [r7, #18]
 800c90e:	e011      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c918:	d10c      	bne.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3320      	adds	r3, #32
 800c91e:	2102      	movs	r1, #2
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f931 	bl	800cb88 <RCCEx_PLLSAI2_Config>
 800c926:	4603      	mov	r3, r0
 800c928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c92a:	7cfb      	ldrb	r3, [r7, #19]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800c930:	7cfb      	ldrb	r3, [r7, #19]
 800c932:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00a      	beq.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c940:	4b10      	ldr	r3, [pc, #64]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c946:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c94e:	490d      	ldr	r1, [pc, #52]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c950:	4313      	orrs	r3, r2
 800c952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00b      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c962:	4b08      	ldr	r3, [pc, #32]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c968:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c972:	4904      	ldr	r1, [pc, #16]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c974:	4313      	orrs	r3, r2
 800c976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c97a:	7cbb      	ldrb	r3, [r7, #18]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	40021000 	.word	0x40021000

0800c988 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800c988:	b480      	push	{r7}
 800c98a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a04      	ldr	r2, [pc, #16]	; (800c9a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c992:	f043 0304 	orr.w	r3, r3, #4
 800c996:	6013      	str	r3, [r2, #0]
}
 800c998:	bf00      	nop
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	40021000 	.word	0x40021000

0800c9a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c9b6:	4b73      	ldr	r3, [pc, #460]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d018      	beq.n	800c9f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c9c2:	4b70      	ldr	r3, [pc, #448]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	f003 0203 	and.w	r2, r3, #3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d10d      	bne.n	800c9ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
       ||
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d009      	beq.n	800c9ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c9da:	4b6a      	ldr	r3, [pc, #424]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	091b      	lsrs	r3, r3, #4
 800c9e0:	f003 0307 	and.w	r3, r3, #7
 800c9e4:	1c5a      	adds	r2, r3, #1
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
       ||
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d044      	beq.n	800ca78 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	73fb      	strb	r3, [r7, #15]
 800c9f2:	e041      	b.n	800ca78 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d00c      	beq.n	800ca16 <RCCEx_PLLSAI1_Config+0x6e>
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d013      	beq.n	800ca28 <RCCEx_PLLSAI1_Config+0x80>
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d120      	bne.n	800ca46 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ca04:	4b5f      	ldr	r3, [pc, #380]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d11d      	bne.n	800ca4c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca14:	e01a      	b.n	800ca4c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ca16:	4b5b      	ldr	r3, [pc, #364]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d116      	bne.n	800ca50 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca26:	e013      	b.n	800ca50 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ca28:	4b56      	ldr	r3, [pc, #344]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10f      	bne.n	800ca54 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ca34:	4b53      	ldr	r3, [pc, #332]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d109      	bne.n	800ca54 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca44:	e006      	b.n	800ca54 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	73fb      	strb	r3, [r7, #15]
      break;
 800ca4a:	e004      	b.n	800ca56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800ca4c:	bf00      	nop
 800ca4e:	e002      	b.n	800ca56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800ca50:	bf00      	nop
 800ca52:	e000      	b.n	800ca56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800ca54:	bf00      	nop
    }

    if(status == HAL_OK)
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10d      	bne.n	800ca78 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ca5c:	4b49      	ldr	r3, [pc, #292]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6819      	ldr	r1, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	011b      	lsls	r3, r3, #4
 800ca70:	430b      	orrs	r3, r1
 800ca72:	4944      	ldr	r1, [pc, #272]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d17d      	bne.n	800cb7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ca7e:	4b41      	ldr	r3, [pc, #260]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a40      	ldr	r2, [pc, #256]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ca84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca8a:	f7fc fea3 	bl	80097d4 <HAL_GetTick>
 800ca8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ca90:	e009      	b.n	800caa6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ca92:	f7fc fe9f 	bl	80097d4 <HAL_GetTick>
 800ca96:	4602      	mov	r2, r0
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d902      	bls.n	800caa6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800caa0:	2303      	movs	r3, #3
 800caa2:	73fb      	strb	r3, [r7, #15]
        break;
 800caa4:	e005      	b.n	800cab2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800caa6:	4b37      	ldr	r3, [pc, #220]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1ef      	bne.n	800ca92 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d160      	bne.n	800cb7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d111      	bne.n	800cae2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cabe:	4b31      	ldr	r3, [pc, #196]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800cac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	6892      	ldr	r2, [r2, #8]
 800cace:	0211      	lsls	r1, r2, #8
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	68d2      	ldr	r2, [r2, #12]
 800cad4:	0912      	lsrs	r2, r2, #4
 800cad6:	0452      	lsls	r2, r2, #17
 800cad8:	430a      	orrs	r2, r1
 800cada:	492a      	ldr	r1, [pc, #168]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cadc:	4313      	orrs	r3, r2
 800cade:	610b      	str	r3, [r1, #16]
 800cae0:	e027      	b.n	800cb32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d112      	bne.n	800cb0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cae8:	4b26      	ldr	r3, [pc, #152]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800caf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	6892      	ldr	r2, [r2, #8]
 800caf8:	0211      	lsls	r1, r2, #8
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6912      	ldr	r2, [r2, #16]
 800cafe:	0852      	lsrs	r2, r2, #1
 800cb00:	3a01      	subs	r2, #1
 800cb02:	0552      	lsls	r2, r2, #21
 800cb04:	430a      	orrs	r2, r1
 800cb06:	491f      	ldr	r1, [pc, #124]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	610b      	str	r3, [r1, #16]
 800cb0c:	e011      	b.n	800cb32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cb16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	6892      	ldr	r2, [r2, #8]
 800cb1e:	0211      	lsls	r1, r2, #8
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	6952      	ldr	r2, [r2, #20]
 800cb24:	0852      	lsrs	r2, r2, #1
 800cb26:	3a01      	subs	r2, #1
 800cb28:	0652      	lsls	r2, r2, #25
 800cb2a:	430a      	orrs	r2, r1
 800cb2c:	4915      	ldr	r1, [pc, #84]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cb32:	4b14      	ldr	r3, [pc, #80]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a13      	ldr	r2, [pc, #76]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb3e:	f7fc fe49 	bl	80097d4 <HAL_GetTick>
 800cb42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cb44:	e009      	b.n	800cb5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cb46:	f7fc fe45 	bl	80097d4 <HAL_GetTick>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d902      	bls.n	800cb5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	73fb      	strb	r3, [r7, #15]
          break;
 800cb58:	e005      	b.n	800cb66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cb5a:	4b0a      	ldr	r3, [pc, #40]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d0ef      	beq.n	800cb46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d106      	bne.n	800cb7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cb6c:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb6e:	691a      	ldr	r2, [r3, #16]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	699b      	ldr	r3, [r3, #24]
 800cb74:	4903      	ldr	r1, [pc, #12]	; (800cb84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	40021000 	.word	0x40021000

0800cb88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb96:	4b68      	ldr	r3, [pc, #416]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d018      	beq.n	800cbd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cba2:	4b65      	ldr	r3, [pc, #404]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	f003 0203 	and.w	r2, r3, #3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d10d      	bne.n	800cbce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
       ||
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d009      	beq.n	800cbce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cbba:	4b5f      	ldr	r3, [pc, #380]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	091b      	lsrs	r3, r3, #4
 800cbc0:	f003 0307 	and.w	r3, r3, #7
 800cbc4:	1c5a      	adds	r2, r3, #1
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
       ||
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d044      	beq.n	800cc58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	73fb      	strb	r3, [r7, #15]
 800cbd2:	e041      	b.n	800cc58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d00c      	beq.n	800cbf6 <RCCEx_PLLSAI2_Config+0x6e>
 800cbdc:	2b03      	cmp	r3, #3
 800cbde:	d013      	beq.n	800cc08 <RCCEx_PLLSAI2_Config+0x80>
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d120      	bne.n	800cc26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cbe4:	4b54      	ldr	r3, [pc, #336]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d11d      	bne.n	800cc2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbf4:	e01a      	b.n	800cc2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cbf6:	4b50      	ldr	r3, [pc, #320]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d116      	bne.n	800cc30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc06:	e013      	b.n	800cc30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc08:	4b4b      	ldr	r3, [pc, #300]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10f      	bne.n	800cc34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cc14:	4b48      	ldr	r3, [pc, #288]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d109      	bne.n	800cc34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc24:	e006      	b.n	800cc34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	73fb      	strb	r3, [r7, #15]
      break;
 800cc2a:	e004      	b.n	800cc36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800cc2c:	bf00      	nop
 800cc2e:	e002      	b.n	800cc36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800cc30:	bf00      	nop
 800cc32:	e000      	b.n	800cc36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800cc34:	bf00      	nop
    }

    if(status == HAL_OK)
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10d      	bne.n	800cc58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cc3c:	4b3e      	ldr	r3, [pc, #248]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6819      	ldr	r1, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	430b      	orrs	r3, r1
 800cc52:	4939      	ldr	r1, [pc, #228]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc54:	4313      	orrs	r3, r2
 800cc56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d167      	bne.n	800cd2e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800cc5e:	4b36      	ldr	r3, [pc, #216]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a35      	ldr	r2, [pc, #212]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc6a:	f7fc fdb3 	bl	80097d4 <HAL_GetTick>
 800cc6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cc70:	e009      	b.n	800cc86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cc72:	f7fc fdaf 	bl	80097d4 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d902      	bls.n	800cc86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	73fb      	strb	r3, [r7, #15]
        break;
 800cc84:	e005      	b.n	800cc92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cc86:	4b2c      	ldr	r3, [pc, #176]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1ef      	bne.n	800cc72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d14a      	bne.n	800cd2e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d111      	bne.n	800ccc2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cc9e:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800cca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	6892      	ldr	r2, [r2, #8]
 800ccae:	0211      	lsls	r1, r2, #8
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	68d2      	ldr	r2, [r2, #12]
 800ccb4:	0912      	lsrs	r2, r2, #4
 800ccb6:	0452      	lsls	r2, r2, #17
 800ccb8:	430a      	orrs	r2, r1
 800ccba:	491f      	ldr	r1, [pc, #124]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	614b      	str	r3, [r1, #20]
 800ccc0:	e011      	b.n	800cce6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ccc2:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ccca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	6892      	ldr	r2, [r2, #8]
 800ccd2:	0211      	lsls	r1, r2, #8
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	6912      	ldr	r2, [r2, #16]
 800ccd8:	0852      	lsrs	r2, r2, #1
 800ccda:	3a01      	subs	r2, #1
 800ccdc:	0652      	lsls	r2, r2, #25
 800ccde:	430a      	orrs	r2, r1
 800cce0:	4915      	ldr	r1, [pc, #84]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cce2:	4313      	orrs	r3, r2
 800cce4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800cce6:	4b14      	ldr	r3, [pc, #80]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a13      	ldr	r2, [pc, #76]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ccec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccf2:	f7fc fd6f 	bl	80097d4 <HAL_GetTick>
 800ccf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ccf8:	e009      	b.n	800cd0e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ccfa:	f7fc fd6b 	bl	80097d4 <HAL_GetTick>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d902      	bls.n	800cd0e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	73fb      	strb	r3, [r7, #15]
          break;
 800cd0c:	e005      	b.n	800cd1a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cd0e:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d0ef      	beq.n	800ccfa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d106      	bne.n	800cd2e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cd22:	695a      	ldr	r2, [r3, #20]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	4903      	ldr	r1, [pc, #12]	; (800cd38 <RCCEx_PLLSAI2_Config+0x1b0>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	40021000 	.word	0x40021000

0800cd3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d101      	bne.n	800cd4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e095      	b.n	800ce7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d108      	bne.n	800cd68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd5e:	d009      	beq.n	800cd74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	61da      	str	r2, [r3, #28]
 800cd66:	e005      	b.n	800cd74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7f6 fab2 	bl	80032f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdb4:	d902      	bls.n	800cdbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	e002      	b.n	800cdc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cdbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cdca:	d007      	beq.n	800cddc <HAL_SPI_Init+0xa0>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdd4:	d002      	beq.n	800cddc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cdec:	431a      	orrs	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	f003 0301 	and.w	r3, r3, #1
 800ce00:	431a      	orrs	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce14:	431a      	orrs	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1e:	ea42 0103 	orr.w	r1, r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	0c1b      	lsrs	r3, r3, #16
 800ce38:	f003 0204 	and.w	r2, r3, #4
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	f003 0310 	and.w	r3, r3, #16
 800ce44:	431a      	orrs	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4a:	f003 0308 	and.w	r3, r3, #8
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ce58:	ea42 0103 	orr.w	r1, r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	e01a      	b.n	800ceca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2202      	movs	r2, #2
 800ce98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceaa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7f6 fa67 	bl	8003380 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b088      	sub	sp, #32
 800ced6:	af02      	add	r7, sp, #8
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	603b      	str	r3, [r7, #0]
 800cede:	4613      	mov	r3, r2
 800cee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ceee:	d112      	bne.n	800cf16 <HAL_SPI_Receive+0x44>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10e      	bne.n	800cf16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2204      	movs	r2, #4
 800cefc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cf00:	88fa      	ldrh	r2, [r7, #6]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	4613      	mov	r3, r2
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	68b9      	ldr	r1, [r7, #8]
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f000 f910 	bl	800d132 <HAL_SPI_TransmitReceive>
 800cf12:	4603      	mov	r3, r0
 800cf14:	e109      	b.n	800d12a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d101      	bne.n	800cf24 <HAL_SPI_Receive+0x52>
 800cf20:	2302      	movs	r3, #2
 800cf22:	e102      	b.n	800d12a <HAL_SPI_Receive+0x258>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf2c:	f7fc fc52 	bl	80097d4 <HAL_GetTick>
 800cf30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d002      	beq.n	800cf44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf42:	e0e9      	b.n	800d118 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <HAL_SPI_Receive+0x7e>
 800cf4a:	88fb      	ldrh	r3, [r7, #6]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf54:	e0e0      	b.n	800d118 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2204      	movs	r2, #4
 800cf5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	88fa      	ldrh	r2, [r7, #6]
 800cf6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	88fa      	ldrh	r2, [r7, #6]
 800cf76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cfa0:	d908      	bls.n	800cfb4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cfb0:	605a      	str	r2, [r3, #4]
 800cfb2:	e007      	b.n	800cfc4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cfc2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfcc:	d10f      	bne.n	800cfee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cfec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff8:	2b40      	cmp	r3, #64	; 0x40
 800cffa:	d007      	beq.n	800d00c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d00a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d014:	d867      	bhi.n	800d0e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d016:	e030      	b.n	800d07a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b01      	cmp	r3, #1
 800d024:	d117      	bne.n	800d056 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f103 020c 	add.w	r2, r3, #12
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	7812      	ldrb	r2, [r2, #0]
 800d034:	b2d2      	uxtb	r2, r2
 800d036:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d048:	b29b      	uxth	r3, r3
 800d04a:	3b01      	subs	r3, #1
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d054:	e011      	b.n	800d07a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d056:	f7fc fbbd 	bl	80097d4 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	429a      	cmp	r2, r3
 800d064:	d803      	bhi.n	800d06e <HAL_SPI_Receive+0x19c>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06c:	d102      	bne.n	800d074 <HAL_SPI_Receive+0x1a2>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d078:	e04e      	b.n	800d118 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d080:	b29b      	uxth	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1c8      	bne.n	800d018 <HAL_SPI_Receive+0x146>
 800d086:	e034      	b.n	800d0f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b01      	cmp	r3, #1
 800d094:	d115      	bne.n	800d0c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68da      	ldr	r2, [r3, #12]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a0:	b292      	uxth	r2, r2
 800d0a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a8:	1c9a      	adds	r2, r3, #2
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d0c0:	e011      	b.n	800d0e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0c2:	f7fc fb87 	bl	80097d4 <HAL_GetTick>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d803      	bhi.n	800d0da <HAL_SPI_Receive+0x208>
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d8:	d102      	bne.n	800d0e0 <HAL_SPI_Receive+0x20e>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d0e4:	e018      	b.n	800d118 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1ca      	bne.n	800d088 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 fffa 	bl	800e0f0 <SPI_EndRxTransaction>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2220      	movs	r2, #32
 800d106:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	75fb      	strb	r3, [r7, #23]
 800d114:	e000      	b.n	800d118 <HAL_SPI_Receive+0x246>
  }

error :
 800d116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d128:	7dfb      	ldrb	r3, [r7, #23]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b08a      	sub	sp, #40	; 0x28
 800d136:	af00      	add	r7, sp, #0
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	607a      	str	r2, [r7, #4]
 800d13e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d140:	2301      	movs	r3, #1
 800d142:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d150:	2b01      	cmp	r3, #1
 800d152:	d101      	bne.n	800d158 <HAL_SPI_TransmitReceive+0x26>
 800d154:	2302      	movs	r3, #2
 800d156:	e1fb      	b.n	800d550 <HAL_SPI_TransmitReceive+0x41e>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d160:	f7fc fb38 	bl	80097d4 <HAL_GetTick>
 800d164:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d16c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800d174:	887b      	ldrh	r3, [r7, #2]
 800d176:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800d178:	887b      	ldrh	r3, [r7, #2]
 800d17a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d17c:	7efb      	ldrb	r3, [r7, #27]
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d00e      	beq.n	800d1a0 <HAL_SPI_TransmitReceive+0x6e>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d188:	d106      	bne.n	800d198 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <HAL_SPI_TransmitReceive+0x66>
 800d192:	7efb      	ldrb	r3, [r7, #27]
 800d194:	2b04      	cmp	r3, #4
 800d196:	d003      	beq.n	800d1a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800d198:	2302      	movs	r3, #2
 800d19a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d19e:	e1cd      	b.n	800d53c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d005      	beq.n	800d1b2 <HAL_SPI_TransmitReceive+0x80>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <HAL_SPI_TransmitReceive+0x80>
 800d1ac:	887b      	ldrh	r3, [r7, #2]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d103      	bne.n	800d1ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d1b8:	e1c0      	b.n	800d53c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d003      	beq.n	800d1ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2205      	movs	r2, #5
 800d1ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	887a      	ldrh	r2, [r7, #2]
 800d1de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	887a      	ldrh	r2, [r7, #2]
 800d1e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	887a      	ldrh	r2, [r7, #2]
 800d1f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	887a      	ldrh	r2, [r7, #2]
 800d1fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d210:	d802      	bhi.n	800d218 <HAL_SPI_TransmitReceive+0xe6>
 800d212:	8a3b      	ldrh	r3, [r7, #16]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d908      	bls.n	800d22a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d226:	605a      	str	r2, [r3, #4]
 800d228:	e007      	b.n	800d23a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d238:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d244:	2b40      	cmp	r3, #64	; 0x40
 800d246:	d007      	beq.n	800d258 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d260:	d97c      	bls.n	800d35c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <HAL_SPI_TransmitReceive+0x13e>
 800d26a:	8a7b      	ldrh	r3, [r7, #18]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d169      	bne.n	800d344 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d274:	881a      	ldrh	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d280:	1c9a      	adds	r2, r3, #2
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	3b01      	subs	r3, #1
 800d28e:	b29a      	uxth	r2, r3
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d294:	e056      	b.n	800d344 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d11b      	bne.n	800d2dc <HAL_SPI_TransmitReceive+0x1aa>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d016      	beq.n	800d2dc <HAL_SPI_TransmitReceive+0x1aa>
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d113      	bne.n	800d2dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b8:	881a      	ldrh	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c4:	1c9a      	adds	r2, r3, #2
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d11c      	bne.n	800d324 <HAL_SPI_TransmitReceive+0x1f2>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d016      	beq.n	800d324 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d300:	b292      	uxth	r2, r2
 800d302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d308:	1c9a      	adds	r2, r3, #2
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d314:	b29b      	uxth	r3, r3
 800d316:	3b01      	subs	r3, #1
 800d318:	b29a      	uxth	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d320:	2301      	movs	r3, #1
 800d322:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d324:	f7fc fa56 	bl	80097d4 <HAL_GetTick>
 800d328:	4602      	mov	r2, r0
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d330:	429a      	cmp	r2, r3
 800d332:	d807      	bhi.n	800d344 <HAL_SPI_TransmitReceive+0x212>
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33a:	d003      	beq.n	800d344 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800d33c:	2303      	movs	r3, #3
 800d33e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d342:	e0fb      	b.n	800d53c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1a3      	bne.n	800d296 <HAL_SPI_TransmitReceive+0x164>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d354:	b29b      	uxth	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d19d      	bne.n	800d296 <HAL_SPI_TransmitReceive+0x164>
 800d35a:	e0df      	b.n	800d51c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <HAL_SPI_TransmitReceive+0x23a>
 800d364:	8a7b      	ldrh	r3, [r7, #18]
 800d366:	2b01      	cmp	r3, #1
 800d368:	f040 80cb 	bne.w	800d502 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d370:	b29b      	uxth	r3, r3
 800d372:	2b01      	cmp	r3, #1
 800d374:	d912      	bls.n	800d39c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37a:	881a      	ldrh	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	1c9a      	adds	r2, r3, #2
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d390:	b29b      	uxth	r3, r3
 800d392:	3b02      	subs	r3, #2
 800d394:	b29a      	uxth	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d39a:	e0b2      	b.n	800d502 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	330c      	adds	r3, #12
 800d3a6:	7812      	ldrb	r2, [r2, #0]
 800d3a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d3c2:	e09e      	b.n	800d502 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	f003 0302 	and.w	r3, r3, #2
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d134      	bne.n	800d43c <HAL_SPI_TransmitReceive+0x30a>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d02f      	beq.n	800d43c <HAL_SPI_TransmitReceive+0x30a>
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d12c      	bne.n	800d43c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d912      	bls.n	800d412 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f0:	881a      	ldrh	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fc:	1c9a      	adds	r2, r3, #2
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d406:	b29b      	uxth	r3, r3
 800d408:	3b02      	subs	r3, #2
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d410:	e012      	b.n	800d438 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	330c      	adds	r3, #12
 800d41c:	7812      	ldrb	r2, [r2, #0]
 800d41e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d424:	1c5a      	adds	r2, r3, #1
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d42e:	b29b      	uxth	r3, r3
 800d430:	3b01      	subs	r3, #1
 800d432:	b29a      	uxth	r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d438:	2300      	movs	r3, #0
 800d43a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	2b01      	cmp	r3, #1
 800d448:	d148      	bne.n	800d4dc <HAL_SPI_TransmitReceive+0x3aa>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d450:	b29b      	uxth	r3, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	d042      	beq.n	800d4dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d923      	bls.n	800d4aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68da      	ldr	r2, [r3, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	b292      	uxth	r2, r2
 800d46e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d474:	1c9a      	adds	r2, r3, #2
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b02      	subs	r3, #2
 800d484:	b29a      	uxth	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d492:	b29b      	uxth	r3, r3
 800d494:	2b01      	cmp	r3, #1
 800d496:	d81f      	bhi.n	800d4d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	685a      	ldr	r2, [r3, #4]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d4a6:	605a      	str	r2, [r3, #4]
 800d4a8:	e016      	b.n	800d4d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f103 020c 	add.w	r2, r3, #12
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b6:	7812      	ldrb	r2, [r2, #0]
 800d4b8:	b2d2      	uxtb	r2, r2
 800d4ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d4dc:	f7fc f97a 	bl	80097d4 <HAL_GetTick>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d803      	bhi.n	800d4f4 <HAL_SPI_TransmitReceive+0x3c2>
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d102      	bne.n	800d4fa <HAL_SPI_TransmitReceive+0x3c8>
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d500:	e01c      	b.n	800d53c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d506:	b29b      	uxth	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f47f af5b 	bne.w	800d3c4 <HAL_SPI_TransmitReceive+0x292>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d514:	b29b      	uxth	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	f47f af54 	bne.w	800d3c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d51c:	69fa      	ldr	r2, [r7, #28]
 800d51e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 fe3d 	bl	800e1a0 <SPI_EndRxTxTransaction>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d006      	beq.n	800d53a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2220      	movs	r2, #32
 800d536:	661a      	str	r2, [r3, #96]	; 0x60
 800d538:	e000      	b.n	800d53c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800d53a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d54c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d550:	4618      	mov	r0, r3
 800d552:	3728      	adds	r7, #40	; 0x28
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	4613      	mov	r3, r2
 800d564:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d570:	2b01      	cmp	r3, #1
 800d572:	d101      	bne.n	800d578 <HAL_SPI_Transmit_IT+0x20>
 800d574:	2302      	movs	r3, #2
 800d576:	e072      	b.n	800d65e <HAL_SPI_Transmit_IT+0x106>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <HAL_SPI_Transmit_IT+0x34>
 800d586:	88fb      	ldrh	r3, [r7, #6]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d102      	bne.n	800d592 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d590:	e060      	b.n	800d654 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d002      	beq.n	800d5a4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800d59e:	2302      	movs	r3, #2
 800d5a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d5a2:	e057      	b.n	800d654 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2203      	movs	r2, #3
 800d5a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	88fa      	ldrh	r2, [r7, #6]
 800d5c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d5e8:	d903      	bls.n	800d5f2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	4a1f      	ldr	r2, [pc, #124]	; (800d66c <HAL_SPI_Transmit_IT+0x114>)
 800d5ee:	651a      	str	r2, [r3, #80]	; 0x50
 800d5f0:	e002      	b.n	800d5f8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	4a1e      	ldr	r2, [pc, #120]	; (800d670 <HAL_SPI_Transmit_IT+0x118>)
 800d5f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d600:	d10f      	bne.n	800d622 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d620:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800d630:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d63c:	2b40      	cmp	r3, #64	; 0x40
 800d63e:	d008      	beq.n	800d652 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	e000      	b.n	800d654 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800d652:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	371c      	adds	r7, #28
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	0800de7f 	.word	0x0800de7f
 800d670:	0800de39 	.word	0x0800de39

0800d674 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b086      	sub	sp, #24
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	4613      	mov	r3, r2
 800d680:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d110      	bne.n	800d6b0 <HAL_SPI_Receive_IT+0x3c>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d696:	d10b      	bne.n	800d6b0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2204      	movs	r2, #4
 800d69c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800d6a0:	88fb      	ldrh	r3, [r7, #6]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	68b9      	ldr	r1, [r7, #8]
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f000 f894 	bl	800d7d4 <HAL_SPI_TransmitReceive_IT>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	e089      	b.n	800d7c4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d101      	bne.n	800d6be <HAL_SPI_Receive_IT+0x4a>
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	e082      	b.n	800d7c4 <HAL_SPI_Receive_IT+0x150>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d002      	beq.n	800d6d8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d6d6:	e070      	b.n	800d7ba <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <HAL_SPI_Receive_IT+0x70>
 800d6de:	88fb      	ldrh	r3, [r7, #6]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d102      	bne.n	800d6ea <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d6e8:	e067      	b.n	800d7ba <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	88fa      	ldrh	r2, [r7, #6]
 800d702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	88fa      	ldrh	r2, [r7, #6]
 800d70a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d72e:	d90b      	bls.n	800d748 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d73e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	4a22      	ldr	r2, [pc, #136]	; (800d7cc <HAL_SPI_Receive_IT+0x158>)
 800d744:	64da      	str	r2, [r3, #76]	; 0x4c
 800d746:	e00a      	b.n	800d75e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d756:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	4a1d      	ldr	r2, [pc, #116]	; (800d7d0 <HAL_SPI_Receive_IT+0x15c>)
 800d75c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d766:	d10f      	bne.n	800d788 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d786:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	685a      	ldr	r2, [r3, #4]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d796:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a2:	2b40      	cmp	r3, #64	; 0x40
 800d7a4:	d008      	beq.n	800d7b8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	e000      	b.n	800d7ba <HAL_SPI_Receive_IT+0x146>
  }

error :
 800d7b8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3718      	adds	r7, #24
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	0800dded 	.word	0x0800dded
 800d7d0:	0800dd9d 	.word	0x0800dd9d

0800d7d4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d101      	bne.n	800d7f4 <HAL_SPI_TransmitReceive_IT+0x20>
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	e091      	b.n	800d918 <HAL_SPI_TransmitReceive_IT+0x144>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d802:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d80a:	7dbb      	ldrb	r3, [r7, #22]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d00d      	beq.n	800d82c <HAL_SPI_TransmitReceive_IT+0x58>
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d816:	d106      	bne.n	800d826 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <HAL_SPI_TransmitReceive_IT+0x52>
 800d820:	7dbb      	ldrb	r3, [r7, #22]
 800d822:	2b04      	cmp	r3, #4
 800d824:	d002      	beq.n	800d82c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800d826:	2302      	movs	r3, #2
 800d828:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d82a:	e070      	b.n	800d90e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d005      	beq.n	800d83e <HAL_SPI_TransmitReceive_IT+0x6a>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <HAL_SPI_TransmitReceive_IT+0x6a>
 800d838:	887b      	ldrh	r3, [r7, #2]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d102      	bne.n	800d844 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d842:	e064      	b.n	800d90e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b04      	cmp	r3, #4
 800d84e:	d003      	beq.n	800d858 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2205      	movs	r2, #5
 800d854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	887a      	ldrh	r2, [r7, #2]
 800d868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	887a      	ldrh	r2, [r7, #2]
 800d86e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	887a      	ldrh	r2, [r7, #2]
 800d87a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	887a      	ldrh	r2, [r7, #2]
 800d882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d88e:	d906      	bls.n	800d89e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	4a24      	ldr	r2, [pc, #144]	; (800d924 <HAL_SPI_TransmitReceive_IT+0x150>)
 800d894:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4a23      	ldr	r2, [pc, #140]	; (800d928 <HAL_SPI_TransmitReceive_IT+0x154>)
 800d89a:	651a      	str	r2, [r3, #80]	; 0x50
 800d89c:	e005      	b.n	800d8aa <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	4a22      	ldr	r2, [pc, #136]	; (800d92c <HAL_SPI_TransmitReceive_IT+0x158>)
 800d8a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	4a22      	ldr	r2, [pc, #136]	; (800d930 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800d8a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8b2:	d802      	bhi.n	800d8ba <HAL_SPI_TransmitReceive_IT+0xe6>
 800d8b4:	887b      	ldrh	r3, [r7, #2]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d908      	bls.n	800d8cc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d8c8:	605a      	str	r2, [r3, #4]
 800d8ca:	e007      	b.n	800d8dc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d8da:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800d8ea:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f6:	2b40      	cmp	r3, #64	; 0x40
 800d8f8:	d008      	beq.n	800d90c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	e000      	b.n	800d90e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800d90c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d916:	7dfb      	ldrb	r3, [r7, #23]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	371c      	adds	r7, #28
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	0800dcd7 	.word	0x0800dcd7
 800d928:	0800dd3d 	.word	0x0800dd3d
 800d92c:	0800db87 	.word	0x0800db87
 800d930:	0800dc45 	.word	0x0800dc45

0800d934 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	099b      	lsrs	r3, r3, #6
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10f      	bne.n	800d978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	099b      	lsrs	r3, r3, #6
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d004      	beq.n	800d978 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	4798      	blx	r3
    return;
 800d976:	e0d8      	b.n	800db2a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	085b      	lsrs	r3, r3, #1
 800d97c:	f003 0301 	and.w	r3, r3, #1
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00a      	beq.n	800d99a <HAL_SPI_IRQHandler+0x66>
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	09db      	lsrs	r3, r3, #7
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d004      	beq.n	800d99a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	4798      	blx	r3
    return;
 800d998:	e0c7      	b.n	800db2a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	095b      	lsrs	r3, r3, #5
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10c      	bne.n	800d9c0 <HAL_SPI_IRQHandler+0x8c>
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	099b      	lsrs	r3, r3, #6
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	0a1b      	lsrs	r3, r3, #8
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 80b5 	beq.w	800db2a <HAL_SPI_IRQHandler+0x1f6>
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	095b      	lsrs	r3, r3, #5
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f000 80ae 	beq.w	800db2a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	099b      	lsrs	r3, r3, #6
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d023      	beq.n	800da22 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d011      	beq.n	800da0a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ea:	f043 0204 	orr.w	r2, r3, #4
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	617b      	str	r3, [r7, #20]
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	e00b      	b.n	800da22 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da0a:	2300      	movs	r3, #0
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	613b      	str	r3, [r7, #16]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	613b      	str	r3, [r7, #16]
 800da1e:	693b      	ldr	r3, [r7, #16]
        return;
 800da20:	e083      	b.n	800db2a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	095b      	lsrs	r3, r3, #5
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d014      	beq.n	800da58 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da32:	f043 0201 	orr.w	r2, r3, #1
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800da3a:	2300      	movs	r3, #0
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	60fb      	str	r3, [r7, #12]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	f003 0301 	and.w	r3, r3, #1
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00c      	beq.n	800da7e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da68:	f043 0208 	orr.w	r2, r3, #8
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800da70:	2300      	movs	r3, #0
 800da72:	60bb      	str	r3, [r7, #8]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	60bb      	str	r3, [r7, #8]
 800da7c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da82:	2b00      	cmp	r3, #0
 800da84:	d050      	beq.n	800db28 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	685a      	ldr	r2, [r3, #4]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800da94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f003 0302 	and.w	r3, r3, #2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d104      	bne.n	800dab2 <HAL_SPI_IRQHandler+0x17e>
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d034      	beq.n	800db1c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f022 0203 	bic.w	r2, r2, #3
 800dac0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d011      	beq.n	800daee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dace:	4a18      	ldr	r2, [pc, #96]	; (800db30 <HAL_SPI_IRQHandler+0x1fc>)
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fc f8c8 	bl	8009c6c <HAL_DMA_Abort_IT>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d005      	beq.n	800daee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d016      	beq.n	800db24 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dafa:	4a0d      	ldr	r2, [pc, #52]	; (800db30 <HAL_SPI_IRQHandler+0x1fc>)
 800dafc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db02:	4618      	mov	r0, r3
 800db04:	f7fc f8b2 	bl	8009c6c <HAL_DMA_Abort_IT>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00a      	beq.n	800db24 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800db1a:	e003      	b.n	800db24 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 f813 	bl	800db48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800db22:	e000      	b.n	800db26 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800db24:	bf00      	nop
    return;
 800db26:	bf00      	nop
 800db28:	bf00      	nop
  }
}
 800db2a:	3720      	adds	r7, #32
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	0800db5d 	.word	0x0800db5d

0800db34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	f7ff ffe5 	bl	800db48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db7e:	bf00      	nop
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db94:	b29b      	uxth	r3, r3
 800db96:	2b01      	cmp	r3, #1
 800db98:	d923      	bls.n	800dbe2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68da      	ldr	r2, [r3, #12]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba4:	b292      	uxth	r2, r2
 800dba6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbac:	1c9a      	adds	r2, r3, #2
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	3b02      	subs	r3, #2
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d11f      	bne.n	800dc10 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbde:	605a      	str	r2, [r3, #4]
 800dbe0:	e016      	b.n	800dc10 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f103 020c 	add.w	r2, r3, #12
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbee:	7812      	ldrb	r2, [r2, #0]
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	3b01      	subs	r3, #1
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10f      	bne.n	800dc3c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800dc2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 faf8 	bl	800e22c <SPI_CloseRxTx_ISR>
    }
  }
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d912      	bls.n	800dc7c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5a:	881a      	ldrh	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc66:	1c9a      	adds	r2, r3, #2
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	3b02      	subs	r3, #2
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc7a:	e012      	b.n	800dca2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	330c      	adds	r3, #12
 800dc86:	7812      	ldrb	r2, [r2, #0]
 800dc88:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d110      	bne.n	800dcce <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 faaf 	bl	800e22c <SPI_CloseRxTx_ISR>
    }
  }
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68da      	ldr	r2, [r3, #12]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce8:	b292      	uxth	r2, r2
 800dcea:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf0:	1c9a      	adds	r2, r3, #2
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10f      	bne.n	800dd34 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fa7c 	bl	800e22c <SPI_CloseRxTx_ISR>
    }
  }
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd48:	881a      	ldrh	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd54:	1c9a      	adds	r2, r3, #2
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3b01      	subs	r3, #1
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d110      	bne.n	800dd94 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd80:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fa4c 	bl	800e22c <SPI_CloseRxTx_ISR>
    }
  }
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f103 020c 	add.w	r2, r3, #12
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb0:	7812      	ldrb	r2, [r2, #0]
 800ddb2:	b2d2      	uxtb	r2, r2
 800ddb4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d102      	bne.n	800dde4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fa66 	bl	800e2b0 <SPI_CloseRx_ISR>
  }
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfe:	b292      	uxth	r2, r2
 800de00:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de06:	1c9a      	adds	r2, r3, #2
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de12:	b29b      	uxth	r3, r3
 800de14:	3b01      	subs	r3, #1
 800de16:	b29a      	uxth	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de24:	b29b      	uxth	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d102      	bne.n	800de30 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fa40 	bl	800e2b0 <SPI_CloseRx_ISR>
  }
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	330c      	adds	r3, #12
 800de4a:	7812      	ldrb	r2, [r2, #0]
 800de4c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	3b01      	subs	r3, #1
 800de60:	b29a      	uxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fa4d 	bl	800e310 <SPI_CloseTx_ISR>
  }
}
 800de76:	bf00      	nop
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b082      	sub	sp, #8
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8a:	881a      	ldrh	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de96:	1c9a      	adds	r2, r3, #2
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	3b01      	subs	r3, #1
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deae:	b29b      	uxth	r3, r3
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fa2b 	bl	800e310 <SPI_CloseTx_ISR>
  }
}
 800deba:	bf00      	nop
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
	...

0800dec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b088      	sub	sp, #32
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	4613      	mov	r3, r2
 800ded2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ded4:	f7fb fc7e 	bl	80097d4 <HAL_GetTick>
 800ded8:	4602      	mov	r2, r0
 800deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	4413      	add	r3, r2
 800dee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dee4:	f7fb fc76 	bl	80097d4 <HAL_GetTick>
 800dee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800deea:	4b39      	ldr	r3, [pc, #228]	; (800dfd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	015b      	lsls	r3, r3, #5
 800def0:	0d1b      	lsrs	r3, r3, #20
 800def2:	69fa      	ldr	r2, [r7, #28]
 800def4:	fb02 f303 	mul.w	r3, r2, r3
 800def8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800defa:	e054      	b.n	800dfa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df02:	d050      	beq.n	800dfa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800df04:	f7fb fc66 	bl	80097d4 <HAL_GetTick>
 800df08:	4602      	mov	r2, r0
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	69fa      	ldr	r2, [r7, #28]
 800df10:	429a      	cmp	r2, r3
 800df12:	d902      	bls.n	800df1a <SPI_WaitFlagStateUntilTimeout+0x56>
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d13d      	bne.n	800df96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800df28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df32:	d111      	bne.n	800df58 <SPI_WaitFlagStateUntilTimeout+0x94>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df3c:	d004      	beq.n	800df48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df46:	d107      	bne.n	800df58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df60:	d10f      	bne.n	800df82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	e017      	b.n	800dfc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800df9c:	2300      	movs	r3, #0
 800df9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	3b01      	subs	r3, #1
 800dfa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	4013      	ands	r3, r2
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	bf0c      	ite	eq
 800dfb6:	2301      	moveq	r3, #1
 800dfb8:	2300      	movne	r3, #0
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d19b      	bne.n	800defc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3720      	adds	r7, #32
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	2000018c 	.word	0x2000018c

0800dfd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b088      	sub	sp, #32
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
 800dfe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800dfe2:	f7fb fbf7 	bl	80097d4 <HAL_GetTick>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	1a9b      	subs	r3, r3, r2
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	4413      	add	r3, r2
 800dff0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dff2:	f7fb fbef 	bl	80097d4 <HAL_GetTick>
 800dff6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800dff8:	4b3c      	ldr	r3, [pc, #240]	; (800e0ec <SPI_WaitFifoStateUntilTimeout+0x118>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	00da      	lsls	r2, r3, #3
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	0d1b      	lsrs	r3, r3, #20
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	fb02 f303 	mul.w	r3, r2, r3
 800e00e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800e010:	e05f      	b.n	800e0d2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e018:	d106      	bne.n	800e028 <SPI_WaitFifoStateUntilTimeout+0x54>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d103      	bne.n	800e028 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	330c      	adds	r3, #12
 800e026:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02e:	d050      	beq.n	800e0d2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e030:	f7fb fbd0 	bl	80097d4 <HAL_GetTick>
 800e034:	4602      	mov	r2, r0
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	69fa      	ldr	r2, [r7, #28]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d902      	bls.n	800e046 <SPI_WaitFifoStateUntilTimeout+0x72>
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d13d      	bne.n	800e0c2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e05e:	d111      	bne.n	800e084 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e068:	d004      	beq.n	800e074 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e072:	d107      	bne.n	800e084 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e08c:	d10f      	bne.n	800e0ae <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e0ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e0be:	2303      	movs	r3, #3
 800e0c0:	e010      	b.n	800e0e4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d101      	bne.n	800e0cc <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	689a      	ldr	r2, [r3, #8]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	4013      	ands	r3, r2
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d197      	bne.n	800e012 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	2000018c 	.word	0x2000018c

0800e0f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af02      	add	r7, sp, #8
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e104:	d111      	bne.n	800e12a <SPI_EndRxTransaction+0x3a>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e10e:	d004      	beq.n	800e11a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e118:	d107      	bne.n	800e12a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e128:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2200      	movs	r2, #0
 800e132:	2180      	movs	r1, #128	; 0x80
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f7ff fec5 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d007      	beq.n	800e150 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e144:	f043 0220 	orr.w	r2, r3, #32
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e023      	b.n	800e198 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e158:	d11d      	bne.n	800e196 <SPI_EndRxTransaction+0xa6>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e162:	d004      	beq.n	800e16e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e16c:	d113      	bne.n	800e196 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2200      	movs	r2, #0
 800e176:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f7ff ff2a 	bl	800dfd4 <SPI_WaitFifoStateUntilTimeout>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e18a:	f043 0220 	orr.w	r2, r3, #32
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e192:	2303      	movs	r3, #3
 800e194:	e000      	b.n	800e198 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f7ff ff0b 	bl	800dfd4 <SPI_WaitFifoStateUntilTimeout>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1c8:	f043 0220 	orr.w	r2, r3, #32
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	e027      	b.n	800e224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	2180      	movs	r1, #128	; 0x80
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff fe70 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d007      	beq.n	800e1fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1ee:	f043 0220 	orr.w	r2, r3, #32
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1f6:	2303      	movs	r3, #3
 800e1f8:	e014      	b.n	800e224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2200      	movs	r2, #0
 800e202:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7ff fee4 	bl	800dfd4 <SPI_WaitFifoStateUntilTimeout>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d007      	beq.n	800e222 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e216:	f043 0220 	orr.w	r2, r3, #32
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e21e:	2303      	movs	r3, #3
 800e220:	e000      	b.n	800e224 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e234:	f7fb face 	bl	80097d4 <HAL_GetTick>
 800e238:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f022 0220 	bic.w	r2, r2, #32
 800e248:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e24a:	68fa      	ldr	r2, [r7, #12]
 800e24c:	2164      	movs	r1, #100	; 0x64
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff ffa6 	bl	800e1a0 <SPI_EndRxTxTransaction>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d005      	beq.n	800e266 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e25e:	f043 0220 	orr.w	r2, r3, #32
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d115      	bne.n	800e29a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b04      	cmp	r3, #4
 800e278:	d107      	bne.n	800e28a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2201      	movs	r2, #1
 800e27e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7f3 fe30 	bl	8001ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800e288:	e00e      	b.n	800e2a8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff fc4e 	bl	800db34 <HAL_SPI_TxRxCpltCallback>
}
 800e298:	e006      	b.n	800e2a8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff fc50 	bl	800db48 <HAL_SPI_ErrorCallback>
}
 800e2a8:	bf00      	nop
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e2c6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800e2c8:	f7fb fa84 	bl	80097d4 <HAL_GetTick>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	2164      	movs	r1, #100	; 0x64
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7ff ff0c 	bl	800e0f0 <SPI_EndRxTransaction>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d005      	beq.n	800e2ea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2e2:	f043 0220 	orr.w	r2, r3, #32
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d103      	bne.n	800e302 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7f3 fdf4 	bl	8001ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800e300:	e002      	b.n	800e308 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff fc20 	bl	800db48 <HAL_SPI_ErrorCallback>
}
 800e308:	bf00      	nop
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e318:	f7fb fa5c 	bl	80097d4 <HAL_GetTick>
 800e31c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e32c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	2164      	movs	r1, #100	; 0x64
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7ff ff34 	bl	800e1a0 <SPI_EndRxTxTransaction>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d005      	beq.n	800e34a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e342:	f043 0220 	orr.w	r2, r3, #32
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10a      	bne.n	800e368 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e352:	2300      	movs	r3, #0
 800e354:	60bb      	str	r3, [r7, #8]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	60bb      	str	r3, [r7, #8]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	60bb      	str	r3, [r7, #8]
 800e366:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff fbe5 	bl	800db48 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e37e:	e002      	b.n	800e386 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7f3 fdc5 	bl	8001f10 <HAL_SPI_TxCpltCallback>
}
 800e386:	bf00      	nop
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b082      	sub	sp, #8
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d101      	bne.n	800e3a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	e040      	b.n	800e422 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d106      	bne.n	800e3b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7f5 f803 	bl	80033bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2224      	movs	r2, #36	; 0x24
 800e3ba:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f022 0201 	bic.w	r2, r2, #1
 800e3ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f8bf 	bl	800e550 <UART_SetConfig>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d101      	bne.n	800e3dc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e022      	b.n	800e422 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fb3d 	bl	800ea64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	689a      	ldr	r2, [r3, #8]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e408:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f042 0201 	orr.w	r2, r2, #1
 800e418:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fbc4 	bl	800eba8 <UART_CheckIdleState>
 800e420:	4603      	mov	r3, r0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b08a      	sub	sp, #40	; 0x28
 800e42e:	af02      	add	r7, sp, #8
 800e430:	60f8      	str	r0, [r7, #12]
 800e432:	60b9      	str	r1, [r7, #8]
 800e434:	603b      	str	r3, [r7, #0]
 800e436:	4613      	mov	r3, r2
 800e438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e43e:	2b20      	cmp	r3, #32
 800e440:	f040 8081 	bne.w	800e546 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d002      	beq.n	800e450 <HAL_UART_Transmit+0x26>
 800e44a:	88fb      	ldrh	r3, [r7, #6]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d101      	bne.n	800e454 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e079      	b.n	800e548 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d101      	bne.n	800e462 <HAL_UART_Transmit+0x38>
 800e45e:	2302      	movs	r3, #2
 800e460:	e072      	b.n	800e548 <HAL_UART_Transmit+0x11e>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2200      	movs	r2, #0
 800e46e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2221      	movs	r2, #33	; 0x21
 800e474:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e476:	f7fb f9ad 	bl	80097d4 <HAL_GetTick>
 800e47a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	88fa      	ldrh	r2, [r7, #6]
 800e480:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	88fa      	ldrh	r2, [r7, #6]
 800e488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e494:	d108      	bne.n	800e4a8 <HAL_UART_Transmit+0x7e>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d104      	bne.n	800e4a8 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	61bb      	str	r3, [r7, #24]
 800e4a6:	e003      	b.n	800e4b0 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800e4b8:	e02d      	b.n	800e516 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2180      	movs	r1, #128	; 0x80
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f000 fbb4 	bl	800ec32 <UART_WaitOnFlagUntilTimeout>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	e039      	b.n	800e548 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10b      	bne.n	800e4f2 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	881a      	ldrh	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4e6:	b292      	uxth	r2, r2
 800e4e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	3302      	adds	r3, #2
 800e4ee:	61bb      	str	r3, [r7, #24]
 800e4f0:	e008      	b.n	800e504 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	781a      	ldrb	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	b292      	uxth	r2, r2
 800e4fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	3301      	adds	r3, #1
 800e502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	3b01      	subs	r3, #1
 800e50e:	b29a      	uxth	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1cb      	bne.n	800e4ba <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	2200      	movs	r2, #0
 800e52a:	2140      	movs	r1, #64	; 0x40
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 fb80 	bl	800ec32 <UART_WaitOnFlagUntilTimeout>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800e538:	2303      	movs	r3, #3
 800e53a:	e005      	b.n	800e548 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2220      	movs	r2, #32
 800e540:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800e542:	2300      	movs	r3, #0
 800e544:	e000      	b.n	800e548 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800e546:	2302      	movs	r3, #2
  }
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3720      	adds	r7, #32
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e550:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e554:	b088      	sub	sp, #32
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	689a      	ldr	r2, [r3, #8]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	431a      	orrs	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	431a      	orrs	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	4313      	orrs	r3, r2
 800e574:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	4bac      	ldr	r3, [pc, #688]	; (800e830 <UART_SetConfig+0x2e0>)
 800e57e:	4013      	ands	r3, r2
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	6812      	ldr	r2, [r2, #0]
 800e584:	69f9      	ldr	r1, [r7, #28]
 800e586:	430b      	orrs	r3, r1
 800e588:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68da      	ldr	r2, [r3, #12]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	430a      	orrs	r2, r1
 800e59e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4aa2      	ldr	r2, [pc, #648]	; (800e834 <UART_SetConfig+0x2e4>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d004      	beq.n	800e5ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a1b      	ldr	r3, [r3, #32]
 800e5b4:	69fa      	ldr	r2, [r7, #28]
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	69fa      	ldr	r2, [r7, #28]
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a99      	ldr	r2, [pc, #612]	; (800e838 <UART_SetConfig+0x2e8>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d121      	bne.n	800e61c <UART_SetConfig+0xcc>
 800e5d8:	4b98      	ldr	r3, [pc, #608]	; (800e83c <UART_SetConfig+0x2ec>)
 800e5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5de:	f003 0303 	and.w	r3, r3, #3
 800e5e2:	2b03      	cmp	r3, #3
 800e5e4:	d816      	bhi.n	800e614 <UART_SetConfig+0xc4>
 800e5e6:	a201      	add	r2, pc, #4	; (adr r2, 800e5ec <UART_SetConfig+0x9c>)
 800e5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ec:	0800e5fd 	.word	0x0800e5fd
 800e5f0:	0800e609 	.word	0x0800e609
 800e5f4:	0800e603 	.word	0x0800e603
 800e5f8:	0800e60f 	.word	0x0800e60f
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	76fb      	strb	r3, [r7, #27]
 800e600:	e0e8      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e602:	2302      	movs	r3, #2
 800e604:	76fb      	strb	r3, [r7, #27]
 800e606:	e0e5      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e608:	2304      	movs	r3, #4
 800e60a:	76fb      	strb	r3, [r7, #27]
 800e60c:	e0e2      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e60e:	2308      	movs	r3, #8
 800e610:	76fb      	strb	r3, [r7, #27]
 800e612:	e0df      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e614:	2310      	movs	r3, #16
 800e616:	76fb      	strb	r3, [r7, #27]
 800e618:	bf00      	nop
 800e61a:	e0db      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a87      	ldr	r2, [pc, #540]	; (800e840 <UART_SetConfig+0x2f0>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d134      	bne.n	800e690 <UART_SetConfig+0x140>
 800e626:	4b85      	ldr	r3, [pc, #532]	; (800e83c <UART_SetConfig+0x2ec>)
 800e628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e62c:	f003 030c 	and.w	r3, r3, #12
 800e630:	2b0c      	cmp	r3, #12
 800e632:	d829      	bhi.n	800e688 <UART_SetConfig+0x138>
 800e634:	a201      	add	r2, pc, #4	; (adr r2, 800e63c <UART_SetConfig+0xec>)
 800e636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63a:	bf00      	nop
 800e63c:	0800e671 	.word	0x0800e671
 800e640:	0800e689 	.word	0x0800e689
 800e644:	0800e689 	.word	0x0800e689
 800e648:	0800e689 	.word	0x0800e689
 800e64c:	0800e67d 	.word	0x0800e67d
 800e650:	0800e689 	.word	0x0800e689
 800e654:	0800e689 	.word	0x0800e689
 800e658:	0800e689 	.word	0x0800e689
 800e65c:	0800e677 	.word	0x0800e677
 800e660:	0800e689 	.word	0x0800e689
 800e664:	0800e689 	.word	0x0800e689
 800e668:	0800e689 	.word	0x0800e689
 800e66c:	0800e683 	.word	0x0800e683
 800e670:	2300      	movs	r3, #0
 800e672:	76fb      	strb	r3, [r7, #27]
 800e674:	e0ae      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e676:	2302      	movs	r3, #2
 800e678:	76fb      	strb	r3, [r7, #27]
 800e67a:	e0ab      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e67c:	2304      	movs	r3, #4
 800e67e:	76fb      	strb	r3, [r7, #27]
 800e680:	e0a8      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e682:	2308      	movs	r3, #8
 800e684:	76fb      	strb	r3, [r7, #27]
 800e686:	e0a5      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e688:	2310      	movs	r3, #16
 800e68a:	76fb      	strb	r3, [r7, #27]
 800e68c:	bf00      	nop
 800e68e:	e0a1      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a6b      	ldr	r2, [pc, #428]	; (800e844 <UART_SetConfig+0x2f4>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d120      	bne.n	800e6dc <UART_SetConfig+0x18c>
 800e69a:	4b68      	ldr	r3, [pc, #416]	; (800e83c <UART_SetConfig+0x2ec>)
 800e69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e6a4:	2b10      	cmp	r3, #16
 800e6a6:	d00f      	beq.n	800e6c8 <UART_SetConfig+0x178>
 800e6a8:	2b10      	cmp	r3, #16
 800e6aa:	d802      	bhi.n	800e6b2 <UART_SetConfig+0x162>
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d005      	beq.n	800e6bc <UART_SetConfig+0x16c>
 800e6b0:	e010      	b.n	800e6d4 <UART_SetConfig+0x184>
 800e6b2:	2b20      	cmp	r3, #32
 800e6b4:	d005      	beq.n	800e6c2 <UART_SetConfig+0x172>
 800e6b6:	2b30      	cmp	r3, #48	; 0x30
 800e6b8:	d009      	beq.n	800e6ce <UART_SetConfig+0x17e>
 800e6ba:	e00b      	b.n	800e6d4 <UART_SetConfig+0x184>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	76fb      	strb	r3, [r7, #27]
 800e6c0:	e088      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	76fb      	strb	r3, [r7, #27]
 800e6c6:	e085      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e6c8:	2304      	movs	r3, #4
 800e6ca:	76fb      	strb	r3, [r7, #27]
 800e6cc:	e082      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e6ce:	2308      	movs	r3, #8
 800e6d0:	76fb      	strb	r3, [r7, #27]
 800e6d2:	e07f      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e6d4:	2310      	movs	r3, #16
 800e6d6:	76fb      	strb	r3, [r7, #27]
 800e6d8:	bf00      	nop
 800e6da:	e07b      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a59      	ldr	r2, [pc, #356]	; (800e848 <UART_SetConfig+0x2f8>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d120      	bne.n	800e728 <UART_SetConfig+0x1d8>
 800e6e6:	4b55      	ldr	r3, [pc, #340]	; (800e83c <UART_SetConfig+0x2ec>)
 800e6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e6f0:	2b40      	cmp	r3, #64	; 0x40
 800e6f2:	d00f      	beq.n	800e714 <UART_SetConfig+0x1c4>
 800e6f4:	2b40      	cmp	r3, #64	; 0x40
 800e6f6:	d802      	bhi.n	800e6fe <UART_SetConfig+0x1ae>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d005      	beq.n	800e708 <UART_SetConfig+0x1b8>
 800e6fc:	e010      	b.n	800e720 <UART_SetConfig+0x1d0>
 800e6fe:	2b80      	cmp	r3, #128	; 0x80
 800e700:	d005      	beq.n	800e70e <UART_SetConfig+0x1be>
 800e702:	2bc0      	cmp	r3, #192	; 0xc0
 800e704:	d009      	beq.n	800e71a <UART_SetConfig+0x1ca>
 800e706:	e00b      	b.n	800e720 <UART_SetConfig+0x1d0>
 800e708:	2300      	movs	r3, #0
 800e70a:	76fb      	strb	r3, [r7, #27]
 800e70c:	e062      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e70e:	2302      	movs	r3, #2
 800e710:	76fb      	strb	r3, [r7, #27]
 800e712:	e05f      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e714:	2304      	movs	r3, #4
 800e716:	76fb      	strb	r3, [r7, #27]
 800e718:	e05c      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e71a:	2308      	movs	r3, #8
 800e71c:	76fb      	strb	r3, [r7, #27]
 800e71e:	e059      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e720:	2310      	movs	r3, #16
 800e722:	76fb      	strb	r3, [r7, #27]
 800e724:	bf00      	nop
 800e726:	e055      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a47      	ldr	r2, [pc, #284]	; (800e84c <UART_SetConfig+0x2fc>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d124      	bne.n	800e77c <UART_SetConfig+0x22c>
 800e732:	4b42      	ldr	r3, [pc, #264]	; (800e83c <UART_SetConfig+0x2ec>)
 800e734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e73c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e740:	d012      	beq.n	800e768 <UART_SetConfig+0x218>
 800e742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e746:	d802      	bhi.n	800e74e <UART_SetConfig+0x1fe>
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d007      	beq.n	800e75c <UART_SetConfig+0x20c>
 800e74c:	e012      	b.n	800e774 <UART_SetConfig+0x224>
 800e74e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e752:	d006      	beq.n	800e762 <UART_SetConfig+0x212>
 800e754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e758:	d009      	beq.n	800e76e <UART_SetConfig+0x21e>
 800e75a:	e00b      	b.n	800e774 <UART_SetConfig+0x224>
 800e75c:	2300      	movs	r3, #0
 800e75e:	76fb      	strb	r3, [r7, #27]
 800e760:	e038      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e762:	2302      	movs	r3, #2
 800e764:	76fb      	strb	r3, [r7, #27]
 800e766:	e035      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e768:	2304      	movs	r3, #4
 800e76a:	76fb      	strb	r3, [r7, #27]
 800e76c:	e032      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e76e:	2308      	movs	r3, #8
 800e770:	76fb      	strb	r3, [r7, #27]
 800e772:	e02f      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e774:	2310      	movs	r3, #16
 800e776:	76fb      	strb	r3, [r7, #27]
 800e778:	bf00      	nop
 800e77a:	e02b      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a2c      	ldr	r2, [pc, #176]	; (800e834 <UART_SetConfig+0x2e4>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d124      	bne.n	800e7d0 <UART_SetConfig+0x280>
 800e786:	4b2d      	ldr	r3, [pc, #180]	; (800e83c <UART_SetConfig+0x2ec>)
 800e788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e78c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e794:	d012      	beq.n	800e7bc <UART_SetConfig+0x26c>
 800e796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e79a:	d802      	bhi.n	800e7a2 <UART_SetConfig+0x252>
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d007      	beq.n	800e7b0 <UART_SetConfig+0x260>
 800e7a0:	e012      	b.n	800e7c8 <UART_SetConfig+0x278>
 800e7a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7a6:	d006      	beq.n	800e7b6 <UART_SetConfig+0x266>
 800e7a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7ac:	d009      	beq.n	800e7c2 <UART_SetConfig+0x272>
 800e7ae:	e00b      	b.n	800e7c8 <UART_SetConfig+0x278>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	76fb      	strb	r3, [r7, #27]
 800e7b4:	e00e      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	76fb      	strb	r3, [r7, #27]
 800e7ba:	e00b      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e7bc:	2304      	movs	r3, #4
 800e7be:	76fb      	strb	r3, [r7, #27]
 800e7c0:	e008      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e7c2:	2308      	movs	r3, #8
 800e7c4:	76fb      	strb	r3, [r7, #27]
 800e7c6:	e005      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e7c8:	2310      	movs	r3, #16
 800e7ca:	76fb      	strb	r3, [r7, #27]
 800e7cc:	bf00      	nop
 800e7ce:	e001      	b.n	800e7d4 <UART_SetConfig+0x284>
 800e7d0:	2310      	movs	r3, #16
 800e7d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a16      	ldr	r2, [pc, #88]	; (800e834 <UART_SetConfig+0x2e4>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	f040 8087 	bne.w	800e8ee <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7e0:	7efb      	ldrb	r3, [r7, #27]
 800e7e2:	2b08      	cmp	r3, #8
 800e7e4:	d836      	bhi.n	800e854 <UART_SetConfig+0x304>
 800e7e6:	a201      	add	r2, pc, #4	; (adr r2, 800e7ec <UART_SetConfig+0x29c>)
 800e7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ec:	0800e811 	.word	0x0800e811
 800e7f0:	0800e855 	.word	0x0800e855
 800e7f4:	0800e819 	.word	0x0800e819
 800e7f8:	0800e855 	.word	0x0800e855
 800e7fc:	0800e81f 	.word	0x0800e81f
 800e800:	0800e855 	.word	0x0800e855
 800e804:	0800e855 	.word	0x0800e855
 800e808:	0800e855 	.word	0x0800e855
 800e80c:	0800e827 	.word	0x0800e827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e810:	f7fd fd48 	bl	800c2a4 <HAL_RCC_GetPCLK1Freq>
 800e814:	6178      	str	r0, [r7, #20]
        break;
 800e816:	e022      	b.n	800e85e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e818:	4b0d      	ldr	r3, [pc, #52]	; (800e850 <UART_SetConfig+0x300>)
 800e81a:	617b      	str	r3, [r7, #20]
        break;
 800e81c:	e01f      	b.n	800e85e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e81e:	f7fd fcab 	bl	800c178 <HAL_RCC_GetSysClockFreq>
 800e822:	6178      	str	r0, [r7, #20]
        break;
 800e824:	e01b      	b.n	800e85e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e82a:	617b      	str	r3, [r7, #20]
        break;
 800e82c:	e017      	b.n	800e85e <UART_SetConfig+0x30e>
 800e82e:	bf00      	nop
 800e830:	efff69f3 	.word	0xefff69f3
 800e834:	40008000 	.word	0x40008000
 800e838:	40013800 	.word	0x40013800
 800e83c:	40021000 	.word	0x40021000
 800e840:	40004400 	.word	0x40004400
 800e844:	40004800 	.word	0x40004800
 800e848:	40004c00 	.word	0x40004c00
 800e84c:	40005000 	.word	0x40005000
 800e850:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e854:	2300      	movs	r3, #0
 800e856:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e858:	2301      	movs	r3, #1
 800e85a:	76bb      	strb	r3, [r7, #26]
        break;
 800e85c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	2b00      	cmp	r3, #0
 800e862:	f000 80f1 	beq.w	800ea48 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685a      	ldr	r2, [r3, #4]
 800e86a:	4613      	mov	r3, r2
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	4413      	add	r3, r2
 800e870:	697a      	ldr	r2, [r7, #20]
 800e872:	429a      	cmp	r2, r3
 800e874:	d305      	bcc.n	800e882 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d902      	bls.n	800e888 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	76bb      	strb	r3, [r7, #26]
 800e886:	e0df      	b.n	800ea48 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	4619      	mov	r1, r3
 800e88c:	f04f 0200 	mov.w	r2, #0
 800e890:	f04f 0300 	mov.w	r3, #0
 800e894:	f04f 0400 	mov.w	r4, #0
 800e898:	0214      	lsls	r4, r2, #8
 800e89a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e89e:	020b      	lsls	r3, r1, #8
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	6852      	ldr	r2, [r2, #4]
 800e8a4:	0852      	lsrs	r2, r2, #1
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	f04f 0200 	mov.w	r2, #0
 800e8ac:	eb13 0b01 	adds.w	fp, r3, r1
 800e8b0:	eb44 0c02 	adc.w	ip, r4, r2
 800e8b4:	4658      	mov	r0, fp
 800e8b6:	4661      	mov	r1, ip
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	f04f 0400 	mov.w	r4, #0
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4623      	mov	r3, r4
 800e8c4:	f7f1 fec0 	bl	8000648 <__aeabi_uldivmod>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8d4:	d308      	bcc.n	800e8e8 <UART_SetConfig+0x398>
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8dc:	d204      	bcs.n	800e8e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	693a      	ldr	r2, [r7, #16]
 800e8e4:	60da      	str	r2, [r3, #12]
 800e8e6:	e0af      	b.n	800ea48 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	76bb      	strb	r3, [r7, #26]
 800e8ec:	e0ac      	b.n	800ea48 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	69db      	ldr	r3, [r3, #28]
 800e8f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8f6:	d15b      	bne.n	800e9b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800e8f8:	7efb      	ldrb	r3, [r7, #27]
 800e8fa:	2b08      	cmp	r3, #8
 800e8fc:	d827      	bhi.n	800e94e <UART_SetConfig+0x3fe>
 800e8fe:	a201      	add	r2, pc, #4	; (adr r2, 800e904 <UART_SetConfig+0x3b4>)
 800e900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e904:	0800e929 	.word	0x0800e929
 800e908:	0800e931 	.word	0x0800e931
 800e90c:	0800e939 	.word	0x0800e939
 800e910:	0800e94f 	.word	0x0800e94f
 800e914:	0800e93f 	.word	0x0800e93f
 800e918:	0800e94f 	.word	0x0800e94f
 800e91c:	0800e94f 	.word	0x0800e94f
 800e920:	0800e94f 	.word	0x0800e94f
 800e924:	0800e947 	.word	0x0800e947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e928:	f7fd fcbc 	bl	800c2a4 <HAL_RCC_GetPCLK1Freq>
 800e92c:	6178      	str	r0, [r7, #20]
        break;
 800e92e:	e013      	b.n	800e958 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e930:	f7fd fcce 	bl	800c2d0 <HAL_RCC_GetPCLK2Freq>
 800e934:	6178      	str	r0, [r7, #20]
        break;
 800e936:	e00f      	b.n	800e958 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e938:	4b49      	ldr	r3, [pc, #292]	; (800ea60 <UART_SetConfig+0x510>)
 800e93a:	617b      	str	r3, [r7, #20]
        break;
 800e93c:	e00c      	b.n	800e958 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e93e:	f7fd fc1b 	bl	800c178 <HAL_RCC_GetSysClockFreq>
 800e942:	6178      	str	r0, [r7, #20]
        break;
 800e944:	e008      	b.n	800e958 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e94a:	617b      	str	r3, [r7, #20]
        break;
 800e94c:	e004      	b.n	800e958 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800e94e:	2300      	movs	r3, #0
 800e950:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	76bb      	strb	r3, [r7, #26]
        break;
 800e956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d074      	beq.n	800ea48 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	005a      	lsls	r2, r3, #1
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	085b      	lsrs	r3, r3, #1
 800e968:	441a      	add	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e972:	b29b      	uxth	r3, r3
 800e974:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	2b0f      	cmp	r3, #15
 800e97a:	d916      	bls.n	800e9aa <UART_SetConfig+0x45a>
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e982:	d212      	bcs.n	800e9aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	b29b      	uxth	r3, r3
 800e988:	f023 030f 	bic.w	r3, r3, #15
 800e98c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	085b      	lsrs	r3, r3, #1
 800e992:	b29b      	uxth	r3, r3
 800e994:	f003 0307 	and.w	r3, r3, #7
 800e998:	b29a      	uxth	r2, r3
 800e99a:	89fb      	ldrh	r3, [r7, #14]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	89fa      	ldrh	r2, [r7, #14]
 800e9a6:	60da      	str	r2, [r3, #12]
 800e9a8:	e04e      	b.n	800ea48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	76bb      	strb	r3, [r7, #26]
 800e9ae:	e04b      	b.n	800ea48 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9b0:	7efb      	ldrb	r3, [r7, #27]
 800e9b2:	2b08      	cmp	r3, #8
 800e9b4:	d827      	bhi.n	800ea06 <UART_SetConfig+0x4b6>
 800e9b6:	a201      	add	r2, pc, #4	; (adr r2, 800e9bc <UART_SetConfig+0x46c>)
 800e9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9bc:	0800e9e1 	.word	0x0800e9e1
 800e9c0:	0800e9e9 	.word	0x0800e9e9
 800e9c4:	0800e9f1 	.word	0x0800e9f1
 800e9c8:	0800ea07 	.word	0x0800ea07
 800e9cc:	0800e9f7 	.word	0x0800e9f7
 800e9d0:	0800ea07 	.word	0x0800ea07
 800e9d4:	0800ea07 	.word	0x0800ea07
 800e9d8:	0800ea07 	.word	0x0800ea07
 800e9dc:	0800e9ff 	.word	0x0800e9ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9e0:	f7fd fc60 	bl	800c2a4 <HAL_RCC_GetPCLK1Freq>
 800e9e4:	6178      	str	r0, [r7, #20]
        break;
 800e9e6:	e013      	b.n	800ea10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9e8:	f7fd fc72 	bl	800c2d0 <HAL_RCC_GetPCLK2Freq>
 800e9ec:	6178      	str	r0, [r7, #20]
        break;
 800e9ee:	e00f      	b.n	800ea10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9f0:	4b1b      	ldr	r3, [pc, #108]	; (800ea60 <UART_SetConfig+0x510>)
 800e9f2:	617b      	str	r3, [r7, #20]
        break;
 800e9f4:	e00c      	b.n	800ea10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9f6:	f7fd fbbf 	bl	800c178 <HAL_RCC_GetSysClockFreq>
 800e9fa:	6178      	str	r0, [r7, #20]
        break;
 800e9fc:	e008      	b.n	800ea10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea02:	617b      	str	r3, [r7, #20]
        break;
 800ea04:	e004      	b.n	800ea10 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800ea06:	2300      	movs	r3, #0
 800ea08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	76bb      	strb	r3, [r7, #26]
        break;
 800ea0e:	bf00      	nop
    }

    if (pclk != 0U)
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d018      	beq.n	800ea48 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	085a      	lsrs	r2, r3, #1
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	441a      	add	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	2b0f      	cmp	r3, #15
 800ea30:	d908      	bls.n	800ea44 <UART_SetConfig+0x4f4>
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea38:	d204      	bcs.n	800ea44 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	60da      	str	r2, [r3, #12]
 800ea42:	e001      	b.n	800ea48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ea54:	7ebb      	ldrb	r3, [r7, #26]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3720      	adds	r7, #32
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ea60:	00f42400 	.word	0x00f42400

0800ea64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00a      	beq.n	800ea8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea92:	f003 0302 	and.w	r3, r3, #2
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00a      	beq.n	800eab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	430a      	orrs	r2, r1
 800eaae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab4:	f003 0304 	and.w	r3, r3, #4
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d00a      	beq.n	800ead2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	430a      	orrs	r2, r1
 800ead0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead6:	f003 0308 	and.w	r3, r3, #8
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00a      	beq.n	800eaf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	430a      	orrs	r2, r1
 800eaf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf8:	f003 0310 	and.w	r3, r3, #16
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00a      	beq.n	800eb16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	430a      	orrs	r2, r1
 800eb14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1a:	f003 0320 	and.w	r3, r3, #32
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00a      	beq.n	800eb38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	430a      	orrs	r2, r1
 800eb36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d01a      	beq.n	800eb7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	430a      	orrs	r2, r1
 800eb58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb62:	d10a      	bne.n	800eb7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]
  }
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ebb6:	f7fa fe0d 	bl	80097d4 <HAL_GetTick>
 800ebba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f003 0308 	and.w	r3, r3, #8
 800ebc6:	2b08      	cmp	r3, #8
 800ebc8:	d10e      	bne.n	800ebe8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebce:	9300      	str	r3, [sp, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f82a 	bl	800ec32 <UART_WaitOnFlagUntilTimeout>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	e020      	b.n	800ec2a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f003 0304 	and.w	r3, r3, #4
 800ebf2:	2b04      	cmp	r3, #4
 800ebf4:	d10e      	bne.n	800ec14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f814 	bl	800ec32 <UART_WaitOnFlagUntilTimeout>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec10:	2303      	movs	r3, #3
 800ec12:	e00a      	b.n	800ec2a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2220      	movs	r2, #32
 800ec18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	60f8      	str	r0, [r7, #12]
 800ec3a:	60b9      	str	r1, [r7, #8]
 800ec3c:	603b      	str	r3, [r7, #0]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec42:	e05d      	b.n	800ed00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4a:	d059      	beq.n	800ed00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec4c:	f7fa fdc2 	bl	80097d4 <HAL_GetTick>
 800ec50:	4602      	mov	r2, r0
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	1ad3      	subs	r3, r2, r3
 800ec56:	69ba      	ldr	r2, [r7, #24]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d302      	bcc.n	800ec62 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d11b      	bne.n	800ec9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ec70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	689a      	ldr	r2, [r3, #8]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f022 0201 	bic.w	r2, r2, #1
 800ec80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2220      	movs	r2, #32
 800ec86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2220      	movs	r2, #32
 800ec8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e042      	b.n	800ed20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f003 0304 	and.w	r3, r3, #4
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d02b      	beq.n	800ed00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ecb6:	d123      	bne.n	800ed00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ecd0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f022 0201 	bic.w	r2, r2, #1
 800ece0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2220      	movs	r2, #32
 800ece6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2220      	movs	r2, #32
 800ecec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2220      	movs	r2, #32
 800ecf2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	e00f      	b.n	800ed20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	69da      	ldr	r2, [r3, #28]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	4013      	ands	r3, r2
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	bf0c      	ite	eq
 800ed10:	2301      	moveq	r3, #1
 800ed12:	2300      	movne	r3, #0
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	461a      	mov	r2, r3
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d092      	beq.n	800ec44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3710      	adds	r7, #16
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed28:	b084      	sub	sp, #16
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	f107 001c 	add.w	r0, r7, #28
 800ed36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d122      	bne.n	800ed86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ed54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ed68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d105      	bne.n	800ed7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fa30 	bl	800f1e0 <USB_CoreReset>
 800ed80:	4603      	mov	r3, r0
 800ed82:	73fb      	strb	r3, [r7, #15]
 800ed84:	e01a      	b.n	800edbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa24 	bl	800f1e0 <USB_CoreReset>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ed9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	639a      	str	r2, [r3, #56]	; 0x38
 800edae:	e005      	b.n	800edbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edc8:	b004      	add	sp, #16
 800edca:	4770      	bx	lr

0800edcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	f023 0201 	bic.w	r2, r3, #1
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ee06:	78fb      	ldrb	r3, [r7, #3]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d106      	bne.n	800ee1a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	60da      	str	r2, [r3, #12]
 800ee18:	e00b      	b.n	800ee32 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ee1a:	78fb      	ldrb	r3, [r7, #3]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d106      	bne.n	800ee2e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	60da      	str	r2, [r3, #12]
 800ee2c:	e001      	b.n	800ee32 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e003      	b.n	800ee3a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ee32:	2032      	movs	r0, #50	; 0x32
 800ee34:	f7fa fcda 	bl	80097ec <HAL_Delay>

  return HAL_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
	...

0800ee44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee44:	b084      	sub	sp, #16
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b086      	sub	sp, #24
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ee52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee5e:	2300      	movs	r3, #0
 800ee60:	613b      	str	r3, [r7, #16]
 800ee62:	e009      	b.n	800ee78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	3340      	adds	r3, #64	; 0x40
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	2200      	movs	r2, #0
 800ee70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	3301      	adds	r3, #1
 800ee76:	613b      	str	r3, [r7, #16]
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	2b0e      	cmp	r3, #14
 800ee7c:	d9f2      	bls.n	800ee64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d11c      	bne.n	800eebe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee92:	f043 0302 	orr.w	r3, r3, #2
 800ee96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	601a      	str	r2, [r3, #0]
 800eebc:	e005      	b.n	800eeca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eed0:	461a      	mov	r2, r3
 800eed2:	2300      	movs	r3, #0
 800eed4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eedc:	4619      	mov	r1, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eee4:	461a      	mov	r2, r3
 800eee6:	680b      	ldr	r3, [r1, #0]
 800eee8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eeea:	2103      	movs	r1, #3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 f93d 	bl	800f16c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eef2:	2110      	movs	r1, #16
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 f8f1 	bl	800f0dc <USB_FlushTxFifo>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f90f 	bl	800f128 <USB_FlushRxFifo>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef26:	461a      	mov	r2, r3
 800ef28:	2300      	movs	r3, #0
 800ef2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef32:	461a      	mov	r2, r3
 800ef34:	2300      	movs	r3, #0
 800ef36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef38:	2300      	movs	r3, #0
 800ef3a:	613b      	str	r3, [r7, #16]
 800ef3c:	e043      	b.n	800efc6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	015a      	lsls	r2, r3, #5
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	4413      	add	r3, r2
 800ef46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef54:	d118      	bne.n	800ef88 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10a      	bne.n	800ef72 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef6e:	6013      	str	r3, [r2, #0]
 800ef70:	e013      	b.n	800ef9a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	015a      	lsls	r2, r3, #5
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	4413      	add	r3, r2
 800ef7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	e008      	b.n	800ef9a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef94:	461a      	mov	r2, r3
 800ef96:	2300      	movs	r3, #0
 800ef98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	015a      	lsls	r2, r3, #5
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	4413      	add	r3, r2
 800efa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efa6:	461a      	mov	r2, r3
 800efa8:	2300      	movs	r3, #0
 800efaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	015a      	lsls	r2, r3, #5
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4413      	add	r3, r2
 800efb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb8:	461a      	mov	r2, r3
 800efba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	3301      	adds	r3, #1
 800efc4:	613b      	str	r3, [r7, #16]
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	693a      	ldr	r2, [r7, #16]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d3b7      	bcc.n	800ef3e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efce:	2300      	movs	r3, #0
 800efd0:	613b      	str	r3, [r7, #16]
 800efd2:	e043      	b.n	800f05c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	015a      	lsls	r2, r3, #5
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efea:	d118      	bne.n	800f01e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d10a      	bne.n	800f008 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	015a      	lsls	r2, r3, #5
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	4413      	add	r3, r2
 800effa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800effe:	461a      	mov	r2, r3
 800f000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f004:	6013      	str	r3, [r2, #0]
 800f006:	e013      	b.n	800f030 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	015a      	lsls	r2, r3, #5
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	4413      	add	r3, r2
 800f010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f014:	461a      	mov	r2, r3
 800f016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	e008      	b.n	800f030 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	015a      	lsls	r2, r3, #5
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	4413      	add	r3, r2
 800f026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f02a:	461a      	mov	r2, r3
 800f02c:	2300      	movs	r3, #0
 800f02e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	015a      	lsls	r2, r3, #5
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4413      	add	r3, r2
 800f038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f03c:	461a      	mov	r2, r3
 800f03e:	2300      	movs	r3, #0
 800f040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	015a      	lsls	r2, r3, #5
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	4413      	add	r3, r2
 800f04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04e:	461a      	mov	r2, r3
 800f050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	3301      	adds	r3, #1
 800f05a:	613b      	str	r3, [r7, #16]
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	429a      	cmp	r2, r3
 800f062:	d3b7      	bcc.n	800efd4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f076:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f084:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	f043 0210 	orr.w	r2, r3, #16
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	699a      	ldr	r2, [r3, #24]
 800f096:	4b10      	ldr	r3, [pc, #64]	; (800f0d8 <USB_DevInit+0x294>)
 800f098:	4313      	orrs	r3, r2
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d005      	beq.n	800f0b0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	f043 0208 	orr.w	r2, r3, #8
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d107      	bne.n	800f0c6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0be:	f043 0304 	orr.w	r3, r3, #4
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0d2:	b004      	add	sp, #16
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	803c3800 	.word	0x803c3800

0800f0dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	019b      	lsls	r3, r3, #6
 800f0ee:	f043 0220 	orr.w	r2, r3, #32
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	4a09      	ldr	r2, [pc, #36]	; (800f124 <USB_FlushTxFifo+0x48>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d901      	bls.n	800f108 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f104:	2303      	movs	r3, #3
 800f106:	e006      	b.n	800f116 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	f003 0320 	and.w	r3, r3, #32
 800f110:	2b20      	cmp	r3, #32
 800f112:	d0f0      	beq.n	800f0f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	00030d40 	.word	0x00030d40

0800f128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2210      	movs	r2, #16
 800f138:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	3301      	adds	r3, #1
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4a09      	ldr	r2, [pc, #36]	; (800f168 <USB_FlushRxFifo+0x40>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d901      	bls.n	800f14c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f148:	2303      	movs	r3, #3
 800f14a:	e006      	b.n	800f15a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	f003 0310 	and.w	r3, r3, #16
 800f154:	2b10      	cmp	r3, #16
 800f156:	d0f0      	beq.n	800f13a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	00030d40 	.word	0x00030d40

0800f16c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	460b      	mov	r3, r1
 800f176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	68f9      	ldr	r1, [r7, #12]
 800f188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f18c:	4313      	orrs	r3, r2
 800f18e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr

0800f19e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f19e:	b480      	push	{r7}
 800f1a0:	b085      	sub	sp, #20
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1b8:	f023 0303 	bic.w	r3, r3, #3
 800f1bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1cc:	f043 0302 	orr.w	r3, r3, #2
 800f1d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	60fb      	str	r3, [r7, #12]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	4a13      	ldr	r2, [pc, #76]	; (800f244 <USB_CoreReset+0x64>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d901      	bls.n	800f1fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f1fa:	2303      	movs	r3, #3
 800f1fc:	e01b      	b.n	800f236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	2b00      	cmp	r3, #0
 800f204:	daf2      	bge.n	800f1ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f206:	2300      	movs	r3, #0
 800f208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	691b      	ldr	r3, [r3, #16]
 800f20e:	f043 0201 	orr.w	r2, r3, #1
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	3301      	adds	r3, #1
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	4a09      	ldr	r2, [pc, #36]	; (800f244 <USB_CoreReset+0x64>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d901      	bls.n	800f228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f224:	2303      	movs	r3, #3
 800f226:	e006      	b.n	800f236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b01      	cmp	r3, #1
 800f232:	d0f0      	beq.n	800f216 <USB_CoreReset+0x36>

  return HAL_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3714      	adds	r7, #20
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	00030d40 	.word	0x00030d40

0800f248 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f248:	b480      	push	{r7}
 800f24a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f24c:	bf00      	nop
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
	...

0800f258 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f25e:	f3ef 8305 	mrs	r3, IPSR
 800f262:	60bb      	str	r3, [r7, #8]
  return(result);
 800f264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10f      	bne.n	800f28a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f26a:	f3ef 8310 	mrs	r3, PRIMASK
 800f26e:	607b      	str	r3, [r7, #4]
  return(result);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d105      	bne.n	800f282 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f276:	f3ef 8311 	mrs	r3, BASEPRI
 800f27a:	603b      	str	r3, [r7, #0]
  return(result);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d007      	beq.n	800f292 <osKernelInitialize+0x3a>
 800f282:	4b0e      	ldr	r3, [pc, #56]	; (800f2bc <osKernelInitialize+0x64>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b02      	cmp	r3, #2
 800f288:	d103      	bne.n	800f292 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f28a:	f06f 0305 	mvn.w	r3, #5
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	e00c      	b.n	800f2ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f292:	4b0a      	ldr	r3, [pc, #40]	; (800f2bc <osKernelInitialize+0x64>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d105      	bne.n	800f2a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f29a:	4b08      	ldr	r3, [pc, #32]	; (800f2bc <osKernelInitialize+0x64>)
 800f29c:	2201      	movs	r2, #1
 800f29e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	e002      	b.n	800f2ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3714      	adds	r7, #20
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop
 800f2bc:	200008c0 	.word	0x200008c0

0800f2c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2c6:	f3ef 8305 	mrs	r3, IPSR
 800f2ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10f      	bne.n	800f2f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f2d6:	607b      	str	r3, [r7, #4]
  return(result);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d105      	bne.n	800f2ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2de:	f3ef 8311 	mrs	r3, BASEPRI
 800f2e2:	603b      	str	r3, [r7, #0]
  return(result);
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d007      	beq.n	800f2fa <osKernelStart+0x3a>
 800f2ea:	4b0f      	ldr	r3, [pc, #60]	; (800f328 <osKernelStart+0x68>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d103      	bne.n	800f2fa <osKernelStart+0x3a>
    stat = osErrorISR;
 800f2f2:	f06f 0305 	mvn.w	r3, #5
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	e010      	b.n	800f31c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f2fa:	4b0b      	ldr	r3, [pc, #44]	; (800f328 <osKernelStart+0x68>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d109      	bne.n	800f316 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f302:	f7ff ffa1 	bl	800f248 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f306:	4b08      	ldr	r3, [pc, #32]	; (800f328 <osKernelStart+0x68>)
 800f308:	2202      	movs	r2, #2
 800f30a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f30c:	f001 fce6 	bl	8010cdc <vTaskStartScheduler>
      stat = osOK;
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	e002      	b.n	800f31c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f316:	f04f 33ff 	mov.w	r3, #4294967295
 800f31a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f31c:	68fb      	ldr	r3, [r7, #12]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	200008c0 	.word	0x200008c0

0800f32c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b090      	sub	sp, #64	; 0x40
 800f330:	af04      	add	r7, sp, #16
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f338:	2300      	movs	r3, #0
 800f33a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f33c:	f3ef 8305 	mrs	r3, IPSR
 800f340:	61fb      	str	r3, [r7, #28]
  return(result);
 800f342:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f344:	2b00      	cmp	r3, #0
 800f346:	f040 808f 	bne.w	800f468 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f34a:	f3ef 8310 	mrs	r3, PRIMASK
 800f34e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d105      	bne.n	800f362 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f356:	f3ef 8311 	mrs	r3, BASEPRI
 800f35a:	617b      	str	r3, [r7, #20]
  return(result);
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d003      	beq.n	800f36a <osThreadNew+0x3e>
 800f362:	4b44      	ldr	r3, [pc, #272]	; (800f474 <osThreadNew+0x148>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d07e      	beq.n	800f468 <osThreadNew+0x13c>
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d07b      	beq.n	800f468 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f370:	2340      	movs	r3, #64	; 0x40
 800f372:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f374:	2318      	movs	r3, #24
 800f376:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f378:	2300      	movs	r3, #0
 800f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f37c:	f04f 33ff 	mov.w	r3, #4294967295
 800f380:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d045      	beq.n	800f414 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d002      	beq.n	800f396 <osThreadNew+0x6a>
        name = attr->name;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	699b      	ldr	r3, [r3, #24]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	699b      	ldr	r3, [r3, #24]
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d008      	beq.n	800f3bc <osThreadNew+0x90>
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	2b38      	cmp	r3, #56	; 0x38
 800f3ae:	d805      	bhi.n	800f3bc <osThreadNew+0x90>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	f003 0301 	and.w	r3, r3, #1
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <osThreadNew+0x94>
        return (NULL);
 800f3bc:	2300      	movs	r3, #0
 800f3be:	e054      	b.n	800f46a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	695b      	ldr	r3, [r3, #20]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d003      	beq.n	800f3d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	089b      	lsrs	r3, r3, #2
 800f3ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d00e      	beq.n	800f3f6 <osThreadNew+0xca>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	2b5b      	cmp	r3, #91	; 0x5b
 800f3de:	d90a      	bls.n	800f3f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d006      	beq.n	800f3f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d002      	beq.n	800f3f6 <osThreadNew+0xca>
        mem = 1;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	623b      	str	r3, [r7, #32]
 800f3f4:	e010      	b.n	800f418 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10c      	bne.n	800f418 <osThreadNew+0xec>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d108      	bne.n	800f418 <osThreadNew+0xec>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d104      	bne.n	800f418 <osThreadNew+0xec>
          mem = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	623b      	str	r3, [r7, #32]
 800f412:	e001      	b.n	800f418 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f418:	6a3b      	ldr	r3, [r7, #32]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d110      	bne.n	800f440 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f426:	9202      	str	r2, [sp, #8]
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	9300      	str	r3, [sp, #0]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f001 fa7f 	bl	8010938 <xTaskCreateStatic>
 800f43a:	4603      	mov	r3, r0
 800f43c:	613b      	str	r3, [r7, #16]
 800f43e:	e013      	b.n	800f468 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d110      	bne.n	800f468 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f448:	b29a      	uxth	r2, r3
 800f44a:	f107 0310 	add.w	r3, r7, #16
 800f44e:	9301      	str	r3, [sp, #4]
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f001 fac7 	bl	80109ec <xTaskCreate>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b01      	cmp	r3, #1
 800f462:	d001      	beq.n	800f468 <osThreadNew+0x13c>
          hTask = NULL;
 800f464:	2300      	movs	r3, #0
 800f466:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f468:	693b      	ldr	r3, [r7, #16]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3730      	adds	r7, #48	; 0x30
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	200008c0 	.word	0x200008c0

0800f478 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f480:	f3ef 8305 	mrs	r3, IPSR
 800f484:	613b      	str	r3, [r7, #16]
  return(result);
 800f486:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10f      	bne.n	800f4ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f48c:	f3ef 8310 	mrs	r3, PRIMASK
 800f490:	60fb      	str	r3, [r7, #12]
  return(result);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d105      	bne.n	800f4a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f498:	f3ef 8311 	mrs	r3, BASEPRI
 800f49c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d007      	beq.n	800f4b4 <osDelay+0x3c>
 800f4a4:	4b0a      	ldr	r3, [pc, #40]	; (800f4d0 <osDelay+0x58>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d103      	bne.n	800f4b4 <osDelay+0x3c>
    stat = osErrorISR;
 800f4ac:	f06f 0305 	mvn.w	r3, #5
 800f4b0:	617b      	str	r3, [r7, #20]
 800f4b2:	e007      	b.n	800f4c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f001 fbd8 	bl	8010c74 <vTaskDelay>
    }
  }

  return (stat);
 800f4c4:	697b      	ldr	r3, [r7, #20]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	200008c0 	.word	0x200008c0

0800f4d4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b08c      	sub	sp, #48	; 0x30
 800f4d8:	af02      	add	r7, sp, #8
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4e4:	f3ef 8305 	mrs	r3, IPSR
 800f4e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800f4ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f040 8087 	bne.w	800f600 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4f2:	f3ef 8310 	mrs	r3, PRIMASK
 800f4f6:	617b      	str	r3, [r7, #20]
  return(result);
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d105      	bne.n	800f50a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4fe:	f3ef 8311 	mrs	r3, BASEPRI
 800f502:	613b      	str	r3, [r7, #16]
  return(result);
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <osSemaphoreNew+0x3e>
 800f50a:	4b40      	ldr	r3, [pc, #256]	; (800f60c <osSemaphoreNew+0x138>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b02      	cmp	r3, #2
 800f510:	d076      	beq.n	800f600 <osSemaphoreNew+0x12c>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d073      	beq.n	800f600 <osSemaphoreNew+0x12c>
 800f518:	68ba      	ldr	r2, [r7, #8]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d86f      	bhi.n	800f600 <osSemaphoreNew+0x12c>
    mem = -1;
 800f520:	f04f 33ff 	mov.w	r3, #4294967295
 800f524:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d015      	beq.n	800f558 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d006      	beq.n	800f542 <osSemaphoreNew+0x6e>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	2b4f      	cmp	r3, #79	; 0x4f
 800f53a:	d902      	bls.n	800f542 <osSemaphoreNew+0x6e>
        mem = 1;
 800f53c:	2301      	movs	r3, #1
 800f53e:	623b      	str	r3, [r7, #32]
 800f540:	e00c      	b.n	800f55c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d108      	bne.n	800f55c <osSemaphoreNew+0x88>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d104      	bne.n	800f55c <osSemaphoreNew+0x88>
          mem = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	623b      	str	r3, [r7, #32]
 800f556:	e001      	b.n	800f55c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f558:	2300      	movs	r3, #0
 800f55a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f55c:	6a3b      	ldr	r3, [r7, #32]
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d04d      	beq.n	800f600 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d129      	bne.n	800f5be <osSemaphoreNew+0xea>
        if (mem == 1) {
 800f56a:	6a3b      	ldr	r3, [r7, #32]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d10b      	bne.n	800f588 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	689a      	ldr	r2, [r3, #8]
 800f574:	2303      	movs	r3, #3
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	4613      	mov	r3, r2
 800f57a:	2200      	movs	r2, #0
 800f57c:	2100      	movs	r1, #0
 800f57e:	2001      	movs	r0, #1
 800f580:	f000 fa54 	bl	800fa2c <xQueueGenericCreateStatic>
 800f584:	6278      	str	r0, [r7, #36]	; 0x24
 800f586:	e005      	b.n	800f594 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f588:	2203      	movs	r2, #3
 800f58a:	2100      	movs	r1, #0
 800f58c:	2001      	movs	r0, #1
 800f58e:	f000 fac0 	bl	800fb12 <xQueueGenericCreate>
 800f592:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	2b00      	cmp	r3, #0
 800f598:	d022      	beq.n	800f5e0 <osSemaphoreNew+0x10c>
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d01f      	beq.n	800f5e0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5a8:	f000 fb7c 	bl	800fca4 <xQueueGenericSend>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d016      	beq.n	800f5e0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800f5b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5b4:	f000 ffef 	bl	8010596 <vQueueDelete>
            hSemaphore = NULL;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f5bc:	e010      	b.n	800f5e0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800f5be:	6a3b      	ldr	r3, [r7, #32]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d108      	bne.n	800f5d6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	68b9      	ldr	r1, [r7, #8]
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f000 fb02 	bl	800fbd6 <xQueueCreateCountingSemaphoreStatic>
 800f5d2:	6278      	str	r0, [r7, #36]	; 0x24
 800f5d4:	e004      	b.n	800f5e0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f5d6:	68b9      	ldr	r1, [r7, #8]
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f000 fb31 	bl	800fc40 <xQueueCreateCountingSemaphore>
 800f5de:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00c      	beq.n	800f600 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d003      	beq.n	800f5f4 <osSemaphoreNew+0x120>
          name = attr->name;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	61fb      	str	r3, [r7, #28]
 800f5f2:	e001      	b.n	800f5f8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f5f8:	69f9      	ldr	r1, [r7, #28]
 800f5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5fc:	f001 f916 	bl	801082c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f602:	4618      	mov	r0, r3
 800f604:	3728      	adds	r7, #40	; 0x28
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	200008c0 	.word	0x200008c0

0800f610 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f610:	b580      	push	{r7, lr}
 800f612:	b088      	sub	sp, #32
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f61e:	2300      	movs	r3, #0
 800f620:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d103      	bne.n	800f630 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f628:	f06f 0303 	mvn.w	r3, #3
 800f62c:	61fb      	str	r3, [r7, #28]
 800f62e:	e04b      	b.n	800f6c8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f630:	f3ef 8305 	mrs	r3, IPSR
 800f634:	617b      	str	r3, [r7, #20]
  return(result);
 800f636:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10f      	bne.n	800f65c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f63c:	f3ef 8310 	mrs	r3, PRIMASK
 800f640:	613b      	str	r3, [r7, #16]
  return(result);
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d105      	bne.n	800f654 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f648:	f3ef 8311 	mrs	r3, BASEPRI
 800f64c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d026      	beq.n	800f6a2 <osSemaphoreAcquire+0x92>
 800f654:	4b1f      	ldr	r3, [pc, #124]	; (800f6d4 <osSemaphoreAcquire+0xc4>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d122      	bne.n	800f6a2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f662:	f06f 0303 	mvn.w	r3, #3
 800f666:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f668:	e02d      	b.n	800f6c6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f66a:	2300      	movs	r3, #0
 800f66c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f66e:	f107 0308 	add.w	r3, r7, #8
 800f672:	461a      	mov	r2, r3
 800f674:	2100      	movs	r1, #0
 800f676:	69b8      	ldr	r0, [r7, #24]
 800f678:	f000 ff10 	bl	801049c <xQueueReceiveFromISR>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d003      	beq.n	800f68a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f682:	f06f 0302 	mvn.w	r3, #2
 800f686:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f688:	e01d      	b.n	800f6c6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d01a      	beq.n	800f6c6 <osSemaphoreAcquire+0xb6>
 800f690:	4b11      	ldr	r3, [pc, #68]	; (800f6d8 <osSemaphoreAcquire+0xc8>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f6a0:	e011      	b.n	800f6c6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f6a2:	6839      	ldr	r1, [r7, #0]
 800f6a4:	69b8      	ldr	r0, [r7, #24]
 800f6a6:	f000 fdf1 	bl	801028c <xQueueSemaphoreTake>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d00b      	beq.n	800f6c8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d003      	beq.n	800f6be <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f6b6:	f06f 0301 	mvn.w	r3, #1
 800f6ba:	61fb      	str	r3, [r7, #28]
 800f6bc:	e004      	b.n	800f6c8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f6be:	f06f 0302 	mvn.w	r3, #2
 800f6c2:	61fb      	str	r3, [r7, #28]
 800f6c4:	e000      	b.n	800f6c8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f6c6:	bf00      	nop
      }
    }
  }

  return (stat);
 800f6c8:	69fb      	ldr	r3, [r7, #28]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3720      	adds	r7, #32
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	200008c0 	.word	0x200008c0
 800f6d8:	e000ed04 	.word	0xe000ed04

0800f6dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b088      	sub	sp, #32
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d103      	bne.n	800f6fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f6f2:	f06f 0303 	mvn.w	r3, #3
 800f6f6:	61fb      	str	r3, [r7, #28]
 800f6f8:	e03e      	b.n	800f778 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6fa:	f3ef 8305 	mrs	r3, IPSR
 800f6fe:	617b      	str	r3, [r7, #20]
  return(result);
 800f700:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10f      	bne.n	800f726 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f706:	f3ef 8310 	mrs	r3, PRIMASK
 800f70a:	613b      	str	r3, [r7, #16]
  return(result);
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d105      	bne.n	800f71e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f712:	f3ef 8311 	mrs	r3, BASEPRI
 800f716:	60fb      	str	r3, [r7, #12]
  return(result);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d01e      	beq.n	800f75c <osSemaphoreRelease+0x80>
 800f71e:	4b19      	ldr	r3, [pc, #100]	; (800f784 <osSemaphoreRelease+0xa8>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2b02      	cmp	r3, #2
 800f724:	d11a      	bne.n	800f75c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f726:	2300      	movs	r3, #0
 800f728:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f72a:	f107 0308 	add.w	r3, r7, #8
 800f72e:	4619      	mov	r1, r3
 800f730:	69b8      	ldr	r0, [r7, #24]
 800f732:	f000 fc45 	bl	800ffc0 <xQueueGiveFromISR>
 800f736:	4603      	mov	r3, r0
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d003      	beq.n	800f744 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f73c:	f06f 0302 	mvn.w	r3, #2
 800f740:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f742:	e018      	b.n	800f776 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d015      	beq.n	800f776 <osSemaphoreRelease+0x9a>
 800f74a:	4b0f      	ldr	r3, [pc, #60]	; (800f788 <osSemaphoreRelease+0xac>)
 800f74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f750:	601a      	str	r2, [r3, #0]
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f75a:	e00c      	b.n	800f776 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f75c:	2300      	movs	r3, #0
 800f75e:	2200      	movs	r2, #0
 800f760:	2100      	movs	r1, #0
 800f762:	69b8      	ldr	r0, [r7, #24]
 800f764:	f000 fa9e 	bl	800fca4 <xQueueGenericSend>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d004      	beq.n	800f778 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f76e:	f06f 0302 	mvn.w	r3, #2
 800f772:	61fb      	str	r3, [r7, #28]
 800f774:	e000      	b.n	800f778 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f776:	bf00      	nop
    }
  }

  return (stat);
 800f778:	69fb      	ldr	r3, [r7, #28]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3720      	adds	r7, #32
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	200008c0 	.word	0x200008c0
 800f788:	e000ed04 	.word	0xe000ed04

0800f78c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	4a07      	ldr	r2, [pc, #28]	; (800f7b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f79c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	4a06      	ldr	r2, [pc, #24]	; (800f7bc <vApplicationGetIdleTaskMemory+0x30>)
 800f7a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2240      	movs	r2, #64	; 0x40
 800f7a8:	601a      	str	r2, [r3, #0]
}
 800f7aa:	bf00      	nop
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	200008c4 	.word	0x200008c4
 800f7bc:	20000920 	.word	0x20000920

0800f7c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	4a07      	ldr	r2, [pc, #28]	; (800f7ec <vApplicationGetTimerTaskMemory+0x2c>)
 800f7d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	4a06      	ldr	r2, [pc, #24]	; (800f7f0 <vApplicationGetTimerTaskMemory+0x30>)
 800f7d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7de:	601a      	str	r2, [r3, #0]
}
 800f7e0:	bf00      	nop
 800f7e2:	3714      	adds	r7, #20
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	20000a20 	.word	0x20000a20
 800f7f0:	20000a7c 	.word	0x20000a7c

0800f7f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f103 0208 	add.w	r2, r3, #8
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f04f 32ff 	mov.w	r2, #4294967295
 800f80c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f103 0208 	add.w	r2, r3, #8
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f103 0208 	add.w	r2, r3, #8
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f842:	bf00      	nop
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f84e:	b480      	push	{r7}
 800f850:	b085      	sub	sp, #20
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	689a      	ldr	r2, [r3, #8]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	683a      	ldr	r2, [r7, #0]
 800f872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	683a      	ldr	r2, [r7, #0]
 800f878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	601a      	str	r2, [r3, #0]
}
 800f88a:	bf00      	nop
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f896:	b480      	push	{r7}
 800f898:	b085      	sub	sp, #20
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
 800f89e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ac:	d103      	bne.n	800f8b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	60fb      	str	r3, [r7, #12]
 800f8b4:	e00c      	b.n	800f8d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	3308      	adds	r3, #8
 800f8ba:	60fb      	str	r3, [r7, #12]
 800f8bc:	e002      	b.n	800f8c4 <vListInsert+0x2e>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d2f6      	bcs.n	800f8be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	683a      	ldr	r2, [r7, #0]
 800f8ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	1c5a      	adds	r2, r3, #1
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	601a      	str	r2, [r3, #0]
}
 800f8fc:	bf00      	nop
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	6892      	ldr	r2, [r2, #8]
 800f91e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	6852      	ldr	r2, [r2, #4]
 800f928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	429a      	cmp	r2, r3
 800f932:	d103      	bne.n	800f93c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	689a      	ldr	r2, [r3, #8]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	1e5a      	subs	r2, r3, #1
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d109      	bne.n	800f984 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	60bb      	str	r3, [r7, #8]
 800f982:	e7fe      	b.n	800f982 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f984:	f002 fc2a 	bl	80121dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f990:	68f9      	ldr	r1, [r7, #12]
 800f992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f994:	fb01 f303 	mul.w	r3, r1, r3
 800f998:	441a      	add	r2, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	68f9      	ldr	r1, [r7, #12]
 800f9b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f9ba:	fb01 f303 	mul.w	r3, r1, r3
 800f9be:	441a      	add	r2, r3
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	22ff      	movs	r2, #255	; 0xff
 800f9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	22ff      	movs	r2, #255	; 0xff
 800f9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d114      	bne.n	800fa04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	691b      	ldr	r3, [r3, #16]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d01a      	beq.n	800fa18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	3310      	adds	r3, #16
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f001 fbf8 	bl	80111dc <xTaskRemoveFromEventList>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d012      	beq.n	800fa18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f9f2:	4b0d      	ldr	r3, [pc, #52]	; (800fa28 <xQueueGenericReset+0xcc>)
 800f9f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	e009      	b.n	800fa18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	3310      	adds	r3, #16
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7ff fef3 	bl	800f7f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	3324      	adds	r3, #36	; 0x24
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff feee 	bl	800f7f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fa18:	f002 fc0e 	bl	8012238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fa1c:	2301      	movs	r3, #1
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	e000ed04 	.word	0xe000ed04

0800fa2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08e      	sub	sp, #56	; 0x38
 800fa30:	af02      	add	r7, sp, #8
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d109      	bne.n	800fa54 <xQueueGenericCreateStatic+0x28>
 800fa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa44:	f383 8811 	msr	BASEPRI, r3
 800fa48:	f3bf 8f6f 	isb	sy
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa52:	e7fe      	b.n	800fa52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d109      	bne.n	800fa6e <xQueueGenericCreateStatic+0x42>
 800fa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	627b      	str	r3, [r7, #36]	; 0x24
 800fa6c:	e7fe      	b.n	800fa6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <xQueueGenericCreateStatic+0x4e>
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <xQueueGenericCreateStatic+0x52>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e000      	b.n	800fa80 <xQueueGenericCreateStatic+0x54>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d109      	bne.n	800fa98 <xQueueGenericCreateStatic+0x6c>
 800fa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa88:	f383 8811 	msr	BASEPRI, r3
 800fa8c:	f3bf 8f6f 	isb	sy
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	623b      	str	r3, [r7, #32]
 800fa96:	e7fe      	b.n	800fa96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d102      	bne.n	800faa4 <xQueueGenericCreateStatic+0x78>
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d101      	bne.n	800faa8 <xQueueGenericCreateStatic+0x7c>
 800faa4:	2301      	movs	r3, #1
 800faa6:	e000      	b.n	800faaa <xQueueGenericCreateStatic+0x7e>
 800faa8:	2300      	movs	r3, #0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d109      	bne.n	800fac2 <xQueueGenericCreateStatic+0x96>
 800faae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	61fb      	str	r3, [r7, #28]
 800fac0:	e7fe      	b.n	800fac0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fac2:	2350      	movs	r3, #80	; 0x50
 800fac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2b50      	cmp	r3, #80	; 0x50
 800faca:	d009      	beq.n	800fae0 <xQueueGenericCreateStatic+0xb4>
 800facc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad0:	f383 8811 	msr	BASEPRI, r3
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	61bb      	str	r3, [r7, #24]
 800fade:	e7fe      	b.n	800fade <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fae0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00d      	beq.n	800fb08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800faf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800faf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	4613      	mov	r3, r2
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	68b9      	ldr	r1, [r7, #8]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f000 f844 	bl	800fb90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3730      	adds	r7, #48	; 0x30
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b08a      	sub	sp, #40	; 0x28
 800fb16:	af02      	add	r7, sp, #8
 800fb18:	60f8      	str	r0, [r7, #12]
 800fb1a:	60b9      	str	r1, [r7, #8]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d109      	bne.n	800fb3a <xQueueGenericCreate+0x28>
 800fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2a:	f383 8811 	msr	BASEPRI, r3
 800fb2e:	f3bf 8f6f 	isb	sy
 800fb32:	f3bf 8f4f 	dsb	sy
 800fb36:	613b      	str	r3, [r7, #16]
 800fb38:	e7fe      	b.n	800fb38 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d102      	bne.n	800fb46 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	61fb      	str	r3, [r7, #28]
 800fb44:	e004      	b.n	800fb50 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	fb02 f303 	mul.w	r3, r2, r3
 800fb4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	3350      	adds	r3, #80	; 0x50
 800fb54:	4618      	mov	r0, r3
 800fb56:	f002 fc5b 	bl	8012410 <pvPortMalloc>
 800fb5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d011      	beq.n	800fb86 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	3350      	adds	r3, #80	; 0x50
 800fb6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb74:	79fa      	ldrb	r2, [r7, #7]
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	68b9      	ldr	r1, [r7, #8]
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f000 f805 	bl	800fb90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb86:	69bb      	ldr	r3, [r7, #24]
	}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3720      	adds	r7, #32
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d103      	bne.n	800fbac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	69ba      	ldr	r2, [r7, #24]
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	e002      	b.n	800fbb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	68ba      	ldr	r2, [r7, #8]
 800fbbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fbbe:	2101      	movs	r1, #1
 800fbc0:	69b8      	ldr	r0, [r7, #24]
 800fbc2:	f7ff fecb 	bl	800f95c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	78fa      	ldrb	r2, [r7, #3]
 800fbca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fbce:	bf00      	nop
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b08a      	sub	sp, #40	; 0x28
 800fbda:	af02      	add	r7, sp, #8
 800fbdc:	60f8      	str	r0, [r7, #12]
 800fbde:	60b9      	str	r1, [r7, #8]
 800fbe0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d109      	bne.n	800fbfc <xQueueCreateCountingSemaphoreStatic+0x26>
 800fbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbec:	f383 8811 	msr	BASEPRI, r3
 800fbf0:	f3bf 8f6f 	isb	sy
 800fbf4:	f3bf 8f4f 	dsb	sy
 800fbf8:	61bb      	str	r3, [r7, #24]
 800fbfa:	e7fe      	b.n	800fbfa <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d909      	bls.n	800fc18 <xQueueCreateCountingSemaphoreStatic+0x42>
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	f383 8811 	msr	BASEPRI, r3
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	617b      	str	r3, [r7, #20]
 800fc16:	e7fe      	b.n	800fc16 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fc18:	2302      	movs	r3, #2
 800fc1a:	9300      	str	r3, [sp, #0]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	2100      	movs	r1, #0
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f7ff ff02 	bl	800fa2c <xQueueGenericCreateStatic>
 800fc28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fc36:	69fb      	ldr	r3, [r7, #28]
	}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3720      	adds	r7, #32
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d109      	bne.n	800fc64 <xQueueCreateCountingSemaphore+0x24>
 800fc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	613b      	str	r3, [r7, #16]
 800fc62:	e7fe      	b.n	800fc62 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d909      	bls.n	800fc80 <xQueueCreateCountingSemaphore+0x40>
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	60fb      	str	r3, [r7, #12]
 800fc7e:	e7fe      	b.n	800fc7e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fc80:	2202      	movs	r2, #2
 800fc82:	2100      	movs	r1, #0
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7ff ff44 	bl	800fb12 <xQueueGenericCreate>
 800fc8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d002      	beq.n	800fc98 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	683a      	ldr	r2, [r7, #0]
 800fc96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fc98:	697b      	ldr	r3, [r7, #20]
	}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b08e      	sub	sp, #56	; 0x38
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
 800fcb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d109      	bne.n	800fcd4 <xQueueGenericSend+0x30>
 800fcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcd2:	e7fe      	b.n	800fcd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d103      	bne.n	800fce2 <xQueueGenericSend+0x3e>
 800fcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d101      	bne.n	800fce6 <xQueueGenericSend+0x42>
 800fce2:	2301      	movs	r3, #1
 800fce4:	e000      	b.n	800fce8 <xQueueGenericSend+0x44>
 800fce6:	2300      	movs	r3, #0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d109      	bne.n	800fd00 <xQueueGenericSend+0x5c>
 800fcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	627b      	str	r3, [r7, #36]	; 0x24
 800fcfe:	e7fe      	b.n	800fcfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	d103      	bne.n	800fd0e <xQueueGenericSend+0x6a>
 800fd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d101      	bne.n	800fd12 <xQueueGenericSend+0x6e>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e000      	b.n	800fd14 <xQueueGenericSend+0x70>
 800fd12:	2300      	movs	r3, #0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d109      	bne.n	800fd2c <xQueueGenericSend+0x88>
 800fd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	623b      	str	r3, [r7, #32]
 800fd2a:	e7fe      	b.n	800fd2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd2c:	f001 fc0c 	bl	8011548 <xTaskGetSchedulerState>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d102      	bne.n	800fd3c <xQueueGenericSend+0x98>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d101      	bne.n	800fd40 <xQueueGenericSend+0x9c>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e000      	b.n	800fd42 <xQueueGenericSend+0x9e>
 800fd40:	2300      	movs	r3, #0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d109      	bne.n	800fd5a <xQueueGenericSend+0xb6>
 800fd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4a:	f383 8811 	msr	BASEPRI, r3
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f3bf 8f4f 	dsb	sy
 800fd56:	61fb      	str	r3, [r7, #28]
 800fd58:	e7fe      	b.n	800fd58 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd5a:	f002 fa3f 	bl	80121dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d302      	bcc.n	800fd70 <xQueueGenericSend+0xcc>
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d129      	bne.n	800fdc4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd76:	f000 fc48 	bl	801060a <prvCopyDataToQueue>
 800fd7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d010      	beq.n	800fda6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	3324      	adds	r3, #36	; 0x24
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f001 fa27 	bl	80111dc <xTaskRemoveFromEventList>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d013      	beq.n	800fdbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fd94:	4b3f      	ldr	r3, [pc, #252]	; (800fe94 <xQueueGenericSend+0x1f0>)
 800fd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd9a:	601a      	str	r2, [r3, #0]
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	f3bf 8f6f 	isb	sy
 800fda4:	e00a      	b.n	800fdbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d007      	beq.n	800fdbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fdac:	4b39      	ldr	r3, [pc, #228]	; (800fe94 <xQueueGenericSend+0x1f0>)
 800fdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fdbc:	f002 fa3c 	bl	8012238 <vPortExitCritical>
				return pdPASS;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e063      	b.n	800fe8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d103      	bne.n	800fdd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fdca:	f002 fa35 	bl	8012238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	e05c      	b.n	800fe8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d106      	bne.n	800fde6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fdd8:	f107 0314 	add.w	r3, r7, #20
 800fddc:	4618      	mov	r0, r3
 800fdde:	f001 fa5f 	bl	80112a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fde2:	2301      	movs	r3, #1
 800fde4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fde6:	f002 fa27 	bl	8012238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fdea:	f000 ffdb 	bl	8010da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdee:	f002 f9f5 	bl	80121dc <vPortEnterCritical>
 800fdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fdf8:	b25b      	sxtb	r3, r3
 800fdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdfe:	d103      	bne.n	800fe08 <xQueueGenericSend+0x164>
 800fe00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe02:	2200      	movs	r2, #0
 800fe04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe0e:	b25b      	sxtb	r3, r3
 800fe10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe14:	d103      	bne.n	800fe1e <xQueueGenericSend+0x17a>
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe1e:	f002 fa0b 	bl	8012238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe22:	1d3a      	adds	r2, r7, #4
 800fe24:	f107 0314 	add.w	r3, r7, #20
 800fe28:	4611      	mov	r1, r2
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f001 fa4e 	bl	80112cc <xTaskCheckForTimeOut>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d124      	bne.n	800fe80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fe36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe38:	f000 fcdf 	bl	80107fa <prvIsQueueFull>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d018      	beq.n	800fe74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	3310      	adds	r3, #16
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	4611      	mov	r1, r2
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f001 f978 	bl	8011140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fe50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe52:	f000 fc6a 	bl	801072a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fe56:	f000 ffb3 	bl	8010dc0 <xTaskResumeAll>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f47f af7c 	bne.w	800fd5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800fe62:	4b0c      	ldr	r3, [pc, #48]	; (800fe94 <xQueueGenericSend+0x1f0>)
 800fe64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe68:	601a      	str	r2, [r3, #0]
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	e772      	b.n	800fd5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fe74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe76:	f000 fc58 	bl	801072a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe7a:	f000 ffa1 	bl	8010dc0 <xTaskResumeAll>
 800fe7e:	e76c      	b.n	800fd5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fe80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe82:	f000 fc52 	bl	801072a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe86:	f000 ff9b 	bl	8010dc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fe8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3738      	adds	r7, #56	; 0x38
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	e000ed04 	.word	0xe000ed04

0800fe98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b08e      	sub	sp, #56	; 0x38
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	607a      	str	r2, [r7, #4]
 800fea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	2b00      	cmp	r3, #0
 800feae:	d109      	bne.n	800fec4 <xQueueGenericSendFromISR+0x2c>
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	627b      	str	r3, [r7, #36]	; 0x24
 800fec2:	e7fe      	b.n	800fec2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d103      	bne.n	800fed2 <xQueueGenericSendFromISR+0x3a>
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d101      	bne.n	800fed6 <xQueueGenericSendFromISR+0x3e>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e000      	b.n	800fed8 <xQueueGenericSendFromISR+0x40>
 800fed6:	2300      	movs	r3, #0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d109      	bne.n	800fef0 <xQueueGenericSendFromISR+0x58>
 800fedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee0:	f383 8811 	msr	BASEPRI, r3
 800fee4:	f3bf 8f6f 	isb	sy
 800fee8:	f3bf 8f4f 	dsb	sy
 800feec:	623b      	str	r3, [r7, #32]
 800feee:	e7fe      	b.n	800feee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d103      	bne.n	800fefe <xQueueGenericSendFromISR+0x66>
 800fef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d101      	bne.n	800ff02 <xQueueGenericSendFromISR+0x6a>
 800fefe:	2301      	movs	r3, #1
 800ff00:	e000      	b.n	800ff04 <xQueueGenericSendFromISR+0x6c>
 800ff02:	2300      	movs	r3, #0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d109      	bne.n	800ff1c <xQueueGenericSendFromISR+0x84>
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	61fb      	str	r3, [r7, #28]
 800ff1a:	e7fe      	b.n	800ff1a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff1c:	f002 fa3a 	bl	8012394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ff20:	f3ef 8211 	mrs	r2, BASEPRI
 800ff24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff28:	f383 8811 	msr	BASEPRI, r3
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	61ba      	str	r2, [r7, #24]
 800ff36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ff38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d302      	bcc.n	800ff4e <xQueueGenericSendFromISR+0xb6>
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	d12c      	bne.n	800ffa8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	68b9      	ldr	r1, [r7, #8]
 800ff5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff5e:	f000 fb54 	bl	801060a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ff62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ff66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6a:	d112      	bne.n	800ff92 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d016      	beq.n	800ffa2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff76:	3324      	adds	r3, #36	; 0x24
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f001 f92f 	bl	80111dc <xTaskRemoveFromEventList>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00e      	beq.n	800ffa2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00b      	beq.n	800ffa2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	601a      	str	r2, [r3, #0]
 800ff90:	e007      	b.n	800ffa2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff96:	3301      	adds	r3, #1
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	b25a      	sxtb	r2, r3
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ffa6:	e001      	b.n	800ffac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	637b      	str	r3, [r7, #52]	; 0x34
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ffb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3738      	adds	r7, #56	; 0x38
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08e      	sub	sp, #56	; 0x38
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d109      	bne.n	800ffe8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800ffd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd8:	f383 8811 	msr	BASEPRI, r3
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	623b      	str	r3, [r7, #32]
 800ffe6:	e7fe      	b.n	800ffe6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ffe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d009      	beq.n	8010004 <xQueueGiveFromISR+0x44>
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	61fb      	str	r3, [r7, #28]
 8010002:	e7fe      	b.n	8010002 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d103      	bne.n	8010014 <xQueueGiveFromISR+0x54>
 801000c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d101      	bne.n	8010018 <xQueueGiveFromISR+0x58>
 8010014:	2301      	movs	r3, #1
 8010016:	e000      	b.n	801001a <xQueueGiveFromISR+0x5a>
 8010018:	2300      	movs	r3, #0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d109      	bne.n	8010032 <xQueueGiveFromISR+0x72>
 801001e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010022:	f383 8811 	msr	BASEPRI, r3
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	61bb      	str	r3, [r7, #24]
 8010030:	e7fe      	b.n	8010030 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010032:	f002 f9af 	bl	8012394 <vPortValidateInterruptPriority>
	__asm volatile
 8010036:	f3ef 8211 	mrs	r2, BASEPRI
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	617a      	str	r2, [r7, #20]
 801004c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801004e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010050:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010056:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801005c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801005e:	429a      	cmp	r2, r3
 8010060:	d22b      	bcs.n	80100ba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801006c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007c:	d112      	bne.n	80100a4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801007e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010082:	2b00      	cmp	r3, #0
 8010084:	d016      	beq.n	80100b4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010088:	3324      	adds	r3, #36	; 0x24
 801008a:	4618      	mov	r0, r3
 801008c:	f001 f8a6 	bl	80111dc <xTaskRemoveFromEventList>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00e      	beq.n	80100b4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00b      	beq.n	80100b4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	2201      	movs	r2, #1
 80100a0:	601a      	str	r2, [r3, #0]
 80100a2:	e007      	b.n	80100b4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80100a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100a8:	3301      	adds	r3, #1
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	b25a      	sxtb	r2, r3
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80100b4:	2301      	movs	r3, #1
 80100b6:	637b      	str	r3, [r7, #52]	; 0x34
 80100b8:	e001      	b.n	80100be <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80100ba:	2300      	movs	r3, #0
 80100bc:	637b      	str	r3, [r7, #52]	; 0x34
 80100be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3738      	adds	r7, #56	; 0x38
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b08c      	sub	sp, #48	; 0x30
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80100e0:	2300      	movs	r3, #0
 80100e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80100e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d109      	bne.n	8010102 <xQueueReceive+0x2e>
	__asm volatile
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	623b      	str	r3, [r7, #32]
 8010100:	e7fe      	b.n	8010100 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d103      	bne.n	8010110 <xQueueReceive+0x3c>
 8010108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801010c:	2b00      	cmp	r3, #0
 801010e:	d101      	bne.n	8010114 <xQueueReceive+0x40>
 8010110:	2301      	movs	r3, #1
 8010112:	e000      	b.n	8010116 <xQueueReceive+0x42>
 8010114:	2300      	movs	r3, #0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d109      	bne.n	801012e <xQueueReceive+0x5a>
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	61fb      	str	r3, [r7, #28]
 801012c:	e7fe      	b.n	801012c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801012e:	f001 fa0b 	bl	8011548 <xTaskGetSchedulerState>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d102      	bne.n	801013e <xQueueReceive+0x6a>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d101      	bne.n	8010142 <xQueueReceive+0x6e>
 801013e:	2301      	movs	r3, #1
 8010140:	e000      	b.n	8010144 <xQueueReceive+0x70>
 8010142:	2300      	movs	r3, #0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d109      	bne.n	801015c <xQueueReceive+0x88>
 8010148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014c:	f383 8811 	msr	BASEPRI, r3
 8010150:	f3bf 8f6f 	isb	sy
 8010154:	f3bf 8f4f 	dsb	sy
 8010158:	61bb      	str	r3, [r7, #24]
 801015a:	e7fe      	b.n	801015a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801015c:	f002 f83e 	bl	80121dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010164:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010168:	2b00      	cmp	r3, #0
 801016a:	d01f      	beq.n	80101ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801016c:	68b9      	ldr	r1, [r7, #8]
 801016e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010170:	f000 fab5 	bl	80106de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010176:	1e5a      	subs	r2, r3, #1
 8010178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801017c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00f      	beq.n	80101a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010186:	3310      	adds	r3, #16
 8010188:	4618      	mov	r0, r3
 801018a:	f001 f827 	bl	80111dc <xTaskRemoveFromEventList>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d007      	beq.n	80101a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010194:	4b3c      	ldr	r3, [pc, #240]	; (8010288 <xQueueReceive+0x1b4>)
 8010196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80101a4:	f002 f848 	bl	8012238 <vPortExitCritical>
				return pdPASS;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e069      	b.n	8010280 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d103      	bne.n	80101ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80101b2:	f002 f841 	bl	8012238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e062      	b.n	8010280 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80101ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101c0:	f107 0310 	add.w	r3, r7, #16
 80101c4:	4618      	mov	r0, r3
 80101c6:	f001 f86b 	bl	80112a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101ca:	2301      	movs	r3, #1
 80101cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80101ce:	f002 f833 	bl	8012238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80101d2:	f000 fde7 	bl	8010da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101d6:	f002 f801 	bl	80121dc <vPortEnterCritical>
 80101da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101e0:	b25b      	sxtb	r3, r3
 80101e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e6:	d103      	bne.n	80101f0 <xQueueReceive+0x11c>
 80101e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ea:	2200      	movs	r2, #0
 80101ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101f6:	b25b      	sxtb	r3, r3
 80101f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fc:	d103      	bne.n	8010206 <xQueueReceive+0x132>
 80101fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010200:	2200      	movs	r2, #0
 8010202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010206:	f002 f817 	bl	8012238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801020a:	1d3a      	adds	r2, r7, #4
 801020c:	f107 0310 	add.w	r3, r7, #16
 8010210:	4611      	mov	r1, r2
 8010212:	4618      	mov	r0, r3
 8010214:	f001 f85a 	bl	80112cc <xTaskCheckForTimeOut>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d123      	bne.n	8010266 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801021e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010220:	f000 fad5 	bl	80107ce <prvIsQueueEmpty>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d017      	beq.n	801025a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801022a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022c:	3324      	adds	r3, #36	; 0x24
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	4611      	mov	r1, r2
 8010232:	4618      	mov	r0, r3
 8010234:	f000 ff84 	bl	8011140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801023a:	f000 fa76 	bl	801072a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801023e:	f000 fdbf 	bl	8010dc0 <xTaskResumeAll>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d189      	bne.n	801015c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010248:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <xQueueReceive+0x1b4>)
 801024a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801024e:	601a      	str	r2, [r3, #0]
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	f3bf 8f6f 	isb	sy
 8010258:	e780      	b.n	801015c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801025a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801025c:	f000 fa65 	bl	801072a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010260:	f000 fdae 	bl	8010dc0 <xTaskResumeAll>
 8010264:	e77a      	b.n	801015c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010268:	f000 fa5f 	bl	801072a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801026c:	f000 fda8 	bl	8010dc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010272:	f000 faac 	bl	80107ce <prvIsQueueEmpty>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	f43f af6f 	beq.w	801015c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801027e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010280:	4618      	mov	r0, r3
 8010282:	3730      	adds	r7, #48	; 0x30
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	e000ed04 	.word	0xe000ed04

0801028c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b08e      	sub	sp, #56	; 0x38
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010296:	2300      	movs	r3, #0
 8010298:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801029e:	2300      	movs	r3, #0
 80102a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d109      	bne.n	80102bc <xQueueSemaphoreTake+0x30>
 80102a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ac:	f383 8811 	msr	BASEPRI, r3
 80102b0:	f3bf 8f6f 	isb	sy
 80102b4:	f3bf 8f4f 	dsb	sy
 80102b8:	623b      	str	r3, [r7, #32]
 80102ba:	e7fe      	b.n	80102ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d009      	beq.n	80102d8 <xQueueSemaphoreTake+0x4c>
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	61fb      	str	r3, [r7, #28]
 80102d6:	e7fe      	b.n	80102d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102d8:	f001 f936 	bl	8011548 <xTaskGetSchedulerState>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d102      	bne.n	80102e8 <xQueueSemaphoreTake+0x5c>
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d101      	bne.n	80102ec <xQueueSemaphoreTake+0x60>
 80102e8:	2301      	movs	r3, #1
 80102ea:	e000      	b.n	80102ee <xQueueSemaphoreTake+0x62>
 80102ec:	2300      	movs	r3, #0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d109      	bne.n	8010306 <xQueueSemaphoreTake+0x7a>
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	61bb      	str	r3, [r7, #24]
 8010304:	e7fe      	b.n	8010304 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010306:	f001 ff69 	bl	80121dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	2b00      	cmp	r3, #0
 8010314:	d024      	beq.n	8010360 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010318:	1e5a      	subs	r2, r3, #1
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801031e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d104      	bne.n	8010330 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010326:	f001 fa81 	bl	801182c <pvTaskIncrementMutexHeldCount>
 801032a:	4602      	mov	r2, r0
 801032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00f      	beq.n	8010358 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033a:	3310      	adds	r3, #16
 801033c:	4618      	mov	r0, r3
 801033e:	f000 ff4d 	bl	80111dc <xTaskRemoveFromEventList>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d007      	beq.n	8010358 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010348:	4b53      	ldr	r3, [pc, #332]	; (8010498 <xQueueSemaphoreTake+0x20c>)
 801034a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010358:	f001 ff6e 	bl	8012238 <vPortExitCritical>
				return pdPASS;
 801035c:	2301      	movs	r3, #1
 801035e:	e096      	b.n	801048e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d110      	bne.n	8010388 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010368:	2b00      	cmp	r3, #0
 801036a:	d009      	beq.n	8010380 <xQueueSemaphoreTake+0xf4>
 801036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010370:	f383 8811 	msr	BASEPRI, r3
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	e7fe      	b.n	801037e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010380:	f001 ff5a 	bl	8012238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010384:	2300      	movs	r3, #0
 8010386:	e082      	b.n	801048e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038a:	2b00      	cmp	r3, #0
 801038c:	d106      	bne.n	801039c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801038e:	f107 030c 	add.w	r3, r7, #12
 8010392:	4618      	mov	r0, r3
 8010394:	f000 ff84 	bl	80112a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010398:	2301      	movs	r3, #1
 801039a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801039c:	f001 ff4c 	bl	8012238 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103a0:	f000 fd00 	bl	8010da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103a4:	f001 ff1a 	bl	80121dc <vPortEnterCritical>
 80103a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103ae:	b25b      	sxtb	r3, r3
 80103b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b4:	d103      	bne.n	80103be <xQueueSemaphoreTake+0x132>
 80103b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103c4:	b25b      	sxtb	r3, r3
 80103c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ca:	d103      	bne.n	80103d4 <xQueueSemaphoreTake+0x148>
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103d4:	f001 ff30 	bl	8012238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103d8:	463a      	mov	r2, r7
 80103da:	f107 030c 	add.w	r3, r7, #12
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 ff73 	bl	80112cc <xTaskCheckForTimeOut>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d132      	bne.n	8010452 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103ee:	f000 f9ee 	bl	80107ce <prvIsQueueEmpty>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d026      	beq.n	8010446 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d109      	bne.n	8010414 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010400:	f001 feec 	bl	80121dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	4618      	mov	r0, r3
 801040a:	f001 f8bb 	bl	8011584 <xTaskPriorityInherit>
 801040e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010410:	f001 ff12 	bl	8012238 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	3324      	adds	r3, #36	; 0x24
 8010418:	683a      	ldr	r2, [r7, #0]
 801041a:	4611      	mov	r1, r2
 801041c:	4618      	mov	r0, r3
 801041e:	f000 fe8f 	bl	8011140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010424:	f000 f981 	bl	801072a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010428:	f000 fcca 	bl	8010dc0 <xTaskResumeAll>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	f47f af69 	bne.w	8010306 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010434:	4b18      	ldr	r3, [pc, #96]	; (8010498 <xQueueSemaphoreTake+0x20c>)
 8010436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801043a:	601a      	str	r2, [r3, #0]
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	f3bf 8f6f 	isb	sy
 8010444:	e75f      	b.n	8010306 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010448:	f000 f96f 	bl	801072a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801044c:	f000 fcb8 	bl	8010dc0 <xTaskResumeAll>
 8010450:	e759      	b.n	8010306 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010454:	f000 f969 	bl	801072a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010458:	f000 fcb2 	bl	8010dc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801045c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801045e:	f000 f9b6 	bl	80107ce <prvIsQueueEmpty>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	f43f af4e 	beq.w	8010306 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00d      	beq.n	801048c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010470:	f001 feb4 	bl	80121dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010476:	f000 f8b0 	bl	80105da <prvGetDisinheritPriorityAfterTimeout>
 801047a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010482:	4618      	mov	r0, r3
 8010484:	f001 f952 	bl	801172c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010488:	f001 fed6 	bl	8012238 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801048c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801048e:	4618      	mov	r0, r3
 8010490:	3738      	adds	r7, #56	; 0x38
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	e000ed04 	.word	0xe000ed04

0801049c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b08e      	sub	sp, #56	; 0x38
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d109      	bne.n	80104c6 <xQueueReceiveFromISR+0x2a>
 80104b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b6:	f383 8811 	msr	BASEPRI, r3
 80104ba:	f3bf 8f6f 	isb	sy
 80104be:	f3bf 8f4f 	dsb	sy
 80104c2:	623b      	str	r3, [r7, #32]
 80104c4:	e7fe      	b.n	80104c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d103      	bne.n	80104d4 <xQueueReceiveFromISR+0x38>
 80104cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d101      	bne.n	80104d8 <xQueueReceiveFromISR+0x3c>
 80104d4:	2301      	movs	r3, #1
 80104d6:	e000      	b.n	80104da <xQueueReceiveFromISR+0x3e>
 80104d8:	2300      	movs	r3, #0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d109      	bne.n	80104f2 <xQueueReceiveFromISR+0x56>
 80104de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	61fb      	str	r3, [r7, #28]
 80104f0:	e7fe      	b.n	80104f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104f2:	f001 ff4f 	bl	8012394 <vPortValidateInterruptPriority>
	__asm volatile
 80104f6:	f3ef 8211 	mrs	r2, BASEPRI
 80104fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fe:	f383 8811 	msr	BASEPRI, r3
 8010502:	f3bf 8f6f 	isb	sy
 8010506:	f3bf 8f4f 	dsb	sy
 801050a:	61ba      	str	r2, [r7, #24]
 801050c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801050e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010516:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051a:	2b00      	cmp	r3, #0
 801051c:	d02f      	beq.n	801057e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010528:	68b9      	ldr	r1, [r7, #8]
 801052a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801052c:	f000 f8d7 	bl	80106de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010532:	1e5a      	subs	r2, r3, #1
 8010534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010536:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801053c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010540:	d112      	bne.n	8010568 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d016      	beq.n	8010578 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054c:	3310      	adds	r3, #16
 801054e:	4618      	mov	r0, r3
 8010550:	f000 fe44 	bl	80111dc <xTaskRemoveFromEventList>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00e      	beq.n	8010578 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00b      	beq.n	8010578 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	601a      	str	r2, [r3, #0]
 8010566:	e007      	b.n	8010578 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801056c:	3301      	adds	r3, #1
 801056e:	b2db      	uxtb	r3, r3
 8010570:	b25a      	sxtb	r2, r3
 8010572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010578:	2301      	movs	r3, #1
 801057a:	637b      	str	r3, [r7, #52]	; 0x34
 801057c:	e001      	b.n	8010582 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801057e:	2300      	movs	r3, #0
 8010580:	637b      	str	r3, [r7, #52]	; 0x34
 8010582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010584:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801058c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801058e:	4618      	mov	r0, r3
 8010590:	3738      	adds	r7, #56	; 0x38
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b084      	sub	sp, #16
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d109      	bne.n	80105bc <vQueueDelete+0x26>
	__asm volatile
 80105a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ac:	f383 8811 	msr	BASEPRI, r3
 80105b0:	f3bf 8f6f 	isb	sy
 80105b4:	f3bf 8f4f 	dsb	sy
 80105b8:	60bb      	str	r3, [r7, #8]
 80105ba:	e7fe      	b.n	80105ba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80105bc:	68f8      	ldr	r0, [r7, #12]
 80105be:	f000 f95d 	bl	801087c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d102      	bne.n	80105d2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f001 ffe1 	bl	8012594 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80105d2:	bf00      	nop
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80105da:	b480      	push	{r7}
 80105dc:	b085      	sub	sp, #20
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d006      	beq.n	80105f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80105f4:	60fb      	str	r3, [r7, #12]
 80105f6:	e001      	b.n	80105fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80105f8:	2300      	movs	r3, #0
 80105fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80105fc:	68fb      	ldr	r3, [r7, #12]
	}
 80105fe:	4618      	mov	r0, r3
 8010600:	3714      	adds	r7, #20
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr

0801060a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b086      	sub	sp, #24
 801060e:	af00      	add	r7, sp, #0
 8010610:	60f8      	str	r0, [r7, #12]
 8010612:	60b9      	str	r1, [r7, #8]
 8010614:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010616:	2300      	movs	r3, #0
 8010618:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801061e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010624:	2b00      	cmp	r3, #0
 8010626:	d10d      	bne.n	8010644 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d14d      	bne.n	80106cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	689b      	ldr	r3, [r3, #8]
 8010634:	4618      	mov	r0, r3
 8010636:	f001 f80d 	bl	8011654 <xTaskPriorityDisinherit>
 801063a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2200      	movs	r2, #0
 8010640:	609a      	str	r2, [r3, #8]
 8010642:	e043      	b.n	80106cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d119      	bne.n	801067e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6858      	ldr	r0, [r3, #4]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010652:	461a      	mov	r2, r3
 8010654:	68b9      	ldr	r1, [r7, #8]
 8010656:	f002 f8ee 	bl	8012836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	685a      	ldr	r2, [r3, #4]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010662:	441a      	add	r2, r3
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	685a      	ldr	r2, [r3, #4]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	429a      	cmp	r2, r3
 8010672:	d32b      	bcc.n	80106cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	605a      	str	r2, [r3, #4]
 801067c:	e026      	b.n	80106cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	68d8      	ldr	r0, [r3, #12]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010686:	461a      	mov	r2, r3
 8010688:	68b9      	ldr	r1, [r7, #8]
 801068a:	f002 f8d4 	bl	8012836 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	68da      	ldr	r2, [r3, #12]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010696:	425b      	negs	r3, r3
 8010698:	441a      	add	r2, r3
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	68da      	ldr	r2, [r3, #12]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d207      	bcs.n	80106ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	689a      	ldr	r2, [r3, #8]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106b2:	425b      	negs	r3, r3
 80106b4:	441a      	add	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2b02      	cmp	r3, #2
 80106be:	d105      	bne.n	80106cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d002      	beq.n	80106cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	3b01      	subs	r3, #1
 80106ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80106d4:	697b      	ldr	r3, [r7, #20]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b082      	sub	sp, #8
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d018      	beq.n	8010722 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	68da      	ldr	r2, [r3, #12]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f8:	441a      	add	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	68da      	ldr	r2, [r3, #12]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	429a      	cmp	r2, r3
 8010708:	d303      	bcc.n	8010712 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	68d9      	ldr	r1, [r3, #12]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071a:	461a      	mov	r2, r3
 801071c:	6838      	ldr	r0, [r7, #0]
 801071e:	f002 f88a 	bl	8012836 <memcpy>
	}
}
 8010722:	bf00      	nop
 8010724:	3708      	adds	r7, #8
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}

0801072a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801072a:	b580      	push	{r7, lr}
 801072c:	b084      	sub	sp, #16
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010732:	f001 fd53 	bl	80121dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801073c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801073e:	e011      	b.n	8010764 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010744:	2b00      	cmp	r3, #0
 8010746:	d012      	beq.n	801076e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	3324      	adds	r3, #36	; 0x24
 801074c:	4618      	mov	r0, r3
 801074e:	f000 fd45 	bl	80111dc <xTaskRemoveFromEventList>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d001      	beq.n	801075c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010758:	f000 fe18 	bl	801138c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801075c:	7bfb      	ldrb	r3, [r7, #15]
 801075e:	3b01      	subs	r3, #1
 8010760:	b2db      	uxtb	r3, r3
 8010762:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010768:	2b00      	cmp	r3, #0
 801076a:	dce9      	bgt.n	8010740 <prvUnlockQueue+0x16>
 801076c:	e000      	b.n	8010770 <prvUnlockQueue+0x46>
					break;
 801076e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	22ff      	movs	r2, #255	; 0xff
 8010774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010778:	f001 fd5e 	bl	8012238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801077c:	f001 fd2e 	bl	80121dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010786:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010788:	e011      	b.n	80107ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	691b      	ldr	r3, [r3, #16]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d012      	beq.n	80107b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3310      	adds	r3, #16
 8010796:	4618      	mov	r0, r3
 8010798:	f000 fd20 	bl	80111dc <xTaskRemoveFromEventList>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d001      	beq.n	80107a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80107a2:	f000 fdf3 	bl	801138c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80107a6:	7bbb      	ldrb	r3, [r7, #14]
 80107a8:	3b01      	subs	r3, #1
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80107ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	dce9      	bgt.n	801078a <prvUnlockQueue+0x60>
 80107b6:	e000      	b.n	80107ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80107b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	22ff      	movs	r2, #255	; 0xff
 80107be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80107c2:	f001 fd39 	bl	8012238 <vPortExitCritical>
}
 80107c6:	bf00      	nop
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b084      	sub	sp, #16
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80107d6:	f001 fd01 	bl	80121dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d102      	bne.n	80107e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80107e2:	2301      	movs	r3, #1
 80107e4:	60fb      	str	r3, [r7, #12]
 80107e6:	e001      	b.n	80107ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80107e8:	2300      	movs	r3, #0
 80107ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80107ec:	f001 fd24 	bl	8012238 <vPortExitCritical>

	return xReturn;
 80107f0:	68fb      	ldr	r3, [r7, #12]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010802:	f001 fceb 	bl	80121dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801080e:	429a      	cmp	r2, r3
 8010810:	d102      	bne.n	8010818 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010812:	2301      	movs	r3, #1
 8010814:	60fb      	str	r3, [r7, #12]
 8010816:	e001      	b.n	801081c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010818:	2300      	movs	r3, #0
 801081a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801081c:	f001 fd0c 	bl	8012238 <vPortExitCritical>

	return xReturn;
 8010820:	68fb      	ldr	r3, [r7, #12]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3710      	adds	r7, #16
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
	...

0801082c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010836:	2300      	movs	r3, #0
 8010838:	60fb      	str	r3, [r7, #12]
 801083a:	e014      	b.n	8010866 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801083c:	4a0e      	ldr	r2, [pc, #56]	; (8010878 <vQueueAddToRegistry+0x4c>)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d10b      	bne.n	8010860 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010848:	490b      	ldr	r1, [pc, #44]	; (8010878 <vQueueAddToRegistry+0x4c>)
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010852:	4a09      	ldr	r2, [pc, #36]	; (8010878 <vQueueAddToRegistry+0x4c>)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	00db      	lsls	r3, r3, #3
 8010858:	4413      	add	r3, r2
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801085e:	e005      	b.n	801086c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	3301      	adds	r3, #1
 8010864:	60fb      	str	r3, [r7, #12]
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2b07      	cmp	r3, #7
 801086a:	d9e7      	bls.n	801083c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801086c:	bf00      	nop
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	20004100 	.word	0x20004100

0801087c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010884:	2300      	movs	r3, #0
 8010886:	60fb      	str	r3, [r7, #12]
 8010888:	e016      	b.n	80108b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801088a:	4a10      	ldr	r2, [pc, #64]	; (80108cc <vQueueUnregisterQueue+0x50>)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	00db      	lsls	r3, r3, #3
 8010890:	4413      	add	r3, r2
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	429a      	cmp	r2, r3
 8010898:	d10b      	bne.n	80108b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801089a:	4a0c      	ldr	r2, [pc, #48]	; (80108cc <vQueueUnregisterQueue+0x50>)
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2100      	movs	r1, #0
 80108a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80108a4:	4a09      	ldr	r2, [pc, #36]	; (80108cc <vQueueUnregisterQueue+0x50>)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	00db      	lsls	r3, r3, #3
 80108aa:	4413      	add	r3, r2
 80108ac:	2200      	movs	r2, #0
 80108ae:	605a      	str	r2, [r3, #4]
				break;
 80108b0:	e005      	b.n	80108be <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3301      	adds	r3, #1
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b07      	cmp	r3, #7
 80108bc:	d9e5      	bls.n	801088a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80108be:	bf00      	nop
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	20004100 	.word	0x20004100

080108d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b086      	sub	sp, #24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80108e0:	f001 fc7c 	bl	80121dc <vPortEnterCritical>
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108ea:	b25b      	sxtb	r3, r3
 80108ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f0:	d103      	bne.n	80108fa <vQueueWaitForMessageRestricted+0x2a>
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	2200      	movs	r2, #0
 80108f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010900:	b25b      	sxtb	r3, r3
 8010902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010906:	d103      	bne.n	8010910 <vQueueWaitForMessageRestricted+0x40>
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	2200      	movs	r2, #0
 801090c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010910:	f001 fc92 	bl	8012238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010918:	2b00      	cmp	r3, #0
 801091a:	d106      	bne.n	801092a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	3324      	adds	r3, #36	; 0x24
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	68b9      	ldr	r1, [r7, #8]
 8010924:	4618      	mov	r0, r3
 8010926:	f000 fc2f 	bl	8011188 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801092a:	6978      	ldr	r0, [r7, #20]
 801092c:	f7ff fefd 	bl	801072a <prvUnlockQueue>
	}
 8010930:	bf00      	nop
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010938:	b580      	push	{r7, lr}
 801093a:	b08e      	sub	sp, #56	; 0x38
 801093c:	af04      	add	r7, sp, #16
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010948:	2b00      	cmp	r3, #0
 801094a:	d109      	bne.n	8010960 <xTaskCreateStatic+0x28>
 801094c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010950:	f383 8811 	msr	BASEPRI, r3
 8010954:	f3bf 8f6f 	isb	sy
 8010958:	f3bf 8f4f 	dsb	sy
 801095c:	623b      	str	r3, [r7, #32]
 801095e:	e7fe      	b.n	801095e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010962:	2b00      	cmp	r3, #0
 8010964:	d109      	bne.n	801097a <xTaskCreateStatic+0x42>
 8010966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096a:	f383 8811 	msr	BASEPRI, r3
 801096e:	f3bf 8f6f 	isb	sy
 8010972:	f3bf 8f4f 	dsb	sy
 8010976:	61fb      	str	r3, [r7, #28]
 8010978:	e7fe      	b.n	8010978 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801097a:	235c      	movs	r3, #92	; 0x5c
 801097c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	2b5c      	cmp	r3, #92	; 0x5c
 8010982:	d009      	beq.n	8010998 <xTaskCreateStatic+0x60>
 8010984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	61bb      	str	r3, [r7, #24]
 8010996:	e7fe      	b.n	8010996 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010998:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	2b00      	cmp	r3, #0
 801099e:	d01e      	beq.n	80109de <xTaskCreateStatic+0xa6>
 80109a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d01b      	beq.n	80109de <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80109a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80109aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	2202      	movs	r2, #2
 80109b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80109b8:	2300      	movs	r3, #0
 80109ba:	9303      	str	r3, [sp, #12]
 80109bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109be:	9302      	str	r3, [sp, #8]
 80109c0:	f107 0314 	add.w	r3, r7, #20
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	68b9      	ldr	r1, [r7, #8]
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f000 f850 	bl	8010a76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109d8:	f000 f8dc 	bl	8010b94 <prvAddNewTaskToReadyList>
 80109dc:	e001      	b.n	80109e2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80109de:	2300      	movs	r3, #0
 80109e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80109e2:	697b      	ldr	r3, [r7, #20]
	}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3728      	adds	r7, #40	; 0x28
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08c      	sub	sp, #48	; 0x30
 80109f0:	af04      	add	r7, sp, #16
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	603b      	str	r3, [r7, #0]
 80109f8:	4613      	mov	r3, r2
 80109fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80109fc:	88fb      	ldrh	r3, [r7, #6]
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4618      	mov	r0, r3
 8010a02:	f001 fd05 	bl	8012410 <pvPortMalloc>
 8010a06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00e      	beq.n	8010a2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010a0e:	205c      	movs	r0, #92	; 0x5c
 8010a10:	f001 fcfe 	bl	8012410 <pvPortMalloc>
 8010a14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	697a      	ldr	r2, [r7, #20]
 8010a20:	631a      	str	r2, [r3, #48]	; 0x30
 8010a22:	e005      	b.n	8010a30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010a24:	6978      	ldr	r0, [r7, #20]
 8010a26:	f001 fdb5 	bl	8012594 <vPortFree>
 8010a2a:	e001      	b.n	8010a30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d017      	beq.n	8010a66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010a3e:	88fa      	ldrh	r2, [r7, #6]
 8010a40:	2300      	movs	r3, #0
 8010a42:	9303      	str	r3, [sp, #12]
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	9302      	str	r3, [sp, #8]
 8010a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4a:	9301      	str	r3, [sp, #4]
 8010a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	68b9      	ldr	r1, [r7, #8]
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 f80e 	bl	8010a76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a5a:	69f8      	ldr	r0, [r7, #28]
 8010a5c:	f000 f89a 	bl	8010b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010a60:	2301      	movs	r3, #1
 8010a62:	61bb      	str	r3, [r7, #24]
 8010a64:	e002      	b.n	8010a6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a66:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a6c:	69bb      	ldr	r3, [r7, #24]
	}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3720      	adds	r7, #32
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b088      	sub	sp, #32
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	60f8      	str	r0, [r7, #12]
 8010a7e:	60b9      	str	r1, [r7, #8]
 8010a80:	607a      	str	r2, [r7, #4]
 8010a82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	009b      	lsls	r3, r3, #2
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	21a5      	movs	r1, #165	; 0xa5
 8010a90:	f001 fedc 	bl	801284c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4413      	add	r3, r2
 8010aa4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	f023 0307 	bic.w	r3, r3, #7
 8010aac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	f003 0307 	and.w	r3, r3, #7
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d009      	beq.n	8010acc <prvInitialiseNewTask+0x56>
 8010ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010abc:	f383 8811 	msr	BASEPRI, r3
 8010ac0:	f3bf 8f6f 	isb	sy
 8010ac4:	f3bf 8f4f 	dsb	sy
 8010ac8:	617b      	str	r3, [r7, #20]
 8010aca:	e7fe      	b.n	8010aca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d01f      	beq.n	8010b12 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	61fb      	str	r3, [r7, #28]
 8010ad6:	e012      	b.n	8010afe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ad8:	68ba      	ldr	r2, [r7, #8]
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	4413      	add	r3, r2
 8010ade:	7819      	ldrb	r1, [r3, #0]
 8010ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	3334      	adds	r3, #52	; 0x34
 8010ae8:	460a      	mov	r2, r1
 8010aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010aec:	68ba      	ldr	r2, [r7, #8]
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	4413      	add	r3, r2
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d006      	beq.n	8010b06 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	3301      	adds	r3, #1
 8010afc:	61fb      	str	r3, [r7, #28]
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	2b0f      	cmp	r3, #15
 8010b02:	d9e9      	bls.n	8010ad8 <prvInitialiseNewTask+0x62>
 8010b04:	e000      	b.n	8010b08 <prvInitialiseNewTask+0x92>
			{
				break;
 8010b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b10:	e003      	b.n	8010b1a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b14:	2200      	movs	r2, #0
 8010b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1c:	2b37      	cmp	r3, #55	; 0x37
 8010b1e:	d901      	bls.n	8010b24 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010b20:	2337      	movs	r3, #55	; 0x37
 8010b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b32:	2200      	movs	r2, #0
 8010b34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b38:	3304      	adds	r3, #4
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fe fe7a 	bl	800f834 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b42:	3318      	adds	r3, #24
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7fe fe75 	bl	800f834 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b62:	2200      	movs	r2, #0
 8010b64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b6e:	683a      	ldr	r2, [r7, #0]
 8010b70:	68f9      	ldr	r1, [r7, #12]
 8010b72:	69b8      	ldr	r0, [r7, #24]
 8010b74:	f001 fa08 	bl	8011f88 <pxPortInitialiseStack>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b8a:	bf00      	nop
 8010b8c:	3720      	adds	r7, #32
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010b9c:	f001 fb1e 	bl	80121dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ba0:	4b2d      	ldr	r3, [pc, #180]	; (8010c58 <prvAddNewTaskToReadyList+0xc4>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	4a2c      	ldr	r2, [pc, #176]	; (8010c58 <prvAddNewTaskToReadyList+0xc4>)
 8010ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010baa:	4b2c      	ldr	r3, [pc, #176]	; (8010c5c <prvAddNewTaskToReadyList+0xc8>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d109      	bne.n	8010bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010bb2:	4a2a      	ldr	r2, [pc, #168]	; (8010c5c <prvAddNewTaskToReadyList+0xc8>)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010bb8:	4b27      	ldr	r3, [pc, #156]	; (8010c58 <prvAddNewTaskToReadyList+0xc4>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d110      	bne.n	8010be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010bc0:	f000 fc08 	bl	80113d4 <prvInitialiseTaskLists>
 8010bc4:	e00d      	b.n	8010be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010bc6:	4b26      	ldr	r3, [pc, #152]	; (8010c60 <prvAddNewTaskToReadyList+0xcc>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d109      	bne.n	8010be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010bce:	4b23      	ldr	r3, [pc, #140]	; (8010c5c <prvAddNewTaskToReadyList+0xc8>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d802      	bhi.n	8010be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010bdc:	4a1f      	ldr	r2, [pc, #124]	; (8010c5c <prvAddNewTaskToReadyList+0xc8>)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010be2:	4b20      	ldr	r3, [pc, #128]	; (8010c64 <prvAddNewTaskToReadyList+0xd0>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3301      	adds	r3, #1
 8010be8:	4a1e      	ldr	r2, [pc, #120]	; (8010c64 <prvAddNewTaskToReadyList+0xd0>)
 8010bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010bec:	4b1d      	ldr	r3, [pc, #116]	; (8010c64 <prvAddNewTaskToReadyList+0xd0>)
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bf8:	4b1b      	ldr	r3, [pc, #108]	; (8010c68 <prvAddNewTaskToReadyList+0xd4>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d903      	bls.n	8010c08 <prvAddNewTaskToReadyList+0x74>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c04:	4a18      	ldr	r2, [pc, #96]	; (8010c68 <prvAddNewTaskToReadyList+0xd4>)
 8010c06:	6013      	str	r3, [r2, #0]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	4413      	add	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4a15      	ldr	r2, [pc, #84]	; (8010c6c <prvAddNewTaskToReadyList+0xd8>)
 8010c16:	441a      	add	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3304      	adds	r3, #4
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	4610      	mov	r0, r2
 8010c20:	f7fe fe15 	bl	800f84e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010c24:	f001 fb08 	bl	8012238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010c28:	4b0d      	ldr	r3, [pc, #52]	; (8010c60 <prvAddNewTaskToReadyList+0xcc>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d00e      	beq.n	8010c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010c30:	4b0a      	ldr	r3, [pc, #40]	; (8010c5c <prvAddNewTaskToReadyList+0xc8>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d207      	bcs.n	8010c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010c3e:	4b0c      	ldr	r3, [pc, #48]	; (8010c70 <prvAddNewTaskToReadyList+0xdc>)
 8010c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c44:	601a      	str	r2, [r3, #0]
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c4e:	bf00      	nop
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	20001350 	.word	0x20001350
 8010c5c:	20000e7c 	.word	0x20000e7c
 8010c60:	2000135c 	.word	0x2000135c
 8010c64:	2000136c 	.word	0x2000136c
 8010c68:	20001358 	.word	0x20001358
 8010c6c:	20000e80 	.word	0x20000e80
 8010c70:	e000ed04 	.word	0xe000ed04

08010c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d016      	beq.n	8010cb4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010c86:	4b13      	ldr	r3, [pc, #76]	; (8010cd4 <vTaskDelay+0x60>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d009      	beq.n	8010ca2 <vTaskDelay+0x2e>
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	60bb      	str	r3, [r7, #8]
 8010ca0:	e7fe      	b.n	8010ca0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010ca2:	f000 f87f 	bl	8010da4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 fdd3 	bl	8011854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010cae:	f000 f887 	bl	8010dc0 <xTaskResumeAll>
 8010cb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d107      	bne.n	8010cca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010cba:	4b07      	ldr	r3, [pc, #28]	; (8010cd8 <vTaskDelay+0x64>)
 8010cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	f3bf 8f4f 	dsb	sy
 8010cc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010cca:	bf00      	nop
 8010ccc:	3710      	adds	r7, #16
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20001378 	.word	0x20001378
 8010cd8:	e000ed04 	.word	0xe000ed04

08010cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08a      	sub	sp, #40	; 0x28
 8010ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010cea:	463a      	mov	r2, r7
 8010cec:	1d39      	adds	r1, r7, #4
 8010cee:	f107 0308 	add.w	r3, r7, #8
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fe fd4a 	bl	800f78c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010cf8:	6839      	ldr	r1, [r7, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	68ba      	ldr	r2, [r7, #8]
 8010cfe:	9202      	str	r2, [sp, #8]
 8010d00:	9301      	str	r3, [sp, #4]
 8010d02:	2300      	movs	r3, #0
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	2300      	movs	r3, #0
 8010d08:	460a      	mov	r2, r1
 8010d0a:	4920      	ldr	r1, [pc, #128]	; (8010d8c <vTaskStartScheduler+0xb0>)
 8010d0c:	4820      	ldr	r0, [pc, #128]	; (8010d90 <vTaskStartScheduler+0xb4>)
 8010d0e:	f7ff fe13 	bl	8010938 <xTaskCreateStatic>
 8010d12:	4602      	mov	r2, r0
 8010d14:	4b1f      	ldr	r3, [pc, #124]	; (8010d94 <vTaskStartScheduler+0xb8>)
 8010d16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010d18:	4b1e      	ldr	r3, [pc, #120]	; (8010d94 <vTaskStartScheduler+0xb8>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010d20:	2301      	movs	r3, #1
 8010d22:	617b      	str	r3, [r7, #20]
 8010d24:	e001      	b.n	8010d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010d26:	2300      	movs	r3, #0
 8010d28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d102      	bne.n	8010d36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010d30:	f000 fde4 	bl	80118fc <xTimerCreateTimerTask>
 8010d34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d115      	bne.n	8010d68 <vTaskStartScheduler+0x8c>
 8010d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d40:	f383 8811 	msr	BASEPRI, r3
 8010d44:	f3bf 8f6f 	isb	sy
 8010d48:	f3bf 8f4f 	dsb	sy
 8010d4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010d4e:	4b12      	ldr	r3, [pc, #72]	; (8010d98 <vTaskStartScheduler+0xbc>)
 8010d50:	f04f 32ff 	mov.w	r2, #4294967295
 8010d54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010d56:	4b11      	ldr	r3, [pc, #68]	; (8010d9c <vTaskStartScheduler+0xc0>)
 8010d58:	2201      	movs	r2, #1
 8010d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010d5c:	4b10      	ldr	r3, [pc, #64]	; (8010da0 <vTaskStartScheduler+0xc4>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010d62:	f001 f99d 	bl	80120a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010d66:	e00d      	b.n	8010d84 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6e:	d109      	bne.n	8010d84 <vTaskStartScheduler+0xa8>
 8010d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	60fb      	str	r3, [r7, #12]
 8010d82:	e7fe      	b.n	8010d82 <vTaskStartScheduler+0xa6>
}
 8010d84:	bf00      	nop
 8010d86:	3718      	adds	r7, #24
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	08014ea8 	.word	0x08014ea8
 8010d90:	080113a5 	.word	0x080113a5
 8010d94:	20001374 	.word	0x20001374
 8010d98:	20001370 	.word	0x20001370
 8010d9c:	2000135c 	.word	0x2000135c
 8010da0:	20001354 	.word	0x20001354

08010da4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010da4:	b480      	push	{r7}
 8010da6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010da8:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <vTaskSuspendAll+0x18>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3301      	adds	r3, #1
 8010dae:	4a03      	ldr	r2, [pc, #12]	; (8010dbc <vTaskSuspendAll+0x18>)
 8010db0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010db2:	bf00      	nop
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	20001378 	.word	0x20001378

08010dc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010dce:	4b41      	ldr	r3, [pc, #260]	; (8010ed4 <xTaskResumeAll+0x114>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d109      	bne.n	8010dea <xTaskResumeAll+0x2a>
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	f383 8811 	msr	BASEPRI, r3
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	603b      	str	r3, [r7, #0]
 8010de8:	e7fe      	b.n	8010de8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010dea:	f001 f9f7 	bl	80121dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010dee:	4b39      	ldr	r3, [pc, #228]	; (8010ed4 <xTaskResumeAll+0x114>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3b01      	subs	r3, #1
 8010df4:	4a37      	ldr	r2, [pc, #220]	; (8010ed4 <xTaskResumeAll+0x114>)
 8010df6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010df8:	4b36      	ldr	r3, [pc, #216]	; (8010ed4 <xTaskResumeAll+0x114>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d162      	bne.n	8010ec6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010e00:	4b35      	ldr	r3, [pc, #212]	; (8010ed8 <xTaskResumeAll+0x118>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d05e      	beq.n	8010ec6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e08:	e02f      	b.n	8010e6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e0a:	4b34      	ldr	r3, [pc, #208]	; (8010edc <xTaskResumeAll+0x11c>)
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	3318      	adds	r3, #24
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fe fd76 	bl	800f908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	3304      	adds	r3, #4
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fe fd71 	bl	800f908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e2a:	4b2d      	ldr	r3, [pc, #180]	; (8010ee0 <xTaskResumeAll+0x120>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d903      	bls.n	8010e3a <xTaskResumeAll+0x7a>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e36:	4a2a      	ldr	r2, [pc, #168]	; (8010ee0 <xTaskResumeAll+0x120>)
 8010e38:	6013      	str	r3, [r2, #0]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e3e:	4613      	mov	r3, r2
 8010e40:	009b      	lsls	r3, r3, #2
 8010e42:	4413      	add	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	4a27      	ldr	r2, [pc, #156]	; (8010ee4 <xTaskResumeAll+0x124>)
 8010e48:	441a      	add	r2, r3
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	3304      	adds	r3, #4
 8010e4e:	4619      	mov	r1, r3
 8010e50:	4610      	mov	r0, r2
 8010e52:	f7fe fcfc 	bl	800f84e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e5a:	4b23      	ldr	r3, [pc, #140]	; (8010ee8 <xTaskResumeAll+0x128>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d302      	bcc.n	8010e6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010e64:	4b21      	ldr	r3, [pc, #132]	; (8010eec <xTaskResumeAll+0x12c>)
 8010e66:	2201      	movs	r2, #1
 8010e68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e6a:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <xTaskResumeAll+0x11c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1cb      	bne.n	8010e0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d001      	beq.n	8010e7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010e78:	f000 fb46 	bl	8011508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010e7c:	4b1c      	ldr	r3, [pc, #112]	; (8010ef0 <xTaskResumeAll+0x130>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d010      	beq.n	8010eaa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e88:	f000 f846 	bl	8010f18 <xTaskIncrementTick>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d002      	beq.n	8010e98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010e92:	4b16      	ldr	r3, [pc, #88]	; (8010eec <xTaskResumeAll+0x12c>)
 8010e94:	2201      	movs	r2, #1
 8010e96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1f1      	bne.n	8010e88 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010ea4:	4b12      	ldr	r3, [pc, #72]	; (8010ef0 <xTaskResumeAll+0x130>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010eaa:	4b10      	ldr	r3, [pc, #64]	; (8010eec <xTaskResumeAll+0x12c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d009      	beq.n	8010ec6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010eb6:	4b0f      	ldr	r3, [pc, #60]	; (8010ef4 <xTaskResumeAll+0x134>)
 8010eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ebc:	601a      	str	r2, [r3, #0]
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ec6:	f001 f9b7 	bl	8012238 <vPortExitCritical>

	return xAlreadyYielded;
 8010eca:	68bb      	ldr	r3, [r7, #8]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	20001378 	.word	0x20001378
 8010ed8:	20001350 	.word	0x20001350
 8010edc:	20001310 	.word	0x20001310
 8010ee0:	20001358 	.word	0x20001358
 8010ee4:	20000e80 	.word	0x20000e80
 8010ee8:	20000e7c 	.word	0x20000e7c
 8010eec:	20001364 	.word	0x20001364
 8010ef0:	20001360 	.word	0x20001360
 8010ef4:	e000ed04 	.word	0xe000ed04

08010ef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010efe:	4b05      	ldr	r3, [pc, #20]	; (8010f14 <xTaskGetTickCount+0x1c>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010f04:	687b      	ldr	r3, [r7, #4]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	370c      	adds	r7, #12
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	20001354 	.word	0x20001354

08010f18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b086      	sub	sp, #24
 8010f1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f22:	4b4e      	ldr	r3, [pc, #312]	; (801105c <xTaskIncrementTick+0x144>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f040 8088 	bne.w	801103c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010f2c:	4b4c      	ldr	r3, [pc, #304]	; (8011060 <xTaskIncrementTick+0x148>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	3301      	adds	r3, #1
 8010f32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010f34:	4a4a      	ldr	r2, [pc, #296]	; (8011060 <xTaskIncrementTick+0x148>)
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d11f      	bne.n	8010f80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010f40:	4b48      	ldr	r3, [pc, #288]	; (8011064 <xTaskIncrementTick+0x14c>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d009      	beq.n	8010f5e <xTaskIncrementTick+0x46>
 8010f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4e:	f383 8811 	msr	BASEPRI, r3
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	f3bf 8f4f 	dsb	sy
 8010f5a:	603b      	str	r3, [r7, #0]
 8010f5c:	e7fe      	b.n	8010f5c <xTaskIncrementTick+0x44>
 8010f5e:	4b41      	ldr	r3, [pc, #260]	; (8011064 <xTaskIncrementTick+0x14c>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	60fb      	str	r3, [r7, #12]
 8010f64:	4b40      	ldr	r3, [pc, #256]	; (8011068 <xTaskIncrementTick+0x150>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	4a3e      	ldr	r2, [pc, #248]	; (8011064 <xTaskIncrementTick+0x14c>)
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	4a3e      	ldr	r2, [pc, #248]	; (8011068 <xTaskIncrementTick+0x150>)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6013      	str	r3, [r2, #0]
 8010f72:	4b3e      	ldr	r3, [pc, #248]	; (801106c <xTaskIncrementTick+0x154>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	3301      	adds	r3, #1
 8010f78:	4a3c      	ldr	r2, [pc, #240]	; (801106c <xTaskIncrementTick+0x154>)
 8010f7a:	6013      	str	r3, [r2, #0]
 8010f7c:	f000 fac4 	bl	8011508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f80:	4b3b      	ldr	r3, [pc, #236]	; (8011070 <xTaskIncrementTick+0x158>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	693a      	ldr	r2, [r7, #16]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d349      	bcc.n	801101e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f8a:	4b36      	ldr	r3, [pc, #216]	; (8011064 <xTaskIncrementTick+0x14c>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d104      	bne.n	8010f9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f94:	4b36      	ldr	r3, [pc, #216]	; (8011070 <xTaskIncrementTick+0x158>)
 8010f96:	f04f 32ff 	mov.w	r2, #4294967295
 8010f9a:	601a      	str	r2, [r3, #0]
					break;
 8010f9c:	e03f      	b.n	801101e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f9e:	4b31      	ldr	r3, [pc, #196]	; (8011064 <xTaskIncrementTick+0x14c>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010fae:	693a      	ldr	r2, [r7, #16]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d203      	bcs.n	8010fbe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010fb6:	4a2e      	ldr	r2, [pc, #184]	; (8011070 <xTaskIncrementTick+0x158>)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010fbc:	e02f      	b.n	801101e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fca0 	bl	800f908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d004      	beq.n	8010fda <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	3318      	adds	r3, #24
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fe fc97 	bl	800f908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fde:	4b25      	ldr	r3, [pc, #148]	; (8011074 <xTaskIncrementTick+0x15c>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d903      	bls.n	8010fee <xTaskIncrementTick+0xd6>
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fea:	4a22      	ldr	r2, [pc, #136]	; (8011074 <xTaskIncrementTick+0x15c>)
 8010fec:	6013      	str	r3, [r2, #0]
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	009b      	lsls	r3, r3, #2
 8010ff6:	4413      	add	r3, r2
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	4a1f      	ldr	r2, [pc, #124]	; (8011078 <xTaskIncrementTick+0x160>)
 8010ffc:	441a      	add	r2, r3
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	3304      	adds	r3, #4
 8011002:	4619      	mov	r1, r3
 8011004:	4610      	mov	r0, r2
 8011006:	f7fe fc22 	bl	800f84e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801100e:	4b1b      	ldr	r3, [pc, #108]	; (801107c <xTaskIncrementTick+0x164>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011014:	429a      	cmp	r2, r3
 8011016:	d3b8      	bcc.n	8010f8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011018:	2301      	movs	r3, #1
 801101a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801101c:	e7b5      	b.n	8010f8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801101e:	4b17      	ldr	r3, [pc, #92]	; (801107c <xTaskIncrementTick+0x164>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011024:	4914      	ldr	r1, [pc, #80]	; (8011078 <xTaskIncrementTick+0x160>)
 8011026:	4613      	mov	r3, r2
 8011028:	009b      	lsls	r3, r3, #2
 801102a:	4413      	add	r3, r2
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	440b      	add	r3, r1
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d907      	bls.n	8011046 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011036:	2301      	movs	r3, #1
 8011038:	617b      	str	r3, [r7, #20]
 801103a:	e004      	b.n	8011046 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801103c:	4b10      	ldr	r3, [pc, #64]	; (8011080 <xTaskIncrementTick+0x168>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	3301      	adds	r3, #1
 8011042:	4a0f      	ldr	r2, [pc, #60]	; (8011080 <xTaskIncrementTick+0x168>)
 8011044:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011046:	4b0f      	ldr	r3, [pc, #60]	; (8011084 <xTaskIncrementTick+0x16c>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801104e:	2301      	movs	r3, #1
 8011050:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011052:	697b      	ldr	r3, [r7, #20]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	20001378 	.word	0x20001378
 8011060:	20001354 	.word	0x20001354
 8011064:	20001308 	.word	0x20001308
 8011068:	2000130c 	.word	0x2000130c
 801106c:	20001368 	.word	0x20001368
 8011070:	20001370 	.word	0x20001370
 8011074:	20001358 	.word	0x20001358
 8011078:	20000e80 	.word	0x20000e80
 801107c:	20000e7c 	.word	0x20000e7c
 8011080:	20001360 	.word	0x20001360
 8011084:	20001364 	.word	0x20001364

08011088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801108e:	4b27      	ldr	r3, [pc, #156]	; (801112c <vTaskSwitchContext+0xa4>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011096:	4b26      	ldr	r3, [pc, #152]	; (8011130 <vTaskSwitchContext+0xa8>)
 8011098:	2201      	movs	r2, #1
 801109a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801109c:	e040      	b.n	8011120 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801109e:	4b24      	ldr	r3, [pc, #144]	; (8011130 <vTaskSwitchContext+0xa8>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110a4:	4b23      	ldr	r3, [pc, #140]	; (8011134 <vTaskSwitchContext+0xac>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	60fb      	str	r3, [r7, #12]
 80110aa:	e00f      	b.n	80110cc <vTaskSwitchContext+0x44>
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d109      	bne.n	80110c6 <vTaskSwitchContext+0x3e>
 80110b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b6:	f383 8811 	msr	BASEPRI, r3
 80110ba:	f3bf 8f6f 	isb	sy
 80110be:	f3bf 8f4f 	dsb	sy
 80110c2:	607b      	str	r3, [r7, #4]
 80110c4:	e7fe      	b.n	80110c4 <vTaskSwitchContext+0x3c>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3b01      	subs	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	491a      	ldr	r1, [pc, #104]	; (8011138 <vTaskSwitchContext+0xb0>)
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	4613      	mov	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4413      	add	r3, r2
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	440b      	add	r3, r1
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d0e5      	beq.n	80110ac <vTaskSwitchContext+0x24>
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	4613      	mov	r3, r2
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	4413      	add	r3, r2
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4a13      	ldr	r2, [pc, #76]	; (8011138 <vTaskSwitchContext+0xb0>)
 80110ec:	4413      	add	r3, r2
 80110ee:	60bb      	str	r3, [r7, #8]
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	685a      	ldr	r2, [r3, #4]
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	605a      	str	r2, [r3, #4]
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	685a      	ldr	r2, [r3, #4]
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	3308      	adds	r3, #8
 8011102:	429a      	cmp	r2, r3
 8011104:	d104      	bne.n	8011110 <vTaskSwitchContext+0x88>
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	685a      	ldr	r2, [r3, #4]
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	605a      	str	r2, [r3, #4]
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	4a09      	ldr	r2, [pc, #36]	; (801113c <vTaskSwitchContext+0xb4>)
 8011118:	6013      	str	r3, [r2, #0]
 801111a:	4a06      	ldr	r2, [pc, #24]	; (8011134 <vTaskSwitchContext+0xac>)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6013      	str	r3, [r2, #0]
}
 8011120:	bf00      	nop
 8011122:	3714      	adds	r7, #20
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	20001378 	.word	0x20001378
 8011130:	20001364 	.word	0x20001364
 8011134:	20001358 	.word	0x20001358
 8011138:	20000e80 	.word	0x20000e80
 801113c:	20000e7c 	.word	0x20000e7c

08011140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d109      	bne.n	8011164 <vTaskPlaceOnEventList+0x24>
 8011150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011154:	f383 8811 	msr	BASEPRI, r3
 8011158:	f3bf 8f6f 	isb	sy
 801115c:	f3bf 8f4f 	dsb	sy
 8011160:	60fb      	str	r3, [r7, #12]
 8011162:	e7fe      	b.n	8011162 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011164:	4b07      	ldr	r3, [pc, #28]	; (8011184 <vTaskPlaceOnEventList+0x44>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	3318      	adds	r3, #24
 801116a:	4619      	mov	r1, r3
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7fe fb92 	bl	800f896 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011172:	2101      	movs	r1, #1
 8011174:	6838      	ldr	r0, [r7, #0]
 8011176:	f000 fb6d 	bl	8011854 <prvAddCurrentTaskToDelayedList>
}
 801117a:	bf00      	nop
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	20000e7c 	.word	0x20000e7c

08011188 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011188:	b580      	push	{r7, lr}
 801118a:	b086      	sub	sp, #24
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d109      	bne.n	80111ae <vTaskPlaceOnEventListRestricted+0x26>
 801119a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119e:	f383 8811 	msr	BASEPRI, r3
 80111a2:	f3bf 8f6f 	isb	sy
 80111a6:	f3bf 8f4f 	dsb	sy
 80111aa:	617b      	str	r3, [r7, #20]
 80111ac:	e7fe      	b.n	80111ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80111ae:	4b0a      	ldr	r3, [pc, #40]	; (80111d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	3318      	adds	r3, #24
 80111b4:	4619      	mov	r1, r3
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	f7fe fb49 	bl	800f84e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80111c2:	f04f 33ff 	mov.w	r3, #4294967295
 80111c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80111c8:	6879      	ldr	r1, [r7, #4]
 80111ca:	68b8      	ldr	r0, [r7, #8]
 80111cc:	f000 fb42 	bl	8011854 <prvAddCurrentTaskToDelayedList>
	}
 80111d0:	bf00      	nop
 80111d2:	3718      	adds	r7, #24
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	20000e7c 	.word	0x20000e7c

080111dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b086      	sub	sp, #24
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d109      	bne.n	8011206 <xTaskRemoveFromEventList+0x2a>
 80111f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	60fb      	str	r3, [r7, #12]
 8011204:	e7fe      	b.n	8011204 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	3318      	adds	r3, #24
 801120a:	4618      	mov	r0, r3
 801120c:	f7fe fb7c 	bl	800f908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011210:	4b1d      	ldr	r3, [pc, #116]	; (8011288 <xTaskRemoveFromEventList+0xac>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d11d      	bne.n	8011254 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	3304      	adds	r3, #4
 801121c:	4618      	mov	r0, r3
 801121e:	f7fe fb73 	bl	800f908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011226:	4b19      	ldr	r3, [pc, #100]	; (801128c <xTaskRemoveFromEventList+0xb0>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	d903      	bls.n	8011236 <xTaskRemoveFromEventList+0x5a>
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011232:	4a16      	ldr	r2, [pc, #88]	; (801128c <xTaskRemoveFromEventList+0xb0>)
 8011234:	6013      	str	r3, [r2, #0]
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801123a:	4613      	mov	r3, r2
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	4413      	add	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	4a13      	ldr	r2, [pc, #76]	; (8011290 <xTaskRemoveFromEventList+0xb4>)
 8011244:	441a      	add	r2, r3
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	3304      	adds	r3, #4
 801124a:	4619      	mov	r1, r3
 801124c:	4610      	mov	r0, r2
 801124e:	f7fe fafe 	bl	800f84e <vListInsertEnd>
 8011252:	e005      	b.n	8011260 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	3318      	adds	r3, #24
 8011258:	4619      	mov	r1, r3
 801125a:	480e      	ldr	r0, [pc, #56]	; (8011294 <xTaskRemoveFromEventList+0xb8>)
 801125c:	f7fe faf7 	bl	800f84e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011264:	4b0c      	ldr	r3, [pc, #48]	; (8011298 <xTaskRemoveFromEventList+0xbc>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801126a:	429a      	cmp	r2, r3
 801126c:	d905      	bls.n	801127a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801126e:	2301      	movs	r3, #1
 8011270:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011272:	4b0a      	ldr	r3, [pc, #40]	; (801129c <xTaskRemoveFromEventList+0xc0>)
 8011274:	2201      	movs	r2, #1
 8011276:	601a      	str	r2, [r3, #0]
 8011278:	e001      	b.n	801127e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801127a:	2300      	movs	r3, #0
 801127c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801127e:	697b      	ldr	r3, [r7, #20]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3718      	adds	r7, #24
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	20001378 	.word	0x20001378
 801128c:	20001358 	.word	0x20001358
 8011290:	20000e80 	.word	0x20000e80
 8011294:	20001310 	.word	0x20001310
 8011298:	20000e7c 	.word	0x20000e7c
 801129c:	20001364 	.word	0x20001364

080112a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80112a8:	4b06      	ldr	r3, [pc, #24]	; (80112c4 <vTaskInternalSetTimeOutState+0x24>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80112b0:	4b05      	ldr	r3, [pc, #20]	; (80112c8 <vTaskInternalSetTimeOutState+0x28>)
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	605a      	str	r2, [r3, #4]
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	20001368 	.word	0x20001368
 80112c8:	20001354 	.word	0x20001354

080112cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d109      	bne.n	80112f0 <xTaskCheckForTimeOut+0x24>
 80112dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e0:	f383 8811 	msr	BASEPRI, r3
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	f3bf 8f4f 	dsb	sy
 80112ec:	613b      	str	r3, [r7, #16]
 80112ee:	e7fe      	b.n	80112ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d109      	bne.n	801130a <xTaskCheckForTimeOut+0x3e>
 80112f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fa:	f383 8811 	msr	BASEPRI, r3
 80112fe:	f3bf 8f6f 	isb	sy
 8011302:	f3bf 8f4f 	dsb	sy
 8011306:	60fb      	str	r3, [r7, #12]
 8011308:	e7fe      	b.n	8011308 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801130a:	f000 ff67 	bl	80121dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801130e:	4b1d      	ldr	r3, [pc, #116]	; (8011384 <xTaskCheckForTimeOut+0xb8>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	69ba      	ldr	r2, [r7, #24]
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011326:	d102      	bne.n	801132e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011328:	2300      	movs	r3, #0
 801132a:	61fb      	str	r3, [r7, #28]
 801132c:	e023      	b.n	8011376 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	4b15      	ldr	r3, [pc, #84]	; (8011388 <xTaskCheckForTimeOut+0xbc>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	429a      	cmp	r2, r3
 8011338:	d007      	beq.n	801134a <xTaskCheckForTimeOut+0x7e>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	69ba      	ldr	r2, [r7, #24]
 8011340:	429a      	cmp	r2, r3
 8011342:	d302      	bcc.n	801134a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011344:	2301      	movs	r3, #1
 8011346:	61fb      	str	r3, [r7, #28]
 8011348:	e015      	b.n	8011376 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	697a      	ldr	r2, [r7, #20]
 8011350:	429a      	cmp	r2, r3
 8011352:	d20b      	bcs.n	801136c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	1ad2      	subs	r2, r2, r3
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7ff ff9d 	bl	80112a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011366:	2300      	movs	r3, #0
 8011368:	61fb      	str	r3, [r7, #28]
 801136a:	e004      	b.n	8011376 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	2200      	movs	r2, #0
 8011370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011372:	2301      	movs	r3, #1
 8011374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011376:	f000 ff5f 	bl	8012238 <vPortExitCritical>

	return xReturn;
 801137a:	69fb      	ldr	r3, [r7, #28]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3720      	adds	r7, #32
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	20001354 	.word	0x20001354
 8011388:	20001368 	.word	0x20001368

0801138c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801138c:	b480      	push	{r7}
 801138e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011390:	4b03      	ldr	r3, [pc, #12]	; (80113a0 <vTaskMissedYield+0x14>)
 8011392:	2201      	movs	r2, #1
 8011394:	601a      	str	r2, [r3, #0]
}
 8011396:	bf00      	nop
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr
 80113a0:	20001364 	.word	0x20001364

080113a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80113ac:	f000 f852 	bl	8011454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80113b0:	4b06      	ldr	r3, [pc, #24]	; (80113cc <prvIdleTask+0x28>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d9f9      	bls.n	80113ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80113b8:	4b05      	ldr	r3, [pc, #20]	; (80113d0 <prvIdleTask+0x2c>)
 80113ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113be:	601a      	str	r2, [r3, #0]
 80113c0:	f3bf 8f4f 	dsb	sy
 80113c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80113c8:	e7f0      	b.n	80113ac <prvIdleTask+0x8>
 80113ca:	bf00      	nop
 80113cc:	20000e80 	.word	0x20000e80
 80113d0:	e000ed04 	.word	0xe000ed04

080113d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80113da:	2300      	movs	r3, #0
 80113dc:	607b      	str	r3, [r7, #4]
 80113de:	e00c      	b.n	80113fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	4613      	mov	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	4413      	add	r3, r2
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	4a12      	ldr	r2, [pc, #72]	; (8011434 <prvInitialiseTaskLists+0x60>)
 80113ec:	4413      	add	r3, r2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fa00 	bl	800f7f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	3301      	adds	r3, #1
 80113f8:	607b      	str	r3, [r7, #4]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2b37      	cmp	r3, #55	; 0x37
 80113fe:	d9ef      	bls.n	80113e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011400:	480d      	ldr	r0, [pc, #52]	; (8011438 <prvInitialiseTaskLists+0x64>)
 8011402:	f7fe f9f7 	bl	800f7f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011406:	480d      	ldr	r0, [pc, #52]	; (801143c <prvInitialiseTaskLists+0x68>)
 8011408:	f7fe f9f4 	bl	800f7f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801140c:	480c      	ldr	r0, [pc, #48]	; (8011440 <prvInitialiseTaskLists+0x6c>)
 801140e:	f7fe f9f1 	bl	800f7f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011412:	480c      	ldr	r0, [pc, #48]	; (8011444 <prvInitialiseTaskLists+0x70>)
 8011414:	f7fe f9ee 	bl	800f7f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011418:	480b      	ldr	r0, [pc, #44]	; (8011448 <prvInitialiseTaskLists+0x74>)
 801141a:	f7fe f9eb 	bl	800f7f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801141e:	4b0b      	ldr	r3, [pc, #44]	; (801144c <prvInitialiseTaskLists+0x78>)
 8011420:	4a05      	ldr	r2, [pc, #20]	; (8011438 <prvInitialiseTaskLists+0x64>)
 8011422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011424:	4b0a      	ldr	r3, [pc, #40]	; (8011450 <prvInitialiseTaskLists+0x7c>)
 8011426:	4a05      	ldr	r2, [pc, #20]	; (801143c <prvInitialiseTaskLists+0x68>)
 8011428:	601a      	str	r2, [r3, #0]
}
 801142a:	bf00      	nop
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	20000e80 	.word	0x20000e80
 8011438:	200012e0 	.word	0x200012e0
 801143c:	200012f4 	.word	0x200012f4
 8011440:	20001310 	.word	0x20001310
 8011444:	20001324 	.word	0x20001324
 8011448:	2000133c 	.word	0x2000133c
 801144c:	20001308 	.word	0x20001308
 8011450:	2000130c 	.word	0x2000130c

08011454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801145a:	e019      	b.n	8011490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801145c:	f000 febe 	bl	80121dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011460:	4b0f      	ldr	r3, [pc, #60]	; (80114a0 <prvCheckTasksWaitingTermination+0x4c>)
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	3304      	adds	r3, #4
 801146c:	4618      	mov	r0, r3
 801146e:	f7fe fa4b 	bl	800f908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011472:	4b0c      	ldr	r3, [pc, #48]	; (80114a4 <prvCheckTasksWaitingTermination+0x50>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	3b01      	subs	r3, #1
 8011478:	4a0a      	ldr	r2, [pc, #40]	; (80114a4 <prvCheckTasksWaitingTermination+0x50>)
 801147a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801147c:	4b0a      	ldr	r3, [pc, #40]	; (80114a8 <prvCheckTasksWaitingTermination+0x54>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	3b01      	subs	r3, #1
 8011482:	4a09      	ldr	r2, [pc, #36]	; (80114a8 <prvCheckTasksWaitingTermination+0x54>)
 8011484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011486:	f000 fed7 	bl	8012238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f80e 	bl	80114ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011490:	4b05      	ldr	r3, [pc, #20]	; (80114a8 <prvCheckTasksWaitingTermination+0x54>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d1e1      	bne.n	801145c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011498:	bf00      	nop
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	20001324 	.word	0x20001324
 80114a4:	20001350 	.word	0x20001350
 80114a8:	20001338 	.word	0x20001338

080114ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d108      	bne.n	80114d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c2:	4618      	mov	r0, r3
 80114c4:	f001 f866 	bl	8012594 <vPortFree>
				vPortFree( pxTCB );
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f001 f863 	bl	8012594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80114ce:	e017      	b.n	8011500 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d103      	bne.n	80114e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f001 f85a 	bl	8012594 <vPortFree>
	}
 80114e0:	e00e      	b.n	8011500 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d009      	beq.n	8011500 <prvDeleteTCB+0x54>
 80114ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f0:	f383 8811 	msr	BASEPRI, r3
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	e7fe      	b.n	80114fe <prvDeleteTCB+0x52>
	}
 8011500:	bf00      	nop
 8011502:	3710      	adds	r7, #16
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801150e:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <prvResetNextTaskUnblockTime+0x38>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d104      	bne.n	8011522 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011518:	4b0a      	ldr	r3, [pc, #40]	; (8011544 <prvResetNextTaskUnblockTime+0x3c>)
 801151a:	f04f 32ff 	mov.w	r2, #4294967295
 801151e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011520:	e008      	b.n	8011534 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011522:	4b07      	ldr	r3, [pc, #28]	; (8011540 <prvResetNextTaskUnblockTime+0x38>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	4a04      	ldr	r2, [pc, #16]	; (8011544 <prvResetNextTaskUnblockTime+0x3c>)
 8011532:	6013      	str	r3, [r2, #0]
}
 8011534:	bf00      	nop
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	20001308 	.word	0x20001308
 8011544:	20001370 	.word	0x20001370

08011548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801154e:	4b0b      	ldr	r3, [pc, #44]	; (801157c <xTaskGetSchedulerState+0x34>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d102      	bne.n	801155c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011556:	2301      	movs	r3, #1
 8011558:	607b      	str	r3, [r7, #4]
 801155a:	e008      	b.n	801156e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801155c:	4b08      	ldr	r3, [pc, #32]	; (8011580 <xTaskGetSchedulerState+0x38>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d102      	bne.n	801156a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011564:	2302      	movs	r3, #2
 8011566:	607b      	str	r3, [r7, #4]
 8011568:	e001      	b.n	801156e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801156a:	2300      	movs	r3, #0
 801156c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801156e:	687b      	ldr	r3, [r7, #4]
	}
 8011570:	4618      	mov	r0, r3
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	2000135c 	.word	0x2000135c
 8011580:	20001378 	.word	0x20001378

08011584 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011590:	2300      	movs	r3, #0
 8011592:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d051      	beq.n	801163e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159e:	4b2a      	ldr	r3, [pc, #168]	; (8011648 <xTaskPriorityInherit+0xc4>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d241      	bcs.n	801162c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	699b      	ldr	r3, [r3, #24]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	db06      	blt.n	80115be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115b0:	4b25      	ldr	r3, [pc, #148]	; (8011648 <xTaskPriorityInherit+0xc4>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	6959      	ldr	r1, [r3, #20]
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c6:	4613      	mov	r3, r2
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4a1f      	ldr	r2, [pc, #124]	; (801164c <xTaskPriorityInherit+0xc8>)
 80115d0:	4413      	add	r3, r2
 80115d2:	4299      	cmp	r1, r3
 80115d4:	d122      	bne.n	801161c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	3304      	adds	r3, #4
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fe f994 	bl	800f908 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80115e0:	4b19      	ldr	r3, [pc, #100]	; (8011648 <xTaskPriorityInherit+0xc4>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ee:	4b18      	ldr	r3, [pc, #96]	; (8011650 <xTaskPriorityInherit+0xcc>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d903      	bls.n	80115fe <xTaskPriorityInherit+0x7a>
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115fa:	4a15      	ldr	r2, [pc, #84]	; (8011650 <xTaskPriorityInherit+0xcc>)
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011602:	4613      	mov	r3, r2
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	4413      	add	r3, r2
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	4a10      	ldr	r2, [pc, #64]	; (801164c <xTaskPriorityInherit+0xc8>)
 801160c:	441a      	add	r2, r3
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	3304      	adds	r3, #4
 8011612:	4619      	mov	r1, r3
 8011614:	4610      	mov	r0, r2
 8011616:	f7fe f91a 	bl	800f84e <vListInsertEnd>
 801161a:	e004      	b.n	8011626 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801161c:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <xTaskPriorityInherit+0xc4>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011626:	2301      	movs	r3, #1
 8011628:	60fb      	str	r3, [r7, #12]
 801162a:	e008      	b.n	801163e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011630:	4b05      	ldr	r3, [pc, #20]	; (8011648 <xTaskPriorityInherit+0xc4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011636:	429a      	cmp	r2, r3
 8011638:	d201      	bcs.n	801163e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801163a:	2301      	movs	r3, #1
 801163c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801163e:	68fb      	ldr	r3, [r7, #12]
	}
 8011640:	4618      	mov	r0, r3
 8011642:	3710      	adds	r7, #16
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	20000e7c 	.word	0x20000e7c
 801164c:	20000e80 	.word	0x20000e80
 8011650:	20001358 	.word	0x20001358

08011654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011660:	2300      	movs	r3, #0
 8011662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d054      	beq.n	8011714 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801166a:	4b2d      	ldr	r3, [pc, #180]	; (8011720 <xTaskPriorityDisinherit+0xcc>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	693a      	ldr	r2, [r7, #16]
 8011670:	429a      	cmp	r2, r3
 8011672:	d009      	beq.n	8011688 <xTaskPriorityDisinherit+0x34>
 8011674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011678:	f383 8811 	msr	BASEPRI, r3
 801167c:	f3bf 8f6f 	isb	sy
 8011680:	f3bf 8f4f 	dsb	sy
 8011684:	60fb      	str	r3, [r7, #12]
 8011686:	e7fe      	b.n	8011686 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801168c:	2b00      	cmp	r3, #0
 801168e:	d109      	bne.n	80116a4 <xTaskPriorityDisinherit+0x50>
 8011690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011694:	f383 8811 	msr	BASEPRI, r3
 8011698:	f3bf 8f6f 	isb	sy
 801169c:	f3bf 8f4f 	dsb	sy
 80116a0:	60bb      	str	r3, [r7, #8]
 80116a2:	e7fe      	b.n	80116a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116a8:	1e5a      	subs	r2, r3, #1
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d02c      	beq.n	8011714 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d128      	bne.n	8011714 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	3304      	adds	r3, #4
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe f91e 	bl	800f908 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e4:	4b0f      	ldr	r3, [pc, #60]	; (8011724 <xTaskPriorityDisinherit+0xd0>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d903      	bls.n	80116f4 <xTaskPriorityDisinherit+0xa0>
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f0:	4a0c      	ldr	r2, [pc, #48]	; (8011724 <xTaskPriorityDisinherit+0xd0>)
 80116f2:	6013      	str	r3, [r2, #0]
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116f8:	4613      	mov	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	4413      	add	r3, r2
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	4a09      	ldr	r2, [pc, #36]	; (8011728 <xTaskPriorityDisinherit+0xd4>)
 8011702:	441a      	add	r2, r3
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	3304      	adds	r3, #4
 8011708:	4619      	mov	r1, r3
 801170a:	4610      	mov	r0, r2
 801170c:	f7fe f89f 	bl	800f84e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011710:	2301      	movs	r3, #1
 8011712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011714:	697b      	ldr	r3, [r7, #20]
	}
 8011716:	4618      	mov	r0, r3
 8011718:	3718      	adds	r7, #24
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	20000e7c 	.word	0x20000e7c
 8011724:	20001358 	.word	0x20001358
 8011728:	20000e80 	.word	0x20000e80

0801172c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801173a:	2301      	movs	r3, #1
 801173c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d068      	beq.n	8011816 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011748:	2b00      	cmp	r3, #0
 801174a:	d109      	bne.n	8011760 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	60fb      	str	r3, [r7, #12]
 801175e:	e7fe      	b.n	801175e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011764:	683a      	ldr	r2, [r7, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d902      	bls.n	8011770 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	61fb      	str	r3, [r7, #28]
 801176e:	e002      	b.n	8011776 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011774:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177a:	69fa      	ldr	r2, [r7, #28]
 801177c:	429a      	cmp	r2, r3
 801177e:	d04a      	beq.n	8011816 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011784:	697a      	ldr	r2, [r7, #20]
 8011786:	429a      	cmp	r2, r3
 8011788:	d145      	bne.n	8011816 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801178a:	4b25      	ldr	r3, [pc, #148]	; (8011820 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	69ba      	ldr	r2, [r7, #24]
 8011790:	429a      	cmp	r2, r3
 8011792:	d109      	bne.n	80117a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8011794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011798:	f383 8811 	msr	BASEPRI, r3
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	60bb      	str	r3, [r7, #8]
 80117a6:	e7fe      	b.n	80117a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80117a8:	69bb      	ldr	r3, [r7, #24]
 80117aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	69fa      	ldr	r2, [r7, #28]
 80117b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80117b4:	69bb      	ldr	r3, [r7, #24]
 80117b6:	699b      	ldr	r3, [r3, #24]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	db04      	blt.n	80117c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	6959      	ldr	r1, [r3, #20]
 80117ca:	693a      	ldr	r2, [r7, #16]
 80117cc:	4613      	mov	r3, r2
 80117ce:	009b      	lsls	r3, r3, #2
 80117d0:	4413      	add	r3, r2
 80117d2:	009b      	lsls	r3, r3, #2
 80117d4:	4a13      	ldr	r2, [pc, #76]	; (8011824 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80117d6:	4413      	add	r3, r2
 80117d8:	4299      	cmp	r1, r3
 80117da:	d11c      	bne.n	8011816 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	3304      	adds	r3, #4
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7fe f891 	bl	800f908 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117ea:	4b0f      	ldr	r3, [pc, #60]	; (8011828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d903      	bls.n	80117fa <vTaskPriorityDisinheritAfterTimeout+0xce>
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f6:	4a0c      	ldr	r2, [pc, #48]	; (8011828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117fe:	4613      	mov	r3, r2
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4413      	add	r3, r2
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	4a07      	ldr	r2, [pc, #28]	; (8011824 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011808:	441a      	add	r2, r3
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	3304      	adds	r3, #4
 801180e:	4619      	mov	r1, r3
 8011810:	4610      	mov	r0, r2
 8011812:	f7fe f81c 	bl	800f84e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011816:	bf00      	nop
 8011818:	3720      	adds	r7, #32
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	20000e7c 	.word	0x20000e7c
 8011824:	20000e80 	.word	0x20000e80
 8011828:	20001358 	.word	0x20001358

0801182c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801182c:	b480      	push	{r7}
 801182e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011830:	4b07      	ldr	r3, [pc, #28]	; (8011850 <pvTaskIncrementMutexHeldCount+0x24>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d004      	beq.n	8011842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011838:	4b05      	ldr	r3, [pc, #20]	; (8011850 <pvTaskIncrementMutexHeldCount+0x24>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801183e:	3201      	adds	r2, #1
 8011840:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011842:	4b03      	ldr	r3, [pc, #12]	; (8011850 <pvTaskIncrementMutexHeldCount+0x24>)
 8011844:	681b      	ldr	r3, [r3, #0]
	}
 8011846:	4618      	mov	r0, r3
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr
 8011850:	20000e7c 	.word	0x20000e7c

08011854 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801185e:	4b21      	ldr	r3, [pc, #132]	; (80118e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011864:	4b20      	ldr	r3, [pc, #128]	; (80118e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	3304      	adds	r3, #4
 801186a:	4618      	mov	r0, r3
 801186c:	f7fe f84c 	bl	800f908 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011876:	d10a      	bne.n	801188e <prvAddCurrentTaskToDelayedList+0x3a>
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d007      	beq.n	801188e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801187e:	4b1a      	ldr	r3, [pc, #104]	; (80118e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3304      	adds	r3, #4
 8011884:	4619      	mov	r1, r3
 8011886:	4819      	ldr	r0, [pc, #100]	; (80118ec <prvAddCurrentTaskToDelayedList+0x98>)
 8011888:	f7fd ffe1 	bl	800f84e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801188c:	e026      	b.n	80118dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801188e:	68fa      	ldr	r2, [r7, #12]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	4413      	add	r3, r2
 8011894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011896:	4b14      	ldr	r3, [pc, #80]	; (80118e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801189e:	68ba      	ldr	r2, [r7, #8]
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d209      	bcs.n	80118ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118a6:	4b12      	ldr	r3, [pc, #72]	; (80118f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	4b0f      	ldr	r3, [pc, #60]	; (80118e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3304      	adds	r3, #4
 80118b0:	4619      	mov	r1, r3
 80118b2:	4610      	mov	r0, r2
 80118b4:	f7fd ffef 	bl	800f896 <vListInsert>
}
 80118b8:	e010      	b.n	80118dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118ba:	4b0e      	ldr	r3, [pc, #56]	; (80118f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	4b0a      	ldr	r3, [pc, #40]	; (80118e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	3304      	adds	r3, #4
 80118c4:	4619      	mov	r1, r3
 80118c6:	4610      	mov	r0, r2
 80118c8:	f7fd ffe5 	bl	800f896 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80118cc:	4b0a      	ldr	r3, [pc, #40]	; (80118f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d202      	bcs.n	80118dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80118d6:	4a08      	ldr	r2, [pc, #32]	; (80118f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	6013      	str	r3, [r2, #0]
}
 80118dc:	bf00      	nop
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	20001354 	.word	0x20001354
 80118e8:	20000e7c 	.word	0x20000e7c
 80118ec:	2000133c 	.word	0x2000133c
 80118f0:	2000130c 	.word	0x2000130c
 80118f4:	20001308 	.word	0x20001308
 80118f8:	20001370 	.word	0x20001370

080118fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08a      	sub	sp, #40	; 0x28
 8011900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011902:	2300      	movs	r3, #0
 8011904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011906:	f000 faff 	bl	8011f08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801190a:	4b1c      	ldr	r3, [pc, #112]	; (801197c <xTimerCreateTimerTask+0x80>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d021      	beq.n	8011956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011912:	2300      	movs	r3, #0
 8011914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011916:	2300      	movs	r3, #0
 8011918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801191a:	1d3a      	adds	r2, r7, #4
 801191c:	f107 0108 	add.w	r1, r7, #8
 8011920:	f107 030c 	add.w	r3, r7, #12
 8011924:	4618      	mov	r0, r3
 8011926:	f7fd ff4b 	bl	800f7c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801192a:	6879      	ldr	r1, [r7, #4]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	9202      	str	r2, [sp, #8]
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	2302      	movs	r3, #2
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	2300      	movs	r3, #0
 801193a:	460a      	mov	r2, r1
 801193c:	4910      	ldr	r1, [pc, #64]	; (8011980 <xTimerCreateTimerTask+0x84>)
 801193e:	4811      	ldr	r0, [pc, #68]	; (8011984 <xTimerCreateTimerTask+0x88>)
 8011940:	f7fe fffa 	bl	8010938 <xTaskCreateStatic>
 8011944:	4602      	mov	r2, r0
 8011946:	4b10      	ldr	r3, [pc, #64]	; (8011988 <xTimerCreateTimerTask+0x8c>)
 8011948:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801194a:	4b0f      	ldr	r3, [pc, #60]	; (8011988 <xTimerCreateTimerTask+0x8c>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d001      	beq.n	8011956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011952:	2301      	movs	r3, #1
 8011954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d109      	bne.n	8011970 <xTimerCreateTimerTask+0x74>
 801195c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011960:	f383 8811 	msr	BASEPRI, r3
 8011964:	f3bf 8f6f 	isb	sy
 8011968:	f3bf 8f4f 	dsb	sy
 801196c:	613b      	str	r3, [r7, #16]
 801196e:	e7fe      	b.n	801196e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8011970:	697b      	ldr	r3, [r7, #20]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3718      	adds	r7, #24
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	200013ac 	.word	0x200013ac
 8011980:	08014eb0 	.word	0x08014eb0
 8011984:	08011abd 	.word	0x08011abd
 8011988:	200013b0 	.word	0x200013b0

0801198c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b08a      	sub	sp, #40	; 0x28
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	607a      	str	r2, [r7, #4]
 8011998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801199a:	2300      	movs	r3, #0
 801199c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d109      	bne.n	80119b8 <xTimerGenericCommand+0x2c>
 80119a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a8:	f383 8811 	msr	BASEPRI, r3
 80119ac:	f3bf 8f6f 	isb	sy
 80119b0:	f3bf 8f4f 	dsb	sy
 80119b4:	623b      	str	r3, [r7, #32]
 80119b6:	e7fe      	b.n	80119b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80119b8:	4b19      	ldr	r3, [pc, #100]	; (8011a20 <xTimerGenericCommand+0x94>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d02a      	beq.n	8011a16 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	2b05      	cmp	r3, #5
 80119d0:	dc18      	bgt.n	8011a04 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80119d2:	f7ff fdb9 	bl	8011548 <xTaskGetSchedulerState>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b02      	cmp	r3, #2
 80119da:	d109      	bne.n	80119f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80119dc:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <xTimerGenericCommand+0x94>)
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	f107 0110 	add.w	r1, r7, #16
 80119e4:	2300      	movs	r3, #0
 80119e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119e8:	f7fe f95c 	bl	800fca4 <xQueueGenericSend>
 80119ec:	6278      	str	r0, [r7, #36]	; 0x24
 80119ee:	e012      	b.n	8011a16 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80119f0:	4b0b      	ldr	r3, [pc, #44]	; (8011a20 <xTimerGenericCommand+0x94>)
 80119f2:	6818      	ldr	r0, [r3, #0]
 80119f4:	f107 0110 	add.w	r1, r7, #16
 80119f8:	2300      	movs	r3, #0
 80119fa:	2200      	movs	r2, #0
 80119fc:	f7fe f952 	bl	800fca4 <xQueueGenericSend>
 8011a00:	6278      	str	r0, [r7, #36]	; 0x24
 8011a02:	e008      	b.n	8011a16 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011a04:	4b06      	ldr	r3, [pc, #24]	; (8011a20 <xTimerGenericCommand+0x94>)
 8011a06:	6818      	ldr	r0, [r3, #0]
 8011a08:	f107 0110 	add.w	r1, r7, #16
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	f7fe fa42 	bl	800fe98 <xQueueGenericSendFromISR>
 8011a14:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3728      	adds	r7, #40	; 0x28
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	200013ac 	.word	0x200013ac

08011a24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b088      	sub	sp, #32
 8011a28:	af02      	add	r7, sp, #8
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a2e:	4b22      	ldr	r3, [pc, #136]	; (8011ab8 <prvProcessExpiredTimer+0x94>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fd ff63 	bl	800f908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a48:	f003 0304 	and.w	r3, r3, #4
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d021      	beq.n	8011a94 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	699a      	ldr	r2, [r3, #24]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	18d1      	adds	r1, r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	683a      	ldr	r2, [r7, #0]
 8011a5c:	6978      	ldr	r0, [r7, #20]
 8011a5e:	f000 f8d1 	bl	8011c04 <prvInsertTimerInActiveList>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d01e      	beq.n	8011aa6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a68:	2300      	movs	r3, #0
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	2100      	movs	r1, #0
 8011a72:	6978      	ldr	r0, [r7, #20]
 8011a74:	f7ff ff8a 	bl	801198c <xTimerGenericCommand>
 8011a78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d112      	bne.n	8011aa6 <prvProcessExpiredTimer+0x82>
 8011a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	60fb      	str	r3, [r7, #12]
 8011a92:	e7fe      	b.n	8011a92 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a9a:	f023 0301 	bic.w	r3, r3, #1
 8011a9e:	b2da      	uxtb	r2, r3
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	6a1b      	ldr	r3, [r3, #32]
 8011aaa:	6978      	ldr	r0, [r7, #20]
 8011aac:	4798      	blx	r3
}
 8011aae:	bf00      	nop
 8011ab0:	3718      	adds	r7, #24
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	200013a4 	.word	0x200013a4

08011abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ac4:	f107 0308 	add.w	r3, r7, #8
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f857 	bl	8011b7c <prvGetNextExpireTime>
 8011ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f000 f803 	bl	8011ae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011ada:	f000 f8d5 	bl	8011c88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ade:	e7f1      	b.n	8011ac4 <prvTimerTask+0x8>

08011ae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011aea:	f7ff f95b 	bl	8010da4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011aee:	f107 0308 	add.w	r3, r7, #8
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 f866 	bl	8011bc4 <prvSampleTimeNow>
 8011af8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d130      	bne.n	8011b62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d10a      	bne.n	8011b1c <prvProcessTimerOrBlockTask+0x3c>
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d806      	bhi.n	8011b1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011b0e:	f7ff f957 	bl	8010dc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011b12:	68f9      	ldr	r1, [r7, #12]
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7ff ff85 	bl	8011a24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011b1a:	e024      	b.n	8011b66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d008      	beq.n	8011b34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011b22:	4b13      	ldr	r3, [pc, #76]	; (8011b70 <prvProcessTimerOrBlockTask+0x90>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d101      	bne.n	8011b30 <prvProcessTimerOrBlockTask+0x50>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e000      	b.n	8011b32 <prvProcessTimerOrBlockTask+0x52>
 8011b30:	2300      	movs	r3, #0
 8011b32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011b34:	4b0f      	ldr	r3, [pc, #60]	; (8011b74 <prvProcessTimerOrBlockTask+0x94>)
 8011b36:	6818      	ldr	r0, [r3, #0]
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	683a      	ldr	r2, [r7, #0]
 8011b40:	4619      	mov	r1, r3
 8011b42:	f7fe fec5 	bl	80108d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011b46:	f7ff f93b 	bl	8010dc0 <xTaskResumeAll>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10a      	bne.n	8011b66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011b50:	4b09      	ldr	r3, [pc, #36]	; (8011b78 <prvProcessTimerOrBlockTask+0x98>)
 8011b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b56:	601a      	str	r2, [r3, #0]
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	f3bf 8f6f 	isb	sy
}
 8011b60:	e001      	b.n	8011b66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011b62:	f7ff f92d 	bl	8010dc0 <xTaskResumeAll>
}
 8011b66:	bf00      	nop
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	200013a8 	.word	0x200013a8
 8011b74:	200013ac 	.word	0x200013ac
 8011b78:	e000ed04 	.word	0xe000ed04

08011b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b84:	4b0e      	ldr	r3, [pc, #56]	; (8011bc0 <prvGetNextExpireTime+0x44>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <prvGetNextExpireTime+0x16>
 8011b8e:	2201      	movs	r2, #1
 8011b90:	e000      	b.n	8011b94 <prvGetNextExpireTime+0x18>
 8011b92:	2200      	movs	r2, #0
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d105      	bne.n	8011bac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011ba0:	4b07      	ldr	r3, [pc, #28]	; (8011bc0 <prvGetNextExpireTime+0x44>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	60fb      	str	r3, [r7, #12]
 8011baa:	e001      	b.n	8011bb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011bac:	2300      	movs	r3, #0
 8011bae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3714      	adds	r7, #20
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop
 8011bc0:	200013a4 	.word	0x200013a4

08011bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011bcc:	f7ff f994 	bl	8010ef8 <xTaskGetTickCount>
 8011bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011bd2:	4b0b      	ldr	r3, [pc, #44]	; (8011c00 <prvSampleTimeNow+0x3c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	68fa      	ldr	r2, [r7, #12]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d205      	bcs.n	8011be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011bdc:	f000 f930 	bl	8011e40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2201      	movs	r2, #1
 8011be4:	601a      	str	r2, [r3, #0]
 8011be6:	e002      	b.n	8011bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011bee:	4a04      	ldr	r2, [pc, #16]	; (8011c00 <prvSampleTimeNow+0x3c>)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	200013b4 	.word	0x200013b4

08011c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b086      	sub	sp, #24
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011c12:	2300      	movs	r3, #0
 8011c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	68ba      	ldr	r2, [r7, #8]
 8011c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d812      	bhi.n	8011c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	1ad2      	subs	r2, r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	699b      	ldr	r3, [r3, #24]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d302      	bcc.n	8011c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	617b      	str	r3, [r7, #20]
 8011c3c:	e01b      	b.n	8011c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011c3e:	4b10      	ldr	r3, [pc, #64]	; (8011c80 <prvInsertTimerInActiveList+0x7c>)
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3304      	adds	r3, #4
 8011c46:	4619      	mov	r1, r3
 8011c48:	4610      	mov	r0, r2
 8011c4a:	f7fd fe24 	bl	800f896 <vListInsert>
 8011c4e:	e012      	b.n	8011c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d206      	bcs.n	8011c66 <prvInsertTimerInActiveList+0x62>
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d302      	bcc.n	8011c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011c60:	2301      	movs	r3, #1
 8011c62:	617b      	str	r3, [r7, #20]
 8011c64:	e007      	b.n	8011c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c66:	4b07      	ldr	r3, [pc, #28]	; (8011c84 <prvInsertTimerInActiveList+0x80>)
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	3304      	adds	r3, #4
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4610      	mov	r0, r2
 8011c72:	f7fd fe10 	bl	800f896 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011c76:	697b      	ldr	r3, [r7, #20]
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	200013a8 	.word	0x200013a8
 8011c84:	200013a4 	.word	0x200013a4

08011c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b08e      	sub	sp, #56	; 0x38
 8011c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c8e:	e0c6      	b.n	8011e1e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	da17      	bge.n	8011cc6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c96:	1d3b      	adds	r3, r7, #4
 8011c98:	3304      	adds	r3, #4
 8011c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d109      	bne.n	8011cb6 <prvProcessReceivedCommands+0x2e>
 8011ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca6:	f383 8811 	msr	BASEPRI, r3
 8011caa:	f3bf 8f6f 	isb	sy
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	61fb      	str	r3, [r7, #28]
 8011cb4:	e7fe      	b.n	8011cb4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cbc:	6850      	ldr	r0, [r2, #4]
 8011cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cc0:	6892      	ldr	r2, [r2, #8]
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	f2c0 80a7 	blt.w	8011e1c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d004      	beq.n	8011ce4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cdc:	3304      	adds	r3, #4
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fd fe12 	bl	800f908 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ce4:	463b      	mov	r3, r7
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7ff ff6c 	bl	8011bc4 <prvSampleTimeNow>
 8011cec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b09      	cmp	r3, #9
 8011cf2:	f200 8094 	bhi.w	8011e1e <prvProcessReceivedCommands+0x196>
 8011cf6:	a201      	add	r2, pc, #4	; (adr r2, 8011cfc <prvProcessReceivedCommands+0x74>)
 8011cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cfc:	08011d25 	.word	0x08011d25
 8011d00:	08011d25 	.word	0x08011d25
 8011d04:	08011d25 	.word	0x08011d25
 8011d08:	08011d97 	.word	0x08011d97
 8011d0c:	08011dab 	.word	0x08011dab
 8011d10:	08011df3 	.word	0x08011df3
 8011d14:	08011d25 	.word	0x08011d25
 8011d18:	08011d25 	.word	0x08011d25
 8011d1c:	08011d97 	.word	0x08011d97
 8011d20:	08011dab 	.word	0x08011dab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d2a:	f043 0301 	orr.w	r3, r3, #1
 8011d2e:	b2da      	uxtb	r2, r3
 8011d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011d36:	68ba      	ldr	r2, [r7, #8]
 8011d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	18d1      	adds	r1, r2, r3
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d44:	f7ff ff5e 	bl	8011c04 <prvInsertTimerInActiveList>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d067      	beq.n	8011e1e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d50:	6a1b      	ldr	r3, [r3, #32]
 8011d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d5c:	f003 0304 	and.w	r3, r3, #4
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d05c      	beq.n	8011e1e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d68:	699b      	ldr	r3, [r3, #24]
 8011d6a:	441a      	add	r2, r3
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	2300      	movs	r3, #0
 8011d72:	2100      	movs	r1, #0
 8011d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d76:	f7ff fe09 	bl	801198c <xTimerGenericCommand>
 8011d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d14d      	bne.n	8011e1e <prvProcessReceivedCommands+0x196>
 8011d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	61bb      	str	r3, [r7, #24]
 8011d94:	e7fe      	b.n	8011d94 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d9c:	f023 0301 	bic.w	r3, r3, #1
 8011da0:	b2da      	uxtb	r2, r3
 8011da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011da8:	e039      	b.n	8011e1e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011db0:	f043 0301 	orr.w	r3, r3, #1
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc4:	699b      	ldr	r3, [r3, #24]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d109      	bne.n	8011dde <prvProcessReceivedCommands+0x156>
 8011dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dce:	f383 8811 	msr	BASEPRI, r3
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	f3bf 8f4f 	dsb	sy
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	e7fe      	b.n	8011ddc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de0:	699a      	ldr	r2, [r3, #24]
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	18d1      	adds	r1, r2, r3
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dec:	f7ff ff0a 	bl	8011c04 <prvInsertTimerInActiveList>
					break;
 8011df0:	e015      	b.n	8011e1e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011df8:	f003 0302 	and.w	r3, r3, #2
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d103      	bne.n	8011e08 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e02:	f000 fbc7 	bl	8012594 <vPortFree>
 8011e06:	e00a      	b.n	8011e1e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e0e:	f023 0301 	bic.w	r3, r3, #1
 8011e12:	b2da      	uxtb	r2, r3
 8011e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011e1a:	e000      	b.n	8011e1e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011e1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e1e:	4b07      	ldr	r3, [pc, #28]	; (8011e3c <prvProcessReceivedCommands+0x1b4>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	1d39      	adds	r1, r7, #4
 8011e24:	2200      	movs	r2, #0
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fe f954 	bl	80100d4 <xQueueReceive>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f47f af2e 	bne.w	8011c90 <prvProcessReceivedCommands+0x8>
	}
}
 8011e34:	bf00      	nop
 8011e36:	3730      	adds	r7, #48	; 0x30
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	200013ac 	.word	0x200013ac

08011e40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b088      	sub	sp, #32
 8011e44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e46:	e047      	b.n	8011ed8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011e48:	4b2d      	ldr	r3, [pc, #180]	; (8011f00 <prvSwitchTimerLists+0xc0>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e52:	4b2b      	ldr	r3, [pc, #172]	; (8011f00 <prvSwitchTimerLists+0xc0>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	68db      	ldr	r3, [r3, #12]
 8011e5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	3304      	adds	r3, #4
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fd fd51 	bl	800f908 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	6a1b      	ldr	r3, [r3, #32]
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e74:	f003 0304 	and.w	r3, r3, #4
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d02d      	beq.n	8011ed8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	693a      	ldr	r2, [r7, #16]
 8011e82:	4413      	add	r3, r2
 8011e84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e86:	68ba      	ldr	r2, [r7, #8]
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d90e      	bls.n	8011eac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	68ba      	ldr	r2, [r7, #8]
 8011e92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e9a:	4b19      	ldr	r3, [pc, #100]	; (8011f00 <prvSwitchTimerLists+0xc0>)
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3304      	adds	r3, #4
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	4610      	mov	r0, r2
 8011ea6:	f7fd fcf6 	bl	800f896 <vListInsert>
 8011eaa:	e015      	b.n	8011ed8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011eac:	2300      	movs	r3, #0
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	693a      	ldr	r2, [r7, #16]
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f7ff fd68 	bl	801198c <xTimerGenericCommand>
 8011ebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d109      	bne.n	8011ed8 <prvSwitchTimerLists+0x98>
 8011ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec8:	f383 8811 	msr	BASEPRI, r3
 8011ecc:	f3bf 8f6f 	isb	sy
 8011ed0:	f3bf 8f4f 	dsb	sy
 8011ed4:	603b      	str	r3, [r7, #0]
 8011ed6:	e7fe      	b.n	8011ed6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011ed8:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <prvSwitchTimerLists+0xc0>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1b2      	bne.n	8011e48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011ee2:	4b07      	ldr	r3, [pc, #28]	; (8011f00 <prvSwitchTimerLists+0xc0>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011ee8:	4b06      	ldr	r3, [pc, #24]	; (8011f04 <prvSwitchTimerLists+0xc4>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	4a04      	ldr	r2, [pc, #16]	; (8011f00 <prvSwitchTimerLists+0xc0>)
 8011eee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011ef0:	4a04      	ldr	r2, [pc, #16]	; (8011f04 <prvSwitchTimerLists+0xc4>)
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	6013      	str	r3, [r2, #0]
}
 8011ef6:	bf00      	nop
 8011ef8:	3718      	adds	r7, #24
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	200013a4 	.word	0x200013a4
 8011f04:	200013a8 	.word	0x200013a8

08011f08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011f0e:	f000 f965 	bl	80121dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011f12:	4b15      	ldr	r3, [pc, #84]	; (8011f68 <prvCheckForValidListAndQueue+0x60>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d120      	bne.n	8011f5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011f1a:	4814      	ldr	r0, [pc, #80]	; (8011f6c <prvCheckForValidListAndQueue+0x64>)
 8011f1c:	f7fd fc6a 	bl	800f7f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011f20:	4813      	ldr	r0, [pc, #76]	; (8011f70 <prvCheckForValidListAndQueue+0x68>)
 8011f22:	f7fd fc67 	bl	800f7f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011f26:	4b13      	ldr	r3, [pc, #76]	; (8011f74 <prvCheckForValidListAndQueue+0x6c>)
 8011f28:	4a10      	ldr	r2, [pc, #64]	; (8011f6c <prvCheckForValidListAndQueue+0x64>)
 8011f2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011f2c:	4b12      	ldr	r3, [pc, #72]	; (8011f78 <prvCheckForValidListAndQueue+0x70>)
 8011f2e:	4a10      	ldr	r2, [pc, #64]	; (8011f70 <prvCheckForValidListAndQueue+0x68>)
 8011f30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011f32:	2300      	movs	r3, #0
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	4b11      	ldr	r3, [pc, #68]	; (8011f7c <prvCheckForValidListAndQueue+0x74>)
 8011f38:	4a11      	ldr	r2, [pc, #68]	; (8011f80 <prvCheckForValidListAndQueue+0x78>)
 8011f3a:	2110      	movs	r1, #16
 8011f3c:	200a      	movs	r0, #10
 8011f3e:	f7fd fd75 	bl	800fa2c <xQueueGenericCreateStatic>
 8011f42:	4602      	mov	r2, r0
 8011f44:	4b08      	ldr	r3, [pc, #32]	; (8011f68 <prvCheckForValidListAndQueue+0x60>)
 8011f46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011f48:	4b07      	ldr	r3, [pc, #28]	; (8011f68 <prvCheckForValidListAndQueue+0x60>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d005      	beq.n	8011f5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011f50:	4b05      	ldr	r3, [pc, #20]	; (8011f68 <prvCheckForValidListAndQueue+0x60>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	490b      	ldr	r1, [pc, #44]	; (8011f84 <prvCheckForValidListAndQueue+0x7c>)
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fe fc68 	bl	801082c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011f5c:	f000 f96c 	bl	8012238 <vPortExitCritical>
}
 8011f60:	bf00      	nop
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	200013ac 	.word	0x200013ac
 8011f6c:	2000137c 	.word	0x2000137c
 8011f70:	20001390 	.word	0x20001390
 8011f74:	200013a4 	.word	0x200013a4
 8011f78:	200013a8 	.word	0x200013a8
 8011f7c:	20001458 	.word	0x20001458
 8011f80:	200013b8 	.word	0x200013b8
 8011f84:	08014eb8 	.word	0x08014eb8

08011f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	3b04      	subs	r3, #4
 8011f98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	3b04      	subs	r3, #4
 8011fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	f023 0201 	bic.w	r2, r3, #1
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	3b04      	subs	r3, #4
 8011fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011fb8:	4a0c      	ldr	r2, [pc, #48]	; (8011fec <pxPortInitialiseStack+0x64>)
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	3b14      	subs	r3, #20
 8011fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	3b04      	subs	r3, #4
 8011fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f06f 0202 	mvn.w	r2, #2
 8011fd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	3b20      	subs	r3, #32
 8011fdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011fde:	68fb      	ldr	r3, [r7, #12]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	08011ff1 	.word	0x08011ff1

08011ff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ffa:	4b11      	ldr	r3, [pc, #68]	; (8012040 <prvTaskExitError+0x50>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012002:	d009      	beq.n	8012018 <prvTaskExitError+0x28>
 8012004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	60fb      	str	r3, [r7, #12]
 8012016:	e7fe      	b.n	8012016 <prvTaskExitError+0x26>
 8012018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201c:	f383 8811 	msr	BASEPRI, r3
 8012020:	f3bf 8f6f 	isb	sy
 8012024:	f3bf 8f4f 	dsb	sy
 8012028:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801202a:	bf00      	nop
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0fc      	beq.n	801202c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012032:	bf00      	nop
 8012034:	3714      	adds	r7, #20
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	20000490 	.word	0x20000490
	...

08012050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012050:	4b07      	ldr	r3, [pc, #28]	; (8012070 <pxCurrentTCBConst2>)
 8012052:	6819      	ldr	r1, [r3, #0]
 8012054:	6808      	ldr	r0, [r1, #0]
 8012056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205a:	f380 8809 	msr	PSP, r0
 801205e:	f3bf 8f6f 	isb	sy
 8012062:	f04f 0000 	mov.w	r0, #0
 8012066:	f380 8811 	msr	BASEPRI, r0
 801206a:	4770      	bx	lr
 801206c:	f3af 8000 	nop.w

08012070 <pxCurrentTCBConst2>:
 8012070:	20000e7c 	.word	0x20000e7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012074:	bf00      	nop
 8012076:	bf00      	nop

08012078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012078:	4808      	ldr	r0, [pc, #32]	; (801209c <prvPortStartFirstTask+0x24>)
 801207a:	6800      	ldr	r0, [r0, #0]
 801207c:	6800      	ldr	r0, [r0, #0]
 801207e:	f380 8808 	msr	MSP, r0
 8012082:	f04f 0000 	mov.w	r0, #0
 8012086:	f380 8814 	msr	CONTROL, r0
 801208a:	b662      	cpsie	i
 801208c:	b661      	cpsie	f
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	df00      	svc	0
 8012098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801209a:	bf00      	nop
 801209c:	e000ed08 	.word	0xe000ed08

080120a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b086      	sub	sp, #24
 80120a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80120a6:	4b44      	ldr	r3, [pc, #272]	; (80121b8 <xPortStartScheduler+0x118>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a44      	ldr	r2, [pc, #272]	; (80121bc <xPortStartScheduler+0x11c>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d109      	bne.n	80120c4 <xPortStartScheduler+0x24>
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	613b      	str	r3, [r7, #16]
 80120c2:	e7fe      	b.n	80120c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80120c4:	4b3c      	ldr	r3, [pc, #240]	; (80121b8 <xPortStartScheduler+0x118>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a3d      	ldr	r2, [pc, #244]	; (80121c0 <xPortStartScheduler+0x120>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d109      	bne.n	80120e2 <xPortStartScheduler+0x42>
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	60fb      	str	r3, [r7, #12]
 80120e0:	e7fe      	b.n	80120e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80120e2:	4b38      	ldr	r3, [pc, #224]	; (80121c4 <xPortStartScheduler+0x124>)
 80120e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	22ff      	movs	r2, #255	; 0xff
 80120f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80120fc:	78fb      	ldrb	r3, [r7, #3]
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012104:	b2da      	uxtb	r2, r3
 8012106:	4b30      	ldr	r3, [pc, #192]	; (80121c8 <xPortStartScheduler+0x128>)
 8012108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801210a:	4b30      	ldr	r3, [pc, #192]	; (80121cc <xPortStartScheduler+0x12c>)
 801210c:	2207      	movs	r2, #7
 801210e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012110:	e009      	b.n	8012126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012112:	4b2e      	ldr	r3, [pc, #184]	; (80121cc <xPortStartScheduler+0x12c>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3b01      	subs	r3, #1
 8012118:	4a2c      	ldr	r2, [pc, #176]	; (80121cc <xPortStartScheduler+0x12c>)
 801211a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801211c:	78fb      	ldrb	r3, [r7, #3]
 801211e:	b2db      	uxtb	r3, r3
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	b2db      	uxtb	r3, r3
 8012124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012126:	78fb      	ldrb	r3, [r7, #3]
 8012128:	b2db      	uxtb	r3, r3
 801212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801212e:	2b80      	cmp	r3, #128	; 0x80
 8012130:	d0ef      	beq.n	8012112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012132:	4b26      	ldr	r3, [pc, #152]	; (80121cc <xPortStartScheduler+0x12c>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f1c3 0307 	rsb	r3, r3, #7
 801213a:	2b04      	cmp	r3, #4
 801213c:	d009      	beq.n	8012152 <xPortStartScheduler+0xb2>
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	60bb      	str	r3, [r7, #8]
 8012150:	e7fe      	b.n	8012150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012152:	4b1e      	ldr	r3, [pc, #120]	; (80121cc <xPortStartScheduler+0x12c>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	021b      	lsls	r3, r3, #8
 8012158:	4a1c      	ldr	r2, [pc, #112]	; (80121cc <xPortStartScheduler+0x12c>)
 801215a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801215c:	4b1b      	ldr	r3, [pc, #108]	; (80121cc <xPortStartScheduler+0x12c>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012164:	4a19      	ldr	r2, [pc, #100]	; (80121cc <xPortStartScheduler+0x12c>)
 8012166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	b2da      	uxtb	r2, r3
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012170:	4b17      	ldr	r3, [pc, #92]	; (80121d0 <xPortStartScheduler+0x130>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4a16      	ldr	r2, [pc, #88]	; (80121d0 <xPortStartScheduler+0x130>)
 8012176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801217a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801217c:	4b14      	ldr	r3, [pc, #80]	; (80121d0 <xPortStartScheduler+0x130>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4a13      	ldr	r2, [pc, #76]	; (80121d0 <xPortStartScheduler+0x130>)
 8012182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012188:	f000 f8d6 	bl	8012338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801218c:	4b11      	ldr	r3, [pc, #68]	; (80121d4 <xPortStartScheduler+0x134>)
 801218e:	2200      	movs	r2, #0
 8012190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012192:	f000 f8f5 	bl	8012380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012196:	4b10      	ldr	r3, [pc, #64]	; (80121d8 <xPortStartScheduler+0x138>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4a0f      	ldr	r2, [pc, #60]	; (80121d8 <xPortStartScheduler+0x138>)
 801219c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80121a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80121a2:	f7ff ff69 	bl	8012078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80121a6:	f7fe ff6f 	bl	8011088 <vTaskSwitchContext>
	prvTaskExitError();
 80121aa:	f7ff ff21 	bl	8011ff0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3718      	adds	r7, #24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	e000ed00 	.word	0xe000ed00
 80121bc:	410fc271 	.word	0x410fc271
 80121c0:	410fc270 	.word	0x410fc270
 80121c4:	e000e400 	.word	0xe000e400
 80121c8:	200014a8 	.word	0x200014a8
 80121cc:	200014ac 	.word	0x200014ac
 80121d0:	e000ed20 	.word	0xe000ed20
 80121d4:	20000490 	.word	0x20000490
 80121d8:	e000ef34 	.word	0xe000ef34

080121dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e6:	f383 8811 	msr	BASEPRI, r3
 80121ea:	f3bf 8f6f 	isb	sy
 80121ee:	f3bf 8f4f 	dsb	sy
 80121f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80121f4:	4b0e      	ldr	r3, [pc, #56]	; (8012230 <vPortEnterCritical+0x54>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3301      	adds	r3, #1
 80121fa:	4a0d      	ldr	r2, [pc, #52]	; (8012230 <vPortEnterCritical+0x54>)
 80121fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80121fe:	4b0c      	ldr	r3, [pc, #48]	; (8012230 <vPortEnterCritical+0x54>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b01      	cmp	r3, #1
 8012204:	d10e      	bne.n	8012224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012206:	4b0b      	ldr	r3, [pc, #44]	; (8012234 <vPortEnterCritical+0x58>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	b2db      	uxtb	r3, r3
 801220c:	2b00      	cmp	r3, #0
 801220e:	d009      	beq.n	8012224 <vPortEnterCritical+0x48>
 8012210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012214:	f383 8811 	msr	BASEPRI, r3
 8012218:	f3bf 8f6f 	isb	sy
 801221c:	f3bf 8f4f 	dsb	sy
 8012220:	603b      	str	r3, [r7, #0]
 8012222:	e7fe      	b.n	8012222 <vPortEnterCritical+0x46>
	}
}
 8012224:	bf00      	nop
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	20000490 	.word	0x20000490
 8012234:	e000ed04 	.word	0xe000ed04

08012238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801223e:	4b11      	ldr	r3, [pc, #68]	; (8012284 <vPortExitCritical+0x4c>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d109      	bne.n	801225a <vPortExitCritical+0x22>
 8012246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	607b      	str	r3, [r7, #4]
 8012258:	e7fe      	b.n	8012258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801225a:	4b0a      	ldr	r3, [pc, #40]	; (8012284 <vPortExitCritical+0x4c>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	3b01      	subs	r3, #1
 8012260:	4a08      	ldr	r2, [pc, #32]	; (8012284 <vPortExitCritical+0x4c>)
 8012262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012264:	4b07      	ldr	r3, [pc, #28]	; (8012284 <vPortExitCritical+0x4c>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d104      	bne.n	8012276 <vPortExitCritical+0x3e>
 801226c:	2300      	movs	r3, #0
 801226e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012276:	bf00      	nop
 8012278:	370c      	adds	r7, #12
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr
 8012282:	bf00      	nop
 8012284:	20000490 	.word	0x20000490
	...

08012290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012290:	f3ef 8009 	mrs	r0, PSP
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	4b15      	ldr	r3, [pc, #84]	; (80122f0 <pxCurrentTCBConst>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	f01e 0f10 	tst.w	lr, #16
 80122a0:	bf08      	it	eq
 80122a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80122a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122aa:	6010      	str	r0, [r2, #0]
 80122ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80122b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80122b4:	f380 8811 	msr	BASEPRI, r0
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	f3bf 8f6f 	isb	sy
 80122c0:	f7fe fee2 	bl	8011088 <vTaskSwitchContext>
 80122c4:	f04f 0000 	mov.w	r0, #0
 80122c8:	f380 8811 	msr	BASEPRI, r0
 80122cc:	bc09      	pop	{r0, r3}
 80122ce:	6819      	ldr	r1, [r3, #0]
 80122d0:	6808      	ldr	r0, [r1, #0]
 80122d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d6:	f01e 0f10 	tst.w	lr, #16
 80122da:	bf08      	it	eq
 80122dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80122e0:	f380 8809 	msr	PSP, r0
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	f3af 8000 	nop.w

080122f0 <pxCurrentTCBConst>:
 80122f0:	20000e7c 	.word	0x20000e7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80122f4:	bf00      	nop
 80122f6:	bf00      	nop

080122f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
	__asm volatile
 80122fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012302:	f383 8811 	msr	BASEPRI, r3
 8012306:	f3bf 8f6f 	isb	sy
 801230a:	f3bf 8f4f 	dsb	sy
 801230e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012310:	f7fe fe02 	bl	8010f18 <xTaskIncrementTick>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d003      	beq.n	8012322 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801231a:	4b06      	ldr	r3, [pc, #24]	; (8012334 <xPortSysTickHandler+0x3c>)
 801231c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012320:	601a      	str	r2, [r3, #0]
 8012322:	2300      	movs	r3, #0
 8012324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801232c:	bf00      	nop
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	e000ed04 	.word	0xe000ed04

08012338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012338:	b480      	push	{r7}
 801233a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801233c:	4b0b      	ldr	r3, [pc, #44]	; (801236c <vPortSetupTimerInterrupt+0x34>)
 801233e:	2200      	movs	r2, #0
 8012340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012342:	4b0b      	ldr	r3, [pc, #44]	; (8012370 <vPortSetupTimerInterrupt+0x38>)
 8012344:	2200      	movs	r2, #0
 8012346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012348:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <vPortSetupTimerInterrupt+0x3c>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4a0a      	ldr	r2, [pc, #40]	; (8012378 <vPortSetupTimerInterrupt+0x40>)
 801234e:	fba2 2303 	umull	r2, r3, r2, r3
 8012352:	099b      	lsrs	r3, r3, #6
 8012354:	4a09      	ldr	r2, [pc, #36]	; (801237c <vPortSetupTimerInterrupt+0x44>)
 8012356:	3b01      	subs	r3, #1
 8012358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801235a:	4b04      	ldr	r3, [pc, #16]	; (801236c <vPortSetupTimerInterrupt+0x34>)
 801235c:	2207      	movs	r2, #7
 801235e:	601a      	str	r2, [r3, #0]
}
 8012360:	bf00      	nop
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	e000e010 	.word	0xe000e010
 8012370:	e000e018 	.word	0xe000e018
 8012374:	2000018c 	.word	0x2000018c
 8012378:	10624dd3 	.word	0x10624dd3
 801237c:	e000e014 	.word	0xe000e014

08012380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012390 <vPortEnableVFP+0x10>
 8012384:	6801      	ldr	r1, [r0, #0]
 8012386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801238a:	6001      	str	r1, [r0, #0]
 801238c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801238e:	bf00      	nop
 8012390:	e000ed88 	.word	0xe000ed88

08012394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801239a:	f3ef 8305 	mrs	r3, IPSR
 801239e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2b0f      	cmp	r3, #15
 80123a4:	d913      	bls.n	80123ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80123a6:	4a16      	ldr	r2, [pc, #88]	; (8012400 <vPortValidateInterruptPriority+0x6c>)
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	4413      	add	r3, r2
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80123b0:	4b14      	ldr	r3, [pc, #80]	; (8012404 <vPortValidateInterruptPriority+0x70>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	7afa      	ldrb	r2, [r7, #11]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d209      	bcs.n	80123ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80123ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	607b      	str	r3, [r7, #4]
 80123cc:	e7fe      	b.n	80123cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80123ce:	4b0e      	ldr	r3, [pc, #56]	; (8012408 <vPortValidateInterruptPriority+0x74>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80123d6:	4b0d      	ldr	r3, [pc, #52]	; (801240c <vPortValidateInterruptPriority+0x78>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d909      	bls.n	80123f2 <vPortValidateInterruptPriority+0x5e>
 80123de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e2:	f383 8811 	msr	BASEPRI, r3
 80123e6:	f3bf 8f6f 	isb	sy
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	603b      	str	r3, [r7, #0]
 80123f0:	e7fe      	b.n	80123f0 <vPortValidateInterruptPriority+0x5c>
	}
 80123f2:	bf00      	nop
 80123f4:	3714      	adds	r7, #20
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	e000e3f0 	.word	0xe000e3f0
 8012404:	200014a8 	.word	0x200014a8
 8012408:	e000ed0c 	.word	0xe000ed0c
 801240c:	200014ac 	.word	0x200014ac

08012410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b08a      	sub	sp, #40	; 0x28
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012418:	2300      	movs	r3, #0
 801241a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801241c:	f7fe fcc2 	bl	8010da4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012420:	4b57      	ldr	r3, [pc, #348]	; (8012580 <pvPortMalloc+0x170>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d101      	bne.n	801242c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012428:	f000 f90c 	bl	8012644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801242c:	4b55      	ldr	r3, [pc, #340]	; (8012584 <pvPortMalloc+0x174>)
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4013      	ands	r3, r2
 8012434:	2b00      	cmp	r3, #0
 8012436:	f040 808c 	bne.w	8012552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d01c      	beq.n	801247a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8012440:	2208      	movs	r2, #8
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4413      	add	r3, r2
 8012446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f003 0307 	and.w	r3, r3, #7
 801244e:	2b00      	cmp	r3, #0
 8012450:	d013      	beq.n	801247a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f023 0307 	bic.w	r3, r3, #7
 8012458:	3308      	adds	r3, #8
 801245a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f003 0307 	and.w	r3, r3, #7
 8012462:	2b00      	cmp	r3, #0
 8012464:	d009      	beq.n	801247a <pvPortMalloc+0x6a>
 8012466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246a:	f383 8811 	msr	BASEPRI, r3
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	617b      	str	r3, [r7, #20]
 8012478:	e7fe      	b.n	8012478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d068      	beq.n	8012552 <pvPortMalloc+0x142>
 8012480:	4b41      	ldr	r3, [pc, #260]	; (8012588 <pvPortMalloc+0x178>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	429a      	cmp	r2, r3
 8012488:	d863      	bhi.n	8012552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801248a:	4b40      	ldr	r3, [pc, #256]	; (801258c <pvPortMalloc+0x17c>)
 801248c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801248e:	4b3f      	ldr	r3, [pc, #252]	; (801258c <pvPortMalloc+0x17c>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012494:	e004      	b.n	80124a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d903      	bls.n	80124b2 <pvPortMalloc+0xa2>
 80124aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d1f1      	bne.n	8012496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80124b2:	4b33      	ldr	r3, [pc, #204]	; (8012580 <pvPortMalloc+0x170>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d04a      	beq.n	8012552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80124bc:	6a3b      	ldr	r3, [r7, #32]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2208      	movs	r2, #8
 80124c2:	4413      	add	r3, r2
 80124c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80124c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	6a3b      	ldr	r3, [r7, #32]
 80124cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80124ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d0:	685a      	ldr	r2, [r3, #4]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	1ad2      	subs	r2, r2, r3
 80124d6:	2308      	movs	r3, #8
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	429a      	cmp	r2, r3
 80124dc:	d91e      	bls.n	801251c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80124de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4413      	add	r3, r2
 80124e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	f003 0307 	and.w	r3, r3, #7
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d009      	beq.n	8012504 <pvPortMalloc+0xf4>
 80124f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f4:	f383 8811 	msr	BASEPRI, r3
 80124f8:	f3bf 8f6f 	isb	sy
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	613b      	str	r3, [r7, #16]
 8012502:	e7fe      	b.n	8012502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	1ad2      	subs	r2, r2, r3
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012516:	69b8      	ldr	r0, [r7, #24]
 8012518:	f000 f8f6 	bl	8012708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801251c:	4b1a      	ldr	r3, [pc, #104]	; (8012588 <pvPortMalloc+0x178>)
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	4a18      	ldr	r2, [pc, #96]	; (8012588 <pvPortMalloc+0x178>)
 8012528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801252a:	4b17      	ldr	r3, [pc, #92]	; (8012588 <pvPortMalloc+0x178>)
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	4b18      	ldr	r3, [pc, #96]	; (8012590 <pvPortMalloc+0x180>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	429a      	cmp	r2, r3
 8012534:	d203      	bcs.n	801253e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012536:	4b14      	ldr	r3, [pc, #80]	; (8012588 <pvPortMalloc+0x178>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a15      	ldr	r2, [pc, #84]	; (8012590 <pvPortMalloc+0x180>)
 801253c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012540:	685a      	ldr	r2, [r3, #4]
 8012542:	4b10      	ldr	r3, [pc, #64]	; (8012584 <pvPortMalloc+0x174>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	431a      	orrs	r2, r3
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012552:	f7fe fc35 	bl	8010dc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	f003 0307 	and.w	r3, r3, #7
 801255c:	2b00      	cmp	r3, #0
 801255e:	d009      	beq.n	8012574 <pvPortMalloc+0x164>
 8012560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012564:	f383 8811 	msr	BASEPRI, r3
 8012568:	f3bf 8f6f 	isb	sy
 801256c:	f3bf 8f4f 	dsb	sy
 8012570:	60fb      	str	r3, [r7, #12]
 8012572:	e7fe      	b.n	8012572 <pvPortMalloc+0x162>
	return pvReturn;
 8012574:	69fb      	ldr	r3, [r7, #28]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3728      	adds	r7, #40	; 0x28
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	20003010 	.word	0x20003010
 8012584:	2000301c 	.word	0x2000301c
 8012588:	20003014 	.word	0x20003014
 801258c:	20003008 	.word	0x20003008
 8012590:	20003018 	.word	0x20003018

08012594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d046      	beq.n	8012634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80125a6:	2308      	movs	r3, #8
 80125a8:	425b      	negs	r3, r3
 80125aa:	697a      	ldr	r2, [r7, #20]
 80125ac:	4413      	add	r3, r2
 80125ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	4b20      	ldr	r3, [pc, #128]	; (801263c <vPortFree+0xa8>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4013      	ands	r3, r2
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d109      	bne.n	80125d6 <vPortFree+0x42>
 80125c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c6:	f383 8811 	msr	BASEPRI, r3
 80125ca:	f3bf 8f6f 	isb	sy
 80125ce:	f3bf 8f4f 	dsb	sy
 80125d2:	60fb      	str	r3, [r7, #12]
 80125d4:	e7fe      	b.n	80125d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d009      	beq.n	80125f2 <vPortFree+0x5e>
 80125de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e2:	f383 8811 	msr	BASEPRI, r3
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	f3bf 8f4f 	dsb	sy
 80125ee:	60bb      	str	r3, [r7, #8]
 80125f0:	e7fe      	b.n	80125f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	685a      	ldr	r2, [r3, #4]
 80125f6:	4b11      	ldr	r3, [pc, #68]	; (801263c <vPortFree+0xa8>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4013      	ands	r3, r2
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d019      	beq.n	8012634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d115      	bne.n	8012634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	685a      	ldr	r2, [r3, #4]
 801260c:	4b0b      	ldr	r3, [pc, #44]	; (801263c <vPortFree+0xa8>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	43db      	mvns	r3, r3
 8012612:	401a      	ands	r2, r3
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012618:	f7fe fbc4 	bl	8010da4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	4b07      	ldr	r3, [pc, #28]	; (8012640 <vPortFree+0xac>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4413      	add	r3, r2
 8012626:	4a06      	ldr	r2, [pc, #24]	; (8012640 <vPortFree+0xac>)
 8012628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801262a:	6938      	ldr	r0, [r7, #16]
 801262c:	f000 f86c 	bl	8012708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012630:	f7fe fbc6 	bl	8010dc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012634:	bf00      	nop
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	2000301c 	.word	0x2000301c
 8012640:	20003014 	.word	0x20003014

08012644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801264a:	f641 3358 	movw	r3, #7000	; 0x1b58
 801264e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012650:	4b27      	ldr	r3, [pc, #156]	; (80126f0 <prvHeapInit+0xac>)
 8012652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f003 0307 	and.w	r3, r3, #7
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00c      	beq.n	8012678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3307      	adds	r3, #7
 8012662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f023 0307 	bic.w	r3, r3, #7
 801266a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801266c:	68ba      	ldr	r2, [r7, #8]
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	4a1f      	ldr	r2, [pc, #124]	; (80126f0 <prvHeapInit+0xac>)
 8012674:	4413      	add	r3, r2
 8012676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801267c:	4a1d      	ldr	r2, [pc, #116]	; (80126f4 <prvHeapInit+0xb0>)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012682:	4b1c      	ldr	r3, [pc, #112]	; (80126f4 <prvHeapInit+0xb0>)
 8012684:	2200      	movs	r2, #0
 8012686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	68ba      	ldr	r2, [r7, #8]
 801268c:	4413      	add	r3, r2
 801268e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012690:	2208      	movs	r2, #8
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	1a9b      	subs	r3, r3, r2
 8012696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	f023 0307 	bic.w	r3, r3, #7
 801269e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	4a15      	ldr	r2, [pc, #84]	; (80126f8 <prvHeapInit+0xb4>)
 80126a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80126a6:	4b14      	ldr	r3, [pc, #80]	; (80126f8 <prvHeapInit+0xb4>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2200      	movs	r2, #0
 80126ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80126ae:	4b12      	ldr	r3, [pc, #72]	; (80126f8 <prvHeapInit+0xb4>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2200      	movs	r2, #0
 80126b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	68fa      	ldr	r2, [r7, #12]
 80126be:	1ad2      	subs	r2, r2, r3
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80126c4:	4b0c      	ldr	r3, [pc, #48]	; (80126f8 <prvHeapInit+0xb4>)
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	4a0a      	ldr	r2, [pc, #40]	; (80126fc <prvHeapInit+0xb8>)
 80126d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	4a09      	ldr	r2, [pc, #36]	; (8012700 <prvHeapInit+0xbc>)
 80126da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80126dc:	4b09      	ldr	r3, [pc, #36]	; (8012704 <prvHeapInit+0xc0>)
 80126de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80126e2:	601a      	str	r2, [r3, #0]
}
 80126e4:	bf00      	nop
 80126e6:	3714      	adds	r7, #20
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr
 80126f0:	200014b0 	.word	0x200014b0
 80126f4:	20003008 	.word	0x20003008
 80126f8:	20003010 	.word	0x20003010
 80126fc:	20003018 	.word	0x20003018
 8012700:	20003014 	.word	0x20003014
 8012704:	2000301c 	.word	0x2000301c

08012708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012710:	4b28      	ldr	r3, [pc, #160]	; (80127b4 <prvInsertBlockIntoFreeList+0xac>)
 8012712:	60fb      	str	r3, [r7, #12]
 8012714:	e002      	b.n	801271c <prvInsertBlockIntoFreeList+0x14>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	60fb      	str	r3, [r7, #12]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	429a      	cmp	r2, r3
 8012724:	d8f7      	bhi.n	8012716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	68ba      	ldr	r2, [r7, #8]
 8012730:	4413      	add	r3, r2
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	429a      	cmp	r2, r3
 8012736:	d108      	bne.n	801274a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	685a      	ldr	r2, [r3, #4]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	441a      	add	r2, r3
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	68ba      	ldr	r2, [r7, #8]
 8012754:	441a      	add	r2, r3
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	d118      	bne.n	8012790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	4b15      	ldr	r3, [pc, #84]	; (80127b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d00d      	beq.n	8012786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	685a      	ldr	r2, [r3, #4]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	441a      	add	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	e008      	b.n	8012798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012786:	4b0c      	ldr	r3, [pc, #48]	; (80127b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	601a      	str	r2, [r3, #0]
 801278e:	e003      	b.n	8012798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012798:	68fa      	ldr	r2, [r7, #12]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	429a      	cmp	r2, r3
 801279e:	d002      	beq.n	80127a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127a6:	bf00      	nop
 80127a8:	3714      	adds	r7, #20
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	20003008 	.word	0x20003008
 80127b8:	20003010 	.word	0x20003010

080127bc <atoi>:
 80127bc:	220a      	movs	r2, #10
 80127be:	2100      	movs	r1, #0
 80127c0:	f000 ba24 	b.w	8012c0c <strtol>

080127c4 <__errno>:
 80127c4:	4b01      	ldr	r3, [pc, #4]	; (80127cc <__errno+0x8>)
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	20000494 	.word	0x20000494

080127d0 <__libc_init_array>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	4e0d      	ldr	r6, [pc, #52]	; (8012808 <__libc_init_array+0x38>)
 80127d4:	4c0d      	ldr	r4, [pc, #52]	; (801280c <__libc_init_array+0x3c>)
 80127d6:	1ba4      	subs	r4, r4, r6
 80127d8:	10a4      	asrs	r4, r4, #2
 80127da:	2500      	movs	r5, #0
 80127dc:	42a5      	cmp	r5, r4
 80127de:	d109      	bne.n	80127f4 <__libc_init_array+0x24>
 80127e0:	4e0b      	ldr	r6, [pc, #44]	; (8012810 <__libc_init_array+0x40>)
 80127e2:	4c0c      	ldr	r4, [pc, #48]	; (8012814 <__libc_init_array+0x44>)
 80127e4:	f001 faf2 	bl	8013dcc <_init>
 80127e8:	1ba4      	subs	r4, r4, r6
 80127ea:	10a4      	asrs	r4, r4, #2
 80127ec:	2500      	movs	r5, #0
 80127ee:	42a5      	cmp	r5, r4
 80127f0:	d105      	bne.n	80127fe <__libc_init_array+0x2e>
 80127f2:	bd70      	pop	{r4, r5, r6, pc}
 80127f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127f8:	4798      	blx	r3
 80127fa:	3501      	adds	r5, #1
 80127fc:	e7ee      	b.n	80127dc <__libc_init_array+0xc>
 80127fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012802:	4798      	blx	r3
 8012804:	3501      	adds	r5, #1
 8012806:	e7f2      	b.n	80127ee <__libc_init_array+0x1e>
 8012808:	08015120 	.word	0x08015120
 801280c:	08015120 	.word	0x08015120
 8012810:	08015120 	.word	0x08015120
 8012814:	08015124 	.word	0x08015124

08012818 <memcmp>:
 8012818:	b530      	push	{r4, r5, lr}
 801281a:	2400      	movs	r4, #0
 801281c:	42a2      	cmp	r2, r4
 801281e:	d101      	bne.n	8012824 <memcmp+0xc>
 8012820:	2000      	movs	r0, #0
 8012822:	e007      	b.n	8012834 <memcmp+0x1c>
 8012824:	5d03      	ldrb	r3, [r0, r4]
 8012826:	3401      	adds	r4, #1
 8012828:	190d      	adds	r5, r1, r4
 801282a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801282e:	42ab      	cmp	r3, r5
 8012830:	d0f4      	beq.n	801281c <memcmp+0x4>
 8012832:	1b58      	subs	r0, r3, r5
 8012834:	bd30      	pop	{r4, r5, pc}

08012836 <memcpy>:
 8012836:	b510      	push	{r4, lr}
 8012838:	1e43      	subs	r3, r0, #1
 801283a:	440a      	add	r2, r1
 801283c:	4291      	cmp	r1, r2
 801283e:	d100      	bne.n	8012842 <memcpy+0xc>
 8012840:	bd10      	pop	{r4, pc}
 8012842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012846:	f803 4f01 	strb.w	r4, [r3, #1]!
 801284a:	e7f7      	b.n	801283c <memcpy+0x6>

0801284c <memset>:
 801284c:	4402      	add	r2, r0
 801284e:	4603      	mov	r3, r0
 8012850:	4293      	cmp	r3, r2
 8012852:	d100      	bne.n	8012856 <memset+0xa>
 8012854:	4770      	bx	lr
 8012856:	f803 1b01 	strb.w	r1, [r3], #1
 801285a:	e7f9      	b.n	8012850 <memset+0x4>

0801285c <iprintf>:
 801285c:	b40f      	push	{r0, r1, r2, r3}
 801285e:	4b0a      	ldr	r3, [pc, #40]	; (8012888 <iprintf+0x2c>)
 8012860:	b513      	push	{r0, r1, r4, lr}
 8012862:	681c      	ldr	r4, [r3, #0]
 8012864:	b124      	cbz	r4, 8012870 <iprintf+0x14>
 8012866:	69a3      	ldr	r3, [r4, #24]
 8012868:	b913      	cbnz	r3, 8012870 <iprintf+0x14>
 801286a:	4620      	mov	r0, r4
 801286c:	f000 fb94 	bl	8012f98 <__sinit>
 8012870:	ab05      	add	r3, sp, #20
 8012872:	9a04      	ldr	r2, [sp, #16]
 8012874:	68a1      	ldr	r1, [r4, #8]
 8012876:	9301      	str	r3, [sp, #4]
 8012878:	4620      	mov	r0, r4
 801287a:	f000 febd 	bl	80135f8 <_vfiprintf_r>
 801287e:	b002      	add	sp, #8
 8012880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012884:	b004      	add	sp, #16
 8012886:	4770      	bx	lr
 8012888:	20000494 	.word	0x20000494

0801288c <_puts_r>:
 801288c:	b570      	push	{r4, r5, r6, lr}
 801288e:	460e      	mov	r6, r1
 8012890:	4605      	mov	r5, r0
 8012892:	b118      	cbz	r0, 801289c <_puts_r+0x10>
 8012894:	6983      	ldr	r3, [r0, #24]
 8012896:	b90b      	cbnz	r3, 801289c <_puts_r+0x10>
 8012898:	f000 fb7e 	bl	8012f98 <__sinit>
 801289c:	69ab      	ldr	r3, [r5, #24]
 801289e:	68ac      	ldr	r4, [r5, #8]
 80128a0:	b913      	cbnz	r3, 80128a8 <_puts_r+0x1c>
 80128a2:	4628      	mov	r0, r5
 80128a4:	f000 fb78 	bl	8012f98 <__sinit>
 80128a8:	4b23      	ldr	r3, [pc, #140]	; (8012938 <_puts_r+0xac>)
 80128aa:	429c      	cmp	r4, r3
 80128ac:	d117      	bne.n	80128de <_puts_r+0x52>
 80128ae:	686c      	ldr	r4, [r5, #4]
 80128b0:	89a3      	ldrh	r3, [r4, #12]
 80128b2:	071b      	lsls	r3, r3, #28
 80128b4:	d51d      	bpl.n	80128f2 <_puts_r+0x66>
 80128b6:	6923      	ldr	r3, [r4, #16]
 80128b8:	b1db      	cbz	r3, 80128f2 <_puts_r+0x66>
 80128ba:	3e01      	subs	r6, #1
 80128bc:	68a3      	ldr	r3, [r4, #8]
 80128be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80128c2:	3b01      	subs	r3, #1
 80128c4:	60a3      	str	r3, [r4, #8]
 80128c6:	b9e9      	cbnz	r1, 8012904 <_puts_r+0x78>
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	da2e      	bge.n	801292a <_puts_r+0x9e>
 80128cc:	4622      	mov	r2, r4
 80128ce:	210a      	movs	r1, #10
 80128d0:	4628      	mov	r0, r5
 80128d2:	f000 f9b1 	bl	8012c38 <__swbuf_r>
 80128d6:	3001      	adds	r0, #1
 80128d8:	d011      	beq.n	80128fe <_puts_r+0x72>
 80128da:	200a      	movs	r0, #10
 80128dc:	e011      	b.n	8012902 <_puts_r+0x76>
 80128de:	4b17      	ldr	r3, [pc, #92]	; (801293c <_puts_r+0xb0>)
 80128e0:	429c      	cmp	r4, r3
 80128e2:	d101      	bne.n	80128e8 <_puts_r+0x5c>
 80128e4:	68ac      	ldr	r4, [r5, #8]
 80128e6:	e7e3      	b.n	80128b0 <_puts_r+0x24>
 80128e8:	4b15      	ldr	r3, [pc, #84]	; (8012940 <_puts_r+0xb4>)
 80128ea:	429c      	cmp	r4, r3
 80128ec:	bf08      	it	eq
 80128ee:	68ec      	ldreq	r4, [r5, #12]
 80128f0:	e7de      	b.n	80128b0 <_puts_r+0x24>
 80128f2:	4621      	mov	r1, r4
 80128f4:	4628      	mov	r0, r5
 80128f6:	f000 f9f1 	bl	8012cdc <__swsetup_r>
 80128fa:	2800      	cmp	r0, #0
 80128fc:	d0dd      	beq.n	80128ba <_puts_r+0x2e>
 80128fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	2b00      	cmp	r3, #0
 8012906:	da04      	bge.n	8012912 <_puts_r+0x86>
 8012908:	69a2      	ldr	r2, [r4, #24]
 801290a:	429a      	cmp	r2, r3
 801290c:	dc06      	bgt.n	801291c <_puts_r+0x90>
 801290e:	290a      	cmp	r1, #10
 8012910:	d004      	beq.n	801291c <_puts_r+0x90>
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	1c5a      	adds	r2, r3, #1
 8012916:	6022      	str	r2, [r4, #0]
 8012918:	7019      	strb	r1, [r3, #0]
 801291a:	e7cf      	b.n	80128bc <_puts_r+0x30>
 801291c:	4622      	mov	r2, r4
 801291e:	4628      	mov	r0, r5
 8012920:	f000 f98a 	bl	8012c38 <__swbuf_r>
 8012924:	3001      	adds	r0, #1
 8012926:	d1c9      	bne.n	80128bc <_puts_r+0x30>
 8012928:	e7e9      	b.n	80128fe <_puts_r+0x72>
 801292a:	6823      	ldr	r3, [r4, #0]
 801292c:	200a      	movs	r0, #10
 801292e:	1c5a      	adds	r2, r3, #1
 8012930:	6022      	str	r2, [r4, #0]
 8012932:	7018      	strb	r0, [r3, #0]
 8012934:	e7e5      	b.n	8012902 <_puts_r+0x76>
 8012936:	bf00      	nop
 8012938:	08014f98 	.word	0x08014f98
 801293c:	08014fb8 	.word	0x08014fb8
 8012940:	08014f78 	.word	0x08014f78

08012944 <puts>:
 8012944:	4b02      	ldr	r3, [pc, #8]	; (8012950 <puts+0xc>)
 8012946:	4601      	mov	r1, r0
 8012948:	6818      	ldr	r0, [r3, #0]
 801294a:	f7ff bf9f 	b.w	801288c <_puts_r>
 801294e:	bf00      	nop
 8012950:	20000494 	.word	0x20000494

08012954 <sniprintf>:
 8012954:	b40c      	push	{r2, r3}
 8012956:	b530      	push	{r4, r5, lr}
 8012958:	4b17      	ldr	r3, [pc, #92]	; (80129b8 <sniprintf+0x64>)
 801295a:	1e0c      	subs	r4, r1, #0
 801295c:	b09d      	sub	sp, #116	; 0x74
 801295e:	681d      	ldr	r5, [r3, #0]
 8012960:	da08      	bge.n	8012974 <sniprintf+0x20>
 8012962:	238b      	movs	r3, #139	; 0x8b
 8012964:	602b      	str	r3, [r5, #0]
 8012966:	f04f 30ff 	mov.w	r0, #4294967295
 801296a:	b01d      	add	sp, #116	; 0x74
 801296c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012970:	b002      	add	sp, #8
 8012972:	4770      	bx	lr
 8012974:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012978:	f8ad 3014 	strh.w	r3, [sp, #20]
 801297c:	bf14      	ite	ne
 801297e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012982:	4623      	moveq	r3, r4
 8012984:	9304      	str	r3, [sp, #16]
 8012986:	9307      	str	r3, [sp, #28]
 8012988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801298c:	9002      	str	r0, [sp, #8]
 801298e:	9006      	str	r0, [sp, #24]
 8012990:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012994:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012996:	ab21      	add	r3, sp, #132	; 0x84
 8012998:	a902      	add	r1, sp, #8
 801299a:	4628      	mov	r0, r5
 801299c:	9301      	str	r3, [sp, #4]
 801299e:	f000 fd09 	bl	80133b4 <_svfiprintf_r>
 80129a2:	1c43      	adds	r3, r0, #1
 80129a4:	bfbc      	itt	lt
 80129a6:	238b      	movlt	r3, #139	; 0x8b
 80129a8:	602b      	strlt	r3, [r5, #0]
 80129aa:	2c00      	cmp	r4, #0
 80129ac:	d0dd      	beq.n	801296a <sniprintf+0x16>
 80129ae:	9b02      	ldr	r3, [sp, #8]
 80129b0:	2200      	movs	r2, #0
 80129b2:	701a      	strb	r2, [r3, #0]
 80129b4:	e7d9      	b.n	801296a <sniprintf+0x16>
 80129b6:	bf00      	nop
 80129b8:	20000494 	.word	0x20000494

080129bc <siprintf>:
 80129bc:	b40e      	push	{r1, r2, r3}
 80129be:	b500      	push	{lr}
 80129c0:	b09c      	sub	sp, #112	; 0x70
 80129c2:	ab1d      	add	r3, sp, #116	; 0x74
 80129c4:	9002      	str	r0, [sp, #8]
 80129c6:	9006      	str	r0, [sp, #24]
 80129c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80129cc:	4809      	ldr	r0, [pc, #36]	; (80129f4 <siprintf+0x38>)
 80129ce:	9107      	str	r1, [sp, #28]
 80129d0:	9104      	str	r1, [sp, #16]
 80129d2:	4909      	ldr	r1, [pc, #36]	; (80129f8 <siprintf+0x3c>)
 80129d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80129d8:	9105      	str	r1, [sp, #20]
 80129da:	6800      	ldr	r0, [r0, #0]
 80129dc:	9301      	str	r3, [sp, #4]
 80129de:	a902      	add	r1, sp, #8
 80129e0:	f000 fce8 	bl	80133b4 <_svfiprintf_r>
 80129e4:	9b02      	ldr	r3, [sp, #8]
 80129e6:	2200      	movs	r2, #0
 80129e8:	701a      	strb	r2, [r3, #0]
 80129ea:	b01c      	add	sp, #112	; 0x70
 80129ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80129f0:	b003      	add	sp, #12
 80129f2:	4770      	bx	lr
 80129f4:	20000494 	.word	0x20000494
 80129f8:	ffff0208 	.word	0xffff0208

080129fc <strcpy>:
 80129fc:	4603      	mov	r3, r0
 80129fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a02:	f803 2b01 	strb.w	r2, [r3], #1
 8012a06:	2a00      	cmp	r2, #0
 8012a08:	d1f9      	bne.n	80129fe <strcpy+0x2>
 8012a0a:	4770      	bx	lr

08012a0c <strncpy>:
 8012a0c:	b570      	push	{r4, r5, r6, lr}
 8012a0e:	3901      	subs	r1, #1
 8012a10:	4604      	mov	r4, r0
 8012a12:	b902      	cbnz	r2, 8012a16 <strncpy+0xa>
 8012a14:	bd70      	pop	{r4, r5, r6, pc}
 8012a16:	4623      	mov	r3, r4
 8012a18:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8012a1c:	f803 5b01 	strb.w	r5, [r3], #1
 8012a20:	1e56      	subs	r6, r2, #1
 8012a22:	b92d      	cbnz	r5, 8012a30 <strncpy+0x24>
 8012a24:	4414      	add	r4, r2
 8012a26:	42a3      	cmp	r3, r4
 8012a28:	d0f4      	beq.n	8012a14 <strncpy+0x8>
 8012a2a:	f803 5b01 	strb.w	r5, [r3], #1
 8012a2e:	e7fa      	b.n	8012a26 <strncpy+0x1a>
 8012a30:	461c      	mov	r4, r3
 8012a32:	4632      	mov	r2, r6
 8012a34:	e7ed      	b.n	8012a12 <strncpy+0x6>

08012a36 <strstr>:
 8012a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a38:	7803      	ldrb	r3, [r0, #0]
 8012a3a:	b17b      	cbz	r3, 8012a5c <strstr+0x26>
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	7823      	ldrb	r3, [r4, #0]
 8012a40:	4620      	mov	r0, r4
 8012a42:	1c66      	adds	r6, r4, #1
 8012a44:	b17b      	cbz	r3, 8012a66 <strstr+0x30>
 8012a46:	1e4a      	subs	r2, r1, #1
 8012a48:	1e63      	subs	r3, r4, #1
 8012a4a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012a4e:	b14d      	cbz	r5, 8012a64 <strstr+0x2e>
 8012a50:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012a54:	42af      	cmp	r7, r5
 8012a56:	4634      	mov	r4, r6
 8012a58:	d0f7      	beq.n	8012a4a <strstr+0x14>
 8012a5a:	e7f0      	b.n	8012a3e <strstr+0x8>
 8012a5c:	780b      	ldrb	r3, [r1, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	bf18      	it	ne
 8012a62:	2000      	movne	r0, #0
 8012a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a66:	4618      	mov	r0, r3
 8012a68:	e7fc      	b.n	8012a64 <strstr+0x2e>
	...

08012a6c <strtok>:
 8012a6c:	4b13      	ldr	r3, [pc, #76]	; (8012abc <strtok+0x50>)
 8012a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a72:	681d      	ldr	r5, [r3, #0]
 8012a74:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8012a76:	4606      	mov	r6, r0
 8012a78:	460f      	mov	r7, r1
 8012a7a:	b9b4      	cbnz	r4, 8012aaa <strtok+0x3e>
 8012a7c:	2050      	movs	r0, #80	; 0x50
 8012a7e:	f000 fb7d 	bl	801317c <malloc>
 8012a82:	65a8      	str	r0, [r5, #88]	; 0x58
 8012a84:	e9c0 4400 	strd	r4, r4, [r0]
 8012a88:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012a8c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012a90:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012a94:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012a98:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012a9c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012aa0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012aa4:	6184      	str	r4, [r0, #24]
 8012aa6:	7704      	strb	r4, [r0, #28]
 8012aa8:	6244      	str	r4, [r0, #36]	; 0x24
 8012aaa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8012aac:	4639      	mov	r1, r7
 8012aae:	4630      	mov	r0, r6
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab6:	f000 b803 	b.w	8012ac0 <__strtok_r>
 8012aba:	bf00      	nop
 8012abc:	20000494 	.word	0x20000494

08012ac0 <__strtok_r>:
 8012ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ac2:	b918      	cbnz	r0, 8012acc <__strtok_r+0xc>
 8012ac4:	6810      	ldr	r0, [r2, #0]
 8012ac6:	b908      	cbnz	r0, 8012acc <__strtok_r+0xc>
 8012ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aca:	4620      	mov	r0, r4
 8012acc:	4604      	mov	r4, r0
 8012ace:	460f      	mov	r7, r1
 8012ad0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012ad4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012ad8:	b91e      	cbnz	r6, 8012ae2 <__strtok_r+0x22>
 8012ada:	b96d      	cbnz	r5, 8012af8 <__strtok_r+0x38>
 8012adc:	6015      	str	r5, [r2, #0]
 8012ade:	4628      	mov	r0, r5
 8012ae0:	e7f2      	b.n	8012ac8 <__strtok_r+0x8>
 8012ae2:	42b5      	cmp	r5, r6
 8012ae4:	d1f6      	bne.n	8012ad4 <__strtok_r+0x14>
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1ef      	bne.n	8012aca <__strtok_r+0xa>
 8012aea:	6014      	str	r4, [r2, #0]
 8012aec:	7003      	strb	r3, [r0, #0]
 8012aee:	e7eb      	b.n	8012ac8 <__strtok_r+0x8>
 8012af0:	462b      	mov	r3, r5
 8012af2:	e00d      	b.n	8012b10 <__strtok_r+0x50>
 8012af4:	b926      	cbnz	r6, 8012b00 <__strtok_r+0x40>
 8012af6:	461c      	mov	r4, r3
 8012af8:	4623      	mov	r3, r4
 8012afa:	460f      	mov	r7, r1
 8012afc:	f813 5b01 	ldrb.w	r5, [r3], #1
 8012b00:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b04:	42b5      	cmp	r5, r6
 8012b06:	d1f5      	bne.n	8012af4 <__strtok_r+0x34>
 8012b08:	2d00      	cmp	r5, #0
 8012b0a:	d0f1      	beq.n	8012af0 <__strtok_r+0x30>
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	7021      	strb	r1, [r4, #0]
 8012b10:	6013      	str	r3, [r2, #0]
 8012b12:	e7d9      	b.n	8012ac8 <__strtok_r+0x8>

08012b14 <_strtol_l.isra.0>:
 8012b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b18:	4680      	mov	r8, r0
 8012b1a:	4689      	mov	r9, r1
 8012b1c:	4692      	mov	sl, r2
 8012b1e:	461e      	mov	r6, r3
 8012b20:	460f      	mov	r7, r1
 8012b22:	463d      	mov	r5, r7
 8012b24:	9808      	ldr	r0, [sp, #32]
 8012b26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b2a:	f000 fabf 	bl	80130ac <__locale_ctype_ptr_l>
 8012b2e:	4420      	add	r0, r4
 8012b30:	7843      	ldrb	r3, [r0, #1]
 8012b32:	f013 0308 	ands.w	r3, r3, #8
 8012b36:	d132      	bne.n	8012b9e <_strtol_l.isra.0+0x8a>
 8012b38:	2c2d      	cmp	r4, #45	; 0x2d
 8012b3a:	d132      	bne.n	8012ba2 <_strtol_l.isra.0+0x8e>
 8012b3c:	787c      	ldrb	r4, [r7, #1]
 8012b3e:	1cbd      	adds	r5, r7, #2
 8012b40:	2201      	movs	r2, #1
 8012b42:	2e00      	cmp	r6, #0
 8012b44:	d05d      	beq.n	8012c02 <_strtol_l.isra.0+0xee>
 8012b46:	2e10      	cmp	r6, #16
 8012b48:	d109      	bne.n	8012b5e <_strtol_l.isra.0+0x4a>
 8012b4a:	2c30      	cmp	r4, #48	; 0x30
 8012b4c:	d107      	bne.n	8012b5e <_strtol_l.isra.0+0x4a>
 8012b4e:	782b      	ldrb	r3, [r5, #0]
 8012b50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b54:	2b58      	cmp	r3, #88	; 0x58
 8012b56:	d14f      	bne.n	8012bf8 <_strtol_l.isra.0+0xe4>
 8012b58:	786c      	ldrb	r4, [r5, #1]
 8012b5a:	2610      	movs	r6, #16
 8012b5c:	3502      	adds	r5, #2
 8012b5e:	2a00      	cmp	r2, #0
 8012b60:	bf14      	ite	ne
 8012b62:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012b66:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012b6a:	2700      	movs	r7, #0
 8012b6c:	fbb1 fcf6 	udiv	ip, r1, r6
 8012b70:	4638      	mov	r0, r7
 8012b72:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012b76:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012b7a:	2b09      	cmp	r3, #9
 8012b7c:	d817      	bhi.n	8012bae <_strtol_l.isra.0+0x9a>
 8012b7e:	461c      	mov	r4, r3
 8012b80:	42a6      	cmp	r6, r4
 8012b82:	dd23      	ble.n	8012bcc <_strtol_l.isra.0+0xb8>
 8012b84:	1c7b      	adds	r3, r7, #1
 8012b86:	d007      	beq.n	8012b98 <_strtol_l.isra.0+0x84>
 8012b88:	4584      	cmp	ip, r0
 8012b8a:	d31c      	bcc.n	8012bc6 <_strtol_l.isra.0+0xb2>
 8012b8c:	d101      	bne.n	8012b92 <_strtol_l.isra.0+0x7e>
 8012b8e:	45a6      	cmp	lr, r4
 8012b90:	db19      	blt.n	8012bc6 <_strtol_l.isra.0+0xb2>
 8012b92:	fb00 4006 	mla	r0, r0, r6, r4
 8012b96:	2701      	movs	r7, #1
 8012b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b9c:	e7eb      	b.n	8012b76 <_strtol_l.isra.0+0x62>
 8012b9e:	462f      	mov	r7, r5
 8012ba0:	e7bf      	b.n	8012b22 <_strtol_l.isra.0+0xe>
 8012ba2:	2c2b      	cmp	r4, #43	; 0x2b
 8012ba4:	bf04      	itt	eq
 8012ba6:	1cbd      	addeq	r5, r7, #2
 8012ba8:	787c      	ldrbeq	r4, [r7, #1]
 8012baa:	461a      	mov	r2, r3
 8012bac:	e7c9      	b.n	8012b42 <_strtol_l.isra.0+0x2e>
 8012bae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012bb2:	2b19      	cmp	r3, #25
 8012bb4:	d801      	bhi.n	8012bba <_strtol_l.isra.0+0xa6>
 8012bb6:	3c37      	subs	r4, #55	; 0x37
 8012bb8:	e7e2      	b.n	8012b80 <_strtol_l.isra.0+0x6c>
 8012bba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012bbe:	2b19      	cmp	r3, #25
 8012bc0:	d804      	bhi.n	8012bcc <_strtol_l.isra.0+0xb8>
 8012bc2:	3c57      	subs	r4, #87	; 0x57
 8012bc4:	e7dc      	b.n	8012b80 <_strtol_l.isra.0+0x6c>
 8012bc6:	f04f 37ff 	mov.w	r7, #4294967295
 8012bca:	e7e5      	b.n	8012b98 <_strtol_l.isra.0+0x84>
 8012bcc:	1c7b      	adds	r3, r7, #1
 8012bce:	d108      	bne.n	8012be2 <_strtol_l.isra.0+0xce>
 8012bd0:	2322      	movs	r3, #34	; 0x22
 8012bd2:	f8c8 3000 	str.w	r3, [r8]
 8012bd6:	4608      	mov	r0, r1
 8012bd8:	f1ba 0f00 	cmp.w	sl, #0
 8012bdc:	d107      	bne.n	8012bee <_strtol_l.isra.0+0xda>
 8012bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be2:	b102      	cbz	r2, 8012be6 <_strtol_l.isra.0+0xd2>
 8012be4:	4240      	negs	r0, r0
 8012be6:	f1ba 0f00 	cmp.w	sl, #0
 8012bea:	d0f8      	beq.n	8012bde <_strtol_l.isra.0+0xca>
 8012bec:	b10f      	cbz	r7, 8012bf2 <_strtol_l.isra.0+0xde>
 8012bee:	f105 39ff 	add.w	r9, r5, #4294967295
 8012bf2:	f8ca 9000 	str.w	r9, [sl]
 8012bf6:	e7f2      	b.n	8012bde <_strtol_l.isra.0+0xca>
 8012bf8:	2430      	movs	r4, #48	; 0x30
 8012bfa:	2e00      	cmp	r6, #0
 8012bfc:	d1af      	bne.n	8012b5e <_strtol_l.isra.0+0x4a>
 8012bfe:	2608      	movs	r6, #8
 8012c00:	e7ad      	b.n	8012b5e <_strtol_l.isra.0+0x4a>
 8012c02:	2c30      	cmp	r4, #48	; 0x30
 8012c04:	d0a3      	beq.n	8012b4e <_strtol_l.isra.0+0x3a>
 8012c06:	260a      	movs	r6, #10
 8012c08:	e7a9      	b.n	8012b5e <_strtol_l.isra.0+0x4a>
	...

08012c0c <strtol>:
 8012c0c:	4b08      	ldr	r3, [pc, #32]	; (8012c30 <strtol+0x24>)
 8012c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c10:	681c      	ldr	r4, [r3, #0]
 8012c12:	4d08      	ldr	r5, [pc, #32]	; (8012c34 <strtol+0x28>)
 8012c14:	6a23      	ldr	r3, [r4, #32]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	bf08      	it	eq
 8012c1a:	462b      	moveq	r3, r5
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	460a      	mov	r2, r1
 8012c22:	4601      	mov	r1, r0
 8012c24:	4620      	mov	r0, r4
 8012c26:	f7ff ff75 	bl	8012b14 <_strtol_l.isra.0>
 8012c2a:	b003      	add	sp, #12
 8012c2c:	bd30      	pop	{r4, r5, pc}
 8012c2e:	bf00      	nop
 8012c30:	20000494 	.word	0x20000494
 8012c34:	200004f8 	.word	0x200004f8

08012c38 <__swbuf_r>:
 8012c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3a:	460e      	mov	r6, r1
 8012c3c:	4614      	mov	r4, r2
 8012c3e:	4605      	mov	r5, r0
 8012c40:	b118      	cbz	r0, 8012c4a <__swbuf_r+0x12>
 8012c42:	6983      	ldr	r3, [r0, #24]
 8012c44:	b90b      	cbnz	r3, 8012c4a <__swbuf_r+0x12>
 8012c46:	f000 f9a7 	bl	8012f98 <__sinit>
 8012c4a:	4b21      	ldr	r3, [pc, #132]	; (8012cd0 <__swbuf_r+0x98>)
 8012c4c:	429c      	cmp	r4, r3
 8012c4e:	d12a      	bne.n	8012ca6 <__swbuf_r+0x6e>
 8012c50:	686c      	ldr	r4, [r5, #4]
 8012c52:	69a3      	ldr	r3, [r4, #24]
 8012c54:	60a3      	str	r3, [r4, #8]
 8012c56:	89a3      	ldrh	r3, [r4, #12]
 8012c58:	071a      	lsls	r2, r3, #28
 8012c5a:	d52e      	bpl.n	8012cba <__swbuf_r+0x82>
 8012c5c:	6923      	ldr	r3, [r4, #16]
 8012c5e:	b363      	cbz	r3, 8012cba <__swbuf_r+0x82>
 8012c60:	6923      	ldr	r3, [r4, #16]
 8012c62:	6820      	ldr	r0, [r4, #0]
 8012c64:	1ac0      	subs	r0, r0, r3
 8012c66:	6963      	ldr	r3, [r4, #20]
 8012c68:	b2f6      	uxtb	r6, r6
 8012c6a:	4283      	cmp	r3, r0
 8012c6c:	4637      	mov	r7, r6
 8012c6e:	dc04      	bgt.n	8012c7a <__swbuf_r+0x42>
 8012c70:	4621      	mov	r1, r4
 8012c72:	4628      	mov	r0, r5
 8012c74:	f000 f926 	bl	8012ec4 <_fflush_r>
 8012c78:	bb28      	cbnz	r0, 8012cc6 <__swbuf_r+0x8e>
 8012c7a:	68a3      	ldr	r3, [r4, #8]
 8012c7c:	3b01      	subs	r3, #1
 8012c7e:	60a3      	str	r3, [r4, #8]
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	1c5a      	adds	r2, r3, #1
 8012c84:	6022      	str	r2, [r4, #0]
 8012c86:	701e      	strb	r6, [r3, #0]
 8012c88:	6963      	ldr	r3, [r4, #20]
 8012c8a:	3001      	adds	r0, #1
 8012c8c:	4283      	cmp	r3, r0
 8012c8e:	d004      	beq.n	8012c9a <__swbuf_r+0x62>
 8012c90:	89a3      	ldrh	r3, [r4, #12]
 8012c92:	07db      	lsls	r3, r3, #31
 8012c94:	d519      	bpl.n	8012cca <__swbuf_r+0x92>
 8012c96:	2e0a      	cmp	r6, #10
 8012c98:	d117      	bne.n	8012cca <__swbuf_r+0x92>
 8012c9a:	4621      	mov	r1, r4
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	f000 f911 	bl	8012ec4 <_fflush_r>
 8012ca2:	b190      	cbz	r0, 8012cca <__swbuf_r+0x92>
 8012ca4:	e00f      	b.n	8012cc6 <__swbuf_r+0x8e>
 8012ca6:	4b0b      	ldr	r3, [pc, #44]	; (8012cd4 <__swbuf_r+0x9c>)
 8012ca8:	429c      	cmp	r4, r3
 8012caa:	d101      	bne.n	8012cb0 <__swbuf_r+0x78>
 8012cac:	68ac      	ldr	r4, [r5, #8]
 8012cae:	e7d0      	b.n	8012c52 <__swbuf_r+0x1a>
 8012cb0:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <__swbuf_r+0xa0>)
 8012cb2:	429c      	cmp	r4, r3
 8012cb4:	bf08      	it	eq
 8012cb6:	68ec      	ldreq	r4, [r5, #12]
 8012cb8:	e7cb      	b.n	8012c52 <__swbuf_r+0x1a>
 8012cba:	4621      	mov	r1, r4
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	f000 f80d 	bl	8012cdc <__swsetup_r>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d0cc      	beq.n	8012c60 <__swbuf_r+0x28>
 8012cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8012cca:	4638      	mov	r0, r7
 8012ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	08014f98 	.word	0x08014f98
 8012cd4:	08014fb8 	.word	0x08014fb8
 8012cd8:	08014f78 	.word	0x08014f78

08012cdc <__swsetup_r>:
 8012cdc:	4b32      	ldr	r3, [pc, #200]	; (8012da8 <__swsetup_r+0xcc>)
 8012cde:	b570      	push	{r4, r5, r6, lr}
 8012ce0:	681d      	ldr	r5, [r3, #0]
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	460c      	mov	r4, r1
 8012ce6:	b125      	cbz	r5, 8012cf2 <__swsetup_r+0x16>
 8012ce8:	69ab      	ldr	r3, [r5, #24]
 8012cea:	b913      	cbnz	r3, 8012cf2 <__swsetup_r+0x16>
 8012cec:	4628      	mov	r0, r5
 8012cee:	f000 f953 	bl	8012f98 <__sinit>
 8012cf2:	4b2e      	ldr	r3, [pc, #184]	; (8012dac <__swsetup_r+0xd0>)
 8012cf4:	429c      	cmp	r4, r3
 8012cf6:	d10f      	bne.n	8012d18 <__swsetup_r+0x3c>
 8012cf8:	686c      	ldr	r4, [r5, #4]
 8012cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	0715      	lsls	r5, r2, #28
 8012d02:	d42c      	bmi.n	8012d5e <__swsetup_r+0x82>
 8012d04:	06d0      	lsls	r0, r2, #27
 8012d06:	d411      	bmi.n	8012d2c <__swsetup_r+0x50>
 8012d08:	2209      	movs	r2, #9
 8012d0a:	6032      	str	r2, [r6, #0]
 8012d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d10:	81a3      	strh	r3, [r4, #12]
 8012d12:	f04f 30ff 	mov.w	r0, #4294967295
 8012d16:	e03e      	b.n	8012d96 <__swsetup_r+0xba>
 8012d18:	4b25      	ldr	r3, [pc, #148]	; (8012db0 <__swsetup_r+0xd4>)
 8012d1a:	429c      	cmp	r4, r3
 8012d1c:	d101      	bne.n	8012d22 <__swsetup_r+0x46>
 8012d1e:	68ac      	ldr	r4, [r5, #8]
 8012d20:	e7eb      	b.n	8012cfa <__swsetup_r+0x1e>
 8012d22:	4b24      	ldr	r3, [pc, #144]	; (8012db4 <__swsetup_r+0xd8>)
 8012d24:	429c      	cmp	r4, r3
 8012d26:	bf08      	it	eq
 8012d28:	68ec      	ldreq	r4, [r5, #12]
 8012d2a:	e7e6      	b.n	8012cfa <__swsetup_r+0x1e>
 8012d2c:	0751      	lsls	r1, r2, #29
 8012d2e:	d512      	bpl.n	8012d56 <__swsetup_r+0x7a>
 8012d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d32:	b141      	cbz	r1, 8012d46 <__swsetup_r+0x6a>
 8012d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d38:	4299      	cmp	r1, r3
 8012d3a:	d002      	beq.n	8012d42 <__swsetup_r+0x66>
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f000 fa37 	bl	80131b0 <_free_r>
 8012d42:	2300      	movs	r3, #0
 8012d44:	6363      	str	r3, [r4, #52]	; 0x34
 8012d46:	89a3      	ldrh	r3, [r4, #12]
 8012d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d4c:	81a3      	strh	r3, [r4, #12]
 8012d4e:	2300      	movs	r3, #0
 8012d50:	6063      	str	r3, [r4, #4]
 8012d52:	6923      	ldr	r3, [r4, #16]
 8012d54:	6023      	str	r3, [r4, #0]
 8012d56:	89a3      	ldrh	r3, [r4, #12]
 8012d58:	f043 0308 	orr.w	r3, r3, #8
 8012d5c:	81a3      	strh	r3, [r4, #12]
 8012d5e:	6923      	ldr	r3, [r4, #16]
 8012d60:	b94b      	cbnz	r3, 8012d76 <__swsetup_r+0x9a>
 8012d62:	89a3      	ldrh	r3, [r4, #12]
 8012d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d6c:	d003      	beq.n	8012d76 <__swsetup_r+0x9a>
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4630      	mov	r0, r6
 8012d72:	f000 f9c3 	bl	80130fc <__smakebuf_r>
 8012d76:	89a2      	ldrh	r2, [r4, #12]
 8012d78:	f012 0301 	ands.w	r3, r2, #1
 8012d7c:	d00c      	beq.n	8012d98 <__swsetup_r+0xbc>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	60a3      	str	r3, [r4, #8]
 8012d82:	6963      	ldr	r3, [r4, #20]
 8012d84:	425b      	negs	r3, r3
 8012d86:	61a3      	str	r3, [r4, #24]
 8012d88:	6923      	ldr	r3, [r4, #16]
 8012d8a:	b953      	cbnz	r3, 8012da2 <__swsetup_r+0xc6>
 8012d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012d94:	d1ba      	bne.n	8012d0c <__swsetup_r+0x30>
 8012d96:	bd70      	pop	{r4, r5, r6, pc}
 8012d98:	0792      	lsls	r2, r2, #30
 8012d9a:	bf58      	it	pl
 8012d9c:	6963      	ldrpl	r3, [r4, #20]
 8012d9e:	60a3      	str	r3, [r4, #8]
 8012da0:	e7f2      	b.n	8012d88 <__swsetup_r+0xac>
 8012da2:	2000      	movs	r0, #0
 8012da4:	e7f7      	b.n	8012d96 <__swsetup_r+0xba>
 8012da6:	bf00      	nop
 8012da8:	20000494 	.word	0x20000494
 8012dac:	08014f98 	.word	0x08014f98
 8012db0:	08014fb8 	.word	0x08014fb8
 8012db4:	08014f78 	.word	0x08014f78

08012db8 <__sflush_r>:
 8012db8:	898a      	ldrh	r2, [r1, #12]
 8012dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	0710      	lsls	r0, r2, #28
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	d458      	bmi.n	8012e78 <__sflush_r+0xc0>
 8012dc6:	684b      	ldr	r3, [r1, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	dc05      	bgt.n	8012dd8 <__sflush_r+0x20>
 8012dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	dc02      	bgt.n	8012dd8 <__sflush_r+0x20>
 8012dd2:	2000      	movs	r0, #0
 8012dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012dda:	2e00      	cmp	r6, #0
 8012ddc:	d0f9      	beq.n	8012dd2 <__sflush_r+0x1a>
 8012dde:	2300      	movs	r3, #0
 8012de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012de4:	682f      	ldr	r7, [r5, #0]
 8012de6:	6a21      	ldr	r1, [r4, #32]
 8012de8:	602b      	str	r3, [r5, #0]
 8012dea:	d032      	beq.n	8012e52 <__sflush_r+0x9a>
 8012dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012dee:	89a3      	ldrh	r3, [r4, #12]
 8012df0:	075a      	lsls	r2, r3, #29
 8012df2:	d505      	bpl.n	8012e00 <__sflush_r+0x48>
 8012df4:	6863      	ldr	r3, [r4, #4]
 8012df6:	1ac0      	subs	r0, r0, r3
 8012df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dfa:	b10b      	cbz	r3, 8012e00 <__sflush_r+0x48>
 8012dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012dfe:	1ac0      	subs	r0, r0, r3
 8012e00:	2300      	movs	r3, #0
 8012e02:	4602      	mov	r2, r0
 8012e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e06:	6a21      	ldr	r1, [r4, #32]
 8012e08:	4628      	mov	r0, r5
 8012e0a:	47b0      	blx	r6
 8012e0c:	1c43      	adds	r3, r0, #1
 8012e0e:	89a3      	ldrh	r3, [r4, #12]
 8012e10:	d106      	bne.n	8012e20 <__sflush_r+0x68>
 8012e12:	6829      	ldr	r1, [r5, #0]
 8012e14:	291d      	cmp	r1, #29
 8012e16:	d848      	bhi.n	8012eaa <__sflush_r+0xf2>
 8012e18:	4a29      	ldr	r2, [pc, #164]	; (8012ec0 <__sflush_r+0x108>)
 8012e1a:	40ca      	lsrs	r2, r1
 8012e1c:	07d6      	lsls	r6, r2, #31
 8012e1e:	d544      	bpl.n	8012eaa <__sflush_r+0xf2>
 8012e20:	2200      	movs	r2, #0
 8012e22:	6062      	str	r2, [r4, #4]
 8012e24:	04d9      	lsls	r1, r3, #19
 8012e26:	6922      	ldr	r2, [r4, #16]
 8012e28:	6022      	str	r2, [r4, #0]
 8012e2a:	d504      	bpl.n	8012e36 <__sflush_r+0x7e>
 8012e2c:	1c42      	adds	r2, r0, #1
 8012e2e:	d101      	bne.n	8012e34 <__sflush_r+0x7c>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b903      	cbnz	r3, 8012e36 <__sflush_r+0x7e>
 8012e34:	6560      	str	r0, [r4, #84]	; 0x54
 8012e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e38:	602f      	str	r7, [r5, #0]
 8012e3a:	2900      	cmp	r1, #0
 8012e3c:	d0c9      	beq.n	8012dd2 <__sflush_r+0x1a>
 8012e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e42:	4299      	cmp	r1, r3
 8012e44:	d002      	beq.n	8012e4c <__sflush_r+0x94>
 8012e46:	4628      	mov	r0, r5
 8012e48:	f000 f9b2 	bl	80131b0 <_free_r>
 8012e4c:	2000      	movs	r0, #0
 8012e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8012e50:	e7c0      	b.n	8012dd4 <__sflush_r+0x1c>
 8012e52:	2301      	movs	r3, #1
 8012e54:	4628      	mov	r0, r5
 8012e56:	47b0      	blx	r6
 8012e58:	1c41      	adds	r1, r0, #1
 8012e5a:	d1c8      	bne.n	8012dee <__sflush_r+0x36>
 8012e5c:	682b      	ldr	r3, [r5, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d0c5      	beq.n	8012dee <__sflush_r+0x36>
 8012e62:	2b1d      	cmp	r3, #29
 8012e64:	d001      	beq.n	8012e6a <__sflush_r+0xb2>
 8012e66:	2b16      	cmp	r3, #22
 8012e68:	d101      	bne.n	8012e6e <__sflush_r+0xb6>
 8012e6a:	602f      	str	r7, [r5, #0]
 8012e6c:	e7b1      	b.n	8012dd2 <__sflush_r+0x1a>
 8012e6e:	89a3      	ldrh	r3, [r4, #12]
 8012e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e74:	81a3      	strh	r3, [r4, #12]
 8012e76:	e7ad      	b.n	8012dd4 <__sflush_r+0x1c>
 8012e78:	690f      	ldr	r7, [r1, #16]
 8012e7a:	2f00      	cmp	r7, #0
 8012e7c:	d0a9      	beq.n	8012dd2 <__sflush_r+0x1a>
 8012e7e:	0793      	lsls	r3, r2, #30
 8012e80:	680e      	ldr	r6, [r1, #0]
 8012e82:	bf08      	it	eq
 8012e84:	694b      	ldreq	r3, [r1, #20]
 8012e86:	600f      	str	r7, [r1, #0]
 8012e88:	bf18      	it	ne
 8012e8a:	2300      	movne	r3, #0
 8012e8c:	eba6 0807 	sub.w	r8, r6, r7
 8012e90:	608b      	str	r3, [r1, #8]
 8012e92:	f1b8 0f00 	cmp.w	r8, #0
 8012e96:	dd9c      	ble.n	8012dd2 <__sflush_r+0x1a>
 8012e98:	4643      	mov	r3, r8
 8012e9a:	463a      	mov	r2, r7
 8012e9c:	6a21      	ldr	r1, [r4, #32]
 8012e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	47b0      	blx	r6
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	dc06      	bgt.n	8012eb6 <__sflush_r+0xfe>
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eae:	81a3      	strh	r3, [r4, #12]
 8012eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb4:	e78e      	b.n	8012dd4 <__sflush_r+0x1c>
 8012eb6:	4407      	add	r7, r0
 8012eb8:	eba8 0800 	sub.w	r8, r8, r0
 8012ebc:	e7e9      	b.n	8012e92 <__sflush_r+0xda>
 8012ebe:	bf00      	nop
 8012ec0:	20400001 	.word	0x20400001

08012ec4 <_fflush_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	690b      	ldr	r3, [r1, #16]
 8012ec8:	4605      	mov	r5, r0
 8012eca:	460c      	mov	r4, r1
 8012ecc:	b1db      	cbz	r3, 8012f06 <_fflush_r+0x42>
 8012ece:	b118      	cbz	r0, 8012ed8 <_fflush_r+0x14>
 8012ed0:	6983      	ldr	r3, [r0, #24]
 8012ed2:	b90b      	cbnz	r3, 8012ed8 <_fflush_r+0x14>
 8012ed4:	f000 f860 	bl	8012f98 <__sinit>
 8012ed8:	4b0c      	ldr	r3, [pc, #48]	; (8012f0c <_fflush_r+0x48>)
 8012eda:	429c      	cmp	r4, r3
 8012edc:	d109      	bne.n	8012ef2 <_fflush_r+0x2e>
 8012ede:	686c      	ldr	r4, [r5, #4]
 8012ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ee4:	b17b      	cbz	r3, 8012f06 <_fflush_r+0x42>
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	4628      	mov	r0, r5
 8012eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eee:	f7ff bf63 	b.w	8012db8 <__sflush_r>
 8012ef2:	4b07      	ldr	r3, [pc, #28]	; (8012f10 <_fflush_r+0x4c>)
 8012ef4:	429c      	cmp	r4, r3
 8012ef6:	d101      	bne.n	8012efc <_fflush_r+0x38>
 8012ef8:	68ac      	ldr	r4, [r5, #8]
 8012efa:	e7f1      	b.n	8012ee0 <_fflush_r+0x1c>
 8012efc:	4b05      	ldr	r3, [pc, #20]	; (8012f14 <_fflush_r+0x50>)
 8012efe:	429c      	cmp	r4, r3
 8012f00:	bf08      	it	eq
 8012f02:	68ec      	ldreq	r4, [r5, #12]
 8012f04:	e7ec      	b.n	8012ee0 <_fflush_r+0x1c>
 8012f06:	2000      	movs	r0, #0
 8012f08:	bd38      	pop	{r3, r4, r5, pc}
 8012f0a:	bf00      	nop
 8012f0c:	08014f98 	.word	0x08014f98
 8012f10:	08014fb8 	.word	0x08014fb8
 8012f14:	08014f78 	.word	0x08014f78

08012f18 <std>:
 8012f18:	2300      	movs	r3, #0
 8012f1a:	b510      	push	{r4, lr}
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8012f22:	6083      	str	r3, [r0, #8]
 8012f24:	8181      	strh	r1, [r0, #12]
 8012f26:	6643      	str	r3, [r0, #100]	; 0x64
 8012f28:	81c2      	strh	r2, [r0, #14]
 8012f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f2e:	6183      	str	r3, [r0, #24]
 8012f30:	4619      	mov	r1, r3
 8012f32:	2208      	movs	r2, #8
 8012f34:	305c      	adds	r0, #92	; 0x5c
 8012f36:	f7ff fc89 	bl	801284c <memset>
 8012f3a:	4b05      	ldr	r3, [pc, #20]	; (8012f50 <std+0x38>)
 8012f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8012f3e:	4b05      	ldr	r3, [pc, #20]	; (8012f54 <std+0x3c>)
 8012f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f42:	4b05      	ldr	r3, [pc, #20]	; (8012f58 <std+0x40>)
 8012f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f46:	4b05      	ldr	r3, [pc, #20]	; (8012f5c <std+0x44>)
 8012f48:	6224      	str	r4, [r4, #32]
 8012f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8012f4c:	bd10      	pop	{r4, pc}
 8012f4e:	bf00      	nop
 8012f50:	08013b55 	.word	0x08013b55
 8012f54:	08013b77 	.word	0x08013b77
 8012f58:	08013baf 	.word	0x08013baf
 8012f5c:	08013bd3 	.word	0x08013bd3

08012f60 <_cleanup_r>:
 8012f60:	4901      	ldr	r1, [pc, #4]	; (8012f68 <_cleanup_r+0x8>)
 8012f62:	f000 b885 	b.w	8013070 <_fwalk_reent>
 8012f66:	bf00      	nop
 8012f68:	08012ec5 	.word	0x08012ec5

08012f6c <__sfmoreglue>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	1e4a      	subs	r2, r1, #1
 8012f70:	2568      	movs	r5, #104	; 0x68
 8012f72:	4355      	muls	r5, r2
 8012f74:	460e      	mov	r6, r1
 8012f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f7a:	f000 f967 	bl	801324c <_malloc_r>
 8012f7e:	4604      	mov	r4, r0
 8012f80:	b140      	cbz	r0, 8012f94 <__sfmoreglue+0x28>
 8012f82:	2100      	movs	r1, #0
 8012f84:	e9c0 1600 	strd	r1, r6, [r0]
 8012f88:	300c      	adds	r0, #12
 8012f8a:	60a0      	str	r0, [r4, #8]
 8012f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f90:	f7ff fc5c 	bl	801284c <memset>
 8012f94:	4620      	mov	r0, r4
 8012f96:	bd70      	pop	{r4, r5, r6, pc}

08012f98 <__sinit>:
 8012f98:	6983      	ldr	r3, [r0, #24]
 8012f9a:	b510      	push	{r4, lr}
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	bb33      	cbnz	r3, 8012fee <__sinit+0x56>
 8012fa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012fa4:	6503      	str	r3, [r0, #80]	; 0x50
 8012fa6:	4b12      	ldr	r3, [pc, #72]	; (8012ff0 <__sinit+0x58>)
 8012fa8:	4a12      	ldr	r2, [pc, #72]	; (8012ff4 <__sinit+0x5c>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	6282      	str	r2, [r0, #40]	; 0x28
 8012fae:	4298      	cmp	r0, r3
 8012fb0:	bf04      	itt	eq
 8012fb2:	2301      	moveq	r3, #1
 8012fb4:	6183      	streq	r3, [r0, #24]
 8012fb6:	f000 f81f 	bl	8012ff8 <__sfp>
 8012fba:	6060      	str	r0, [r4, #4]
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f000 f81b 	bl	8012ff8 <__sfp>
 8012fc2:	60a0      	str	r0, [r4, #8]
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f000 f817 	bl	8012ff8 <__sfp>
 8012fca:	2200      	movs	r2, #0
 8012fcc:	60e0      	str	r0, [r4, #12]
 8012fce:	2104      	movs	r1, #4
 8012fd0:	6860      	ldr	r0, [r4, #4]
 8012fd2:	f7ff ffa1 	bl	8012f18 <std>
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	2109      	movs	r1, #9
 8012fda:	68a0      	ldr	r0, [r4, #8]
 8012fdc:	f7ff ff9c 	bl	8012f18 <std>
 8012fe0:	2202      	movs	r2, #2
 8012fe2:	2112      	movs	r1, #18
 8012fe4:	68e0      	ldr	r0, [r4, #12]
 8012fe6:	f7ff ff97 	bl	8012f18 <std>
 8012fea:	2301      	movs	r3, #1
 8012fec:	61a3      	str	r3, [r4, #24]
 8012fee:	bd10      	pop	{r4, pc}
 8012ff0:	08014f74 	.word	0x08014f74
 8012ff4:	08012f61 	.word	0x08012f61

08012ff8 <__sfp>:
 8012ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffa:	4b1b      	ldr	r3, [pc, #108]	; (8013068 <__sfp+0x70>)
 8012ffc:	681e      	ldr	r6, [r3, #0]
 8012ffe:	69b3      	ldr	r3, [r6, #24]
 8013000:	4607      	mov	r7, r0
 8013002:	b913      	cbnz	r3, 801300a <__sfp+0x12>
 8013004:	4630      	mov	r0, r6
 8013006:	f7ff ffc7 	bl	8012f98 <__sinit>
 801300a:	3648      	adds	r6, #72	; 0x48
 801300c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013010:	3b01      	subs	r3, #1
 8013012:	d503      	bpl.n	801301c <__sfp+0x24>
 8013014:	6833      	ldr	r3, [r6, #0]
 8013016:	b133      	cbz	r3, 8013026 <__sfp+0x2e>
 8013018:	6836      	ldr	r6, [r6, #0]
 801301a:	e7f7      	b.n	801300c <__sfp+0x14>
 801301c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013020:	b16d      	cbz	r5, 801303e <__sfp+0x46>
 8013022:	3468      	adds	r4, #104	; 0x68
 8013024:	e7f4      	b.n	8013010 <__sfp+0x18>
 8013026:	2104      	movs	r1, #4
 8013028:	4638      	mov	r0, r7
 801302a:	f7ff ff9f 	bl	8012f6c <__sfmoreglue>
 801302e:	6030      	str	r0, [r6, #0]
 8013030:	2800      	cmp	r0, #0
 8013032:	d1f1      	bne.n	8013018 <__sfp+0x20>
 8013034:	230c      	movs	r3, #12
 8013036:	603b      	str	r3, [r7, #0]
 8013038:	4604      	mov	r4, r0
 801303a:	4620      	mov	r0, r4
 801303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801303e:	4b0b      	ldr	r3, [pc, #44]	; (801306c <__sfp+0x74>)
 8013040:	6665      	str	r5, [r4, #100]	; 0x64
 8013042:	e9c4 5500 	strd	r5, r5, [r4]
 8013046:	60a5      	str	r5, [r4, #8]
 8013048:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801304c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013050:	2208      	movs	r2, #8
 8013052:	4629      	mov	r1, r5
 8013054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013058:	f7ff fbf8 	bl	801284c <memset>
 801305c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013064:	e7e9      	b.n	801303a <__sfp+0x42>
 8013066:	bf00      	nop
 8013068:	08014f74 	.word	0x08014f74
 801306c:	ffff0001 	.word	0xffff0001

08013070 <_fwalk_reent>:
 8013070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013074:	4680      	mov	r8, r0
 8013076:	4689      	mov	r9, r1
 8013078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801307c:	2600      	movs	r6, #0
 801307e:	b914      	cbnz	r4, 8013086 <_fwalk_reent+0x16>
 8013080:	4630      	mov	r0, r6
 8013082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013086:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801308a:	3f01      	subs	r7, #1
 801308c:	d501      	bpl.n	8013092 <_fwalk_reent+0x22>
 801308e:	6824      	ldr	r4, [r4, #0]
 8013090:	e7f5      	b.n	801307e <_fwalk_reent+0xe>
 8013092:	89ab      	ldrh	r3, [r5, #12]
 8013094:	2b01      	cmp	r3, #1
 8013096:	d907      	bls.n	80130a8 <_fwalk_reent+0x38>
 8013098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801309c:	3301      	adds	r3, #1
 801309e:	d003      	beq.n	80130a8 <_fwalk_reent+0x38>
 80130a0:	4629      	mov	r1, r5
 80130a2:	4640      	mov	r0, r8
 80130a4:	47c8      	blx	r9
 80130a6:	4306      	orrs	r6, r0
 80130a8:	3568      	adds	r5, #104	; 0x68
 80130aa:	e7ee      	b.n	801308a <_fwalk_reent+0x1a>

080130ac <__locale_ctype_ptr_l>:
 80130ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80130b0:	4770      	bx	lr

080130b2 <__swhatbuf_r>:
 80130b2:	b570      	push	{r4, r5, r6, lr}
 80130b4:	460e      	mov	r6, r1
 80130b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ba:	2900      	cmp	r1, #0
 80130bc:	b096      	sub	sp, #88	; 0x58
 80130be:	4614      	mov	r4, r2
 80130c0:	461d      	mov	r5, r3
 80130c2:	da07      	bge.n	80130d4 <__swhatbuf_r+0x22>
 80130c4:	2300      	movs	r3, #0
 80130c6:	602b      	str	r3, [r5, #0]
 80130c8:	89b3      	ldrh	r3, [r6, #12]
 80130ca:	061a      	lsls	r2, r3, #24
 80130cc:	d410      	bmi.n	80130f0 <__swhatbuf_r+0x3e>
 80130ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130d2:	e00e      	b.n	80130f2 <__swhatbuf_r+0x40>
 80130d4:	466a      	mov	r2, sp
 80130d6:	f000 fdaf 	bl	8013c38 <_fstat_r>
 80130da:	2800      	cmp	r0, #0
 80130dc:	dbf2      	blt.n	80130c4 <__swhatbuf_r+0x12>
 80130de:	9a01      	ldr	r2, [sp, #4]
 80130e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80130e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80130e8:	425a      	negs	r2, r3
 80130ea:	415a      	adcs	r2, r3
 80130ec:	602a      	str	r2, [r5, #0]
 80130ee:	e7ee      	b.n	80130ce <__swhatbuf_r+0x1c>
 80130f0:	2340      	movs	r3, #64	; 0x40
 80130f2:	2000      	movs	r0, #0
 80130f4:	6023      	str	r3, [r4, #0]
 80130f6:	b016      	add	sp, #88	; 0x58
 80130f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080130fc <__smakebuf_r>:
 80130fc:	898b      	ldrh	r3, [r1, #12]
 80130fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013100:	079d      	lsls	r5, r3, #30
 8013102:	4606      	mov	r6, r0
 8013104:	460c      	mov	r4, r1
 8013106:	d507      	bpl.n	8013118 <__smakebuf_r+0x1c>
 8013108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801310c:	6023      	str	r3, [r4, #0]
 801310e:	6123      	str	r3, [r4, #16]
 8013110:	2301      	movs	r3, #1
 8013112:	6163      	str	r3, [r4, #20]
 8013114:	b002      	add	sp, #8
 8013116:	bd70      	pop	{r4, r5, r6, pc}
 8013118:	ab01      	add	r3, sp, #4
 801311a:	466a      	mov	r2, sp
 801311c:	f7ff ffc9 	bl	80130b2 <__swhatbuf_r>
 8013120:	9900      	ldr	r1, [sp, #0]
 8013122:	4605      	mov	r5, r0
 8013124:	4630      	mov	r0, r6
 8013126:	f000 f891 	bl	801324c <_malloc_r>
 801312a:	b948      	cbnz	r0, 8013140 <__smakebuf_r+0x44>
 801312c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013130:	059a      	lsls	r2, r3, #22
 8013132:	d4ef      	bmi.n	8013114 <__smakebuf_r+0x18>
 8013134:	f023 0303 	bic.w	r3, r3, #3
 8013138:	f043 0302 	orr.w	r3, r3, #2
 801313c:	81a3      	strh	r3, [r4, #12]
 801313e:	e7e3      	b.n	8013108 <__smakebuf_r+0xc>
 8013140:	4b0d      	ldr	r3, [pc, #52]	; (8013178 <__smakebuf_r+0x7c>)
 8013142:	62b3      	str	r3, [r6, #40]	; 0x28
 8013144:	89a3      	ldrh	r3, [r4, #12]
 8013146:	6020      	str	r0, [r4, #0]
 8013148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801314c:	81a3      	strh	r3, [r4, #12]
 801314e:	9b00      	ldr	r3, [sp, #0]
 8013150:	6163      	str	r3, [r4, #20]
 8013152:	9b01      	ldr	r3, [sp, #4]
 8013154:	6120      	str	r0, [r4, #16]
 8013156:	b15b      	cbz	r3, 8013170 <__smakebuf_r+0x74>
 8013158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801315c:	4630      	mov	r0, r6
 801315e:	f000 fd7d 	bl	8013c5c <_isatty_r>
 8013162:	b128      	cbz	r0, 8013170 <__smakebuf_r+0x74>
 8013164:	89a3      	ldrh	r3, [r4, #12]
 8013166:	f023 0303 	bic.w	r3, r3, #3
 801316a:	f043 0301 	orr.w	r3, r3, #1
 801316e:	81a3      	strh	r3, [r4, #12]
 8013170:	89a3      	ldrh	r3, [r4, #12]
 8013172:	431d      	orrs	r5, r3
 8013174:	81a5      	strh	r5, [r4, #12]
 8013176:	e7cd      	b.n	8013114 <__smakebuf_r+0x18>
 8013178:	08012f61 	.word	0x08012f61

0801317c <malloc>:
 801317c:	4b02      	ldr	r3, [pc, #8]	; (8013188 <malloc+0xc>)
 801317e:	4601      	mov	r1, r0
 8013180:	6818      	ldr	r0, [r3, #0]
 8013182:	f000 b863 	b.w	801324c <_malloc_r>
 8013186:	bf00      	nop
 8013188:	20000494 	.word	0x20000494

0801318c <__ascii_mbtowc>:
 801318c:	b082      	sub	sp, #8
 801318e:	b901      	cbnz	r1, 8013192 <__ascii_mbtowc+0x6>
 8013190:	a901      	add	r1, sp, #4
 8013192:	b142      	cbz	r2, 80131a6 <__ascii_mbtowc+0x1a>
 8013194:	b14b      	cbz	r3, 80131aa <__ascii_mbtowc+0x1e>
 8013196:	7813      	ldrb	r3, [r2, #0]
 8013198:	600b      	str	r3, [r1, #0]
 801319a:	7812      	ldrb	r2, [r2, #0]
 801319c:	1c10      	adds	r0, r2, #0
 801319e:	bf18      	it	ne
 80131a0:	2001      	movne	r0, #1
 80131a2:	b002      	add	sp, #8
 80131a4:	4770      	bx	lr
 80131a6:	4610      	mov	r0, r2
 80131a8:	e7fb      	b.n	80131a2 <__ascii_mbtowc+0x16>
 80131aa:	f06f 0001 	mvn.w	r0, #1
 80131ae:	e7f8      	b.n	80131a2 <__ascii_mbtowc+0x16>

080131b0 <_free_r>:
 80131b0:	b538      	push	{r3, r4, r5, lr}
 80131b2:	4605      	mov	r5, r0
 80131b4:	2900      	cmp	r1, #0
 80131b6:	d045      	beq.n	8013244 <_free_r+0x94>
 80131b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131bc:	1f0c      	subs	r4, r1, #4
 80131be:	2b00      	cmp	r3, #0
 80131c0:	bfb8      	it	lt
 80131c2:	18e4      	addlt	r4, r4, r3
 80131c4:	f000 fd85 	bl	8013cd2 <__malloc_lock>
 80131c8:	4a1f      	ldr	r2, [pc, #124]	; (8013248 <_free_r+0x98>)
 80131ca:	6813      	ldr	r3, [r2, #0]
 80131cc:	4610      	mov	r0, r2
 80131ce:	b933      	cbnz	r3, 80131de <_free_r+0x2e>
 80131d0:	6063      	str	r3, [r4, #4]
 80131d2:	6014      	str	r4, [r2, #0]
 80131d4:	4628      	mov	r0, r5
 80131d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131da:	f000 bd7b 	b.w	8013cd4 <__malloc_unlock>
 80131de:	42a3      	cmp	r3, r4
 80131e0:	d90c      	bls.n	80131fc <_free_r+0x4c>
 80131e2:	6821      	ldr	r1, [r4, #0]
 80131e4:	1862      	adds	r2, r4, r1
 80131e6:	4293      	cmp	r3, r2
 80131e8:	bf04      	itt	eq
 80131ea:	681a      	ldreq	r2, [r3, #0]
 80131ec:	685b      	ldreq	r3, [r3, #4]
 80131ee:	6063      	str	r3, [r4, #4]
 80131f0:	bf04      	itt	eq
 80131f2:	1852      	addeq	r2, r2, r1
 80131f4:	6022      	streq	r2, [r4, #0]
 80131f6:	6004      	str	r4, [r0, #0]
 80131f8:	e7ec      	b.n	80131d4 <_free_r+0x24>
 80131fa:	4613      	mov	r3, r2
 80131fc:	685a      	ldr	r2, [r3, #4]
 80131fe:	b10a      	cbz	r2, 8013204 <_free_r+0x54>
 8013200:	42a2      	cmp	r2, r4
 8013202:	d9fa      	bls.n	80131fa <_free_r+0x4a>
 8013204:	6819      	ldr	r1, [r3, #0]
 8013206:	1858      	adds	r0, r3, r1
 8013208:	42a0      	cmp	r0, r4
 801320a:	d10b      	bne.n	8013224 <_free_r+0x74>
 801320c:	6820      	ldr	r0, [r4, #0]
 801320e:	4401      	add	r1, r0
 8013210:	1858      	adds	r0, r3, r1
 8013212:	4282      	cmp	r2, r0
 8013214:	6019      	str	r1, [r3, #0]
 8013216:	d1dd      	bne.n	80131d4 <_free_r+0x24>
 8013218:	6810      	ldr	r0, [r2, #0]
 801321a:	6852      	ldr	r2, [r2, #4]
 801321c:	605a      	str	r2, [r3, #4]
 801321e:	4401      	add	r1, r0
 8013220:	6019      	str	r1, [r3, #0]
 8013222:	e7d7      	b.n	80131d4 <_free_r+0x24>
 8013224:	d902      	bls.n	801322c <_free_r+0x7c>
 8013226:	230c      	movs	r3, #12
 8013228:	602b      	str	r3, [r5, #0]
 801322a:	e7d3      	b.n	80131d4 <_free_r+0x24>
 801322c:	6820      	ldr	r0, [r4, #0]
 801322e:	1821      	adds	r1, r4, r0
 8013230:	428a      	cmp	r2, r1
 8013232:	bf04      	itt	eq
 8013234:	6811      	ldreq	r1, [r2, #0]
 8013236:	6852      	ldreq	r2, [r2, #4]
 8013238:	6062      	str	r2, [r4, #4]
 801323a:	bf04      	itt	eq
 801323c:	1809      	addeq	r1, r1, r0
 801323e:	6021      	streq	r1, [r4, #0]
 8013240:	605c      	str	r4, [r3, #4]
 8013242:	e7c7      	b.n	80131d4 <_free_r+0x24>
 8013244:	bd38      	pop	{r3, r4, r5, pc}
 8013246:	bf00      	nop
 8013248:	20003020 	.word	0x20003020

0801324c <_malloc_r>:
 801324c:	b570      	push	{r4, r5, r6, lr}
 801324e:	1ccd      	adds	r5, r1, #3
 8013250:	f025 0503 	bic.w	r5, r5, #3
 8013254:	3508      	adds	r5, #8
 8013256:	2d0c      	cmp	r5, #12
 8013258:	bf38      	it	cc
 801325a:	250c      	movcc	r5, #12
 801325c:	2d00      	cmp	r5, #0
 801325e:	4606      	mov	r6, r0
 8013260:	db01      	blt.n	8013266 <_malloc_r+0x1a>
 8013262:	42a9      	cmp	r1, r5
 8013264:	d903      	bls.n	801326e <_malloc_r+0x22>
 8013266:	230c      	movs	r3, #12
 8013268:	6033      	str	r3, [r6, #0]
 801326a:	2000      	movs	r0, #0
 801326c:	bd70      	pop	{r4, r5, r6, pc}
 801326e:	f000 fd30 	bl	8013cd2 <__malloc_lock>
 8013272:	4a21      	ldr	r2, [pc, #132]	; (80132f8 <_malloc_r+0xac>)
 8013274:	6814      	ldr	r4, [r2, #0]
 8013276:	4621      	mov	r1, r4
 8013278:	b991      	cbnz	r1, 80132a0 <_malloc_r+0x54>
 801327a:	4c20      	ldr	r4, [pc, #128]	; (80132fc <_malloc_r+0xb0>)
 801327c:	6823      	ldr	r3, [r4, #0]
 801327e:	b91b      	cbnz	r3, 8013288 <_malloc_r+0x3c>
 8013280:	4630      	mov	r0, r6
 8013282:	f000 fc57 	bl	8013b34 <_sbrk_r>
 8013286:	6020      	str	r0, [r4, #0]
 8013288:	4629      	mov	r1, r5
 801328a:	4630      	mov	r0, r6
 801328c:	f000 fc52 	bl	8013b34 <_sbrk_r>
 8013290:	1c43      	adds	r3, r0, #1
 8013292:	d124      	bne.n	80132de <_malloc_r+0x92>
 8013294:	230c      	movs	r3, #12
 8013296:	6033      	str	r3, [r6, #0]
 8013298:	4630      	mov	r0, r6
 801329a:	f000 fd1b 	bl	8013cd4 <__malloc_unlock>
 801329e:	e7e4      	b.n	801326a <_malloc_r+0x1e>
 80132a0:	680b      	ldr	r3, [r1, #0]
 80132a2:	1b5b      	subs	r3, r3, r5
 80132a4:	d418      	bmi.n	80132d8 <_malloc_r+0x8c>
 80132a6:	2b0b      	cmp	r3, #11
 80132a8:	d90f      	bls.n	80132ca <_malloc_r+0x7e>
 80132aa:	600b      	str	r3, [r1, #0]
 80132ac:	50cd      	str	r5, [r1, r3]
 80132ae:	18cc      	adds	r4, r1, r3
 80132b0:	4630      	mov	r0, r6
 80132b2:	f000 fd0f 	bl	8013cd4 <__malloc_unlock>
 80132b6:	f104 000b 	add.w	r0, r4, #11
 80132ba:	1d23      	adds	r3, r4, #4
 80132bc:	f020 0007 	bic.w	r0, r0, #7
 80132c0:	1ac3      	subs	r3, r0, r3
 80132c2:	d0d3      	beq.n	801326c <_malloc_r+0x20>
 80132c4:	425a      	negs	r2, r3
 80132c6:	50e2      	str	r2, [r4, r3]
 80132c8:	e7d0      	b.n	801326c <_malloc_r+0x20>
 80132ca:	428c      	cmp	r4, r1
 80132cc:	684b      	ldr	r3, [r1, #4]
 80132ce:	bf16      	itet	ne
 80132d0:	6063      	strne	r3, [r4, #4]
 80132d2:	6013      	streq	r3, [r2, #0]
 80132d4:	460c      	movne	r4, r1
 80132d6:	e7eb      	b.n	80132b0 <_malloc_r+0x64>
 80132d8:	460c      	mov	r4, r1
 80132da:	6849      	ldr	r1, [r1, #4]
 80132dc:	e7cc      	b.n	8013278 <_malloc_r+0x2c>
 80132de:	1cc4      	adds	r4, r0, #3
 80132e0:	f024 0403 	bic.w	r4, r4, #3
 80132e4:	42a0      	cmp	r0, r4
 80132e6:	d005      	beq.n	80132f4 <_malloc_r+0xa8>
 80132e8:	1a21      	subs	r1, r4, r0
 80132ea:	4630      	mov	r0, r6
 80132ec:	f000 fc22 	bl	8013b34 <_sbrk_r>
 80132f0:	3001      	adds	r0, #1
 80132f2:	d0cf      	beq.n	8013294 <_malloc_r+0x48>
 80132f4:	6025      	str	r5, [r4, #0]
 80132f6:	e7db      	b.n	80132b0 <_malloc_r+0x64>
 80132f8:	20003020 	.word	0x20003020
 80132fc:	20003024 	.word	0x20003024

08013300 <__ssputs_r>:
 8013300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013304:	688e      	ldr	r6, [r1, #8]
 8013306:	429e      	cmp	r6, r3
 8013308:	4682      	mov	sl, r0
 801330a:	460c      	mov	r4, r1
 801330c:	4690      	mov	r8, r2
 801330e:	4699      	mov	r9, r3
 8013310:	d837      	bhi.n	8013382 <__ssputs_r+0x82>
 8013312:	898a      	ldrh	r2, [r1, #12]
 8013314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013318:	d031      	beq.n	801337e <__ssputs_r+0x7e>
 801331a:	6825      	ldr	r5, [r4, #0]
 801331c:	6909      	ldr	r1, [r1, #16]
 801331e:	1a6f      	subs	r7, r5, r1
 8013320:	6965      	ldr	r5, [r4, #20]
 8013322:	2302      	movs	r3, #2
 8013324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013328:	fb95 f5f3 	sdiv	r5, r5, r3
 801332c:	f109 0301 	add.w	r3, r9, #1
 8013330:	443b      	add	r3, r7
 8013332:	429d      	cmp	r5, r3
 8013334:	bf38      	it	cc
 8013336:	461d      	movcc	r5, r3
 8013338:	0553      	lsls	r3, r2, #21
 801333a:	d530      	bpl.n	801339e <__ssputs_r+0x9e>
 801333c:	4629      	mov	r1, r5
 801333e:	f7ff ff85 	bl	801324c <_malloc_r>
 8013342:	4606      	mov	r6, r0
 8013344:	b950      	cbnz	r0, 801335c <__ssputs_r+0x5c>
 8013346:	230c      	movs	r3, #12
 8013348:	f8ca 3000 	str.w	r3, [sl]
 801334c:	89a3      	ldrh	r3, [r4, #12]
 801334e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013352:	81a3      	strh	r3, [r4, #12]
 8013354:	f04f 30ff 	mov.w	r0, #4294967295
 8013358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801335c:	463a      	mov	r2, r7
 801335e:	6921      	ldr	r1, [r4, #16]
 8013360:	f7ff fa69 	bl	8012836 <memcpy>
 8013364:	89a3      	ldrh	r3, [r4, #12]
 8013366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801336a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801336e:	81a3      	strh	r3, [r4, #12]
 8013370:	6126      	str	r6, [r4, #16]
 8013372:	6165      	str	r5, [r4, #20]
 8013374:	443e      	add	r6, r7
 8013376:	1bed      	subs	r5, r5, r7
 8013378:	6026      	str	r6, [r4, #0]
 801337a:	60a5      	str	r5, [r4, #8]
 801337c:	464e      	mov	r6, r9
 801337e:	454e      	cmp	r6, r9
 8013380:	d900      	bls.n	8013384 <__ssputs_r+0x84>
 8013382:	464e      	mov	r6, r9
 8013384:	4632      	mov	r2, r6
 8013386:	4641      	mov	r1, r8
 8013388:	6820      	ldr	r0, [r4, #0]
 801338a:	f000 fc89 	bl	8013ca0 <memmove>
 801338e:	68a3      	ldr	r3, [r4, #8]
 8013390:	1b9b      	subs	r3, r3, r6
 8013392:	60a3      	str	r3, [r4, #8]
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	441e      	add	r6, r3
 8013398:	6026      	str	r6, [r4, #0]
 801339a:	2000      	movs	r0, #0
 801339c:	e7dc      	b.n	8013358 <__ssputs_r+0x58>
 801339e:	462a      	mov	r2, r5
 80133a0:	f000 fc99 	bl	8013cd6 <_realloc_r>
 80133a4:	4606      	mov	r6, r0
 80133a6:	2800      	cmp	r0, #0
 80133a8:	d1e2      	bne.n	8013370 <__ssputs_r+0x70>
 80133aa:	6921      	ldr	r1, [r4, #16]
 80133ac:	4650      	mov	r0, sl
 80133ae:	f7ff feff 	bl	80131b0 <_free_r>
 80133b2:	e7c8      	b.n	8013346 <__ssputs_r+0x46>

080133b4 <_svfiprintf_r>:
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b8:	461d      	mov	r5, r3
 80133ba:	898b      	ldrh	r3, [r1, #12]
 80133bc:	061f      	lsls	r7, r3, #24
 80133be:	b09d      	sub	sp, #116	; 0x74
 80133c0:	4680      	mov	r8, r0
 80133c2:	460c      	mov	r4, r1
 80133c4:	4616      	mov	r6, r2
 80133c6:	d50f      	bpl.n	80133e8 <_svfiprintf_r+0x34>
 80133c8:	690b      	ldr	r3, [r1, #16]
 80133ca:	b96b      	cbnz	r3, 80133e8 <_svfiprintf_r+0x34>
 80133cc:	2140      	movs	r1, #64	; 0x40
 80133ce:	f7ff ff3d 	bl	801324c <_malloc_r>
 80133d2:	6020      	str	r0, [r4, #0]
 80133d4:	6120      	str	r0, [r4, #16]
 80133d6:	b928      	cbnz	r0, 80133e4 <_svfiprintf_r+0x30>
 80133d8:	230c      	movs	r3, #12
 80133da:	f8c8 3000 	str.w	r3, [r8]
 80133de:	f04f 30ff 	mov.w	r0, #4294967295
 80133e2:	e0c8      	b.n	8013576 <_svfiprintf_r+0x1c2>
 80133e4:	2340      	movs	r3, #64	; 0x40
 80133e6:	6163      	str	r3, [r4, #20]
 80133e8:	2300      	movs	r3, #0
 80133ea:	9309      	str	r3, [sp, #36]	; 0x24
 80133ec:	2320      	movs	r3, #32
 80133ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80133f2:	2330      	movs	r3, #48	; 0x30
 80133f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80133f8:	9503      	str	r5, [sp, #12]
 80133fa:	f04f 0b01 	mov.w	fp, #1
 80133fe:	4637      	mov	r7, r6
 8013400:	463d      	mov	r5, r7
 8013402:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013406:	b10b      	cbz	r3, 801340c <_svfiprintf_r+0x58>
 8013408:	2b25      	cmp	r3, #37	; 0x25
 801340a:	d13e      	bne.n	801348a <_svfiprintf_r+0xd6>
 801340c:	ebb7 0a06 	subs.w	sl, r7, r6
 8013410:	d00b      	beq.n	801342a <_svfiprintf_r+0x76>
 8013412:	4653      	mov	r3, sl
 8013414:	4632      	mov	r2, r6
 8013416:	4621      	mov	r1, r4
 8013418:	4640      	mov	r0, r8
 801341a:	f7ff ff71 	bl	8013300 <__ssputs_r>
 801341e:	3001      	adds	r0, #1
 8013420:	f000 80a4 	beq.w	801356c <_svfiprintf_r+0x1b8>
 8013424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013426:	4453      	add	r3, sl
 8013428:	9309      	str	r3, [sp, #36]	; 0x24
 801342a:	783b      	ldrb	r3, [r7, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	f000 809d 	beq.w	801356c <_svfiprintf_r+0x1b8>
 8013432:	2300      	movs	r3, #0
 8013434:	f04f 32ff 	mov.w	r2, #4294967295
 8013438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801343c:	9304      	str	r3, [sp, #16]
 801343e:	9307      	str	r3, [sp, #28]
 8013440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013444:	931a      	str	r3, [sp, #104]	; 0x68
 8013446:	462f      	mov	r7, r5
 8013448:	2205      	movs	r2, #5
 801344a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801344e:	4850      	ldr	r0, [pc, #320]	; (8013590 <_svfiprintf_r+0x1dc>)
 8013450:	f7ec fec6 	bl	80001e0 <memchr>
 8013454:	9b04      	ldr	r3, [sp, #16]
 8013456:	b9d0      	cbnz	r0, 801348e <_svfiprintf_r+0xda>
 8013458:	06d9      	lsls	r1, r3, #27
 801345a:	bf44      	itt	mi
 801345c:	2220      	movmi	r2, #32
 801345e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013462:	071a      	lsls	r2, r3, #28
 8013464:	bf44      	itt	mi
 8013466:	222b      	movmi	r2, #43	; 0x2b
 8013468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801346c:	782a      	ldrb	r2, [r5, #0]
 801346e:	2a2a      	cmp	r2, #42	; 0x2a
 8013470:	d015      	beq.n	801349e <_svfiprintf_r+0xea>
 8013472:	9a07      	ldr	r2, [sp, #28]
 8013474:	462f      	mov	r7, r5
 8013476:	2000      	movs	r0, #0
 8013478:	250a      	movs	r5, #10
 801347a:	4639      	mov	r1, r7
 801347c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013480:	3b30      	subs	r3, #48	; 0x30
 8013482:	2b09      	cmp	r3, #9
 8013484:	d94d      	bls.n	8013522 <_svfiprintf_r+0x16e>
 8013486:	b1b8      	cbz	r0, 80134b8 <_svfiprintf_r+0x104>
 8013488:	e00f      	b.n	80134aa <_svfiprintf_r+0xf6>
 801348a:	462f      	mov	r7, r5
 801348c:	e7b8      	b.n	8013400 <_svfiprintf_r+0x4c>
 801348e:	4a40      	ldr	r2, [pc, #256]	; (8013590 <_svfiprintf_r+0x1dc>)
 8013490:	1a80      	subs	r0, r0, r2
 8013492:	fa0b f000 	lsl.w	r0, fp, r0
 8013496:	4318      	orrs	r0, r3
 8013498:	9004      	str	r0, [sp, #16]
 801349a:	463d      	mov	r5, r7
 801349c:	e7d3      	b.n	8013446 <_svfiprintf_r+0x92>
 801349e:	9a03      	ldr	r2, [sp, #12]
 80134a0:	1d11      	adds	r1, r2, #4
 80134a2:	6812      	ldr	r2, [r2, #0]
 80134a4:	9103      	str	r1, [sp, #12]
 80134a6:	2a00      	cmp	r2, #0
 80134a8:	db01      	blt.n	80134ae <_svfiprintf_r+0xfa>
 80134aa:	9207      	str	r2, [sp, #28]
 80134ac:	e004      	b.n	80134b8 <_svfiprintf_r+0x104>
 80134ae:	4252      	negs	r2, r2
 80134b0:	f043 0302 	orr.w	r3, r3, #2
 80134b4:	9207      	str	r2, [sp, #28]
 80134b6:	9304      	str	r3, [sp, #16]
 80134b8:	783b      	ldrb	r3, [r7, #0]
 80134ba:	2b2e      	cmp	r3, #46	; 0x2e
 80134bc:	d10c      	bne.n	80134d8 <_svfiprintf_r+0x124>
 80134be:	787b      	ldrb	r3, [r7, #1]
 80134c0:	2b2a      	cmp	r3, #42	; 0x2a
 80134c2:	d133      	bne.n	801352c <_svfiprintf_r+0x178>
 80134c4:	9b03      	ldr	r3, [sp, #12]
 80134c6:	1d1a      	adds	r2, r3, #4
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	9203      	str	r2, [sp, #12]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	bfb8      	it	lt
 80134d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80134d4:	3702      	adds	r7, #2
 80134d6:	9305      	str	r3, [sp, #20]
 80134d8:	4d2e      	ldr	r5, [pc, #184]	; (8013594 <_svfiprintf_r+0x1e0>)
 80134da:	7839      	ldrb	r1, [r7, #0]
 80134dc:	2203      	movs	r2, #3
 80134de:	4628      	mov	r0, r5
 80134e0:	f7ec fe7e 	bl	80001e0 <memchr>
 80134e4:	b138      	cbz	r0, 80134f6 <_svfiprintf_r+0x142>
 80134e6:	2340      	movs	r3, #64	; 0x40
 80134e8:	1b40      	subs	r0, r0, r5
 80134ea:	fa03 f000 	lsl.w	r0, r3, r0
 80134ee:	9b04      	ldr	r3, [sp, #16]
 80134f0:	4303      	orrs	r3, r0
 80134f2:	3701      	adds	r7, #1
 80134f4:	9304      	str	r3, [sp, #16]
 80134f6:	7839      	ldrb	r1, [r7, #0]
 80134f8:	4827      	ldr	r0, [pc, #156]	; (8013598 <_svfiprintf_r+0x1e4>)
 80134fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80134fe:	2206      	movs	r2, #6
 8013500:	1c7e      	adds	r6, r7, #1
 8013502:	f7ec fe6d 	bl	80001e0 <memchr>
 8013506:	2800      	cmp	r0, #0
 8013508:	d038      	beq.n	801357c <_svfiprintf_r+0x1c8>
 801350a:	4b24      	ldr	r3, [pc, #144]	; (801359c <_svfiprintf_r+0x1e8>)
 801350c:	bb13      	cbnz	r3, 8013554 <_svfiprintf_r+0x1a0>
 801350e:	9b03      	ldr	r3, [sp, #12]
 8013510:	3307      	adds	r3, #7
 8013512:	f023 0307 	bic.w	r3, r3, #7
 8013516:	3308      	adds	r3, #8
 8013518:	9303      	str	r3, [sp, #12]
 801351a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801351c:	444b      	add	r3, r9
 801351e:	9309      	str	r3, [sp, #36]	; 0x24
 8013520:	e76d      	b.n	80133fe <_svfiprintf_r+0x4a>
 8013522:	fb05 3202 	mla	r2, r5, r2, r3
 8013526:	2001      	movs	r0, #1
 8013528:	460f      	mov	r7, r1
 801352a:	e7a6      	b.n	801347a <_svfiprintf_r+0xc6>
 801352c:	2300      	movs	r3, #0
 801352e:	3701      	adds	r7, #1
 8013530:	9305      	str	r3, [sp, #20]
 8013532:	4619      	mov	r1, r3
 8013534:	250a      	movs	r5, #10
 8013536:	4638      	mov	r0, r7
 8013538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801353c:	3a30      	subs	r2, #48	; 0x30
 801353e:	2a09      	cmp	r2, #9
 8013540:	d903      	bls.n	801354a <_svfiprintf_r+0x196>
 8013542:	2b00      	cmp	r3, #0
 8013544:	d0c8      	beq.n	80134d8 <_svfiprintf_r+0x124>
 8013546:	9105      	str	r1, [sp, #20]
 8013548:	e7c6      	b.n	80134d8 <_svfiprintf_r+0x124>
 801354a:	fb05 2101 	mla	r1, r5, r1, r2
 801354e:	2301      	movs	r3, #1
 8013550:	4607      	mov	r7, r0
 8013552:	e7f0      	b.n	8013536 <_svfiprintf_r+0x182>
 8013554:	ab03      	add	r3, sp, #12
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	4622      	mov	r2, r4
 801355a:	4b11      	ldr	r3, [pc, #68]	; (80135a0 <_svfiprintf_r+0x1ec>)
 801355c:	a904      	add	r1, sp, #16
 801355e:	4640      	mov	r0, r8
 8013560:	f3af 8000 	nop.w
 8013564:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013568:	4681      	mov	r9, r0
 801356a:	d1d6      	bne.n	801351a <_svfiprintf_r+0x166>
 801356c:	89a3      	ldrh	r3, [r4, #12]
 801356e:	065b      	lsls	r3, r3, #25
 8013570:	f53f af35 	bmi.w	80133de <_svfiprintf_r+0x2a>
 8013574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013576:	b01d      	add	sp, #116	; 0x74
 8013578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357c:	ab03      	add	r3, sp, #12
 801357e:	9300      	str	r3, [sp, #0]
 8013580:	4622      	mov	r2, r4
 8013582:	4b07      	ldr	r3, [pc, #28]	; (80135a0 <_svfiprintf_r+0x1ec>)
 8013584:	a904      	add	r1, sp, #16
 8013586:	4640      	mov	r0, r8
 8013588:	f000 f9c2 	bl	8013910 <_printf_i>
 801358c:	e7ea      	b.n	8013564 <_svfiprintf_r+0x1b0>
 801358e:	bf00      	nop
 8013590:	08014fe2 	.word	0x08014fe2
 8013594:	08014fe8 	.word	0x08014fe8
 8013598:	08014fec 	.word	0x08014fec
 801359c:	00000000 	.word	0x00000000
 80135a0:	08013301 	.word	0x08013301

080135a4 <__sfputc_r>:
 80135a4:	6893      	ldr	r3, [r2, #8]
 80135a6:	3b01      	subs	r3, #1
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	b410      	push	{r4}
 80135ac:	6093      	str	r3, [r2, #8]
 80135ae:	da08      	bge.n	80135c2 <__sfputc_r+0x1e>
 80135b0:	6994      	ldr	r4, [r2, #24]
 80135b2:	42a3      	cmp	r3, r4
 80135b4:	db01      	blt.n	80135ba <__sfputc_r+0x16>
 80135b6:	290a      	cmp	r1, #10
 80135b8:	d103      	bne.n	80135c2 <__sfputc_r+0x1e>
 80135ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135be:	f7ff bb3b 	b.w	8012c38 <__swbuf_r>
 80135c2:	6813      	ldr	r3, [r2, #0]
 80135c4:	1c58      	adds	r0, r3, #1
 80135c6:	6010      	str	r0, [r2, #0]
 80135c8:	7019      	strb	r1, [r3, #0]
 80135ca:	4608      	mov	r0, r1
 80135cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135d0:	4770      	bx	lr

080135d2 <__sfputs_r>:
 80135d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d4:	4606      	mov	r6, r0
 80135d6:	460f      	mov	r7, r1
 80135d8:	4614      	mov	r4, r2
 80135da:	18d5      	adds	r5, r2, r3
 80135dc:	42ac      	cmp	r4, r5
 80135de:	d101      	bne.n	80135e4 <__sfputs_r+0x12>
 80135e0:	2000      	movs	r0, #0
 80135e2:	e007      	b.n	80135f4 <__sfputs_r+0x22>
 80135e4:	463a      	mov	r2, r7
 80135e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ea:	4630      	mov	r0, r6
 80135ec:	f7ff ffda 	bl	80135a4 <__sfputc_r>
 80135f0:	1c43      	adds	r3, r0, #1
 80135f2:	d1f3      	bne.n	80135dc <__sfputs_r+0xa>
 80135f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135f8 <_vfiprintf_r>:
 80135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135fc:	460c      	mov	r4, r1
 80135fe:	b09d      	sub	sp, #116	; 0x74
 8013600:	4617      	mov	r7, r2
 8013602:	461d      	mov	r5, r3
 8013604:	4606      	mov	r6, r0
 8013606:	b118      	cbz	r0, 8013610 <_vfiprintf_r+0x18>
 8013608:	6983      	ldr	r3, [r0, #24]
 801360a:	b90b      	cbnz	r3, 8013610 <_vfiprintf_r+0x18>
 801360c:	f7ff fcc4 	bl	8012f98 <__sinit>
 8013610:	4b7c      	ldr	r3, [pc, #496]	; (8013804 <_vfiprintf_r+0x20c>)
 8013612:	429c      	cmp	r4, r3
 8013614:	d158      	bne.n	80136c8 <_vfiprintf_r+0xd0>
 8013616:	6874      	ldr	r4, [r6, #4]
 8013618:	89a3      	ldrh	r3, [r4, #12]
 801361a:	0718      	lsls	r0, r3, #28
 801361c:	d55e      	bpl.n	80136dc <_vfiprintf_r+0xe4>
 801361e:	6923      	ldr	r3, [r4, #16]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d05b      	beq.n	80136dc <_vfiprintf_r+0xe4>
 8013624:	2300      	movs	r3, #0
 8013626:	9309      	str	r3, [sp, #36]	; 0x24
 8013628:	2320      	movs	r3, #32
 801362a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801362e:	2330      	movs	r3, #48	; 0x30
 8013630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013634:	9503      	str	r5, [sp, #12]
 8013636:	f04f 0b01 	mov.w	fp, #1
 801363a:	46b8      	mov	r8, r7
 801363c:	4645      	mov	r5, r8
 801363e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013642:	b10b      	cbz	r3, 8013648 <_vfiprintf_r+0x50>
 8013644:	2b25      	cmp	r3, #37	; 0x25
 8013646:	d154      	bne.n	80136f2 <_vfiprintf_r+0xfa>
 8013648:	ebb8 0a07 	subs.w	sl, r8, r7
 801364c:	d00b      	beq.n	8013666 <_vfiprintf_r+0x6e>
 801364e:	4653      	mov	r3, sl
 8013650:	463a      	mov	r2, r7
 8013652:	4621      	mov	r1, r4
 8013654:	4630      	mov	r0, r6
 8013656:	f7ff ffbc 	bl	80135d2 <__sfputs_r>
 801365a:	3001      	adds	r0, #1
 801365c:	f000 80c2 	beq.w	80137e4 <_vfiprintf_r+0x1ec>
 8013660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013662:	4453      	add	r3, sl
 8013664:	9309      	str	r3, [sp, #36]	; 0x24
 8013666:	f898 3000 	ldrb.w	r3, [r8]
 801366a:	2b00      	cmp	r3, #0
 801366c:	f000 80ba 	beq.w	80137e4 <_vfiprintf_r+0x1ec>
 8013670:	2300      	movs	r3, #0
 8013672:	f04f 32ff 	mov.w	r2, #4294967295
 8013676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801367a:	9304      	str	r3, [sp, #16]
 801367c:	9307      	str	r3, [sp, #28]
 801367e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013682:	931a      	str	r3, [sp, #104]	; 0x68
 8013684:	46a8      	mov	r8, r5
 8013686:	2205      	movs	r2, #5
 8013688:	f818 1b01 	ldrb.w	r1, [r8], #1
 801368c:	485e      	ldr	r0, [pc, #376]	; (8013808 <_vfiprintf_r+0x210>)
 801368e:	f7ec fda7 	bl	80001e0 <memchr>
 8013692:	9b04      	ldr	r3, [sp, #16]
 8013694:	bb78      	cbnz	r0, 80136f6 <_vfiprintf_r+0xfe>
 8013696:	06d9      	lsls	r1, r3, #27
 8013698:	bf44      	itt	mi
 801369a:	2220      	movmi	r2, #32
 801369c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80136a0:	071a      	lsls	r2, r3, #28
 80136a2:	bf44      	itt	mi
 80136a4:	222b      	movmi	r2, #43	; 0x2b
 80136a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80136aa:	782a      	ldrb	r2, [r5, #0]
 80136ac:	2a2a      	cmp	r2, #42	; 0x2a
 80136ae:	d02a      	beq.n	8013706 <_vfiprintf_r+0x10e>
 80136b0:	9a07      	ldr	r2, [sp, #28]
 80136b2:	46a8      	mov	r8, r5
 80136b4:	2000      	movs	r0, #0
 80136b6:	250a      	movs	r5, #10
 80136b8:	4641      	mov	r1, r8
 80136ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136be:	3b30      	subs	r3, #48	; 0x30
 80136c0:	2b09      	cmp	r3, #9
 80136c2:	d969      	bls.n	8013798 <_vfiprintf_r+0x1a0>
 80136c4:	b360      	cbz	r0, 8013720 <_vfiprintf_r+0x128>
 80136c6:	e024      	b.n	8013712 <_vfiprintf_r+0x11a>
 80136c8:	4b50      	ldr	r3, [pc, #320]	; (801380c <_vfiprintf_r+0x214>)
 80136ca:	429c      	cmp	r4, r3
 80136cc:	d101      	bne.n	80136d2 <_vfiprintf_r+0xda>
 80136ce:	68b4      	ldr	r4, [r6, #8]
 80136d0:	e7a2      	b.n	8013618 <_vfiprintf_r+0x20>
 80136d2:	4b4f      	ldr	r3, [pc, #316]	; (8013810 <_vfiprintf_r+0x218>)
 80136d4:	429c      	cmp	r4, r3
 80136d6:	bf08      	it	eq
 80136d8:	68f4      	ldreq	r4, [r6, #12]
 80136da:	e79d      	b.n	8013618 <_vfiprintf_r+0x20>
 80136dc:	4621      	mov	r1, r4
 80136de:	4630      	mov	r0, r6
 80136e0:	f7ff fafc 	bl	8012cdc <__swsetup_r>
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d09d      	beq.n	8013624 <_vfiprintf_r+0x2c>
 80136e8:	f04f 30ff 	mov.w	r0, #4294967295
 80136ec:	b01d      	add	sp, #116	; 0x74
 80136ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f2:	46a8      	mov	r8, r5
 80136f4:	e7a2      	b.n	801363c <_vfiprintf_r+0x44>
 80136f6:	4a44      	ldr	r2, [pc, #272]	; (8013808 <_vfiprintf_r+0x210>)
 80136f8:	1a80      	subs	r0, r0, r2
 80136fa:	fa0b f000 	lsl.w	r0, fp, r0
 80136fe:	4318      	orrs	r0, r3
 8013700:	9004      	str	r0, [sp, #16]
 8013702:	4645      	mov	r5, r8
 8013704:	e7be      	b.n	8013684 <_vfiprintf_r+0x8c>
 8013706:	9a03      	ldr	r2, [sp, #12]
 8013708:	1d11      	adds	r1, r2, #4
 801370a:	6812      	ldr	r2, [r2, #0]
 801370c:	9103      	str	r1, [sp, #12]
 801370e:	2a00      	cmp	r2, #0
 8013710:	db01      	blt.n	8013716 <_vfiprintf_r+0x11e>
 8013712:	9207      	str	r2, [sp, #28]
 8013714:	e004      	b.n	8013720 <_vfiprintf_r+0x128>
 8013716:	4252      	negs	r2, r2
 8013718:	f043 0302 	orr.w	r3, r3, #2
 801371c:	9207      	str	r2, [sp, #28]
 801371e:	9304      	str	r3, [sp, #16]
 8013720:	f898 3000 	ldrb.w	r3, [r8]
 8013724:	2b2e      	cmp	r3, #46	; 0x2e
 8013726:	d10e      	bne.n	8013746 <_vfiprintf_r+0x14e>
 8013728:	f898 3001 	ldrb.w	r3, [r8, #1]
 801372c:	2b2a      	cmp	r3, #42	; 0x2a
 801372e:	d138      	bne.n	80137a2 <_vfiprintf_r+0x1aa>
 8013730:	9b03      	ldr	r3, [sp, #12]
 8013732:	1d1a      	adds	r2, r3, #4
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	9203      	str	r2, [sp, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	bfb8      	it	lt
 801373c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013740:	f108 0802 	add.w	r8, r8, #2
 8013744:	9305      	str	r3, [sp, #20]
 8013746:	4d33      	ldr	r5, [pc, #204]	; (8013814 <_vfiprintf_r+0x21c>)
 8013748:	f898 1000 	ldrb.w	r1, [r8]
 801374c:	2203      	movs	r2, #3
 801374e:	4628      	mov	r0, r5
 8013750:	f7ec fd46 	bl	80001e0 <memchr>
 8013754:	b140      	cbz	r0, 8013768 <_vfiprintf_r+0x170>
 8013756:	2340      	movs	r3, #64	; 0x40
 8013758:	1b40      	subs	r0, r0, r5
 801375a:	fa03 f000 	lsl.w	r0, r3, r0
 801375e:	9b04      	ldr	r3, [sp, #16]
 8013760:	4303      	orrs	r3, r0
 8013762:	f108 0801 	add.w	r8, r8, #1
 8013766:	9304      	str	r3, [sp, #16]
 8013768:	f898 1000 	ldrb.w	r1, [r8]
 801376c:	482a      	ldr	r0, [pc, #168]	; (8013818 <_vfiprintf_r+0x220>)
 801376e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013772:	2206      	movs	r2, #6
 8013774:	f108 0701 	add.w	r7, r8, #1
 8013778:	f7ec fd32 	bl	80001e0 <memchr>
 801377c:	2800      	cmp	r0, #0
 801377e:	d037      	beq.n	80137f0 <_vfiprintf_r+0x1f8>
 8013780:	4b26      	ldr	r3, [pc, #152]	; (801381c <_vfiprintf_r+0x224>)
 8013782:	bb1b      	cbnz	r3, 80137cc <_vfiprintf_r+0x1d4>
 8013784:	9b03      	ldr	r3, [sp, #12]
 8013786:	3307      	adds	r3, #7
 8013788:	f023 0307 	bic.w	r3, r3, #7
 801378c:	3308      	adds	r3, #8
 801378e:	9303      	str	r3, [sp, #12]
 8013790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013792:	444b      	add	r3, r9
 8013794:	9309      	str	r3, [sp, #36]	; 0x24
 8013796:	e750      	b.n	801363a <_vfiprintf_r+0x42>
 8013798:	fb05 3202 	mla	r2, r5, r2, r3
 801379c:	2001      	movs	r0, #1
 801379e:	4688      	mov	r8, r1
 80137a0:	e78a      	b.n	80136b8 <_vfiprintf_r+0xc0>
 80137a2:	2300      	movs	r3, #0
 80137a4:	f108 0801 	add.w	r8, r8, #1
 80137a8:	9305      	str	r3, [sp, #20]
 80137aa:	4619      	mov	r1, r3
 80137ac:	250a      	movs	r5, #10
 80137ae:	4640      	mov	r0, r8
 80137b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137b4:	3a30      	subs	r2, #48	; 0x30
 80137b6:	2a09      	cmp	r2, #9
 80137b8:	d903      	bls.n	80137c2 <_vfiprintf_r+0x1ca>
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d0c3      	beq.n	8013746 <_vfiprintf_r+0x14e>
 80137be:	9105      	str	r1, [sp, #20]
 80137c0:	e7c1      	b.n	8013746 <_vfiprintf_r+0x14e>
 80137c2:	fb05 2101 	mla	r1, r5, r1, r2
 80137c6:	2301      	movs	r3, #1
 80137c8:	4680      	mov	r8, r0
 80137ca:	e7f0      	b.n	80137ae <_vfiprintf_r+0x1b6>
 80137cc:	ab03      	add	r3, sp, #12
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	4622      	mov	r2, r4
 80137d2:	4b13      	ldr	r3, [pc, #76]	; (8013820 <_vfiprintf_r+0x228>)
 80137d4:	a904      	add	r1, sp, #16
 80137d6:	4630      	mov	r0, r6
 80137d8:	f3af 8000 	nop.w
 80137dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80137e0:	4681      	mov	r9, r0
 80137e2:	d1d5      	bne.n	8013790 <_vfiprintf_r+0x198>
 80137e4:	89a3      	ldrh	r3, [r4, #12]
 80137e6:	065b      	lsls	r3, r3, #25
 80137e8:	f53f af7e 	bmi.w	80136e8 <_vfiprintf_r+0xf0>
 80137ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137ee:	e77d      	b.n	80136ec <_vfiprintf_r+0xf4>
 80137f0:	ab03      	add	r3, sp, #12
 80137f2:	9300      	str	r3, [sp, #0]
 80137f4:	4622      	mov	r2, r4
 80137f6:	4b0a      	ldr	r3, [pc, #40]	; (8013820 <_vfiprintf_r+0x228>)
 80137f8:	a904      	add	r1, sp, #16
 80137fa:	4630      	mov	r0, r6
 80137fc:	f000 f888 	bl	8013910 <_printf_i>
 8013800:	e7ec      	b.n	80137dc <_vfiprintf_r+0x1e4>
 8013802:	bf00      	nop
 8013804:	08014f98 	.word	0x08014f98
 8013808:	08014fe2 	.word	0x08014fe2
 801380c:	08014fb8 	.word	0x08014fb8
 8013810:	08014f78 	.word	0x08014f78
 8013814:	08014fe8 	.word	0x08014fe8
 8013818:	08014fec 	.word	0x08014fec
 801381c:	00000000 	.word	0x00000000
 8013820:	080135d3 	.word	0x080135d3

08013824 <_printf_common>:
 8013824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013828:	4691      	mov	r9, r2
 801382a:	461f      	mov	r7, r3
 801382c:	688a      	ldr	r2, [r1, #8]
 801382e:	690b      	ldr	r3, [r1, #16]
 8013830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013834:	4293      	cmp	r3, r2
 8013836:	bfb8      	it	lt
 8013838:	4613      	movlt	r3, r2
 801383a:	f8c9 3000 	str.w	r3, [r9]
 801383e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013842:	4606      	mov	r6, r0
 8013844:	460c      	mov	r4, r1
 8013846:	b112      	cbz	r2, 801384e <_printf_common+0x2a>
 8013848:	3301      	adds	r3, #1
 801384a:	f8c9 3000 	str.w	r3, [r9]
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	0699      	lsls	r1, r3, #26
 8013852:	bf42      	ittt	mi
 8013854:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013858:	3302      	addmi	r3, #2
 801385a:	f8c9 3000 	strmi.w	r3, [r9]
 801385e:	6825      	ldr	r5, [r4, #0]
 8013860:	f015 0506 	ands.w	r5, r5, #6
 8013864:	d107      	bne.n	8013876 <_printf_common+0x52>
 8013866:	f104 0a19 	add.w	sl, r4, #25
 801386a:	68e3      	ldr	r3, [r4, #12]
 801386c:	f8d9 2000 	ldr.w	r2, [r9]
 8013870:	1a9b      	subs	r3, r3, r2
 8013872:	42ab      	cmp	r3, r5
 8013874:	dc28      	bgt.n	80138c8 <_printf_common+0xa4>
 8013876:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801387a:	6822      	ldr	r2, [r4, #0]
 801387c:	3300      	adds	r3, #0
 801387e:	bf18      	it	ne
 8013880:	2301      	movne	r3, #1
 8013882:	0692      	lsls	r2, r2, #26
 8013884:	d42d      	bmi.n	80138e2 <_printf_common+0xbe>
 8013886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801388a:	4639      	mov	r1, r7
 801388c:	4630      	mov	r0, r6
 801388e:	47c0      	blx	r8
 8013890:	3001      	adds	r0, #1
 8013892:	d020      	beq.n	80138d6 <_printf_common+0xb2>
 8013894:	6823      	ldr	r3, [r4, #0]
 8013896:	68e5      	ldr	r5, [r4, #12]
 8013898:	f8d9 2000 	ldr.w	r2, [r9]
 801389c:	f003 0306 	and.w	r3, r3, #6
 80138a0:	2b04      	cmp	r3, #4
 80138a2:	bf08      	it	eq
 80138a4:	1aad      	subeq	r5, r5, r2
 80138a6:	68a3      	ldr	r3, [r4, #8]
 80138a8:	6922      	ldr	r2, [r4, #16]
 80138aa:	bf0c      	ite	eq
 80138ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138b0:	2500      	movne	r5, #0
 80138b2:	4293      	cmp	r3, r2
 80138b4:	bfc4      	itt	gt
 80138b6:	1a9b      	subgt	r3, r3, r2
 80138b8:	18ed      	addgt	r5, r5, r3
 80138ba:	f04f 0900 	mov.w	r9, #0
 80138be:	341a      	adds	r4, #26
 80138c0:	454d      	cmp	r5, r9
 80138c2:	d11a      	bne.n	80138fa <_printf_common+0xd6>
 80138c4:	2000      	movs	r0, #0
 80138c6:	e008      	b.n	80138da <_printf_common+0xb6>
 80138c8:	2301      	movs	r3, #1
 80138ca:	4652      	mov	r2, sl
 80138cc:	4639      	mov	r1, r7
 80138ce:	4630      	mov	r0, r6
 80138d0:	47c0      	blx	r8
 80138d2:	3001      	adds	r0, #1
 80138d4:	d103      	bne.n	80138de <_printf_common+0xba>
 80138d6:	f04f 30ff 	mov.w	r0, #4294967295
 80138da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138de:	3501      	adds	r5, #1
 80138e0:	e7c3      	b.n	801386a <_printf_common+0x46>
 80138e2:	18e1      	adds	r1, r4, r3
 80138e4:	1c5a      	adds	r2, r3, #1
 80138e6:	2030      	movs	r0, #48	; 0x30
 80138e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138ec:	4422      	add	r2, r4
 80138ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138f6:	3302      	adds	r3, #2
 80138f8:	e7c5      	b.n	8013886 <_printf_common+0x62>
 80138fa:	2301      	movs	r3, #1
 80138fc:	4622      	mov	r2, r4
 80138fe:	4639      	mov	r1, r7
 8013900:	4630      	mov	r0, r6
 8013902:	47c0      	blx	r8
 8013904:	3001      	adds	r0, #1
 8013906:	d0e6      	beq.n	80138d6 <_printf_common+0xb2>
 8013908:	f109 0901 	add.w	r9, r9, #1
 801390c:	e7d8      	b.n	80138c0 <_printf_common+0x9c>
	...

08013910 <_printf_i>:
 8013910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013914:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013918:	460c      	mov	r4, r1
 801391a:	7e09      	ldrb	r1, [r1, #24]
 801391c:	b085      	sub	sp, #20
 801391e:	296e      	cmp	r1, #110	; 0x6e
 8013920:	4617      	mov	r7, r2
 8013922:	4606      	mov	r6, r0
 8013924:	4698      	mov	r8, r3
 8013926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013928:	f000 80b3 	beq.w	8013a92 <_printf_i+0x182>
 801392c:	d822      	bhi.n	8013974 <_printf_i+0x64>
 801392e:	2963      	cmp	r1, #99	; 0x63
 8013930:	d036      	beq.n	80139a0 <_printf_i+0x90>
 8013932:	d80a      	bhi.n	801394a <_printf_i+0x3a>
 8013934:	2900      	cmp	r1, #0
 8013936:	f000 80b9 	beq.w	8013aac <_printf_i+0x19c>
 801393a:	2958      	cmp	r1, #88	; 0x58
 801393c:	f000 8083 	beq.w	8013a46 <_printf_i+0x136>
 8013940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013944:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013948:	e032      	b.n	80139b0 <_printf_i+0xa0>
 801394a:	2964      	cmp	r1, #100	; 0x64
 801394c:	d001      	beq.n	8013952 <_printf_i+0x42>
 801394e:	2969      	cmp	r1, #105	; 0x69
 8013950:	d1f6      	bne.n	8013940 <_printf_i+0x30>
 8013952:	6820      	ldr	r0, [r4, #0]
 8013954:	6813      	ldr	r3, [r2, #0]
 8013956:	0605      	lsls	r5, r0, #24
 8013958:	f103 0104 	add.w	r1, r3, #4
 801395c:	d52a      	bpl.n	80139b4 <_printf_i+0xa4>
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	6011      	str	r1, [r2, #0]
 8013962:	2b00      	cmp	r3, #0
 8013964:	da03      	bge.n	801396e <_printf_i+0x5e>
 8013966:	222d      	movs	r2, #45	; 0x2d
 8013968:	425b      	negs	r3, r3
 801396a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801396e:	486f      	ldr	r0, [pc, #444]	; (8013b2c <_printf_i+0x21c>)
 8013970:	220a      	movs	r2, #10
 8013972:	e039      	b.n	80139e8 <_printf_i+0xd8>
 8013974:	2973      	cmp	r1, #115	; 0x73
 8013976:	f000 809d 	beq.w	8013ab4 <_printf_i+0x1a4>
 801397a:	d808      	bhi.n	801398e <_printf_i+0x7e>
 801397c:	296f      	cmp	r1, #111	; 0x6f
 801397e:	d020      	beq.n	80139c2 <_printf_i+0xb2>
 8013980:	2970      	cmp	r1, #112	; 0x70
 8013982:	d1dd      	bne.n	8013940 <_printf_i+0x30>
 8013984:	6823      	ldr	r3, [r4, #0]
 8013986:	f043 0320 	orr.w	r3, r3, #32
 801398a:	6023      	str	r3, [r4, #0]
 801398c:	e003      	b.n	8013996 <_printf_i+0x86>
 801398e:	2975      	cmp	r1, #117	; 0x75
 8013990:	d017      	beq.n	80139c2 <_printf_i+0xb2>
 8013992:	2978      	cmp	r1, #120	; 0x78
 8013994:	d1d4      	bne.n	8013940 <_printf_i+0x30>
 8013996:	2378      	movs	r3, #120	; 0x78
 8013998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801399c:	4864      	ldr	r0, [pc, #400]	; (8013b30 <_printf_i+0x220>)
 801399e:	e055      	b.n	8013a4c <_printf_i+0x13c>
 80139a0:	6813      	ldr	r3, [r2, #0]
 80139a2:	1d19      	adds	r1, r3, #4
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	6011      	str	r1, [r2, #0]
 80139a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139b0:	2301      	movs	r3, #1
 80139b2:	e08c      	b.n	8013ace <_printf_i+0x1be>
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	6011      	str	r1, [r2, #0]
 80139b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80139bc:	bf18      	it	ne
 80139be:	b21b      	sxthne	r3, r3
 80139c0:	e7cf      	b.n	8013962 <_printf_i+0x52>
 80139c2:	6813      	ldr	r3, [r2, #0]
 80139c4:	6825      	ldr	r5, [r4, #0]
 80139c6:	1d18      	adds	r0, r3, #4
 80139c8:	6010      	str	r0, [r2, #0]
 80139ca:	0628      	lsls	r0, r5, #24
 80139cc:	d501      	bpl.n	80139d2 <_printf_i+0xc2>
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	e002      	b.n	80139d8 <_printf_i+0xc8>
 80139d2:	0668      	lsls	r0, r5, #25
 80139d4:	d5fb      	bpl.n	80139ce <_printf_i+0xbe>
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	4854      	ldr	r0, [pc, #336]	; (8013b2c <_printf_i+0x21c>)
 80139da:	296f      	cmp	r1, #111	; 0x6f
 80139dc:	bf14      	ite	ne
 80139de:	220a      	movne	r2, #10
 80139e0:	2208      	moveq	r2, #8
 80139e2:	2100      	movs	r1, #0
 80139e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139e8:	6865      	ldr	r5, [r4, #4]
 80139ea:	60a5      	str	r5, [r4, #8]
 80139ec:	2d00      	cmp	r5, #0
 80139ee:	f2c0 8095 	blt.w	8013b1c <_printf_i+0x20c>
 80139f2:	6821      	ldr	r1, [r4, #0]
 80139f4:	f021 0104 	bic.w	r1, r1, #4
 80139f8:	6021      	str	r1, [r4, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d13d      	bne.n	8013a7a <_printf_i+0x16a>
 80139fe:	2d00      	cmp	r5, #0
 8013a00:	f040 808e 	bne.w	8013b20 <_printf_i+0x210>
 8013a04:	4665      	mov	r5, ip
 8013a06:	2a08      	cmp	r2, #8
 8013a08:	d10b      	bne.n	8013a22 <_printf_i+0x112>
 8013a0a:	6823      	ldr	r3, [r4, #0]
 8013a0c:	07db      	lsls	r3, r3, #31
 8013a0e:	d508      	bpl.n	8013a22 <_printf_i+0x112>
 8013a10:	6923      	ldr	r3, [r4, #16]
 8013a12:	6862      	ldr	r2, [r4, #4]
 8013a14:	429a      	cmp	r2, r3
 8013a16:	bfde      	ittt	le
 8013a18:	2330      	movle	r3, #48	; 0x30
 8013a1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a22:	ebac 0305 	sub.w	r3, ip, r5
 8013a26:	6123      	str	r3, [r4, #16]
 8013a28:	f8cd 8000 	str.w	r8, [sp]
 8013a2c:	463b      	mov	r3, r7
 8013a2e:	aa03      	add	r2, sp, #12
 8013a30:	4621      	mov	r1, r4
 8013a32:	4630      	mov	r0, r6
 8013a34:	f7ff fef6 	bl	8013824 <_printf_common>
 8013a38:	3001      	adds	r0, #1
 8013a3a:	d14d      	bne.n	8013ad8 <_printf_i+0x1c8>
 8013a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a40:	b005      	add	sp, #20
 8013a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a46:	4839      	ldr	r0, [pc, #228]	; (8013b2c <_printf_i+0x21c>)
 8013a48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013a4c:	6813      	ldr	r3, [r2, #0]
 8013a4e:	6821      	ldr	r1, [r4, #0]
 8013a50:	1d1d      	adds	r5, r3, #4
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	6015      	str	r5, [r2, #0]
 8013a56:	060a      	lsls	r2, r1, #24
 8013a58:	d50b      	bpl.n	8013a72 <_printf_i+0x162>
 8013a5a:	07ca      	lsls	r2, r1, #31
 8013a5c:	bf44      	itt	mi
 8013a5e:	f041 0120 	orrmi.w	r1, r1, #32
 8013a62:	6021      	strmi	r1, [r4, #0]
 8013a64:	b91b      	cbnz	r3, 8013a6e <_printf_i+0x15e>
 8013a66:	6822      	ldr	r2, [r4, #0]
 8013a68:	f022 0220 	bic.w	r2, r2, #32
 8013a6c:	6022      	str	r2, [r4, #0]
 8013a6e:	2210      	movs	r2, #16
 8013a70:	e7b7      	b.n	80139e2 <_printf_i+0xd2>
 8013a72:	064d      	lsls	r5, r1, #25
 8013a74:	bf48      	it	mi
 8013a76:	b29b      	uxthmi	r3, r3
 8013a78:	e7ef      	b.n	8013a5a <_printf_i+0x14a>
 8013a7a:	4665      	mov	r5, ip
 8013a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a80:	fb02 3311 	mls	r3, r2, r1, r3
 8013a84:	5cc3      	ldrb	r3, [r0, r3]
 8013a86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	2900      	cmp	r1, #0
 8013a8e:	d1f5      	bne.n	8013a7c <_printf_i+0x16c>
 8013a90:	e7b9      	b.n	8013a06 <_printf_i+0xf6>
 8013a92:	6813      	ldr	r3, [r2, #0]
 8013a94:	6825      	ldr	r5, [r4, #0]
 8013a96:	6961      	ldr	r1, [r4, #20]
 8013a98:	1d18      	adds	r0, r3, #4
 8013a9a:	6010      	str	r0, [r2, #0]
 8013a9c:	0628      	lsls	r0, r5, #24
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	d501      	bpl.n	8013aa6 <_printf_i+0x196>
 8013aa2:	6019      	str	r1, [r3, #0]
 8013aa4:	e002      	b.n	8013aac <_printf_i+0x19c>
 8013aa6:	066a      	lsls	r2, r5, #25
 8013aa8:	d5fb      	bpl.n	8013aa2 <_printf_i+0x192>
 8013aaa:	8019      	strh	r1, [r3, #0]
 8013aac:	2300      	movs	r3, #0
 8013aae:	6123      	str	r3, [r4, #16]
 8013ab0:	4665      	mov	r5, ip
 8013ab2:	e7b9      	b.n	8013a28 <_printf_i+0x118>
 8013ab4:	6813      	ldr	r3, [r2, #0]
 8013ab6:	1d19      	adds	r1, r3, #4
 8013ab8:	6011      	str	r1, [r2, #0]
 8013aba:	681d      	ldr	r5, [r3, #0]
 8013abc:	6862      	ldr	r2, [r4, #4]
 8013abe:	2100      	movs	r1, #0
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7ec fb8d 	bl	80001e0 <memchr>
 8013ac6:	b108      	cbz	r0, 8013acc <_printf_i+0x1bc>
 8013ac8:	1b40      	subs	r0, r0, r5
 8013aca:	6060      	str	r0, [r4, #4]
 8013acc:	6863      	ldr	r3, [r4, #4]
 8013ace:	6123      	str	r3, [r4, #16]
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ad6:	e7a7      	b.n	8013a28 <_printf_i+0x118>
 8013ad8:	6923      	ldr	r3, [r4, #16]
 8013ada:	462a      	mov	r2, r5
 8013adc:	4639      	mov	r1, r7
 8013ade:	4630      	mov	r0, r6
 8013ae0:	47c0      	blx	r8
 8013ae2:	3001      	adds	r0, #1
 8013ae4:	d0aa      	beq.n	8013a3c <_printf_i+0x12c>
 8013ae6:	6823      	ldr	r3, [r4, #0]
 8013ae8:	079b      	lsls	r3, r3, #30
 8013aea:	d413      	bmi.n	8013b14 <_printf_i+0x204>
 8013aec:	68e0      	ldr	r0, [r4, #12]
 8013aee:	9b03      	ldr	r3, [sp, #12]
 8013af0:	4298      	cmp	r0, r3
 8013af2:	bfb8      	it	lt
 8013af4:	4618      	movlt	r0, r3
 8013af6:	e7a3      	b.n	8013a40 <_printf_i+0x130>
 8013af8:	2301      	movs	r3, #1
 8013afa:	464a      	mov	r2, r9
 8013afc:	4639      	mov	r1, r7
 8013afe:	4630      	mov	r0, r6
 8013b00:	47c0      	blx	r8
 8013b02:	3001      	adds	r0, #1
 8013b04:	d09a      	beq.n	8013a3c <_printf_i+0x12c>
 8013b06:	3501      	adds	r5, #1
 8013b08:	68e3      	ldr	r3, [r4, #12]
 8013b0a:	9a03      	ldr	r2, [sp, #12]
 8013b0c:	1a9b      	subs	r3, r3, r2
 8013b0e:	42ab      	cmp	r3, r5
 8013b10:	dcf2      	bgt.n	8013af8 <_printf_i+0x1e8>
 8013b12:	e7eb      	b.n	8013aec <_printf_i+0x1dc>
 8013b14:	2500      	movs	r5, #0
 8013b16:	f104 0919 	add.w	r9, r4, #25
 8013b1a:	e7f5      	b.n	8013b08 <_printf_i+0x1f8>
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d1ac      	bne.n	8013a7a <_printf_i+0x16a>
 8013b20:	7803      	ldrb	r3, [r0, #0]
 8013b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b2a:	e76c      	b.n	8013a06 <_printf_i+0xf6>
 8013b2c:	08014ff3 	.word	0x08014ff3
 8013b30:	08015004 	.word	0x08015004

08013b34 <_sbrk_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	4c06      	ldr	r4, [pc, #24]	; (8013b50 <_sbrk_r+0x1c>)
 8013b38:	2300      	movs	r3, #0
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	4608      	mov	r0, r1
 8013b3e:	6023      	str	r3, [r4, #0]
 8013b40:	f7ef fde2 	bl	8003708 <_sbrk>
 8013b44:	1c43      	adds	r3, r0, #1
 8013b46:	d102      	bne.n	8013b4e <_sbrk_r+0x1a>
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	b103      	cbz	r3, 8013b4e <_sbrk_r+0x1a>
 8013b4c:	602b      	str	r3, [r5, #0]
 8013b4e:	bd38      	pop	{r3, r4, r5, pc}
 8013b50:	20004140 	.word	0x20004140

08013b54 <__sread>:
 8013b54:	b510      	push	{r4, lr}
 8013b56:	460c      	mov	r4, r1
 8013b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b5c:	f000 f8e2 	bl	8013d24 <_read_r>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	bfab      	itete	ge
 8013b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b66:	89a3      	ldrhlt	r3, [r4, #12]
 8013b68:	181b      	addge	r3, r3, r0
 8013b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b6e:	bfac      	ite	ge
 8013b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b72:	81a3      	strhlt	r3, [r4, #12]
 8013b74:	bd10      	pop	{r4, pc}

08013b76 <__swrite>:
 8013b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7a:	461f      	mov	r7, r3
 8013b7c:	898b      	ldrh	r3, [r1, #12]
 8013b7e:	05db      	lsls	r3, r3, #23
 8013b80:	4605      	mov	r5, r0
 8013b82:	460c      	mov	r4, r1
 8013b84:	4616      	mov	r6, r2
 8013b86:	d505      	bpl.n	8013b94 <__swrite+0x1e>
 8013b88:	2302      	movs	r3, #2
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b90:	f000 f874 	bl	8013c7c <_lseek_r>
 8013b94:	89a3      	ldrh	r3, [r4, #12]
 8013b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b9e:	81a3      	strh	r3, [r4, #12]
 8013ba0:	4632      	mov	r2, r6
 8013ba2:	463b      	mov	r3, r7
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013baa:	f000 b823 	b.w	8013bf4 <_write_r>

08013bae <__sseek>:
 8013bae:	b510      	push	{r4, lr}
 8013bb0:	460c      	mov	r4, r1
 8013bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb6:	f000 f861 	bl	8013c7c <_lseek_r>
 8013bba:	1c43      	adds	r3, r0, #1
 8013bbc:	89a3      	ldrh	r3, [r4, #12]
 8013bbe:	bf15      	itete	ne
 8013bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013bca:	81a3      	strheq	r3, [r4, #12]
 8013bcc:	bf18      	it	ne
 8013bce:	81a3      	strhne	r3, [r4, #12]
 8013bd0:	bd10      	pop	{r4, pc}

08013bd2 <__sclose>:
 8013bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bd6:	f000 b81f 	b.w	8013c18 <_close_r>

08013bda <__ascii_wctomb>:
 8013bda:	b149      	cbz	r1, 8013bf0 <__ascii_wctomb+0x16>
 8013bdc:	2aff      	cmp	r2, #255	; 0xff
 8013bde:	bf85      	ittet	hi
 8013be0:	238a      	movhi	r3, #138	; 0x8a
 8013be2:	6003      	strhi	r3, [r0, #0]
 8013be4:	700a      	strbls	r2, [r1, #0]
 8013be6:	f04f 30ff 	movhi.w	r0, #4294967295
 8013bea:	bf98      	it	ls
 8013bec:	2001      	movls	r0, #1
 8013bee:	4770      	bx	lr
 8013bf0:	4608      	mov	r0, r1
 8013bf2:	4770      	bx	lr

08013bf4 <_write_r>:
 8013bf4:	b538      	push	{r3, r4, r5, lr}
 8013bf6:	4c07      	ldr	r4, [pc, #28]	; (8013c14 <_write_r+0x20>)
 8013bf8:	4605      	mov	r5, r0
 8013bfa:	4608      	mov	r0, r1
 8013bfc:	4611      	mov	r1, r2
 8013bfe:	2200      	movs	r2, #0
 8013c00:	6022      	str	r2, [r4, #0]
 8013c02:	461a      	mov	r2, r3
 8013c04:	f7ef fd30 	bl	8003668 <_write>
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	d102      	bne.n	8013c12 <_write_r+0x1e>
 8013c0c:	6823      	ldr	r3, [r4, #0]
 8013c0e:	b103      	cbz	r3, 8013c12 <_write_r+0x1e>
 8013c10:	602b      	str	r3, [r5, #0]
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	20004140 	.word	0x20004140

08013c18 <_close_r>:
 8013c18:	b538      	push	{r3, r4, r5, lr}
 8013c1a:	4c06      	ldr	r4, [pc, #24]	; (8013c34 <_close_r+0x1c>)
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	4605      	mov	r5, r0
 8013c20:	4608      	mov	r0, r1
 8013c22:	6023      	str	r3, [r4, #0]
 8013c24:	f7ef fd3c 	bl	80036a0 <_close>
 8013c28:	1c43      	adds	r3, r0, #1
 8013c2a:	d102      	bne.n	8013c32 <_close_r+0x1a>
 8013c2c:	6823      	ldr	r3, [r4, #0]
 8013c2e:	b103      	cbz	r3, 8013c32 <_close_r+0x1a>
 8013c30:	602b      	str	r3, [r5, #0]
 8013c32:	bd38      	pop	{r3, r4, r5, pc}
 8013c34:	20004140 	.word	0x20004140

08013c38 <_fstat_r>:
 8013c38:	b538      	push	{r3, r4, r5, lr}
 8013c3a:	4c07      	ldr	r4, [pc, #28]	; (8013c58 <_fstat_r+0x20>)
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	4605      	mov	r5, r0
 8013c40:	4608      	mov	r0, r1
 8013c42:	4611      	mov	r1, r2
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	f7ef fd37 	bl	80036b8 <_fstat>
 8013c4a:	1c43      	adds	r3, r0, #1
 8013c4c:	d102      	bne.n	8013c54 <_fstat_r+0x1c>
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	b103      	cbz	r3, 8013c54 <_fstat_r+0x1c>
 8013c52:	602b      	str	r3, [r5, #0]
 8013c54:	bd38      	pop	{r3, r4, r5, pc}
 8013c56:	bf00      	nop
 8013c58:	20004140 	.word	0x20004140

08013c5c <_isatty_r>:
 8013c5c:	b538      	push	{r3, r4, r5, lr}
 8013c5e:	4c06      	ldr	r4, [pc, #24]	; (8013c78 <_isatty_r+0x1c>)
 8013c60:	2300      	movs	r3, #0
 8013c62:	4605      	mov	r5, r0
 8013c64:	4608      	mov	r0, r1
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	f7ef fd36 	bl	80036d8 <_isatty>
 8013c6c:	1c43      	adds	r3, r0, #1
 8013c6e:	d102      	bne.n	8013c76 <_isatty_r+0x1a>
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	b103      	cbz	r3, 8013c76 <_isatty_r+0x1a>
 8013c74:	602b      	str	r3, [r5, #0]
 8013c76:	bd38      	pop	{r3, r4, r5, pc}
 8013c78:	20004140 	.word	0x20004140

08013c7c <_lseek_r>:
 8013c7c:	b538      	push	{r3, r4, r5, lr}
 8013c7e:	4c07      	ldr	r4, [pc, #28]	; (8013c9c <_lseek_r+0x20>)
 8013c80:	4605      	mov	r5, r0
 8013c82:	4608      	mov	r0, r1
 8013c84:	4611      	mov	r1, r2
 8013c86:	2200      	movs	r2, #0
 8013c88:	6022      	str	r2, [r4, #0]
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	f7ef fd2f 	bl	80036ee <_lseek>
 8013c90:	1c43      	adds	r3, r0, #1
 8013c92:	d102      	bne.n	8013c9a <_lseek_r+0x1e>
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	b103      	cbz	r3, 8013c9a <_lseek_r+0x1e>
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	bd38      	pop	{r3, r4, r5, pc}
 8013c9c:	20004140 	.word	0x20004140

08013ca0 <memmove>:
 8013ca0:	4288      	cmp	r0, r1
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	eb01 0302 	add.w	r3, r1, r2
 8013ca8:	d807      	bhi.n	8013cba <memmove+0x1a>
 8013caa:	1e42      	subs	r2, r0, #1
 8013cac:	4299      	cmp	r1, r3
 8013cae:	d00a      	beq.n	8013cc6 <memmove+0x26>
 8013cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cb4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013cb8:	e7f8      	b.n	8013cac <memmove+0xc>
 8013cba:	4283      	cmp	r3, r0
 8013cbc:	d9f5      	bls.n	8013caa <memmove+0xa>
 8013cbe:	1881      	adds	r1, r0, r2
 8013cc0:	1ad2      	subs	r2, r2, r3
 8013cc2:	42d3      	cmn	r3, r2
 8013cc4:	d100      	bne.n	8013cc8 <memmove+0x28>
 8013cc6:	bd10      	pop	{r4, pc}
 8013cc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ccc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013cd0:	e7f7      	b.n	8013cc2 <memmove+0x22>

08013cd2 <__malloc_lock>:
 8013cd2:	4770      	bx	lr

08013cd4 <__malloc_unlock>:
 8013cd4:	4770      	bx	lr

08013cd6 <_realloc_r>:
 8013cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd8:	4607      	mov	r7, r0
 8013cda:	4614      	mov	r4, r2
 8013cdc:	460e      	mov	r6, r1
 8013cde:	b921      	cbnz	r1, 8013cea <_realloc_r+0x14>
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013ce6:	f7ff bab1 	b.w	801324c <_malloc_r>
 8013cea:	b922      	cbnz	r2, 8013cf6 <_realloc_r+0x20>
 8013cec:	f7ff fa60 	bl	80131b0 <_free_r>
 8013cf0:	4625      	mov	r5, r4
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cf6:	f000 f827 	bl	8013d48 <_malloc_usable_size_r>
 8013cfa:	42a0      	cmp	r0, r4
 8013cfc:	d20f      	bcs.n	8013d1e <_realloc_r+0x48>
 8013cfe:	4621      	mov	r1, r4
 8013d00:	4638      	mov	r0, r7
 8013d02:	f7ff faa3 	bl	801324c <_malloc_r>
 8013d06:	4605      	mov	r5, r0
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d0f2      	beq.n	8013cf2 <_realloc_r+0x1c>
 8013d0c:	4631      	mov	r1, r6
 8013d0e:	4622      	mov	r2, r4
 8013d10:	f7fe fd91 	bl	8012836 <memcpy>
 8013d14:	4631      	mov	r1, r6
 8013d16:	4638      	mov	r0, r7
 8013d18:	f7ff fa4a 	bl	80131b0 <_free_r>
 8013d1c:	e7e9      	b.n	8013cf2 <_realloc_r+0x1c>
 8013d1e:	4635      	mov	r5, r6
 8013d20:	e7e7      	b.n	8013cf2 <_realloc_r+0x1c>
	...

08013d24 <_read_r>:
 8013d24:	b538      	push	{r3, r4, r5, lr}
 8013d26:	4c07      	ldr	r4, [pc, #28]	; (8013d44 <_read_r+0x20>)
 8013d28:	4605      	mov	r5, r0
 8013d2a:	4608      	mov	r0, r1
 8013d2c:	4611      	mov	r1, r2
 8013d2e:	2200      	movs	r2, #0
 8013d30:	6022      	str	r2, [r4, #0]
 8013d32:	461a      	mov	r2, r3
 8013d34:	f7ef fc7b 	bl	800362e <_read>
 8013d38:	1c43      	adds	r3, r0, #1
 8013d3a:	d102      	bne.n	8013d42 <_read_r+0x1e>
 8013d3c:	6823      	ldr	r3, [r4, #0]
 8013d3e:	b103      	cbz	r3, 8013d42 <_read_r+0x1e>
 8013d40:	602b      	str	r3, [r5, #0]
 8013d42:	bd38      	pop	{r3, r4, r5, pc}
 8013d44:	20004140 	.word	0x20004140

08013d48 <_malloc_usable_size_r>:
 8013d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d4c:	1f18      	subs	r0, r3, #4
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	bfbc      	itt	lt
 8013d52:	580b      	ldrlt	r3, [r1, r0]
 8013d54:	18c0      	addlt	r0, r0, r3
 8013d56:	4770      	bx	lr

08013d58 <trunc>:
 8013d58:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8013d5c:	ec5c bb10 	vmov	fp, ip, d0
 8013d60:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8013d64:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8013d68:	2913      	cmp	r1, #19
 8013d6a:	4664      	mov	r4, ip
 8013d6c:	dc11      	bgt.n	8013d92 <trunc+0x3a>
 8013d6e:	2900      	cmp	r1, #0
 8013d70:	bfa7      	ittee	ge
 8013d72:	4b15      	ldrge	r3, [pc, #84]	; (8013dc8 <trunc+0x70>)
 8013d74:	fa43 f101 	asrge.w	r1, r3, r1
 8013d78:	2200      	movlt	r2, #0
 8013d7a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8013d7e:	bfa4      	itt	ge
 8013d80:	2200      	movge	r2, #0
 8013d82:	ea2c 0301 	bicge.w	r3, ip, r1
 8013d86:	4693      	mov	fp, r2
 8013d88:	469c      	mov	ip, r3
 8013d8a:	ec4c bb10 	vmov	d0, fp, ip
 8013d8e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8013d92:	2933      	cmp	r1, #51	; 0x33
 8013d94:	dd0d      	ble.n	8013db2 <trunc+0x5a>
 8013d96:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013d9a:	d1f6      	bne.n	8013d8a <trunc+0x32>
 8013d9c:	4663      	mov	r3, ip
 8013d9e:	ee10 2a10 	vmov	r2, s0
 8013da2:	ee10 0a10 	vmov	r0, s0
 8013da6:	4621      	mov	r1, r4
 8013da8:	f7ec fa70 	bl	800028c <__adddf3>
 8013dac:	4683      	mov	fp, r0
 8013dae:	468c      	mov	ip, r1
 8013db0:	e7eb      	b.n	8013d8a <trunc+0x32>
 8013db2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8013db6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dba:	fa23 f000 	lsr.w	r0, r3, r0
 8013dbe:	ea2b 0600 	bic.w	r6, fp, r0
 8013dc2:	46b3      	mov	fp, r6
 8013dc4:	46a4      	mov	ip, r4
 8013dc6:	e7e0      	b.n	8013d8a <trunc+0x32>
 8013dc8:	000fffff 	.word	0x000fffff

08013dcc <_init>:
 8013dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dce:	bf00      	nop
 8013dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dd2:	bc08      	pop	{r3}
 8013dd4:	469e      	mov	lr, r3
 8013dd6:	4770      	bx	lr

08013dd8 <_fini>:
 8013dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dda:	bf00      	nop
 8013ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dde:	bc08      	pop	{r3}
 8013de0:	469e      	mov	lr, r3
 8013de2:	4770      	bx	lr
